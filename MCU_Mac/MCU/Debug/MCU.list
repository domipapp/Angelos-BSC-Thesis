
MCU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f304  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000640  0800f5a8  0800f5a8  0001f5a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800fbe8  0800fbe8  0001fbe8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800fbf0  0800fbf0  0001fbf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800fbf4  0800fbf4  0001fbf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001e4  24000000  0800fbf8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00005998  240001e4  0800fddc  000201e4  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24005b7c  0800fddc  00025b7c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  00020212  2**0
                  CONTENTS, READONLY
 11 .debug_info   00026cb7  00000000  00000000  00020255  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 0000463b  00000000  00000000  00046f0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001c88  00000000  00000000  0004b548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 0000164b  00000000  00000000  0004d1d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00005fb3  00000000  00000000  0004e81b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00025952  00000000  00000000  000547ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    001725ef  00000000  00000000  0007a120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00008930  00000000  00000000  001ec710  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000052  00000000  00000000  001f5040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001e4 	.word	0x240001e4
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800f58c 	.word	0x0800f58c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001e8 	.word	0x240001e8
 80002dc:	0800f58c 	.word	0x0800f58c

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b970 	b.w	8000688 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9e08      	ldr	r6, [sp, #32]
 80003c6:	460d      	mov	r5, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	460f      	mov	r7, r1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d14a      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4694      	mov	ip, r2
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0xe2>
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	b143      	cbz	r3, 80003ee <__udivmoddi4+0x2e>
 80003dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80003e0:	f1c3 0220 	rsb	r2, r3, #32
 80003e4:	409f      	lsls	r7, r3
 80003e6:	fa20 f202 	lsr.w	r2, r0, r2
 80003ea:	4317      	orrs	r7, r2
 80003ec:	409c      	lsls	r4, r3
 80003ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003f2:	fa1f f58c 	uxth.w	r5, ip
 80003f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80003fa:	0c22      	lsrs	r2, r4, #16
 80003fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000400:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000404:	fb01 f005 	mul.w	r0, r1, r5
 8000408:	4290      	cmp	r0, r2
 800040a:	d90a      	bls.n	8000422 <__udivmoddi4+0x62>
 800040c:	eb1c 0202 	adds.w	r2, ip, r2
 8000410:	f101 37ff 	add.w	r7, r1, #4294967295
 8000414:	f080 811c 	bcs.w	8000650 <__udivmoddi4+0x290>
 8000418:	4290      	cmp	r0, r2
 800041a:	f240 8119 	bls.w	8000650 <__udivmoddi4+0x290>
 800041e:	3902      	subs	r1, #2
 8000420:	4462      	add	r2, ip
 8000422:	1a12      	subs	r2, r2, r0
 8000424:	b2a4      	uxth	r4, r4
 8000426:	fbb2 f0fe 	udiv	r0, r2, lr
 800042a:	fb0e 2210 	mls	r2, lr, r0, r2
 800042e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000432:	fb00 f505 	mul.w	r5, r0, r5
 8000436:	42a5      	cmp	r5, r4
 8000438:	d90a      	bls.n	8000450 <__udivmoddi4+0x90>
 800043a:	eb1c 0404 	adds.w	r4, ip, r4
 800043e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000442:	f080 8107 	bcs.w	8000654 <__udivmoddi4+0x294>
 8000446:	42a5      	cmp	r5, r4
 8000448:	f240 8104 	bls.w	8000654 <__udivmoddi4+0x294>
 800044c:	4464      	add	r4, ip
 800044e:	3802      	subs	r0, #2
 8000450:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000454:	1b64      	subs	r4, r4, r5
 8000456:	2100      	movs	r1, #0
 8000458:	b11e      	cbz	r6, 8000462 <__udivmoddi4+0xa2>
 800045a:	40dc      	lsrs	r4, r3
 800045c:	2300      	movs	r3, #0
 800045e:	e9c6 4300 	strd	r4, r3, [r6]
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0xbc>
 800046a:	2e00      	cmp	r6, #0
 800046c:	f000 80ed 	beq.w	800064a <__udivmoddi4+0x28a>
 8000470:	2100      	movs	r1, #0
 8000472:	e9c6 0500 	strd	r0, r5, [r6]
 8000476:	4608      	mov	r0, r1
 8000478:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047c:	fab3 f183 	clz	r1, r3
 8000480:	2900      	cmp	r1, #0
 8000482:	d149      	bne.n	8000518 <__udivmoddi4+0x158>
 8000484:	42ab      	cmp	r3, r5
 8000486:	d302      	bcc.n	800048e <__udivmoddi4+0xce>
 8000488:	4282      	cmp	r2, r0
 800048a:	f200 80f8 	bhi.w	800067e <__udivmoddi4+0x2be>
 800048e:	1a84      	subs	r4, r0, r2
 8000490:	eb65 0203 	sbc.w	r2, r5, r3
 8000494:	2001      	movs	r0, #1
 8000496:	4617      	mov	r7, r2
 8000498:	2e00      	cmp	r6, #0
 800049a:	d0e2      	beq.n	8000462 <__udivmoddi4+0xa2>
 800049c:	e9c6 4700 	strd	r4, r7, [r6]
 80004a0:	e7df      	b.n	8000462 <__udivmoddi4+0xa2>
 80004a2:	b902      	cbnz	r2, 80004a6 <__udivmoddi4+0xe6>
 80004a4:	deff      	udf	#255	; 0xff
 80004a6:	fab2 f382 	clz	r3, r2
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	f040 8090 	bne.w	80005d0 <__udivmoddi4+0x210>
 80004b0:	1a8a      	subs	r2, r1, r2
 80004b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004b6:	fa1f fe8c 	uxth.w	lr, ip
 80004ba:	2101      	movs	r1, #1
 80004bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80004c0:	fb07 2015 	mls	r0, r7, r5, r2
 80004c4:	0c22      	lsrs	r2, r4, #16
 80004c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80004ca:	fb0e f005 	mul.w	r0, lr, r5
 80004ce:	4290      	cmp	r0, r2
 80004d0:	d908      	bls.n	80004e4 <__udivmoddi4+0x124>
 80004d2:	eb1c 0202 	adds.w	r2, ip, r2
 80004d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80004da:	d202      	bcs.n	80004e2 <__udivmoddi4+0x122>
 80004dc:	4290      	cmp	r0, r2
 80004de:	f200 80cb 	bhi.w	8000678 <__udivmoddi4+0x2b8>
 80004e2:	4645      	mov	r5, r8
 80004e4:	1a12      	subs	r2, r2, r0
 80004e6:	b2a4      	uxth	r4, r4
 80004e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80004ec:	fb07 2210 	mls	r2, r7, r0, r2
 80004f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80004f4:	fb0e fe00 	mul.w	lr, lr, r0
 80004f8:	45a6      	cmp	lr, r4
 80004fa:	d908      	bls.n	800050e <__udivmoddi4+0x14e>
 80004fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000500:	f100 32ff 	add.w	r2, r0, #4294967295
 8000504:	d202      	bcs.n	800050c <__udivmoddi4+0x14c>
 8000506:	45a6      	cmp	lr, r4
 8000508:	f200 80bb 	bhi.w	8000682 <__udivmoddi4+0x2c2>
 800050c:	4610      	mov	r0, r2
 800050e:	eba4 040e 	sub.w	r4, r4, lr
 8000512:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000516:	e79f      	b.n	8000458 <__udivmoddi4+0x98>
 8000518:	f1c1 0720 	rsb	r7, r1, #32
 800051c:	408b      	lsls	r3, r1
 800051e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000522:	ea4c 0c03 	orr.w	ip, ip, r3
 8000526:	fa05 f401 	lsl.w	r4, r5, r1
 800052a:	fa20 f307 	lsr.w	r3, r0, r7
 800052e:	40fd      	lsrs	r5, r7
 8000530:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000534:	4323      	orrs	r3, r4
 8000536:	fbb5 f8f9 	udiv	r8, r5, r9
 800053a:	fa1f fe8c 	uxth.w	lr, ip
 800053e:	fb09 5518 	mls	r5, r9, r8, r5
 8000542:	0c1c      	lsrs	r4, r3, #16
 8000544:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000548:	fb08 f50e 	mul.w	r5, r8, lr
 800054c:	42a5      	cmp	r5, r4
 800054e:	fa02 f201 	lsl.w	r2, r2, r1
 8000552:	fa00 f001 	lsl.w	r0, r0, r1
 8000556:	d90b      	bls.n	8000570 <__udivmoddi4+0x1b0>
 8000558:	eb1c 0404 	adds.w	r4, ip, r4
 800055c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000560:	f080 8088 	bcs.w	8000674 <__udivmoddi4+0x2b4>
 8000564:	42a5      	cmp	r5, r4
 8000566:	f240 8085 	bls.w	8000674 <__udivmoddi4+0x2b4>
 800056a:	f1a8 0802 	sub.w	r8, r8, #2
 800056e:	4464      	add	r4, ip
 8000570:	1b64      	subs	r4, r4, r5
 8000572:	b29d      	uxth	r5, r3
 8000574:	fbb4 f3f9 	udiv	r3, r4, r9
 8000578:	fb09 4413 	mls	r4, r9, r3, r4
 800057c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000580:	fb03 fe0e 	mul.w	lr, r3, lr
 8000584:	45a6      	cmp	lr, r4
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x1da>
 8000588:	eb1c 0404 	adds.w	r4, ip, r4
 800058c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000590:	d26c      	bcs.n	800066c <__udivmoddi4+0x2ac>
 8000592:	45a6      	cmp	lr, r4
 8000594:	d96a      	bls.n	800066c <__udivmoddi4+0x2ac>
 8000596:	3b02      	subs	r3, #2
 8000598:	4464      	add	r4, ip
 800059a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800059e:	fba3 9502 	umull	r9, r5, r3, r2
 80005a2:	eba4 040e 	sub.w	r4, r4, lr
 80005a6:	42ac      	cmp	r4, r5
 80005a8:	46c8      	mov	r8, r9
 80005aa:	46ae      	mov	lr, r5
 80005ac:	d356      	bcc.n	800065c <__udivmoddi4+0x29c>
 80005ae:	d053      	beq.n	8000658 <__udivmoddi4+0x298>
 80005b0:	b156      	cbz	r6, 80005c8 <__udivmoddi4+0x208>
 80005b2:	ebb0 0208 	subs.w	r2, r0, r8
 80005b6:	eb64 040e 	sbc.w	r4, r4, lr
 80005ba:	fa04 f707 	lsl.w	r7, r4, r7
 80005be:	40ca      	lsrs	r2, r1
 80005c0:	40cc      	lsrs	r4, r1
 80005c2:	4317      	orrs	r7, r2
 80005c4:	e9c6 7400 	strd	r7, r4, [r6]
 80005c8:	4618      	mov	r0, r3
 80005ca:	2100      	movs	r1, #0
 80005cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005d0:	f1c3 0120 	rsb	r1, r3, #32
 80005d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80005d8:	fa20 f201 	lsr.w	r2, r0, r1
 80005dc:	fa25 f101 	lsr.w	r1, r5, r1
 80005e0:	409d      	lsls	r5, r3
 80005e2:	432a      	orrs	r2, r5
 80005e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e8:	fa1f fe8c 	uxth.w	lr, ip
 80005ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80005f0:	fb07 1510 	mls	r5, r7, r0, r1
 80005f4:	0c11      	lsrs	r1, r2, #16
 80005f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80005fa:	fb00 f50e 	mul.w	r5, r0, lr
 80005fe:	428d      	cmp	r5, r1
 8000600:	fa04 f403 	lsl.w	r4, r4, r3
 8000604:	d908      	bls.n	8000618 <__udivmoddi4+0x258>
 8000606:	eb1c 0101 	adds.w	r1, ip, r1
 800060a:	f100 38ff 	add.w	r8, r0, #4294967295
 800060e:	d22f      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000610:	428d      	cmp	r5, r1
 8000612:	d92d      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000614:	3802      	subs	r0, #2
 8000616:	4461      	add	r1, ip
 8000618:	1b49      	subs	r1, r1, r5
 800061a:	b292      	uxth	r2, r2
 800061c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000620:	fb07 1115 	mls	r1, r7, r5, r1
 8000624:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000628:	fb05 f10e 	mul.w	r1, r5, lr
 800062c:	4291      	cmp	r1, r2
 800062e:	d908      	bls.n	8000642 <__udivmoddi4+0x282>
 8000630:	eb1c 0202 	adds.w	r2, ip, r2
 8000634:	f105 38ff 	add.w	r8, r5, #4294967295
 8000638:	d216      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 800063a:	4291      	cmp	r1, r2
 800063c:	d914      	bls.n	8000668 <__udivmoddi4+0x2a8>
 800063e:	3d02      	subs	r5, #2
 8000640:	4462      	add	r2, ip
 8000642:	1a52      	subs	r2, r2, r1
 8000644:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000648:	e738      	b.n	80004bc <__udivmoddi4+0xfc>
 800064a:	4631      	mov	r1, r6
 800064c:	4630      	mov	r0, r6
 800064e:	e708      	b.n	8000462 <__udivmoddi4+0xa2>
 8000650:	4639      	mov	r1, r7
 8000652:	e6e6      	b.n	8000422 <__udivmoddi4+0x62>
 8000654:	4610      	mov	r0, r2
 8000656:	e6fb      	b.n	8000450 <__udivmoddi4+0x90>
 8000658:	4548      	cmp	r0, r9
 800065a:	d2a9      	bcs.n	80005b0 <__udivmoddi4+0x1f0>
 800065c:	ebb9 0802 	subs.w	r8, r9, r2
 8000660:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000664:	3b01      	subs	r3, #1
 8000666:	e7a3      	b.n	80005b0 <__udivmoddi4+0x1f0>
 8000668:	4645      	mov	r5, r8
 800066a:	e7ea      	b.n	8000642 <__udivmoddi4+0x282>
 800066c:	462b      	mov	r3, r5
 800066e:	e794      	b.n	800059a <__udivmoddi4+0x1da>
 8000670:	4640      	mov	r0, r8
 8000672:	e7d1      	b.n	8000618 <__udivmoddi4+0x258>
 8000674:	46d0      	mov	r8, sl
 8000676:	e77b      	b.n	8000570 <__udivmoddi4+0x1b0>
 8000678:	3d02      	subs	r5, #2
 800067a:	4462      	add	r2, ip
 800067c:	e732      	b.n	80004e4 <__udivmoddi4+0x124>
 800067e:	4608      	mov	r0, r1
 8000680:	e70a      	b.n	8000498 <__udivmoddi4+0xd8>
 8000682:	4464      	add	r4, ip
 8000684:	3802      	subs	r0, #2
 8000686:	e742      	b.n	800050e <__udivmoddi4+0x14e>

08000688 <__aeabi_idiv0>:
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop

0800068c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000690:	f001 f898 	bl	80017c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000694:	f000 f88e 	bl	80007b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000698:	f000 f992 	bl	80009c0 <MX_GPIO_Init>
  MX_I2C4_Init();
 800069c:	f000 f8f4 	bl	8000888 <MX_I2C4_Init>
  MX_USART2_UART_Init();
 80006a0:	f000 f932 	bl	8000908 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80006a4:	f008 fca0 	bl	8008fe8 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of semaphoreHaltUntilString */
  semaphoreHaltUntilStringHandle = osSemaphoreNew(1, 1, &semaphoreHaltUntilString_attributes);
 80006a8:	4a29      	ldr	r2, [pc, #164]	; (8000750 <main+0xc4>)
 80006aa:	2101      	movs	r1, #1
 80006ac:	2001      	movs	r0, #1
 80006ae:	f008 fdb3 	bl	8009218 <osSemaphoreNew>
 80006b2:	4603      	mov	r3, r0
 80006b4:	4a27      	ldr	r2, [pc, #156]	; (8000754 <main+0xc8>)
 80006b6:	6013      	str	r3, [r2, #0]

  /* creation of semaphoreESPResponseValid */
  semaphoreESPResponseValidHandle = osSemaphoreNew(1, 1, &semaphoreESPResponseValid_attributes);
 80006b8:	4a27      	ldr	r2, [pc, #156]	; (8000758 <main+0xcc>)
 80006ba:	2101      	movs	r1, #1
 80006bc:	2001      	movs	r0, #1
 80006be:	f008 fdab 	bl	8009218 <osSemaphoreNew>
 80006c2:	4603      	mov	r3, r0
 80006c4:	4a25      	ldr	r2, [pc, #148]	; (800075c <main+0xd0>)
 80006c6:	6013      	str	r3, [r2, #0]

  /* creation of semaphoreESPSetUpFinished */
  semaphoreESPSetUpFinishedHandle = osSemaphoreNew(3, 3, &semaphoreESPSetUpFinished_attributes);
 80006c8:	4a25      	ldr	r2, [pc, #148]	; (8000760 <main+0xd4>)
 80006ca:	2103      	movs	r1, #3
 80006cc:	2003      	movs	r0, #3
 80006ce:	f008 fda3 	bl	8009218 <osSemaphoreNew>
 80006d2:	4603      	mov	r3, r0
 80006d4:	4a23      	ldr	r2, [pc, #140]	; (8000764 <main+0xd8>)
 80006d6:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of queueTempAndHumid */
  queueTempAndHumidHandle = osMessageQueueNew (16, sizeof(float), &queueTempAndHumid_attributes);
 80006d8:	4a23      	ldr	r2, [pc, #140]	; (8000768 <main+0xdc>)
 80006da:	2104      	movs	r1, #4
 80006dc:	2010      	movs	r0, #16
 80006de:	f008 febb 	bl	8009458 <osMessageQueueNew>
 80006e2:	4603      	mov	r3, r0
 80006e4:	4a21      	ldr	r2, [pc, #132]	; (800076c <main+0xe0>)
 80006e6:	6013      	str	r3, [r2, #0]

  /* creation of queueRxDataChar */
  queueRxDataCharHandle = osMessageQueueNew (512, sizeof(uint8_t), &queueRxDataChar_attributes);
 80006e8:	4a21      	ldr	r2, [pc, #132]	; (8000770 <main+0xe4>)
 80006ea:	2101      	movs	r1, #1
 80006ec:	f44f 7000 	mov.w	r0, #512	; 0x200
 80006f0:	f008 feb2 	bl	8009458 <osMessageQueueNew>
 80006f4:	4603      	mov	r3, r0
 80006f6:	4a1f      	ldr	r2, [pc, #124]	; (8000774 <main+0xe8>)
 80006f8:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80006fa:	4a1f      	ldr	r2, [pc, #124]	; (8000778 <main+0xec>)
 80006fc:	2100      	movs	r1, #0
 80006fe:	481f      	ldr	r0, [pc, #124]	; (800077c <main+0xf0>)
 8000700:	f008 fcbc 	bl	800907c <osThreadNew>
 8000704:	4603      	mov	r3, r0
 8000706:	4a1e      	ldr	r2, [pc, #120]	; (8000780 <main+0xf4>)
 8000708:	6013      	str	r3, [r2, #0]

  /* creation of SendDataWithESP */
  SendDataWithESPHandle = osThreadNew(prvTaskSendDataWithESP, NULL, &SendDataWithESP_attributes);
 800070a:	4a1e      	ldr	r2, [pc, #120]	; (8000784 <main+0xf8>)
 800070c:	2100      	movs	r1, #0
 800070e:	481e      	ldr	r0, [pc, #120]	; (8000788 <main+0xfc>)
 8000710:	f008 fcb4 	bl	800907c <osThreadNew>
 8000714:	4603      	mov	r3, r0
 8000716:	4a1d      	ldr	r2, [pc, #116]	; (800078c <main+0x100>)
 8000718:	6013      	str	r3, [r2, #0]

  /* creation of SetUpESP */
  SetUpESPHandle = osThreadNew(prvTaskSetUpESP, NULL, &SetUpESP_attributes);
 800071a:	4a1d      	ldr	r2, [pc, #116]	; (8000790 <main+0x104>)
 800071c:	2100      	movs	r1, #0
 800071e:	481d      	ldr	r0, [pc, #116]	; (8000794 <main+0x108>)
 8000720:	f008 fcac 	bl	800907c <osThreadNew>
 8000724:	4603      	mov	r3, r0
 8000726:	4a1c      	ldr	r2, [pc, #112]	; (8000798 <main+0x10c>)
 8000728:	6013      	str	r3, [r2, #0]

  /* creation of ReadSensorData */
  ReadSensorDataHandle = osThreadNew(prvTaskReadTempAndHumidity, NULL, &ReadSensorData_attributes);
 800072a:	4a1c      	ldr	r2, [pc, #112]	; (800079c <main+0x110>)
 800072c:	2100      	movs	r1, #0
 800072e:	481c      	ldr	r0, [pc, #112]	; (80007a0 <main+0x114>)
 8000730:	f008 fca4 	bl	800907c <osThreadNew>
 8000734:	4603      	mov	r3, r0
 8000736:	4a1b      	ldr	r2, [pc, #108]	; (80007a4 <main+0x118>)
 8000738:	6013      	str	r3, [r2, #0]

  /* creation of ReadESP */
  ReadESPHandle = osThreadNew(prvTaskReadESP, NULL, &ReadESP_attributes);
 800073a:	4a1b      	ldr	r2, [pc, #108]	; (80007a8 <main+0x11c>)
 800073c:	2100      	movs	r1, #0
 800073e:	481b      	ldr	r0, [pc, #108]	; (80007ac <main+0x120>)
 8000740:	f008 fc9c 	bl	800907c <osThreadNew>
 8000744:	4603      	mov	r3, r0
 8000746:	4a1a      	ldr	r2, [pc, #104]	; (80007b0 <main+0x124>)
 8000748:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800074a:	f008 fc71 	bl	8009030 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800074e:	e7fe      	b.n	800074e <main+0xc2>
 8000750:	0800f80c 	.word	0x0800f80c
 8000754:	24000da4 	.word	0x24000da4
 8000758:	0800f81c 	.word	0x0800f81c
 800075c:	24000da8 	.word	0x24000da8
 8000760:	0800f82c 	.word	0x0800f82c
 8000764:	24000dac 	.word	0x24000dac
 8000768:	0800f7dc 	.word	0x0800f7dc
 800076c:	24000d9c 	.word	0x24000d9c
 8000770:	0800f7f4 	.word	0x0800f7f4
 8000774:	24000da0 	.word	0x24000da0
 8000778:	0800f728 	.word	0x0800f728
 800077c:	08000ac9 	.word	0x08000ac9
 8000780:	240002e8 	.word	0x240002e8
 8000784:	0800f74c 	.word	0x0800f74c
 8000788:	08000ad9 	.word	0x08000ad9
 800078c:	240002ec 	.word	0x240002ec
 8000790:	0800f770 	.word	0x0800f770
 8000794:	08000c2d 	.word	0x08000c2d
 8000798:	24000598 	.word	0x24000598
 800079c:	0800f794 	.word	0x0800f794
 80007a0:	08000e9d 	.word	0x08000e9d
 80007a4:	24000844 	.word	0x24000844
 80007a8:	0800f7b8 	.word	0x0800f7b8
 80007ac:	08000f19 	.word	0x08000f19
 80007b0:	24000af0 	.word	0x24000af0

080007b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b09c      	sub	sp, #112	; 0x70
 80007b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007be:	224c      	movs	r2, #76	; 0x4c
 80007c0:	2100      	movs	r1, #0
 80007c2:	4618      	mov	r0, r3
 80007c4:	f00c fe23 	bl	800d40e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007c8:	1d3b      	adds	r3, r7, #4
 80007ca:	2220      	movs	r2, #32
 80007cc:	2100      	movs	r1, #0
 80007ce:	4618      	mov	r0, r3
 80007d0:	f00c fe1d 	bl	800d40e <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80007d4:	2002      	movs	r0, #2
 80007d6:	f002 fe33 	bl	8003440 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80007da:	2300      	movs	r3, #0
 80007dc:	603b      	str	r3, [r7, #0]
 80007de:	4b28      	ldr	r3, [pc, #160]	; (8000880 <SystemClock_Config+0xcc>)
 80007e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007e2:	4a27      	ldr	r2, [pc, #156]	; (8000880 <SystemClock_Config+0xcc>)
 80007e4:	f023 0301 	bic.w	r3, r3, #1
 80007e8:	62d3      	str	r3, [r2, #44]	; 0x2c
 80007ea:	4b25      	ldr	r3, [pc, #148]	; (8000880 <SystemClock_Config+0xcc>)
 80007ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007ee:	f003 0301 	and.w	r3, r3, #1
 80007f2:	603b      	str	r3, [r7, #0]
 80007f4:	4b23      	ldr	r3, [pc, #140]	; (8000884 <SystemClock_Config+0xd0>)
 80007f6:	699b      	ldr	r3, [r3, #24]
 80007f8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80007fc:	4a21      	ldr	r2, [pc, #132]	; (8000884 <SystemClock_Config+0xd0>)
 80007fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000802:	6193      	str	r3, [r2, #24]
 8000804:	4b1f      	ldr	r3, [pc, #124]	; (8000884 <SystemClock_Config+0xd0>)
 8000806:	699b      	ldr	r3, [r3, #24]
 8000808:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800080c:	603b      	str	r3, [r7, #0]
 800080e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000810:	bf00      	nop
 8000812:	4b1c      	ldr	r3, [pc, #112]	; (8000884 <SystemClock_Config+0xd0>)
 8000814:	699b      	ldr	r3, [r3, #24]
 8000816:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800081a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800081e:	d1f8      	bne.n	8000812 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000820:	2302      	movs	r3, #2
 8000822:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000824:	2301      	movs	r3, #1
 8000826:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000828:	2340      	movs	r3, #64	; 0x40
 800082a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800082c:	2300      	movs	r3, #0
 800082e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000830:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000834:	4618      	mov	r0, r3
 8000836:	f002 fe3d 	bl	80034b4 <HAL_RCC_OscConfig>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000840:	f000 fbd2 	bl	8000fe8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000844:	233f      	movs	r3, #63	; 0x3f
 8000846:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000848:	2300      	movs	r3, #0
 800084a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800084c:	2300      	movs	r3, #0
 800084e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000850:	2300      	movs	r3, #0
 8000852:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000854:	2300      	movs	r3, #0
 8000856:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000858:	2340      	movs	r3, #64	; 0x40
 800085a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800085c:	2300      	movs	r3, #0
 800085e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000860:	2340      	movs	r3, #64	; 0x40
 8000862:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000864:	1d3b      	adds	r3, r7, #4
 8000866:	2101      	movs	r1, #1
 8000868:	4618      	mov	r0, r3
 800086a:	f003 fa7d 	bl	8003d68 <HAL_RCC_ClockConfig>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d001      	beq.n	8000878 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000874:	f000 fbb8 	bl	8000fe8 <Error_Handler>
  }
}
 8000878:	bf00      	nop
 800087a:	3770      	adds	r7, #112	; 0x70
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}
 8000880:	58000400 	.word	0x58000400
 8000884:	58024800 	.word	0x58024800

08000888 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 800088c:	4b1b      	ldr	r3, [pc, #108]	; (80008fc <MX_I2C4_Init+0x74>)
 800088e:	4a1c      	ldr	r2, [pc, #112]	; (8000900 <MX_I2C4_Init+0x78>)
 8000890:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00707CBB;
 8000892:	4b1a      	ldr	r3, [pc, #104]	; (80008fc <MX_I2C4_Init+0x74>)
 8000894:	4a1b      	ldr	r2, [pc, #108]	; (8000904 <MX_I2C4_Init+0x7c>)
 8000896:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000898:	4b18      	ldr	r3, [pc, #96]	; (80008fc <MX_I2C4_Init+0x74>)
 800089a:	2200      	movs	r2, #0
 800089c:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800089e:	4b17      	ldr	r3, [pc, #92]	; (80008fc <MX_I2C4_Init+0x74>)
 80008a0:	2201      	movs	r2, #1
 80008a2:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008a4:	4b15      	ldr	r3, [pc, #84]	; (80008fc <MX_I2C4_Init+0x74>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 80008aa:	4b14      	ldr	r3, [pc, #80]	; (80008fc <MX_I2C4_Init+0x74>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008b0:	4b12      	ldr	r3, [pc, #72]	; (80008fc <MX_I2C4_Init+0x74>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008b6:	4b11      	ldr	r3, [pc, #68]	; (80008fc <MX_I2C4_Init+0x74>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008bc:	4b0f      	ldr	r3, [pc, #60]	; (80008fc <MX_I2C4_Init+0x74>)
 80008be:	2200      	movs	r2, #0
 80008c0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 80008c2:	480e      	ldr	r0, [pc, #56]	; (80008fc <MX_I2C4_Init+0x74>)
 80008c4:	f002 f818 	bl	80028f8 <HAL_I2C_Init>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 80008ce:	f000 fb8b 	bl	8000fe8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008d2:	2100      	movs	r1, #0
 80008d4:	4809      	ldr	r0, [pc, #36]	; (80008fc <MX_I2C4_Init+0x74>)
 80008d6:	f002 fd1b 	bl	8003310 <HAL_I2CEx_ConfigAnalogFilter>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 80008e0:	f000 fb82 	bl	8000fe8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 80008e4:	2100      	movs	r1, #0
 80008e6:	4805      	ldr	r0, [pc, #20]	; (80008fc <MX_I2C4_Init+0x74>)
 80008e8:	f002 fd5d 	bl	80033a6 <HAL_I2CEx_ConfigDigitalFilter>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 80008f2:	f000 fb79 	bl	8000fe8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 80008f6:	bf00      	nop
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	24000200 	.word	0x24000200
 8000900:	58001c00 	.word	0x58001c00
 8000904:	00707cbb 	.word	0x00707cbb

08000908 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800090c:	4b29      	ldr	r3, [pc, #164]	; (80009b4 <MX_USART2_UART_Init+0xac>)
 800090e:	4a2a      	ldr	r2, [pc, #168]	; (80009b8 <MX_USART2_UART_Init+0xb0>)
 8000910:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000912:	4b28      	ldr	r3, [pc, #160]	; (80009b4 <MX_USART2_UART_Init+0xac>)
 8000914:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000918:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800091a:	4b26      	ldr	r3, [pc, #152]	; (80009b4 <MX_USART2_UART_Init+0xac>)
 800091c:	2200      	movs	r2, #0
 800091e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000920:	4b24      	ldr	r3, [pc, #144]	; (80009b4 <MX_USART2_UART_Init+0xac>)
 8000922:	2200      	movs	r2, #0
 8000924:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000926:	4b23      	ldr	r3, [pc, #140]	; (80009b4 <MX_USART2_UART_Init+0xac>)
 8000928:	2200      	movs	r2, #0
 800092a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800092c:	4b21      	ldr	r3, [pc, #132]	; (80009b4 <MX_USART2_UART_Init+0xac>)
 800092e:	220c      	movs	r2, #12
 8000930:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000932:	4b20      	ldr	r3, [pc, #128]	; (80009b4 <MX_USART2_UART_Init+0xac>)
 8000934:	2200      	movs	r2, #0
 8000936:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000938:	4b1e      	ldr	r3, [pc, #120]	; (80009b4 <MX_USART2_UART_Init+0xac>)
 800093a:	2200      	movs	r2, #0
 800093c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800093e:	4b1d      	ldr	r3, [pc, #116]	; (80009b4 <MX_USART2_UART_Init+0xac>)
 8000940:	2200      	movs	r2, #0
 8000942:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000944:	4b1b      	ldr	r3, [pc, #108]	; (80009b4 <MX_USART2_UART_Init+0xac>)
 8000946:	2200      	movs	r2, #0
 8000948:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800094a:	4b1a      	ldr	r3, [pc, #104]	; (80009b4 <MX_USART2_UART_Init+0xac>)
 800094c:	2200      	movs	r2, #0
 800094e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000950:	4818      	ldr	r0, [pc, #96]	; (80009b4 <MX_USART2_UART_Init+0xac>)
 8000952:	f005 fedd 	bl	8006710 <HAL_UART_Init>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800095c:	f000 fb44 	bl	8000fe8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000960:	2100      	movs	r1, #0
 8000962:	4814      	ldr	r0, [pc, #80]	; (80009b4 <MX_USART2_UART_Init+0xac>)
 8000964:	f008 fa31 	bl	8008dca <HAL_UARTEx_SetTxFifoThreshold>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800096e:	f000 fb3b 	bl	8000fe8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000972:	2100      	movs	r1, #0
 8000974:	480f      	ldr	r0, [pc, #60]	; (80009b4 <MX_USART2_UART_Init+0xac>)
 8000976:	f008 fa66 	bl	8008e46 <HAL_UARTEx_SetRxFifoThreshold>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000980:	f000 fb32 	bl	8000fe8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000984:	480b      	ldr	r0, [pc, #44]	; (80009b4 <MX_USART2_UART_Init+0xac>)
 8000986:	f008 f9e7 	bl	8008d58 <HAL_UARTEx_DisableFifoMode>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000990:	f000 fb2a 	bl	8000fe8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  HAL_UART_Receive_IT(&huart2, &rx_buffer, 1);
 8000994:	2201      	movs	r2, #1
 8000996:	4909      	ldr	r1, [pc, #36]	; (80009bc <MX_USART2_UART_Init+0xb4>)
 8000998:	4806      	ldr	r0, [pc, #24]	; (80009b4 <MX_USART2_UART_Init+0xac>)
 800099a:	f005 ff97 	bl	80068cc <HAL_UART_Receive_IT>
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
 800099e:	4b05      	ldr	r3, [pc, #20]	; (80009b4 <MX_USART2_UART_Init+0xac>)
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	681a      	ldr	r2, [r3, #0]
 80009a4:	4b03      	ldr	r3, [pc, #12]	; (80009b4 <MX_USART2_UART_Init+0xac>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	f042 0220 	orr.w	r2, r2, #32
 80009ac:	601a      	str	r2, [r3, #0]

  /* USER CODE END USART2_Init 2 */

}
 80009ae:	bf00      	nop
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	24000254 	.word	0x24000254
 80009b8:	40004400 	.word	0x40004400
 80009bc:	24000fb0 	.word	0x24000fb0

080009c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b088      	sub	sp, #32
 80009c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c6:	f107 030c 	add.w	r3, r7, #12
 80009ca:	2200      	movs	r2, #0
 80009cc:	601a      	str	r2, [r3, #0]
 80009ce:	605a      	str	r2, [r3, #4]
 80009d0:	609a      	str	r2, [r3, #8]
 80009d2:	60da      	str	r2, [r3, #12]
 80009d4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009d6:	4b2c      	ldr	r3, [pc, #176]	; (8000a88 <MX_GPIO_Init+0xc8>)
 80009d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009dc:	4a2a      	ldr	r2, [pc, #168]	; (8000a88 <MX_GPIO_Init+0xc8>)
 80009de:	f043 0308 	orr.w	r3, r3, #8
 80009e2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009e6:	4b28      	ldr	r3, [pc, #160]	; (8000a88 <MX_GPIO_Init+0xc8>)
 80009e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009ec:	f003 0308 	and.w	r3, r3, #8
 80009f0:	60bb      	str	r3, [r7, #8]
 80009f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009f4:	4b24      	ldr	r3, [pc, #144]	; (8000a88 <MX_GPIO_Init+0xc8>)
 80009f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009fa:	4a23      	ldr	r2, [pc, #140]	; (8000a88 <MX_GPIO_Init+0xc8>)
 80009fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a00:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a04:	4b20      	ldr	r3, [pc, #128]	; (8000a88 <MX_GPIO_Init+0xc8>)
 8000a06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a0e:	607b      	str	r3, [r7, #4]
 8000a10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a12:	4b1d      	ldr	r3, [pc, #116]	; (8000a88 <MX_GPIO_Init+0xc8>)
 8000a14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a18:	4a1b      	ldr	r2, [pc, #108]	; (8000a88 <MX_GPIO_Init+0xc8>)
 8000a1a:	f043 0301 	orr.w	r3, r3, #1
 8000a1e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a22:	4b19      	ldr	r3, [pc, #100]	; (8000a88 <MX_GPIO_Init+0xc8>)
 8000a24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a28:	f003 0301 	and.w	r3, r3, #1
 8000a2c:	603b      	str	r3, [r7, #0]
 8000a2e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, RST_Pin|GP0_Pin, GPIO_PIN_SET);
 8000a30:	2201      	movs	r2, #1
 8000a32:	f44f 51a0 	mov.w	r1, #5120	; 0x1400
 8000a36:	4815      	ldr	r0, [pc, #84]	; (8000a8c <MX_GPIO_Init+0xcc>)
 8000a38:	f001 ff44 	bl	80028c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GP2_Pin|CHE_Pin, GPIO_PIN_SET);
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	2118      	movs	r1, #24
 8000a40:	4813      	ldr	r0, [pc, #76]	; (8000a90 <MX_GPIO_Init+0xd0>)
 8000a42:	f001 ff3f 	bl	80028c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RST_Pin GP0_Pin */
  GPIO_InitStruct.Pin = RST_Pin|GP0_Pin;
 8000a46:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a4a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a50:	2301      	movs	r3, #1
 8000a52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a54:	2300      	movs	r3, #0
 8000a56:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000a58:	f107 030c 	add.w	r3, r7, #12
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	480b      	ldr	r0, [pc, #44]	; (8000a8c <MX_GPIO_Init+0xcc>)
 8000a60:	f001 fd80 	bl	8002564 <HAL_GPIO_Init>

  /*Configure GPIO pins : GP2_Pin CHE_Pin */
  GPIO_InitStruct.Pin = GP2_Pin|CHE_Pin;
 8000a64:	2318      	movs	r3, #24
 8000a66:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a68:	2301      	movs	r3, #1
 8000a6a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a6c:	2301      	movs	r3, #1
 8000a6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a70:	2300      	movs	r3, #0
 8000a72:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a74:	f107 030c 	add.w	r3, r7, #12
 8000a78:	4619      	mov	r1, r3
 8000a7a:	4805      	ldr	r0, [pc, #20]	; (8000a90 <MX_GPIO_Init+0xd0>)
 8000a7c:	f001 fd72 	bl	8002564 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a80:	bf00      	nop
 8000a82:	3720      	adds	r7, #32
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	58024400 	.word	0x58024400
 8000a8c:	58021c00 	.word	0x58021c00
 8000a90:	58020000 	.word	0x58020000

08000a94 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
	// Store new data in received_message buffer
	osMessageQueuePut(queueRxDataCharHandle, &rx_buffer, 0, 0);
 8000a9c:	4b07      	ldr	r3, [pc, #28]	; (8000abc <HAL_UART_RxCpltCallback+0x28>)
 8000a9e:	6818      	ldr	r0, [r3, #0]
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	4906      	ldr	r1, [pc, #24]	; (8000ac0 <HAL_UART_RxCpltCallback+0x2c>)
 8000aa6:	f008 fd4b 	bl	8009540 <osMessageQueuePut>
	// Re-enable IRQ
	HAL_UART_Receive_IT(&huart2, &rx_buffer,  1);
 8000aaa:	2201      	movs	r2, #1
 8000aac:	4904      	ldr	r1, [pc, #16]	; (8000ac0 <HAL_UART_RxCpltCallback+0x2c>)
 8000aae:	4805      	ldr	r0, [pc, #20]	; (8000ac4 <HAL_UART_RxCpltCallback+0x30>)
 8000ab0:	f005 ff0c 	bl	80068cc <HAL_UART_Receive_IT>
}
 8000ab4:	bf00      	nop
 8000ab6:	3708      	adds	r7, #8
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	24000da0 	.word	0x24000da0
 8000ac0:	24000fb0 	.word	0x24000fb0
 8000ac4:	24000254 	.word	0x24000254

08000ac8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000ad0:	2001      	movs	r0, #1
 8000ad2:	f008 fb86 	bl	80091e2 <osDelay>
 8000ad6:	e7fb      	b.n	8000ad0 <StartDefaultTask+0x8>

08000ad8 <prvTaskSendDataWithESP>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_prvTaskSendDataWithESP */
void prvTaskSendDataWithESP(void *argument)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b092      	sub	sp, #72	; 0x48
 8000adc:	af04      	add	r7, sp, #16
 8000ade:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN prvTaskSendDataWithESP */
  /* Infinite loop */
	// Wait for ESP setup to finish
	osSemaphoreAcquire(semaphoreESPSetUpFinishedHandle, osWaitForever);
 8000ae0:	4b49      	ldr	r3, [pc, #292]	; (8000c08 <prvTaskSendDataWithESP+0x130>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f008 fc1f 	bl	800932c <osSemaphoreAcquire>
    char dataString[14];  // -40<temp<125, 00<humid<100 => max 13 char + '\0'
    char cipsendString[18];
  for(;;)
  {
	// Get data
    osMessageQueueGet(queueTempAndHumidHandle, &temperature, 0, osWaitForever);
 8000aee:	4b47      	ldr	r3, [pc, #284]	; (8000c0c <prvTaskSendDataWithESP+0x134>)
 8000af0:	6818      	ldr	r0, [r3, #0]
 8000af2:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8000af6:	f04f 33ff 	mov.w	r3, #4294967295
 8000afa:	2200      	movs	r2, #0
 8000afc:	f008 fd80 	bl	8009600 <osMessageQueueGet>
    osMessageQueueGet(queueTempAndHumidHandle, &humidity, 0, osWaitForever);
 8000b00:	4b42      	ldr	r3, [pc, #264]	; (8000c0c <prvTaskSendDataWithESP+0x134>)
 8000b02:	6818      	ldr	r0, [r3, #0]
 8000b04:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8000b08:	f04f 33ff 	mov.w	r3, #4294967295
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	f008 fd77 	bl	8009600 <osMessageQueueGet>

    // Format data into string
    snprintf(dataString, sizeof(dataString), "%.2f %.2fq", temperature, humidity);
 8000b12:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8000b16:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b1a:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8000b1e:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8000b22:	f107 0320 	add.w	r3, r7, #32
 8000b26:	ed8d 6b02 	vstr	d6, [sp, #8]
 8000b2a:	ed8d 7b00 	vstr	d7, [sp]
 8000b2e:	4a38      	ldr	r2, [pc, #224]	; (8000c10 <prvTaskSendDataWithESP+0x138>)
 8000b30:	210e      	movs	r1, #14
 8000b32:	4618      	mov	r0, r3
 8000b34:	f00c fbf4 	bl	800d320 <sniprintf>

    // Send CIPSEND to ESP
    snprintf(cipsendString, sizeof(cipsendString), "AT+CIPSEND=%d\r\n", strlen(dataString));
 8000b38:	f107 0320 	add.w	r3, r7, #32
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f7ff fc1f 	bl	8000380 <strlen>
 8000b42:	4603      	mov	r3, r0
 8000b44:	f107 000c 	add.w	r0, r7, #12
 8000b48:	4a32      	ldr	r2, [pc, #200]	; (8000c14 <prvTaskSendDataWithESP+0x13c>)
 8000b4a:	2112      	movs	r1, #18
 8000b4c:	f00c fbe8 	bl	800d320 <sniprintf>
    while(HAL_UART_Transmit(&huart2, (uint8_t*)cipsendString, strlen(cipsendString), HAL_UART_TIMEOUT_VALUE) != HAL_OK){}
 8000b50:	bf00      	nop
 8000b52:	f107 030c 	add.w	r3, r7, #12
 8000b56:	4618      	mov	r0, r3
 8000b58:	f7ff fc12 	bl	8000380 <strlen>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	b29a      	uxth	r2, r3
 8000b60:	f107 010c 	add.w	r1, r7, #12
 8000b64:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8000b68:	482b      	ldr	r0, [pc, #172]	; (8000c18 <prvTaskSendDataWithESP+0x140>)
 8000b6a:	f005 fe21 	bl	80067b0 <HAL_UART_Transmit>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d1ee      	bne.n	8000b52 <prvTaskSendDataWithESP+0x7a>

    // Set expected response
    while(osSemaphoreAcquire(semaphoreHaltUntilStringHandle, 0) != osOK){}
 8000b74:	bf00      	nop
 8000b76:	4b29      	ldr	r3, [pc, #164]	; (8000c1c <prvTaskSendDataWithESP+0x144>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	2100      	movs	r1, #0
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f008 fbd5 	bl	800932c <osSemaphoreAcquire>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d1f6      	bne.n	8000b76 <prvTaskSendDataWithESP+0x9e>
    strcpy((char*) expectedESPResponse,"OK\r\n");
 8000b88:	4b25      	ldr	r3, [pc, #148]	; (8000c20 <prvTaskSendDataWithESP+0x148>)
 8000b8a:	4a26      	ldr	r2, [pc, #152]	; (8000c24 <prvTaskSendDataWithESP+0x14c>)
 8000b8c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b90:	6018      	str	r0, [r3, #0]
 8000b92:	3304      	adds	r3, #4
 8000b94:	7019      	strb	r1, [r3, #0]
    osSemaphoreRelease(semaphoreHaltUntilStringHandle);
 8000b96:	4b21      	ldr	r3, [pc, #132]	; (8000c1c <prvTaskSendDataWithESP+0x144>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f008 fc18 	bl	80093d0 <osSemaphoreRelease>

    // Response valid
    while(osSemaphoreAcquire(semaphoreESPResponseValidHandle, 0) != osOK){}
 8000ba0:	bf00      	nop
 8000ba2:	4b21      	ldr	r3, [pc, #132]	; (8000c28 <prvTaskSendDataWithESP+0x150>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	2100      	movs	r1, #0
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f008 fbbf 	bl	800932c <osSemaphoreAcquire>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d1f6      	bne.n	8000ba2 <prvTaskSendDataWithESP+0xca>

    // Send data
    while(HAL_UART_Transmit(&huart2, (uint8_t*)dataString, strlen(dataString), HAL_UART_TIMEOUT_VALUE) != HAL_OK){}
 8000bb4:	bf00      	nop
 8000bb6:	f107 0320 	add.w	r3, r7, #32
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f7ff fbe0 	bl	8000380 <strlen>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	b29a      	uxth	r2, r3
 8000bc4:	f107 0120 	add.w	r1, r7, #32
 8000bc8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8000bcc:	4812      	ldr	r0, [pc, #72]	; (8000c18 <prvTaskSendDataWithESP+0x140>)
 8000bce:	f005 fdef 	bl	80067b0 <HAL_UART_Transmit>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d1ee      	bne.n	8000bb6 <prvTaskSendDataWithESP+0xde>

    // Set expected response
    while(osSemaphoreAcquire(semaphoreHaltUntilStringHandle, 0) != osOK){}
 8000bd8:	bf00      	nop
 8000bda:	4b10      	ldr	r3, [pc, #64]	; (8000c1c <prvTaskSendDataWithESP+0x144>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	2100      	movs	r1, #0
 8000be0:	4618      	mov	r0, r3
 8000be2:	f008 fba3 	bl	800932c <osSemaphoreAcquire>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d1f6      	bne.n	8000bda <prvTaskSendDataWithESP+0x102>
    strcpy((char*) expectedESPResponse,"OK\r\n");
 8000bec:	4b0c      	ldr	r3, [pc, #48]	; (8000c20 <prvTaskSendDataWithESP+0x148>)
 8000bee:	4a0d      	ldr	r2, [pc, #52]	; (8000c24 <prvTaskSendDataWithESP+0x14c>)
 8000bf0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000bf4:	6018      	str	r0, [r3, #0]
 8000bf6:	3304      	adds	r3, #4
 8000bf8:	7019      	strb	r1, [r3, #0]
    osSemaphoreRelease(semaphoreHaltUntilStringHandle);
 8000bfa:	4b08      	ldr	r3, [pc, #32]	; (8000c1c <prvTaskSendDataWithESP+0x144>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f008 fbe6 	bl	80093d0 <osSemaphoreRelease>
    osMessageQueueGet(queueTempAndHumidHandle, &temperature, 0, osWaitForever);
 8000c04:	e773      	b.n	8000aee <prvTaskSendDataWithESP+0x16>
 8000c06:	bf00      	nop
 8000c08:	24000dac 	.word	0x24000dac
 8000c0c:	24000d9c 	.word	0x24000d9c
 8000c10:	0800f660 	.word	0x0800f660
 8000c14:	0800f66c 	.word	0x0800f66c
 8000c18:	24000254 	.word	0x24000254
 8000c1c:	24000da4 	.word	0x24000da4
 8000c20:	24000fb4 	.word	0x24000fb4
 8000c24:	0800f67c 	.word	0x0800f67c
 8000c28:	24000da8 	.word	0x24000da8

08000c2c <prvTaskSetUpESP>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_prvTaskSetUpESP */
void prvTaskSetUpESP(void *argument)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b084      	sub	sp, #16
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN prvTaskSetUpESP */
  /* Infinite loop */
  for(;;)
  {
	  // Halt threads until setup complete
	  for(int i = 0; i < 3; i ++)
 8000c34:	2300      	movs	r3, #0
 8000c36:	60fb      	str	r3, [r7, #12]
 8000c38:	e009      	b.n	8000c4e <prvTaskSetUpESP+0x22>
		  osSemaphoreAcquire(semaphoreESPSetUpFinishedHandle, osWaitForever);
 8000c3a:	4b8b      	ldr	r3, [pc, #556]	; (8000e68 <prvTaskSetUpESP+0x23c>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	f04f 31ff 	mov.w	r1, #4294967295
 8000c42:	4618      	mov	r0, r3
 8000c44:	f008 fb72 	bl	800932c <osSemaphoreAcquire>
	  for(int i = 0; i < 3; i ++)
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	3301      	adds	r3, #1
 8000c4c:	60fb      	str	r3, [r7, #12]
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	2b02      	cmp	r3, #2
 8000c52:	ddf2      	ble.n	8000c3a <prvTaskSetUpESP+0xe>

	  // Wait for ESP to set up
	    // Set expected response
	    while(osSemaphoreAcquire(semaphoreHaltUntilStringHandle, 0) != osOK){}
 8000c54:	bf00      	nop
 8000c56:	4b85      	ldr	r3, [pc, #532]	; (8000e6c <prvTaskSetUpESP+0x240>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	2100      	movs	r1, #0
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f008 fb65 	bl	800932c <osSemaphoreAcquire>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d1f6      	bne.n	8000c56 <prvTaskSetUpESP+0x2a>
	    strcpy((char*) expectedESPResponse,"ready\r\n");
 8000c68:	4b81      	ldr	r3, [pc, #516]	; (8000e70 <prvTaskSetUpESP+0x244>)
 8000c6a:	4a82      	ldr	r2, [pc, #520]	; (8000e74 <prvTaskSetUpESP+0x248>)
 8000c6c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000c70:	e883 0003 	stmia.w	r3, {r0, r1}
	    osSemaphoreRelease(semaphoreHaltUntilStringHandle);
 8000c74:	4b7d      	ldr	r3, [pc, #500]	; (8000e6c <prvTaskSetUpESP+0x240>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f008 fba9 	bl	80093d0 <osSemaphoreRelease>

	    // Response valid
	    while(osSemaphoreAcquire(semaphoreESPResponseValidHandle, 0) != osOK){}
 8000c7e:	bf00      	nop
 8000c80:	4b7d      	ldr	r3, [pc, #500]	; (8000e78 <prvTaskSetUpESP+0x24c>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	2100      	movs	r1, #0
 8000c86:	4618      	mov	r0, r3
 8000c88:	f008 fb50 	bl	800932c <osSemaphoreAcquire>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d1f6      	bne.n	8000c80 <prvTaskSetUpESP+0x54>


	  // Disable echo mode on ESP
	    // Send CMD to ESP
	    while(HAL_UART_Transmit(&huart2, (uint8_t*)"ATE0\r\n", strlen("ATE0\r\n"), HAL_UART_TIMEOUT_VALUE) != HAL_OK){}
 8000c92:	bf00      	nop
 8000c94:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8000c98:	2206      	movs	r2, #6
 8000c9a:	4978      	ldr	r1, [pc, #480]	; (8000e7c <prvTaskSetUpESP+0x250>)
 8000c9c:	4878      	ldr	r0, [pc, #480]	; (8000e80 <prvTaskSetUpESP+0x254>)
 8000c9e:	f005 fd87 	bl	80067b0 <HAL_UART_Transmit>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d1f5      	bne.n	8000c94 <prvTaskSetUpESP+0x68>

	    // Set expected response
	    while(osSemaphoreAcquire(semaphoreHaltUntilStringHandle, 0) != osOK){}
 8000ca8:	bf00      	nop
 8000caa:	4b70      	ldr	r3, [pc, #448]	; (8000e6c <prvTaskSetUpESP+0x240>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	2100      	movs	r1, #0
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f008 fb3b 	bl	800932c <osSemaphoreAcquire>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d1f6      	bne.n	8000caa <prvTaskSetUpESP+0x7e>
	    strcpy((char*) expectedESPResponse,"OK\r\n");
 8000cbc:	4b6c      	ldr	r3, [pc, #432]	; (8000e70 <prvTaskSetUpESP+0x244>)
 8000cbe:	4a71      	ldr	r2, [pc, #452]	; (8000e84 <prvTaskSetUpESP+0x258>)
 8000cc0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000cc4:	6018      	str	r0, [r3, #0]
 8000cc6:	3304      	adds	r3, #4
 8000cc8:	7019      	strb	r1, [r3, #0]
	    osSemaphoreRelease(semaphoreHaltUntilStringHandle);
 8000cca:	4b68      	ldr	r3, [pc, #416]	; (8000e6c <prvTaskSetUpESP+0x240>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f008 fb7e 	bl	80093d0 <osSemaphoreRelease>

	    // Response valid
	    while(osSemaphoreAcquire(semaphoreESPResponseValidHandle, 0) != osOK){}
 8000cd4:	bf00      	nop
 8000cd6:	4b68      	ldr	r3, [pc, #416]	; (8000e78 <prvTaskSetUpESP+0x24c>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	2100      	movs	r1, #0
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f008 fb25 	bl	800932c <osSemaphoreAcquire>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d1f6      	bne.n	8000cd6 <prvTaskSetUpESP+0xaa>


	  // Configure ESP so it is able to connect to wifi and server
		// Send CMD to ESP
		while(HAL_UART_Transmit(&huart2, (uint8_t*)"AT+CIPMODE=0\r\n", strlen("AT+CIPMODE=0\r\n"), HAL_UART_TIMEOUT_VALUE) != HAL_OK){}
 8000ce8:	bf00      	nop
 8000cea:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8000cee:	220e      	movs	r2, #14
 8000cf0:	4965      	ldr	r1, [pc, #404]	; (8000e88 <prvTaskSetUpESP+0x25c>)
 8000cf2:	4863      	ldr	r0, [pc, #396]	; (8000e80 <prvTaskSetUpESP+0x254>)
 8000cf4:	f005 fd5c 	bl	80067b0 <HAL_UART_Transmit>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d1f5      	bne.n	8000cea <prvTaskSetUpESP+0xbe>

		// Set expected response
		while(osSemaphoreAcquire(semaphoreHaltUntilStringHandle, 0) != osOK){}
 8000cfe:	bf00      	nop
 8000d00:	4b5a      	ldr	r3, [pc, #360]	; (8000e6c <prvTaskSetUpESP+0x240>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	2100      	movs	r1, #0
 8000d06:	4618      	mov	r0, r3
 8000d08:	f008 fb10 	bl	800932c <osSemaphoreAcquire>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d1f6      	bne.n	8000d00 <prvTaskSetUpESP+0xd4>
		strcpy((char*) expectedESPResponse,"OK\r\n");
 8000d12:	4b57      	ldr	r3, [pc, #348]	; (8000e70 <prvTaskSetUpESP+0x244>)
 8000d14:	4a5b      	ldr	r2, [pc, #364]	; (8000e84 <prvTaskSetUpESP+0x258>)
 8000d16:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d1a:	6018      	str	r0, [r3, #0]
 8000d1c:	3304      	adds	r3, #4
 8000d1e:	7019      	strb	r1, [r3, #0]
		osSemaphoreRelease(semaphoreHaltUntilStringHandle);
 8000d20:	4b52      	ldr	r3, [pc, #328]	; (8000e6c <prvTaskSetUpESP+0x240>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4618      	mov	r0, r3
 8000d26:	f008 fb53 	bl	80093d0 <osSemaphoreRelease>

		// Response valid
		while(osSemaphoreAcquire(semaphoreESPResponseValidHandle, 0) != osOK){}
 8000d2a:	bf00      	nop
 8000d2c:	4b52      	ldr	r3, [pc, #328]	; (8000e78 <prvTaskSetUpESP+0x24c>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	2100      	movs	r1, #0
 8000d32:	4618      	mov	r0, r3
 8000d34:	f008 fafa 	bl	800932c <osSemaphoreAcquire>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d1f6      	bne.n	8000d2c <prvTaskSetUpESP+0x100>

		// Send CMD to ESP
		while(HAL_UART_Transmit(&huart2, (uint8_t*)"AT+CWMODE=1\r\n", strlen("AT+CWMODE=1\r\n"), HAL_UART_TIMEOUT_VALUE) != HAL_OK){}
 8000d3e:	bf00      	nop
 8000d40:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8000d44:	220d      	movs	r2, #13
 8000d46:	4951      	ldr	r1, [pc, #324]	; (8000e8c <prvTaskSetUpESP+0x260>)
 8000d48:	484d      	ldr	r0, [pc, #308]	; (8000e80 <prvTaskSetUpESP+0x254>)
 8000d4a:	f005 fd31 	bl	80067b0 <HAL_UART_Transmit>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d1f5      	bne.n	8000d40 <prvTaskSetUpESP+0x114>

		// Set expected response
		while(osSemaphoreAcquire(semaphoreHaltUntilStringHandle, 0) != osOK){}
 8000d54:	bf00      	nop
 8000d56:	4b45      	ldr	r3, [pc, #276]	; (8000e6c <prvTaskSetUpESP+0x240>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	2100      	movs	r1, #0
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f008 fae5 	bl	800932c <osSemaphoreAcquire>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d1f6      	bne.n	8000d56 <prvTaskSetUpESP+0x12a>
		strcpy((char*) expectedESPResponse,"OK\r\n");
 8000d68:	4b41      	ldr	r3, [pc, #260]	; (8000e70 <prvTaskSetUpESP+0x244>)
 8000d6a:	4a46      	ldr	r2, [pc, #280]	; (8000e84 <prvTaskSetUpESP+0x258>)
 8000d6c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d70:	6018      	str	r0, [r3, #0]
 8000d72:	3304      	adds	r3, #4
 8000d74:	7019      	strb	r1, [r3, #0]
		osSemaphoreRelease(semaphoreHaltUntilStringHandle);
 8000d76:	4b3d      	ldr	r3, [pc, #244]	; (8000e6c <prvTaskSetUpESP+0x240>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f008 fb28 	bl	80093d0 <osSemaphoreRelease>

		// Response valid
		while(osSemaphoreAcquire(semaphoreESPResponseValidHandle, 0) != osOK){}
 8000d80:	bf00      	nop
 8000d82:	4b3d      	ldr	r3, [pc, #244]	; (8000e78 <prvTaskSetUpESP+0x24c>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	2100      	movs	r1, #0
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f008 facf 	bl	800932c <osSemaphoreAcquire>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d1f6      	bne.n	8000d82 <prvTaskSetUpESP+0x156>


	  // Configure ESP so it is able to connect to wifi and server
		// Send CMD to ESP
		while(HAL_UART_Transmit(&huart2, (uint8_t*)WIFI_CONNECT, strlen(WIFI_CONNECT), HAL_UART_TIMEOUT_VALUE) != HAL_OK){}
 8000d94:	bf00      	nop
 8000d96:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8000d9a:	222e      	movs	r2, #46	; 0x2e
 8000d9c:	493c      	ldr	r1, [pc, #240]	; (8000e90 <prvTaskSetUpESP+0x264>)
 8000d9e:	4838      	ldr	r0, [pc, #224]	; (8000e80 <prvTaskSetUpESP+0x254>)
 8000da0:	f005 fd06 	bl	80067b0 <HAL_UART_Transmit>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d1f5      	bne.n	8000d96 <prvTaskSetUpESP+0x16a>

		// Set expected response
		while(osSemaphoreAcquire(semaphoreHaltUntilStringHandle, 0) != osOK){}
 8000daa:	bf00      	nop
 8000dac:	4b2f      	ldr	r3, [pc, #188]	; (8000e6c <prvTaskSetUpESP+0x240>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	2100      	movs	r1, #0
 8000db2:	4618      	mov	r0, r3
 8000db4:	f008 faba 	bl	800932c <osSemaphoreAcquire>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d1f6      	bne.n	8000dac <prvTaskSetUpESP+0x180>
		strcpy((char*) expectedESPResponse,"OK\r\n");
 8000dbe:	4b2c      	ldr	r3, [pc, #176]	; (8000e70 <prvTaskSetUpESP+0x244>)
 8000dc0:	4a30      	ldr	r2, [pc, #192]	; (8000e84 <prvTaskSetUpESP+0x258>)
 8000dc2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000dc6:	6018      	str	r0, [r3, #0]
 8000dc8:	3304      	adds	r3, #4
 8000dca:	7019      	strb	r1, [r3, #0]
		osSemaphoreRelease(semaphoreHaltUntilStringHandle);
 8000dcc:	4b27      	ldr	r3, [pc, #156]	; (8000e6c <prvTaskSetUpESP+0x240>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f008 fafd 	bl	80093d0 <osSemaphoreRelease>

		// Response valid
		while(osSemaphoreAcquire(semaphoreESPResponseValidHandle, 0) != osOK){}
 8000dd6:	bf00      	nop
 8000dd8:	4b27      	ldr	r3, [pc, #156]	; (8000e78 <prvTaskSetUpESP+0x24c>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	2100      	movs	r1, #0
 8000dde:	4618      	mov	r0, r3
 8000de0:	f008 faa4 	bl	800932c <osSemaphoreAcquire>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d1f6      	bne.n	8000dd8 <prvTaskSetUpESP+0x1ac>


	  // Configure ESP so it is able to connect to wifi and server
		// Send CMD to ESP
		while(HAL_UART_Transmit(&huart2, (uint8_t*)SERVER_CONNECT, strlen(SERVER_CONNECT), HAL_UART_TIMEOUT_VALUE) != HAL_OK){}
 8000dea:	bf00      	nop
 8000dec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8000df0:	2228      	movs	r2, #40	; 0x28
 8000df2:	4928      	ldr	r1, [pc, #160]	; (8000e94 <prvTaskSetUpESP+0x268>)
 8000df4:	4822      	ldr	r0, [pc, #136]	; (8000e80 <prvTaskSetUpESP+0x254>)
 8000df6:	f005 fcdb 	bl	80067b0 <HAL_UART_Transmit>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d1f5      	bne.n	8000dec <prvTaskSetUpESP+0x1c0>

		// Set expected response
		while(osSemaphoreAcquire(semaphoreHaltUntilStringHandle, 0) != osOK){}
 8000e00:	bf00      	nop
 8000e02:	4b1a      	ldr	r3, [pc, #104]	; (8000e6c <prvTaskSetUpESP+0x240>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	2100      	movs	r1, #0
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f008 fa8f 	bl	800932c <osSemaphoreAcquire>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d1f6      	bne.n	8000e02 <prvTaskSetUpESP+0x1d6>
		strcpy((char*) expectedESPResponse,"OK\r\n");
 8000e14:	4b16      	ldr	r3, [pc, #88]	; (8000e70 <prvTaskSetUpESP+0x244>)
 8000e16:	4a1b      	ldr	r2, [pc, #108]	; (8000e84 <prvTaskSetUpESP+0x258>)
 8000e18:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e1c:	6018      	str	r0, [r3, #0]
 8000e1e:	3304      	adds	r3, #4
 8000e20:	7019      	strb	r1, [r3, #0]
		osSemaphoreRelease(semaphoreHaltUntilStringHandle);
 8000e22:	4b12      	ldr	r3, [pc, #72]	; (8000e6c <prvTaskSetUpESP+0x240>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	4618      	mov	r0, r3
 8000e28:	f008 fad2 	bl	80093d0 <osSemaphoreRelease>

		// Response valid
		while(osSemaphoreAcquire(semaphoreESPResponseValidHandle, 0) != osOK){}
 8000e2c:	bf00      	nop
 8000e2e:	4b12      	ldr	r3, [pc, #72]	; (8000e78 <prvTaskSetUpESP+0x24c>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	2100      	movs	r1, #0
 8000e34:	4618      	mov	r0, r3
 8000e36:	f008 fa79 	bl	800932c <osSemaphoreAcquire>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d1f6      	bne.n	8000e2e <prvTaskSetUpESP+0x202>

		// Enable other tasks
		for(int i = 0; i < 3; i ++)
 8000e40:	2300      	movs	r3, #0
 8000e42:	60bb      	str	r3, [r7, #8]
 8000e44:	e007      	b.n	8000e56 <prvTaskSetUpESP+0x22a>
			osSemaphoreRelease(semaphoreESPSetUpFinishedHandle);
 8000e46:	4b08      	ldr	r3, [pc, #32]	; (8000e68 <prvTaskSetUpESP+0x23c>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f008 fac0 	bl	80093d0 <osSemaphoreRelease>
		for(int i = 0; i < 3; i ++)
 8000e50:	68bb      	ldr	r3, [r7, #8]
 8000e52:	3301      	adds	r3, #1
 8000e54:	60bb      	str	r3, [r7, #8]
 8000e56:	68bb      	ldr	r3, [r7, #8]
 8000e58:	2b02      	cmp	r3, #2
 8000e5a:	ddf4      	ble.n	8000e46 <prvTaskSetUpESP+0x21a>
		// Task has to run only once
		osThreadSuspend(SetUpESPHandle);
 8000e5c:	4b0e      	ldr	r3, [pc, #56]	; (8000e98 <prvTaskSetUpESP+0x26c>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4618      	mov	r0, r3
 8000e62:	f008 f99d 	bl	80091a0 <osThreadSuspend>
	  for(int i = 0; i < 3; i ++)
 8000e66:	e6e5      	b.n	8000c34 <prvTaskSetUpESP+0x8>
 8000e68:	24000dac 	.word	0x24000dac
 8000e6c:	24000da4 	.word	0x24000da4
 8000e70:	24000fb4 	.word	0x24000fb4
 8000e74:	0800f684 	.word	0x0800f684
 8000e78:	24000da8 	.word	0x24000da8
 8000e7c:	0800f68c 	.word	0x0800f68c
 8000e80:	24000254 	.word	0x24000254
 8000e84:	0800f67c 	.word	0x0800f67c
 8000e88:	0800f694 	.word	0x0800f694
 8000e8c:	0800f6a4 	.word	0x0800f6a4
 8000e90:	0800f6b4 	.word	0x0800f6b4
 8000e94:	0800f6e4 	.word	0x0800f6e4
 8000e98:	24000598 	.word	0x24000598

08000e9c <prvTaskReadTempAndHumidity>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_prvTaskReadTempAndHumidity */
void prvTaskReadTempAndHumidity(void *argument)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b084      	sub	sp, #16
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN prvTaskReadTempAndHumidity */
  /* Infinite loop */
	// Wait for ESP setup to finish
	osSemaphoreAcquire(semaphoreESPSetUpFinishedHandle, osWaitForever);
 8000ea4:	4b19      	ldr	r3, [pc, #100]	; (8000f0c <prvTaskReadTempAndHumidity+0x70>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	f04f 31ff 	mov.w	r1, #4294967295
 8000eac:	4618      	mov	r0, r3
 8000eae:	f008 fa3d 	bl	800932c <osSemaphoreAcquire>
	float temperature;
	float humidity;
  for(;;)
  {	// Read sensor data every 1 second

	 while(!sht3x_read_temperature_and_humidity(&sht31, &temperature, &humidity))	{}
 8000eb2:	bf00      	nop
 8000eb4:	f107 0208 	add.w	r2, r7, #8
 8000eb8:	f107 030c 	add.w	r3, r7, #12
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	4814      	ldr	r0, [pc, #80]	; (8000f10 <prvTaskReadTempAndHumidity+0x74>)
 8000ec0:	f000 f908 	bl	80010d4 <sht3x_read_temperature_and_humidity>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	f083 0301 	eor.w	r3, r3, #1
 8000eca:	b2db      	uxtb	r3, r3
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d1f1      	bne.n	8000eb4 <prvTaskReadTempAndHumidity+0x18>
	 while(osMessageQueuePut(queueTempAndHumidHandle, &temperature, 0, 0) != osOK)	{}
 8000ed0:	bf00      	nop
 8000ed2:	4b10      	ldr	r3, [pc, #64]	; (8000f14 <prvTaskReadTempAndHumidity+0x78>)
 8000ed4:	6818      	ldr	r0, [r3, #0]
 8000ed6:	f107 010c 	add.w	r1, r7, #12
 8000eda:	2300      	movs	r3, #0
 8000edc:	2200      	movs	r2, #0
 8000ede:	f008 fb2f 	bl	8009540 <osMessageQueuePut>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d1f4      	bne.n	8000ed2 <prvTaskReadTempAndHumidity+0x36>
	 while(osMessageQueuePut(queueTempAndHumidHandle, &humidity, 0, 0) != osOK) 	{}
 8000ee8:	bf00      	nop
 8000eea:	4b0a      	ldr	r3, [pc, #40]	; (8000f14 <prvTaskReadTempAndHumidity+0x78>)
 8000eec:	6818      	ldr	r0, [r3, #0]
 8000eee:	f107 0108 	add.w	r1, r7, #8
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	f008 fb23 	bl	8009540 <osMessageQueuePut>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d1f4      	bne.n	8000eea <prvTaskReadTempAndHumidity+0x4e>

	 // Delay for 1 second
	 osDelay(1000);
 8000f00:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f04:	f008 f96d 	bl	80091e2 <osDelay>
	 while(!sht3x_read_temperature_and_humidity(&sht31, &temperature, &humidity))	{}
 8000f08:	e7d3      	b.n	8000eb2 <prvTaskReadTempAndHumidity+0x16>
 8000f0a:	bf00      	nop
 8000f0c:	24000dac 	.word	0x24000dac
 8000f10:	24000000 	.word	0x24000000
 8000f14:	24000d9c 	.word	0x24000d9c

08000f18 <prvTaskReadESP>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_prvTaskReadESP */
void prvTaskReadESP(void *argument)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b084      	sub	sp, #16
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN prvTaskReadESP */
  /* Infinite loop */
	uint8_t rxChar = '\0';
 8000f20:	2300      	movs	r3, #0
 8000f22:	73fb      	strb	r3, [r7, #15]
  for(;;)
  {
	  // First, response is not valid
	  while(osSemaphoreAcquire(semaphoreESPResponseValidHandle,0) != osOK){}
 8000f24:	bf00      	nop
 8000f26:	4b22      	ldr	r3, [pc, #136]	; (8000fb0 <prvTaskReadESP+0x98>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	2100      	movs	r1, #0
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f008 f9fd 	bl	800932c <osSemaphoreAcquire>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d1f6      	bne.n	8000f26 <prvTaskReadESP+0xe>

	  // Add char to message
	  while(osMessageQueueGet(queueRxDataCharHandle, &rxChar, 0, 0) != osOK){}
 8000f38:	bf00      	nop
 8000f3a:	4b1e      	ldr	r3, [pc, #120]	; (8000fb4 <prvTaskReadESP+0x9c>)
 8000f3c:	6818      	ldr	r0, [r3, #0]
 8000f3e:	f107 010f 	add.w	r1, r7, #15
 8000f42:	2300      	movs	r3, #0
 8000f44:	2200      	movs	r2, #0
 8000f46:	f008 fb5b 	bl	8009600 <osMessageQueueGet>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d1f4      	bne.n	8000f3a <prvTaskReadESP+0x22>
	  strcat((char*)received_message, (char*)&rxChar);
 8000f50:	f107 030f 	add.w	r3, r7, #15
 8000f54:	4619      	mov	r1, r3
 8000f56:	4818      	ldr	r0, [pc, #96]	; (8000fb8 <prvTaskReadESP+0xa0>)
 8000f58:	f00c fa61 	bl	800d41e <strcat>

	  // Check if got expected response
	  while(osSemaphoreAcquire(semaphoreHaltUntilStringHandle, 0) != osOK){}
 8000f5c:	bf00      	nop
 8000f5e:	4b17      	ldr	r3, [pc, #92]	; (8000fbc <prvTaskReadESP+0xa4>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	2100      	movs	r1, #0
 8000f64:	4618      	mov	r0, r3
 8000f66:	f008 f9e1 	bl	800932c <osSemaphoreAcquire>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d1f6      	bne.n	8000f5e <prvTaskReadESP+0x46>
	  // If message is valid, signal and clear message
	  if(strstr((char*)received_message, (char*)expectedESPResponse) != NULL){
 8000f70:	4913      	ldr	r1, [pc, #76]	; (8000fc0 <prvTaskReadESP+0xa8>)
 8000f72:	4811      	ldr	r0, [pc, #68]	; (8000fb8 <prvTaskReadESP+0xa0>)
 8000f74:	f00c fa62 	bl	800d43c <strstr>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d011      	beq.n	8000fa2 <prvTaskReadESP+0x8a>
		  while(osSemaphoreRelease(semaphoreESPResponseValidHandle) != osOK){}
 8000f7e:	bf00      	nop
 8000f80:	4b0b      	ldr	r3, [pc, #44]	; (8000fb0 <prvTaskReadESP+0x98>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4618      	mov	r0, r3
 8000f86:	f008 fa23 	bl	80093d0 <osSemaphoreRelease>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d1f7      	bne.n	8000f80 <prvTaskReadESP+0x68>
		  memset(received_message, '\0', strlen((char*)received_message));
 8000f90:	4809      	ldr	r0, [pc, #36]	; (8000fb8 <prvTaskReadESP+0xa0>)
 8000f92:	f7ff f9f5 	bl	8000380 <strlen>
 8000f96:	4603      	mov	r3, r0
 8000f98:	461a      	mov	r2, r3
 8000f9a:	2100      	movs	r1, #0
 8000f9c:	4806      	ldr	r0, [pc, #24]	; (8000fb8 <prvTaskReadESP+0xa0>)
 8000f9e:	f00c fa36 	bl	800d40e <memset>
	  }
	  else{
		  // TODO: if "\r\n" but not valid response => implement error counter
	  }
	  osSemaphoreRelease(semaphoreHaltUntilStringHandle);
 8000fa2:	4b06      	ldr	r3, [pc, #24]	; (8000fbc <prvTaskReadESP+0xa4>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f008 fa12 	bl	80093d0 <osSemaphoreRelease>
	  while(osSemaphoreAcquire(semaphoreESPResponseValidHandle,0) != osOK){}
 8000fac:	e7ba      	b.n	8000f24 <prvTaskReadESP+0xc>
 8000fae:	bf00      	nop
 8000fb0:	24000da8 	.word	0x24000da8
 8000fb4:	24000da0 	.word	0x24000da0
 8000fb8:	24000db0 	.word	0x24000db0
 8000fbc:	24000da4 	.word	0x24000da4
 8000fc0:	24000fb4 	.word	0x24000fb4

08000fc4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a04      	ldr	r2, [pc, #16]	; (8000fe4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d101      	bne.n	8000fda <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000fd6:	f000 fc31 	bl	800183c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000fda:	bf00      	nop
 8000fdc:	3708      	adds	r7, #8
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	40010000 	.word	0x40010000

08000fe8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fec:	b672      	cpsid	i
}
 8000fee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ff0:	e7fe      	b.n	8000ff0 <Error_Handler+0x8>

08000ff2 <calculate_crc>:
	SHT3X_COMMAND_MEASURE_HIGHREP_10HZ = 0x2737,
	SHT3X_COMMAND_MEASURE_LOWREP_10HZ = 0x272a
} sht3x_command_t;

static uint8_t calculate_crc(const uint8_t *data, size_t length)
{
 8000ff2:	b480      	push	{r7}
 8000ff4:	b087      	sub	sp, #28
 8000ff6:	af00      	add	r7, sp, #0
 8000ff8:	6078      	str	r0, [r7, #4]
 8000ffa:	6039      	str	r1, [r7, #0]
	uint8_t crc = 0xff;
 8000ffc:	23ff      	movs	r3, #255	; 0xff
 8000ffe:	75fb      	strb	r3, [r7, #23]
	for (size_t i = 0; i < length; i++) {
 8001000:	2300      	movs	r3, #0
 8001002:	613b      	str	r3, [r7, #16]
 8001004:	e020      	b.n	8001048 <calculate_crc+0x56>
		crc ^= data[i];
 8001006:	687a      	ldr	r2, [r7, #4]
 8001008:	693b      	ldr	r3, [r7, #16]
 800100a:	4413      	add	r3, r2
 800100c:	781a      	ldrb	r2, [r3, #0]
 800100e:	7dfb      	ldrb	r3, [r7, #23]
 8001010:	4053      	eors	r3, r2
 8001012:	75fb      	strb	r3, [r7, #23]
		for (size_t j = 0; j < 8; j++) {
 8001014:	2300      	movs	r3, #0
 8001016:	60fb      	str	r3, [r7, #12]
 8001018:	e010      	b.n	800103c <calculate_crc+0x4a>
			if ((crc & 0x80u) != 0) {
 800101a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800101e:	2b00      	cmp	r3, #0
 8001020:	da06      	bge.n	8001030 <calculate_crc+0x3e>
				crc = (uint8_t)((uint8_t)(crc << 1u) ^ 0x31u);
 8001022:	7dfb      	ldrb	r3, [r7, #23]
 8001024:	005b      	lsls	r3, r3, #1
 8001026:	b2db      	uxtb	r3, r3
 8001028:	f083 0331 	eor.w	r3, r3, #49	; 0x31
 800102c:	75fb      	strb	r3, [r7, #23]
 800102e:	e002      	b.n	8001036 <calculate_crc+0x44>
			} else {
				crc <<= 1u;
 8001030:	7dfb      	ldrb	r3, [r7, #23]
 8001032:	005b      	lsls	r3, r3, #1
 8001034:	75fb      	strb	r3, [r7, #23]
		for (size_t j = 0; j < 8; j++) {
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	3301      	adds	r3, #1
 800103a:	60fb      	str	r3, [r7, #12]
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	2b07      	cmp	r3, #7
 8001040:	d9eb      	bls.n	800101a <calculate_crc+0x28>
	for (size_t i = 0; i < length; i++) {
 8001042:	693b      	ldr	r3, [r7, #16]
 8001044:	3301      	adds	r3, #1
 8001046:	613b      	str	r3, [r7, #16]
 8001048:	693a      	ldr	r2, [r7, #16]
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	429a      	cmp	r2, r3
 800104e:	d3da      	bcc.n	8001006 <calculate_crc+0x14>
			}
		}
	}
	return crc;
 8001050:	7dfb      	ldrb	r3, [r7, #23]
}
 8001052:	4618      	mov	r0, r3
 8001054:	371c      	adds	r7, #28
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr

0800105e <sht3x_send_command>:

static bool sht3x_send_command(sht3x_handle_t *handle, sht3x_command_t command)
{
 800105e:	b580      	push	{r7, lr}
 8001060:	b086      	sub	sp, #24
 8001062:	af02      	add	r7, sp, #8
 8001064:	6078      	str	r0, [r7, #4]
 8001066:	460b      	mov	r3, r1
 8001068:	807b      	strh	r3, [r7, #2]
	uint8_t command_buffer[2] = {(command & 0xff00u) >> 8u, command & 0xffu};
 800106a:	887b      	ldrh	r3, [r7, #2]
 800106c:	0a1b      	lsrs	r3, r3, #8
 800106e:	b29b      	uxth	r3, r3
 8001070:	b2db      	uxtb	r3, r3
 8001072:	733b      	strb	r3, [r7, #12]
 8001074:	887b      	ldrh	r3, [r7, #2]
 8001076:	b2db      	uxtb	r3, r3
 8001078:	737b      	strb	r3, [r7, #13]

	if (HAL_I2C_Master_Transmit(handle->i2c_handle, handle->device_address << 1u, command_buffer, sizeof(command_buffer),
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	6818      	ldr	r0, [r3, #0]
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	889b      	ldrh	r3, [r3, #4]
 8001082:	005b      	lsls	r3, r3, #1
 8001084:	b299      	uxth	r1, r3
 8001086:	f107 020c 	add.w	r2, r7, #12
 800108a:	231e      	movs	r3, #30
 800108c:	9300      	str	r3, [sp, #0]
 800108e:	2302      	movs	r3, #2
 8001090:	f001 fcc2 	bl	8002a18 <HAL_I2C_Master_Transmit>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <sht3x_send_command+0x40>
	                            SHT3X_I2C_TIMEOUT) != HAL_OK) {
		return false;
 800109a:	2300      	movs	r3, #0
 800109c:	e000      	b.n	80010a0 <sht3x_send_command+0x42>
	}

	return true;
 800109e:	2301      	movs	r3, #1
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	3710      	adds	r7, #16
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}

080010a8 <uint8_to_uint16>:

static uint16_t uint8_to_uint16(uint8_t msb, uint8_t lsb)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	4603      	mov	r3, r0
 80010b0:	460a      	mov	r2, r1
 80010b2:	71fb      	strb	r3, [r7, #7]
 80010b4:	4613      	mov	r3, r2
 80010b6:	71bb      	strb	r3, [r7, #6]
	return (uint16_t)((uint16_t)msb << 8u) | lsb;
 80010b8:	79fb      	ldrb	r3, [r7, #7]
 80010ba:	b29b      	uxth	r3, r3
 80010bc:	021b      	lsls	r3, r3, #8
 80010be:	b29a      	uxth	r2, r3
 80010c0:	79bb      	ldrb	r3, [r7, #6]
 80010c2:	b29b      	uxth	r3, r3
 80010c4:	4313      	orrs	r3, r2
 80010c6:	b29b      	uxth	r3, r3
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	370c      	adds	r7, #12
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr

080010d4 <sht3x_read_temperature_and_humidity>:

	return true;
}

bool sht3x_read_temperature_and_humidity(sht3x_handle_t *handle, float *temperature, float *humidity)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b08a      	sub	sp, #40	; 0x28
 80010d8:	af02      	add	r7, sp, #8
 80010da:	60f8      	str	r0, [r7, #12]
 80010dc:	60b9      	str	r1, [r7, #8]
 80010de:	607a      	str	r2, [r7, #4]
	sht3x_send_command(handle, SHT3X_COMMAND_MEASURE_HIGHREP_STRETCH);
 80010e0:	f642 4106 	movw	r1, #11270	; 0x2c06
 80010e4:	68f8      	ldr	r0, [r7, #12]
 80010e6:	f7ff ffba 	bl	800105e <sht3x_send_command>

	HAL_Delay(1);
 80010ea:	2001      	movs	r0, #1
 80010ec:	f000 fbc6 	bl	800187c <HAL_Delay>

	uint8_t buffer[6];
	if (HAL_I2C_Master_Receive(handle->i2c_handle, handle->device_address << 1u, buffer, sizeof(buffer), SHT3X_I2C_TIMEOUT) != HAL_OK) {
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	6818      	ldr	r0, [r3, #0]
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	889b      	ldrh	r3, [r3, #4]
 80010f8:	005b      	lsls	r3, r3, #1
 80010fa:	b299      	uxth	r1, r3
 80010fc:	f107 0214 	add.w	r2, r7, #20
 8001100:	231e      	movs	r3, #30
 8001102:	9300      	str	r3, [sp, #0]
 8001104:	2306      	movs	r3, #6
 8001106:	f001 fd7b 	bl	8002c00 <HAL_I2C_Master_Receive>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <sht3x_read_temperature_and_humidity+0x40>
		return false;
 8001110:	2300      	movs	r3, #0
 8001112:	e050      	b.n	80011b6 <sht3x_read_temperature_and_humidity+0xe2>
	}

	uint8_t temperature_crc = calculate_crc(buffer, 2);
 8001114:	f107 0314 	add.w	r3, r7, #20
 8001118:	2102      	movs	r1, #2
 800111a:	4618      	mov	r0, r3
 800111c:	f7ff ff69 	bl	8000ff2 <calculate_crc>
 8001120:	4603      	mov	r3, r0
 8001122:	77fb      	strb	r3, [r7, #31]
	uint8_t humidity_crc = calculate_crc(buffer + 3, 2);
 8001124:	f107 0314 	add.w	r3, r7, #20
 8001128:	3303      	adds	r3, #3
 800112a:	2102      	movs	r1, #2
 800112c:	4618      	mov	r0, r3
 800112e:	f7ff ff60 	bl	8000ff2 <calculate_crc>
 8001132:	4603      	mov	r3, r0
 8001134:	77bb      	strb	r3, [r7, #30]
	if (temperature_crc != buffer[2] || humidity_crc != buffer[5]) {
 8001136:	7dbb      	ldrb	r3, [r7, #22]
 8001138:	7ffa      	ldrb	r2, [r7, #31]
 800113a:	429a      	cmp	r2, r3
 800113c:	d103      	bne.n	8001146 <sht3x_read_temperature_and_humidity+0x72>
 800113e:	7e7b      	ldrb	r3, [r7, #25]
 8001140:	7fba      	ldrb	r2, [r7, #30]
 8001142:	429a      	cmp	r2, r3
 8001144:	d001      	beq.n	800114a <sht3x_read_temperature_and_humidity+0x76>
		return false;
 8001146:	2300      	movs	r3, #0
 8001148:	e035      	b.n	80011b6 <sht3x_read_temperature_and_humidity+0xe2>
	}

	int16_t temperature_raw = (int16_t)uint8_to_uint16(buffer[0], buffer[1]);
 800114a:	7d3b      	ldrb	r3, [r7, #20]
 800114c:	7d7a      	ldrb	r2, [r7, #21]
 800114e:	4611      	mov	r1, r2
 8001150:	4618      	mov	r0, r3
 8001152:	f7ff ffa9 	bl	80010a8 <uint8_to_uint16>
 8001156:	4603      	mov	r3, r0
 8001158:	83bb      	strh	r3, [r7, #28]
	uint16_t humidity_raw = uint8_to_uint16(buffer[3], buffer[4]);
 800115a:	7dfb      	ldrb	r3, [r7, #23]
 800115c:	7e3a      	ldrb	r2, [r7, #24]
 800115e:	4611      	mov	r1, r2
 8001160:	4618      	mov	r0, r3
 8001162:	f7ff ffa1 	bl	80010a8 <uint8_to_uint16>
 8001166:	4603      	mov	r3, r0
 8001168:	837b      	strh	r3, [r7, #26]

	*temperature = -45.0f + 175.0f * (float)temperature_raw / 65535.0f;
 800116a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800116e:	ee07 3a90 	vmov	s15, r3
 8001172:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001176:	ed9f 7a12 	vldr	s14, [pc, #72]	; 80011c0 <sht3x_read_temperature_and_humidity+0xec>
 800117a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800117e:	eddf 6a11 	vldr	s13, [pc, #68]	; 80011c4 <sht3x_read_temperature_and_humidity+0xf0>
 8001182:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001186:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80011c8 <sht3x_read_temperature_and_humidity+0xf4>
 800118a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800118e:	68bb      	ldr	r3, [r7, #8]
 8001190:	edc3 7a00 	vstr	s15, [r3]
	*humidity = 100.0f * (float)humidity_raw / 65535.0f;
 8001194:	8b7b      	ldrh	r3, [r7, #26]
 8001196:	ee07 3a90 	vmov	s15, r3
 800119a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800119e:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 80011cc <sht3x_read_temperature_and_humidity+0xf8>
 80011a2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80011a6:	eddf 6a07 	vldr	s13, [pc, #28]	; 80011c4 <sht3x_read_temperature_and_humidity+0xf0>
 80011aa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	edc3 7a00 	vstr	s15, [r3]

	return true;
 80011b4:	2301      	movs	r3, #1
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	3720      	adds	r7, #32
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	432f0000 	.word	0x432f0000
 80011c4:	477fff00 	.word	0x477fff00
 80011c8:	42340000 	.word	0x42340000
 80011cc:	42c80000 	.word	0x42c80000

080011d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011d6:	4b0c      	ldr	r3, [pc, #48]	; (8001208 <HAL_MspInit+0x38>)
 80011d8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80011dc:	4a0a      	ldr	r2, [pc, #40]	; (8001208 <HAL_MspInit+0x38>)
 80011de:	f043 0302 	orr.w	r3, r3, #2
 80011e2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80011e6:	4b08      	ldr	r3, [pc, #32]	; (8001208 <HAL_MspInit+0x38>)
 80011e8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80011ec:	f003 0302 	and.w	r3, r3, #2
 80011f0:	607b      	str	r3, [r7, #4]
 80011f2:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80011f4:	2200      	movs	r2, #0
 80011f6:	210f      	movs	r1, #15
 80011f8:	f06f 0001 	mvn.w	r0, #1
 80011fc:	f000 fc26 	bl	8001a4c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001200:	bf00      	nop
 8001202:	3708      	adds	r7, #8
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	58024400 	.word	0x58024400

0800120c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b0ba      	sub	sp, #232	; 0xe8
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001214:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001218:	2200      	movs	r2, #0
 800121a:	601a      	str	r2, [r3, #0]
 800121c:	605a      	str	r2, [r3, #4]
 800121e:	609a      	str	r2, [r3, #8]
 8001220:	60da      	str	r2, [r3, #12]
 8001222:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001224:	f107 0310 	add.w	r3, r7, #16
 8001228:	22c0      	movs	r2, #192	; 0xc0
 800122a:	2100      	movs	r1, #0
 800122c:	4618      	mov	r0, r3
 800122e:	f00c f8ee 	bl	800d40e <memset>
  if(hi2c->Instance==I2C4)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4a27      	ldr	r2, [pc, #156]	; (80012d4 <HAL_I2C_MspInit+0xc8>)
 8001238:	4293      	cmp	r3, r2
 800123a:	d146      	bne.n	80012ca <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 800123c:	f04f 0210 	mov.w	r2, #16
 8001240:	f04f 0300 	mov.w	r3, #0
 8001244:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 8001248:	2300      	movs	r3, #0
 800124a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800124e:	f107 0310 	add.w	r3, r7, #16
 8001252:	4618      	mov	r0, r3
 8001254:	f003 f956 	bl	8004504 <HAL_RCCEx_PeriphCLKConfig>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 800125e:	f7ff fec3 	bl	8000fe8 <Error_Handler>
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001262:	4b1d      	ldr	r3, [pc, #116]	; (80012d8 <HAL_I2C_MspInit+0xcc>)
 8001264:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001268:	4a1b      	ldr	r2, [pc, #108]	; (80012d8 <HAL_I2C_MspInit+0xcc>)
 800126a:	f043 0308 	orr.w	r3, r3, #8
 800126e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001272:	4b19      	ldr	r3, [pc, #100]	; (80012d8 <HAL_I2C_MspInit+0xcc>)
 8001274:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001278:	f003 0308 	and.w	r3, r3, #8
 800127c:	60fb      	str	r3, [r7, #12]
 800127e:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PD12     ------> I2C4_SCL
    PD13     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = I2C_Clock_Pin|I2C_Data_Pin;
 8001280:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001284:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001288:	2312      	movs	r3, #18
 800128a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128e:	2300      	movs	r3, #0
 8001290:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001294:	2300      	movs	r3, #0
 8001296:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 800129a:	2304      	movs	r3, #4
 800129c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012a0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80012a4:	4619      	mov	r1, r3
 80012a6:	480d      	ldr	r0, [pc, #52]	; (80012dc <HAL_I2C_MspInit+0xd0>)
 80012a8:	f001 f95c 	bl	8002564 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 80012ac:	4b0a      	ldr	r3, [pc, #40]	; (80012d8 <HAL_I2C_MspInit+0xcc>)
 80012ae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80012b2:	4a09      	ldr	r2, [pc, #36]	; (80012d8 <HAL_I2C_MspInit+0xcc>)
 80012b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012b8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80012bc:	4b06      	ldr	r3, [pc, #24]	; (80012d8 <HAL_I2C_MspInit+0xcc>)
 80012be:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80012c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012c6:	60bb      	str	r3, [r7, #8]
 80012c8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 80012ca:	bf00      	nop
 80012cc:	37e8      	adds	r7, #232	; 0xe8
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	58001c00 	.word	0x58001c00
 80012d8:	58024400 	.word	0x58024400
 80012dc:	58020c00 	.word	0x58020c00

080012e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b0ba      	sub	sp, #232	; 0xe8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80012ec:	2200      	movs	r2, #0
 80012ee:	601a      	str	r2, [r3, #0]
 80012f0:	605a      	str	r2, [r3, #4]
 80012f2:	609a      	str	r2, [r3, #8]
 80012f4:	60da      	str	r2, [r3, #12]
 80012f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012f8:	f107 0310 	add.w	r3, r7, #16
 80012fc:	22c0      	movs	r2, #192	; 0xc0
 80012fe:	2100      	movs	r1, #0
 8001300:	4618      	mov	r0, r3
 8001302:	f00c f884 	bl	800d40e <memset>
  if(huart->Instance==USART2)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4a2a      	ldr	r2, [pc, #168]	; (80013b4 <HAL_UART_MspInit+0xd4>)
 800130c:	4293      	cmp	r3, r2
 800130e:	d14d      	bne.n	80013ac <HAL_UART_MspInit+0xcc>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001310:	f04f 0202 	mov.w	r2, #2
 8001314:	f04f 0300 	mov.w	r3, #0
 8001318:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800131c:	2300      	movs	r3, #0
 800131e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001322:	f107 0310 	add.w	r3, r7, #16
 8001326:	4618      	mov	r0, r3
 8001328:	f003 f8ec 	bl	8004504 <HAL_RCCEx_PeriphCLKConfig>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001332:	f7ff fe59 	bl	8000fe8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001336:	4b20      	ldr	r3, [pc, #128]	; (80013b8 <HAL_UART_MspInit+0xd8>)
 8001338:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800133c:	4a1e      	ldr	r2, [pc, #120]	; (80013b8 <HAL_UART_MspInit+0xd8>)
 800133e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001342:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001346:	4b1c      	ldr	r3, [pc, #112]	; (80013b8 <HAL_UART_MspInit+0xd8>)
 8001348:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800134c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001350:	60fb      	str	r3, [r7, #12]
 8001352:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001354:	4b18      	ldr	r3, [pc, #96]	; (80013b8 <HAL_UART_MspInit+0xd8>)
 8001356:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800135a:	4a17      	ldr	r2, [pc, #92]	; (80013b8 <HAL_UART_MspInit+0xd8>)
 800135c:	f043 0308 	orr.w	r3, r3, #8
 8001360:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001364:	4b14      	ldr	r3, [pc, #80]	; (80013b8 <HAL_UART_MspInit+0xd8>)
 8001366:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800136a:	f003 0308 	and.w	r3, r3, #8
 800136e:	60bb      	str	r3, [r7, #8]
 8001370:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USRT_TX_Pin|USRT_RX_Pin;
 8001372:	2360      	movs	r3, #96	; 0x60
 8001374:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001378:	2302      	movs	r3, #2
 800137a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800137e:	2301      	movs	r3, #1
 8001380:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001384:	2300      	movs	r3, #0
 8001386:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800138a:	2307      	movs	r3, #7
 800138c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001390:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001394:	4619      	mov	r1, r3
 8001396:	4809      	ldr	r0, [pc, #36]	; (80013bc <HAL_UART_MspInit+0xdc>)
 8001398:	f001 f8e4 	bl	8002564 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800139c:	2200      	movs	r2, #0
 800139e:	2105      	movs	r1, #5
 80013a0:	2026      	movs	r0, #38	; 0x26
 80013a2:	f000 fb53 	bl	8001a4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80013a6:	2026      	movs	r0, #38	; 0x26
 80013a8:	f000 fb6a 	bl	8001a80 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80013ac:	bf00      	nop
 80013ae:	37e8      	adds	r7, #232	; 0xe8
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	40004400 	.word	0x40004400
 80013b8:	58024400 	.word	0x58024400
 80013bc:	58020c00 	.word	0x58020c00

080013c0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b08e      	sub	sp, #56	; 0x38
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM1 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2b0f      	cmp	r3, #15
 80013cc:	d842      	bhi.n	8001454 <HAL_InitTick+0x94>
  {
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0U);
 80013ce:	2200      	movs	r2, #0
 80013d0:	6879      	ldr	r1, [r7, #4]
 80013d2:	2019      	movs	r0, #25
 80013d4:	f000 fb3a 	bl	8001a4c <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80013d8:	2019      	movs	r0, #25
 80013da:	f000 fb51 	bl	8001a80 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 80013de:	4a23      	ldr	r2, [pc, #140]	; (800146c <HAL_InitTick+0xac>)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80013e4:	4b22      	ldr	r3, [pc, #136]	; (8001470 <HAL_InitTick+0xb0>)
 80013e6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80013ea:	4a21      	ldr	r2, [pc, #132]	; (8001470 <HAL_InitTick+0xb0>)
 80013ec:	f043 0301 	orr.w	r3, r3, #1
 80013f0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80013f4:	4b1e      	ldr	r3, [pc, #120]	; (8001470 <HAL_InitTick+0xb0>)
 80013f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80013fa:	f003 0301 	and.w	r3, r3, #1
 80013fe:	60bb      	str	r3, [r7, #8]
 8001400:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001402:	f107 020c 	add.w	r2, r7, #12
 8001406:	f107 0310 	add.w	r3, r7, #16
 800140a:	4611      	mov	r1, r2
 800140c:	4618      	mov	r0, r3
 800140e:	f003 f837 	bl	8004480 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001412:	f003 f81f 	bl	8004454 <HAL_RCC_GetPCLK2Freq>
 8001416:	6378      	str	r0, [r7, #52]	; 0x34

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001418:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800141a:	4a16      	ldr	r2, [pc, #88]	; (8001474 <HAL_InitTick+0xb4>)
 800141c:	fba2 2303 	umull	r2, r3, r2, r3
 8001420:	0c9b      	lsrs	r3, r3, #18
 8001422:	3b01      	subs	r3, #1
 8001424:	633b      	str	r3, [r7, #48]	; 0x30

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001426:	4b14      	ldr	r3, [pc, #80]	; (8001478 <HAL_InitTick+0xb8>)
 8001428:	4a14      	ldr	r2, [pc, #80]	; (800147c <HAL_InitTick+0xbc>)
 800142a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800142c:	4b12      	ldr	r3, [pc, #72]	; (8001478 <HAL_InitTick+0xb8>)
 800142e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001432:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001434:	4a10      	ldr	r2, [pc, #64]	; (8001478 <HAL_InitTick+0xb8>)
 8001436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001438:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800143a:	4b0f      	ldr	r3, [pc, #60]	; (8001478 <HAL_InitTick+0xb8>)
 800143c:	2200      	movs	r2, #0
 800143e:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001440:	4b0d      	ldr	r3, [pc, #52]	; (8001478 <HAL_InitTick+0xb8>)
 8001442:	2200      	movs	r2, #0
 8001444:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001446:	480c      	ldr	r0, [pc, #48]	; (8001478 <HAL_InitTick+0xb8>)
 8001448:	f004 fe88 	bl	800615c <HAL_TIM_Base_Init>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d107      	bne.n	8001462 <HAL_InitTick+0xa2>
 8001452:	e001      	b.n	8001458 <HAL_InitTick+0x98>
    return HAL_ERROR;
 8001454:	2301      	movs	r3, #1
 8001456:	e005      	b.n	8001464 <HAL_InitTick+0xa4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001458:	4807      	ldr	r0, [pc, #28]	; (8001478 <HAL_InitTick+0xb8>)
 800145a:	f004 fee1 	bl	8006220 <HAL_TIM_Base_Start_IT>
 800145e:	4603      	mov	r3, r0
 8001460:	e000      	b.n	8001464 <HAL_InitTick+0xa4>
  }

  /* Return function status */
  return HAL_ERROR;
 8001462:	2301      	movs	r3, #1
}
 8001464:	4618      	mov	r0, r3
 8001466:	3738      	adds	r7, #56	; 0x38
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	24000010 	.word	0x24000010
 8001470:	58024400 	.word	0x58024400
 8001474:	431bde83 	.word	0x431bde83
 8001478:	24000ff4 	.word	0x24000ff4
 800147c:	40010000 	.word	0x40010000

08001480 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001484:	e7fe      	b.n	8001484 <NMI_Handler+0x4>

08001486 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001486:	b480      	push	{r7}
 8001488:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800148a:	e7fe      	b.n	800148a <HardFault_Handler+0x4>

0800148c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001490:	e7fe      	b.n	8001490 <MemManage_Handler+0x4>

08001492 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001492:	b480      	push	{r7}
 8001494:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001496:	e7fe      	b.n	8001496 <BusFault_Handler+0x4>

08001498 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800149c:	e7fe      	b.n	800149c <UsageFault_Handler+0x4>

0800149e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800149e:	b480      	push	{r7}
 80014a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014a2:	bf00      	nop
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr

080014ac <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80014b0:	4802      	ldr	r0, [pc, #8]	; (80014bc <TIM1_UP_IRQHandler+0x10>)
 80014b2:	f004 ff2d 	bl	8006310 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80014b6:	bf00      	nop
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	24000ff4 	.word	0x24000ff4

080014c0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80014c4:	4802      	ldr	r0, [pc, #8]	; (80014d0 <USART2_IRQHandler+0x10>)
 80014c6:	f005 fa4d 	bl	8006964 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80014ca:	bf00      	nop
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	24000254 	.word	0x24000254

080014d4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
  return 1;
 80014d8:	2301      	movs	r3, #1
}
 80014da:	4618      	mov	r0, r3
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr

080014e4 <_kill>:

int _kill(int pid, int sig)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
 80014ec:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80014ee:	f00c f85b 	bl	800d5a8 <__errno>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2216      	movs	r2, #22
 80014f6:	601a      	str	r2, [r3, #0]
  return -1;
 80014f8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	3708      	adds	r7, #8
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}

08001504 <_exit>:

void _exit (int status)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800150c:	f04f 31ff 	mov.w	r1, #4294967295
 8001510:	6878      	ldr	r0, [r7, #4]
 8001512:	f7ff ffe7 	bl	80014e4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001516:	e7fe      	b.n	8001516 <_exit+0x12>

08001518 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b086      	sub	sp, #24
 800151c:	af00      	add	r7, sp, #0
 800151e:	60f8      	str	r0, [r7, #12]
 8001520:	60b9      	str	r1, [r7, #8]
 8001522:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001524:	2300      	movs	r3, #0
 8001526:	617b      	str	r3, [r7, #20]
 8001528:	e00a      	b.n	8001540 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800152a:	f3af 8000 	nop.w
 800152e:	4601      	mov	r1, r0
 8001530:	68bb      	ldr	r3, [r7, #8]
 8001532:	1c5a      	adds	r2, r3, #1
 8001534:	60ba      	str	r2, [r7, #8]
 8001536:	b2ca      	uxtb	r2, r1
 8001538:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	3301      	adds	r3, #1
 800153e:	617b      	str	r3, [r7, #20]
 8001540:	697a      	ldr	r2, [r7, #20]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	429a      	cmp	r2, r3
 8001546:	dbf0      	blt.n	800152a <_read+0x12>
  }

  return len;
 8001548:	687b      	ldr	r3, [r7, #4]
}
 800154a:	4618      	mov	r0, r3
 800154c:	3718      	adds	r7, #24
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}

08001552 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001552:	b580      	push	{r7, lr}
 8001554:	b086      	sub	sp, #24
 8001556:	af00      	add	r7, sp, #0
 8001558:	60f8      	str	r0, [r7, #12]
 800155a:	60b9      	str	r1, [r7, #8]
 800155c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800155e:	2300      	movs	r3, #0
 8001560:	617b      	str	r3, [r7, #20]
 8001562:	e009      	b.n	8001578 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001564:	68bb      	ldr	r3, [r7, #8]
 8001566:	1c5a      	adds	r2, r3, #1
 8001568:	60ba      	str	r2, [r7, #8]
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	4618      	mov	r0, r3
 800156e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001572:	697b      	ldr	r3, [r7, #20]
 8001574:	3301      	adds	r3, #1
 8001576:	617b      	str	r3, [r7, #20]
 8001578:	697a      	ldr	r2, [r7, #20]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	429a      	cmp	r2, r3
 800157e:	dbf1      	blt.n	8001564 <_write+0x12>
  }
  return len;
 8001580:	687b      	ldr	r3, [r7, #4]
}
 8001582:	4618      	mov	r0, r3
 8001584:	3718      	adds	r7, #24
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}

0800158a <_close>:

int _close(int file)
{
 800158a:	b480      	push	{r7}
 800158c:	b083      	sub	sp, #12
 800158e:	af00      	add	r7, sp, #0
 8001590:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001592:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001596:	4618      	mov	r0, r3
 8001598:	370c      	adds	r7, #12
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr

080015a2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015a2:	b480      	push	{r7}
 80015a4:	b083      	sub	sp, #12
 80015a6:	af00      	add	r7, sp, #0
 80015a8:	6078      	str	r0, [r7, #4]
 80015aa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015b2:	605a      	str	r2, [r3, #4]
  return 0;
 80015b4:	2300      	movs	r3, #0
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	370c      	adds	r7, #12
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr

080015c2 <_isatty>:

int _isatty(int file)
{
 80015c2:	b480      	push	{r7}
 80015c4:	b083      	sub	sp, #12
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80015ca:	2301      	movs	r3, #1
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	370c      	adds	r7, #12
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr

080015d8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015d8:	b480      	push	{r7}
 80015da:	b085      	sub	sp, #20
 80015dc:	af00      	add	r7, sp, #0
 80015de:	60f8      	str	r0, [r7, #12]
 80015e0:	60b9      	str	r1, [r7, #8]
 80015e2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80015e4:	2300      	movs	r3, #0
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	3714      	adds	r7, #20
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr
	...

080015f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b086      	sub	sp, #24
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015fc:	4a14      	ldr	r2, [pc, #80]	; (8001650 <_sbrk+0x5c>)
 80015fe:	4b15      	ldr	r3, [pc, #84]	; (8001654 <_sbrk+0x60>)
 8001600:	1ad3      	subs	r3, r2, r3
 8001602:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001608:	4b13      	ldr	r3, [pc, #76]	; (8001658 <_sbrk+0x64>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d102      	bne.n	8001616 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001610:	4b11      	ldr	r3, [pc, #68]	; (8001658 <_sbrk+0x64>)
 8001612:	4a12      	ldr	r2, [pc, #72]	; (800165c <_sbrk+0x68>)
 8001614:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001616:	4b10      	ldr	r3, [pc, #64]	; (8001658 <_sbrk+0x64>)
 8001618:	681a      	ldr	r2, [r3, #0]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	4413      	add	r3, r2
 800161e:	693a      	ldr	r2, [r7, #16]
 8001620:	429a      	cmp	r2, r3
 8001622:	d207      	bcs.n	8001634 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001624:	f00b ffc0 	bl	800d5a8 <__errno>
 8001628:	4603      	mov	r3, r0
 800162a:	220c      	movs	r2, #12
 800162c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800162e:	f04f 33ff 	mov.w	r3, #4294967295
 8001632:	e009      	b.n	8001648 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001634:	4b08      	ldr	r3, [pc, #32]	; (8001658 <_sbrk+0x64>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800163a:	4b07      	ldr	r3, [pc, #28]	; (8001658 <_sbrk+0x64>)
 800163c:	681a      	ldr	r2, [r3, #0]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	4413      	add	r3, r2
 8001642:	4a05      	ldr	r2, [pc, #20]	; (8001658 <_sbrk+0x64>)
 8001644:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001646:	68fb      	ldr	r3, [r7, #12]
}
 8001648:	4618      	mov	r0, r3
 800164a:	3718      	adds	r7, #24
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}
 8001650:	24080000 	.word	0x24080000
 8001654:	00000400 	.word	0x00000400
 8001658:	24001040 	.word	0x24001040
 800165c:	24005b80 	.word	0x24005b80

08001660 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001664:	4b37      	ldr	r3, [pc, #220]	; (8001744 <SystemInit+0xe4>)
 8001666:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800166a:	4a36      	ldr	r2, [pc, #216]	; (8001744 <SystemInit+0xe4>)
 800166c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001670:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001674:	4b34      	ldr	r3, [pc, #208]	; (8001748 <SystemInit+0xe8>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f003 030f 	and.w	r3, r3, #15
 800167c:	2b06      	cmp	r3, #6
 800167e:	d807      	bhi.n	8001690 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001680:	4b31      	ldr	r3, [pc, #196]	; (8001748 <SystemInit+0xe8>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f023 030f 	bic.w	r3, r3, #15
 8001688:	4a2f      	ldr	r2, [pc, #188]	; (8001748 <SystemInit+0xe8>)
 800168a:	f043 0307 	orr.w	r3, r3, #7
 800168e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001690:	4b2e      	ldr	r3, [pc, #184]	; (800174c <SystemInit+0xec>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a2d      	ldr	r2, [pc, #180]	; (800174c <SystemInit+0xec>)
 8001696:	f043 0301 	orr.w	r3, r3, #1
 800169a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800169c:	4b2b      	ldr	r3, [pc, #172]	; (800174c <SystemInit+0xec>)
 800169e:	2200      	movs	r2, #0
 80016a0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80016a2:	4b2a      	ldr	r3, [pc, #168]	; (800174c <SystemInit+0xec>)
 80016a4:	681a      	ldr	r2, [r3, #0]
 80016a6:	4929      	ldr	r1, [pc, #164]	; (800174c <SystemInit+0xec>)
 80016a8:	4b29      	ldr	r3, [pc, #164]	; (8001750 <SystemInit+0xf0>)
 80016aa:	4013      	ands	r3, r2
 80016ac:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80016ae:	4b26      	ldr	r3, [pc, #152]	; (8001748 <SystemInit+0xe8>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f003 0308 	and.w	r3, r3, #8
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d007      	beq.n	80016ca <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80016ba:	4b23      	ldr	r3, [pc, #140]	; (8001748 <SystemInit+0xe8>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f023 030f 	bic.w	r3, r3, #15
 80016c2:	4a21      	ldr	r2, [pc, #132]	; (8001748 <SystemInit+0xe8>)
 80016c4:	f043 0307 	orr.w	r3, r3, #7
 80016c8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80016ca:	4b20      	ldr	r3, [pc, #128]	; (800174c <SystemInit+0xec>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80016d0:	4b1e      	ldr	r3, [pc, #120]	; (800174c <SystemInit+0xec>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80016d6:	4b1d      	ldr	r3, [pc, #116]	; (800174c <SystemInit+0xec>)
 80016d8:	2200      	movs	r2, #0
 80016da:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80016dc:	4b1b      	ldr	r3, [pc, #108]	; (800174c <SystemInit+0xec>)
 80016de:	4a1d      	ldr	r2, [pc, #116]	; (8001754 <SystemInit+0xf4>)
 80016e0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80016e2:	4b1a      	ldr	r3, [pc, #104]	; (800174c <SystemInit+0xec>)
 80016e4:	4a1c      	ldr	r2, [pc, #112]	; (8001758 <SystemInit+0xf8>)
 80016e6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80016e8:	4b18      	ldr	r3, [pc, #96]	; (800174c <SystemInit+0xec>)
 80016ea:	4a1c      	ldr	r2, [pc, #112]	; (800175c <SystemInit+0xfc>)
 80016ec:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80016ee:	4b17      	ldr	r3, [pc, #92]	; (800174c <SystemInit+0xec>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80016f4:	4b15      	ldr	r3, [pc, #84]	; (800174c <SystemInit+0xec>)
 80016f6:	4a19      	ldr	r2, [pc, #100]	; (800175c <SystemInit+0xfc>)
 80016f8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80016fa:	4b14      	ldr	r3, [pc, #80]	; (800174c <SystemInit+0xec>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001700:	4b12      	ldr	r3, [pc, #72]	; (800174c <SystemInit+0xec>)
 8001702:	4a16      	ldr	r2, [pc, #88]	; (800175c <SystemInit+0xfc>)
 8001704:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001706:	4b11      	ldr	r3, [pc, #68]	; (800174c <SystemInit+0xec>)
 8001708:	2200      	movs	r2, #0
 800170a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800170c:	4b0f      	ldr	r3, [pc, #60]	; (800174c <SystemInit+0xec>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a0e      	ldr	r2, [pc, #56]	; (800174c <SystemInit+0xec>)
 8001712:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001716:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001718:	4b0c      	ldr	r3, [pc, #48]	; (800174c <SystemInit+0xec>)
 800171a:	2200      	movs	r2, #0
 800171c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800171e:	4b10      	ldr	r3, [pc, #64]	; (8001760 <SystemInit+0x100>)
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	4b10      	ldr	r3, [pc, #64]	; (8001764 <SystemInit+0x104>)
 8001724:	4013      	ands	r3, r2
 8001726:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800172a:	d202      	bcs.n	8001732 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800172c:	4b0e      	ldr	r3, [pc, #56]	; (8001768 <SystemInit+0x108>)
 800172e:	2201      	movs	r2, #1
 8001730:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001732:	4b0e      	ldr	r3, [pc, #56]	; (800176c <SystemInit+0x10c>)
 8001734:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001738:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800173a:	bf00      	nop
 800173c:	46bd      	mov	sp, r7
 800173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001742:	4770      	bx	lr
 8001744:	e000ed00 	.word	0xe000ed00
 8001748:	52002000 	.word	0x52002000
 800174c:	58024400 	.word	0x58024400
 8001750:	eaf6ed7f 	.word	0xeaf6ed7f
 8001754:	02020200 	.word	0x02020200
 8001758:	01ff0000 	.word	0x01ff0000
 800175c:	01010280 	.word	0x01010280
 8001760:	5c001000 	.word	0x5c001000
 8001764:	ffff0000 	.word	0xffff0000
 8001768:	51008108 	.word	0x51008108
 800176c:	52004000 	.word	0x52004000

08001770 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001770:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017a8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001774:	f7ff ff74 	bl	8001660 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001778:	480c      	ldr	r0, [pc, #48]	; (80017ac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800177a:	490d      	ldr	r1, [pc, #52]	; (80017b0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800177c:	4a0d      	ldr	r2, [pc, #52]	; (80017b4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800177e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001780:	e002      	b.n	8001788 <LoopCopyDataInit>

08001782 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001782:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001784:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001786:	3304      	adds	r3, #4

08001788 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001788:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800178a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800178c:	d3f9      	bcc.n	8001782 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800178e:	4a0a      	ldr	r2, [pc, #40]	; (80017b8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001790:	4c0a      	ldr	r4, [pc, #40]	; (80017bc <LoopFillZerobss+0x22>)
  movs r3, #0
 8001792:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001794:	e001      	b.n	800179a <LoopFillZerobss>

08001796 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001796:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001798:	3204      	adds	r2, #4

0800179a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800179a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800179c:	d3fb      	bcc.n	8001796 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800179e:	f00b ff09 	bl	800d5b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017a2:	f7fe ff73 	bl	800068c <main>
  bx  lr
 80017a6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80017a8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80017ac:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80017b0:	240001e4 	.word	0x240001e4
  ldr r2, =_sidata
 80017b4:	0800fbf8 	.word	0x0800fbf8
  ldr r2, =_sbss
 80017b8:	240001e4 	.word	0x240001e4
  ldr r4, =_ebss
 80017bc:	24005b7c 	.word	0x24005b7c

080017c0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017c0:	e7fe      	b.n	80017c0 <ADC3_IRQHandler>
	...

080017c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017ca:	2003      	movs	r0, #3
 80017cc:	f000 f933 	bl	8001a36 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80017d0:	f002 fc80 	bl	80040d4 <HAL_RCC_GetSysClockFreq>
 80017d4:	4602      	mov	r2, r0
 80017d6:	4b15      	ldr	r3, [pc, #84]	; (800182c <HAL_Init+0x68>)
 80017d8:	699b      	ldr	r3, [r3, #24]
 80017da:	0a1b      	lsrs	r3, r3, #8
 80017dc:	f003 030f 	and.w	r3, r3, #15
 80017e0:	4913      	ldr	r1, [pc, #76]	; (8001830 <HAL_Init+0x6c>)
 80017e2:	5ccb      	ldrb	r3, [r1, r3]
 80017e4:	f003 031f 	and.w	r3, r3, #31
 80017e8:	fa22 f303 	lsr.w	r3, r2, r3
 80017ec:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80017ee:	4b0f      	ldr	r3, [pc, #60]	; (800182c <HAL_Init+0x68>)
 80017f0:	699b      	ldr	r3, [r3, #24]
 80017f2:	f003 030f 	and.w	r3, r3, #15
 80017f6:	4a0e      	ldr	r2, [pc, #56]	; (8001830 <HAL_Init+0x6c>)
 80017f8:	5cd3      	ldrb	r3, [r2, r3]
 80017fa:	f003 031f 	and.w	r3, r3, #31
 80017fe:	687a      	ldr	r2, [r7, #4]
 8001800:	fa22 f303 	lsr.w	r3, r2, r3
 8001804:	4a0b      	ldr	r2, [pc, #44]	; (8001834 <HAL_Init+0x70>)
 8001806:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001808:	4a0b      	ldr	r2, [pc, #44]	; (8001838 <HAL_Init+0x74>)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800180e:	200f      	movs	r0, #15
 8001810:	f7ff fdd6 	bl	80013c0 <HAL_InitTick>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d001      	beq.n	800181e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800181a:	2301      	movs	r3, #1
 800181c:	e002      	b.n	8001824 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800181e:	f7ff fcd7 	bl	80011d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001822:	2300      	movs	r3, #0
}
 8001824:	4618      	mov	r0, r3
 8001826:	3708      	adds	r7, #8
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	58024400 	.word	0x58024400
 8001830:	0800f83c 	.word	0x0800f83c
 8001834:	2400000c 	.word	0x2400000c
 8001838:	24000008 	.word	0x24000008

0800183c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001840:	4b06      	ldr	r3, [pc, #24]	; (800185c <HAL_IncTick+0x20>)
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	461a      	mov	r2, r3
 8001846:	4b06      	ldr	r3, [pc, #24]	; (8001860 <HAL_IncTick+0x24>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4413      	add	r3, r2
 800184c:	4a04      	ldr	r2, [pc, #16]	; (8001860 <HAL_IncTick+0x24>)
 800184e:	6013      	str	r3, [r2, #0]
}
 8001850:	bf00      	nop
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr
 800185a:	bf00      	nop
 800185c:	24000014 	.word	0x24000014
 8001860:	24001044 	.word	0x24001044

08001864 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
  return uwTick;
 8001868:	4b03      	ldr	r3, [pc, #12]	; (8001878 <HAL_GetTick+0x14>)
 800186a:	681b      	ldr	r3, [r3, #0]
}
 800186c:	4618      	mov	r0, r3
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr
 8001876:	bf00      	nop
 8001878:	24001044 	.word	0x24001044

0800187c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b084      	sub	sp, #16
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001884:	f7ff ffee 	bl	8001864 <HAL_GetTick>
 8001888:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001894:	d005      	beq.n	80018a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001896:	4b0a      	ldr	r3, [pc, #40]	; (80018c0 <HAL_Delay+0x44>)
 8001898:	781b      	ldrb	r3, [r3, #0]
 800189a:	461a      	mov	r2, r3
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	4413      	add	r3, r2
 80018a0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80018a2:	bf00      	nop
 80018a4:	f7ff ffde 	bl	8001864 <HAL_GetTick>
 80018a8:	4602      	mov	r2, r0
 80018aa:	68bb      	ldr	r3, [r7, #8]
 80018ac:	1ad3      	subs	r3, r2, r3
 80018ae:	68fa      	ldr	r2, [r7, #12]
 80018b0:	429a      	cmp	r2, r3
 80018b2:	d8f7      	bhi.n	80018a4 <HAL_Delay+0x28>
  {
  }
}
 80018b4:	bf00      	nop
 80018b6:	bf00      	nop
 80018b8:	3710      	adds	r7, #16
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	24000014 	.word	0x24000014

080018c4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80018c8:	4b03      	ldr	r3, [pc, #12]	; (80018d8 <HAL_GetREVID+0x14>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	0c1b      	lsrs	r3, r3, #16
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr
 80018d8:	5c001000 	.word	0x5c001000

080018dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018dc:	b480      	push	{r7}
 80018de:	b085      	sub	sp, #20
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	f003 0307 	and.w	r3, r3, #7
 80018ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018ec:	4b0b      	ldr	r3, [pc, #44]	; (800191c <__NVIC_SetPriorityGrouping+0x40>)
 80018ee:	68db      	ldr	r3, [r3, #12]
 80018f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018f2:	68ba      	ldr	r2, [r7, #8]
 80018f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018f8:	4013      	ands	r3, r2
 80018fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001900:	68bb      	ldr	r3, [r7, #8]
 8001902:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001904:	4b06      	ldr	r3, [pc, #24]	; (8001920 <__NVIC_SetPriorityGrouping+0x44>)
 8001906:	4313      	orrs	r3, r2
 8001908:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800190a:	4a04      	ldr	r2, [pc, #16]	; (800191c <__NVIC_SetPriorityGrouping+0x40>)
 800190c:	68bb      	ldr	r3, [r7, #8]
 800190e:	60d3      	str	r3, [r2, #12]
}
 8001910:	bf00      	nop
 8001912:	3714      	adds	r7, #20
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr
 800191c:	e000ed00 	.word	0xe000ed00
 8001920:	05fa0000 	.word	0x05fa0000

08001924 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001928:	4b04      	ldr	r3, [pc, #16]	; (800193c <__NVIC_GetPriorityGrouping+0x18>)
 800192a:	68db      	ldr	r3, [r3, #12]
 800192c:	0a1b      	lsrs	r3, r3, #8
 800192e:	f003 0307 	and.w	r3, r3, #7
}
 8001932:	4618      	mov	r0, r3
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr
 800193c:	e000ed00 	.word	0xe000ed00

08001940 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001940:	b480      	push	{r7}
 8001942:	b083      	sub	sp, #12
 8001944:	af00      	add	r7, sp, #0
 8001946:	4603      	mov	r3, r0
 8001948:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800194a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800194e:	2b00      	cmp	r3, #0
 8001950:	db0b      	blt.n	800196a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001952:	88fb      	ldrh	r3, [r7, #6]
 8001954:	f003 021f 	and.w	r2, r3, #31
 8001958:	4907      	ldr	r1, [pc, #28]	; (8001978 <__NVIC_EnableIRQ+0x38>)
 800195a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800195e:	095b      	lsrs	r3, r3, #5
 8001960:	2001      	movs	r0, #1
 8001962:	fa00 f202 	lsl.w	r2, r0, r2
 8001966:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800196a:	bf00      	nop
 800196c:	370c      	adds	r7, #12
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr
 8001976:	bf00      	nop
 8001978:	e000e100 	.word	0xe000e100

0800197c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800197c:	b480      	push	{r7}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0
 8001982:	4603      	mov	r3, r0
 8001984:	6039      	str	r1, [r7, #0]
 8001986:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001988:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800198c:	2b00      	cmp	r3, #0
 800198e:	db0a      	blt.n	80019a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	b2da      	uxtb	r2, r3
 8001994:	490c      	ldr	r1, [pc, #48]	; (80019c8 <__NVIC_SetPriority+0x4c>)
 8001996:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800199a:	0112      	lsls	r2, r2, #4
 800199c:	b2d2      	uxtb	r2, r2
 800199e:	440b      	add	r3, r1
 80019a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019a4:	e00a      	b.n	80019bc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	b2da      	uxtb	r2, r3
 80019aa:	4908      	ldr	r1, [pc, #32]	; (80019cc <__NVIC_SetPriority+0x50>)
 80019ac:	88fb      	ldrh	r3, [r7, #6]
 80019ae:	f003 030f 	and.w	r3, r3, #15
 80019b2:	3b04      	subs	r3, #4
 80019b4:	0112      	lsls	r2, r2, #4
 80019b6:	b2d2      	uxtb	r2, r2
 80019b8:	440b      	add	r3, r1
 80019ba:	761a      	strb	r2, [r3, #24]
}
 80019bc:	bf00      	nop
 80019be:	370c      	adds	r7, #12
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr
 80019c8:	e000e100 	.word	0xe000e100
 80019cc:	e000ed00 	.word	0xe000ed00

080019d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b089      	sub	sp, #36	; 0x24
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	60f8      	str	r0, [r7, #12]
 80019d8:	60b9      	str	r1, [r7, #8]
 80019da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	f003 0307 	and.w	r3, r3, #7
 80019e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019e4:	69fb      	ldr	r3, [r7, #28]
 80019e6:	f1c3 0307 	rsb	r3, r3, #7
 80019ea:	2b04      	cmp	r3, #4
 80019ec:	bf28      	it	cs
 80019ee:	2304      	movcs	r3, #4
 80019f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019f2:	69fb      	ldr	r3, [r7, #28]
 80019f4:	3304      	adds	r3, #4
 80019f6:	2b06      	cmp	r3, #6
 80019f8:	d902      	bls.n	8001a00 <NVIC_EncodePriority+0x30>
 80019fa:	69fb      	ldr	r3, [r7, #28]
 80019fc:	3b03      	subs	r3, #3
 80019fe:	e000      	b.n	8001a02 <NVIC_EncodePriority+0x32>
 8001a00:	2300      	movs	r3, #0
 8001a02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a04:	f04f 32ff 	mov.w	r2, #4294967295
 8001a08:	69bb      	ldr	r3, [r7, #24]
 8001a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0e:	43da      	mvns	r2, r3
 8001a10:	68bb      	ldr	r3, [r7, #8]
 8001a12:	401a      	ands	r2, r3
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a18:	f04f 31ff 	mov.w	r1, #4294967295
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a22:	43d9      	mvns	r1, r3
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a28:	4313      	orrs	r3, r2
         );
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3724      	adds	r7, #36	; 0x24
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr

08001a36 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a36:	b580      	push	{r7, lr}
 8001a38:	b082      	sub	sp, #8
 8001a3a:	af00      	add	r7, sp, #0
 8001a3c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a3e:	6878      	ldr	r0, [r7, #4]
 8001a40:	f7ff ff4c 	bl	80018dc <__NVIC_SetPriorityGrouping>
}
 8001a44:	bf00      	nop
 8001a46:	3708      	adds	r7, #8
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}

08001a4c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b086      	sub	sp, #24
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	4603      	mov	r3, r0
 8001a54:	60b9      	str	r1, [r7, #8]
 8001a56:	607a      	str	r2, [r7, #4]
 8001a58:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001a5a:	f7ff ff63 	bl	8001924 <__NVIC_GetPriorityGrouping>
 8001a5e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a60:	687a      	ldr	r2, [r7, #4]
 8001a62:	68b9      	ldr	r1, [r7, #8]
 8001a64:	6978      	ldr	r0, [r7, #20]
 8001a66:	f7ff ffb3 	bl	80019d0 <NVIC_EncodePriority>
 8001a6a:	4602      	mov	r2, r0
 8001a6c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001a70:	4611      	mov	r1, r2
 8001a72:	4618      	mov	r0, r3
 8001a74:	f7ff ff82 	bl	800197c <__NVIC_SetPriority>
}
 8001a78:	bf00      	nop
 8001a7a:	3718      	adds	r7, #24
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}

08001a80 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	4603      	mov	r3, r0
 8001a88:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a8a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f7ff ff56 	bl	8001940 <__NVIC_EnableIRQ>
}
 8001a94:	bf00      	nop
 8001a96:	3708      	adds	r7, #8
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}

08001a9c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b086      	sub	sp, #24
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8001aa4:	f7ff fede 	bl	8001864 <HAL_GetTick>
 8001aa8:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d101      	bne.n	8001ab4 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	e2dc      	b.n	800206e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001aba:	b2db      	uxtb	r3, r3
 8001abc:	2b02      	cmp	r3, #2
 8001abe:	d008      	beq.n	8001ad2 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2280      	movs	r2, #128	; 0x80
 8001ac4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2200      	movs	r2, #0
 8001aca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e2cd      	b.n	800206e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a76      	ldr	r2, [pc, #472]	; (8001cb0 <HAL_DMA_Abort+0x214>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d04a      	beq.n	8001b72 <HAL_DMA_Abort+0xd6>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a74      	ldr	r2, [pc, #464]	; (8001cb4 <HAL_DMA_Abort+0x218>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d045      	beq.n	8001b72 <HAL_DMA_Abort+0xd6>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a73      	ldr	r2, [pc, #460]	; (8001cb8 <HAL_DMA_Abort+0x21c>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d040      	beq.n	8001b72 <HAL_DMA_Abort+0xd6>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a71      	ldr	r2, [pc, #452]	; (8001cbc <HAL_DMA_Abort+0x220>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d03b      	beq.n	8001b72 <HAL_DMA_Abort+0xd6>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a70      	ldr	r2, [pc, #448]	; (8001cc0 <HAL_DMA_Abort+0x224>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d036      	beq.n	8001b72 <HAL_DMA_Abort+0xd6>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a6e      	ldr	r2, [pc, #440]	; (8001cc4 <HAL_DMA_Abort+0x228>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d031      	beq.n	8001b72 <HAL_DMA_Abort+0xd6>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a6d      	ldr	r2, [pc, #436]	; (8001cc8 <HAL_DMA_Abort+0x22c>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d02c      	beq.n	8001b72 <HAL_DMA_Abort+0xd6>
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a6b      	ldr	r2, [pc, #428]	; (8001ccc <HAL_DMA_Abort+0x230>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d027      	beq.n	8001b72 <HAL_DMA_Abort+0xd6>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a6a      	ldr	r2, [pc, #424]	; (8001cd0 <HAL_DMA_Abort+0x234>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d022      	beq.n	8001b72 <HAL_DMA_Abort+0xd6>
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a68      	ldr	r2, [pc, #416]	; (8001cd4 <HAL_DMA_Abort+0x238>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d01d      	beq.n	8001b72 <HAL_DMA_Abort+0xd6>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a67      	ldr	r2, [pc, #412]	; (8001cd8 <HAL_DMA_Abort+0x23c>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d018      	beq.n	8001b72 <HAL_DMA_Abort+0xd6>
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a65      	ldr	r2, [pc, #404]	; (8001cdc <HAL_DMA_Abort+0x240>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d013      	beq.n	8001b72 <HAL_DMA_Abort+0xd6>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a64      	ldr	r2, [pc, #400]	; (8001ce0 <HAL_DMA_Abort+0x244>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d00e      	beq.n	8001b72 <HAL_DMA_Abort+0xd6>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a62      	ldr	r2, [pc, #392]	; (8001ce4 <HAL_DMA_Abort+0x248>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d009      	beq.n	8001b72 <HAL_DMA_Abort+0xd6>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a61      	ldr	r2, [pc, #388]	; (8001ce8 <HAL_DMA_Abort+0x24c>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d004      	beq.n	8001b72 <HAL_DMA_Abort+0xd6>
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a5f      	ldr	r2, [pc, #380]	; (8001cec <HAL_DMA_Abort+0x250>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d101      	bne.n	8001b76 <HAL_DMA_Abort+0xda>
 8001b72:	2301      	movs	r3, #1
 8001b74:	e000      	b.n	8001b78 <HAL_DMA_Abort+0xdc>
 8001b76:	2300      	movs	r3, #0
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d013      	beq.n	8001ba4 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	681a      	ldr	r2, [r3, #0]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f022 021e 	bic.w	r2, r2, #30
 8001b8a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	695a      	ldr	r2, [r3, #20]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b9a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	617b      	str	r3, [r7, #20]
 8001ba2:	e00a      	b.n	8001bba <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f022 020e 	bic.w	r2, r2, #14
 8001bb2:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a3c      	ldr	r2, [pc, #240]	; (8001cb0 <HAL_DMA_Abort+0x214>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d072      	beq.n	8001caa <HAL_DMA_Abort+0x20e>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a3a      	ldr	r2, [pc, #232]	; (8001cb4 <HAL_DMA_Abort+0x218>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d06d      	beq.n	8001caa <HAL_DMA_Abort+0x20e>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a39      	ldr	r2, [pc, #228]	; (8001cb8 <HAL_DMA_Abort+0x21c>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d068      	beq.n	8001caa <HAL_DMA_Abort+0x20e>
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a37      	ldr	r2, [pc, #220]	; (8001cbc <HAL_DMA_Abort+0x220>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d063      	beq.n	8001caa <HAL_DMA_Abort+0x20e>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a36      	ldr	r2, [pc, #216]	; (8001cc0 <HAL_DMA_Abort+0x224>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d05e      	beq.n	8001caa <HAL_DMA_Abort+0x20e>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a34      	ldr	r2, [pc, #208]	; (8001cc4 <HAL_DMA_Abort+0x228>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d059      	beq.n	8001caa <HAL_DMA_Abort+0x20e>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4a33      	ldr	r2, [pc, #204]	; (8001cc8 <HAL_DMA_Abort+0x22c>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d054      	beq.n	8001caa <HAL_DMA_Abort+0x20e>
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a31      	ldr	r2, [pc, #196]	; (8001ccc <HAL_DMA_Abort+0x230>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d04f      	beq.n	8001caa <HAL_DMA_Abort+0x20e>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a30      	ldr	r2, [pc, #192]	; (8001cd0 <HAL_DMA_Abort+0x234>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d04a      	beq.n	8001caa <HAL_DMA_Abort+0x20e>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a2e      	ldr	r2, [pc, #184]	; (8001cd4 <HAL_DMA_Abort+0x238>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d045      	beq.n	8001caa <HAL_DMA_Abort+0x20e>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a2d      	ldr	r2, [pc, #180]	; (8001cd8 <HAL_DMA_Abort+0x23c>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d040      	beq.n	8001caa <HAL_DMA_Abort+0x20e>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a2b      	ldr	r2, [pc, #172]	; (8001cdc <HAL_DMA_Abort+0x240>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d03b      	beq.n	8001caa <HAL_DMA_Abort+0x20e>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a2a      	ldr	r2, [pc, #168]	; (8001ce0 <HAL_DMA_Abort+0x244>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d036      	beq.n	8001caa <HAL_DMA_Abort+0x20e>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a28      	ldr	r2, [pc, #160]	; (8001ce4 <HAL_DMA_Abort+0x248>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d031      	beq.n	8001caa <HAL_DMA_Abort+0x20e>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a27      	ldr	r2, [pc, #156]	; (8001ce8 <HAL_DMA_Abort+0x24c>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d02c      	beq.n	8001caa <HAL_DMA_Abort+0x20e>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a25      	ldr	r2, [pc, #148]	; (8001cec <HAL_DMA_Abort+0x250>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d027      	beq.n	8001caa <HAL_DMA_Abort+0x20e>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a24      	ldr	r2, [pc, #144]	; (8001cf0 <HAL_DMA_Abort+0x254>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d022      	beq.n	8001caa <HAL_DMA_Abort+0x20e>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a22      	ldr	r2, [pc, #136]	; (8001cf4 <HAL_DMA_Abort+0x258>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d01d      	beq.n	8001caa <HAL_DMA_Abort+0x20e>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a21      	ldr	r2, [pc, #132]	; (8001cf8 <HAL_DMA_Abort+0x25c>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d018      	beq.n	8001caa <HAL_DMA_Abort+0x20e>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a1f      	ldr	r2, [pc, #124]	; (8001cfc <HAL_DMA_Abort+0x260>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d013      	beq.n	8001caa <HAL_DMA_Abort+0x20e>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a1e      	ldr	r2, [pc, #120]	; (8001d00 <HAL_DMA_Abort+0x264>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d00e      	beq.n	8001caa <HAL_DMA_Abort+0x20e>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a1c      	ldr	r2, [pc, #112]	; (8001d04 <HAL_DMA_Abort+0x268>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d009      	beq.n	8001caa <HAL_DMA_Abort+0x20e>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a1b      	ldr	r2, [pc, #108]	; (8001d08 <HAL_DMA_Abort+0x26c>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d004      	beq.n	8001caa <HAL_DMA_Abort+0x20e>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a19      	ldr	r2, [pc, #100]	; (8001d0c <HAL_DMA_Abort+0x270>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d132      	bne.n	8001d10 <HAL_DMA_Abort+0x274>
 8001caa:	2301      	movs	r3, #1
 8001cac:	e031      	b.n	8001d12 <HAL_DMA_Abort+0x276>
 8001cae:	bf00      	nop
 8001cb0:	40020010 	.word	0x40020010
 8001cb4:	40020028 	.word	0x40020028
 8001cb8:	40020040 	.word	0x40020040
 8001cbc:	40020058 	.word	0x40020058
 8001cc0:	40020070 	.word	0x40020070
 8001cc4:	40020088 	.word	0x40020088
 8001cc8:	400200a0 	.word	0x400200a0
 8001ccc:	400200b8 	.word	0x400200b8
 8001cd0:	40020410 	.word	0x40020410
 8001cd4:	40020428 	.word	0x40020428
 8001cd8:	40020440 	.word	0x40020440
 8001cdc:	40020458 	.word	0x40020458
 8001ce0:	40020470 	.word	0x40020470
 8001ce4:	40020488 	.word	0x40020488
 8001ce8:	400204a0 	.word	0x400204a0
 8001cec:	400204b8 	.word	0x400204b8
 8001cf0:	58025408 	.word	0x58025408
 8001cf4:	5802541c 	.word	0x5802541c
 8001cf8:	58025430 	.word	0x58025430
 8001cfc:	58025444 	.word	0x58025444
 8001d00:	58025458 	.word	0x58025458
 8001d04:	5802546c 	.word	0x5802546c
 8001d08:	58025480 	.word	0x58025480
 8001d0c:	58025494 	.word	0x58025494
 8001d10:	2300      	movs	r3, #0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d007      	beq.n	8001d26 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d1a:	681a      	ldr	r2, [r3, #0]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d20:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001d24:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a6d      	ldr	r2, [pc, #436]	; (8001ee0 <HAL_DMA_Abort+0x444>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d04a      	beq.n	8001dc6 <HAL_DMA_Abort+0x32a>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a6b      	ldr	r2, [pc, #428]	; (8001ee4 <HAL_DMA_Abort+0x448>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d045      	beq.n	8001dc6 <HAL_DMA_Abort+0x32a>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a6a      	ldr	r2, [pc, #424]	; (8001ee8 <HAL_DMA_Abort+0x44c>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d040      	beq.n	8001dc6 <HAL_DMA_Abort+0x32a>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a68      	ldr	r2, [pc, #416]	; (8001eec <HAL_DMA_Abort+0x450>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d03b      	beq.n	8001dc6 <HAL_DMA_Abort+0x32a>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4a67      	ldr	r2, [pc, #412]	; (8001ef0 <HAL_DMA_Abort+0x454>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d036      	beq.n	8001dc6 <HAL_DMA_Abort+0x32a>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a65      	ldr	r2, [pc, #404]	; (8001ef4 <HAL_DMA_Abort+0x458>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d031      	beq.n	8001dc6 <HAL_DMA_Abort+0x32a>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a64      	ldr	r2, [pc, #400]	; (8001ef8 <HAL_DMA_Abort+0x45c>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d02c      	beq.n	8001dc6 <HAL_DMA_Abort+0x32a>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a62      	ldr	r2, [pc, #392]	; (8001efc <HAL_DMA_Abort+0x460>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d027      	beq.n	8001dc6 <HAL_DMA_Abort+0x32a>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4a61      	ldr	r2, [pc, #388]	; (8001f00 <HAL_DMA_Abort+0x464>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d022      	beq.n	8001dc6 <HAL_DMA_Abort+0x32a>
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a5f      	ldr	r2, [pc, #380]	; (8001f04 <HAL_DMA_Abort+0x468>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d01d      	beq.n	8001dc6 <HAL_DMA_Abort+0x32a>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a5e      	ldr	r2, [pc, #376]	; (8001f08 <HAL_DMA_Abort+0x46c>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d018      	beq.n	8001dc6 <HAL_DMA_Abort+0x32a>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a5c      	ldr	r2, [pc, #368]	; (8001f0c <HAL_DMA_Abort+0x470>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d013      	beq.n	8001dc6 <HAL_DMA_Abort+0x32a>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4a5b      	ldr	r2, [pc, #364]	; (8001f10 <HAL_DMA_Abort+0x474>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d00e      	beq.n	8001dc6 <HAL_DMA_Abort+0x32a>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a59      	ldr	r2, [pc, #356]	; (8001f14 <HAL_DMA_Abort+0x478>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d009      	beq.n	8001dc6 <HAL_DMA_Abort+0x32a>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a58      	ldr	r2, [pc, #352]	; (8001f18 <HAL_DMA_Abort+0x47c>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d004      	beq.n	8001dc6 <HAL_DMA_Abort+0x32a>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a56      	ldr	r2, [pc, #344]	; (8001f1c <HAL_DMA_Abort+0x480>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d108      	bne.n	8001dd8 <HAL_DMA_Abort+0x33c>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f022 0201 	bic.w	r2, r2, #1
 8001dd4:	601a      	str	r2, [r3, #0]
 8001dd6:	e007      	b.n	8001de8 <HAL_DMA_Abort+0x34c>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f022 0201 	bic.w	r2, r2, #1
 8001de6:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001de8:	e013      	b.n	8001e12 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001dea:	f7ff fd3b 	bl	8001864 <HAL_GetTick>
 8001dee:	4602      	mov	r2, r0
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	1ad3      	subs	r3, r2, r3
 8001df4:	2b05      	cmp	r3, #5
 8001df6:	d90c      	bls.n	8001e12 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2220      	movs	r2, #32
 8001dfc:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2203      	movs	r2, #3
 8001e02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2200      	movs	r2, #0
 8001e0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e12d      	b.n	800206e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f003 0301 	and.w	r3, r3, #1
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d1e5      	bne.n	8001dea <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a2f      	ldr	r2, [pc, #188]	; (8001ee0 <HAL_DMA_Abort+0x444>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d04a      	beq.n	8001ebe <HAL_DMA_Abort+0x422>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a2d      	ldr	r2, [pc, #180]	; (8001ee4 <HAL_DMA_Abort+0x448>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d045      	beq.n	8001ebe <HAL_DMA_Abort+0x422>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a2c      	ldr	r2, [pc, #176]	; (8001ee8 <HAL_DMA_Abort+0x44c>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d040      	beq.n	8001ebe <HAL_DMA_Abort+0x422>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a2a      	ldr	r2, [pc, #168]	; (8001eec <HAL_DMA_Abort+0x450>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d03b      	beq.n	8001ebe <HAL_DMA_Abort+0x422>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a29      	ldr	r2, [pc, #164]	; (8001ef0 <HAL_DMA_Abort+0x454>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d036      	beq.n	8001ebe <HAL_DMA_Abort+0x422>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a27      	ldr	r2, [pc, #156]	; (8001ef4 <HAL_DMA_Abort+0x458>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d031      	beq.n	8001ebe <HAL_DMA_Abort+0x422>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a26      	ldr	r2, [pc, #152]	; (8001ef8 <HAL_DMA_Abort+0x45c>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d02c      	beq.n	8001ebe <HAL_DMA_Abort+0x422>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a24      	ldr	r2, [pc, #144]	; (8001efc <HAL_DMA_Abort+0x460>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d027      	beq.n	8001ebe <HAL_DMA_Abort+0x422>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a23      	ldr	r2, [pc, #140]	; (8001f00 <HAL_DMA_Abort+0x464>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d022      	beq.n	8001ebe <HAL_DMA_Abort+0x422>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a21      	ldr	r2, [pc, #132]	; (8001f04 <HAL_DMA_Abort+0x468>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d01d      	beq.n	8001ebe <HAL_DMA_Abort+0x422>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a20      	ldr	r2, [pc, #128]	; (8001f08 <HAL_DMA_Abort+0x46c>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d018      	beq.n	8001ebe <HAL_DMA_Abort+0x422>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a1e      	ldr	r2, [pc, #120]	; (8001f0c <HAL_DMA_Abort+0x470>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d013      	beq.n	8001ebe <HAL_DMA_Abort+0x422>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a1d      	ldr	r2, [pc, #116]	; (8001f10 <HAL_DMA_Abort+0x474>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d00e      	beq.n	8001ebe <HAL_DMA_Abort+0x422>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a1b      	ldr	r2, [pc, #108]	; (8001f14 <HAL_DMA_Abort+0x478>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d009      	beq.n	8001ebe <HAL_DMA_Abort+0x422>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a1a      	ldr	r2, [pc, #104]	; (8001f18 <HAL_DMA_Abort+0x47c>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d004      	beq.n	8001ebe <HAL_DMA_Abort+0x422>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a18      	ldr	r2, [pc, #96]	; (8001f1c <HAL_DMA_Abort+0x480>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d101      	bne.n	8001ec2 <HAL_DMA_Abort+0x426>
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e000      	b.n	8001ec4 <HAL_DMA_Abort+0x428>
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d02b      	beq.n	8001f20 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ecc:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ed2:	f003 031f 	and.w	r3, r3, #31
 8001ed6:	223f      	movs	r2, #63	; 0x3f
 8001ed8:	409a      	lsls	r2, r3
 8001eda:	68bb      	ldr	r3, [r7, #8]
 8001edc:	609a      	str	r2, [r3, #8]
 8001ede:	e02a      	b.n	8001f36 <HAL_DMA_Abort+0x49a>
 8001ee0:	40020010 	.word	0x40020010
 8001ee4:	40020028 	.word	0x40020028
 8001ee8:	40020040 	.word	0x40020040
 8001eec:	40020058 	.word	0x40020058
 8001ef0:	40020070 	.word	0x40020070
 8001ef4:	40020088 	.word	0x40020088
 8001ef8:	400200a0 	.word	0x400200a0
 8001efc:	400200b8 	.word	0x400200b8
 8001f00:	40020410 	.word	0x40020410
 8001f04:	40020428 	.word	0x40020428
 8001f08:	40020440 	.word	0x40020440
 8001f0c:	40020458 	.word	0x40020458
 8001f10:	40020470 	.word	0x40020470
 8001f14:	40020488 	.word	0x40020488
 8001f18:	400204a0 	.word	0x400204a0
 8001f1c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f24:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f2a:	f003 031f 	and.w	r3, r3, #31
 8001f2e:	2201      	movs	r2, #1
 8001f30:	409a      	lsls	r2, r3
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a4f      	ldr	r2, [pc, #316]	; (8002078 <HAL_DMA_Abort+0x5dc>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d072      	beq.n	8002026 <HAL_DMA_Abort+0x58a>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a4d      	ldr	r2, [pc, #308]	; (800207c <HAL_DMA_Abort+0x5e0>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d06d      	beq.n	8002026 <HAL_DMA_Abort+0x58a>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a4c      	ldr	r2, [pc, #304]	; (8002080 <HAL_DMA_Abort+0x5e4>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d068      	beq.n	8002026 <HAL_DMA_Abort+0x58a>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a4a      	ldr	r2, [pc, #296]	; (8002084 <HAL_DMA_Abort+0x5e8>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d063      	beq.n	8002026 <HAL_DMA_Abort+0x58a>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a49      	ldr	r2, [pc, #292]	; (8002088 <HAL_DMA_Abort+0x5ec>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d05e      	beq.n	8002026 <HAL_DMA_Abort+0x58a>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a47      	ldr	r2, [pc, #284]	; (800208c <HAL_DMA_Abort+0x5f0>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d059      	beq.n	8002026 <HAL_DMA_Abort+0x58a>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a46      	ldr	r2, [pc, #280]	; (8002090 <HAL_DMA_Abort+0x5f4>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d054      	beq.n	8002026 <HAL_DMA_Abort+0x58a>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a44      	ldr	r2, [pc, #272]	; (8002094 <HAL_DMA_Abort+0x5f8>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d04f      	beq.n	8002026 <HAL_DMA_Abort+0x58a>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a43      	ldr	r2, [pc, #268]	; (8002098 <HAL_DMA_Abort+0x5fc>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d04a      	beq.n	8002026 <HAL_DMA_Abort+0x58a>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a41      	ldr	r2, [pc, #260]	; (800209c <HAL_DMA_Abort+0x600>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d045      	beq.n	8002026 <HAL_DMA_Abort+0x58a>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a40      	ldr	r2, [pc, #256]	; (80020a0 <HAL_DMA_Abort+0x604>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d040      	beq.n	8002026 <HAL_DMA_Abort+0x58a>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a3e      	ldr	r2, [pc, #248]	; (80020a4 <HAL_DMA_Abort+0x608>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d03b      	beq.n	8002026 <HAL_DMA_Abort+0x58a>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a3d      	ldr	r2, [pc, #244]	; (80020a8 <HAL_DMA_Abort+0x60c>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d036      	beq.n	8002026 <HAL_DMA_Abort+0x58a>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a3b      	ldr	r2, [pc, #236]	; (80020ac <HAL_DMA_Abort+0x610>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d031      	beq.n	8002026 <HAL_DMA_Abort+0x58a>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a3a      	ldr	r2, [pc, #232]	; (80020b0 <HAL_DMA_Abort+0x614>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d02c      	beq.n	8002026 <HAL_DMA_Abort+0x58a>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a38      	ldr	r2, [pc, #224]	; (80020b4 <HAL_DMA_Abort+0x618>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d027      	beq.n	8002026 <HAL_DMA_Abort+0x58a>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a37      	ldr	r2, [pc, #220]	; (80020b8 <HAL_DMA_Abort+0x61c>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d022      	beq.n	8002026 <HAL_DMA_Abort+0x58a>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a35      	ldr	r2, [pc, #212]	; (80020bc <HAL_DMA_Abort+0x620>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d01d      	beq.n	8002026 <HAL_DMA_Abort+0x58a>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a34      	ldr	r2, [pc, #208]	; (80020c0 <HAL_DMA_Abort+0x624>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d018      	beq.n	8002026 <HAL_DMA_Abort+0x58a>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a32      	ldr	r2, [pc, #200]	; (80020c4 <HAL_DMA_Abort+0x628>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d013      	beq.n	8002026 <HAL_DMA_Abort+0x58a>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a31      	ldr	r2, [pc, #196]	; (80020c8 <HAL_DMA_Abort+0x62c>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d00e      	beq.n	8002026 <HAL_DMA_Abort+0x58a>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a2f      	ldr	r2, [pc, #188]	; (80020cc <HAL_DMA_Abort+0x630>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d009      	beq.n	8002026 <HAL_DMA_Abort+0x58a>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a2e      	ldr	r2, [pc, #184]	; (80020d0 <HAL_DMA_Abort+0x634>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d004      	beq.n	8002026 <HAL_DMA_Abort+0x58a>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a2c      	ldr	r2, [pc, #176]	; (80020d4 <HAL_DMA_Abort+0x638>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d101      	bne.n	800202a <HAL_DMA_Abort+0x58e>
 8002026:	2301      	movs	r3, #1
 8002028:	e000      	b.n	800202c <HAL_DMA_Abort+0x590>
 800202a:	2300      	movs	r3, #0
 800202c:	2b00      	cmp	r3, #0
 800202e:	d015      	beq.n	800205c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002034:	687a      	ldr	r2, [r7, #4]
 8002036:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002038:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800203e:	2b00      	cmp	r3, #0
 8002040:	d00c      	beq.n	800205c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002046:	681a      	ldr	r2, [r3, #0]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800204c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002050:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002056:	687a      	ldr	r2, [r7, #4]
 8002058:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800205a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2201      	movs	r2, #1
 8002060:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2200      	movs	r2, #0
 8002068:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 800206c:	2300      	movs	r3, #0
}
 800206e:	4618      	mov	r0, r3
 8002070:	3718      	adds	r7, #24
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	40020010 	.word	0x40020010
 800207c:	40020028 	.word	0x40020028
 8002080:	40020040 	.word	0x40020040
 8002084:	40020058 	.word	0x40020058
 8002088:	40020070 	.word	0x40020070
 800208c:	40020088 	.word	0x40020088
 8002090:	400200a0 	.word	0x400200a0
 8002094:	400200b8 	.word	0x400200b8
 8002098:	40020410 	.word	0x40020410
 800209c:	40020428 	.word	0x40020428
 80020a0:	40020440 	.word	0x40020440
 80020a4:	40020458 	.word	0x40020458
 80020a8:	40020470 	.word	0x40020470
 80020ac:	40020488 	.word	0x40020488
 80020b0:	400204a0 	.word	0x400204a0
 80020b4:	400204b8 	.word	0x400204b8
 80020b8:	58025408 	.word	0x58025408
 80020bc:	5802541c 	.word	0x5802541c
 80020c0:	58025430 	.word	0x58025430
 80020c4:	58025444 	.word	0x58025444
 80020c8:	58025458 	.word	0x58025458
 80020cc:	5802546c 	.word	0x5802546c
 80020d0:	58025480 	.word	0x58025480
 80020d4:	58025494 	.word	0x58025494

080020d8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b084      	sub	sp, #16
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d101      	bne.n	80020ea <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	e237      	b.n	800255a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80020f0:	b2db      	uxtb	r3, r3
 80020f2:	2b02      	cmp	r3, #2
 80020f4:	d004      	beq.n	8002100 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2280      	movs	r2, #128	; 0x80
 80020fa:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80020fc:	2301      	movs	r3, #1
 80020fe:	e22c      	b.n	800255a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a5c      	ldr	r2, [pc, #368]	; (8002278 <HAL_DMA_Abort_IT+0x1a0>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d04a      	beq.n	80021a0 <HAL_DMA_Abort_IT+0xc8>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a5b      	ldr	r2, [pc, #364]	; (800227c <HAL_DMA_Abort_IT+0x1a4>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d045      	beq.n	80021a0 <HAL_DMA_Abort_IT+0xc8>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a59      	ldr	r2, [pc, #356]	; (8002280 <HAL_DMA_Abort_IT+0x1a8>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d040      	beq.n	80021a0 <HAL_DMA_Abort_IT+0xc8>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a58      	ldr	r2, [pc, #352]	; (8002284 <HAL_DMA_Abort_IT+0x1ac>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d03b      	beq.n	80021a0 <HAL_DMA_Abort_IT+0xc8>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a56      	ldr	r2, [pc, #344]	; (8002288 <HAL_DMA_Abort_IT+0x1b0>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d036      	beq.n	80021a0 <HAL_DMA_Abort_IT+0xc8>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a55      	ldr	r2, [pc, #340]	; (800228c <HAL_DMA_Abort_IT+0x1b4>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d031      	beq.n	80021a0 <HAL_DMA_Abort_IT+0xc8>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a53      	ldr	r2, [pc, #332]	; (8002290 <HAL_DMA_Abort_IT+0x1b8>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d02c      	beq.n	80021a0 <HAL_DMA_Abort_IT+0xc8>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a52      	ldr	r2, [pc, #328]	; (8002294 <HAL_DMA_Abort_IT+0x1bc>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d027      	beq.n	80021a0 <HAL_DMA_Abort_IT+0xc8>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a50      	ldr	r2, [pc, #320]	; (8002298 <HAL_DMA_Abort_IT+0x1c0>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d022      	beq.n	80021a0 <HAL_DMA_Abort_IT+0xc8>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a4f      	ldr	r2, [pc, #316]	; (800229c <HAL_DMA_Abort_IT+0x1c4>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d01d      	beq.n	80021a0 <HAL_DMA_Abort_IT+0xc8>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a4d      	ldr	r2, [pc, #308]	; (80022a0 <HAL_DMA_Abort_IT+0x1c8>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d018      	beq.n	80021a0 <HAL_DMA_Abort_IT+0xc8>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a4c      	ldr	r2, [pc, #304]	; (80022a4 <HAL_DMA_Abort_IT+0x1cc>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d013      	beq.n	80021a0 <HAL_DMA_Abort_IT+0xc8>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a4a      	ldr	r2, [pc, #296]	; (80022a8 <HAL_DMA_Abort_IT+0x1d0>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d00e      	beq.n	80021a0 <HAL_DMA_Abort_IT+0xc8>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a49      	ldr	r2, [pc, #292]	; (80022ac <HAL_DMA_Abort_IT+0x1d4>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d009      	beq.n	80021a0 <HAL_DMA_Abort_IT+0xc8>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a47      	ldr	r2, [pc, #284]	; (80022b0 <HAL_DMA_Abort_IT+0x1d8>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d004      	beq.n	80021a0 <HAL_DMA_Abort_IT+0xc8>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a46      	ldr	r2, [pc, #280]	; (80022b4 <HAL_DMA_Abort_IT+0x1dc>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d101      	bne.n	80021a4 <HAL_DMA_Abort_IT+0xcc>
 80021a0:	2301      	movs	r3, #1
 80021a2:	e000      	b.n	80021a6 <HAL_DMA_Abort_IT+0xce>
 80021a4:	2300      	movs	r3, #0
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	f000 8086 	beq.w	80022b8 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2204      	movs	r2, #4
 80021b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a2f      	ldr	r2, [pc, #188]	; (8002278 <HAL_DMA_Abort_IT+0x1a0>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d04a      	beq.n	8002254 <HAL_DMA_Abort_IT+0x17c>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a2e      	ldr	r2, [pc, #184]	; (800227c <HAL_DMA_Abort_IT+0x1a4>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d045      	beq.n	8002254 <HAL_DMA_Abort_IT+0x17c>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a2c      	ldr	r2, [pc, #176]	; (8002280 <HAL_DMA_Abort_IT+0x1a8>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d040      	beq.n	8002254 <HAL_DMA_Abort_IT+0x17c>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a2b      	ldr	r2, [pc, #172]	; (8002284 <HAL_DMA_Abort_IT+0x1ac>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d03b      	beq.n	8002254 <HAL_DMA_Abort_IT+0x17c>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a29      	ldr	r2, [pc, #164]	; (8002288 <HAL_DMA_Abort_IT+0x1b0>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d036      	beq.n	8002254 <HAL_DMA_Abort_IT+0x17c>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a28      	ldr	r2, [pc, #160]	; (800228c <HAL_DMA_Abort_IT+0x1b4>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d031      	beq.n	8002254 <HAL_DMA_Abort_IT+0x17c>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a26      	ldr	r2, [pc, #152]	; (8002290 <HAL_DMA_Abort_IT+0x1b8>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d02c      	beq.n	8002254 <HAL_DMA_Abort_IT+0x17c>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a25      	ldr	r2, [pc, #148]	; (8002294 <HAL_DMA_Abort_IT+0x1bc>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d027      	beq.n	8002254 <HAL_DMA_Abort_IT+0x17c>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a23      	ldr	r2, [pc, #140]	; (8002298 <HAL_DMA_Abort_IT+0x1c0>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d022      	beq.n	8002254 <HAL_DMA_Abort_IT+0x17c>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a22      	ldr	r2, [pc, #136]	; (800229c <HAL_DMA_Abort_IT+0x1c4>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d01d      	beq.n	8002254 <HAL_DMA_Abort_IT+0x17c>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a20      	ldr	r2, [pc, #128]	; (80022a0 <HAL_DMA_Abort_IT+0x1c8>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d018      	beq.n	8002254 <HAL_DMA_Abort_IT+0x17c>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a1f      	ldr	r2, [pc, #124]	; (80022a4 <HAL_DMA_Abort_IT+0x1cc>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d013      	beq.n	8002254 <HAL_DMA_Abort_IT+0x17c>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a1d      	ldr	r2, [pc, #116]	; (80022a8 <HAL_DMA_Abort_IT+0x1d0>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d00e      	beq.n	8002254 <HAL_DMA_Abort_IT+0x17c>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a1c      	ldr	r2, [pc, #112]	; (80022ac <HAL_DMA_Abort_IT+0x1d4>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d009      	beq.n	8002254 <HAL_DMA_Abort_IT+0x17c>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a1a      	ldr	r2, [pc, #104]	; (80022b0 <HAL_DMA_Abort_IT+0x1d8>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d004      	beq.n	8002254 <HAL_DMA_Abort_IT+0x17c>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a19      	ldr	r2, [pc, #100]	; (80022b4 <HAL_DMA_Abort_IT+0x1dc>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d108      	bne.n	8002266 <HAL_DMA_Abort_IT+0x18e>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f022 0201 	bic.w	r2, r2, #1
 8002262:	601a      	str	r2, [r3, #0]
 8002264:	e178      	b.n	8002558 <HAL_DMA_Abort_IT+0x480>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f022 0201 	bic.w	r2, r2, #1
 8002274:	601a      	str	r2, [r3, #0]
 8002276:	e16f      	b.n	8002558 <HAL_DMA_Abort_IT+0x480>
 8002278:	40020010 	.word	0x40020010
 800227c:	40020028 	.word	0x40020028
 8002280:	40020040 	.word	0x40020040
 8002284:	40020058 	.word	0x40020058
 8002288:	40020070 	.word	0x40020070
 800228c:	40020088 	.word	0x40020088
 8002290:	400200a0 	.word	0x400200a0
 8002294:	400200b8 	.word	0x400200b8
 8002298:	40020410 	.word	0x40020410
 800229c:	40020428 	.word	0x40020428
 80022a0:	40020440 	.word	0x40020440
 80022a4:	40020458 	.word	0x40020458
 80022a8:	40020470 	.word	0x40020470
 80022ac:	40020488 	.word	0x40020488
 80022b0:	400204a0 	.word	0x400204a0
 80022b4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f022 020e 	bic.w	r2, r2, #14
 80022c6:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a6c      	ldr	r2, [pc, #432]	; (8002480 <HAL_DMA_Abort_IT+0x3a8>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d04a      	beq.n	8002368 <HAL_DMA_Abort_IT+0x290>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a6b      	ldr	r2, [pc, #428]	; (8002484 <HAL_DMA_Abort_IT+0x3ac>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d045      	beq.n	8002368 <HAL_DMA_Abort_IT+0x290>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a69      	ldr	r2, [pc, #420]	; (8002488 <HAL_DMA_Abort_IT+0x3b0>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d040      	beq.n	8002368 <HAL_DMA_Abort_IT+0x290>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a68      	ldr	r2, [pc, #416]	; (800248c <HAL_DMA_Abort_IT+0x3b4>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d03b      	beq.n	8002368 <HAL_DMA_Abort_IT+0x290>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a66      	ldr	r2, [pc, #408]	; (8002490 <HAL_DMA_Abort_IT+0x3b8>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d036      	beq.n	8002368 <HAL_DMA_Abort_IT+0x290>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a65      	ldr	r2, [pc, #404]	; (8002494 <HAL_DMA_Abort_IT+0x3bc>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d031      	beq.n	8002368 <HAL_DMA_Abort_IT+0x290>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a63      	ldr	r2, [pc, #396]	; (8002498 <HAL_DMA_Abort_IT+0x3c0>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d02c      	beq.n	8002368 <HAL_DMA_Abort_IT+0x290>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a62      	ldr	r2, [pc, #392]	; (800249c <HAL_DMA_Abort_IT+0x3c4>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d027      	beq.n	8002368 <HAL_DMA_Abort_IT+0x290>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a60      	ldr	r2, [pc, #384]	; (80024a0 <HAL_DMA_Abort_IT+0x3c8>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d022      	beq.n	8002368 <HAL_DMA_Abort_IT+0x290>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a5f      	ldr	r2, [pc, #380]	; (80024a4 <HAL_DMA_Abort_IT+0x3cc>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d01d      	beq.n	8002368 <HAL_DMA_Abort_IT+0x290>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a5d      	ldr	r2, [pc, #372]	; (80024a8 <HAL_DMA_Abort_IT+0x3d0>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d018      	beq.n	8002368 <HAL_DMA_Abort_IT+0x290>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a5c      	ldr	r2, [pc, #368]	; (80024ac <HAL_DMA_Abort_IT+0x3d4>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d013      	beq.n	8002368 <HAL_DMA_Abort_IT+0x290>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a5a      	ldr	r2, [pc, #360]	; (80024b0 <HAL_DMA_Abort_IT+0x3d8>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d00e      	beq.n	8002368 <HAL_DMA_Abort_IT+0x290>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a59      	ldr	r2, [pc, #356]	; (80024b4 <HAL_DMA_Abort_IT+0x3dc>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d009      	beq.n	8002368 <HAL_DMA_Abort_IT+0x290>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a57      	ldr	r2, [pc, #348]	; (80024b8 <HAL_DMA_Abort_IT+0x3e0>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d004      	beq.n	8002368 <HAL_DMA_Abort_IT+0x290>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a56      	ldr	r2, [pc, #344]	; (80024bc <HAL_DMA_Abort_IT+0x3e4>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d108      	bne.n	800237a <HAL_DMA_Abort_IT+0x2a2>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	681a      	ldr	r2, [r3, #0]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f022 0201 	bic.w	r2, r2, #1
 8002376:	601a      	str	r2, [r3, #0]
 8002378:	e007      	b.n	800238a <HAL_DMA_Abort_IT+0x2b2>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	681a      	ldr	r2, [r3, #0]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f022 0201 	bic.w	r2, r2, #1
 8002388:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a3c      	ldr	r2, [pc, #240]	; (8002480 <HAL_DMA_Abort_IT+0x3a8>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d072      	beq.n	800247a <HAL_DMA_Abort_IT+0x3a2>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a3a      	ldr	r2, [pc, #232]	; (8002484 <HAL_DMA_Abort_IT+0x3ac>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d06d      	beq.n	800247a <HAL_DMA_Abort_IT+0x3a2>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a39      	ldr	r2, [pc, #228]	; (8002488 <HAL_DMA_Abort_IT+0x3b0>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d068      	beq.n	800247a <HAL_DMA_Abort_IT+0x3a2>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a37      	ldr	r2, [pc, #220]	; (800248c <HAL_DMA_Abort_IT+0x3b4>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d063      	beq.n	800247a <HAL_DMA_Abort_IT+0x3a2>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a36      	ldr	r2, [pc, #216]	; (8002490 <HAL_DMA_Abort_IT+0x3b8>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d05e      	beq.n	800247a <HAL_DMA_Abort_IT+0x3a2>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a34      	ldr	r2, [pc, #208]	; (8002494 <HAL_DMA_Abort_IT+0x3bc>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d059      	beq.n	800247a <HAL_DMA_Abort_IT+0x3a2>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a33      	ldr	r2, [pc, #204]	; (8002498 <HAL_DMA_Abort_IT+0x3c0>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d054      	beq.n	800247a <HAL_DMA_Abort_IT+0x3a2>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a31      	ldr	r2, [pc, #196]	; (800249c <HAL_DMA_Abort_IT+0x3c4>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d04f      	beq.n	800247a <HAL_DMA_Abort_IT+0x3a2>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a30      	ldr	r2, [pc, #192]	; (80024a0 <HAL_DMA_Abort_IT+0x3c8>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d04a      	beq.n	800247a <HAL_DMA_Abort_IT+0x3a2>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a2e      	ldr	r2, [pc, #184]	; (80024a4 <HAL_DMA_Abort_IT+0x3cc>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d045      	beq.n	800247a <HAL_DMA_Abort_IT+0x3a2>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a2d      	ldr	r2, [pc, #180]	; (80024a8 <HAL_DMA_Abort_IT+0x3d0>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d040      	beq.n	800247a <HAL_DMA_Abort_IT+0x3a2>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a2b      	ldr	r2, [pc, #172]	; (80024ac <HAL_DMA_Abort_IT+0x3d4>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d03b      	beq.n	800247a <HAL_DMA_Abort_IT+0x3a2>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a2a      	ldr	r2, [pc, #168]	; (80024b0 <HAL_DMA_Abort_IT+0x3d8>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d036      	beq.n	800247a <HAL_DMA_Abort_IT+0x3a2>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a28      	ldr	r2, [pc, #160]	; (80024b4 <HAL_DMA_Abort_IT+0x3dc>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d031      	beq.n	800247a <HAL_DMA_Abort_IT+0x3a2>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a27      	ldr	r2, [pc, #156]	; (80024b8 <HAL_DMA_Abort_IT+0x3e0>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d02c      	beq.n	800247a <HAL_DMA_Abort_IT+0x3a2>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a25      	ldr	r2, [pc, #148]	; (80024bc <HAL_DMA_Abort_IT+0x3e4>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d027      	beq.n	800247a <HAL_DMA_Abort_IT+0x3a2>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a24      	ldr	r2, [pc, #144]	; (80024c0 <HAL_DMA_Abort_IT+0x3e8>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d022      	beq.n	800247a <HAL_DMA_Abort_IT+0x3a2>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a22      	ldr	r2, [pc, #136]	; (80024c4 <HAL_DMA_Abort_IT+0x3ec>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d01d      	beq.n	800247a <HAL_DMA_Abort_IT+0x3a2>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a21      	ldr	r2, [pc, #132]	; (80024c8 <HAL_DMA_Abort_IT+0x3f0>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d018      	beq.n	800247a <HAL_DMA_Abort_IT+0x3a2>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a1f      	ldr	r2, [pc, #124]	; (80024cc <HAL_DMA_Abort_IT+0x3f4>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d013      	beq.n	800247a <HAL_DMA_Abort_IT+0x3a2>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a1e      	ldr	r2, [pc, #120]	; (80024d0 <HAL_DMA_Abort_IT+0x3f8>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d00e      	beq.n	800247a <HAL_DMA_Abort_IT+0x3a2>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a1c      	ldr	r2, [pc, #112]	; (80024d4 <HAL_DMA_Abort_IT+0x3fc>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d009      	beq.n	800247a <HAL_DMA_Abort_IT+0x3a2>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a1b      	ldr	r2, [pc, #108]	; (80024d8 <HAL_DMA_Abort_IT+0x400>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d004      	beq.n	800247a <HAL_DMA_Abort_IT+0x3a2>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a19      	ldr	r2, [pc, #100]	; (80024dc <HAL_DMA_Abort_IT+0x404>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d132      	bne.n	80024e0 <HAL_DMA_Abort_IT+0x408>
 800247a:	2301      	movs	r3, #1
 800247c:	e031      	b.n	80024e2 <HAL_DMA_Abort_IT+0x40a>
 800247e:	bf00      	nop
 8002480:	40020010 	.word	0x40020010
 8002484:	40020028 	.word	0x40020028
 8002488:	40020040 	.word	0x40020040
 800248c:	40020058 	.word	0x40020058
 8002490:	40020070 	.word	0x40020070
 8002494:	40020088 	.word	0x40020088
 8002498:	400200a0 	.word	0x400200a0
 800249c:	400200b8 	.word	0x400200b8
 80024a0:	40020410 	.word	0x40020410
 80024a4:	40020428 	.word	0x40020428
 80024a8:	40020440 	.word	0x40020440
 80024ac:	40020458 	.word	0x40020458
 80024b0:	40020470 	.word	0x40020470
 80024b4:	40020488 	.word	0x40020488
 80024b8:	400204a0 	.word	0x400204a0
 80024bc:	400204b8 	.word	0x400204b8
 80024c0:	58025408 	.word	0x58025408
 80024c4:	5802541c 	.word	0x5802541c
 80024c8:	58025430 	.word	0x58025430
 80024cc:	58025444 	.word	0x58025444
 80024d0:	58025458 	.word	0x58025458
 80024d4:	5802546c 	.word	0x5802546c
 80024d8:	58025480 	.word	0x58025480
 80024dc:	58025494 	.word	0x58025494
 80024e0:	2300      	movs	r3, #0
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d028      	beq.n	8002538 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024ea:	681a      	ldr	r2, [r3, #0]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80024f4:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024fa:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002500:	f003 031f 	and.w	r3, r3, #31
 8002504:	2201      	movs	r2, #1
 8002506:	409a      	lsls	r2, r3
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002510:	687a      	ldr	r2, [r7, #4]
 8002512:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002514:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800251a:	2b00      	cmp	r3, #0
 800251c:	d00c      	beq.n	8002538 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002528:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800252c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002532:	687a      	ldr	r2, [r7, #4]
 8002534:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002536:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2201      	movs	r2, #1
 800253c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2200      	movs	r2, #0
 8002544:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800254c:	2b00      	cmp	r3, #0
 800254e:	d003      	beq.n	8002558 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002554:	6878      	ldr	r0, [r7, #4]
 8002556:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002558:	2300      	movs	r3, #0
}
 800255a:	4618      	mov	r0, r3
 800255c:	3710      	adds	r7, #16
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}
 8002562:	bf00      	nop

08002564 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002564:	b480      	push	{r7}
 8002566:	b089      	sub	sp, #36	; 0x24
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
 800256c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800256e:	2300      	movs	r3, #0
 8002570:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002572:	4b89      	ldr	r3, [pc, #548]	; (8002798 <HAL_GPIO_Init+0x234>)
 8002574:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002576:	e194      	b.n	80028a2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	2101      	movs	r1, #1
 800257e:	69fb      	ldr	r3, [r7, #28]
 8002580:	fa01 f303 	lsl.w	r3, r1, r3
 8002584:	4013      	ands	r3, r2
 8002586:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002588:	693b      	ldr	r3, [r7, #16]
 800258a:	2b00      	cmp	r3, #0
 800258c:	f000 8186 	beq.w	800289c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	f003 0303 	and.w	r3, r3, #3
 8002598:	2b01      	cmp	r3, #1
 800259a:	d005      	beq.n	80025a8 <HAL_GPIO_Init+0x44>
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	f003 0303 	and.w	r3, r3, #3
 80025a4:	2b02      	cmp	r3, #2
 80025a6:	d130      	bne.n	800260a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80025ae:	69fb      	ldr	r3, [r7, #28]
 80025b0:	005b      	lsls	r3, r3, #1
 80025b2:	2203      	movs	r2, #3
 80025b4:	fa02 f303 	lsl.w	r3, r2, r3
 80025b8:	43db      	mvns	r3, r3
 80025ba:	69ba      	ldr	r2, [r7, #24]
 80025bc:	4013      	ands	r3, r2
 80025be:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	68da      	ldr	r2, [r3, #12]
 80025c4:	69fb      	ldr	r3, [r7, #28]
 80025c6:	005b      	lsls	r3, r3, #1
 80025c8:	fa02 f303 	lsl.w	r3, r2, r3
 80025cc:	69ba      	ldr	r2, [r7, #24]
 80025ce:	4313      	orrs	r3, r2
 80025d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	69ba      	ldr	r2, [r7, #24]
 80025d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80025de:	2201      	movs	r2, #1
 80025e0:	69fb      	ldr	r3, [r7, #28]
 80025e2:	fa02 f303 	lsl.w	r3, r2, r3
 80025e6:	43db      	mvns	r3, r3
 80025e8:	69ba      	ldr	r2, [r7, #24]
 80025ea:	4013      	ands	r3, r2
 80025ec:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	091b      	lsrs	r3, r3, #4
 80025f4:	f003 0201 	and.w	r2, r3, #1
 80025f8:	69fb      	ldr	r3, [r7, #28]
 80025fa:	fa02 f303 	lsl.w	r3, r2, r3
 80025fe:	69ba      	ldr	r2, [r7, #24]
 8002600:	4313      	orrs	r3, r2
 8002602:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	69ba      	ldr	r2, [r7, #24]
 8002608:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	f003 0303 	and.w	r3, r3, #3
 8002612:	2b03      	cmp	r3, #3
 8002614:	d017      	beq.n	8002646 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	68db      	ldr	r3, [r3, #12]
 800261a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800261c:	69fb      	ldr	r3, [r7, #28]
 800261e:	005b      	lsls	r3, r3, #1
 8002620:	2203      	movs	r2, #3
 8002622:	fa02 f303 	lsl.w	r3, r2, r3
 8002626:	43db      	mvns	r3, r3
 8002628:	69ba      	ldr	r2, [r7, #24]
 800262a:	4013      	ands	r3, r2
 800262c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	689a      	ldr	r2, [r3, #8]
 8002632:	69fb      	ldr	r3, [r7, #28]
 8002634:	005b      	lsls	r3, r3, #1
 8002636:	fa02 f303 	lsl.w	r3, r2, r3
 800263a:	69ba      	ldr	r2, [r7, #24]
 800263c:	4313      	orrs	r3, r2
 800263e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	69ba      	ldr	r2, [r7, #24]
 8002644:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	f003 0303 	and.w	r3, r3, #3
 800264e:	2b02      	cmp	r3, #2
 8002650:	d123      	bne.n	800269a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002652:	69fb      	ldr	r3, [r7, #28]
 8002654:	08da      	lsrs	r2, r3, #3
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	3208      	adds	r2, #8
 800265a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800265e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002660:	69fb      	ldr	r3, [r7, #28]
 8002662:	f003 0307 	and.w	r3, r3, #7
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	220f      	movs	r2, #15
 800266a:	fa02 f303 	lsl.w	r3, r2, r3
 800266e:	43db      	mvns	r3, r3
 8002670:	69ba      	ldr	r2, [r7, #24]
 8002672:	4013      	ands	r3, r2
 8002674:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	691a      	ldr	r2, [r3, #16]
 800267a:	69fb      	ldr	r3, [r7, #28]
 800267c:	f003 0307 	and.w	r3, r3, #7
 8002680:	009b      	lsls	r3, r3, #2
 8002682:	fa02 f303 	lsl.w	r3, r2, r3
 8002686:	69ba      	ldr	r2, [r7, #24]
 8002688:	4313      	orrs	r3, r2
 800268a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800268c:	69fb      	ldr	r3, [r7, #28]
 800268e:	08da      	lsrs	r2, r3, #3
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	3208      	adds	r2, #8
 8002694:	69b9      	ldr	r1, [r7, #24]
 8002696:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80026a0:	69fb      	ldr	r3, [r7, #28]
 80026a2:	005b      	lsls	r3, r3, #1
 80026a4:	2203      	movs	r2, #3
 80026a6:	fa02 f303 	lsl.w	r3, r2, r3
 80026aa:	43db      	mvns	r3, r3
 80026ac:	69ba      	ldr	r2, [r7, #24]
 80026ae:	4013      	ands	r3, r2
 80026b0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	f003 0203 	and.w	r2, r3, #3
 80026ba:	69fb      	ldr	r3, [r7, #28]
 80026bc:	005b      	lsls	r3, r3, #1
 80026be:	fa02 f303 	lsl.w	r3, r2, r3
 80026c2:	69ba      	ldr	r2, [r7, #24]
 80026c4:	4313      	orrs	r3, r2
 80026c6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	69ba      	ldr	r2, [r7, #24]
 80026cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	f000 80e0 	beq.w	800289c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026dc:	4b2f      	ldr	r3, [pc, #188]	; (800279c <HAL_GPIO_Init+0x238>)
 80026de:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80026e2:	4a2e      	ldr	r2, [pc, #184]	; (800279c <HAL_GPIO_Init+0x238>)
 80026e4:	f043 0302 	orr.w	r3, r3, #2
 80026e8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80026ec:	4b2b      	ldr	r3, [pc, #172]	; (800279c <HAL_GPIO_Init+0x238>)
 80026ee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80026f2:	f003 0302 	and.w	r3, r3, #2
 80026f6:	60fb      	str	r3, [r7, #12]
 80026f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80026fa:	4a29      	ldr	r2, [pc, #164]	; (80027a0 <HAL_GPIO_Init+0x23c>)
 80026fc:	69fb      	ldr	r3, [r7, #28]
 80026fe:	089b      	lsrs	r3, r3, #2
 8002700:	3302      	adds	r3, #2
 8002702:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002706:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002708:	69fb      	ldr	r3, [r7, #28]
 800270a:	f003 0303 	and.w	r3, r3, #3
 800270e:	009b      	lsls	r3, r3, #2
 8002710:	220f      	movs	r2, #15
 8002712:	fa02 f303 	lsl.w	r3, r2, r3
 8002716:	43db      	mvns	r3, r3
 8002718:	69ba      	ldr	r2, [r7, #24]
 800271a:	4013      	ands	r3, r2
 800271c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	4a20      	ldr	r2, [pc, #128]	; (80027a4 <HAL_GPIO_Init+0x240>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d052      	beq.n	80027cc <HAL_GPIO_Init+0x268>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	4a1f      	ldr	r2, [pc, #124]	; (80027a8 <HAL_GPIO_Init+0x244>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d031      	beq.n	8002792 <HAL_GPIO_Init+0x22e>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	4a1e      	ldr	r2, [pc, #120]	; (80027ac <HAL_GPIO_Init+0x248>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d02b      	beq.n	800278e <HAL_GPIO_Init+0x22a>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	4a1d      	ldr	r2, [pc, #116]	; (80027b0 <HAL_GPIO_Init+0x24c>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d025      	beq.n	800278a <HAL_GPIO_Init+0x226>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	4a1c      	ldr	r2, [pc, #112]	; (80027b4 <HAL_GPIO_Init+0x250>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d01f      	beq.n	8002786 <HAL_GPIO_Init+0x222>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	4a1b      	ldr	r2, [pc, #108]	; (80027b8 <HAL_GPIO_Init+0x254>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d019      	beq.n	8002782 <HAL_GPIO_Init+0x21e>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	4a1a      	ldr	r2, [pc, #104]	; (80027bc <HAL_GPIO_Init+0x258>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d013      	beq.n	800277e <HAL_GPIO_Init+0x21a>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	4a19      	ldr	r2, [pc, #100]	; (80027c0 <HAL_GPIO_Init+0x25c>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d00d      	beq.n	800277a <HAL_GPIO_Init+0x216>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	4a18      	ldr	r2, [pc, #96]	; (80027c4 <HAL_GPIO_Init+0x260>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d007      	beq.n	8002776 <HAL_GPIO_Init+0x212>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	4a17      	ldr	r2, [pc, #92]	; (80027c8 <HAL_GPIO_Init+0x264>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d101      	bne.n	8002772 <HAL_GPIO_Init+0x20e>
 800276e:	2309      	movs	r3, #9
 8002770:	e02d      	b.n	80027ce <HAL_GPIO_Init+0x26a>
 8002772:	230a      	movs	r3, #10
 8002774:	e02b      	b.n	80027ce <HAL_GPIO_Init+0x26a>
 8002776:	2308      	movs	r3, #8
 8002778:	e029      	b.n	80027ce <HAL_GPIO_Init+0x26a>
 800277a:	2307      	movs	r3, #7
 800277c:	e027      	b.n	80027ce <HAL_GPIO_Init+0x26a>
 800277e:	2306      	movs	r3, #6
 8002780:	e025      	b.n	80027ce <HAL_GPIO_Init+0x26a>
 8002782:	2305      	movs	r3, #5
 8002784:	e023      	b.n	80027ce <HAL_GPIO_Init+0x26a>
 8002786:	2304      	movs	r3, #4
 8002788:	e021      	b.n	80027ce <HAL_GPIO_Init+0x26a>
 800278a:	2303      	movs	r3, #3
 800278c:	e01f      	b.n	80027ce <HAL_GPIO_Init+0x26a>
 800278e:	2302      	movs	r3, #2
 8002790:	e01d      	b.n	80027ce <HAL_GPIO_Init+0x26a>
 8002792:	2301      	movs	r3, #1
 8002794:	e01b      	b.n	80027ce <HAL_GPIO_Init+0x26a>
 8002796:	bf00      	nop
 8002798:	58000080 	.word	0x58000080
 800279c:	58024400 	.word	0x58024400
 80027a0:	58000400 	.word	0x58000400
 80027a4:	58020000 	.word	0x58020000
 80027a8:	58020400 	.word	0x58020400
 80027ac:	58020800 	.word	0x58020800
 80027b0:	58020c00 	.word	0x58020c00
 80027b4:	58021000 	.word	0x58021000
 80027b8:	58021400 	.word	0x58021400
 80027bc:	58021800 	.word	0x58021800
 80027c0:	58021c00 	.word	0x58021c00
 80027c4:	58022000 	.word	0x58022000
 80027c8:	58022400 	.word	0x58022400
 80027cc:	2300      	movs	r3, #0
 80027ce:	69fa      	ldr	r2, [r7, #28]
 80027d0:	f002 0203 	and.w	r2, r2, #3
 80027d4:	0092      	lsls	r2, r2, #2
 80027d6:	4093      	lsls	r3, r2
 80027d8:	69ba      	ldr	r2, [r7, #24]
 80027da:	4313      	orrs	r3, r2
 80027dc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80027de:	4938      	ldr	r1, [pc, #224]	; (80028c0 <HAL_GPIO_Init+0x35c>)
 80027e0:	69fb      	ldr	r3, [r7, #28]
 80027e2:	089b      	lsrs	r3, r3, #2
 80027e4:	3302      	adds	r3, #2
 80027e6:	69ba      	ldr	r2, [r7, #24]
 80027e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80027ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	43db      	mvns	r3, r3
 80027f8:	69ba      	ldr	r2, [r7, #24]
 80027fa:	4013      	ands	r3, r2
 80027fc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002806:	2b00      	cmp	r3, #0
 8002808:	d003      	beq.n	8002812 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800280a:	69ba      	ldr	r2, [r7, #24]
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	4313      	orrs	r3, r2
 8002810:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002812:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002816:	69bb      	ldr	r3, [r7, #24]
 8002818:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800281a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	43db      	mvns	r3, r3
 8002826:	69ba      	ldr	r2, [r7, #24]
 8002828:	4013      	ands	r3, r2
 800282a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002834:	2b00      	cmp	r3, #0
 8002836:	d003      	beq.n	8002840 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002838:	69ba      	ldr	r2, [r7, #24]
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	4313      	orrs	r3, r2
 800283e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002840:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002844:	69bb      	ldr	r3, [r7, #24]
 8002846:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	43db      	mvns	r3, r3
 8002852:	69ba      	ldr	r2, [r7, #24]
 8002854:	4013      	ands	r3, r2
 8002856:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002860:	2b00      	cmp	r3, #0
 8002862:	d003      	beq.n	800286c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002864:	69ba      	ldr	r2, [r7, #24]
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	4313      	orrs	r3, r2
 800286a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	69ba      	ldr	r2, [r7, #24]
 8002870:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002878:	693b      	ldr	r3, [r7, #16]
 800287a:	43db      	mvns	r3, r3
 800287c:	69ba      	ldr	r2, [r7, #24]
 800287e:	4013      	ands	r3, r2
 8002880:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800288a:	2b00      	cmp	r3, #0
 800288c:	d003      	beq.n	8002896 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800288e:	69ba      	ldr	r2, [r7, #24]
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	4313      	orrs	r3, r2
 8002894:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	69ba      	ldr	r2, [r7, #24]
 800289a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800289c:	69fb      	ldr	r3, [r7, #28]
 800289e:	3301      	adds	r3, #1
 80028a0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	69fb      	ldr	r3, [r7, #28]
 80028a8:	fa22 f303 	lsr.w	r3, r2, r3
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	f47f ae63 	bne.w	8002578 <HAL_GPIO_Init+0x14>
  }
}
 80028b2:	bf00      	nop
 80028b4:	bf00      	nop
 80028b6:	3724      	adds	r7, #36	; 0x24
 80028b8:	46bd      	mov	sp, r7
 80028ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028be:	4770      	bx	lr
 80028c0:	58000400 	.word	0x58000400

080028c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b083      	sub	sp, #12
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
 80028cc:	460b      	mov	r3, r1
 80028ce:	807b      	strh	r3, [r7, #2]
 80028d0:	4613      	mov	r3, r2
 80028d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80028d4:	787b      	ldrb	r3, [r7, #1]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d003      	beq.n	80028e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028da:	887a      	ldrh	r2, [r7, #2]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80028e0:	e003      	b.n	80028ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80028e2:	887b      	ldrh	r3, [r7, #2]
 80028e4:	041a      	lsls	r2, r3, #16
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	619a      	str	r2, [r3, #24]
}
 80028ea:	bf00      	nop
 80028ec:	370c      	adds	r7, #12
 80028ee:	46bd      	mov	sp, r7
 80028f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f4:	4770      	bx	lr
	...

080028f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b082      	sub	sp, #8
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d101      	bne.n	800290a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	e07f      	b.n	8002a0a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002910:	b2db      	uxtb	r3, r3
 8002912:	2b00      	cmp	r3, #0
 8002914:	d106      	bne.n	8002924 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2200      	movs	r2, #0
 800291a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800291e:	6878      	ldr	r0, [r7, #4]
 8002920:	f7fe fc74 	bl	800120c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2224      	movs	r2, #36	; 0x24
 8002928:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f022 0201 	bic.w	r2, r2, #1
 800293a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	685a      	ldr	r2, [r3, #4]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002948:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	689a      	ldr	r2, [r3, #8]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002958:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	68db      	ldr	r3, [r3, #12]
 800295e:	2b01      	cmp	r3, #1
 8002960:	d107      	bne.n	8002972 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	689a      	ldr	r2, [r3, #8]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800296e:	609a      	str	r2, [r3, #8]
 8002970:	e006      	b.n	8002980 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	689a      	ldr	r2, [r3, #8]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800297e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	68db      	ldr	r3, [r3, #12]
 8002984:	2b02      	cmp	r3, #2
 8002986:	d104      	bne.n	8002992 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002990:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	6859      	ldr	r1, [r3, #4]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681a      	ldr	r2, [r3, #0]
 800299c:	4b1d      	ldr	r3, [pc, #116]	; (8002a14 <HAL_I2C_Init+0x11c>)
 800299e:	430b      	orrs	r3, r1
 80029a0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	68da      	ldr	r2, [r3, #12]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80029b0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	691a      	ldr	r2, [r3, #16]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	695b      	ldr	r3, [r3, #20]
 80029ba:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	699b      	ldr	r3, [r3, #24]
 80029c2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	430a      	orrs	r2, r1
 80029ca:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	69d9      	ldr	r1, [r3, #28]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6a1a      	ldr	r2, [r3, #32]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	430a      	orrs	r2, r1
 80029da:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f042 0201 	orr.w	r2, r2, #1
 80029ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2200      	movs	r2, #0
 80029f0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2220      	movs	r2, #32
 80029f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2200      	movs	r2, #0
 80029fe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2200      	movs	r2, #0
 8002a04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002a08:	2300      	movs	r3, #0
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	3708      	adds	r7, #8
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}
 8002a12:	bf00      	nop
 8002a14:	02008000 	.word	0x02008000

08002a18 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b088      	sub	sp, #32
 8002a1c:	af02      	add	r7, sp, #8
 8002a1e:	60f8      	str	r0, [r7, #12]
 8002a20:	607a      	str	r2, [r7, #4]
 8002a22:	461a      	mov	r2, r3
 8002a24:	460b      	mov	r3, r1
 8002a26:	817b      	strh	r3, [r7, #10]
 8002a28:	4613      	mov	r3, r2
 8002a2a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a32:	b2db      	uxtb	r3, r3
 8002a34:	2b20      	cmp	r3, #32
 8002a36:	f040 80da 	bne.w	8002bee <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a40:	2b01      	cmp	r3, #1
 8002a42:	d101      	bne.n	8002a48 <HAL_I2C_Master_Transmit+0x30>
 8002a44:	2302      	movs	r3, #2
 8002a46:	e0d3      	b.n	8002bf0 <HAL_I2C_Master_Transmit+0x1d8>
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002a50:	f7fe ff08 	bl	8001864 <HAL_GetTick>
 8002a54:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	9300      	str	r3, [sp, #0]
 8002a5a:	2319      	movs	r3, #25
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002a62:	68f8      	ldr	r0, [r7, #12]
 8002a64:	f000 f9e6 	bl	8002e34 <I2C_WaitOnFlagUntilTimeout>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d001      	beq.n	8002a72 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e0be      	b.n	8002bf0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	2221      	movs	r2, #33	; 0x21
 8002a76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	2210      	movs	r2, #16
 8002a7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	2200      	movs	r2, #0
 8002a86:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	687a      	ldr	r2, [r7, #4]
 8002a8c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	893a      	ldrh	r2, [r7, #8]
 8002a92:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	2200      	movs	r2, #0
 8002a98:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a9e:	b29b      	uxth	r3, r3
 8002aa0:	2bff      	cmp	r3, #255	; 0xff
 8002aa2:	d90e      	bls.n	8002ac2 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	22ff      	movs	r2, #255	; 0xff
 8002aa8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002aae:	b2da      	uxtb	r2, r3
 8002ab0:	8979      	ldrh	r1, [r7, #10]
 8002ab2:	4b51      	ldr	r3, [pc, #324]	; (8002bf8 <HAL_I2C_Master_Transmit+0x1e0>)
 8002ab4:	9300      	str	r3, [sp, #0]
 8002ab6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002aba:	68f8      	ldr	r0, [r7, #12]
 8002abc:	f000 fbf6 	bl	80032ac <I2C_TransferConfig>
 8002ac0:	e06c      	b.n	8002b9c <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ac6:	b29a      	uxth	r2, r3
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ad0:	b2da      	uxtb	r2, r3
 8002ad2:	8979      	ldrh	r1, [r7, #10]
 8002ad4:	4b48      	ldr	r3, [pc, #288]	; (8002bf8 <HAL_I2C_Master_Transmit+0x1e0>)
 8002ad6:	9300      	str	r3, [sp, #0]
 8002ad8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002adc:	68f8      	ldr	r0, [r7, #12]
 8002ade:	f000 fbe5 	bl	80032ac <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002ae2:	e05b      	b.n	8002b9c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ae4:	697a      	ldr	r2, [r7, #20]
 8002ae6:	6a39      	ldr	r1, [r7, #32]
 8002ae8:	68f8      	ldr	r0, [r7, #12]
 8002aea:	f000 f9f2 	bl	8002ed2 <I2C_WaitOnTXISFlagUntilTimeout>
 8002aee:	4603      	mov	r3, r0
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d001      	beq.n	8002af8 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002af4:	2301      	movs	r3, #1
 8002af6:	e07b      	b.n	8002bf0 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002afc:	781a      	ldrb	r2, [r3, #0]
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b08:	1c5a      	adds	r2, r3, #1
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b12:	b29b      	uxth	r3, r3
 8002b14:	3b01      	subs	r3, #1
 8002b16:	b29a      	uxth	r2, r3
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b20:	3b01      	subs	r3, #1
 8002b22:	b29a      	uxth	r2, r3
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b2c:	b29b      	uxth	r3, r3
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d034      	beq.n	8002b9c <HAL_I2C_Master_Transmit+0x184>
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d130      	bne.n	8002b9c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	9300      	str	r3, [sp, #0]
 8002b3e:	6a3b      	ldr	r3, [r7, #32]
 8002b40:	2200      	movs	r2, #0
 8002b42:	2180      	movs	r1, #128	; 0x80
 8002b44:	68f8      	ldr	r0, [r7, #12]
 8002b46:	f000 f975 	bl	8002e34 <I2C_WaitOnFlagUntilTimeout>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d001      	beq.n	8002b54 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002b50:	2301      	movs	r3, #1
 8002b52:	e04d      	b.n	8002bf0 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b58:	b29b      	uxth	r3, r3
 8002b5a:	2bff      	cmp	r3, #255	; 0xff
 8002b5c:	d90e      	bls.n	8002b7c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	22ff      	movs	r2, #255	; 0xff
 8002b62:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b68:	b2da      	uxtb	r2, r3
 8002b6a:	8979      	ldrh	r1, [r7, #10]
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	9300      	str	r3, [sp, #0]
 8002b70:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002b74:	68f8      	ldr	r0, [r7, #12]
 8002b76:	f000 fb99 	bl	80032ac <I2C_TransferConfig>
 8002b7a:	e00f      	b.n	8002b9c <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b80:	b29a      	uxth	r2, r3
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b8a:	b2da      	uxtb	r2, r3
 8002b8c:	8979      	ldrh	r1, [r7, #10]
 8002b8e:	2300      	movs	r3, #0
 8002b90:	9300      	str	r3, [sp, #0]
 8002b92:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b96:	68f8      	ldr	r0, [r7, #12]
 8002b98:	f000 fb88 	bl	80032ac <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ba0:	b29b      	uxth	r3, r3
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d19e      	bne.n	8002ae4 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ba6:	697a      	ldr	r2, [r7, #20]
 8002ba8:	6a39      	ldr	r1, [r7, #32]
 8002baa:	68f8      	ldr	r0, [r7, #12]
 8002bac:	f000 f9d8 	bl	8002f60 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d001      	beq.n	8002bba <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e01a      	b.n	8002bf0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	2220      	movs	r2, #32
 8002bc0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	6859      	ldr	r1, [r3, #4]
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681a      	ldr	r2, [r3, #0]
 8002bcc:	4b0b      	ldr	r3, [pc, #44]	; (8002bfc <HAL_I2C_Master_Transmit+0x1e4>)
 8002bce:	400b      	ands	r3, r1
 8002bd0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	2220      	movs	r2, #32
 8002bd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	2200      	movs	r2, #0
 8002be6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002bea:	2300      	movs	r3, #0
 8002bec:	e000      	b.n	8002bf0 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002bee:	2302      	movs	r3, #2
  }
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	3718      	adds	r7, #24
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}
 8002bf8:	80002000 	.word	0x80002000
 8002bfc:	fe00e800 	.word	0xfe00e800

08002c00 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b088      	sub	sp, #32
 8002c04:	af02      	add	r7, sp, #8
 8002c06:	60f8      	str	r0, [r7, #12]
 8002c08:	607a      	str	r2, [r7, #4]
 8002c0a:	461a      	mov	r2, r3
 8002c0c:	460b      	mov	r3, r1
 8002c0e:	817b      	strh	r3, [r7, #10]
 8002c10:	4613      	mov	r3, r2
 8002c12:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c1a:	b2db      	uxtb	r3, r3
 8002c1c:	2b20      	cmp	r3, #32
 8002c1e:	f040 80db 	bne.w	8002dd8 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c28:	2b01      	cmp	r3, #1
 8002c2a:	d101      	bne.n	8002c30 <HAL_I2C_Master_Receive+0x30>
 8002c2c:	2302      	movs	r3, #2
 8002c2e:	e0d4      	b.n	8002dda <HAL_I2C_Master_Receive+0x1da>
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2201      	movs	r2, #1
 8002c34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002c38:	f7fe fe14 	bl	8001864 <HAL_GetTick>
 8002c3c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	9300      	str	r3, [sp, #0]
 8002c42:	2319      	movs	r3, #25
 8002c44:	2201      	movs	r2, #1
 8002c46:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002c4a:	68f8      	ldr	r0, [r7, #12]
 8002c4c:	f000 f8f2 	bl	8002e34 <I2C_WaitOnFlagUntilTimeout>
 8002c50:	4603      	mov	r3, r0
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d001      	beq.n	8002c5a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e0bf      	b.n	8002dda <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	2222      	movs	r2, #34	; 0x22
 8002c5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	2210      	movs	r2, #16
 8002c66:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	687a      	ldr	r2, [r7, #4]
 8002c74:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	893a      	ldrh	r2, [r7, #8]
 8002c7a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c86:	b29b      	uxth	r3, r3
 8002c88:	2bff      	cmp	r3, #255	; 0xff
 8002c8a:	d90e      	bls.n	8002caa <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	22ff      	movs	r2, #255	; 0xff
 8002c90:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c96:	b2da      	uxtb	r2, r3
 8002c98:	8979      	ldrh	r1, [r7, #10]
 8002c9a:	4b52      	ldr	r3, [pc, #328]	; (8002de4 <HAL_I2C_Master_Receive+0x1e4>)
 8002c9c:	9300      	str	r3, [sp, #0]
 8002c9e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ca2:	68f8      	ldr	r0, [r7, #12]
 8002ca4:	f000 fb02 	bl	80032ac <I2C_TransferConfig>
 8002ca8:	e06d      	b.n	8002d86 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cae:	b29a      	uxth	r2, r3
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cb8:	b2da      	uxtb	r2, r3
 8002cba:	8979      	ldrh	r1, [r7, #10]
 8002cbc:	4b49      	ldr	r3, [pc, #292]	; (8002de4 <HAL_I2C_Master_Receive+0x1e4>)
 8002cbe:	9300      	str	r3, [sp, #0]
 8002cc0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002cc4:	68f8      	ldr	r0, [r7, #12]
 8002cc6:	f000 faf1 	bl	80032ac <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8002cca:	e05c      	b.n	8002d86 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ccc:	697a      	ldr	r2, [r7, #20]
 8002cce:	6a39      	ldr	r1, [r7, #32]
 8002cd0:	68f8      	ldr	r0, [r7, #12]
 8002cd2:	f000 f989 	bl	8002fe8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d001      	beq.n	8002ce0 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e07c      	b.n	8002dda <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cea:	b2d2      	uxtb	r2, r2
 8002cec:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf2:	1c5a      	adds	r2, r3, #1
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cfc:	3b01      	subs	r3, #1
 8002cfe:	b29a      	uxth	r2, r3
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d08:	b29b      	uxth	r3, r3
 8002d0a:	3b01      	subs	r3, #1
 8002d0c:	b29a      	uxth	r2, r3
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d16:	b29b      	uxth	r3, r3
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d034      	beq.n	8002d86 <HAL_I2C_Master_Receive+0x186>
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d130      	bne.n	8002d86 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	9300      	str	r3, [sp, #0]
 8002d28:	6a3b      	ldr	r3, [r7, #32]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	2180      	movs	r1, #128	; 0x80
 8002d2e:	68f8      	ldr	r0, [r7, #12]
 8002d30:	f000 f880 	bl	8002e34 <I2C_WaitOnFlagUntilTimeout>
 8002d34:	4603      	mov	r3, r0
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d001      	beq.n	8002d3e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e04d      	b.n	8002dda <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d42:	b29b      	uxth	r3, r3
 8002d44:	2bff      	cmp	r3, #255	; 0xff
 8002d46:	d90e      	bls.n	8002d66 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	22ff      	movs	r2, #255	; 0xff
 8002d4c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d52:	b2da      	uxtb	r2, r3
 8002d54:	8979      	ldrh	r1, [r7, #10]
 8002d56:	2300      	movs	r3, #0
 8002d58:	9300      	str	r3, [sp, #0]
 8002d5a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d5e:	68f8      	ldr	r0, [r7, #12]
 8002d60:	f000 faa4 	bl	80032ac <I2C_TransferConfig>
 8002d64:	e00f      	b.n	8002d86 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d6a:	b29a      	uxth	r2, r3
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d74:	b2da      	uxtb	r2, r3
 8002d76:	8979      	ldrh	r1, [r7, #10]
 8002d78:	2300      	movs	r3, #0
 8002d7a:	9300      	str	r3, [sp, #0]
 8002d7c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d80:	68f8      	ldr	r0, [r7, #12]
 8002d82:	f000 fa93 	bl	80032ac <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d8a:	b29b      	uxth	r3, r3
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d19d      	bne.n	8002ccc <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d90:	697a      	ldr	r2, [r7, #20]
 8002d92:	6a39      	ldr	r1, [r7, #32]
 8002d94:	68f8      	ldr	r0, [r7, #12]
 8002d96:	f000 f8e3 	bl	8002f60 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d001      	beq.n	8002da4 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002da0:	2301      	movs	r3, #1
 8002da2:	e01a      	b.n	8002dda <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	2220      	movs	r2, #32
 8002daa:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	6859      	ldr	r1, [r3, #4]
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681a      	ldr	r2, [r3, #0]
 8002db6:	4b0c      	ldr	r3, [pc, #48]	; (8002de8 <HAL_I2C_Master_Receive+0x1e8>)
 8002db8:	400b      	ands	r3, r1
 8002dba:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	2220      	movs	r2, #32
 8002dc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	e000      	b.n	8002dda <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002dd8:	2302      	movs	r3, #2
  }
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	3718      	adds	r7, #24
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}
 8002de2:	bf00      	nop
 8002de4:	80002400 	.word	0x80002400
 8002de8:	fe00e800 	.word	0xfe00e800

08002dec <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b083      	sub	sp, #12
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	699b      	ldr	r3, [r3, #24]
 8002dfa:	f003 0302 	and.w	r3, r3, #2
 8002dfe:	2b02      	cmp	r3, #2
 8002e00:	d103      	bne.n	8002e0a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	2200      	movs	r2, #0
 8002e08:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	699b      	ldr	r3, [r3, #24]
 8002e10:	f003 0301 	and.w	r3, r3, #1
 8002e14:	2b01      	cmp	r3, #1
 8002e16:	d007      	beq.n	8002e28 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	699a      	ldr	r2, [r3, #24]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f042 0201 	orr.w	r2, r2, #1
 8002e26:	619a      	str	r2, [r3, #24]
  }
}
 8002e28:	bf00      	nop
 8002e2a:	370c      	adds	r7, #12
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e32:	4770      	bx	lr

08002e34 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b084      	sub	sp, #16
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	60f8      	str	r0, [r7, #12]
 8002e3c:	60b9      	str	r1, [r7, #8]
 8002e3e:	603b      	str	r3, [r7, #0]
 8002e40:	4613      	mov	r3, r2
 8002e42:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e44:	e031      	b.n	8002eaa <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e4c:	d02d      	beq.n	8002eaa <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e4e:	f7fe fd09 	bl	8001864 <HAL_GetTick>
 8002e52:	4602      	mov	r2, r0
 8002e54:	69bb      	ldr	r3, [r7, #24]
 8002e56:	1ad3      	subs	r3, r2, r3
 8002e58:	683a      	ldr	r2, [r7, #0]
 8002e5a:	429a      	cmp	r2, r3
 8002e5c:	d302      	bcc.n	8002e64 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d122      	bne.n	8002eaa <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	699a      	ldr	r2, [r3, #24]
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	68ba      	ldr	r2, [r7, #8]
 8002e70:	429a      	cmp	r2, r3
 8002e72:	bf0c      	ite	eq
 8002e74:	2301      	moveq	r3, #1
 8002e76:	2300      	movne	r3, #0
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	461a      	mov	r2, r3
 8002e7c:	79fb      	ldrb	r3, [r7, #7]
 8002e7e:	429a      	cmp	r2, r3
 8002e80:	d113      	bne.n	8002eaa <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e86:	f043 0220 	orr.w	r2, r3, #32
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	2220      	movs	r2, #32
 8002e92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e00f      	b.n	8002eca <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	699a      	ldr	r2, [r3, #24]
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	4013      	ands	r3, r2
 8002eb4:	68ba      	ldr	r2, [r7, #8]
 8002eb6:	429a      	cmp	r2, r3
 8002eb8:	bf0c      	ite	eq
 8002eba:	2301      	moveq	r3, #1
 8002ebc:	2300      	movne	r3, #0
 8002ebe:	b2db      	uxtb	r3, r3
 8002ec0:	461a      	mov	r2, r3
 8002ec2:	79fb      	ldrb	r3, [r7, #7]
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	d0be      	beq.n	8002e46 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002ec8:	2300      	movs	r3, #0
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	3710      	adds	r7, #16
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}

08002ed2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002ed2:	b580      	push	{r7, lr}
 8002ed4:	b084      	sub	sp, #16
 8002ed6:	af00      	add	r7, sp, #0
 8002ed8:	60f8      	str	r0, [r7, #12]
 8002eda:	60b9      	str	r1, [r7, #8]
 8002edc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002ede:	e033      	b.n	8002f48 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ee0:	687a      	ldr	r2, [r7, #4]
 8002ee2:	68b9      	ldr	r1, [r7, #8]
 8002ee4:	68f8      	ldr	r0, [r7, #12]
 8002ee6:	f000 f901 	bl	80030ec <I2C_IsErrorOccurred>
 8002eea:	4603      	mov	r3, r0
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d001      	beq.n	8002ef4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	e031      	b.n	8002f58 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002efa:	d025      	beq.n	8002f48 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002efc:	f7fe fcb2 	bl	8001864 <HAL_GetTick>
 8002f00:	4602      	mov	r2, r0
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	68ba      	ldr	r2, [r7, #8]
 8002f08:	429a      	cmp	r2, r3
 8002f0a:	d302      	bcc.n	8002f12 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d11a      	bne.n	8002f48 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	699b      	ldr	r3, [r3, #24]
 8002f18:	f003 0302 	and.w	r3, r3, #2
 8002f1c:	2b02      	cmp	r3, #2
 8002f1e:	d013      	beq.n	8002f48 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f24:	f043 0220 	orr.w	r2, r3, #32
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2220      	movs	r2, #32
 8002f30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	2200      	movs	r2, #0
 8002f38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002f44:	2301      	movs	r3, #1
 8002f46:	e007      	b.n	8002f58 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	699b      	ldr	r3, [r3, #24]
 8002f4e:	f003 0302 	and.w	r3, r3, #2
 8002f52:	2b02      	cmp	r3, #2
 8002f54:	d1c4      	bne.n	8002ee0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002f56:	2300      	movs	r3, #0
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	3710      	adds	r7, #16
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}

08002f60 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b084      	sub	sp, #16
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	60f8      	str	r0, [r7, #12]
 8002f68:	60b9      	str	r1, [r7, #8]
 8002f6a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002f6c:	e02f      	b.n	8002fce <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f6e:	687a      	ldr	r2, [r7, #4]
 8002f70:	68b9      	ldr	r1, [r7, #8]
 8002f72:	68f8      	ldr	r0, [r7, #12]
 8002f74:	f000 f8ba 	bl	80030ec <I2C_IsErrorOccurred>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d001      	beq.n	8002f82 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e02d      	b.n	8002fde <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f82:	f7fe fc6f 	bl	8001864 <HAL_GetTick>
 8002f86:	4602      	mov	r2, r0
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	1ad3      	subs	r3, r2, r3
 8002f8c:	68ba      	ldr	r2, [r7, #8]
 8002f8e:	429a      	cmp	r2, r3
 8002f90:	d302      	bcc.n	8002f98 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d11a      	bne.n	8002fce <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	699b      	ldr	r3, [r3, #24]
 8002f9e:	f003 0320 	and.w	r3, r3, #32
 8002fa2:	2b20      	cmp	r3, #32
 8002fa4:	d013      	beq.n	8002fce <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002faa:	f043 0220 	orr.w	r2, r3, #32
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	2220      	movs	r2, #32
 8002fb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e007      	b.n	8002fde <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	699b      	ldr	r3, [r3, #24]
 8002fd4:	f003 0320 	and.w	r3, r3, #32
 8002fd8:	2b20      	cmp	r3, #32
 8002fda:	d1c8      	bne.n	8002f6e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002fdc:	2300      	movs	r3, #0
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	3710      	adds	r7, #16
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}
	...

08002fe8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b084      	sub	sp, #16
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	60f8      	str	r0, [r7, #12]
 8002ff0:	60b9      	str	r1, [r7, #8]
 8002ff2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002ff4:	e06b      	b.n	80030ce <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ff6:	687a      	ldr	r2, [r7, #4]
 8002ff8:	68b9      	ldr	r1, [r7, #8]
 8002ffa:	68f8      	ldr	r0, [r7, #12]
 8002ffc:	f000 f876 	bl	80030ec <I2C_IsErrorOccurred>
 8003000:	4603      	mov	r3, r0
 8003002:	2b00      	cmp	r3, #0
 8003004:	d001      	beq.n	800300a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	e069      	b.n	80030de <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	699b      	ldr	r3, [r3, #24]
 8003010:	f003 0320 	and.w	r3, r3, #32
 8003014:	2b20      	cmp	r3, #32
 8003016:	d138      	bne.n	800308a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	699b      	ldr	r3, [r3, #24]
 800301e:	f003 0304 	and.w	r3, r3, #4
 8003022:	2b04      	cmp	r3, #4
 8003024:	d105      	bne.n	8003032 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800302a:	2b00      	cmp	r3, #0
 800302c:	d001      	beq.n	8003032 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800302e:	2300      	movs	r3, #0
 8003030:	e055      	b.n	80030de <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	699b      	ldr	r3, [r3, #24]
 8003038:	f003 0310 	and.w	r3, r3, #16
 800303c:	2b10      	cmp	r3, #16
 800303e:	d107      	bne.n	8003050 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	2210      	movs	r2, #16
 8003046:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	2204      	movs	r2, #4
 800304c:	645a      	str	r2, [r3, #68]	; 0x44
 800304e:	e002      	b.n	8003056 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	2200      	movs	r2, #0
 8003054:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	2220      	movs	r2, #32
 800305c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	6859      	ldr	r1, [r3, #4]
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681a      	ldr	r2, [r3, #0]
 8003068:	4b1f      	ldr	r3, [pc, #124]	; (80030e8 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 800306a:	400b      	ands	r3, r1
 800306c:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	2220      	movs	r2, #32
 8003072:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	2200      	movs	r2, #0
 800307a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	2200      	movs	r2, #0
 8003082:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	e029      	b.n	80030de <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800308a:	f7fe fbeb 	bl	8001864 <HAL_GetTick>
 800308e:	4602      	mov	r2, r0
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	1ad3      	subs	r3, r2, r3
 8003094:	68ba      	ldr	r2, [r7, #8]
 8003096:	429a      	cmp	r2, r3
 8003098:	d302      	bcc.n	80030a0 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800309a:	68bb      	ldr	r3, [r7, #8]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d116      	bne.n	80030ce <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	699b      	ldr	r3, [r3, #24]
 80030a6:	f003 0304 	and.w	r3, r3, #4
 80030aa:	2b04      	cmp	r3, #4
 80030ac:	d00f      	beq.n	80030ce <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030b2:	f043 0220 	orr.w	r2, r3, #32
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	2220      	movs	r2, #32
 80030be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	2200      	movs	r2, #0
 80030c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	e007      	b.n	80030de <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	699b      	ldr	r3, [r3, #24]
 80030d4:	f003 0304 	and.w	r3, r3, #4
 80030d8:	2b04      	cmp	r3, #4
 80030da:	d18c      	bne.n	8002ff6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80030dc:	2300      	movs	r3, #0
}
 80030de:	4618      	mov	r0, r3
 80030e0:	3710      	adds	r7, #16
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}
 80030e6:	bf00      	nop
 80030e8:	fe00e800 	.word	0xfe00e800

080030ec <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b08a      	sub	sp, #40	; 0x28
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	60f8      	str	r0, [r7, #12]
 80030f4:	60b9      	str	r1, [r7, #8]
 80030f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030f8:	2300      	movs	r3, #0
 80030fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	699b      	ldr	r3, [r3, #24]
 8003104:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003106:	2300      	movs	r3, #0
 8003108:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800310e:	69bb      	ldr	r3, [r7, #24]
 8003110:	f003 0310 	and.w	r3, r3, #16
 8003114:	2b00      	cmp	r3, #0
 8003116:	d068      	beq.n	80031ea <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	2210      	movs	r2, #16
 800311e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003120:	e049      	b.n	80031b6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003128:	d045      	beq.n	80031b6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800312a:	f7fe fb9b 	bl	8001864 <HAL_GetTick>
 800312e:	4602      	mov	r2, r0
 8003130:	69fb      	ldr	r3, [r7, #28]
 8003132:	1ad3      	subs	r3, r2, r3
 8003134:	68ba      	ldr	r2, [r7, #8]
 8003136:	429a      	cmp	r2, r3
 8003138:	d302      	bcc.n	8003140 <I2C_IsErrorOccurred+0x54>
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d13a      	bne.n	80031b6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800314a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003152:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	699b      	ldr	r3, [r3, #24]
 800315a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800315e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003162:	d121      	bne.n	80031a8 <I2C_IsErrorOccurred+0xbc>
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800316a:	d01d      	beq.n	80031a8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800316c:	7cfb      	ldrb	r3, [r7, #19]
 800316e:	2b20      	cmp	r3, #32
 8003170:	d01a      	beq.n	80031a8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	685a      	ldr	r2, [r3, #4]
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003180:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003182:	f7fe fb6f 	bl	8001864 <HAL_GetTick>
 8003186:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003188:	e00e      	b.n	80031a8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800318a:	f7fe fb6b 	bl	8001864 <HAL_GetTick>
 800318e:	4602      	mov	r2, r0
 8003190:	69fb      	ldr	r3, [r7, #28]
 8003192:	1ad3      	subs	r3, r2, r3
 8003194:	2b19      	cmp	r3, #25
 8003196:	d907      	bls.n	80031a8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003198:	6a3b      	ldr	r3, [r7, #32]
 800319a:	f043 0320 	orr.w	r3, r3, #32
 800319e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80031a6:	e006      	b.n	80031b6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	699b      	ldr	r3, [r3, #24]
 80031ae:	f003 0320 	and.w	r3, r3, #32
 80031b2:	2b20      	cmp	r3, #32
 80031b4:	d1e9      	bne.n	800318a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	699b      	ldr	r3, [r3, #24]
 80031bc:	f003 0320 	and.w	r3, r3, #32
 80031c0:	2b20      	cmp	r3, #32
 80031c2:	d003      	beq.n	80031cc <I2C_IsErrorOccurred+0xe0>
 80031c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d0aa      	beq.n	8003122 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80031cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d103      	bne.n	80031dc <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	2220      	movs	r2, #32
 80031da:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80031dc:	6a3b      	ldr	r3, [r7, #32]
 80031de:	f043 0304 	orr.w	r3, r3, #4
 80031e2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	699b      	ldr	r3, [r3, #24]
 80031f0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80031f2:	69bb      	ldr	r3, [r7, #24]
 80031f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d00b      	beq.n	8003214 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80031fc:	6a3b      	ldr	r3, [r7, #32]
 80031fe:	f043 0301 	orr.w	r3, r3, #1
 8003202:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f44f 7280 	mov.w	r2, #256	; 0x100
 800320c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800320e:	2301      	movs	r3, #1
 8003210:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003214:	69bb      	ldr	r3, [r7, #24]
 8003216:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800321a:	2b00      	cmp	r3, #0
 800321c:	d00b      	beq.n	8003236 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800321e:	6a3b      	ldr	r3, [r7, #32]
 8003220:	f043 0308 	orr.w	r3, r3, #8
 8003224:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800322e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003230:	2301      	movs	r3, #1
 8003232:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003236:	69bb      	ldr	r3, [r7, #24]
 8003238:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800323c:	2b00      	cmp	r3, #0
 800323e:	d00b      	beq.n	8003258 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003240:	6a3b      	ldr	r3, [r7, #32]
 8003242:	f043 0302 	orr.w	r3, r3, #2
 8003246:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003250:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003258:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800325c:	2b00      	cmp	r3, #0
 800325e:	d01c      	beq.n	800329a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003260:	68f8      	ldr	r0, [r7, #12]
 8003262:	f7ff fdc3 	bl	8002dec <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	6859      	ldr	r1, [r3, #4]
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	4b0d      	ldr	r3, [pc, #52]	; (80032a8 <I2C_IsErrorOccurred+0x1bc>)
 8003272:	400b      	ands	r3, r1
 8003274:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800327a:	6a3b      	ldr	r3, [r7, #32]
 800327c:	431a      	orrs	r2, r3
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	2220      	movs	r2, #32
 8003286:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	2200      	movs	r2, #0
 800328e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	2200      	movs	r2, #0
 8003296:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800329a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800329e:	4618      	mov	r0, r3
 80032a0:	3728      	adds	r7, #40	; 0x28
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}
 80032a6:	bf00      	nop
 80032a8:	fe00e800 	.word	0xfe00e800

080032ac <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b087      	sub	sp, #28
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	60f8      	str	r0, [r7, #12]
 80032b4:	607b      	str	r3, [r7, #4]
 80032b6:	460b      	mov	r3, r1
 80032b8:	817b      	strh	r3, [r7, #10]
 80032ba:	4613      	mov	r3, r2
 80032bc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80032be:	897b      	ldrh	r3, [r7, #10]
 80032c0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80032c4:	7a7b      	ldrb	r3, [r7, #9]
 80032c6:	041b      	lsls	r3, r3, #16
 80032c8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80032cc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80032d2:	6a3b      	ldr	r3, [r7, #32]
 80032d4:	4313      	orrs	r3, r2
 80032d6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80032da:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	685a      	ldr	r2, [r3, #4]
 80032e2:	6a3b      	ldr	r3, [r7, #32]
 80032e4:	0d5b      	lsrs	r3, r3, #21
 80032e6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80032ea:	4b08      	ldr	r3, [pc, #32]	; (800330c <I2C_TransferConfig+0x60>)
 80032ec:	430b      	orrs	r3, r1
 80032ee:	43db      	mvns	r3, r3
 80032f0:	ea02 0103 	and.w	r1, r2, r3
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	697a      	ldr	r2, [r7, #20]
 80032fa:	430a      	orrs	r2, r1
 80032fc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80032fe:	bf00      	nop
 8003300:	371c      	adds	r7, #28
 8003302:	46bd      	mov	sp, r7
 8003304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003308:	4770      	bx	lr
 800330a:	bf00      	nop
 800330c:	03ff63ff 	.word	0x03ff63ff

08003310 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003310:	b480      	push	{r7}
 8003312:	b083      	sub	sp, #12
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
 8003318:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003320:	b2db      	uxtb	r3, r3
 8003322:	2b20      	cmp	r3, #32
 8003324:	d138      	bne.n	8003398 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800332c:	2b01      	cmp	r3, #1
 800332e:	d101      	bne.n	8003334 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003330:	2302      	movs	r3, #2
 8003332:	e032      	b.n	800339a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2201      	movs	r2, #1
 8003338:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2224      	movs	r2, #36	; 0x24
 8003340:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	681a      	ldr	r2, [r3, #0]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f022 0201 	bic.w	r2, r2, #1
 8003352:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	681a      	ldr	r2, [r3, #0]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003362:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	6819      	ldr	r1, [r3, #0]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	683a      	ldr	r2, [r7, #0]
 8003370:	430a      	orrs	r2, r1
 8003372:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	681a      	ldr	r2, [r3, #0]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f042 0201 	orr.w	r2, r2, #1
 8003382:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2220      	movs	r2, #32
 8003388:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2200      	movs	r2, #0
 8003390:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003394:	2300      	movs	r3, #0
 8003396:	e000      	b.n	800339a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003398:	2302      	movs	r3, #2
  }
}
 800339a:	4618      	mov	r0, r3
 800339c:	370c      	adds	r7, #12
 800339e:	46bd      	mov	sp, r7
 80033a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a4:	4770      	bx	lr

080033a6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80033a6:	b480      	push	{r7}
 80033a8:	b085      	sub	sp, #20
 80033aa:	af00      	add	r7, sp, #0
 80033ac:	6078      	str	r0, [r7, #4]
 80033ae:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033b6:	b2db      	uxtb	r3, r3
 80033b8:	2b20      	cmp	r3, #32
 80033ba:	d139      	bne.n	8003430 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80033c2:	2b01      	cmp	r3, #1
 80033c4:	d101      	bne.n	80033ca <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80033c6:	2302      	movs	r3, #2
 80033c8:	e033      	b.n	8003432 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2201      	movs	r2, #1
 80033ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2224      	movs	r2, #36	; 0x24
 80033d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	681a      	ldr	r2, [r3, #0]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f022 0201 	bic.w	r2, r2, #1
 80033e8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80033f8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	021b      	lsls	r3, r3, #8
 80033fe:	68fa      	ldr	r2, [r7, #12]
 8003400:	4313      	orrs	r3, r2
 8003402:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	68fa      	ldr	r2, [r7, #12]
 800340a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	681a      	ldr	r2, [r3, #0]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f042 0201 	orr.w	r2, r2, #1
 800341a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2220      	movs	r2, #32
 8003420:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2200      	movs	r2, #0
 8003428:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800342c:	2300      	movs	r3, #0
 800342e:	e000      	b.n	8003432 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003430:	2302      	movs	r3, #2
  }
}
 8003432:	4618      	mov	r0, r3
 8003434:	3714      	adds	r7, #20
 8003436:	46bd      	mov	sp, r7
 8003438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343c:	4770      	bx	lr
	...

08003440 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b084      	sub	sp, #16
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003448:	4b19      	ldr	r3, [pc, #100]	; (80034b0 <HAL_PWREx_ConfigSupply+0x70>)
 800344a:	68db      	ldr	r3, [r3, #12]
 800344c:	f003 0304 	and.w	r3, r3, #4
 8003450:	2b04      	cmp	r3, #4
 8003452:	d00a      	beq.n	800346a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003454:	4b16      	ldr	r3, [pc, #88]	; (80034b0 <HAL_PWREx_ConfigSupply+0x70>)
 8003456:	68db      	ldr	r3, [r3, #12]
 8003458:	f003 0307 	and.w	r3, r3, #7
 800345c:	687a      	ldr	r2, [r7, #4]
 800345e:	429a      	cmp	r2, r3
 8003460:	d001      	beq.n	8003466 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	e01f      	b.n	80034a6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003466:	2300      	movs	r3, #0
 8003468:	e01d      	b.n	80034a6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800346a:	4b11      	ldr	r3, [pc, #68]	; (80034b0 <HAL_PWREx_ConfigSupply+0x70>)
 800346c:	68db      	ldr	r3, [r3, #12]
 800346e:	f023 0207 	bic.w	r2, r3, #7
 8003472:	490f      	ldr	r1, [pc, #60]	; (80034b0 <HAL_PWREx_ConfigSupply+0x70>)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	4313      	orrs	r3, r2
 8003478:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800347a:	f7fe f9f3 	bl	8001864 <HAL_GetTick>
 800347e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003480:	e009      	b.n	8003496 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003482:	f7fe f9ef 	bl	8001864 <HAL_GetTick>
 8003486:	4602      	mov	r2, r0
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	1ad3      	subs	r3, r2, r3
 800348c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003490:	d901      	bls.n	8003496 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	e007      	b.n	80034a6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003496:	4b06      	ldr	r3, [pc, #24]	; (80034b0 <HAL_PWREx_ConfigSupply+0x70>)
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800349e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034a2:	d1ee      	bne.n	8003482 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80034a4:	2300      	movs	r3, #0
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	3710      	adds	r7, #16
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}
 80034ae:	bf00      	nop
 80034b0:	58024800 	.word	0x58024800

080034b4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b08c      	sub	sp, #48	; 0x30
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d102      	bne.n	80034c8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	f000 bc48 	b.w	8003d58 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f003 0301 	and.w	r3, r3, #1
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	f000 8088 	beq.w	80035e6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80034d6:	4b99      	ldr	r3, [pc, #612]	; (800373c <HAL_RCC_OscConfig+0x288>)
 80034d8:	691b      	ldr	r3, [r3, #16]
 80034da:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80034de:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80034e0:	4b96      	ldr	r3, [pc, #600]	; (800373c <HAL_RCC_OscConfig+0x288>)
 80034e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034e4:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80034e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034e8:	2b10      	cmp	r3, #16
 80034ea:	d007      	beq.n	80034fc <HAL_RCC_OscConfig+0x48>
 80034ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034ee:	2b18      	cmp	r3, #24
 80034f0:	d111      	bne.n	8003516 <HAL_RCC_OscConfig+0x62>
 80034f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034f4:	f003 0303 	and.w	r3, r3, #3
 80034f8:	2b02      	cmp	r3, #2
 80034fa:	d10c      	bne.n	8003516 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034fc:	4b8f      	ldr	r3, [pc, #572]	; (800373c <HAL_RCC_OscConfig+0x288>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003504:	2b00      	cmp	r3, #0
 8003506:	d06d      	beq.n	80035e4 <HAL_RCC_OscConfig+0x130>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d169      	bne.n	80035e4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003510:	2301      	movs	r3, #1
 8003512:	f000 bc21 	b.w	8003d58 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800351e:	d106      	bne.n	800352e <HAL_RCC_OscConfig+0x7a>
 8003520:	4b86      	ldr	r3, [pc, #536]	; (800373c <HAL_RCC_OscConfig+0x288>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a85      	ldr	r2, [pc, #532]	; (800373c <HAL_RCC_OscConfig+0x288>)
 8003526:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800352a:	6013      	str	r3, [r2, #0]
 800352c:	e02e      	b.n	800358c <HAL_RCC_OscConfig+0xd8>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d10c      	bne.n	8003550 <HAL_RCC_OscConfig+0x9c>
 8003536:	4b81      	ldr	r3, [pc, #516]	; (800373c <HAL_RCC_OscConfig+0x288>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a80      	ldr	r2, [pc, #512]	; (800373c <HAL_RCC_OscConfig+0x288>)
 800353c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003540:	6013      	str	r3, [r2, #0]
 8003542:	4b7e      	ldr	r3, [pc, #504]	; (800373c <HAL_RCC_OscConfig+0x288>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a7d      	ldr	r2, [pc, #500]	; (800373c <HAL_RCC_OscConfig+0x288>)
 8003548:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800354c:	6013      	str	r3, [r2, #0]
 800354e:	e01d      	b.n	800358c <HAL_RCC_OscConfig+0xd8>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003558:	d10c      	bne.n	8003574 <HAL_RCC_OscConfig+0xc0>
 800355a:	4b78      	ldr	r3, [pc, #480]	; (800373c <HAL_RCC_OscConfig+0x288>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a77      	ldr	r2, [pc, #476]	; (800373c <HAL_RCC_OscConfig+0x288>)
 8003560:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003564:	6013      	str	r3, [r2, #0]
 8003566:	4b75      	ldr	r3, [pc, #468]	; (800373c <HAL_RCC_OscConfig+0x288>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a74      	ldr	r2, [pc, #464]	; (800373c <HAL_RCC_OscConfig+0x288>)
 800356c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003570:	6013      	str	r3, [r2, #0]
 8003572:	e00b      	b.n	800358c <HAL_RCC_OscConfig+0xd8>
 8003574:	4b71      	ldr	r3, [pc, #452]	; (800373c <HAL_RCC_OscConfig+0x288>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a70      	ldr	r2, [pc, #448]	; (800373c <HAL_RCC_OscConfig+0x288>)
 800357a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800357e:	6013      	str	r3, [r2, #0]
 8003580:	4b6e      	ldr	r3, [pc, #440]	; (800373c <HAL_RCC_OscConfig+0x288>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a6d      	ldr	r2, [pc, #436]	; (800373c <HAL_RCC_OscConfig+0x288>)
 8003586:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800358a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d013      	beq.n	80035bc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003594:	f7fe f966 	bl	8001864 <HAL_GetTick>
 8003598:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800359a:	e008      	b.n	80035ae <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800359c:	f7fe f962 	bl	8001864 <HAL_GetTick>
 80035a0:	4602      	mov	r2, r0
 80035a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a4:	1ad3      	subs	r3, r2, r3
 80035a6:	2b64      	cmp	r3, #100	; 0x64
 80035a8:	d901      	bls.n	80035ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80035aa:	2303      	movs	r3, #3
 80035ac:	e3d4      	b.n	8003d58 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80035ae:	4b63      	ldr	r3, [pc, #396]	; (800373c <HAL_RCC_OscConfig+0x288>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d0f0      	beq.n	800359c <HAL_RCC_OscConfig+0xe8>
 80035ba:	e014      	b.n	80035e6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035bc:	f7fe f952 	bl	8001864 <HAL_GetTick>
 80035c0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80035c2:	e008      	b.n	80035d6 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035c4:	f7fe f94e 	bl	8001864 <HAL_GetTick>
 80035c8:	4602      	mov	r2, r0
 80035ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035cc:	1ad3      	subs	r3, r2, r3
 80035ce:	2b64      	cmp	r3, #100	; 0x64
 80035d0:	d901      	bls.n	80035d6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80035d2:	2303      	movs	r3, #3
 80035d4:	e3c0      	b.n	8003d58 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80035d6:	4b59      	ldr	r3, [pc, #356]	; (800373c <HAL_RCC_OscConfig+0x288>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d1f0      	bne.n	80035c4 <HAL_RCC_OscConfig+0x110>
 80035e2:	e000      	b.n	80035e6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f003 0302 	and.w	r3, r3, #2
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	f000 80ca 	beq.w	8003788 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80035f4:	4b51      	ldr	r3, [pc, #324]	; (800373c <HAL_RCC_OscConfig+0x288>)
 80035f6:	691b      	ldr	r3, [r3, #16]
 80035f8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80035fc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80035fe:	4b4f      	ldr	r3, [pc, #316]	; (800373c <HAL_RCC_OscConfig+0x288>)
 8003600:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003602:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003604:	6a3b      	ldr	r3, [r7, #32]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d007      	beq.n	800361a <HAL_RCC_OscConfig+0x166>
 800360a:	6a3b      	ldr	r3, [r7, #32]
 800360c:	2b18      	cmp	r3, #24
 800360e:	d156      	bne.n	80036be <HAL_RCC_OscConfig+0x20a>
 8003610:	69fb      	ldr	r3, [r7, #28]
 8003612:	f003 0303 	and.w	r3, r3, #3
 8003616:	2b00      	cmp	r3, #0
 8003618:	d151      	bne.n	80036be <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800361a:	4b48      	ldr	r3, [pc, #288]	; (800373c <HAL_RCC_OscConfig+0x288>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f003 0304 	and.w	r3, r3, #4
 8003622:	2b00      	cmp	r3, #0
 8003624:	d005      	beq.n	8003632 <HAL_RCC_OscConfig+0x17e>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	68db      	ldr	r3, [r3, #12]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d101      	bne.n	8003632 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	e392      	b.n	8003d58 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003632:	4b42      	ldr	r3, [pc, #264]	; (800373c <HAL_RCC_OscConfig+0x288>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f023 0219 	bic.w	r2, r3, #25
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	68db      	ldr	r3, [r3, #12]
 800363e:	493f      	ldr	r1, [pc, #252]	; (800373c <HAL_RCC_OscConfig+0x288>)
 8003640:	4313      	orrs	r3, r2
 8003642:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003644:	f7fe f90e 	bl	8001864 <HAL_GetTick>
 8003648:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800364a:	e008      	b.n	800365e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800364c:	f7fe f90a 	bl	8001864 <HAL_GetTick>
 8003650:	4602      	mov	r2, r0
 8003652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003654:	1ad3      	subs	r3, r2, r3
 8003656:	2b02      	cmp	r3, #2
 8003658:	d901      	bls.n	800365e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800365a:	2303      	movs	r3, #3
 800365c:	e37c      	b.n	8003d58 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800365e:	4b37      	ldr	r3, [pc, #220]	; (800373c <HAL_RCC_OscConfig+0x288>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 0304 	and.w	r3, r3, #4
 8003666:	2b00      	cmp	r3, #0
 8003668:	d0f0      	beq.n	800364c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800366a:	f7fe f92b 	bl	80018c4 <HAL_GetREVID>
 800366e:	4603      	mov	r3, r0
 8003670:	f241 0203 	movw	r2, #4099	; 0x1003
 8003674:	4293      	cmp	r3, r2
 8003676:	d817      	bhi.n	80036a8 <HAL_RCC_OscConfig+0x1f4>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	691b      	ldr	r3, [r3, #16]
 800367c:	2b40      	cmp	r3, #64	; 0x40
 800367e:	d108      	bne.n	8003692 <HAL_RCC_OscConfig+0x1de>
 8003680:	4b2e      	ldr	r3, [pc, #184]	; (800373c <HAL_RCC_OscConfig+0x288>)
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003688:	4a2c      	ldr	r2, [pc, #176]	; (800373c <HAL_RCC_OscConfig+0x288>)
 800368a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800368e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003690:	e07a      	b.n	8003788 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003692:	4b2a      	ldr	r3, [pc, #168]	; (800373c <HAL_RCC_OscConfig+0x288>)
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	691b      	ldr	r3, [r3, #16]
 800369e:	031b      	lsls	r3, r3, #12
 80036a0:	4926      	ldr	r1, [pc, #152]	; (800373c <HAL_RCC_OscConfig+0x288>)
 80036a2:	4313      	orrs	r3, r2
 80036a4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80036a6:	e06f      	b.n	8003788 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036a8:	4b24      	ldr	r3, [pc, #144]	; (800373c <HAL_RCC_OscConfig+0x288>)
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	691b      	ldr	r3, [r3, #16]
 80036b4:	061b      	lsls	r3, r3, #24
 80036b6:	4921      	ldr	r1, [pc, #132]	; (800373c <HAL_RCC_OscConfig+0x288>)
 80036b8:	4313      	orrs	r3, r2
 80036ba:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80036bc:	e064      	b.n	8003788 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	68db      	ldr	r3, [r3, #12]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d047      	beq.n	8003756 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80036c6:	4b1d      	ldr	r3, [pc, #116]	; (800373c <HAL_RCC_OscConfig+0x288>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f023 0219 	bic.w	r2, r3, #25
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	68db      	ldr	r3, [r3, #12]
 80036d2:	491a      	ldr	r1, [pc, #104]	; (800373c <HAL_RCC_OscConfig+0x288>)
 80036d4:	4313      	orrs	r3, r2
 80036d6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036d8:	f7fe f8c4 	bl	8001864 <HAL_GetTick>
 80036dc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80036de:	e008      	b.n	80036f2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036e0:	f7fe f8c0 	bl	8001864 <HAL_GetTick>
 80036e4:	4602      	mov	r2, r0
 80036e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e8:	1ad3      	subs	r3, r2, r3
 80036ea:	2b02      	cmp	r3, #2
 80036ec:	d901      	bls.n	80036f2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80036ee:	2303      	movs	r3, #3
 80036f0:	e332      	b.n	8003d58 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80036f2:	4b12      	ldr	r3, [pc, #72]	; (800373c <HAL_RCC_OscConfig+0x288>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f003 0304 	and.w	r3, r3, #4
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d0f0      	beq.n	80036e0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036fe:	f7fe f8e1 	bl	80018c4 <HAL_GetREVID>
 8003702:	4603      	mov	r3, r0
 8003704:	f241 0203 	movw	r2, #4099	; 0x1003
 8003708:	4293      	cmp	r3, r2
 800370a:	d819      	bhi.n	8003740 <HAL_RCC_OscConfig+0x28c>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	691b      	ldr	r3, [r3, #16]
 8003710:	2b40      	cmp	r3, #64	; 0x40
 8003712:	d108      	bne.n	8003726 <HAL_RCC_OscConfig+0x272>
 8003714:	4b09      	ldr	r3, [pc, #36]	; (800373c <HAL_RCC_OscConfig+0x288>)
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800371c:	4a07      	ldr	r2, [pc, #28]	; (800373c <HAL_RCC_OscConfig+0x288>)
 800371e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003722:	6053      	str	r3, [r2, #4]
 8003724:	e030      	b.n	8003788 <HAL_RCC_OscConfig+0x2d4>
 8003726:	4b05      	ldr	r3, [pc, #20]	; (800373c <HAL_RCC_OscConfig+0x288>)
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	691b      	ldr	r3, [r3, #16]
 8003732:	031b      	lsls	r3, r3, #12
 8003734:	4901      	ldr	r1, [pc, #4]	; (800373c <HAL_RCC_OscConfig+0x288>)
 8003736:	4313      	orrs	r3, r2
 8003738:	604b      	str	r3, [r1, #4]
 800373a:	e025      	b.n	8003788 <HAL_RCC_OscConfig+0x2d4>
 800373c:	58024400 	.word	0x58024400
 8003740:	4b9a      	ldr	r3, [pc, #616]	; (80039ac <HAL_RCC_OscConfig+0x4f8>)
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	691b      	ldr	r3, [r3, #16]
 800374c:	061b      	lsls	r3, r3, #24
 800374e:	4997      	ldr	r1, [pc, #604]	; (80039ac <HAL_RCC_OscConfig+0x4f8>)
 8003750:	4313      	orrs	r3, r2
 8003752:	604b      	str	r3, [r1, #4]
 8003754:	e018      	b.n	8003788 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003756:	4b95      	ldr	r3, [pc, #596]	; (80039ac <HAL_RCC_OscConfig+0x4f8>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a94      	ldr	r2, [pc, #592]	; (80039ac <HAL_RCC_OscConfig+0x4f8>)
 800375c:	f023 0301 	bic.w	r3, r3, #1
 8003760:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003762:	f7fe f87f 	bl	8001864 <HAL_GetTick>
 8003766:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003768:	e008      	b.n	800377c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800376a:	f7fe f87b 	bl	8001864 <HAL_GetTick>
 800376e:	4602      	mov	r2, r0
 8003770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003772:	1ad3      	subs	r3, r2, r3
 8003774:	2b02      	cmp	r3, #2
 8003776:	d901      	bls.n	800377c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8003778:	2303      	movs	r3, #3
 800377a:	e2ed      	b.n	8003d58 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800377c:	4b8b      	ldr	r3, [pc, #556]	; (80039ac <HAL_RCC_OscConfig+0x4f8>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f003 0304 	and.w	r3, r3, #4
 8003784:	2b00      	cmp	r3, #0
 8003786:	d1f0      	bne.n	800376a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f003 0310 	and.w	r3, r3, #16
 8003790:	2b00      	cmp	r3, #0
 8003792:	f000 80a9 	beq.w	80038e8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003796:	4b85      	ldr	r3, [pc, #532]	; (80039ac <HAL_RCC_OscConfig+0x4f8>)
 8003798:	691b      	ldr	r3, [r3, #16]
 800379a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800379e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80037a0:	4b82      	ldr	r3, [pc, #520]	; (80039ac <HAL_RCC_OscConfig+0x4f8>)
 80037a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037a4:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80037a6:	69bb      	ldr	r3, [r7, #24]
 80037a8:	2b08      	cmp	r3, #8
 80037aa:	d007      	beq.n	80037bc <HAL_RCC_OscConfig+0x308>
 80037ac:	69bb      	ldr	r3, [r7, #24]
 80037ae:	2b18      	cmp	r3, #24
 80037b0:	d13a      	bne.n	8003828 <HAL_RCC_OscConfig+0x374>
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	f003 0303 	and.w	r3, r3, #3
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	d135      	bne.n	8003828 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80037bc:	4b7b      	ldr	r3, [pc, #492]	; (80039ac <HAL_RCC_OscConfig+0x4f8>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d005      	beq.n	80037d4 <HAL_RCC_OscConfig+0x320>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	69db      	ldr	r3, [r3, #28]
 80037cc:	2b80      	cmp	r3, #128	; 0x80
 80037ce:	d001      	beq.n	80037d4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80037d0:	2301      	movs	r3, #1
 80037d2:	e2c1      	b.n	8003d58 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80037d4:	f7fe f876 	bl	80018c4 <HAL_GetREVID>
 80037d8:	4603      	mov	r3, r0
 80037da:	f241 0203 	movw	r2, #4099	; 0x1003
 80037de:	4293      	cmp	r3, r2
 80037e0:	d817      	bhi.n	8003812 <HAL_RCC_OscConfig+0x35e>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6a1b      	ldr	r3, [r3, #32]
 80037e6:	2b20      	cmp	r3, #32
 80037e8:	d108      	bne.n	80037fc <HAL_RCC_OscConfig+0x348>
 80037ea:	4b70      	ldr	r3, [pc, #448]	; (80039ac <HAL_RCC_OscConfig+0x4f8>)
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80037f2:	4a6e      	ldr	r2, [pc, #440]	; (80039ac <HAL_RCC_OscConfig+0x4f8>)
 80037f4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80037f8:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80037fa:	e075      	b.n	80038e8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80037fc:	4b6b      	ldr	r3, [pc, #428]	; (80039ac <HAL_RCC_OscConfig+0x4f8>)
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6a1b      	ldr	r3, [r3, #32]
 8003808:	069b      	lsls	r3, r3, #26
 800380a:	4968      	ldr	r1, [pc, #416]	; (80039ac <HAL_RCC_OscConfig+0x4f8>)
 800380c:	4313      	orrs	r3, r2
 800380e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003810:	e06a      	b.n	80038e8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003812:	4b66      	ldr	r3, [pc, #408]	; (80039ac <HAL_RCC_OscConfig+0x4f8>)
 8003814:	68db      	ldr	r3, [r3, #12]
 8003816:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6a1b      	ldr	r3, [r3, #32]
 800381e:	061b      	lsls	r3, r3, #24
 8003820:	4962      	ldr	r1, [pc, #392]	; (80039ac <HAL_RCC_OscConfig+0x4f8>)
 8003822:	4313      	orrs	r3, r2
 8003824:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003826:	e05f      	b.n	80038e8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	69db      	ldr	r3, [r3, #28]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d042      	beq.n	80038b6 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003830:	4b5e      	ldr	r3, [pc, #376]	; (80039ac <HAL_RCC_OscConfig+0x4f8>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a5d      	ldr	r2, [pc, #372]	; (80039ac <HAL_RCC_OscConfig+0x4f8>)
 8003836:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800383a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800383c:	f7fe f812 	bl	8001864 <HAL_GetTick>
 8003840:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003842:	e008      	b.n	8003856 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003844:	f7fe f80e 	bl	8001864 <HAL_GetTick>
 8003848:	4602      	mov	r2, r0
 800384a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800384c:	1ad3      	subs	r3, r2, r3
 800384e:	2b02      	cmp	r3, #2
 8003850:	d901      	bls.n	8003856 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8003852:	2303      	movs	r3, #3
 8003854:	e280      	b.n	8003d58 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003856:	4b55      	ldr	r3, [pc, #340]	; (80039ac <HAL_RCC_OscConfig+0x4f8>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800385e:	2b00      	cmp	r3, #0
 8003860:	d0f0      	beq.n	8003844 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003862:	f7fe f82f 	bl	80018c4 <HAL_GetREVID>
 8003866:	4603      	mov	r3, r0
 8003868:	f241 0203 	movw	r2, #4099	; 0x1003
 800386c:	4293      	cmp	r3, r2
 800386e:	d817      	bhi.n	80038a0 <HAL_RCC_OscConfig+0x3ec>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6a1b      	ldr	r3, [r3, #32]
 8003874:	2b20      	cmp	r3, #32
 8003876:	d108      	bne.n	800388a <HAL_RCC_OscConfig+0x3d6>
 8003878:	4b4c      	ldr	r3, [pc, #304]	; (80039ac <HAL_RCC_OscConfig+0x4f8>)
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003880:	4a4a      	ldr	r2, [pc, #296]	; (80039ac <HAL_RCC_OscConfig+0x4f8>)
 8003882:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003886:	6053      	str	r3, [r2, #4]
 8003888:	e02e      	b.n	80038e8 <HAL_RCC_OscConfig+0x434>
 800388a:	4b48      	ldr	r3, [pc, #288]	; (80039ac <HAL_RCC_OscConfig+0x4f8>)
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6a1b      	ldr	r3, [r3, #32]
 8003896:	069b      	lsls	r3, r3, #26
 8003898:	4944      	ldr	r1, [pc, #272]	; (80039ac <HAL_RCC_OscConfig+0x4f8>)
 800389a:	4313      	orrs	r3, r2
 800389c:	604b      	str	r3, [r1, #4]
 800389e:	e023      	b.n	80038e8 <HAL_RCC_OscConfig+0x434>
 80038a0:	4b42      	ldr	r3, [pc, #264]	; (80039ac <HAL_RCC_OscConfig+0x4f8>)
 80038a2:	68db      	ldr	r3, [r3, #12]
 80038a4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6a1b      	ldr	r3, [r3, #32]
 80038ac:	061b      	lsls	r3, r3, #24
 80038ae:	493f      	ldr	r1, [pc, #252]	; (80039ac <HAL_RCC_OscConfig+0x4f8>)
 80038b0:	4313      	orrs	r3, r2
 80038b2:	60cb      	str	r3, [r1, #12]
 80038b4:	e018      	b.n	80038e8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80038b6:	4b3d      	ldr	r3, [pc, #244]	; (80039ac <HAL_RCC_OscConfig+0x4f8>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a3c      	ldr	r2, [pc, #240]	; (80039ac <HAL_RCC_OscConfig+0x4f8>)
 80038bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80038c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038c2:	f7fd ffcf 	bl	8001864 <HAL_GetTick>
 80038c6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80038c8:	e008      	b.n	80038dc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80038ca:	f7fd ffcb 	bl	8001864 <HAL_GetTick>
 80038ce:	4602      	mov	r2, r0
 80038d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d2:	1ad3      	subs	r3, r2, r3
 80038d4:	2b02      	cmp	r3, #2
 80038d6:	d901      	bls.n	80038dc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80038d8:	2303      	movs	r3, #3
 80038da:	e23d      	b.n	8003d58 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80038dc:	4b33      	ldr	r3, [pc, #204]	; (80039ac <HAL_RCC_OscConfig+0x4f8>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d1f0      	bne.n	80038ca <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f003 0308 	and.w	r3, r3, #8
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d036      	beq.n	8003962 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	695b      	ldr	r3, [r3, #20]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d019      	beq.n	8003930 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038fc:	4b2b      	ldr	r3, [pc, #172]	; (80039ac <HAL_RCC_OscConfig+0x4f8>)
 80038fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003900:	4a2a      	ldr	r2, [pc, #168]	; (80039ac <HAL_RCC_OscConfig+0x4f8>)
 8003902:	f043 0301 	orr.w	r3, r3, #1
 8003906:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003908:	f7fd ffac 	bl	8001864 <HAL_GetTick>
 800390c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800390e:	e008      	b.n	8003922 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003910:	f7fd ffa8 	bl	8001864 <HAL_GetTick>
 8003914:	4602      	mov	r2, r0
 8003916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003918:	1ad3      	subs	r3, r2, r3
 800391a:	2b02      	cmp	r3, #2
 800391c:	d901      	bls.n	8003922 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800391e:	2303      	movs	r3, #3
 8003920:	e21a      	b.n	8003d58 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003922:	4b22      	ldr	r3, [pc, #136]	; (80039ac <HAL_RCC_OscConfig+0x4f8>)
 8003924:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003926:	f003 0302 	and.w	r3, r3, #2
 800392a:	2b00      	cmp	r3, #0
 800392c:	d0f0      	beq.n	8003910 <HAL_RCC_OscConfig+0x45c>
 800392e:	e018      	b.n	8003962 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003930:	4b1e      	ldr	r3, [pc, #120]	; (80039ac <HAL_RCC_OscConfig+0x4f8>)
 8003932:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003934:	4a1d      	ldr	r2, [pc, #116]	; (80039ac <HAL_RCC_OscConfig+0x4f8>)
 8003936:	f023 0301 	bic.w	r3, r3, #1
 800393a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800393c:	f7fd ff92 	bl	8001864 <HAL_GetTick>
 8003940:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003942:	e008      	b.n	8003956 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003944:	f7fd ff8e 	bl	8001864 <HAL_GetTick>
 8003948:	4602      	mov	r2, r0
 800394a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800394c:	1ad3      	subs	r3, r2, r3
 800394e:	2b02      	cmp	r3, #2
 8003950:	d901      	bls.n	8003956 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8003952:	2303      	movs	r3, #3
 8003954:	e200      	b.n	8003d58 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003956:	4b15      	ldr	r3, [pc, #84]	; (80039ac <HAL_RCC_OscConfig+0x4f8>)
 8003958:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800395a:	f003 0302 	and.w	r3, r3, #2
 800395e:	2b00      	cmp	r3, #0
 8003960:	d1f0      	bne.n	8003944 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f003 0320 	and.w	r3, r3, #32
 800396a:	2b00      	cmp	r3, #0
 800396c:	d039      	beq.n	80039e2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	699b      	ldr	r3, [r3, #24]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d01c      	beq.n	80039b0 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003976:	4b0d      	ldr	r3, [pc, #52]	; (80039ac <HAL_RCC_OscConfig+0x4f8>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a0c      	ldr	r2, [pc, #48]	; (80039ac <HAL_RCC_OscConfig+0x4f8>)
 800397c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003980:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003982:	f7fd ff6f 	bl	8001864 <HAL_GetTick>
 8003986:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003988:	e008      	b.n	800399c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800398a:	f7fd ff6b 	bl	8001864 <HAL_GetTick>
 800398e:	4602      	mov	r2, r0
 8003990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003992:	1ad3      	subs	r3, r2, r3
 8003994:	2b02      	cmp	r3, #2
 8003996:	d901      	bls.n	800399c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003998:	2303      	movs	r3, #3
 800399a:	e1dd      	b.n	8003d58 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800399c:	4b03      	ldr	r3, [pc, #12]	; (80039ac <HAL_RCC_OscConfig+0x4f8>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d0f0      	beq.n	800398a <HAL_RCC_OscConfig+0x4d6>
 80039a8:	e01b      	b.n	80039e2 <HAL_RCC_OscConfig+0x52e>
 80039aa:	bf00      	nop
 80039ac:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80039b0:	4b9b      	ldr	r3, [pc, #620]	; (8003c20 <HAL_RCC_OscConfig+0x76c>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a9a      	ldr	r2, [pc, #616]	; (8003c20 <HAL_RCC_OscConfig+0x76c>)
 80039b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80039ba:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80039bc:	f7fd ff52 	bl	8001864 <HAL_GetTick>
 80039c0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80039c2:	e008      	b.n	80039d6 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80039c4:	f7fd ff4e 	bl	8001864 <HAL_GetTick>
 80039c8:	4602      	mov	r2, r0
 80039ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039cc:	1ad3      	subs	r3, r2, r3
 80039ce:	2b02      	cmp	r3, #2
 80039d0:	d901      	bls.n	80039d6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80039d2:	2303      	movs	r3, #3
 80039d4:	e1c0      	b.n	8003d58 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80039d6:	4b92      	ldr	r3, [pc, #584]	; (8003c20 <HAL_RCC_OscConfig+0x76c>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d1f0      	bne.n	80039c4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f003 0304 	and.w	r3, r3, #4
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	f000 8081 	beq.w	8003af2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80039f0:	4b8c      	ldr	r3, [pc, #560]	; (8003c24 <HAL_RCC_OscConfig+0x770>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a8b      	ldr	r2, [pc, #556]	; (8003c24 <HAL_RCC_OscConfig+0x770>)
 80039f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039fa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80039fc:	f7fd ff32 	bl	8001864 <HAL_GetTick>
 8003a00:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a02:	e008      	b.n	8003a16 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a04:	f7fd ff2e 	bl	8001864 <HAL_GetTick>
 8003a08:	4602      	mov	r2, r0
 8003a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a0c:	1ad3      	subs	r3, r2, r3
 8003a0e:	2b64      	cmp	r3, #100	; 0x64
 8003a10:	d901      	bls.n	8003a16 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8003a12:	2303      	movs	r3, #3
 8003a14:	e1a0      	b.n	8003d58 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a16:	4b83      	ldr	r3, [pc, #524]	; (8003c24 <HAL_RCC_OscConfig+0x770>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d0f0      	beq.n	8003a04 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	2b01      	cmp	r3, #1
 8003a28:	d106      	bne.n	8003a38 <HAL_RCC_OscConfig+0x584>
 8003a2a:	4b7d      	ldr	r3, [pc, #500]	; (8003c20 <HAL_RCC_OscConfig+0x76c>)
 8003a2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a2e:	4a7c      	ldr	r2, [pc, #496]	; (8003c20 <HAL_RCC_OscConfig+0x76c>)
 8003a30:	f043 0301 	orr.w	r3, r3, #1
 8003a34:	6713      	str	r3, [r2, #112]	; 0x70
 8003a36:	e02d      	b.n	8003a94 <HAL_RCC_OscConfig+0x5e0>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d10c      	bne.n	8003a5a <HAL_RCC_OscConfig+0x5a6>
 8003a40:	4b77      	ldr	r3, [pc, #476]	; (8003c20 <HAL_RCC_OscConfig+0x76c>)
 8003a42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a44:	4a76      	ldr	r2, [pc, #472]	; (8003c20 <HAL_RCC_OscConfig+0x76c>)
 8003a46:	f023 0301 	bic.w	r3, r3, #1
 8003a4a:	6713      	str	r3, [r2, #112]	; 0x70
 8003a4c:	4b74      	ldr	r3, [pc, #464]	; (8003c20 <HAL_RCC_OscConfig+0x76c>)
 8003a4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a50:	4a73      	ldr	r2, [pc, #460]	; (8003c20 <HAL_RCC_OscConfig+0x76c>)
 8003a52:	f023 0304 	bic.w	r3, r3, #4
 8003a56:	6713      	str	r3, [r2, #112]	; 0x70
 8003a58:	e01c      	b.n	8003a94 <HAL_RCC_OscConfig+0x5e0>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	689b      	ldr	r3, [r3, #8]
 8003a5e:	2b05      	cmp	r3, #5
 8003a60:	d10c      	bne.n	8003a7c <HAL_RCC_OscConfig+0x5c8>
 8003a62:	4b6f      	ldr	r3, [pc, #444]	; (8003c20 <HAL_RCC_OscConfig+0x76c>)
 8003a64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a66:	4a6e      	ldr	r2, [pc, #440]	; (8003c20 <HAL_RCC_OscConfig+0x76c>)
 8003a68:	f043 0304 	orr.w	r3, r3, #4
 8003a6c:	6713      	str	r3, [r2, #112]	; 0x70
 8003a6e:	4b6c      	ldr	r3, [pc, #432]	; (8003c20 <HAL_RCC_OscConfig+0x76c>)
 8003a70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a72:	4a6b      	ldr	r2, [pc, #428]	; (8003c20 <HAL_RCC_OscConfig+0x76c>)
 8003a74:	f043 0301 	orr.w	r3, r3, #1
 8003a78:	6713      	str	r3, [r2, #112]	; 0x70
 8003a7a:	e00b      	b.n	8003a94 <HAL_RCC_OscConfig+0x5e0>
 8003a7c:	4b68      	ldr	r3, [pc, #416]	; (8003c20 <HAL_RCC_OscConfig+0x76c>)
 8003a7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a80:	4a67      	ldr	r2, [pc, #412]	; (8003c20 <HAL_RCC_OscConfig+0x76c>)
 8003a82:	f023 0301 	bic.w	r3, r3, #1
 8003a86:	6713      	str	r3, [r2, #112]	; 0x70
 8003a88:	4b65      	ldr	r3, [pc, #404]	; (8003c20 <HAL_RCC_OscConfig+0x76c>)
 8003a8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a8c:	4a64      	ldr	r2, [pc, #400]	; (8003c20 <HAL_RCC_OscConfig+0x76c>)
 8003a8e:	f023 0304 	bic.w	r3, r3, #4
 8003a92:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	689b      	ldr	r3, [r3, #8]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d015      	beq.n	8003ac8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a9c:	f7fd fee2 	bl	8001864 <HAL_GetTick>
 8003aa0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003aa2:	e00a      	b.n	8003aba <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003aa4:	f7fd fede 	bl	8001864 <HAL_GetTick>
 8003aa8:	4602      	mov	r2, r0
 8003aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aac:	1ad3      	subs	r3, r2, r3
 8003aae:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d901      	bls.n	8003aba <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8003ab6:	2303      	movs	r3, #3
 8003ab8:	e14e      	b.n	8003d58 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003aba:	4b59      	ldr	r3, [pc, #356]	; (8003c20 <HAL_RCC_OscConfig+0x76c>)
 8003abc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003abe:	f003 0302 	and.w	r3, r3, #2
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d0ee      	beq.n	8003aa4 <HAL_RCC_OscConfig+0x5f0>
 8003ac6:	e014      	b.n	8003af2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ac8:	f7fd fecc 	bl	8001864 <HAL_GetTick>
 8003acc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003ace:	e00a      	b.n	8003ae6 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ad0:	f7fd fec8 	bl	8001864 <HAL_GetTick>
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad8:	1ad3      	subs	r3, r2, r3
 8003ada:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d901      	bls.n	8003ae6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8003ae2:	2303      	movs	r3, #3
 8003ae4:	e138      	b.n	8003d58 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003ae6:	4b4e      	ldr	r3, [pc, #312]	; (8003c20 <HAL_RCC_OscConfig+0x76c>)
 8003ae8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aea:	f003 0302 	and.w	r3, r3, #2
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d1ee      	bne.n	8003ad0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	f000 812d 	beq.w	8003d56 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003afc:	4b48      	ldr	r3, [pc, #288]	; (8003c20 <HAL_RCC_OscConfig+0x76c>)
 8003afe:	691b      	ldr	r3, [r3, #16]
 8003b00:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003b04:	2b18      	cmp	r3, #24
 8003b06:	f000 80bd 	beq.w	8003c84 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b0e:	2b02      	cmp	r3, #2
 8003b10:	f040 809e 	bne.w	8003c50 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b14:	4b42      	ldr	r3, [pc, #264]	; (8003c20 <HAL_RCC_OscConfig+0x76c>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a41      	ldr	r2, [pc, #260]	; (8003c20 <HAL_RCC_OscConfig+0x76c>)
 8003b1a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b20:	f7fd fea0 	bl	8001864 <HAL_GetTick>
 8003b24:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003b26:	e008      	b.n	8003b3a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b28:	f7fd fe9c 	bl	8001864 <HAL_GetTick>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b30:	1ad3      	subs	r3, r2, r3
 8003b32:	2b02      	cmp	r3, #2
 8003b34:	d901      	bls.n	8003b3a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8003b36:	2303      	movs	r3, #3
 8003b38:	e10e      	b.n	8003d58 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003b3a:	4b39      	ldr	r3, [pc, #228]	; (8003c20 <HAL_RCC_OscConfig+0x76c>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d1f0      	bne.n	8003b28 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b46:	4b36      	ldr	r3, [pc, #216]	; (8003c20 <HAL_RCC_OscConfig+0x76c>)
 8003b48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b4a:	4b37      	ldr	r3, [pc, #220]	; (8003c28 <HAL_RCC_OscConfig+0x774>)
 8003b4c:	4013      	ands	r3, r2
 8003b4e:	687a      	ldr	r2, [r7, #4]
 8003b50:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003b52:	687a      	ldr	r2, [r7, #4]
 8003b54:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003b56:	0112      	lsls	r2, r2, #4
 8003b58:	430a      	orrs	r2, r1
 8003b5a:	4931      	ldr	r1, [pc, #196]	; (8003c20 <HAL_RCC_OscConfig+0x76c>)
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	628b      	str	r3, [r1, #40]	; 0x28
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b64:	3b01      	subs	r3, #1
 8003b66:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b6e:	3b01      	subs	r3, #1
 8003b70:	025b      	lsls	r3, r3, #9
 8003b72:	b29b      	uxth	r3, r3
 8003b74:	431a      	orrs	r2, r3
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b7a:	3b01      	subs	r3, #1
 8003b7c:	041b      	lsls	r3, r3, #16
 8003b7e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003b82:	431a      	orrs	r2, r3
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b88:	3b01      	subs	r3, #1
 8003b8a:	061b      	lsls	r3, r3, #24
 8003b8c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003b90:	4923      	ldr	r1, [pc, #140]	; (8003c20 <HAL_RCC_OscConfig+0x76c>)
 8003b92:	4313      	orrs	r3, r2
 8003b94:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003b96:	4b22      	ldr	r3, [pc, #136]	; (8003c20 <HAL_RCC_OscConfig+0x76c>)
 8003b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b9a:	4a21      	ldr	r2, [pc, #132]	; (8003c20 <HAL_RCC_OscConfig+0x76c>)
 8003b9c:	f023 0301 	bic.w	r3, r3, #1
 8003ba0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003ba2:	4b1f      	ldr	r3, [pc, #124]	; (8003c20 <HAL_RCC_OscConfig+0x76c>)
 8003ba4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ba6:	4b21      	ldr	r3, [pc, #132]	; (8003c2c <HAL_RCC_OscConfig+0x778>)
 8003ba8:	4013      	ands	r3, r2
 8003baa:	687a      	ldr	r2, [r7, #4]
 8003bac:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003bae:	00d2      	lsls	r2, r2, #3
 8003bb0:	491b      	ldr	r1, [pc, #108]	; (8003c20 <HAL_RCC_OscConfig+0x76c>)
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003bb6:	4b1a      	ldr	r3, [pc, #104]	; (8003c20 <HAL_RCC_OscConfig+0x76c>)
 8003bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bba:	f023 020c 	bic.w	r2, r3, #12
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc2:	4917      	ldr	r1, [pc, #92]	; (8003c20 <HAL_RCC_OscConfig+0x76c>)
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003bc8:	4b15      	ldr	r3, [pc, #84]	; (8003c20 <HAL_RCC_OscConfig+0x76c>)
 8003bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bcc:	f023 0202 	bic.w	r2, r3, #2
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bd4:	4912      	ldr	r1, [pc, #72]	; (8003c20 <HAL_RCC_OscConfig+0x76c>)
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003bda:	4b11      	ldr	r3, [pc, #68]	; (8003c20 <HAL_RCC_OscConfig+0x76c>)
 8003bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bde:	4a10      	ldr	r2, [pc, #64]	; (8003c20 <HAL_RCC_OscConfig+0x76c>)
 8003be0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003be4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003be6:	4b0e      	ldr	r3, [pc, #56]	; (8003c20 <HAL_RCC_OscConfig+0x76c>)
 8003be8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bea:	4a0d      	ldr	r2, [pc, #52]	; (8003c20 <HAL_RCC_OscConfig+0x76c>)
 8003bec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003bf0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003bf2:	4b0b      	ldr	r3, [pc, #44]	; (8003c20 <HAL_RCC_OscConfig+0x76c>)
 8003bf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bf6:	4a0a      	ldr	r2, [pc, #40]	; (8003c20 <HAL_RCC_OscConfig+0x76c>)
 8003bf8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003bfc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003bfe:	4b08      	ldr	r3, [pc, #32]	; (8003c20 <HAL_RCC_OscConfig+0x76c>)
 8003c00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c02:	4a07      	ldr	r2, [pc, #28]	; (8003c20 <HAL_RCC_OscConfig+0x76c>)
 8003c04:	f043 0301 	orr.w	r3, r3, #1
 8003c08:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c0a:	4b05      	ldr	r3, [pc, #20]	; (8003c20 <HAL_RCC_OscConfig+0x76c>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a04      	ldr	r2, [pc, #16]	; (8003c20 <HAL_RCC_OscConfig+0x76c>)
 8003c10:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c16:	f7fd fe25 	bl	8001864 <HAL_GetTick>
 8003c1a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003c1c:	e011      	b.n	8003c42 <HAL_RCC_OscConfig+0x78e>
 8003c1e:	bf00      	nop
 8003c20:	58024400 	.word	0x58024400
 8003c24:	58024800 	.word	0x58024800
 8003c28:	fffffc0c 	.word	0xfffffc0c
 8003c2c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c30:	f7fd fe18 	bl	8001864 <HAL_GetTick>
 8003c34:	4602      	mov	r2, r0
 8003c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c38:	1ad3      	subs	r3, r2, r3
 8003c3a:	2b02      	cmp	r3, #2
 8003c3c:	d901      	bls.n	8003c42 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8003c3e:	2303      	movs	r3, #3
 8003c40:	e08a      	b.n	8003d58 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003c42:	4b47      	ldr	r3, [pc, #284]	; (8003d60 <HAL_RCC_OscConfig+0x8ac>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d0f0      	beq.n	8003c30 <HAL_RCC_OscConfig+0x77c>
 8003c4e:	e082      	b.n	8003d56 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c50:	4b43      	ldr	r3, [pc, #268]	; (8003d60 <HAL_RCC_OscConfig+0x8ac>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a42      	ldr	r2, [pc, #264]	; (8003d60 <HAL_RCC_OscConfig+0x8ac>)
 8003c56:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c5c:	f7fd fe02 	bl	8001864 <HAL_GetTick>
 8003c60:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003c62:	e008      	b.n	8003c76 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c64:	f7fd fdfe 	bl	8001864 <HAL_GetTick>
 8003c68:	4602      	mov	r2, r0
 8003c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c6c:	1ad3      	subs	r3, r2, r3
 8003c6e:	2b02      	cmp	r3, #2
 8003c70:	d901      	bls.n	8003c76 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8003c72:	2303      	movs	r3, #3
 8003c74:	e070      	b.n	8003d58 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003c76:	4b3a      	ldr	r3, [pc, #232]	; (8003d60 <HAL_RCC_OscConfig+0x8ac>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d1f0      	bne.n	8003c64 <HAL_RCC_OscConfig+0x7b0>
 8003c82:	e068      	b.n	8003d56 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003c84:	4b36      	ldr	r3, [pc, #216]	; (8003d60 <HAL_RCC_OscConfig+0x8ac>)
 8003c86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c88:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003c8a:	4b35      	ldr	r3, [pc, #212]	; (8003d60 <HAL_RCC_OscConfig+0x8ac>)
 8003c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c8e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c94:	2b01      	cmp	r3, #1
 8003c96:	d031      	beq.n	8003cfc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c98:	693b      	ldr	r3, [r7, #16]
 8003c9a:	f003 0203 	and.w	r2, r3, #3
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ca2:	429a      	cmp	r2, r3
 8003ca4:	d12a      	bne.n	8003cfc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	091b      	lsrs	r3, r3, #4
 8003caa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cb2:	429a      	cmp	r2, r3
 8003cb4:	d122      	bne.n	8003cfc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cc0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003cc2:	429a      	cmp	r2, r3
 8003cc4:	d11a      	bne.n	8003cfc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	0a5b      	lsrs	r3, r3, #9
 8003cca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cd2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003cd4:	429a      	cmp	r2, r3
 8003cd6:	d111      	bne.n	8003cfc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	0c1b      	lsrs	r3, r3, #16
 8003cdc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ce4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003ce6:	429a      	cmp	r2, r3
 8003ce8:	d108      	bne.n	8003cfc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	0e1b      	lsrs	r3, r3, #24
 8003cee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cf6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003cf8:	429a      	cmp	r2, r3
 8003cfa:	d001      	beq.n	8003d00 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	e02b      	b.n	8003d58 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003d00:	4b17      	ldr	r3, [pc, #92]	; (8003d60 <HAL_RCC_OscConfig+0x8ac>)
 8003d02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d04:	08db      	lsrs	r3, r3, #3
 8003d06:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003d0a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d10:	693a      	ldr	r2, [r7, #16]
 8003d12:	429a      	cmp	r2, r3
 8003d14:	d01f      	beq.n	8003d56 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8003d16:	4b12      	ldr	r3, [pc, #72]	; (8003d60 <HAL_RCC_OscConfig+0x8ac>)
 8003d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d1a:	4a11      	ldr	r2, [pc, #68]	; (8003d60 <HAL_RCC_OscConfig+0x8ac>)
 8003d1c:	f023 0301 	bic.w	r3, r3, #1
 8003d20:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003d22:	f7fd fd9f 	bl	8001864 <HAL_GetTick>
 8003d26:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003d28:	bf00      	nop
 8003d2a:	f7fd fd9b 	bl	8001864 <HAL_GetTick>
 8003d2e:	4602      	mov	r2, r0
 8003d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d0f9      	beq.n	8003d2a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003d36:	4b0a      	ldr	r3, [pc, #40]	; (8003d60 <HAL_RCC_OscConfig+0x8ac>)
 8003d38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d3a:	4b0a      	ldr	r3, [pc, #40]	; (8003d64 <HAL_RCC_OscConfig+0x8b0>)
 8003d3c:	4013      	ands	r3, r2
 8003d3e:	687a      	ldr	r2, [r7, #4]
 8003d40:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003d42:	00d2      	lsls	r2, r2, #3
 8003d44:	4906      	ldr	r1, [pc, #24]	; (8003d60 <HAL_RCC_OscConfig+0x8ac>)
 8003d46:	4313      	orrs	r3, r2
 8003d48:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8003d4a:	4b05      	ldr	r3, [pc, #20]	; (8003d60 <HAL_RCC_OscConfig+0x8ac>)
 8003d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d4e:	4a04      	ldr	r2, [pc, #16]	; (8003d60 <HAL_RCC_OscConfig+0x8ac>)
 8003d50:	f043 0301 	orr.w	r3, r3, #1
 8003d54:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8003d56:	2300      	movs	r3, #0
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	3730      	adds	r7, #48	; 0x30
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bd80      	pop	{r7, pc}
 8003d60:	58024400 	.word	0x58024400
 8003d64:	ffff0007 	.word	0xffff0007

08003d68 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b086      	sub	sp, #24
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
 8003d70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d101      	bne.n	8003d7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	e19c      	b.n	80040b6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003d7c:	4b8a      	ldr	r3, [pc, #552]	; (8003fa8 <HAL_RCC_ClockConfig+0x240>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f003 030f 	and.w	r3, r3, #15
 8003d84:	683a      	ldr	r2, [r7, #0]
 8003d86:	429a      	cmp	r2, r3
 8003d88:	d910      	bls.n	8003dac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d8a:	4b87      	ldr	r3, [pc, #540]	; (8003fa8 <HAL_RCC_ClockConfig+0x240>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f023 020f 	bic.w	r2, r3, #15
 8003d92:	4985      	ldr	r1, [pc, #532]	; (8003fa8 <HAL_RCC_ClockConfig+0x240>)
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	4313      	orrs	r3, r2
 8003d98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d9a:	4b83      	ldr	r3, [pc, #524]	; (8003fa8 <HAL_RCC_ClockConfig+0x240>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f003 030f 	and.w	r3, r3, #15
 8003da2:	683a      	ldr	r2, [r7, #0]
 8003da4:	429a      	cmp	r2, r3
 8003da6:	d001      	beq.n	8003dac <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003da8:	2301      	movs	r3, #1
 8003daa:	e184      	b.n	80040b6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f003 0304 	and.w	r3, r3, #4
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d010      	beq.n	8003dda <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	691a      	ldr	r2, [r3, #16]
 8003dbc:	4b7b      	ldr	r3, [pc, #492]	; (8003fac <HAL_RCC_ClockConfig+0x244>)
 8003dbe:	699b      	ldr	r3, [r3, #24]
 8003dc0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003dc4:	429a      	cmp	r2, r3
 8003dc6:	d908      	bls.n	8003dda <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003dc8:	4b78      	ldr	r3, [pc, #480]	; (8003fac <HAL_RCC_ClockConfig+0x244>)
 8003dca:	699b      	ldr	r3, [r3, #24]
 8003dcc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	691b      	ldr	r3, [r3, #16]
 8003dd4:	4975      	ldr	r1, [pc, #468]	; (8003fac <HAL_RCC_ClockConfig+0x244>)
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f003 0308 	and.w	r3, r3, #8
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d010      	beq.n	8003e08 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	695a      	ldr	r2, [r3, #20]
 8003dea:	4b70      	ldr	r3, [pc, #448]	; (8003fac <HAL_RCC_ClockConfig+0x244>)
 8003dec:	69db      	ldr	r3, [r3, #28]
 8003dee:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003df2:	429a      	cmp	r2, r3
 8003df4:	d908      	bls.n	8003e08 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003df6:	4b6d      	ldr	r3, [pc, #436]	; (8003fac <HAL_RCC_ClockConfig+0x244>)
 8003df8:	69db      	ldr	r3, [r3, #28]
 8003dfa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	695b      	ldr	r3, [r3, #20]
 8003e02:	496a      	ldr	r1, [pc, #424]	; (8003fac <HAL_RCC_ClockConfig+0x244>)
 8003e04:	4313      	orrs	r3, r2
 8003e06:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f003 0310 	and.w	r3, r3, #16
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d010      	beq.n	8003e36 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	699a      	ldr	r2, [r3, #24]
 8003e18:	4b64      	ldr	r3, [pc, #400]	; (8003fac <HAL_RCC_ClockConfig+0x244>)
 8003e1a:	69db      	ldr	r3, [r3, #28]
 8003e1c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003e20:	429a      	cmp	r2, r3
 8003e22:	d908      	bls.n	8003e36 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003e24:	4b61      	ldr	r3, [pc, #388]	; (8003fac <HAL_RCC_ClockConfig+0x244>)
 8003e26:	69db      	ldr	r3, [r3, #28]
 8003e28:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	699b      	ldr	r3, [r3, #24]
 8003e30:	495e      	ldr	r1, [pc, #376]	; (8003fac <HAL_RCC_ClockConfig+0x244>)
 8003e32:	4313      	orrs	r3, r2
 8003e34:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f003 0320 	and.w	r3, r3, #32
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d010      	beq.n	8003e64 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	69da      	ldr	r2, [r3, #28]
 8003e46:	4b59      	ldr	r3, [pc, #356]	; (8003fac <HAL_RCC_ClockConfig+0x244>)
 8003e48:	6a1b      	ldr	r3, [r3, #32]
 8003e4a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003e4e:	429a      	cmp	r2, r3
 8003e50:	d908      	bls.n	8003e64 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003e52:	4b56      	ldr	r3, [pc, #344]	; (8003fac <HAL_RCC_ClockConfig+0x244>)
 8003e54:	6a1b      	ldr	r3, [r3, #32]
 8003e56:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	69db      	ldr	r3, [r3, #28]
 8003e5e:	4953      	ldr	r1, [pc, #332]	; (8003fac <HAL_RCC_ClockConfig+0x244>)
 8003e60:	4313      	orrs	r3, r2
 8003e62:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f003 0302 	and.w	r3, r3, #2
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d010      	beq.n	8003e92 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	68da      	ldr	r2, [r3, #12]
 8003e74:	4b4d      	ldr	r3, [pc, #308]	; (8003fac <HAL_RCC_ClockConfig+0x244>)
 8003e76:	699b      	ldr	r3, [r3, #24]
 8003e78:	f003 030f 	and.w	r3, r3, #15
 8003e7c:	429a      	cmp	r2, r3
 8003e7e:	d908      	bls.n	8003e92 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e80:	4b4a      	ldr	r3, [pc, #296]	; (8003fac <HAL_RCC_ClockConfig+0x244>)
 8003e82:	699b      	ldr	r3, [r3, #24]
 8003e84:	f023 020f 	bic.w	r2, r3, #15
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	68db      	ldr	r3, [r3, #12]
 8003e8c:	4947      	ldr	r1, [pc, #284]	; (8003fac <HAL_RCC_ClockConfig+0x244>)
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f003 0301 	and.w	r3, r3, #1
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d055      	beq.n	8003f4a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003e9e:	4b43      	ldr	r3, [pc, #268]	; (8003fac <HAL_RCC_ClockConfig+0x244>)
 8003ea0:	699b      	ldr	r3, [r3, #24]
 8003ea2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	689b      	ldr	r3, [r3, #8]
 8003eaa:	4940      	ldr	r1, [pc, #256]	; (8003fac <HAL_RCC_ClockConfig+0x244>)
 8003eac:	4313      	orrs	r3, r2
 8003eae:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	2b02      	cmp	r3, #2
 8003eb6:	d107      	bne.n	8003ec8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003eb8:	4b3c      	ldr	r3, [pc, #240]	; (8003fac <HAL_RCC_ClockConfig+0x244>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d121      	bne.n	8003f08 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	e0f6      	b.n	80040b6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	2b03      	cmp	r3, #3
 8003ece:	d107      	bne.n	8003ee0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003ed0:	4b36      	ldr	r3, [pc, #216]	; (8003fac <HAL_RCC_ClockConfig+0x244>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d115      	bne.n	8003f08 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003edc:	2301      	movs	r3, #1
 8003ede:	e0ea      	b.n	80040b6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	2b01      	cmp	r3, #1
 8003ee6:	d107      	bne.n	8003ef8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003ee8:	4b30      	ldr	r3, [pc, #192]	; (8003fac <HAL_RCC_ClockConfig+0x244>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d109      	bne.n	8003f08 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	e0de      	b.n	80040b6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003ef8:	4b2c      	ldr	r3, [pc, #176]	; (8003fac <HAL_RCC_ClockConfig+0x244>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f003 0304 	and.w	r3, r3, #4
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d101      	bne.n	8003f08 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003f04:	2301      	movs	r3, #1
 8003f06:	e0d6      	b.n	80040b6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003f08:	4b28      	ldr	r3, [pc, #160]	; (8003fac <HAL_RCC_ClockConfig+0x244>)
 8003f0a:	691b      	ldr	r3, [r3, #16]
 8003f0c:	f023 0207 	bic.w	r2, r3, #7
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	4925      	ldr	r1, [pc, #148]	; (8003fac <HAL_RCC_ClockConfig+0x244>)
 8003f16:	4313      	orrs	r3, r2
 8003f18:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f1a:	f7fd fca3 	bl	8001864 <HAL_GetTick>
 8003f1e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f20:	e00a      	b.n	8003f38 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f22:	f7fd fc9f 	bl	8001864 <HAL_GetTick>
 8003f26:	4602      	mov	r2, r0
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	1ad3      	subs	r3, r2, r3
 8003f2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d901      	bls.n	8003f38 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003f34:	2303      	movs	r3, #3
 8003f36:	e0be      	b.n	80040b6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f38:	4b1c      	ldr	r3, [pc, #112]	; (8003fac <HAL_RCC_ClockConfig+0x244>)
 8003f3a:	691b      	ldr	r3, [r3, #16]
 8003f3c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	00db      	lsls	r3, r3, #3
 8003f46:	429a      	cmp	r2, r3
 8003f48:	d1eb      	bne.n	8003f22 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f003 0302 	and.w	r3, r3, #2
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d010      	beq.n	8003f78 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	68da      	ldr	r2, [r3, #12]
 8003f5a:	4b14      	ldr	r3, [pc, #80]	; (8003fac <HAL_RCC_ClockConfig+0x244>)
 8003f5c:	699b      	ldr	r3, [r3, #24]
 8003f5e:	f003 030f 	and.w	r3, r3, #15
 8003f62:	429a      	cmp	r2, r3
 8003f64:	d208      	bcs.n	8003f78 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f66:	4b11      	ldr	r3, [pc, #68]	; (8003fac <HAL_RCC_ClockConfig+0x244>)
 8003f68:	699b      	ldr	r3, [r3, #24]
 8003f6a:	f023 020f 	bic.w	r2, r3, #15
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	68db      	ldr	r3, [r3, #12]
 8003f72:	490e      	ldr	r1, [pc, #56]	; (8003fac <HAL_RCC_ClockConfig+0x244>)
 8003f74:	4313      	orrs	r3, r2
 8003f76:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003f78:	4b0b      	ldr	r3, [pc, #44]	; (8003fa8 <HAL_RCC_ClockConfig+0x240>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f003 030f 	and.w	r3, r3, #15
 8003f80:	683a      	ldr	r2, [r7, #0]
 8003f82:	429a      	cmp	r2, r3
 8003f84:	d214      	bcs.n	8003fb0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f86:	4b08      	ldr	r3, [pc, #32]	; (8003fa8 <HAL_RCC_ClockConfig+0x240>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f023 020f 	bic.w	r2, r3, #15
 8003f8e:	4906      	ldr	r1, [pc, #24]	; (8003fa8 <HAL_RCC_ClockConfig+0x240>)
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	4313      	orrs	r3, r2
 8003f94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f96:	4b04      	ldr	r3, [pc, #16]	; (8003fa8 <HAL_RCC_ClockConfig+0x240>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f003 030f 	and.w	r3, r3, #15
 8003f9e:	683a      	ldr	r2, [r7, #0]
 8003fa0:	429a      	cmp	r2, r3
 8003fa2:	d005      	beq.n	8003fb0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	e086      	b.n	80040b6 <HAL_RCC_ClockConfig+0x34e>
 8003fa8:	52002000 	.word	0x52002000
 8003fac:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f003 0304 	and.w	r3, r3, #4
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d010      	beq.n	8003fde <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	691a      	ldr	r2, [r3, #16]
 8003fc0:	4b3f      	ldr	r3, [pc, #252]	; (80040c0 <HAL_RCC_ClockConfig+0x358>)
 8003fc2:	699b      	ldr	r3, [r3, #24]
 8003fc4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	d208      	bcs.n	8003fde <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003fcc:	4b3c      	ldr	r3, [pc, #240]	; (80040c0 <HAL_RCC_ClockConfig+0x358>)
 8003fce:	699b      	ldr	r3, [r3, #24]
 8003fd0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	691b      	ldr	r3, [r3, #16]
 8003fd8:	4939      	ldr	r1, [pc, #228]	; (80040c0 <HAL_RCC_ClockConfig+0x358>)
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f003 0308 	and.w	r3, r3, #8
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d010      	beq.n	800400c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	695a      	ldr	r2, [r3, #20]
 8003fee:	4b34      	ldr	r3, [pc, #208]	; (80040c0 <HAL_RCC_ClockConfig+0x358>)
 8003ff0:	69db      	ldr	r3, [r3, #28]
 8003ff2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003ff6:	429a      	cmp	r2, r3
 8003ff8:	d208      	bcs.n	800400c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003ffa:	4b31      	ldr	r3, [pc, #196]	; (80040c0 <HAL_RCC_ClockConfig+0x358>)
 8003ffc:	69db      	ldr	r3, [r3, #28]
 8003ffe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	695b      	ldr	r3, [r3, #20]
 8004006:	492e      	ldr	r1, [pc, #184]	; (80040c0 <HAL_RCC_ClockConfig+0x358>)
 8004008:	4313      	orrs	r3, r2
 800400a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f003 0310 	and.w	r3, r3, #16
 8004014:	2b00      	cmp	r3, #0
 8004016:	d010      	beq.n	800403a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	699a      	ldr	r2, [r3, #24]
 800401c:	4b28      	ldr	r3, [pc, #160]	; (80040c0 <HAL_RCC_ClockConfig+0x358>)
 800401e:	69db      	ldr	r3, [r3, #28]
 8004020:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004024:	429a      	cmp	r2, r3
 8004026:	d208      	bcs.n	800403a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004028:	4b25      	ldr	r3, [pc, #148]	; (80040c0 <HAL_RCC_ClockConfig+0x358>)
 800402a:	69db      	ldr	r3, [r3, #28]
 800402c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	699b      	ldr	r3, [r3, #24]
 8004034:	4922      	ldr	r1, [pc, #136]	; (80040c0 <HAL_RCC_ClockConfig+0x358>)
 8004036:	4313      	orrs	r3, r2
 8004038:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f003 0320 	and.w	r3, r3, #32
 8004042:	2b00      	cmp	r3, #0
 8004044:	d010      	beq.n	8004068 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	69da      	ldr	r2, [r3, #28]
 800404a:	4b1d      	ldr	r3, [pc, #116]	; (80040c0 <HAL_RCC_ClockConfig+0x358>)
 800404c:	6a1b      	ldr	r3, [r3, #32]
 800404e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004052:	429a      	cmp	r2, r3
 8004054:	d208      	bcs.n	8004068 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004056:	4b1a      	ldr	r3, [pc, #104]	; (80040c0 <HAL_RCC_ClockConfig+0x358>)
 8004058:	6a1b      	ldr	r3, [r3, #32]
 800405a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	69db      	ldr	r3, [r3, #28]
 8004062:	4917      	ldr	r1, [pc, #92]	; (80040c0 <HAL_RCC_ClockConfig+0x358>)
 8004064:	4313      	orrs	r3, r2
 8004066:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004068:	f000 f834 	bl	80040d4 <HAL_RCC_GetSysClockFreq>
 800406c:	4602      	mov	r2, r0
 800406e:	4b14      	ldr	r3, [pc, #80]	; (80040c0 <HAL_RCC_ClockConfig+0x358>)
 8004070:	699b      	ldr	r3, [r3, #24]
 8004072:	0a1b      	lsrs	r3, r3, #8
 8004074:	f003 030f 	and.w	r3, r3, #15
 8004078:	4912      	ldr	r1, [pc, #72]	; (80040c4 <HAL_RCC_ClockConfig+0x35c>)
 800407a:	5ccb      	ldrb	r3, [r1, r3]
 800407c:	f003 031f 	and.w	r3, r3, #31
 8004080:	fa22 f303 	lsr.w	r3, r2, r3
 8004084:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004086:	4b0e      	ldr	r3, [pc, #56]	; (80040c0 <HAL_RCC_ClockConfig+0x358>)
 8004088:	699b      	ldr	r3, [r3, #24]
 800408a:	f003 030f 	and.w	r3, r3, #15
 800408e:	4a0d      	ldr	r2, [pc, #52]	; (80040c4 <HAL_RCC_ClockConfig+0x35c>)
 8004090:	5cd3      	ldrb	r3, [r2, r3]
 8004092:	f003 031f 	and.w	r3, r3, #31
 8004096:	693a      	ldr	r2, [r7, #16]
 8004098:	fa22 f303 	lsr.w	r3, r2, r3
 800409c:	4a0a      	ldr	r2, [pc, #40]	; (80040c8 <HAL_RCC_ClockConfig+0x360>)
 800409e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80040a0:	4a0a      	ldr	r2, [pc, #40]	; (80040cc <HAL_RCC_ClockConfig+0x364>)
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80040a6:	4b0a      	ldr	r3, [pc, #40]	; (80040d0 <HAL_RCC_ClockConfig+0x368>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4618      	mov	r0, r3
 80040ac:	f7fd f988 	bl	80013c0 <HAL_InitTick>
 80040b0:	4603      	mov	r3, r0
 80040b2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80040b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80040b6:	4618      	mov	r0, r3
 80040b8:	3718      	adds	r7, #24
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}
 80040be:	bf00      	nop
 80040c0:	58024400 	.word	0x58024400
 80040c4:	0800f83c 	.word	0x0800f83c
 80040c8:	2400000c 	.word	0x2400000c
 80040cc:	24000008 	.word	0x24000008
 80040d0:	24000010 	.word	0x24000010

080040d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040d4:	b480      	push	{r7}
 80040d6:	b089      	sub	sp, #36	; 0x24
 80040d8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80040da:	4bb3      	ldr	r3, [pc, #716]	; (80043a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80040dc:	691b      	ldr	r3, [r3, #16]
 80040de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80040e2:	2b18      	cmp	r3, #24
 80040e4:	f200 8155 	bhi.w	8004392 <HAL_RCC_GetSysClockFreq+0x2be>
 80040e8:	a201      	add	r2, pc, #4	; (adr r2, 80040f0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80040ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040ee:	bf00      	nop
 80040f0:	08004155 	.word	0x08004155
 80040f4:	08004393 	.word	0x08004393
 80040f8:	08004393 	.word	0x08004393
 80040fc:	08004393 	.word	0x08004393
 8004100:	08004393 	.word	0x08004393
 8004104:	08004393 	.word	0x08004393
 8004108:	08004393 	.word	0x08004393
 800410c:	08004393 	.word	0x08004393
 8004110:	0800417b 	.word	0x0800417b
 8004114:	08004393 	.word	0x08004393
 8004118:	08004393 	.word	0x08004393
 800411c:	08004393 	.word	0x08004393
 8004120:	08004393 	.word	0x08004393
 8004124:	08004393 	.word	0x08004393
 8004128:	08004393 	.word	0x08004393
 800412c:	08004393 	.word	0x08004393
 8004130:	08004181 	.word	0x08004181
 8004134:	08004393 	.word	0x08004393
 8004138:	08004393 	.word	0x08004393
 800413c:	08004393 	.word	0x08004393
 8004140:	08004393 	.word	0x08004393
 8004144:	08004393 	.word	0x08004393
 8004148:	08004393 	.word	0x08004393
 800414c:	08004393 	.word	0x08004393
 8004150:	08004187 	.word	0x08004187
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004154:	4b94      	ldr	r3, [pc, #592]	; (80043a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f003 0320 	and.w	r3, r3, #32
 800415c:	2b00      	cmp	r3, #0
 800415e:	d009      	beq.n	8004174 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004160:	4b91      	ldr	r3, [pc, #580]	; (80043a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	08db      	lsrs	r3, r3, #3
 8004166:	f003 0303 	and.w	r3, r3, #3
 800416a:	4a90      	ldr	r2, [pc, #576]	; (80043ac <HAL_RCC_GetSysClockFreq+0x2d8>)
 800416c:	fa22 f303 	lsr.w	r3, r2, r3
 8004170:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8004172:	e111      	b.n	8004398 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004174:	4b8d      	ldr	r3, [pc, #564]	; (80043ac <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004176:	61bb      	str	r3, [r7, #24]
      break;
 8004178:	e10e      	b.n	8004398 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800417a:	4b8d      	ldr	r3, [pc, #564]	; (80043b0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800417c:	61bb      	str	r3, [r7, #24]
      break;
 800417e:	e10b      	b.n	8004398 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004180:	4b8c      	ldr	r3, [pc, #560]	; (80043b4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004182:	61bb      	str	r3, [r7, #24]
      break;
 8004184:	e108      	b.n	8004398 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004186:	4b88      	ldr	r3, [pc, #544]	; (80043a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800418a:	f003 0303 	and.w	r3, r3, #3
 800418e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004190:	4b85      	ldr	r3, [pc, #532]	; (80043a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004194:	091b      	lsrs	r3, r3, #4
 8004196:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800419a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800419c:	4b82      	ldr	r3, [pc, #520]	; (80043a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800419e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041a0:	f003 0301 	and.w	r3, r3, #1
 80041a4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80041a6:	4b80      	ldr	r3, [pc, #512]	; (80043a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80041a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041aa:	08db      	lsrs	r3, r3, #3
 80041ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80041b0:	68fa      	ldr	r2, [r7, #12]
 80041b2:	fb02 f303 	mul.w	r3, r2, r3
 80041b6:	ee07 3a90 	vmov	s15, r3
 80041ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041be:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	f000 80e1 	beq.w	800438c <HAL_RCC_GetSysClockFreq+0x2b8>
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	2b02      	cmp	r3, #2
 80041ce:	f000 8083 	beq.w	80042d8 <HAL_RCC_GetSysClockFreq+0x204>
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	2b02      	cmp	r3, #2
 80041d6:	f200 80a1 	bhi.w	800431c <HAL_RCC_GetSysClockFreq+0x248>
 80041da:	697b      	ldr	r3, [r7, #20]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d003      	beq.n	80041e8 <HAL_RCC_GetSysClockFreq+0x114>
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	2b01      	cmp	r3, #1
 80041e4:	d056      	beq.n	8004294 <HAL_RCC_GetSysClockFreq+0x1c0>
 80041e6:	e099      	b.n	800431c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80041e8:	4b6f      	ldr	r3, [pc, #444]	; (80043a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f003 0320 	and.w	r3, r3, #32
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d02d      	beq.n	8004250 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80041f4:	4b6c      	ldr	r3, [pc, #432]	; (80043a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	08db      	lsrs	r3, r3, #3
 80041fa:	f003 0303 	and.w	r3, r3, #3
 80041fe:	4a6b      	ldr	r2, [pc, #428]	; (80043ac <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004200:	fa22 f303 	lsr.w	r3, r2, r3
 8004204:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	ee07 3a90 	vmov	s15, r3
 800420c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	ee07 3a90 	vmov	s15, r3
 8004216:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800421a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800421e:	4b62      	ldr	r3, [pc, #392]	; (80043a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004222:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004226:	ee07 3a90 	vmov	s15, r3
 800422a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800422e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004232:	eddf 5a61 	vldr	s11, [pc, #388]	; 80043b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004236:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800423a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800423e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004242:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004246:	ee67 7a27 	vmul.f32	s15, s14, s15
 800424a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800424e:	e087      	b.n	8004360 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004250:	693b      	ldr	r3, [r7, #16]
 8004252:	ee07 3a90 	vmov	s15, r3
 8004256:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800425a:	eddf 6a58 	vldr	s13, [pc, #352]	; 80043bc <HAL_RCC_GetSysClockFreq+0x2e8>
 800425e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004262:	4b51      	ldr	r3, [pc, #324]	; (80043a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004266:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800426a:	ee07 3a90 	vmov	s15, r3
 800426e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004272:	ed97 6a02 	vldr	s12, [r7, #8]
 8004276:	eddf 5a50 	vldr	s11, [pc, #320]	; 80043b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800427a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800427e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004282:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004286:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800428a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800428e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004292:	e065      	b.n	8004360 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004294:	693b      	ldr	r3, [r7, #16]
 8004296:	ee07 3a90 	vmov	s15, r3
 800429a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800429e:	eddf 6a48 	vldr	s13, [pc, #288]	; 80043c0 <HAL_RCC_GetSysClockFreq+0x2ec>
 80042a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80042a6:	4b40      	ldr	r3, [pc, #256]	; (80043a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042ae:	ee07 3a90 	vmov	s15, r3
 80042b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80042ba:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80043b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80042be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80042c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80042c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80042ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80042ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042d2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80042d6:	e043      	b.n	8004360 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80042d8:	693b      	ldr	r3, [r7, #16]
 80042da:	ee07 3a90 	vmov	s15, r3
 80042de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042e2:	eddf 6a38 	vldr	s13, [pc, #224]	; 80043c4 <HAL_RCC_GetSysClockFreq+0x2f0>
 80042e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80042ea:	4b2f      	ldr	r3, [pc, #188]	; (80043a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042f2:	ee07 3a90 	vmov	s15, r3
 80042f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80042fe:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80043b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004302:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004306:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800430a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800430e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004312:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004316:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800431a:	e021      	b.n	8004360 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	ee07 3a90 	vmov	s15, r3
 8004322:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004326:	eddf 6a26 	vldr	s13, [pc, #152]	; 80043c0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800432a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800432e:	4b1e      	ldr	r3, [pc, #120]	; (80043a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004332:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004336:	ee07 3a90 	vmov	s15, r3
 800433a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800433e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004342:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80043b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004346:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800434a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800434e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004352:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004356:	ee67 7a27 	vmul.f32	s15, s14, s15
 800435a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800435e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004360:	4b11      	ldr	r3, [pc, #68]	; (80043a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004364:	0a5b      	lsrs	r3, r3, #9
 8004366:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800436a:	3301      	adds	r3, #1
 800436c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	ee07 3a90 	vmov	s15, r3
 8004374:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004378:	edd7 6a07 	vldr	s13, [r7, #28]
 800437c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004380:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004384:	ee17 3a90 	vmov	r3, s15
 8004388:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800438a:	e005      	b.n	8004398 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800438c:	2300      	movs	r3, #0
 800438e:	61bb      	str	r3, [r7, #24]
      break;
 8004390:	e002      	b.n	8004398 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8004392:	4b07      	ldr	r3, [pc, #28]	; (80043b0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004394:	61bb      	str	r3, [r7, #24]
      break;
 8004396:	bf00      	nop
  }

  return sysclockfreq;
 8004398:	69bb      	ldr	r3, [r7, #24]
}
 800439a:	4618      	mov	r0, r3
 800439c:	3724      	adds	r7, #36	; 0x24
 800439e:	46bd      	mov	sp, r7
 80043a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a4:	4770      	bx	lr
 80043a6:	bf00      	nop
 80043a8:	58024400 	.word	0x58024400
 80043ac:	03d09000 	.word	0x03d09000
 80043b0:	003d0900 	.word	0x003d0900
 80043b4:	017d7840 	.word	0x017d7840
 80043b8:	46000000 	.word	0x46000000
 80043bc:	4c742400 	.word	0x4c742400
 80043c0:	4a742400 	.word	0x4a742400
 80043c4:	4bbebc20 	.word	0x4bbebc20

080043c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b082      	sub	sp, #8
 80043cc:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80043ce:	f7ff fe81 	bl	80040d4 <HAL_RCC_GetSysClockFreq>
 80043d2:	4602      	mov	r2, r0
 80043d4:	4b10      	ldr	r3, [pc, #64]	; (8004418 <HAL_RCC_GetHCLKFreq+0x50>)
 80043d6:	699b      	ldr	r3, [r3, #24]
 80043d8:	0a1b      	lsrs	r3, r3, #8
 80043da:	f003 030f 	and.w	r3, r3, #15
 80043de:	490f      	ldr	r1, [pc, #60]	; (800441c <HAL_RCC_GetHCLKFreq+0x54>)
 80043e0:	5ccb      	ldrb	r3, [r1, r3]
 80043e2:	f003 031f 	and.w	r3, r3, #31
 80043e6:	fa22 f303 	lsr.w	r3, r2, r3
 80043ea:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80043ec:	4b0a      	ldr	r3, [pc, #40]	; (8004418 <HAL_RCC_GetHCLKFreq+0x50>)
 80043ee:	699b      	ldr	r3, [r3, #24]
 80043f0:	f003 030f 	and.w	r3, r3, #15
 80043f4:	4a09      	ldr	r2, [pc, #36]	; (800441c <HAL_RCC_GetHCLKFreq+0x54>)
 80043f6:	5cd3      	ldrb	r3, [r2, r3]
 80043f8:	f003 031f 	and.w	r3, r3, #31
 80043fc:	687a      	ldr	r2, [r7, #4]
 80043fe:	fa22 f303 	lsr.w	r3, r2, r3
 8004402:	4a07      	ldr	r2, [pc, #28]	; (8004420 <HAL_RCC_GetHCLKFreq+0x58>)
 8004404:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004406:	4a07      	ldr	r2, [pc, #28]	; (8004424 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800440c:	4b04      	ldr	r3, [pc, #16]	; (8004420 <HAL_RCC_GetHCLKFreq+0x58>)
 800440e:	681b      	ldr	r3, [r3, #0]
}
 8004410:	4618      	mov	r0, r3
 8004412:	3708      	adds	r7, #8
 8004414:	46bd      	mov	sp, r7
 8004416:	bd80      	pop	{r7, pc}
 8004418:	58024400 	.word	0x58024400
 800441c:	0800f83c 	.word	0x0800f83c
 8004420:	2400000c 	.word	0x2400000c
 8004424:	24000008 	.word	0x24000008

08004428 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800442c:	f7ff ffcc 	bl	80043c8 <HAL_RCC_GetHCLKFreq>
 8004430:	4602      	mov	r2, r0
 8004432:	4b06      	ldr	r3, [pc, #24]	; (800444c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004434:	69db      	ldr	r3, [r3, #28]
 8004436:	091b      	lsrs	r3, r3, #4
 8004438:	f003 0307 	and.w	r3, r3, #7
 800443c:	4904      	ldr	r1, [pc, #16]	; (8004450 <HAL_RCC_GetPCLK1Freq+0x28>)
 800443e:	5ccb      	ldrb	r3, [r1, r3]
 8004440:	f003 031f 	and.w	r3, r3, #31
 8004444:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004448:	4618      	mov	r0, r3
 800444a:	bd80      	pop	{r7, pc}
 800444c:	58024400 	.word	0x58024400
 8004450:	0800f83c 	.word	0x0800f83c

08004454 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004458:	f7ff ffb6 	bl	80043c8 <HAL_RCC_GetHCLKFreq>
 800445c:	4602      	mov	r2, r0
 800445e:	4b06      	ldr	r3, [pc, #24]	; (8004478 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004460:	69db      	ldr	r3, [r3, #28]
 8004462:	0a1b      	lsrs	r3, r3, #8
 8004464:	f003 0307 	and.w	r3, r3, #7
 8004468:	4904      	ldr	r1, [pc, #16]	; (800447c <HAL_RCC_GetPCLK2Freq+0x28>)
 800446a:	5ccb      	ldrb	r3, [r1, r3]
 800446c:	f003 031f 	and.w	r3, r3, #31
 8004470:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004474:	4618      	mov	r0, r3
 8004476:	bd80      	pop	{r7, pc}
 8004478:	58024400 	.word	0x58024400
 800447c:	0800f83c 	.word	0x0800f83c

08004480 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004480:	b480      	push	{r7}
 8004482:	b083      	sub	sp, #12
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
 8004488:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	223f      	movs	r2, #63	; 0x3f
 800448e:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004490:	4b1a      	ldr	r3, [pc, #104]	; (80044fc <HAL_RCC_GetClockConfig+0x7c>)
 8004492:	691b      	ldr	r3, [r3, #16]
 8004494:	f003 0207 	and.w	r2, r3, #7
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800449c:	4b17      	ldr	r3, [pc, #92]	; (80044fc <HAL_RCC_GetClockConfig+0x7c>)
 800449e:	699b      	ldr	r3, [r3, #24]
 80044a0:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80044a8:	4b14      	ldr	r3, [pc, #80]	; (80044fc <HAL_RCC_GetClockConfig+0x7c>)
 80044aa:	699b      	ldr	r3, [r3, #24]
 80044ac:	f003 020f 	and.w	r2, r3, #15
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80044b4:	4b11      	ldr	r3, [pc, #68]	; (80044fc <HAL_RCC_GetClockConfig+0x7c>)
 80044b6:	699b      	ldr	r3, [r3, #24]
 80044b8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80044c0:	4b0e      	ldr	r3, [pc, #56]	; (80044fc <HAL_RCC_GetClockConfig+0x7c>)
 80044c2:	69db      	ldr	r3, [r3, #28]
 80044c4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80044cc:	4b0b      	ldr	r3, [pc, #44]	; (80044fc <HAL_RCC_GetClockConfig+0x7c>)
 80044ce:	69db      	ldr	r3, [r3, #28]
 80044d0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80044d8:	4b08      	ldr	r3, [pc, #32]	; (80044fc <HAL_RCC_GetClockConfig+0x7c>)
 80044da:	6a1b      	ldr	r3, [r3, #32]
 80044dc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80044e4:	4b06      	ldr	r3, [pc, #24]	; (8004500 <HAL_RCC_GetClockConfig+0x80>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f003 020f 	and.w	r2, r3, #15
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	601a      	str	r2, [r3, #0]
}
 80044f0:	bf00      	nop
 80044f2:	370c      	adds	r7, #12
 80044f4:	46bd      	mov	sp, r7
 80044f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fa:	4770      	bx	lr
 80044fc:	58024400 	.word	0x58024400
 8004500:	52002000 	.word	0x52002000

08004504 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004504:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004508:	b0ca      	sub	sp, #296	; 0x128
 800450a:	af00      	add	r7, sp, #0
 800450c:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004510:	2300      	movs	r3, #0
 8004512:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004516:	2300      	movs	r3, #0
 8004518:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800451c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004524:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8004528:	2500      	movs	r5, #0
 800452a:	ea54 0305 	orrs.w	r3, r4, r5
 800452e:	d049      	beq.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8004530:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004534:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004536:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800453a:	d02f      	beq.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x98>
 800453c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004540:	d828      	bhi.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004542:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004546:	d01a      	beq.n	800457e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004548:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800454c:	d822      	bhi.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800454e:	2b00      	cmp	r3, #0
 8004550:	d003      	beq.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004552:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004556:	d007      	beq.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004558:	e01c      	b.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800455a:	4bb8      	ldr	r3, [pc, #736]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800455c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800455e:	4ab7      	ldr	r2, [pc, #732]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004560:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004564:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004566:	e01a      	b.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004568:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800456c:	3308      	adds	r3, #8
 800456e:	2102      	movs	r1, #2
 8004570:	4618      	mov	r0, r3
 8004572:	f001 fc8f 	bl	8005e94 <RCCEx_PLL2_Config>
 8004576:	4603      	mov	r3, r0
 8004578:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800457c:	e00f      	b.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800457e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004582:	3328      	adds	r3, #40	; 0x28
 8004584:	2102      	movs	r1, #2
 8004586:	4618      	mov	r0, r3
 8004588:	f001 fd36 	bl	8005ff8 <RCCEx_PLL3_Config>
 800458c:	4603      	mov	r3, r0
 800458e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004592:	e004      	b.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004594:	2301      	movs	r3, #1
 8004596:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800459a:	e000      	b.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800459c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800459e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d10a      	bne.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80045a6:	4ba5      	ldr	r3, [pc, #660]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80045a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045aa:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80045ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80045b4:	4aa1      	ldr	r2, [pc, #644]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80045b6:	430b      	orrs	r3, r1
 80045b8:	6513      	str	r3, [r2, #80]	; 0x50
 80045ba:	e003      	b.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045bc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80045c0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80045c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045cc:	f402 7880 	and.w	r8, r2, #256	; 0x100
 80045d0:	f04f 0900 	mov.w	r9, #0
 80045d4:	ea58 0309 	orrs.w	r3, r8, r9
 80045d8:	d047      	beq.n	800466a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80045da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045e0:	2b04      	cmp	r3, #4
 80045e2:	d82a      	bhi.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x136>
 80045e4:	a201      	add	r2, pc, #4	; (adr r2, 80045ec <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80045e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045ea:	bf00      	nop
 80045ec:	08004601 	.word	0x08004601
 80045f0:	0800460f 	.word	0x0800460f
 80045f4:	08004625 	.word	0x08004625
 80045f8:	08004643 	.word	0x08004643
 80045fc:	08004643 	.word	0x08004643
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004600:	4b8e      	ldr	r3, [pc, #568]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004604:	4a8d      	ldr	r2, [pc, #564]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004606:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800460a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800460c:	e01a      	b.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800460e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004612:	3308      	adds	r3, #8
 8004614:	2100      	movs	r1, #0
 8004616:	4618      	mov	r0, r3
 8004618:	f001 fc3c 	bl	8005e94 <RCCEx_PLL2_Config>
 800461c:	4603      	mov	r3, r0
 800461e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004622:	e00f      	b.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004624:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004628:	3328      	adds	r3, #40	; 0x28
 800462a:	2100      	movs	r1, #0
 800462c:	4618      	mov	r0, r3
 800462e:	f001 fce3 	bl	8005ff8 <RCCEx_PLL3_Config>
 8004632:	4603      	mov	r3, r0
 8004634:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004638:	e004      	b.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004640:	e000      	b.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8004642:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004644:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004648:	2b00      	cmp	r3, #0
 800464a:	d10a      	bne.n	8004662 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800464c:	4b7b      	ldr	r3, [pc, #492]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800464e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004650:	f023 0107 	bic.w	r1, r3, #7
 8004654:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004658:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800465a:	4a78      	ldr	r2, [pc, #480]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800465c:	430b      	orrs	r3, r1
 800465e:	6513      	str	r3, [r2, #80]	; 0x50
 8004660:	e003      	b.n	800466a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004662:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004666:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800466a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800466e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004672:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8004676:	f04f 0b00 	mov.w	fp, #0
 800467a:	ea5a 030b 	orrs.w	r3, sl, fp
 800467e:	d04c      	beq.n	800471a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8004680:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004684:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004686:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800468a:	d030      	beq.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800468c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004690:	d829      	bhi.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004692:	2bc0      	cmp	r3, #192	; 0xc0
 8004694:	d02d      	beq.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004696:	2bc0      	cmp	r3, #192	; 0xc0
 8004698:	d825      	bhi.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800469a:	2b80      	cmp	r3, #128	; 0x80
 800469c:	d018      	beq.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800469e:	2b80      	cmp	r3, #128	; 0x80
 80046a0:	d821      	bhi.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d002      	beq.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80046a6:	2b40      	cmp	r3, #64	; 0x40
 80046a8:	d007      	beq.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80046aa:	e01c      	b.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80046ac:	4b63      	ldr	r3, [pc, #396]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80046ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046b0:	4a62      	ldr	r2, [pc, #392]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80046b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80046b6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80046b8:	e01c      	b.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80046ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046be:	3308      	adds	r3, #8
 80046c0:	2100      	movs	r1, #0
 80046c2:	4618      	mov	r0, r3
 80046c4:	f001 fbe6 	bl	8005e94 <RCCEx_PLL2_Config>
 80046c8:	4603      	mov	r3, r0
 80046ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80046ce:	e011      	b.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80046d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046d4:	3328      	adds	r3, #40	; 0x28
 80046d6:	2100      	movs	r1, #0
 80046d8:	4618      	mov	r0, r3
 80046da:	f001 fc8d 	bl	8005ff8 <RCCEx_PLL3_Config>
 80046de:	4603      	mov	r3, r0
 80046e0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80046e4:	e006      	b.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80046e6:	2301      	movs	r3, #1
 80046e8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80046ec:	e002      	b.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80046ee:	bf00      	nop
 80046f0:	e000      	b.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80046f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046f4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d10a      	bne.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80046fc:	4b4f      	ldr	r3, [pc, #316]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80046fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004700:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8004704:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004708:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800470a:	4a4c      	ldr	r2, [pc, #304]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800470c:	430b      	orrs	r3, r1
 800470e:	6513      	str	r3, [r2, #80]	; 0x50
 8004710:	e003      	b.n	800471a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004712:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004716:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800471a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800471e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004722:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8004726:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800472a:	2300      	movs	r3, #0
 800472c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004730:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8004734:	460b      	mov	r3, r1
 8004736:	4313      	orrs	r3, r2
 8004738:	d053      	beq.n	80047e2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800473a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800473e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004742:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004746:	d035      	beq.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8004748:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800474c:	d82e      	bhi.n	80047ac <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800474e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004752:	d031      	beq.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8004754:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004758:	d828      	bhi.n	80047ac <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800475a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800475e:	d01a      	beq.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8004760:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004764:	d822      	bhi.n	80047ac <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004766:	2b00      	cmp	r3, #0
 8004768:	d003      	beq.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800476a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800476e:	d007      	beq.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8004770:	e01c      	b.n	80047ac <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004772:	4b32      	ldr	r3, [pc, #200]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004776:	4a31      	ldr	r2, [pc, #196]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004778:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800477c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800477e:	e01c      	b.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004780:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004784:	3308      	adds	r3, #8
 8004786:	2100      	movs	r1, #0
 8004788:	4618      	mov	r0, r3
 800478a:	f001 fb83 	bl	8005e94 <RCCEx_PLL2_Config>
 800478e:	4603      	mov	r3, r0
 8004790:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004794:	e011      	b.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004796:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800479a:	3328      	adds	r3, #40	; 0x28
 800479c:	2100      	movs	r1, #0
 800479e:	4618      	mov	r0, r3
 80047a0:	f001 fc2a 	bl	8005ff8 <RCCEx_PLL3_Config>
 80047a4:	4603      	mov	r3, r0
 80047a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80047aa:	e006      	b.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80047ac:	2301      	movs	r3, #1
 80047ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80047b2:	e002      	b.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80047b4:	bf00      	nop
 80047b6:	e000      	b.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80047b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80047ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d10b      	bne.n	80047da <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80047c2:	4b1e      	ldr	r3, [pc, #120]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80047c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047c6:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 80047ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047ce:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80047d2:	4a1a      	ldr	r2, [pc, #104]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80047d4:	430b      	orrs	r3, r1
 80047d6:	6593      	str	r3, [r2, #88]	; 0x58
 80047d8:	e003      	b.n	80047e2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80047de:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80047e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047ea:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80047ee:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80047f2:	2300      	movs	r3, #0
 80047f4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80047f8:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 80047fc:	460b      	mov	r3, r1
 80047fe:	4313      	orrs	r3, r2
 8004800:	d056      	beq.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8004802:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004806:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800480a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800480e:	d038      	beq.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8004810:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004814:	d831      	bhi.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004816:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800481a:	d034      	beq.n	8004886 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800481c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004820:	d82b      	bhi.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004822:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004826:	d01d      	beq.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8004828:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800482c:	d825      	bhi.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800482e:	2b00      	cmp	r3, #0
 8004830:	d006      	beq.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8004832:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004836:	d00a      	beq.n	800484e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004838:	e01f      	b.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800483a:	bf00      	nop
 800483c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004840:	4ba2      	ldr	r3, [pc, #648]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004844:	4aa1      	ldr	r2, [pc, #644]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004846:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800484a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800484c:	e01c      	b.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800484e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004852:	3308      	adds	r3, #8
 8004854:	2100      	movs	r1, #0
 8004856:	4618      	mov	r0, r3
 8004858:	f001 fb1c 	bl	8005e94 <RCCEx_PLL2_Config>
 800485c:	4603      	mov	r3, r0
 800485e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004862:	e011      	b.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004864:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004868:	3328      	adds	r3, #40	; 0x28
 800486a:	2100      	movs	r1, #0
 800486c:	4618      	mov	r0, r3
 800486e:	f001 fbc3 	bl	8005ff8 <RCCEx_PLL3_Config>
 8004872:	4603      	mov	r3, r0
 8004874:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004878:	e006      	b.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800487a:	2301      	movs	r3, #1
 800487c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004880:	e002      	b.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8004882:	bf00      	nop
 8004884:	e000      	b.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8004886:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004888:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800488c:	2b00      	cmp	r3, #0
 800488e:	d10b      	bne.n	80048a8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004890:	4b8e      	ldr	r3, [pc, #568]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004892:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004894:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8004898:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800489c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80048a0:	4a8a      	ldr	r2, [pc, #552]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80048a2:	430b      	orrs	r3, r1
 80048a4:	6593      	str	r3, [r2, #88]	; 0x58
 80048a6:	e003      	b.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048a8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80048ac:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80048b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048b8:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80048bc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80048c0:	2300      	movs	r3, #0
 80048c2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80048c6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 80048ca:	460b      	mov	r3, r1
 80048cc:	4313      	orrs	r3, r2
 80048ce:	d03a      	beq.n	8004946 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80048d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048d6:	2b30      	cmp	r3, #48	; 0x30
 80048d8:	d01f      	beq.n	800491a <HAL_RCCEx_PeriphCLKConfig+0x416>
 80048da:	2b30      	cmp	r3, #48	; 0x30
 80048dc:	d819      	bhi.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80048de:	2b20      	cmp	r3, #32
 80048e0:	d00c      	beq.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80048e2:	2b20      	cmp	r3, #32
 80048e4:	d815      	bhi.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d019      	beq.n	800491e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80048ea:	2b10      	cmp	r3, #16
 80048ec:	d111      	bne.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048ee:	4b77      	ldr	r3, [pc, #476]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80048f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048f2:	4a76      	ldr	r2, [pc, #472]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80048f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048f8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80048fa:	e011      	b.n	8004920 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80048fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004900:	3308      	adds	r3, #8
 8004902:	2102      	movs	r1, #2
 8004904:	4618      	mov	r0, r3
 8004906:	f001 fac5 	bl	8005e94 <RCCEx_PLL2_Config>
 800490a:	4603      	mov	r3, r0
 800490c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004910:	e006      	b.n	8004920 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004912:	2301      	movs	r3, #1
 8004914:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004918:	e002      	b.n	8004920 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800491a:	bf00      	nop
 800491c:	e000      	b.n	8004920 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800491e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004920:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004924:	2b00      	cmp	r3, #0
 8004926:	d10a      	bne.n	800493e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004928:	4b68      	ldr	r3, [pc, #416]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800492a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800492c:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8004930:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004934:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004936:	4a65      	ldr	r2, [pc, #404]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004938:	430b      	orrs	r3, r1
 800493a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800493c:	e003      	b.n	8004946 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800493e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004942:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004946:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800494a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800494e:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8004952:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004956:	2300      	movs	r3, #0
 8004958:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800495c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8004960:	460b      	mov	r3, r1
 8004962:	4313      	orrs	r3, r2
 8004964:	d051      	beq.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8004966:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800496a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800496c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004970:	d035      	beq.n	80049de <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8004972:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004976:	d82e      	bhi.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004978:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800497c:	d031      	beq.n	80049e2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800497e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004982:	d828      	bhi.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004984:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004988:	d01a      	beq.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800498a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800498e:	d822      	bhi.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004990:	2b00      	cmp	r3, #0
 8004992:	d003      	beq.n	800499c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8004994:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004998:	d007      	beq.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800499a:	e01c      	b.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800499c:	4b4b      	ldr	r3, [pc, #300]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800499e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049a0:	4a4a      	ldr	r2, [pc, #296]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80049a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049a6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80049a8:	e01c      	b.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80049aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049ae:	3308      	adds	r3, #8
 80049b0:	2100      	movs	r1, #0
 80049b2:	4618      	mov	r0, r3
 80049b4:	f001 fa6e 	bl	8005e94 <RCCEx_PLL2_Config>
 80049b8:	4603      	mov	r3, r0
 80049ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80049be:	e011      	b.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80049c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049c4:	3328      	adds	r3, #40	; 0x28
 80049c6:	2100      	movs	r1, #0
 80049c8:	4618      	mov	r0, r3
 80049ca:	f001 fb15 	bl	8005ff8 <RCCEx_PLL3_Config>
 80049ce:	4603      	mov	r3, r0
 80049d0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80049d4:	e006      	b.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
 80049d8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80049dc:	e002      	b.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80049de:	bf00      	nop
 80049e0:	e000      	b.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80049e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049e4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d10a      	bne.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80049ec:	4b37      	ldr	r3, [pc, #220]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80049ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049f0:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80049f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049fa:	4a34      	ldr	r2, [pc, #208]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80049fc:	430b      	orrs	r3, r1
 80049fe:	6513      	str	r3, [r2, #80]	; 0x50
 8004a00:	e003      	b.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a02:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004a06:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004a0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a12:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8004a16:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004a20:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8004a24:	460b      	mov	r3, r1
 8004a26:	4313      	orrs	r3, r2
 8004a28:	d056      	beq.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8004a2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a2e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a34:	d033      	beq.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8004a36:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a3a:	d82c      	bhi.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004a3c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004a40:	d02f      	beq.n	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8004a42:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004a46:	d826      	bhi.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004a48:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004a4c:	d02b      	beq.n	8004aa6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8004a4e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004a52:	d820      	bhi.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004a54:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004a58:	d012      	beq.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8004a5a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004a5e:	d81a      	bhi.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d022      	beq.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8004a64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a68:	d115      	bne.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004a6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a6e:	3308      	adds	r3, #8
 8004a70:	2101      	movs	r1, #1
 8004a72:	4618      	mov	r0, r3
 8004a74:	f001 fa0e 	bl	8005e94 <RCCEx_PLL2_Config>
 8004a78:	4603      	mov	r3, r0
 8004a7a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004a7e:	e015      	b.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004a80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a84:	3328      	adds	r3, #40	; 0x28
 8004a86:	2101      	movs	r1, #1
 8004a88:	4618      	mov	r0, r3
 8004a8a:	f001 fab5 	bl	8005ff8 <RCCEx_PLL3_Config>
 8004a8e:	4603      	mov	r3, r0
 8004a90:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004a94:	e00a      	b.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a96:	2301      	movs	r3, #1
 8004a98:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004a9c:	e006      	b.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004a9e:	bf00      	nop
 8004aa0:	e004      	b.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004aa2:	bf00      	nop
 8004aa4:	e002      	b.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004aa6:	bf00      	nop
 8004aa8:	e000      	b.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004aaa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004aac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d10d      	bne.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004ab4:	4b05      	ldr	r3, [pc, #20]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004ab6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ab8:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8004abc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ac0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ac2:	4a02      	ldr	r2, [pc, #8]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004ac4:	430b      	orrs	r3, r1
 8004ac6:	6513      	str	r3, [r2, #80]	; 0x50
 8004ac8:	e006      	b.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8004aca:	bf00      	nop
 8004acc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ad0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004ad4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004ad8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ae0:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8004ae4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004ae8:	2300      	movs	r3, #0
 8004aea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004aee:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8004af2:	460b      	mov	r3, r1
 8004af4:	4313      	orrs	r3, r2
 8004af6:	d055      	beq.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8004af8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004afc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004b00:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004b04:	d033      	beq.n	8004b6e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8004b06:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004b0a:	d82c      	bhi.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004b0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b10:	d02f      	beq.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8004b12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b16:	d826      	bhi.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004b18:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004b1c:	d02b      	beq.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8004b1e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004b22:	d820      	bhi.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004b24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b28:	d012      	beq.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8004b2a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b2e:	d81a      	bhi.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d022      	beq.n	8004b7a <HAL_RCCEx_PeriphCLKConfig+0x676>
 8004b34:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b38:	d115      	bne.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004b3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b3e:	3308      	adds	r3, #8
 8004b40:	2101      	movs	r1, #1
 8004b42:	4618      	mov	r0, r3
 8004b44:	f001 f9a6 	bl	8005e94 <RCCEx_PLL2_Config>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004b4e:	e015      	b.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004b50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b54:	3328      	adds	r3, #40	; 0x28
 8004b56:	2101      	movs	r1, #1
 8004b58:	4618      	mov	r0, r3
 8004b5a:	f001 fa4d 	bl	8005ff8 <RCCEx_PLL3_Config>
 8004b5e:	4603      	mov	r3, r0
 8004b60:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004b64:	e00a      	b.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8004b66:	2301      	movs	r3, #1
 8004b68:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004b6c:	e006      	b.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004b6e:	bf00      	nop
 8004b70:	e004      	b.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004b72:	bf00      	nop
 8004b74:	e002      	b.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004b76:	bf00      	nop
 8004b78:	e000      	b.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004b7a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b7c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d10b      	bne.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004b84:	4ba3      	ldr	r3, [pc, #652]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004b86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b88:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8004b8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b90:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004b94:	4a9f      	ldr	r2, [pc, #636]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004b96:	430b      	orrs	r3, r1
 8004b98:	6593      	str	r3, [r2, #88]	; 0x58
 8004b9a:	e003      	b.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b9c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004ba0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004ba4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bac:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8004bb0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004bba:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004bbe:	460b      	mov	r3, r1
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	d037      	beq.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004bc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004bc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004bce:	d00e      	beq.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8004bd0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004bd4:	d816      	bhi.n	8004c04 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d018      	beq.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x708>
 8004bda:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004bde:	d111      	bne.n	8004c04 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004be0:	4b8c      	ldr	r3, [pc, #560]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004be4:	4a8b      	ldr	r2, [pc, #556]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004be6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004bea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004bec:	e00f      	b.n	8004c0e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004bee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004bf2:	3308      	adds	r3, #8
 8004bf4:	2101      	movs	r1, #1
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	f001 f94c 	bl	8005e94 <RCCEx_PLL2_Config>
 8004bfc:	4603      	mov	r3, r0
 8004bfe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004c02:	e004      	b.n	8004c0e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c04:	2301      	movs	r3, #1
 8004c06:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004c0a:	e000      	b.n	8004c0e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8004c0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c0e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d10a      	bne.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004c16:	4b7f      	ldr	r3, [pc, #508]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004c18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c1a:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8004c1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c24:	4a7b      	ldr	r2, [pc, #492]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004c26:	430b      	orrs	r3, r1
 8004c28:	6513      	str	r3, [r2, #80]	; 0x50
 8004c2a:	e003      	b.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c2c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004c30:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004c34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c3c:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8004c40:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004c44:	2300      	movs	r3, #0
 8004c46:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004c4a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8004c4e:	460b      	mov	r3, r1
 8004c50:	4313      	orrs	r3, r2
 8004c52:	d039      	beq.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004c54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c5a:	2b03      	cmp	r3, #3
 8004c5c:	d81c      	bhi.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8004c5e:	a201      	add	r2, pc, #4	; (adr r2, 8004c64 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8004c60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c64:	08004ca1 	.word	0x08004ca1
 8004c68:	08004c75 	.word	0x08004c75
 8004c6c:	08004c83 	.word	0x08004c83
 8004c70:	08004ca1 	.word	0x08004ca1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c74:	4b67      	ldr	r3, [pc, #412]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c78:	4a66      	ldr	r2, [pc, #408]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004c7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c7e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004c80:	e00f      	b.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004c82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c86:	3308      	adds	r3, #8
 8004c88:	2102      	movs	r1, #2
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	f001 f902 	bl	8005e94 <RCCEx_PLL2_Config>
 8004c90:	4603      	mov	r3, r0
 8004c92:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004c96:	e004      	b.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004c98:	2301      	movs	r3, #1
 8004c9a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004c9e:	e000      	b.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8004ca0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ca2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d10a      	bne.n	8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004caa:	4b5a      	ldr	r3, [pc, #360]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004cac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cae:	f023 0103 	bic.w	r1, r3, #3
 8004cb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004cb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cb8:	4a56      	ldr	r2, [pc, #344]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004cba:	430b      	orrs	r3, r1
 8004cbc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004cbe:	e003      	b.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cc0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004cc4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004cc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cd0:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8004cd4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004cd8:	2300      	movs	r3, #0
 8004cda:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004cde:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8004ce2:	460b      	mov	r3, r1
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	f000 809f 	beq.w	8004e28 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004cea:	4b4b      	ldr	r3, [pc, #300]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4a4a      	ldr	r2, [pc, #296]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004cf0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cf4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004cf6:	f7fc fdb5 	bl	8001864 <HAL_GetTick>
 8004cfa:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004cfe:	e00b      	b.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d00:	f7fc fdb0 	bl	8001864 <HAL_GetTick>
 8004d04:	4602      	mov	r2, r0
 8004d06:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004d0a:	1ad3      	subs	r3, r2, r3
 8004d0c:	2b64      	cmp	r3, #100	; 0x64
 8004d0e:	d903      	bls.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8004d10:	2303      	movs	r3, #3
 8004d12:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004d16:	e005      	b.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004d18:	4b3f      	ldr	r3, [pc, #252]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d0ed      	beq.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8004d24:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d179      	bne.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004d2c:	4b39      	ldr	r3, [pc, #228]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004d2e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004d30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d34:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004d38:	4053      	eors	r3, r2
 8004d3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d015      	beq.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004d42:	4b34      	ldr	r3, [pc, #208]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004d44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d4a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004d4e:	4b31      	ldr	r3, [pc, #196]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004d50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d52:	4a30      	ldr	r2, [pc, #192]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004d54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d58:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004d5a:	4b2e      	ldr	r3, [pc, #184]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004d5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d5e:	4a2d      	ldr	r2, [pc, #180]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004d60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d64:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004d66:	4a2b      	ldr	r2, [pc, #172]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004d68:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004d6c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004d6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d72:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004d76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d7a:	d118      	bne.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d7c:	f7fc fd72 	bl	8001864 <HAL_GetTick>
 8004d80:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004d84:	e00d      	b.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d86:	f7fc fd6d 	bl	8001864 <HAL_GetTick>
 8004d8a:	4602      	mov	r2, r0
 8004d8c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004d90:	1ad2      	subs	r2, r2, r3
 8004d92:	f241 3388 	movw	r3, #5000	; 0x1388
 8004d96:	429a      	cmp	r2, r3
 8004d98:	d903      	bls.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8004d9a:	2303      	movs	r3, #3
 8004d9c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8004da0:	e005      	b.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004da2:	4b1c      	ldr	r3, [pc, #112]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004da4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004da6:	f003 0302 	and.w	r3, r3, #2
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d0eb      	beq.n	8004d86 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8004dae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d129      	bne.n	8004e0a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004db6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004dba:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004dbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004dc2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004dc6:	d10e      	bne.n	8004de6 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8004dc8:	4b12      	ldr	r3, [pc, #72]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004dca:	691b      	ldr	r3, [r3, #16]
 8004dcc:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8004dd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004dd4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004dd8:	091a      	lsrs	r2, r3, #4
 8004dda:	4b10      	ldr	r3, [pc, #64]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8004ddc:	4013      	ands	r3, r2
 8004dde:	4a0d      	ldr	r2, [pc, #52]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004de0:	430b      	orrs	r3, r1
 8004de2:	6113      	str	r3, [r2, #16]
 8004de4:	e005      	b.n	8004df2 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8004de6:	4b0b      	ldr	r3, [pc, #44]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004de8:	691b      	ldr	r3, [r3, #16]
 8004dea:	4a0a      	ldr	r2, [pc, #40]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004dec:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004df0:	6113      	str	r3, [r2, #16]
 8004df2:	4b08      	ldr	r3, [pc, #32]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004df4:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8004df6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004dfa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004dfe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e02:	4a04      	ldr	r2, [pc, #16]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004e04:	430b      	orrs	r3, r1
 8004e06:	6713      	str	r3, [r2, #112]	; 0x70
 8004e08:	e00e      	b.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004e0a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004e0e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8004e12:	e009      	b.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8004e14:	58024400 	.word	0x58024400
 8004e18:	58024800 	.word	0x58024800
 8004e1c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e20:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004e24:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004e28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e30:	f002 0301 	and.w	r3, r2, #1
 8004e34:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004e38:	2300      	movs	r3, #0
 8004e3a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004e3e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004e42:	460b      	mov	r3, r1
 8004e44:	4313      	orrs	r3, r2
 8004e46:	f000 8089 	beq.w	8004f5c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8004e4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e4e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e50:	2b28      	cmp	r3, #40	; 0x28
 8004e52:	d86b      	bhi.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8004e54:	a201      	add	r2, pc, #4	; (adr r2, 8004e5c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004e56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e5a:	bf00      	nop
 8004e5c:	08004f35 	.word	0x08004f35
 8004e60:	08004f2d 	.word	0x08004f2d
 8004e64:	08004f2d 	.word	0x08004f2d
 8004e68:	08004f2d 	.word	0x08004f2d
 8004e6c:	08004f2d 	.word	0x08004f2d
 8004e70:	08004f2d 	.word	0x08004f2d
 8004e74:	08004f2d 	.word	0x08004f2d
 8004e78:	08004f2d 	.word	0x08004f2d
 8004e7c:	08004f01 	.word	0x08004f01
 8004e80:	08004f2d 	.word	0x08004f2d
 8004e84:	08004f2d 	.word	0x08004f2d
 8004e88:	08004f2d 	.word	0x08004f2d
 8004e8c:	08004f2d 	.word	0x08004f2d
 8004e90:	08004f2d 	.word	0x08004f2d
 8004e94:	08004f2d 	.word	0x08004f2d
 8004e98:	08004f2d 	.word	0x08004f2d
 8004e9c:	08004f17 	.word	0x08004f17
 8004ea0:	08004f2d 	.word	0x08004f2d
 8004ea4:	08004f2d 	.word	0x08004f2d
 8004ea8:	08004f2d 	.word	0x08004f2d
 8004eac:	08004f2d 	.word	0x08004f2d
 8004eb0:	08004f2d 	.word	0x08004f2d
 8004eb4:	08004f2d 	.word	0x08004f2d
 8004eb8:	08004f2d 	.word	0x08004f2d
 8004ebc:	08004f35 	.word	0x08004f35
 8004ec0:	08004f2d 	.word	0x08004f2d
 8004ec4:	08004f2d 	.word	0x08004f2d
 8004ec8:	08004f2d 	.word	0x08004f2d
 8004ecc:	08004f2d 	.word	0x08004f2d
 8004ed0:	08004f2d 	.word	0x08004f2d
 8004ed4:	08004f2d 	.word	0x08004f2d
 8004ed8:	08004f2d 	.word	0x08004f2d
 8004edc:	08004f35 	.word	0x08004f35
 8004ee0:	08004f2d 	.word	0x08004f2d
 8004ee4:	08004f2d 	.word	0x08004f2d
 8004ee8:	08004f2d 	.word	0x08004f2d
 8004eec:	08004f2d 	.word	0x08004f2d
 8004ef0:	08004f2d 	.word	0x08004f2d
 8004ef4:	08004f2d 	.word	0x08004f2d
 8004ef8:	08004f2d 	.word	0x08004f2d
 8004efc:	08004f35 	.word	0x08004f35
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004f00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f04:	3308      	adds	r3, #8
 8004f06:	2101      	movs	r1, #1
 8004f08:	4618      	mov	r0, r3
 8004f0a:	f000 ffc3 	bl	8005e94 <RCCEx_PLL2_Config>
 8004f0e:	4603      	mov	r3, r0
 8004f10:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004f14:	e00f      	b.n	8004f36 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004f16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f1a:	3328      	adds	r3, #40	; 0x28
 8004f1c:	2101      	movs	r1, #1
 8004f1e:	4618      	mov	r0, r3
 8004f20:	f001 f86a 	bl	8005ff8 <RCCEx_PLL3_Config>
 8004f24:	4603      	mov	r3, r0
 8004f26:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004f2a:	e004      	b.n	8004f36 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004f32:	e000      	b.n	8004f36 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8004f34:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f36:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d10a      	bne.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004f3e:	4bbf      	ldr	r3, [pc, #764]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004f40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f42:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8004f46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f4a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f4c:	4abb      	ldr	r2, [pc, #748]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004f4e:	430b      	orrs	r3, r1
 8004f50:	6553      	str	r3, [r2, #84]	; 0x54
 8004f52:	e003      	b.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f54:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004f58:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004f5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f64:	f002 0302 	and.w	r3, r2, #2
 8004f68:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004f72:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8004f76:	460b      	mov	r3, r1
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	d041      	beq.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004f7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f80:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f82:	2b05      	cmp	r3, #5
 8004f84:	d824      	bhi.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8004f86:	a201      	add	r2, pc, #4	; (adr r2, 8004f8c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8004f88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f8c:	08004fd9 	.word	0x08004fd9
 8004f90:	08004fa5 	.word	0x08004fa5
 8004f94:	08004fbb 	.word	0x08004fbb
 8004f98:	08004fd9 	.word	0x08004fd9
 8004f9c:	08004fd9 	.word	0x08004fd9
 8004fa0:	08004fd9 	.word	0x08004fd9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004fa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004fa8:	3308      	adds	r3, #8
 8004faa:	2101      	movs	r1, #1
 8004fac:	4618      	mov	r0, r3
 8004fae:	f000 ff71 	bl	8005e94 <RCCEx_PLL2_Config>
 8004fb2:	4603      	mov	r3, r0
 8004fb4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004fb8:	e00f      	b.n	8004fda <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004fba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004fbe:	3328      	adds	r3, #40	; 0x28
 8004fc0:	2101      	movs	r1, #1
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	f001 f818 	bl	8005ff8 <RCCEx_PLL3_Config>
 8004fc8:	4603      	mov	r3, r0
 8004fca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004fce:	e004      	b.n	8004fda <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004fd6:	e000      	b.n	8004fda <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8004fd8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004fda:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d10a      	bne.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004fe2:	4b96      	ldr	r3, [pc, #600]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004fe4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fe6:	f023 0107 	bic.w	r1, r3, #7
 8004fea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004fee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ff0:	4a92      	ldr	r2, [pc, #584]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004ff2:	430b      	orrs	r3, r1
 8004ff4:	6553      	str	r3, [r2, #84]	; 0x54
 8004ff6:	e003      	b.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ff8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004ffc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005000:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005008:	f002 0304 	and.w	r3, r2, #4
 800500c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005010:	2300      	movs	r3, #0
 8005012:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005016:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800501a:	460b      	mov	r3, r1
 800501c:	4313      	orrs	r3, r2
 800501e:	d044      	beq.n	80050aa <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005020:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005024:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005028:	2b05      	cmp	r3, #5
 800502a:	d825      	bhi.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800502c:	a201      	add	r2, pc, #4	; (adr r2, 8005034 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800502e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005032:	bf00      	nop
 8005034:	08005081 	.word	0x08005081
 8005038:	0800504d 	.word	0x0800504d
 800503c:	08005063 	.word	0x08005063
 8005040:	08005081 	.word	0x08005081
 8005044:	08005081 	.word	0x08005081
 8005048:	08005081 	.word	0x08005081
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800504c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005050:	3308      	adds	r3, #8
 8005052:	2101      	movs	r1, #1
 8005054:	4618      	mov	r0, r3
 8005056:	f000 ff1d 	bl	8005e94 <RCCEx_PLL2_Config>
 800505a:	4603      	mov	r3, r0
 800505c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005060:	e00f      	b.n	8005082 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005062:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005066:	3328      	adds	r3, #40	; 0x28
 8005068:	2101      	movs	r1, #1
 800506a:	4618      	mov	r0, r3
 800506c:	f000 ffc4 	bl	8005ff8 <RCCEx_PLL3_Config>
 8005070:	4603      	mov	r3, r0
 8005072:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005076:	e004      	b.n	8005082 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005078:	2301      	movs	r3, #1
 800507a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800507e:	e000      	b.n	8005082 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8005080:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005082:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005086:	2b00      	cmp	r3, #0
 8005088:	d10b      	bne.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800508a:	4b6c      	ldr	r3, [pc, #432]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800508c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800508e:	f023 0107 	bic.w	r1, r3, #7
 8005092:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005096:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800509a:	4a68      	ldr	r2, [pc, #416]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800509c:	430b      	orrs	r3, r1
 800509e:	6593      	str	r3, [r2, #88]	; 0x58
 80050a0:	e003      	b.n	80050aa <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050a2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80050a6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80050aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80050ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050b2:	f002 0320 	and.w	r3, r2, #32
 80050b6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80050ba:	2300      	movs	r3, #0
 80050bc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80050c0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80050c4:	460b      	mov	r3, r1
 80050c6:	4313      	orrs	r3, r2
 80050c8:	d055      	beq.n	8005176 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80050ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80050ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80050d6:	d033      	beq.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80050d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80050dc:	d82c      	bhi.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80050de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050e2:	d02f      	beq.n	8005144 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80050e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050e8:	d826      	bhi.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80050ea:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80050ee:	d02b      	beq.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80050f0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80050f4:	d820      	bhi.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80050f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80050fa:	d012      	beq.n	8005122 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80050fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005100:	d81a      	bhi.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005102:	2b00      	cmp	r3, #0
 8005104:	d022      	beq.n	800514c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8005106:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800510a:	d115      	bne.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800510c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005110:	3308      	adds	r3, #8
 8005112:	2100      	movs	r1, #0
 8005114:	4618      	mov	r0, r3
 8005116:	f000 febd 	bl	8005e94 <RCCEx_PLL2_Config>
 800511a:	4603      	mov	r3, r0
 800511c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005120:	e015      	b.n	800514e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005122:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005126:	3328      	adds	r3, #40	; 0x28
 8005128:	2102      	movs	r1, #2
 800512a:	4618      	mov	r0, r3
 800512c:	f000 ff64 	bl	8005ff8 <RCCEx_PLL3_Config>
 8005130:	4603      	mov	r3, r0
 8005132:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005136:	e00a      	b.n	800514e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005138:	2301      	movs	r3, #1
 800513a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800513e:	e006      	b.n	800514e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005140:	bf00      	nop
 8005142:	e004      	b.n	800514e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005144:	bf00      	nop
 8005146:	e002      	b.n	800514e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005148:	bf00      	nop
 800514a:	e000      	b.n	800514e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800514c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800514e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005152:	2b00      	cmp	r3, #0
 8005154:	d10b      	bne.n	800516e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005156:	4b39      	ldr	r3, [pc, #228]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005158:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800515a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800515e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005162:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005166:	4a35      	ldr	r2, [pc, #212]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005168:	430b      	orrs	r3, r1
 800516a:	6553      	str	r3, [r2, #84]	; 0x54
 800516c:	e003      	b.n	8005176 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800516e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005172:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005176:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800517a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800517e:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8005182:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005186:	2300      	movs	r3, #0
 8005188:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800518c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8005190:	460b      	mov	r3, r1
 8005192:	4313      	orrs	r3, r2
 8005194:	d058      	beq.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8005196:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800519a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800519e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80051a2:	d033      	beq.n	800520c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80051a4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80051a8:	d82c      	bhi.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80051aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051ae:	d02f      	beq.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80051b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051b4:	d826      	bhi.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80051b6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80051ba:	d02b      	beq.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80051bc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80051c0:	d820      	bhi.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80051c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051c6:	d012      	beq.n	80051ee <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80051c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051cc:	d81a      	bhi.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d022      	beq.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80051d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051d6:	d115      	bne.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80051d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051dc:	3308      	adds	r3, #8
 80051de:	2100      	movs	r1, #0
 80051e0:	4618      	mov	r0, r3
 80051e2:	f000 fe57 	bl	8005e94 <RCCEx_PLL2_Config>
 80051e6:	4603      	mov	r3, r0
 80051e8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80051ec:	e015      	b.n	800521a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80051ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051f2:	3328      	adds	r3, #40	; 0x28
 80051f4:	2102      	movs	r1, #2
 80051f6:	4618      	mov	r0, r3
 80051f8:	f000 fefe 	bl	8005ff8 <RCCEx_PLL3_Config>
 80051fc:	4603      	mov	r3, r0
 80051fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005202:	e00a      	b.n	800521a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005204:	2301      	movs	r3, #1
 8005206:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800520a:	e006      	b.n	800521a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800520c:	bf00      	nop
 800520e:	e004      	b.n	800521a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005210:	bf00      	nop
 8005212:	e002      	b.n	800521a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005214:	bf00      	nop
 8005216:	e000      	b.n	800521a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005218:	bf00      	nop
    }

    if (ret == HAL_OK)
 800521a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800521e:	2b00      	cmp	r3, #0
 8005220:	d10e      	bne.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005222:	4b06      	ldr	r3, [pc, #24]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005224:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005226:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800522a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800522e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005232:	4a02      	ldr	r2, [pc, #8]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005234:	430b      	orrs	r3, r1
 8005236:	6593      	str	r3, [r2, #88]	; 0x58
 8005238:	e006      	b.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800523a:	bf00      	nop
 800523c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005240:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005244:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005248:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800524c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005250:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8005254:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005258:	2300      	movs	r3, #0
 800525a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800525e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8005262:	460b      	mov	r3, r1
 8005264:	4313      	orrs	r3, r2
 8005266:	d055      	beq.n	8005314 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005268:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800526c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005270:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005274:	d033      	beq.n	80052de <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8005276:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800527a:	d82c      	bhi.n	80052d6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800527c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005280:	d02f      	beq.n	80052e2 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8005282:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005286:	d826      	bhi.n	80052d6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005288:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800528c:	d02b      	beq.n	80052e6 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800528e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005292:	d820      	bhi.n	80052d6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005294:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005298:	d012      	beq.n	80052c0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800529a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800529e:	d81a      	bhi.n	80052d6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d022      	beq.n	80052ea <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80052a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052a8:	d115      	bne.n	80052d6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80052aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80052ae:	3308      	adds	r3, #8
 80052b0:	2100      	movs	r1, #0
 80052b2:	4618      	mov	r0, r3
 80052b4:	f000 fdee 	bl	8005e94 <RCCEx_PLL2_Config>
 80052b8:	4603      	mov	r3, r0
 80052ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80052be:	e015      	b.n	80052ec <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80052c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80052c4:	3328      	adds	r3, #40	; 0x28
 80052c6:	2102      	movs	r1, #2
 80052c8:	4618      	mov	r0, r3
 80052ca:	f000 fe95 	bl	8005ff8 <RCCEx_PLL3_Config>
 80052ce:	4603      	mov	r3, r0
 80052d0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80052d4:	e00a      	b.n	80052ec <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80052d6:	2301      	movs	r3, #1
 80052d8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80052dc:	e006      	b.n	80052ec <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80052de:	bf00      	nop
 80052e0:	e004      	b.n	80052ec <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80052e2:	bf00      	nop
 80052e4:	e002      	b.n	80052ec <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80052e6:	bf00      	nop
 80052e8:	e000      	b.n	80052ec <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80052ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80052ec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d10b      	bne.n	800530c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80052f4:	4ba1      	ldr	r3, [pc, #644]	; (800557c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80052f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052f8:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 80052fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005300:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005304:	4a9d      	ldr	r2, [pc, #628]	; (800557c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005306:	430b      	orrs	r3, r1
 8005308:	6593      	str	r3, [r2, #88]	; 0x58
 800530a:	e003      	b.n	8005314 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800530c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005310:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005314:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800531c:	f002 0308 	and.w	r3, r2, #8
 8005320:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005324:	2300      	movs	r3, #0
 8005326:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800532a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800532e:	460b      	mov	r3, r1
 8005330:	4313      	orrs	r3, r2
 8005332:	d01e      	beq.n	8005372 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8005334:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005338:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800533c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005340:	d10c      	bne.n	800535c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005342:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005346:	3328      	adds	r3, #40	; 0x28
 8005348:	2102      	movs	r1, #2
 800534a:	4618      	mov	r0, r3
 800534c:	f000 fe54 	bl	8005ff8 <RCCEx_PLL3_Config>
 8005350:	4603      	mov	r3, r0
 8005352:	2b00      	cmp	r3, #0
 8005354:	d002      	beq.n	800535c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8005356:	2301      	movs	r3, #1
 8005358:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800535c:	4b87      	ldr	r3, [pc, #540]	; (800557c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800535e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005360:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005364:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005368:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800536c:	4a83      	ldr	r2, [pc, #524]	; (800557c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800536e:	430b      	orrs	r3, r1
 8005370:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005372:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800537a:	f002 0310 	and.w	r3, r2, #16
 800537e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005382:	2300      	movs	r3, #0
 8005384:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005388:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800538c:	460b      	mov	r3, r1
 800538e:	4313      	orrs	r3, r2
 8005390:	d01e      	beq.n	80053d0 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8005392:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005396:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800539a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800539e:	d10c      	bne.n	80053ba <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80053a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053a4:	3328      	adds	r3, #40	; 0x28
 80053a6:	2102      	movs	r1, #2
 80053a8:	4618      	mov	r0, r3
 80053aa:	f000 fe25 	bl	8005ff8 <RCCEx_PLL3_Config>
 80053ae:	4603      	mov	r3, r0
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d002      	beq.n	80053ba <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80053b4:	2301      	movs	r3, #1
 80053b6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80053ba:	4b70      	ldr	r3, [pc, #448]	; (800557c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80053bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053be:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80053c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80053ca:	4a6c      	ldr	r2, [pc, #432]	; (800557c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80053cc:	430b      	orrs	r3, r1
 80053ce:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80053d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053d8:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80053dc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80053e0:	2300      	movs	r3, #0
 80053e2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80053e6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80053ea:	460b      	mov	r3, r1
 80053ec:	4313      	orrs	r3, r2
 80053ee:	d03e      	beq.n	800546e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80053f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053f4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80053f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80053fc:	d022      	beq.n	8005444 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80053fe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005402:	d81b      	bhi.n	800543c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8005404:	2b00      	cmp	r3, #0
 8005406:	d003      	beq.n	8005410 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8005408:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800540c:	d00b      	beq.n	8005426 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800540e:	e015      	b.n	800543c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005410:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005414:	3308      	adds	r3, #8
 8005416:	2100      	movs	r1, #0
 8005418:	4618      	mov	r0, r3
 800541a:	f000 fd3b 	bl	8005e94 <RCCEx_PLL2_Config>
 800541e:	4603      	mov	r3, r0
 8005420:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005424:	e00f      	b.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005426:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800542a:	3328      	adds	r3, #40	; 0x28
 800542c:	2102      	movs	r1, #2
 800542e:	4618      	mov	r0, r3
 8005430:	f000 fde2 	bl	8005ff8 <RCCEx_PLL3_Config>
 8005434:	4603      	mov	r3, r0
 8005436:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800543a:	e004      	b.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800543c:	2301      	movs	r3, #1
 800543e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005442:	e000      	b.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8005444:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005446:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800544a:	2b00      	cmp	r3, #0
 800544c:	d10b      	bne.n	8005466 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800544e:	4b4b      	ldr	r3, [pc, #300]	; (800557c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005450:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005452:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8005456:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800545a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800545e:	4a47      	ldr	r2, [pc, #284]	; (800557c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005460:	430b      	orrs	r3, r1
 8005462:	6593      	str	r3, [r2, #88]	; 0x58
 8005464:	e003      	b.n	800546e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005466:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800546a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800546e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005476:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800547a:	67bb      	str	r3, [r7, #120]	; 0x78
 800547c:	2300      	movs	r3, #0
 800547e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005480:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8005484:	460b      	mov	r3, r1
 8005486:	4313      	orrs	r3, r2
 8005488:	d03b      	beq.n	8005502 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800548a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800548e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005492:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005496:	d01f      	beq.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8005498:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800549c:	d818      	bhi.n	80054d0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800549e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80054a2:	d003      	beq.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80054a4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80054a8:	d007      	beq.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80054aa:	e011      	b.n	80054d0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80054ac:	4b33      	ldr	r3, [pc, #204]	; (800557c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80054ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054b0:	4a32      	ldr	r2, [pc, #200]	; (800557c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80054b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80054b6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80054b8:	e00f      	b.n	80054da <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80054ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054be:	3328      	adds	r3, #40	; 0x28
 80054c0:	2101      	movs	r1, #1
 80054c2:	4618      	mov	r0, r3
 80054c4:	f000 fd98 	bl	8005ff8 <RCCEx_PLL3_Config>
 80054c8:	4603      	mov	r3, r0
 80054ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80054ce:	e004      	b.n	80054da <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80054d0:	2301      	movs	r3, #1
 80054d2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80054d6:	e000      	b.n	80054da <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80054d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80054da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d10b      	bne.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80054e2:	4b26      	ldr	r3, [pc, #152]	; (800557c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80054e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054e6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80054ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054f2:	4a22      	ldr	r2, [pc, #136]	; (800557c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80054f4:	430b      	orrs	r3, r1
 80054f6:	6553      	str	r3, [r2, #84]	; 0x54
 80054f8:	e003      	b.n	8005502 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054fa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80054fe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005502:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800550a:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800550e:	673b      	str	r3, [r7, #112]	; 0x70
 8005510:	2300      	movs	r3, #0
 8005512:	677b      	str	r3, [r7, #116]	; 0x74
 8005514:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8005518:	460b      	mov	r3, r1
 800551a:	4313      	orrs	r3, r2
 800551c:	d034      	beq.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800551e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005522:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005524:	2b00      	cmp	r3, #0
 8005526:	d003      	beq.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8005528:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800552c:	d007      	beq.n	800553e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800552e:	e011      	b.n	8005554 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005530:	4b12      	ldr	r3, [pc, #72]	; (800557c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005534:	4a11      	ldr	r2, [pc, #68]	; (800557c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005536:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800553a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800553c:	e00e      	b.n	800555c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800553e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005542:	3308      	adds	r3, #8
 8005544:	2102      	movs	r1, #2
 8005546:	4618      	mov	r0, r3
 8005548:	f000 fca4 	bl	8005e94 <RCCEx_PLL2_Config>
 800554c:	4603      	mov	r3, r0
 800554e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005552:	e003      	b.n	800555c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8005554:	2301      	movs	r3, #1
 8005556:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800555a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800555c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005560:	2b00      	cmp	r3, #0
 8005562:	d10d      	bne.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005564:	4b05      	ldr	r3, [pc, #20]	; (800557c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005566:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005568:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800556c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005570:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005572:	4a02      	ldr	r2, [pc, #8]	; (800557c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005574:	430b      	orrs	r3, r1
 8005576:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005578:	e006      	b.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800557a:	bf00      	nop
 800557c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005580:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005584:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005588:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800558c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005590:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8005594:	66bb      	str	r3, [r7, #104]	; 0x68
 8005596:	2300      	movs	r3, #0
 8005598:	66fb      	str	r3, [r7, #108]	; 0x6c
 800559a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800559e:	460b      	mov	r3, r1
 80055a0:	4313      	orrs	r3, r2
 80055a2:	d00c      	beq.n	80055be <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80055a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055a8:	3328      	adds	r3, #40	; 0x28
 80055aa:	2102      	movs	r1, #2
 80055ac:	4618      	mov	r0, r3
 80055ae:	f000 fd23 	bl	8005ff8 <RCCEx_PLL3_Config>
 80055b2:	4603      	mov	r3, r0
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d002      	beq.n	80055be <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80055b8:	2301      	movs	r3, #1
 80055ba:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80055be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055c6:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80055ca:	663b      	str	r3, [r7, #96]	; 0x60
 80055cc:	2300      	movs	r3, #0
 80055ce:	667b      	str	r3, [r7, #100]	; 0x64
 80055d0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80055d4:	460b      	mov	r3, r1
 80055d6:	4313      	orrs	r3, r2
 80055d8:	d038      	beq.n	800564c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80055da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80055e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80055e6:	d018      	beq.n	800561a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80055e8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80055ec:	d811      	bhi.n	8005612 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80055ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055f2:	d014      	beq.n	800561e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80055f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055f8:	d80b      	bhi.n	8005612 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d011      	beq.n	8005622 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80055fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005602:	d106      	bne.n	8005612 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005604:	4bc3      	ldr	r3, [pc, #780]	; (8005914 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005608:	4ac2      	ldr	r2, [pc, #776]	; (8005914 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800560a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800560e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8005610:	e008      	b.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005612:	2301      	movs	r3, #1
 8005614:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005618:	e004      	b.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800561a:	bf00      	nop
 800561c:	e002      	b.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800561e:	bf00      	nop
 8005620:	e000      	b.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005622:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005624:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005628:	2b00      	cmp	r3, #0
 800562a:	d10b      	bne.n	8005644 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800562c:	4bb9      	ldr	r3, [pc, #740]	; (8005914 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800562e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005630:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005634:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005638:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800563c:	4ab5      	ldr	r2, [pc, #724]	; (8005914 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800563e:	430b      	orrs	r3, r1
 8005640:	6553      	str	r3, [r2, #84]	; 0x54
 8005642:	e003      	b.n	800564c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005644:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005648:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800564c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005654:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8005658:	65bb      	str	r3, [r7, #88]	; 0x58
 800565a:	2300      	movs	r3, #0
 800565c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800565e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8005662:	460b      	mov	r3, r1
 8005664:	4313      	orrs	r3, r2
 8005666:	d009      	beq.n	800567c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005668:	4baa      	ldr	r3, [pc, #680]	; (8005914 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800566a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800566c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8005670:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005674:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005676:	4aa7      	ldr	r2, [pc, #668]	; (8005914 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005678:	430b      	orrs	r3, r1
 800567a:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800567c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005684:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8005688:	653b      	str	r3, [r7, #80]	; 0x50
 800568a:	2300      	movs	r3, #0
 800568c:	657b      	str	r3, [r7, #84]	; 0x54
 800568e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8005692:	460b      	mov	r3, r1
 8005694:	4313      	orrs	r3, r2
 8005696:	d00a      	beq.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005698:	4b9e      	ldr	r3, [pc, #632]	; (8005914 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800569a:	691b      	ldr	r3, [r3, #16]
 800569c:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 80056a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056a4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80056a8:	4a9a      	ldr	r2, [pc, #616]	; (8005914 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80056aa:	430b      	orrs	r3, r1
 80056ac:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80056ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056b6:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80056ba:	64bb      	str	r3, [r7, #72]	; 0x48
 80056bc:	2300      	movs	r3, #0
 80056be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80056c0:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80056c4:	460b      	mov	r3, r1
 80056c6:	4313      	orrs	r3, r2
 80056c8:	d009      	beq.n	80056de <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80056ca:	4b92      	ldr	r3, [pc, #584]	; (8005914 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80056cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056ce:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 80056d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80056d8:	4a8e      	ldr	r2, [pc, #568]	; (8005914 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80056da:	430b      	orrs	r3, r1
 80056dc:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80056de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056e6:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 80056ea:	643b      	str	r3, [r7, #64]	; 0x40
 80056ec:	2300      	movs	r3, #0
 80056ee:	647b      	str	r3, [r7, #68]	; 0x44
 80056f0:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80056f4:	460b      	mov	r3, r1
 80056f6:	4313      	orrs	r3, r2
 80056f8:	d00e      	beq.n	8005718 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80056fa:	4b86      	ldr	r3, [pc, #536]	; (8005914 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80056fc:	691b      	ldr	r3, [r3, #16]
 80056fe:	4a85      	ldr	r2, [pc, #532]	; (8005914 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005700:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005704:	6113      	str	r3, [r2, #16]
 8005706:	4b83      	ldr	r3, [pc, #524]	; (8005914 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005708:	6919      	ldr	r1, [r3, #16]
 800570a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800570e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005712:	4a80      	ldr	r2, [pc, #512]	; (8005914 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005714:	430b      	orrs	r3, r1
 8005716:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005718:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800571c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005720:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8005724:	63bb      	str	r3, [r7, #56]	; 0x38
 8005726:	2300      	movs	r3, #0
 8005728:	63fb      	str	r3, [r7, #60]	; 0x3c
 800572a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800572e:	460b      	mov	r3, r1
 8005730:	4313      	orrs	r3, r2
 8005732:	d009      	beq.n	8005748 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005734:	4b77      	ldr	r3, [pc, #476]	; (8005914 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005736:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005738:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800573c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005740:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005742:	4a74      	ldr	r2, [pc, #464]	; (8005914 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005744:	430b      	orrs	r3, r1
 8005746:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005748:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800574c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005750:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8005754:	633b      	str	r3, [r7, #48]	; 0x30
 8005756:	2300      	movs	r3, #0
 8005758:	637b      	str	r3, [r7, #52]	; 0x34
 800575a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800575e:	460b      	mov	r3, r1
 8005760:	4313      	orrs	r3, r2
 8005762:	d00a      	beq.n	800577a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005764:	4b6b      	ldr	r3, [pc, #428]	; (8005914 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005766:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005768:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800576c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005770:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005774:	4a67      	ldr	r2, [pc, #412]	; (8005914 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005776:	430b      	orrs	r3, r1
 8005778:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800577a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800577e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005782:	2100      	movs	r1, #0
 8005784:	62b9      	str	r1, [r7, #40]	; 0x28
 8005786:	f003 0301 	and.w	r3, r3, #1
 800578a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800578c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8005790:	460b      	mov	r3, r1
 8005792:	4313      	orrs	r3, r2
 8005794:	d011      	beq.n	80057ba <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005796:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800579a:	3308      	adds	r3, #8
 800579c:	2100      	movs	r1, #0
 800579e:	4618      	mov	r0, r3
 80057a0:	f000 fb78 	bl	8005e94 <RCCEx_PLL2_Config>
 80057a4:	4603      	mov	r3, r0
 80057a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80057aa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d003      	beq.n	80057ba <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80057b6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80057ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057c2:	2100      	movs	r1, #0
 80057c4:	6239      	str	r1, [r7, #32]
 80057c6:	f003 0302 	and.w	r3, r3, #2
 80057ca:	627b      	str	r3, [r7, #36]	; 0x24
 80057cc:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80057d0:	460b      	mov	r3, r1
 80057d2:	4313      	orrs	r3, r2
 80057d4:	d011      	beq.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80057d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057da:	3308      	adds	r3, #8
 80057dc:	2101      	movs	r1, #1
 80057de:	4618      	mov	r0, r3
 80057e0:	f000 fb58 	bl	8005e94 <RCCEx_PLL2_Config>
 80057e4:	4603      	mov	r3, r0
 80057e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80057ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d003      	beq.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80057f6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80057fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005802:	2100      	movs	r1, #0
 8005804:	61b9      	str	r1, [r7, #24]
 8005806:	f003 0304 	and.w	r3, r3, #4
 800580a:	61fb      	str	r3, [r7, #28]
 800580c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005810:	460b      	mov	r3, r1
 8005812:	4313      	orrs	r3, r2
 8005814:	d011      	beq.n	800583a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005816:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800581a:	3308      	adds	r3, #8
 800581c:	2102      	movs	r1, #2
 800581e:	4618      	mov	r0, r3
 8005820:	f000 fb38 	bl	8005e94 <RCCEx_PLL2_Config>
 8005824:	4603      	mov	r3, r0
 8005826:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800582a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800582e:	2b00      	cmp	r3, #0
 8005830:	d003      	beq.n	800583a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005832:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005836:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800583a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800583e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005842:	2100      	movs	r1, #0
 8005844:	6139      	str	r1, [r7, #16]
 8005846:	f003 0308 	and.w	r3, r3, #8
 800584a:	617b      	str	r3, [r7, #20]
 800584c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005850:	460b      	mov	r3, r1
 8005852:	4313      	orrs	r3, r2
 8005854:	d011      	beq.n	800587a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005856:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800585a:	3328      	adds	r3, #40	; 0x28
 800585c:	2100      	movs	r1, #0
 800585e:	4618      	mov	r0, r3
 8005860:	f000 fbca 	bl	8005ff8 <RCCEx_PLL3_Config>
 8005864:	4603      	mov	r3, r0
 8005866:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800586a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800586e:	2b00      	cmp	r3, #0
 8005870:	d003      	beq.n	800587a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005872:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005876:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800587a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800587e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005882:	2100      	movs	r1, #0
 8005884:	60b9      	str	r1, [r7, #8]
 8005886:	f003 0310 	and.w	r3, r3, #16
 800588a:	60fb      	str	r3, [r7, #12]
 800588c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005890:	460b      	mov	r3, r1
 8005892:	4313      	orrs	r3, r2
 8005894:	d011      	beq.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005896:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800589a:	3328      	adds	r3, #40	; 0x28
 800589c:	2101      	movs	r1, #1
 800589e:	4618      	mov	r0, r3
 80058a0:	f000 fbaa 	bl	8005ff8 <RCCEx_PLL3_Config>
 80058a4:	4603      	mov	r3, r0
 80058a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80058aa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d003      	beq.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80058b6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80058ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058c2:	2100      	movs	r1, #0
 80058c4:	6039      	str	r1, [r7, #0]
 80058c6:	f003 0320 	and.w	r3, r3, #32
 80058ca:	607b      	str	r3, [r7, #4]
 80058cc:	e9d7 1200 	ldrd	r1, r2, [r7]
 80058d0:	460b      	mov	r3, r1
 80058d2:	4313      	orrs	r3, r2
 80058d4:	d011      	beq.n	80058fa <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80058d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058da:	3328      	adds	r3, #40	; 0x28
 80058dc:	2102      	movs	r1, #2
 80058de:	4618      	mov	r0, r3
 80058e0:	f000 fb8a 	bl	8005ff8 <RCCEx_PLL3_Config>
 80058e4:	4603      	mov	r3, r0
 80058e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80058ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d003      	beq.n	80058fa <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80058f6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 80058fa:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d101      	bne.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8005902:	2300      	movs	r3, #0
 8005904:	e000      	b.n	8005908 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8005906:	2301      	movs	r3, #1
}
 8005908:	4618      	mov	r0, r3
 800590a:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800590e:	46bd      	mov	sp, r7
 8005910:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005914:	58024400 	.word	0x58024400

08005918 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005918:	b580      	push	{r7, lr}
 800591a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800591c:	f7fe fd54 	bl	80043c8 <HAL_RCC_GetHCLKFreq>
 8005920:	4602      	mov	r2, r0
 8005922:	4b06      	ldr	r3, [pc, #24]	; (800593c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005924:	6a1b      	ldr	r3, [r3, #32]
 8005926:	091b      	lsrs	r3, r3, #4
 8005928:	f003 0307 	and.w	r3, r3, #7
 800592c:	4904      	ldr	r1, [pc, #16]	; (8005940 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800592e:	5ccb      	ldrb	r3, [r1, r3]
 8005930:	f003 031f 	and.w	r3, r3, #31
 8005934:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005938:	4618      	mov	r0, r3
 800593a:	bd80      	pop	{r7, pc}
 800593c:	58024400 	.word	0x58024400
 8005940:	0800f83c 	.word	0x0800f83c

08005944 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005944:	b480      	push	{r7}
 8005946:	b089      	sub	sp, #36	; 0x24
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800594c:	4ba1      	ldr	r3, [pc, #644]	; (8005bd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800594e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005950:	f003 0303 	and.w	r3, r3, #3
 8005954:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8005956:	4b9f      	ldr	r3, [pc, #636]	; (8005bd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800595a:	0b1b      	lsrs	r3, r3, #12
 800595c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005960:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005962:	4b9c      	ldr	r3, [pc, #624]	; (8005bd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005966:	091b      	lsrs	r3, r3, #4
 8005968:	f003 0301 	and.w	r3, r3, #1
 800596c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800596e:	4b99      	ldr	r3, [pc, #612]	; (8005bd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005970:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005972:	08db      	lsrs	r3, r3, #3
 8005974:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005978:	693a      	ldr	r2, [r7, #16]
 800597a:	fb02 f303 	mul.w	r3, r2, r3
 800597e:	ee07 3a90 	vmov	s15, r3
 8005982:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005986:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800598a:	697b      	ldr	r3, [r7, #20]
 800598c:	2b00      	cmp	r3, #0
 800598e:	f000 8111 	beq.w	8005bb4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005992:	69bb      	ldr	r3, [r7, #24]
 8005994:	2b02      	cmp	r3, #2
 8005996:	f000 8083 	beq.w	8005aa0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800599a:	69bb      	ldr	r3, [r7, #24]
 800599c:	2b02      	cmp	r3, #2
 800599e:	f200 80a1 	bhi.w	8005ae4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80059a2:	69bb      	ldr	r3, [r7, #24]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d003      	beq.n	80059b0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80059a8:	69bb      	ldr	r3, [r7, #24]
 80059aa:	2b01      	cmp	r3, #1
 80059ac:	d056      	beq.n	8005a5c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80059ae:	e099      	b.n	8005ae4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80059b0:	4b88      	ldr	r3, [pc, #544]	; (8005bd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f003 0320 	and.w	r3, r3, #32
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d02d      	beq.n	8005a18 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80059bc:	4b85      	ldr	r3, [pc, #532]	; (8005bd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	08db      	lsrs	r3, r3, #3
 80059c2:	f003 0303 	and.w	r3, r3, #3
 80059c6:	4a84      	ldr	r2, [pc, #528]	; (8005bd8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80059c8:	fa22 f303 	lsr.w	r3, r2, r3
 80059cc:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80059ce:	68bb      	ldr	r3, [r7, #8]
 80059d0:	ee07 3a90 	vmov	s15, r3
 80059d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059d8:	697b      	ldr	r3, [r7, #20]
 80059da:	ee07 3a90 	vmov	s15, r3
 80059de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059e6:	4b7b      	ldr	r3, [pc, #492]	; (8005bd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80059e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059ee:	ee07 3a90 	vmov	s15, r3
 80059f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80059fa:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005bdc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80059fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a12:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005a16:	e087      	b.n	8005b28 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005a18:	697b      	ldr	r3, [r7, #20]
 8005a1a:	ee07 3a90 	vmov	s15, r3
 8005a1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a22:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005be0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005a26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a2a:	4b6a      	ldr	r3, [pc, #424]	; (8005bd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005a2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a32:	ee07 3a90 	vmov	s15, r3
 8005a36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a3a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005a3e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005bdc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005a42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a56:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005a5a:	e065      	b.n	8005b28 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005a5c:	697b      	ldr	r3, [r7, #20]
 8005a5e:	ee07 3a90 	vmov	s15, r3
 8005a62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a66:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005be4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005a6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a6e:	4b59      	ldr	r3, [pc, #356]	; (8005bd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005a70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a76:	ee07 3a90 	vmov	s15, r3
 8005a7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a7e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005a82:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005bdc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005a86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a9a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005a9e:	e043      	b.n	8005b28 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005aa0:	697b      	ldr	r3, [r7, #20]
 8005aa2:	ee07 3a90 	vmov	s15, r3
 8005aa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005aaa:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005be8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005aae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ab2:	4b48      	ldr	r3, [pc, #288]	; (8005bd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ab6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005aba:	ee07 3a90 	vmov	s15, r3
 8005abe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ac2:	ed97 6a03 	vldr	s12, [r7, #12]
 8005ac6:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005bdc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005aca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ace:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ad2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ad6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ada:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ade:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005ae2:	e021      	b.n	8005b28 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005ae4:	697b      	ldr	r3, [r7, #20]
 8005ae6:	ee07 3a90 	vmov	s15, r3
 8005aea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005aee:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005be4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005af2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005af6:	4b37      	ldr	r3, [pc, #220]	; (8005bd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005af8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005afa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005afe:	ee07 3a90 	vmov	s15, r3
 8005b02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b06:	ed97 6a03 	vldr	s12, [r7, #12]
 8005b0a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005bdc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005b0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005b1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b22:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005b26:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005b28:	4b2a      	ldr	r3, [pc, #168]	; (8005bd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b2c:	0a5b      	lsrs	r3, r3, #9
 8005b2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b32:	ee07 3a90 	vmov	s15, r3
 8005b36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b3a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005b3e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005b42:	edd7 6a07 	vldr	s13, [r7, #28]
 8005b46:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b4e:	ee17 2a90 	vmov	r2, s15
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8005b56:	4b1f      	ldr	r3, [pc, #124]	; (8005bd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b5a:	0c1b      	lsrs	r3, r3, #16
 8005b5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b60:	ee07 3a90 	vmov	s15, r3
 8005b64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b68:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005b6c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005b70:	edd7 6a07 	vldr	s13, [r7, #28]
 8005b74:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b7c:	ee17 2a90 	vmov	r2, s15
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8005b84:	4b13      	ldr	r3, [pc, #76]	; (8005bd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b88:	0e1b      	lsrs	r3, r3, #24
 8005b8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b8e:	ee07 3a90 	vmov	s15, r3
 8005b92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b96:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005b9a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005b9e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005ba2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ba6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005baa:	ee17 2a90 	vmov	r2, s15
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005bb2:	e008      	b.n	8005bc6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	609a      	str	r2, [r3, #8]
}
 8005bc6:	bf00      	nop
 8005bc8:	3724      	adds	r7, #36	; 0x24
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd0:	4770      	bx	lr
 8005bd2:	bf00      	nop
 8005bd4:	58024400 	.word	0x58024400
 8005bd8:	03d09000 	.word	0x03d09000
 8005bdc:	46000000 	.word	0x46000000
 8005be0:	4c742400 	.word	0x4c742400
 8005be4:	4a742400 	.word	0x4a742400
 8005be8:	4bbebc20 	.word	0x4bbebc20

08005bec <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005bec:	b480      	push	{r7}
 8005bee:	b089      	sub	sp, #36	; 0x24
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005bf4:	4ba1      	ldr	r3, [pc, #644]	; (8005e7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bf8:	f003 0303 	and.w	r3, r3, #3
 8005bfc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8005bfe:	4b9f      	ldr	r3, [pc, #636]	; (8005e7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005c00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c02:	0d1b      	lsrs	r3, r3, #20
 8005c04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005c08:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005c0a:	4b9c      	ldr	r3, [pc, #624]	; (8005e7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c0e:	0a1b      	lsrs	r3, r3, #8
 8005c10:	f003 0301 	and.w	r3, r3, #1
 8005c14:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005c16:	4b99      	ldr	r3, [pc, #612]	; (8005e7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c1a:	08db      	lsrs	r3, r3, #3
 8005c1c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005c20:	693a      	ldr	r2, [r7, #16]
 8005c22:	fb02 f303 	mul.w	r3, r2, r3
 8005c26:	ee07 3a90 	vmov	s15, r3
 8005c2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c2e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005c32:	697b      	ldr	r3, [r7, #20]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	f000 8111 	beq.w	8005e5c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005c3a:	69bb      	ldr	r3, [r7, #24]
 8005c3c:	2b02      	cmp	r3, #2
 8005c3e:	f000 8083 	beq.w	8005d48 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005c42:	69bb      	ldr	r3, [r7, #24]
 8005c44:	2b02      	cmp	r3, #2
 8005c46:	f200 80a1 	bhi.w	8005d8c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005c4a:	69bb      	ldr	r3, [r7, #24]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d003      	beq.n	8005c58 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005c50:	69bb      	ldr	r3, [r7, #24]
 8005c52:	2b01      	cmp	r3, #1
 8005c54:	d056      	beq.n	8005d04 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005c56:	e099      	b.n	8005d8c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005c58:	4b88      	ldr	r3, [pc, #544]	; (8005e7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f003 0320 	and.w	r3, r3, #32
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d02d      	beq.n	8005cc0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005c64:	4b85      	ldr	r3, [pc, #532]	; (8005e7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	08db      	lsrs	r3, r3, #3
 8005c6a:	f003 0303 	and.w	r3, r3, #3
 8005c6e:	4a84      	ldr	r2, [pc, #528]	; (8005e80 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005c70:	fa22 f303 	lsr.w	r3, r2, r3
 8005c74:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005c76:	68bb      	ldr	r3, [r7, #8]
 8005c78:	ee07 3a90 	vmov	s15, r3
 8005c7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c80:	697b      	ldr	r3, [r7, #20]
 8005c82:	ee07 3a90 	vmov	s15, r3
 8005c86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c8e:	4b7b      	ldr	r3, [pc, #492]	; (8005e7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c96:	ee07 3a90 	vmov	s15, r3
 8005c9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c9e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005ca2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005e84 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005ca6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005caa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005cae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005cb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005cb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cba:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005cbe:	e087      	b.n	8005dd0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005cc0:	697b      	ldr	r3, [r7, #20]
 8005cc2:	ee07 3a90 	vmov	s15, r3
 8005cc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cca:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005e88 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005cce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005cd2:	4b6a      	ldr	r3, [pc, #424]	; (8005e7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cda:	ee07 3a90 	vmov	s15, r3
 8005cde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ce2:	ed97 6a03 	vldr	s12, [r7, #12]
 8005ce6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005e84 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005cea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005cee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005cf2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005cf6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005cfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cfe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005d02:	e065      	b.n	8005dd0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005d04:	697b      	ldr	r3, [r7, #20]
 8005d06:	ee07 3a90 	vmov	s15, r3
 8005d0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d0e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005e8c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005d12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d16:	4b59      	ldr	r3, [pc, #356]	; (8005e7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d1e:	ee07 3a90 	vmov	s15, r3
 8005d22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d26:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d2a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005e84 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005d2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d42:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005d46:	e043      	b.n	8005dd0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005d48:	697b      	ldr	r3, [r7, #20]
 8005d4a:	ee07 3a90 	vmov	s15, r3
 8005d4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d52:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005e90 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005d56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d5a:	4b48      	ldr	r3, [pc, #288]	; (8005e7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d62:	ee07 3a90 	vmov	s15, r3
 8005d66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d6a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d6e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005e84 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005d72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d86:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005d8a:	e021      	b.n	8005dd0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005d8c:	697b      	ldr	r3, [r7, #20]
 8005d8e:	ee07 3a90 	vmov	s15, r3
 8005d92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d96:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005e8c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005d9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d9e:	4b37      	ldr	r3, [pc, #220]	; (8005e7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005da2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005da6:	ee07 3a90 	vmov	s15, r3
 8005daa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005dae:	ed97 6a03 	vldr	s12, [r7, #12]
 8005db2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005e84 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005db6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005dba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005dbe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005dc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005dc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005dca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005dce:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8005dd0:	4b2a      	ldr	r3, [pc, #168]	; (8005e7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dd4:	0a5b      	lsrs	r3, r3, #9
 8005dd6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005dda:	ee07 3a90 	vmov	s15, r3
 8005dde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005de2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005de6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005dea:	edd7 6a07 	vldr	s13, [r7, #28]
 8005dee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005df2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005df6:	ee17 2a90 	vmov	r2, s15
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8005dfe:	4b1f      	ldr	r3, [pc, #124]	; (8005e7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e02:	0c1b      	lsrs	r3, r3, #16
 8005e04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e08:	ee07 3a90 	vmov	s15, r3
 8005e0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e10:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005e14:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005e18:	edd7 6a07 	vldr	s13, [r7, #28]
 8005e1c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e24:	ee17 2a90 	vmov	r2, s15
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8005e2c:	4b13      	ldr	r3, [pc, #76]	; (8005e7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e30:	0e1b      	lsrs	r3, r3, #24
 8005e32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e36:	ee07 3a90 	vmov	s15, r3
 8005e3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e3e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005e42:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005e46:	edd7 6a07 	vldr	s13, [r7, #28]
 8005e4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e52:	ee17 2a90 	vmov	r2, s15
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005e5a:	e008      	b.n	8005e6e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2200      	movs	r2, #0
 8005e60:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2200      	movs	r2, #0
 8005e66:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	609a      	str	r2, [r3, #8]
}
 8005e6e:	bf00      	nop
 8005e70:	3724      	adds	r7, #36	; 0x24
 8005e72:	46bd      	mov	sp, r7
 8005e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e78:	4770      	bx	lr
 8005e7a:	bf00      	nop
 8005e7c:	58024400 	.word	0x58024400
 8005e80:	03d09000 	.word	0x03d09000
 8005e84:	46000000 	.word	0x46000000
 8005e88:	4c742400 	.word	0x4c742400
 8005e8c:	4a742400 	.word	0x4a742400
 8005e90:	4bbebc20 	.word	0x4bbebc20

08005e94 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b084      	sub	sp, #16
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
 8005e9c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005ea2:	4b53      	ldr	r3, [pc, #332]	; (8005ff0 <RCCEx_PLL2_Config+0x15c>)
 8005ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ea6:	f003 0303 	and.w	r3, r3, #3
 8005eaa:	2b03      	cmp	r3, #3
 8005eac:	d101      	bne.n	8005eb2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005eae:	2301      	movs	r3, #1
 8005eb0:	e099      	b.n	8005fe6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005eb2:	4b4f      	ldr	r3, [pc, #316]	; (8005ff0 <RCCEx_PLL2_Config+0x15c>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4a4e      	ldr	r2, [pc, #312]	; (8005ff0 <RCCEx_PLL2_Config+0x15c>)
 8005eb8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005ebc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ebe:	f7fb fcd1 	bl	8001864 <HAL_GetTick>
 8005ec2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005ec4:	e008      	b.n	8005ed8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005ec6:	f7fb fccd 	bl	8001864 <HAL_GetTick>
 8005eca:	4602      	mov	r2, r0
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	1ad3      	subs	r3, r2, r3
 8005ed0:	2b02      	cmp	r3, #2
 8005ed2:	d901      	bls.n	8005ed8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005ed4:	2303      	movs	r3, #3
 8005ed6:	e086      	b.n	8005fe6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005ed8:	4b45      	ldr	r3, [pc, #276]	; (8005ff0 <RCCEx_PLL2_Config+0x15c>)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d1f0      	bne.n	8005ec6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005ee4:	4b42      	ldr	r3, [pc, #264]	; (8005ff0 <RCCEx_PLL2_Config+0x15c>)
 8005ee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ee8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	031b      	lsls	r3, r3, #12
 8005ef2:	493f      	ldr	r1, [pc, #252]	; (8005ff0 <RCCEx_PLL2_Config+0x15c>)
 8005ef4:	4313      	orrs	r3, r2
 8005ef6:	628b      	str	r3, [r1, #40]	; 0x28
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	685b      	ldr	r3, [r3, #4]
 8005efc:	3b01      	subs	r3, #1
 8005efe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	689b      	ldr	r3, [r3, #8]
 8005f06:	3b01      	subs	r3, #1
 8005f08:	025b      	lsls	r3, r3, #9
 8005f0a:	b29b      	uxth	r3, r3
 8005f0c:	431a      	orrs	r2, r3
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	68db      	ldr	r3, [r3, #12]
 8005f12:	3b01      	subs	r3, #1
 8005f14:	041b      	lsls	r3, r3, #16
 8005f16:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005f1a:	431a      	orrs	r2, r3
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	691b      	ldr	r3, [r3, #16]
 8005f20:	3b01      	subs	r3, #1
 8005f22:	061b      	lsls	r3, r3, #24
 8005f24:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005f28:	4931      	ldr	r1, [pc, #196]	; (8005ff0 <RCCEx_PLL2_Config+0x15c>)
 8005f2a:	4313      	orrs	r3, r2
 8005f2c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005f2e:	4b30      	ldr	r3, [pc, #192]	; (8005ff0 <RCCEx_PLL2_Config+0x15c>)
 8005f30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f32:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	695b      	ldr	r3, [r3, #20]
 8005f3a:	492d      	ldr	r1, [pc, #180]	; (8005ff0 <RCCEx_PLL2_Config+0x15c>)
 8005f3c:	4313      	orrs	r3, r2
 8005f3e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005f40:	4b2b      	ldr	r3, [pc, #172]	; (8005ff0 <RCCEx_PLL2_Config+0x15c>)
 8005f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f44:	f023 0220 	bic.w	r2, r3, #32
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	699b      	ldr	r3, [r3, #24]
 8005f4c:	4928      	ldr	r1, [pc, #160]	; (8005ff0 <RCCEx_PLL2_Config+0x15c>)
 8005f4e:	4313      	orrs	r3, r2
 8005f50:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005f52:	4b27      	ldr	r3, [pc, #156]	; (8005ff0 <RCCEx_PLL2_Config+0x15c>)
 8005f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f56:	4a26      	ldr	r2, [pc, #152]	; (8005ff0 <RCCEx_PLL2_Config+0x15c>)
 8005f58:	f023 0310 	bic.w	r3, r3, #16
 8005f5c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005f5e:	4b24      	ldr	r3, [pc, #144]	; (8005ff0 <RCCEx_PLL2_Config+0x15c>)
 8005f60:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005f62:	4b24      	ldr	r3, [pc, #144]	; (8005ff4 <RCCEx_PLL2_Config+0x160>)
 8005f64:	4013      	ands	r3, r2
 8005f66:	687a      	ldr	r2, [r7, #4]
 8005f68:	69d2      	ldr	r2, [r2, #28]
 8005f6a:	00d2      	lsls	r2, r2, #3
 8005f6c:	4920      	ldr	r1, [pc, #128]	; (8005ff0 <RCCEx_PLL2_Config+0x15c>)
 8005f6e:	4313      	orrs	r3, r2
 8005f70:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005f72:	4b1f      	ldr	r3, [pc, #124]	; (8005ff0 <RCCEx_PLL2_Config+0x15c>)
 8005f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f76:	4a1e      	ldr	r2, [pc, #120]	; (8005ff0 <RCCEx_PLL2_Config+0x15c>)
 8005f78:	f043 0310 	orr.w	r3, r3, #16
 8005f7c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d106      	bne.n	8005f92 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005f84:	4b1a      	ldr	r3, [pc, #104]	; (8005ff0 <RCCEx_PLL2_Config+0x15c>)
 8005f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f88:	4a19      	ldr	r2, [pc, #100]	; (8005ff0 <RCCEx_PLL2_Config+0x15c>)
 8005f8a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005f8e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005f90:	e00f      	b.n	8005fb2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	2b01      	cmp	r3, #1
 8005f96:	d106      	bne.n	8005fa6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005f98:	4b15      	ldr	r3, [pc, #84]	; (8005ff0 <RCCEx_PLL2_Config+0x15c>)
 8005f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f9c:	4a14      	ldr	r2, [pc, #80]	; (8005ff0 <RCCEx_PLL2_Config+0x15c>)
 8005f9e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005fa2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005fa4:	e005      	b.n	8005fb2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005fa6:	4b12      	ldr	r3, [pc, #72]	; (8005ff0 <RCCEx_PLL2_Config+0x15c>)
 8005fa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005faa:	4a11      	ldr	r2, [pc, #68]	; (8005ff0 <RCCEx_PLL2_Config+0x15c>)
 8005fac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005fb0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005fb2:	4b0f      	ldr	r3, [pc, #60]	; (8005ff0 <RCCEx_PLL2_Config+0x15c>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4a0e      	ldr	r2, [pc, #56]	; (8005ff0 <RCCEx_PLL2_Config+0x15c>)
 8005fb8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005fbc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005fbe:	f7fb fc51 	bl	8001864 <HAL_GetTick>
 8005fc2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005fc4:	e008      	b.n	8005fd8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005fc6:	f7fb fc4d 	bl	8001864 <HAL_GetTick>
 8005fca:	4602      	mov	r2, r0
 8005fcc:	68bb      	ldr	r3, [r7, #8]
 8005fce:	1ad3      	subs	r3, r2, r3
 8005fd0:	2b02      	cmp	r3, #2
 8005fd2:	d901      	bls.n	8005fd8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005fd4:	2303      	movs	r3, #3
 8005fd6:	e006      	b.n	8005fe6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005fd8:	4b05      	ldr	r3, [pc, #20]	; (8005ff0 <RCCEx_PLL2_Config+0x15c>)
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d0f0      	beq.n	8005fc6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005fe4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	3710      	adds	r7, #16
 8005fea:	46bd      	mov	sp, r7
 8005fec:	bd80      	pop	{r7, pc}
 8005fee:	bf00      	nop
 8005ff0:	58024400 	.word	0x58024400
 8005ff4:	ffff0007 	.word	0xffff0007

08005ff8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b084      	sub	sp, #16
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
 8006000:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006002:	2300      	movs	r3, #0
 8006004:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006006:	4b53      	ldr	r3, [pc, #332]	; (8006154 <RCCEx_PLL3_Config+0x15c>)
 8006008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800600a:	f003 0303 	and.w	r3, r3, #3
 800600e:	2b03      	cmp	r3, #3
 8006010:	d101      	bne.n	8006016 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006012:	2301      	movs	r3, #1
 8006014:	e099      	b.n	800614a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006016:	4b4f      	ldr	r3, [pc, #316]	; (8006154 <RCCEx_PLL3_Config+0x15c>)
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4a4e      	ldr	r2, [pc, #312]	; (8006154 <RCCEx_PLL3_Config+0x15c>)
 800601c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006020:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006022:	f7fb fc1f 	bl	8001864 <HAL_GetTick>
 8006026:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006028:	e008      	b.n	800603c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800602a:	f7fb fc1b 	bl	8001864 <HAL_GetTick>
 800602e:	4602      	mov	r2, r0
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	1ad3      	subs	r3, r2, r3
 8006034:	2b02      	cmp	r3, #2
 8006036:	d901      	bls.n	800603c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006038:	2303      	movs	r3, #3
 800603a:	e086      	b.n	800614a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800603c:	4b45      	ldr	r3, [pc, #276]	; (8006154 <RCCEx_PLL3_Config+0x15c>)
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006044:	2b00      	cmp	r3, #0
 8006046:	d1f0      	bne.n	800602a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006048:	4b42      	ldr	r3, [pc, #264]	; (8006154 <RCCEx_PLL3_Config+0x15c>)
 800604a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800604c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	051b      	lsls	r3, r3, #20
 8006056:	493f      	ldr	r1, [pc, #252]	; (8006154 <RCCEx_PLL3_Config+0x15c>)
 8006058:	4313      	orrs	r3, r2
 800605a:	628b      	str	r3, [r1, #40]	; 0x28
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	685b      	ldr	r3, [r3, #4]
 8006060:	3b01      	subs	r3, #1
 8006062:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	689b      	ldr	r3, [r3, #8]
 800606a:	3b01      	subs	r3, #1
 800606c:	025b      	lsls	r3, r3, #9
 800606e:	b29b      	uxth	r3, r3
 8006070:	431a      	orrs	r2, r3
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	68db      	ldr	r3, [r3, #12]
 8006076:	3b01      	subs	r3, #1
 8006078:	041b      	lsls	r3, r3, #16
 800607a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800607e:	431a      	orrs	r2, r3
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	691b      	ldr	r3, [r3, #16]
 8006084:	3b01      	subs	r3, #1
 8006086:	061b      	lsls	r3, r3, #24
 8006088:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800608c:	4931      	ldr	r1, [pc, #196]	; (8006154 <RCCEx_PLL3_Config+0x15c>)
 800608e:	4313      	orrs	r3, r2
 8006090:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006092:	4b30      	ldr	r3, [pc, #192]	; (8006154 <RCCEx_PLL3_Config+0x15c>)
 8006094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006096:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	695b      	ldr	r3, [r3, #20]
 800609e:	492d      	ldr	r1, [pc, #180]	; (8006154 <RCCEx_PLL3_Config+0x15c>)
 80060a0:	4313      	orrs	r3, r2
 80060a2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80060a4:	4b2b      	ldr	r3, [pc, #172]	; (8006154 <RCCEx_PLL3_Config+0x15c>)
 80060a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060a8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	699b      	ldr	r3, [r3, #24]
 80060b0:	4928      	ldr	r1, [pc, #160]	; (8006154 <RCCEx_PLL3_Config+0x15c>)
 80060b2:	4313      	orrs	r3, r2
 80060b4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80060b6:	4b27      	ldr	r3, [pc, #156]	; (8006154 <RCCEx_PLL3_Config+0x15c>)
 80060b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060ba:	4a26      	ldr	r2, [pc, #152]	; (8006154 <RCCEx_PLL3_Config+0x15c>)
 80060bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80060c0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80060c2:	4b24      	ldr	r3, [pc, #144]	; (8006154 <RCCEx_PLL3_Config+0x15c>)
 80060c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80060c6:	4b24      	ldr	r3, [pc, #144]	; (8006158 <RCCEx_PLL3_Config+0x160>)
 80060c8:	4013      	ands	r3, r2
 80060ca:	687a      	ldr	r2, [r7, #4]
 80060cc:	69d2      	ldr	r2, [r2, #28]
 80060ce:	00d2      	lsls	r2, r2, #3
 80060d0:	4920      	ldr	r1, [pc, #128]	; (8006154 <RCCEx_PLL3_Config+0x15c>)
 80060d2:	4313      	orrs	r3, r2
 80060d4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80060d6:	4b1f      	ldr	r3, [pc, #124]	; (8006154 <RCCEx_PLL3_Config+0x15c>)
 80060d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060da:	4a1e      	ldr	r2, [pc, #120]	; (8006154 <RCCEx_PLL3_Config+0x15c>)
 80060dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060e0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d106      	bne.n	80060f6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80060e8:	4b1a      	ldr	r3, [pc, #104]	; (8006154 <RCCEx_PLL3_Config+0x15c>)
 80060ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060ec:	4a19      	ldr	r2, [pc, #100]	; (8006154 <RCCEx_PLL3_Config+0x15c>)
 80060ee:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80060f2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80060f4:	e00f      	b.n	8006116 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	2b01      	cmp	r3, #1
 80060fa:	d106      	bne.n	800610a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80060fc:	4b15      	ldr	r3, [pc, #84]	; (8006154 <RCCEx_PLL3_Config+0x15c>)
 80060fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006100:	4a14      	ldr	r2, [pc, #80]	; (8006154 <RCCEx_PLL3_Config+0x15c>)
 8006102:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006106:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006108:	e005      	b.n	8006116 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800610a:	4b12      	ldr	r3, [pc, #72]	; (8006154 <RCCEx_PLL3_Config+0x15c>)
 800610c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800610e:	4a11      	ldr	r2, [pc, #68]	; (8006154 <RCCEx_PLL3_Config+0x15c>)
 8006110:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006114:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006116:	4b0f      	ldr	r3, [pc, #60]	; (8006154 <RCCEx_PLL3_Config+0x15c>)
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	4a0e      	ldr	r2, [pc, #56]	; (8006154 <RCCEx_PLL3_Config+0x15c>)
 800611c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006120:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006122:	f7fb fb9f 	bl	8001864 <HAL_GetTick>
 8006126:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006128:	e008      	b.n	800613c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800612a:	f7fb fb9b 	bl	8001864 <HAL_GetTick>
 800612e:	4602      	mov	r2, r0
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	1ad3      	subs	r3, r2, r3
 8006134:	2b02      	cmp	r3, #2
 8006136:	d901      	bls.n	800613c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006138:	2303      	movs	r3, #3
 800613a:	e006      	b.n	800614a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800613c:	4b05      	ldr	r3, [pc, #20]	; (8006154 <RCCEx_PLL3_Config+0x15c>)
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006144:	2b00      	cmp	r3, #0
 8006146:	d0f0      	beq.n	800612a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006148:	7bfb      	ldrb	r3, [r7, #15]
}
 800614a:	4618      	mov	r0, r3
 800614c:	3710      	adds	r7, #16
 800614e:	46bd      	mov	sp, r7
 8006150:	bd80      	pop	{r7, pc}
 8006152:	bf00      	nop
 8006154:	58024400 	.word	0x58024400
 8006158:	ffff0007 	.word	0xffff0007

0800615c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b082      	sub	sp, #8
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d101      	bne.n	800616e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800616a:	2301      	movs	r3, #1
 800616c:	e049      	b.n	8006202 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006174:	b2db      	uxtb	r3, r3
 8006176:	2b00      	cmp	r3, #0
 8006178:	d106      	bne.n	8006188 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2200      	movs	r2, #0
 800617e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006182:	6878      	ldr	r0, [r7, #4]
 8006184:	f000 f841 	bl	800620a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2202      	movs	r2, #2
 800618c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681a      	ldr	r2, [r3, #0]
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	3304      	adds	r3, #4
 8006198:	4619      	mov	r1, r3
 800619a:	4610      	mov	r0, r2
 800619c:	f000 fa00 	bl	80065a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2201      	movs	r2, #1
 80061a4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2201      	movs	r2, #1
 80061ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2201      	movs	r2, #1
 80061b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2201      	movs	r2, #1
 80061bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2201      	movs	r2, #1
 80061c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2201      	movs	r2, #1
 80061cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2201      	movs	r2, #1
 80061d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2201      	movs	r2, #1
 80061dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2201      	movs	r2, #1
 80061e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2201      	movs	r2, #1
 80061ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2201      	movs	r2, #1
 80061f4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2201      	movs	r2, #1
 80061fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006200:	2300      	movs	r3, #0
}
 8006202:	4618      	mov	r0, r3
 8006204:	3708      	adds	r7, #8
 8006206:	46bd      	mov	sp, r7
 8006208:	bd80      	pop	{r7, pc}

0800620a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800620a:	b480      	push	{r7}
 800620c:	b083      	sub	sp, #12
 800620e:	af00      	add	r7, sp, #0
 8006210:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006212:	bf00      	nop
 8006214:	370c      	adds	r7, #12
 8006216:	46bd      	mov	sp, r7
 8006218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621c:	4770      	bx	lr
	...

08006220 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006220:	b480      	push	{r7}
 8006222:	b085      	sub	sp, #20
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800622e:	b2db      	uxtb	r3, r3
 8006230:	2b01      	cmp	r3, #1
 8006232:	d001      	beq.n	8006238 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006234:	2301      	movs	r3, #1
 8006236:	e054      	b.n	80062e2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2202      	movs	r2, #2
 800623c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	68da      	ldr	r2, [r3, #12]
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f042 0201 	orr.w	r2, r2, #1
 800624e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	4a26      	ldr	r2, [pc, #152]	; (80062f0 <HAL_TIM_Base_Start_IT+0xd0>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d022      	beq.n	80062a0 <HAL_TIM_Base_Start_IT+0x80>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006262:	d01d      	beq.n	80062a0 <HAL_TIM_Base_Start_IT+0x80>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	4a22      	ldr	r2, [pc, #136]	; (80062f4 <HAL_TIM_Base_Start_IT+0xd4>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d018      	beq.n	80062a0 <HAL_TIM_Base_Start_IT+0x80>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	4a21      	ldr	r2, [pc, #132]	; (80062f8 <HAL_TIM_Base_Start_IT+0xd8>)
 8006274:	4293      	cmp	r3, r2
 8006276:	d013      	beq.n	80062a0 <HAL_TIM_Base_Start_IT+0x80>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	4a1f      	ldr	r2, [pc, #124]	; (80062fc <HAL_TIM_Base_Start_IT+0xdc>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d00e      	beq.n	80062a0 <HAL_TIM_Base_Start_IT+0x80>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	4a1e      	ldr	r2, [pc, #120]	; (8006300 <HAL_TIM_Base_Start_IT+0xe0>)
 8006288:	4293      	cmp	r3, r2
 800628a:	d009      	beq.n	80062a0 <HAL_TIM_Base_Start_IT+0x80>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	4a1c      	ldr	r2, [pc, #112]	; (8006304 <HAL_TIM_Base_Start_IT+0xe4>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d004      	beq.n	80062a0 <HAL_TIM_Base_Start_IT+0x80>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	4a1b      	ldr	r2, [pc, #108]	; (8006308 <HAL_TIM_Base_Start_IT+0xe8>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d115      	bne.n	80062cc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	689a      	ldr	r2, [r3, #8]
 80062a6:	4b19      	ldr	r3, [pc, #100]	; (800630c <HAL_TIM_Base_Start_IT+0xec>)
 80062a8:	4013      	ands	r3, r2
 80062aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	2b06      	cmp	r3, #6
 80062b0:	d015      	beq.n	80062de <HAL_TIM_Base_Start_IT+0xbe>
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062b8:	d011      	beq.n	80062de <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	681a      	ldr	r2, [r3, #0]
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f042 0201 	orr.w	r2, r2, #1
 80062c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062ca:	e008      	b.n	80062de <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	681a      	ldr	r2, [r3, #0]
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f042 0201 	orr.w	r2, r2, #1
 80062da:	601a      	str	r2, [r3, #0]
 80062dc:	e000      	b.n	80062e0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062de:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80062e0:	2300      	movs	r3, #0
}
 80062e2:	4618      	mov	r0, r3
 80062e4:	3714      	adds	r7, #20
 80062e6:	46bd      	mov	sp, r7
 80062e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ec:	4770      	bx	lr
 80062ee:	bf00      	nop
 80062f0:	40010000 	.word	0x40010000
 80062f4:	40000400 	.word	0x40000400
 80062f8:	40000800 	.word	0x40000800
 80062fc:	40000c00 	.word	0x40000c00
 8006300:	40010400 	.word	0x40010400
 8006304:	40001800 	.word	0x40001800
 8006308:	40014000 	.word	0x40014000
 800630c:	00010007 	.word	0x00010007

08006310 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b082      	sub	sp, #8
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	691b      	ldr	r3, [r3, #16]
 800631e:	f003 0302 	and.w	r3, r3, #2
 8006322:	2b02      	cmp	r3, #2
 8006324:	d122      	bne.n	800636c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	68db      	ldr	r3, [r3, #12]
 800632c:	f003 0302 	and.w	r3, r3, #2
 8006330:	2b02      	cmp	r3, #2
 8006332:	d11b      	bne.n	800636c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f06f 0202 	mvn.w	r2, #2
 800633c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2201      	movs	r2, #1
 8006342:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	699b      	ldr	r3, [r3, #24]
 800634a:	f003 0303 	and.w	r3, r3, #3
 800634e:	2b00      	cmp	r3, #0
 8006350:	d003      	beq.n	800635a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006352:	6878      	ldr	r0, [r7, #4]
 8006354:	f000 f905 	bl	8006562 <HAL_TIM_IC_CaptureCallback>
 8006358:	e005      	b.n	8006366 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800635a:	6878      	ldr	r0, [r7, #4]
 800635c:	f000 f8f7 	bl	800654e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006360:	6878      	ldr	r0, [r7, #4]
 8006362:	f000 f908 	bl	8006576 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2200      	movs	r2, #0
 800636a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	691b      	ldr	r3, [r3, #16]
 8006372:	f003 0304 	and.w	r3, r3, #4
 8006376:	2b04      	cmp	r3, #4
 8006378:	d122      	bne.n	80063c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	68db      	ldr	r3, [r3, #12]
 8006380:	f003 0304 	and.w	r3, r3, #4
 8006384:	2b04      	cmp	r3, #4
 8006386:	d11b      	bne.n	80063c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f06f 0204 	mvn.w	r2, #4
 8006390:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2202      	movs	r2, #2
 8006396:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	699b      	ldr	r3, [r3, #24]
 800639e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d003      	beq.n	80063ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80063a6:	6878      	ldr	r0, [r7, #4]
 80063a8:	f000 f8db 	bl	8006562 <HAL_TIM_IC_CaptureCallback>
 80063ac:	e005      	b.n	80063ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80063ae:	6878      	ldr	r0, [r7, #4]
 80063b0:	f000 f8cd 	bl	800654e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063b4:	6878      	ldr	r0, [r7, #4]
 80063b6:	f000 f8de 	bl	8006576 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2200      	movs	r2, #0
 80063be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	691b      	ldr	r3, [r3, #16]
 80063c6:	f003 0308 	and.w	r3, r3, #8
 80063ca:	2b08      	cmp	r3, #8
 80063cc:	d122      	bne.n	8006414 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	68db      	ldr	r3, [r3, #12]
 80063d4:	f003 0308 	and.w	r3, r3, #8
 80063d8:	2b08      	cmp	r3, #8
 80063da:	d11b      	bne.n	8006414 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f06f 0208 	mvn.w	r2, #8
 80063e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	2204      	movs	r2, #4
 80063ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	69db      	ldr	r3, [r3, #28]
 80063f2:	f003 0303 	and.w	r3, r3, #3
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d003      	beq.n	8006402 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80063fa:	6878      	ldr	r0, [r7, #4]
 80063fc:	f000 f8b1 	bl	8006562 <HAL_TIM_IC_CaptureCallback>
 8006400:	e005      	b.n	800640e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006402:	6878      	ldr	r0, [r7, #4]
 8006404:	f000 f8a3 	bl	800654e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006408:	6878      	ldr	r0, [r7, #4]
 800640a:	f000 f8b4 	bl	8006576 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2200      	movs	r2, #0
 8006412:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	691b      	ldr	r3, [r3, #16]
 800641a:	f003 0310 	and.w	r3, r3, #16
 800641e:	2b10      	cmp	r3, #16
 8006420:	d122      	bne.n	8006468 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	68db      	ldr	r3, [r3, #12]
 8006428:	f003 0310 	and.w	r3, r3, #16
 800642c:	2b10      	cmp	r3, #16
 800642e:	d11b      	bne.n	8006468 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f06f 0210 	mvn.w	r2, #16
 8006438:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2208      	movs	r2, #8
 800643e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	69db      	ldr	r3, [r3, #28]
 8006446:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800644a:	2b00      	cmp	r3, #0
 800644c:	d003      	beq.n	8006456 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800644e:	6878      	ldr	r0, [r7, #4]
 8006450:	f000 f887 	bl	8006562 <HAL_TIM_IC_CaptureCallback>
 8006454:	e005      	b.n	8006462 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006456:	6878      	ldr	r0, [r7, #4]
 8006458:	f000 f879 	bl	800654e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800645c:	6878      	ldr	r0, [r7, #4]
 800645e:	f000 f88a 	bl	8006576 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2200      	movs	r2, #0
 8006466:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	691b      	ldr	r3, [r3, #16]
 800646e:	f003 0301 	and.w	r3, r3, #1
 8006472:	2b01      	cmp	r3, #1
 8006474:	d10e      	bne.n	8006494 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	68db      	ldr	r3, [r3, #12]
 800647c:	f003 0301 	and.w	r3, r3, #1
 8006480:	2b01      	cmp	r3, #1
 8006482:	d107      	bne.n	8006494 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f06f 0201 	mvn.w	r2, #1
 800648c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800648e:	6878      	ldr	r0, [r7, #4]
 8006490:	f7fa fd98 	bl	8000fc4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	691b      	ldr	r3, [r3, #16]
 800649a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800649e:	2b80      	cmp	r3, #128	; 0x80
 80064a0:	d10e      	bne.n	80064c0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	68db      	ldr	r3, [r3, #12]
 80064a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064ac:	2b80      	cmp	r3, #128	; 0x80
 80064ae:	d107      	bne.n	80064c0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80064b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80064ba:	6878      	ldr	r0, [r7, #4]
 80064bc:	f000 f914 	bl	80066e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	691b      	ldr	r3, [r3, #16]
 80064c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064ce:	d10e      	bne.n	80064ee <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	68db      	ldr	r3, [r3, #12]
 80064d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064da:	2b80      	cmp	r3, #128	; 0x80
 80064dc:	d107      	bne.n	80064ee <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80064e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80064e8:	6878      	ldr	r0, [r7, #4]
 80064ea:	f000 f907 	bl	80066fc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	691b      	ldr	r3, [r3, #16]
 80064f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064f8:	2b40      	cmp	r3, #64	; 0x40
 80064fa:	d10e      	bne.n	800651a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	68db      	ldr	r3, [r3, #12]
 8006502:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006506:	2b40      	cmp	r3, #64	; 0x40
 8006508:	d107      	bne.n	800651a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006512:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006514:	6878      	ldr	r0, [r7, #4]
 8006516:	f000 f838 	bl	800658a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	691b      	ldr	r3, [r3, #16]
 8006520:	f003 0320 	and.w	r3, r3, #32
 8006524:	2b20      	cmp	r3, #32
 8006526:	d10e      	bne.n	8006546 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	68db      	ldr	r3, [r3, #12]
 800652e:	f003 0320 	and.w	r3, r3, #32
 8006532:	2b20      	cmp	r3, #32
 8006534:	d107      	bne.n	8006546 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f06f 0220 	mvn.w	r2, #32
 800653e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006540:	6878      	ldr	r0, [r7, #4]
 8006542:	f000 f8c7 	bl	80066d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006546:	bf00      	nop
 8006548:	3708      	adds	r7, #8
 800654a:	46bd      	mov	sp, r7
 800654c:	bd80      	pop	{r7, pc}

0800654e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800654e:	b480      	push	{r7}
 8006550:	b083      	sub	sp, #12
 8006552:	af00      	add	r7, sp, #0
 8006554:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006556:	bf00      	nop
 8006558:	370c      	adds	r7, #12
 800655a:	46bd      	mov	sp, r7
 800655c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006560:	4770      	bx	lr

08006562 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006562:	b480      	push	{r7}
 8006564:	b083      	sub	sp, #12
 8006566:	af00      	add	r7, sp, #0
 8006568:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800656a:	bf00      	nop
 800656c:	370c      	adds	r7, #12
 800656e:	46bd      	mov	sp, r7
 8006570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006574:	4770      	bx	lr

08006576 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006576:	b480      	push	{r7}
 8006578:	b083      	sub	sp, #12
 800657a:	af00      	add	r7, sp, #0
 800657c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800657e:	bf00      	nop
 8006580:	370c      	adds	r7, #12
 8006582:	46bd      	mov	sp, r7
 8006584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006588:	4770      	bx	lr

0800658a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800658a:	b480      	push	{r7}
 800658c:	b083      	sub	sp, #12
 800658e:	af00      	add	r7, sp, #0
 8006590:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006592:	bf00      	nop
 8006594:	370c      	adds	r7, #12
 8006596:	46bd      	mov	sp, r7
 8006598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659c:	4770      	bx	lr
	...

080065a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80065a0:	b480      	push	{r7}
 80065a2:	b085      	sub	sp, #20
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
 80065a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	4a40      	ldr	r2, [pc, #256]	; (80066b4 <TIM_Base_SetConfig+0x114>)
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d013      	beq.n	80065e0 <TIM_Base_SetConfig+0x40>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065be:	d00f      	beq.n	80065e0 <TIM_Base_SetConfig+0x40>
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	4a3d      	ldr	r2, [pc, #244]	; (80066b8 <TIM_Base_SetConfig+0x118>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d00b      	beq.n	80065e0 <TIM_Base_SetConfig+0x40>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	4a3c      	ldr	r2, [pc, #240]	; (80066bc <TIM_Base_SetConfig+0x11c>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d007      	beq.n	80065e0 <TIM_Base_SetConfig+0x40>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	4a3b      	ldr	r2, [pc, #236]	; (80066c0 <TIM_Base_SetConfig+0x120>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d003      	beq.n	80065e0 <TIM_Base_SetConfig+0x40>
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	4a3a      	ldr	r2, [pc, #232]	; (80066c4 <TIM_Base_SetConfig+0x124>)
 80065dc:	4293      	cmp	r3, r2
 80065de:	d108      	bne.n	80065f2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	685b      	ldr	r3, [r3, #4]
 80065ec:	68fa      	ldr	r2, [r7, #12]
 80065ee:	4313      	orrs	r3, r2
 80065f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	4a2f      	ldr	r2, [pc, #188]	; (80066b4 <TIM_Base_SetConfig+0x114>)
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d01f      	beq.n	800663a <TIM_Base_SetConfig+0x9a>
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006600:	d01b      	beq.n	800663a <TIM_Base_SetConfig+0x9a>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	4a2c      	ldr	r2, [pc, #176]	; (80066b8 <TIM_Base_SetConfig+0x118>)
 8006606:	4293      	cmp	r3, r2
 8006608:	d017      	beq.n	800663a <TIM_Base_SetConfig+0x9a>
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	4a2b      	ldr	r2, [pc, #172]	; (80066bc <TIM_Base_SetConfig+0x11c>)
 800660e:	4293      	cmp	r3, r2
 8006610:	d013      	beq.n	800663a <TIM_Base_SetConfig+0x9a>
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	4a2a      	ldr	r2, [pc, #168]	; (80066c0 <TIM_Base_SetConfig+0x120>)
 8006616:	4293      	cmp	r3, r2
 8006618:	d00f      	beq.n	800663a <TIM_Base_SetConfig+0x9a>
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	4a29      	ldr	r2, [pc, #164]	; (80066c4 <TIM_Base_SetConfig+0x124>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d00b      	beq.n	800663a <TIM_Base_SetConfig+0x9a>
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	4a28      	ldr	r2, [pc, #160]	; (80066c8 <TIM_Base_SetConfig+0x128>)
 8006626:	4293      	cmp	r3, r2
 8006628:	d007      	beq.n	800663a <TIM_Base_SetConfig+0x9a>
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	4a27      	ldr	r2, [pc, #156]	; (80066cc <TIM_Base_SetConfig+0x12c>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d003      	beq.n	800663a <TIM_Base_SetConfig+0x9a>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	4a26      	ldr	r2, [pc, #152]	; (80066d0 <TIM_Base_SetConfig+0x130>)
 8006636:	4293      	cmp	r3, r2
 8006638:	d108      	bne.n	800664c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006640:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	68db      	ldr	r3, [r3, #12]
 8006646:	68fa      	ldr	r2, [r7, #12]
 8006648:	4313      	orrs	r3, r2
 800664a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	695b      	ldr	r3, [r3, #20]
 8006656:	4313      	orrs	r3, r2
 8006658:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	68fa      	ldr	r2, [r7, #12]
 800665e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	689a      	ldr	r2, [r3, #8]
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	681a      	ldr	r2, [r3, #0]
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	4a10      	ldr	r2, [pc, #64]	; (80066b4 <TIM_Base_SetConfig+0x114>)
 8006674:	4293      	cmp	r3, r2
 8006676:	d00f      	beq.n	8006698 <TIM_Base_SetConfig+0xf8>
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	4a12      	ldr	r2, [pc, #72]	; (80066c4 <TIM_Base_SetConfig+0x124>)
 800667c:	4293      	cmp	r3, r2
 800667e:	d00b      	beq.n	8006698 <TIM_Base_SetConfig+0xf8>
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	4a11      	ldr	r2, [pc, #68]	; (80066c8 <TIM_Base_SetConfig+0x128>)
 8006684:	4293      	cmp	r3, r2
 8006686:	d007      	beq.n	8006698 <TIM_Base_SetConfig+0xf8>
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	4a10      	ldr	r2, [pc, #64]	; (80066cc <TIM_Base_SetConfig+0x12c>)
 800668c:	4293      	cmp	r3, r2
 800668e:	d003      	beq.n	8006698 <TIM_Base_SetConfig+0xf8>
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	4a0f      	ldr	r2, [pc, #60]	; (80066d0 <TIM_Base_SetConfig+0x130>)
 8006694:	4293      	cmp	r3, r2
 8006696:	d103      	bne.n	80066a0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	691a      	ldr	r2, [r3, #16]
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2201      	movs	r2, #1
 80066a4:	615a      	str	r2, [r3, #20]
}
 80066a6:	bf00      	nop
 80066a8:	3714      	adds	r7, #20
 80066aa:	46bd      	mov	sp, r7
 80066ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b0:	4770      	bx	lr
 80066b2:	bf00      	nop
 80066b4:	40010000 	.word	0x40010000
 80066b8:	40000400 	.word	0x40000400
 80066bc:	40000800 	.word	0x40000800
 80066c0:	40000c00 	.word	0x40000c00
 80066c4:	40010400 	.word	0x40010400
 80066c8:	40014000 	.word	0x40014000
 80066cc:	40014400 	.word	0x40014400
 80066d0:	40014800 	.word	0x40014800

080066d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80066d4:	b480      	push	{r7}
 80066d6:	b083      	sub	sp, #12
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80066dc:	bf00      	nop
 80066de:	370c      	adds	r7, #12
 80066e0:	46bd      	mov	sp, r7
 80066e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e6:	4770      	bx	lr

080066e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80066e8:	b480      	push	{r7}
 80066ea:	b083      	sub	sp, #12
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80066f0:	bf00      	nop
 80066f2:	370c      	adds	r7, #12
 80066f4:	46bd      	mov	sp, r7
 80066f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fa:	4770      	bx	lr

080066fc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80066fc:	b480      	push	{r7}
 80066fe:	b083      	sub	sp, #12
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006704:	bf00      	nop
 8006706:	370c      	adds	r7, #12
 8006708:	46bd      	mov	sp, r7
 800670a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670e:	4770      	bx	lr

08006710 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b082      	sub	sp, #8
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d101      	bne.n	8006722 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800671e:	2301      	movs	r3, #1
 8006720:	e042      	b.n	80067a8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006728:	2b00      	cmp	r3, #0
 800672a:	d106      	bne.n	800673a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2200      	movs	r2, #0
 8006730:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006734:	6878      	ldr	r0, [r7, #4]
 8006736:	f7fa fdd3 	bl	80012e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2224      	movs	r2, #36	; 0x24
 800673e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	681a      	ldr	r2, [r3, #0]
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f022 0201 	bic.w	r2, r2, #1
 8006750:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006752:	6878      	ldr	r0, [r7, #4]
 8006754:	f000 fce0 	bl	8007118 <UART_SetConfig>
 8006758:	4603      	mov	r3, r0
 800675a:	2b01      	cmp	r3, #1
 800675c:	d101      	bne.n	8006762 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800675e:	2301      	movs	r3, #1
 8006760:	e022      	b.n	80067a8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006766:	2b00      	cmp	r3, #0
 8006768:	d002      	beq.n	8006770 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800676a:	6878      	ldr	r0, [r7, #4]
 800676c:	f001 fa3c 	bl	8007be8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	685a      	ldr	r2, [r3, #4]
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800677e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	689a      	ldr	r2, [r3, #8]
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800678e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	681a      	ldr	r2, [r3, #0]
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f042 0201 	orr.w	r2, r2, #1
 800679e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80067a0:	6878      	ldr	r0, [r7, #4]
 80067a2:	f001 fac3 	bl	8007d2c <UART_CheckIdleState>
 80067a6:	4603      	mov	r3, r0
}
 80067a8:	4618      	mov	r0, r3
 80067aa:	3708      	adds	r7, #8
 80067ac:	46bd      	mov	sp, r7
 80067ae:	bd80      	pop	{r7, pc}

080067b0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b08a      	sub	sp, #40	; 0x28
 80067b4:	af02      	add	r7, sp, #8
 80067b6:	60f8      	str	r0, [r7, #12]
 80067b8:	60b9      	str	r1, [r7, #8]
 80067ba:	603b      	str	r3, [r7, #0]
 80067bc:	4613      	mov	r3, r2
 80067be:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067c6:	2b20      	cmp	r3, #32
 80067c8:	d17b      	bne.n	80068c2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80067ca:	68bb      	ldr	r3, [r7, #8]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d002      	beq.n	80067d6 <HAL_UART_Transmit+0x26>
 80067d0:	88fb      	ldrh	r3, [r7, #6]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d101      	bne.n	80067da <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80067d6:	2301      	movs	r3, #1
 80067d8:	e074      	b.n	80068c4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	2200      	movs	r2, #0
 80067de:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	2221      	movs	r2, #33	; 0x21
 80067e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80067ea:	f7fb f83b 	bl	8001864 <HAL_GetTick>
 80067ee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	88fa      	ldrh	r2, [r7, #6]
 80067f4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	88fa      	ldrh	r2, [r7, #6]
 80067fc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	689b      	ldr	r3, [r3, #8]
 8006804:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006808:	d108      	bne.n	800681c <HAL_UART_Transmit+0x6c>
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	691b      	ldr	r3, [r3, #16]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d104      	bne.n	800681c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006812:	2300      	movs	r3, #0
 8006814:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006816:	68bb      	ldr	r3, [r7, #8]
 8006818:	61bb      	str	r3, [r7, #24]
 800681a:	e003      	b.n	8006824 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800681c:	68bb      	ldr	r3, [r7, #8]
 800681e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006820:	2300      	movs	r3, #0
 8006822:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006824:	e030      	b.n	8006888 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	9300      	str	r3, [sp, #0]
 800682a:	697b      	ldr	r3, [r7, #20]
 800682c:	2200      	movs	r2, #0
 800682e:	2180      	movs	r1, #128	; 0x80
 8006830:	68f8      	ldr	r0, [r7, #12]
 8006832:	f001 fb25 	bl	8007e80 <UART_WaitOnFlagUntilTimeout>
 8006836:	4603      	mov	r3, r0
 8006838:	2b00      	cmp	r3, #0
 800683a:	d005      	beq.n	8006848 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	2220      	movs	r2, #32
 8006840:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8006844:	2303      	movs	r3, #3
 8006846:	e03d      	b.n	80068c4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8006848:	69fb      	ldr	r3, [r7, #28]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d10b      	bne.n	8006866 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800684e:	69bb      	ldr	r3, [r7, #24]
 8006850:	881b      	ldrh	r3, [r3, #0]
 8006852:	461a      	mov	r2, r3
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800685c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800685e:	69bb      	ldr	r3, [r7, #24]
 8006860:	3302      	adds	r3, #2
 8006862:	61bb      	str	r3, [r7, #24]
 8006864:	e007      	b.n	8006876 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006866:	69fb      	ldr	r3, [r7, #28]
 8006868:	781a      	ldrb	r2, [r3, #0]
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006870:	69fb      	ldr	r3, [r7, #28]
 8006872:	3301      	adds	r3, #1
 8006874:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800687c:	b29b      	uxth	r3, r3
 800687e:	3b01      	subs	r3, #1
 8006880:	b29a      	uxth	r2, r3
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800688e:	b29b      	uxth	r3, r3
 8006890:	2b00      	cmp	r3, #0
 8006892:	d1c8      	bne.n	8006826 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	9300      	str	r3, [sp, #0]
 8006898:	697b      	ldr	r3, [r7, #20]
 800689a:	2200      	movs	r2, #0
 800689c:	2140      	movs	r1, #64	; 0x40
 800689e:	68f8      	ldr	r0, [r7, #12]
 80068a0:	f001 faee 	bl	8007e80 <UART_WaitOnFlagUntilTimeout>
 80068a4:	4603      	mov	r3, r0
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d005      	beq.n	80068b6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	2220      	movs	r2, #32
 80068ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 80068b2:	2303      	movs	r3, #3
 80068b4:	e006      	b.n	80068c4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	2220      	movs	r2, #32
 80068ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80068be:	2300      	movs	r3, #0
 80068c0:	e000      	b.n	80068c4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80068c2:	2302      	movs	r3, #2
  }
}
 80068c4:	4618      	mov	r0, r3
 80068c6:	3720      	adds	r7, #32
 80068c8:	46bd      	mov	sp, r7
 80068ca:	bd80      	pop	{r7, pc}

080068cc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b08a      	sub	sp, #40	; 0x28
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	60f8      	str	r0, [r7, #12]
 80068d4:	60b9      	str	r1, [r7, #8]
 80068d6:	4613      	mov	r3, r2
 80068d8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80068e0:	2b20      	cmp	r3, #32
 80068e2:	d137      	bne.n	8006954 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80068e4:	68bb      	ldr	r3, [r7, #8]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d002      	beq.n	80068f0 <HAL_UART_Receive_IT+0x24>
 80068ea:	88fb      	ldrh	r3, [r7, #6]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d101      	bne.n	80068f4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80068f0:	2301      	movs	r3, #1
 80068f2:	e030      	b.n	8006956 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	2200      	movs	r2, #0
 80068f8:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	4a18      	ldr	r2, [pc, #96]	; (8006960 <HAL_UART_Receive_IT+0x94>)
 8006900:	4293      	cmp	r3, r2
 8006902:	d01f      	beq.n	8006944 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	685b      	ldr	r3, [r3, #4]
 800690a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800690e:	2b00      	cmp	r3, #0
 8006910:	d018      	beq.n	8006944 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006918:	697b      	ldr	r3, [r7, #20]
 800691a:	e853 3f00 	ldrex	r3, [r3]
 800691e:	613b      	str	r3, [r7, #16]
   return(result);
 8006920:	693b      	ldr	r3, [r7, #16]
 8006922:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006926:	627b      	str	r3, [r7, #36]	; 0x24
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	461a      	mov	r2, r3
 800692e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006930:	623b      	str	r3, [r7, #32]
 8006932:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006934:	69f9      	ldr	r1, [r7, #28]
 8006936:	6a3a      	ldr	r2, [r7, #32]
 8006938:	e841 2300 	strex	r3, r2, [r1]
 800693c:	61bb      	str	r3, [r7, #24]
   return(result);
 800693e:	69bb      	ldr	r3, [r7, #24]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d1e6      	bne.n	8006912 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006944:	88fb      	ldrh	r3, [r7, #6]
 8006946:	461a      	mov	r2, r3
 8006948:	68b9      	ldr	r1, [r7, #8]
 800694a:	68f8      	ldr	r0, [r7, #12]
 800694c:	f001 fb00 	bl	8007f50 <UART_Start_Receive_IT>
 8006950:	4603      	mov	r3, r0
 8006952:	e000      	b.n	8006956 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006954:	2302      	movs	r3, #2
  }
}
 8006956:	4618      	mov	r0, r3
 8006958:	3728      	adds	r7, #40	; 0x28
 800695a:	46bd      	mov	sp, r7
 800695c:	bd80      	pop	{r7, pc}
 800695e:	bf00      	nop
 8006960:	58000c00 	.word	0x58000c00

08006964 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006964:	b580      	push	{r7, lr}
 8006966:	b0ba      	sub	sp, #232	; 0xe8
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	69db      	ldr	r3, [r3, #28]
 8006972:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	689b      	ldr	r3, [r3, #8]
 8006986:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800698a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800698e:	f640 030f 	movw	r3, #2063	; 0x80f
 8006992:	4013      	ands	r3, r2
 8006994:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006998:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800699c:	2b00      	cmp	r3, #0
 800699e:	d11b      	bne.n	80069d8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80069a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069a4:	f003 0320 	and.w	r3, r3, #32
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d015      	beq.n	80069d8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80069ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069b0:	f003 0320 	and.w	r3, r3, #32
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d105      	bne.n	80069c4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80069b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80069bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d009      	beq.n	80069d8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	f000 8377 	beq.w	80070bc <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80069d2:	6878      	ldr	r0, [r7, #4]
 80069d4:	4798      	blx	r3
      }
      return;
 80069d6:	e371      	b.n	80070bc <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80069d8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80069dc:	2b00      	cmp	r3, #0
 80069de:	f000 8123 	beq.w	8006c28 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80069e2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80069e6:	4b8d      	ldr	r3, [pc, #564]	; (8006c1c <HAL_UART_IRQHandler+0x2b8>)
 80069e8:	4013      	ands	r3, r2
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d106      	bne.n	80069fc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80069ee:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80069f2:	4b8b      	ldr	r3, [pc, #556]	; (8006c20 <HAL_UART_IRQHandler+0x2bc>)
 80069f4:	4013      	ands	r3, r2
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	f000 8116 	beq.w	8006c28 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80069fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a00:	f003 0301 	and.w	r3, r3, #1
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d011      	beq.n	8006a2c <HAL_UART_IRQHandler+0xc8>
 8006a08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d00b      	beq.n	8006a2c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	2201      	movs	r2, #1
 8006a1a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a22:	f043 0201 	orr.w	r2, r3, #1
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006a2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a30:	f003 0302 	and.w	r3, r3, #2
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d011      	beq.n	8006a5c <HAL_UART_IRQHandler+0xf8>
 8006a38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a3c:	f003 0301 	and.w	r3, r3, #1
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d00b      	beq.n	8006a5c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	2202      	movs	r2, #2
 8006a4a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a52:	f043 0204 	orr.w	r2, r3, #4
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006a5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a60:	f003 0304 	and.w	r3, r3, #4
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d011      	beq.n	8006a8c <HAL_UART_IRQHandler+0x128>
 8006a68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a6c:	f003 0301 	and.w	r3, r3, #1
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d00b      	beq.n	8006a8c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	2204      	movs	r2, #4
 8006a7a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a82:	f043 0202 	orr.w	r2, r3, #2
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006a8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a90:	f003 0308 	and.w	r3, r3, #8
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d017      	beq.n	8006ac8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006a98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a9c:	f003 0320 	and.w	r3, r3, #32
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d105      	bne.n	8006ab0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006aa4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006aa8:	4b5c      	ldr	r3, [pc, #368]	; (8006c1c <HAL_UART_IRQHandler+0x2b8>)
 8006aaa:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d00b      	beq.n	8006ac8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	2208      	movs	r2, #8
 8006ab6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006abe:	f043 0208 	orr.w	r2, r3, #8
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006ac8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006acc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d012      	beq.n	8006afa <HAL_UART_IRQHandler+0x196>
 8006ad4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ad8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d00c      	beq.n	8006afa <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006ae8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006af0:	f043 0220 	orr.w	r2, r3, #32
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	f000 82dd 	beq.w	80070c0 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006b06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b0a:	f003 0320 	and.w	r3, r3, #32
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d013      	beq.n	8006b3a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006b12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b16:	f003 0320 	and.w	r3, r3, #32
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d105      	bne.n	8006b2a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006b1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006b22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d007      	beq.n	8006b3a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d003      	beq.n	8006b3a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b36:	6878      	ldr	r0, [r7, #4]
 8006b38:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b40:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	689b      	ldr	r3, [r3, #8]
 8006b4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b4e:	2b40      	cmp	r3, #64	; 0x40
 8006b50:	d005      	beq.n	8006b5e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006b52:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006b56:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d054      	beq.n	8006c08 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	f001 fb18 	bl	8008194 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	689b      	ldr	r3, [r3, #8]
 8006b6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b6e:	2b40      	cmp	r3, #64	; 0x40
 8006b70:	d146      	bne.n	8006c00 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	3308      	adds	r3, #8
 8006b78:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b7c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006b80:	e853 3f00 	ldrex	r3, [r3]
 8006b84:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006b88:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006b8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b90:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	3308      	adds	r3, #8
 8006b9a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006b9e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006ba2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ba6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006baa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006bae:	e841 2300 	strex	r3, r2, [r1]
 8006bb2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006bb6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d1d9      	bne.n	8006b72 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d017      	beq.n	8006bf8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006bce:	4a15      	ldr	r2, [pc, #84]	; (8006c24 <HAL_UART_IRQHandler+0x2c0>)
 8006bd0:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006bd8:	4618      	mov	r0, r3
 8006bda:	f7fb fa7d 	bl	80020d8 <HAL_DMA_Abort_IT>
 8006bde:	4603      	mov	r3, r0
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d019      	beq.n	8006c18 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006bea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bec:	687a      	ldr	r2, [r7, #4]
 8006bee:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8006bf2:	4610      	mov	r0, r2
 8006bf4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006bf6:	e00f      	b.n	8006c18 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006bf8:	6878      	ldr	r0, [r7, #4]
 8006bfa:	f000 fa77 	bl	80070ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006bfe:	e00b      	b.n	8006c18 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006c00:	6878      	ldr	r0, [r7, #4]
 8006c02:	f000 fa73 	bl	80070ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c06:	e007      	b.n	8006c18 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006c08:	6878      	ldr	r0, [r7, #4]
 8006c0a:	f000 fa6f 	bl	80070ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	2200      	movs	r2, #0
 8006c12:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8006c16:	e253      	b.n	80070c0 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c18:	bf00      	nop
    return;
 8006c1a:	e251      	b.n	80070c0 <HAL_UART_IRQHandler+0x75c>
 8006c1c:	10000001 	.word	0x10000001
 8006c20:	04000120 	.word	0x04000120
 8006c24:	08008261 	.word	0x08008261

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c2c:	2b01      	cmp	r3, #1
 8006c2e:	f040 81e7 	bne.w	8007000 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006c32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c36:	f003 0310 	and.w	r3, r3, #16
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	f000 81e0 	beq.w	8007000 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006c40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c44:	f003 0310 	and.w	r3, r3, #16
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	f000 81d9 	beq.w	8007000 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	2210      	movs	r2, #16
 8006c54:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	689b      	ldr	r3, [r3, #8]
 8006c5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c60:	2b40      	cmp	r3, #64	; 0x40
 8006c62:	f040 8151 	bne.w	8006f08 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	4a96      	ldr	r2, [pc, #600]	; (8006ec8 <HAL_UART_IRQHandler+0x564>)
 8006c70:	4293      	cmp	r3, r2
 8006c72:	d068      	beq.n	8006d46 <HAL_UART_IRQHandler+0x3e2>
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	4a93      	ldr	r2, [pc, #588]	; (8006ecc <HAL_UART_IRQHandler+0x568>)
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	d061      	beq.n	8006d46 <HAL_UART_IRQHandler+0x3e2>
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	4a91      	ldr	r2, [pc, #580]	; (8006ed0 <HAL_UART_IRQHandler+0x56c>)
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	d05a      	beq.n	8006d46 <HAL_UART_IRQHandler+0x3e2>
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	4a8e      	ldr	r2, [pc, #568]	; (8006ed4 <HAL_UART_IRQHandler+0x570>)
 8006c9a:	4293      	cmp	r3, r2
 8006c9c:	d053      	beq.n	8006d46 <HAL_UART_IRQHandler+0x3e2>
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	4a8c      	ldr	r2, [pc, #560]	; (8006ed8 <HAL_UART_IRQHandler+0x574>)
 8006ca8:	4293      	cmp	r3, r2
 8006caa:	d04c      	beq.n	8006d46 <HAL_UART_IRQHandler+0x3e2>
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	4a89      	ldr	r2, [pc, #548]	; (8006edc <HAL_UART_IRQHandler+0x578>)
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d045      	beq.n	8006d46 <HAL_UART_IRQHandler+0x3e2>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	4a87      	ldr	r2, [pc, #540]	; (8006ee0 <HAL_UART_IRQHandler+0x57c>)
 8006cc4:	4293      	cmp	r3, r2
 8006cc6:	d03e      	beq.n	8006d46 <HAL_UART_IRQHandler+0x3e2>
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	4a84      	ldr	r2, [pc, #528]	; (8006ee4 <HAL_UART_IRQHandler+0x580>)
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	d037      	beq.n	8006d46 <HAL_UART_IRQHandler+0x3e2>
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	4a82      	ldr	r2, [pc, #520]	; (8006ee8 <HAL_UART_IRQHandler+0x584>)
 8006ce0:	4293      	cmp	r3, r2
 8006ce2:	d030      	beq.n	8006d46 <HAL_UART_IRQHandler+0x3e2>
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	4a7f      	ldr	r2, [pc, #508]	; (8006eec <HAL_UART_IRQHandler+0x588>)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d029      	beq.n	8006d46 <HAL_UART_IRQHandler+0x3e2>
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	4a7d      	ldr	r2, [pc, #500]	; (8006ef0 <HAL_UART_IRQHandler+0x58c>)
 8006cfc:	4293      	cmp	r3, r2
 8006cfe:	d022      	beq.n	8006d46 <HAL_UART_IRQHandler+0x3e2>
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	4a7a      	ldr	r2, [pc, #488]	; (8006ef4 <HAL_UART_IRQHandler+0x590>)
 8006d0a:	4293      	cmp	r3, r2
 8006d0c:	d01b      	beq.n	8006d46 <HAL_UART_IRQHandler+0x3e2>
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	4a78      	ldr	r2, [pc, #480]	; (8006ef8 <HAL_UART_IRQHandler+0x594>)
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	d014      	beq.n	8006d46 <HAL_UART_IRQHandler+0x3e2>
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	4a75      	ldr	r2, [pc, #468]	; (8006efc <HAL_UART_IRQHandler+0x598>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d00d      	beq.n	8006d46 <HAL_UART_IRQHandler+0x3e2>
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	4a73      	ldr	r2, [pc, #460]	; (8006f00 <HAL_UART_IRQHandler+0x59c>)
 8006d34:	4293      	cmp	r3, r2
 8006d36:	d006      	beq.n	8006d46 <HAL_UART_IRQHandler+0x3e2>
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	4a70      	ldr	r2, [pc, #448]	; (8006f04 <HAL_UART_IRQHandler+0x5a0>)
 8006d42:	4293      	cmp	r3, r2
 8006d44:	d106      	bne.n	8006d54 <HAL_UART_IRQHandler+0x3f0>
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	685b      	ldr	r3, [r3, #4]
 8006d50:	b29b      	uxth	r3, r3
 8006d52:	e005      	b.n	8006d60 <HAL_UART_IRQHandler+0x3fc>
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	685b      	ldr	r3, [r3, #4]
 8006d5e:	b29b      	uxth	r3, r3
 8006d60:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006d64:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	f000 81ab 	beq.w	80070c4 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006d74:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006d78:	429a      	cmp	r2, r3
 8006d7a:	f080 81a3 	bcs.w	80070c4 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006d84:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d8e:	69db      	ldr	r3, [r3, #28]
 8006d90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d94:	f000 8087 	beq.w	8006ea6 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006da0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006da4:	e853 3f00 	ldrex	r3, [r3]
 8006da8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006dac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006db0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006db4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	461a      	mov	r2, r3
 8006dbe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006dc2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006dc6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dca:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006dce:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006dd2:	e841 2300 	strex	r3, r2, [r1]
 8006dd6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006dda:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d1da      	bne.n	8006d98 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	3308      	adds	r3, #8
 8006de8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006dec:	e853 3f00 	ldrex	r3, [r3]
 8006df0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006df2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006df4:	f023 0301 	bic.w	r3, r3, #1
 8006df8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	3308      	adds	r3, #8
 8006e02:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006e06:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006e0a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e0c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006e0e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006e12:	e841 2300 	strex	r3, r2, [r1]
 8006e16:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006e18:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d1e1      	bne.n	8006de2 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	3308      	adds	r3, #8
 8006e24:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e26:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006e28:	e853 3f00 	ldrex	r3, [r3]
 8006e2c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006e2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006e30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e34:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	3308      	adds	r3, #8
 8006e3e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006e42:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006e44:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e46:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006e48:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006e4a:	e841 2300 	strex	r3, r2, [r1]
 8006e4e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006e50:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d1e3      	bne.n	8006e1e <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2220      	movs	r2, #32
 8006e5a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	2200      	movs	r2, #0
 8006e62:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e6c:	e853 3f00 	ldrex	r3, [r3]
 8006e70:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006e72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e74:	f023 0310 	bic.w	r3, r3, #16
 8006e78:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	461a      	mov	r2, r3
 8006e82:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006e86:	65bb      	str	r3, [r7, #88]	; 0x58
 8006e88:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e8a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006e8c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006e8e:	e841 2300 	strex	r3, r2, [r1]
 8006e92:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006e94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d1e4      	bne.n	8006e64 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	f7fa fdfb 	bl	8001a9c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	2202      	movs	r2, #2
 8006eaa:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006eb8:	b29b      	uxth	r3, r3
 8006eba:	1ad3      	subs	r3, r2, r3
 8006ebc:	b29b      	uxth	r3, r3
 8006ebe:	4619      	mov	r1, r3
 8006ec0:	6878      	ldr	r0, [r7, #4]
 8006ec2:	f000 f91d 	bl	8007100 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006ec6:	e0fd      	b.n	80070c4 <HAL_UART_IRQHandler+0x760>
 8006ec8:	40020010 	.word	0x40020010
 8006ecc:	40020028 	.word	0x40020028
 8006ed0:	40020040 	.word	0x40020040
 8006ed4:	40020058 	.word	0x40020058
 8006ed8:	40020070 	.word	0x40020070
 8006edc:	40020088 	.word	0x40020088
 8006ee0:	400200a0 	.word	0x400200a0
 8006ee4:	400200b8 	.word	0x400200b8
 8006ee8:	40020410 	.word	0x40020410
 8006eec:	40020428 	.word	0x40020428
 8006ef0:	40020440 	.word	0x40020440
 8006ef4:	40020458 	.word	0x40020458
 8006ef8:	40020470 	.word	0x40020470
 8006efc:	40020488 	.word	0x40020488
 8006f00:	400204a0 	.word	0x400204a0
 8006f04:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006f14:	b29b      	uxth	r3, r3
 8006f16:	1ad3      	subs	r3, r2, r3
 8006f18:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006f22:	b29b      	uxth	r3, r3
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	f000 80cf 	beq.w	80070c8 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8006f2a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	f000 80ca 	beq.w	80070c8 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f3c:	e853 3f00 	ldrex	r3, [r3]
 8006f40:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006f42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f44:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006f48:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	461a      	mov	r2, r3
 8006f52:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006f56:	647b      	str	r3, [r7, #68]	; 0x44
 8006f58:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f5a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006f5c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006f5e:	e841 2300 	strex	r3, r2, [r1]
 8006f62:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006f64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d1e4      	bne.n	8006f34 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	3308      	adds	r3, #8
 8006f70:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f74:	e853 3f00 	ldrex	r3, [r3]
 8006f78:	623b      	str	r3, [r7, #32]
   return(result);
 8006f7a:	6a3a      	ldr	r2, [r7, #32]
 8006f7c:	4b55      	ldr	r3, [pc, #340]	; (80070d4 <HAL_UART_IRQHandler+0x770>)
 8006f7e:	4013      	ands	r3, r2
 8006f80:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	3308      	adds	r3, #8
 8006f8a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006f8e:	633a      	str	r2, [r7, #48]	; 0x30
 8006f90:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f92:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006f94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f96:	e841 2300 	strex	r3, r2, [r1]
 8006f9a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006f9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d1e3      	bne.n	8006f6a <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2220      	movs	r2, #32
 8006fa6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2200      	movs	r2, #0
 8006fae:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fbc:	693b      	ldr	r3, [r7, #16]
 8006fbe:	e853 3f00 	ldrex	r3, [r3]
 8006fc2:	60fb      	str	r3, [r7, #12]
   return(result);
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	f023 0310 	bic.w	r3, r3, #16
 8006fca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	461a      	mov	r2, r3
 8006fd4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006fd8:	61fb      	str	r3, [r7, #28]
 8006fda:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fdc:	69b9      	ldr	r1, [r7, #24]
 8006fde:	69fa      	ldr	r2, [r7, #28]
 8006fe0:	e841 2300 	strex	r3, r2, [r1]
 8006fe4:	617b      	str	r3, [r7, #20]
   return(result);
 8006fe6:	697b      	ldr	r3, [r7, #20]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d1e4      	bne.n	8006fb6 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2202      	movs	r2, #2
 8006ff0:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006ff2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006ff6:	4619      	mov	r1, r3
 8006ff8:	6878      	ldr	r0, [r7, #4]
 8006ffa:	f000 f881 	bl	8007100 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006ffe:	e063      	b.n	80070c8 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007000:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007004:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007008:	2b00      	cmp	r3, #0
 800700a:	d00e      	beq.n	800702a <HAL_UART_IRQHandler+0x6c6>
 800700c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007010:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007014:	2b00      	cmp	r3, #0
 8007016:	d008      	beq.n	800702a <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007020:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007022:	6878      	ldr	r0, [r7, #4]
 8007024:	f001 fe7a 	bl	8008d1c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007028:	e051      	b.n	80070ce <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800702a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800702e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007032:	2b00      	cmp	r3, #0
 8007034:	d014      	beq.n	8007060 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007036:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800703a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800703e:	2b00      	cmp	r3, #0
 8007040:	d105      	bne.n	800704e <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007042:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007046:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800704a:	2b00      	cmp	r3, #0
 800704c:	d008      	beq.n	8007060 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007052:	2b00      	cmp	r3, #0
 8007054:	d03a      	beq.n	80070cc <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800705a:	6878      	ldr	r0, [r7, #4]
 800705c:	4798      	blx	r3
    }
    return;
 800705e:	e035      	b.n	80070cc <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007060:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007064:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007068:	2b00      	cmp	r3, #0
 800706a:	d009      	beq.n	8007080 <HAL_UART_IRQHandler+0x71c>
 800706c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007070:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007074:	2b00      	cmp	r3, #0
 8007076:	d003      	beq.n	8007080 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8007078:	6878      	ldr	r0, [r7, #4]
 800707a:	f001 f907 	bl	800828c <UART_EndTransmit_IT>
    return;
 800707e:	e026      	b.n	80070ce <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007080:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007084:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007088:	2b00      	cmp	r3, #0
 800708a:	d009      	beq.n	80070a0 <HAL_UART_IRQHandler+0x73c>
 800708c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007090:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007094:	2b00      	cmp	r3, #0
 8007096:	d003      	beq.n	80070a0 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007098:	6878      	ldr	r0, [r7, #4]
 800709a:	f001 fe53 	bl	8008d44 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800709e:	e016      	b.n	80070ce <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80070a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d010      	beq.n	80070ce <HAL_UART_IRQHandler+0x76a>
 80070ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	da0c      	bge.n	80070ce <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80070b4:	6878      	ldr	r0, [r7, #4]
 80070b6:	f001 fe3b 	bl	8008d30 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80070ba:	e008      	b.n	80070ce <HAL_UART_IRQHandler+0x76a>
      return;
 80070bc:	bf00      	nop
 80070be:	e006      	b.n	80070ce <HAL_UART_IRQHandler+0x76a>
    return;
 80070c0:	bf00      	nop
 80070c2:	e004      	b.n	80070ce <HAL_UART_IRQHandler+0x76a>
      return;
 80070c4:	bf00      	nop
 80070c6:	e002      	b.n	80070ce <HAL_UART_IRQHandler+0x76a>
      return;
 80070c8:	bf00      	nop
 80070ca:	e000      	b.n	80070ce <HAL_UART_IRQHandler+0x76a>
    return;
 80070cc:	bf00      	nop
  }
}
 80070ce:	37e8      	adds	r7, #232	; 0xe8
 80070d0:	46bd      	mov	sp, r7
 80070d2:	bd80      	pop	{r7, pc}
 80070d4:	effffffe 	.word	0xeffffffe

080070d8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80070d8:	b480      	push	{r7}
 80070da:	b083      	sub	sp, #12
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80070e0:	bf00      	nop
 80070e2:	370c      	adds	r7, #12
 80070e4:	46bd      	mov	sp, r7
 80070e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ea:	4770      	bx	lr

080070ec <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80070ec:	b480      	push	{r7}
 80070ee:	b083      	sub	sp, #12
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80070f4:	bf00      	nop
 80070f6:	370c      	adds	r7, #12
 80070f8:	46bd      	mov	sp, r7
 80070fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fe:	4770      	bx	lr

08007100 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007100:	b480      	push	{r7}
 8007102:	b083      	sub	sp, #12
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
 8007108:	460b      	mov	r3, r1
 800710a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800710c:	bf00      	nop
 800710e:	370c      	adds	r7, #12
 8007110:	46bd      	mov	sp, r7
 8007112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007116:	4770      	bx	lr

08007118 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007118:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800711c:	b092      	sub	sp, #72	; 0x48
 800711e:	af00      	add	r7, sp, #0
 8007120:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007122:	2300      	movs	r3, #0
 8007124:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007128:	697b      	ldr	r3, [r7, #20]
 800712a:	689a      	ldr	r2, [r3, #8]
 800712c:	697b      	ldr	r3, [r7, #20]
 800712e:	691b      	ldr	r3, [r3, #16]
 8007130:	431a      	orrs	r2, r3
 8007132:	697b      	ldr	r3, [r7, #20]
 8007134:	695b      	ldr	r3, [r3, #20]
 8007136:	431a      	orrs	r2, r3
 8007138:	697b      	ldr	r3, [r7, #20]
 800713a:	69db      	ldr	r3, [r3, #28]
 800713c:	4313      	orrs	r3, r2
 800713e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007140:	697b      	ldr	r3, [r7, #20]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	681a      	ldr	r2, [r3, #0]
 8007146:	4bbe      	ldr	r3, [pc, #760]	; (8007440 <UART_SetConfig+0x328>)
 8007148:	4013      	ands	r3, r2
 800714a:	697a      	ldr	r2, [r7, #20]
 800714c:	6812      	ldr	r2, [r2, #0]
 800714e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007150:	430b      	orrs	r3, r1
 8007152:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007154:	697b      	ldr	r3, [r7, #20]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	685b      	ldr	r3, [r3, #4]
 800715a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800715e:	697b      	ldr	r3, [r7, #20]
 8007160:	68da      	ldr	r2, [r3, #12]
 8007162:	697b      	ldr	r3, [r7, #20]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	430a      	orrs	r2, r1
 8007168:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800716a:	697b      	ldr	r3, [r7, #20]
 800716c:	699b      	ldr	r3, [r3, #24]
 800716e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007170:	697b      	ldr	r3, [r7, #20]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	4ab3      	ldr	r2, [pc, #716]	; (8007444 <UART_SetConfig+0x32c>)
 8007176:	4293      	cmp	r3, r2
 8007178:	d004      	beq.n	8007184 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800717a:	697b      	ldr	r3, [r7, #20]
 800717c:	6a1b      	ldr	r3, [r3, #32]
 800717e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007180:	4313      	orrs	r3, r2
 8007182:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007184:	697b      	ldr	r3, [r7, #20]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	689a      	ldr	r2, [r3, #8]
 800718a:	4baf      	ldr	r3, [pc, #700]	; (8007448 <UART_SetConfig+0x330>)
 800718c:	4013      	ands	r3, r2
 800718e:	697a      	ldr	r2, [r7, #20]
 8007190:	6812      	ldr	r2, [r2, #0]
 8007192:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007194:	430b      	orrs	r3, r1
 8007196:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007198:	697b      	ldr	r3, [r7, #20]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800719e:	f023 010f 	bic.w	r1, r3, #15
 80071a2:	697b      	ldr	r3, [r7, #20]
 80071a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80071a6:	697b      	ldr	r3, [r7, #20]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	430a      	orrs	r2, r1
 80071ac:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80071ae:	697b      	ldr	r3, [r7, #20]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	4aa6      	ldr	r2, [pc, #664]	; (800744c <UART_SetConfig+0x334>)
 80071b4:	4293      	cmp	r3, r2
 80071b6:	d177      	bne.n	80072a8 <UART_SetConfig+0x190>
 80071b8:	4ba5      	ldr	r3, [pc, #660]	; (8007450 <UART_SetConfig+0x338>)
 80071ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071bc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80071c0:	2b28      	cmp	r3, #40	; 0x28
 80071c2:	d86d      	bhi.n	80072a0 <UART_SetConfig+0x188>
 80071c4:	a201      	add	r2, pc, #4	; (adr r2, 80071cc <UART_SetConfig+0xb4>)
 80071c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071ca:	bf00      	nop
 80071cc:	08007271 	.word	0x08007271
 80071d0:	080072a1 	.word	0x080072a1
 80071d4:	080072a1 	.word	0x080072a1
 80071d8:	080072a1 	.word	0x080072a1
 80071dc:	080072a1 	.word	0x080072a1
 80071e0:	080072a1 	.word	0x080072a1
 80071e4:	080072a1 	.word	0x080072a1
 80071e8:	080072a1 	.word	0x080072a1
 80071ec:	08007279 	.word	0x08007279
 80071f0:	080072a1 	.word	0x080072a1
 80071f4:	080072a1 	.word	0x080072a1
 80071f8:	080072a1 	.word	0x080072a1
 80071fc:	080072a1 	.word	0x080072a1
 8007200:	080072a1 	.word	0x080072a1
 8007204:	080072a1 	.word	0x080072a1
 8007208:	080072a1 	.word	0x080072a1
 800720c:	08007281 	.word	0x08007281
 8007210:	080072a1 	.word	0x080072a1
 8007214:	080072a1 	.word	0x080072a1
 8007218:	080072a1 	.word	0x080072a1
 800721c:	080072a1 	.word	0x080072a1
 8007220:	080072a1 	.word	0x080072a1
 8007224:	080072a1 	.word	0x080072a1
 8007228:	080072a1 	.word	0x080072a1
 800722c:	08007289 	.word	0x08007289
 8007230:	080072a1 	.word	0x080072a1
 8007234:	080072a1 	.word	0x080072a1
 8007238:	080072a1 	.word	0x080072a1
 800723c:	080072a1 	.word	0x080072a1
 8007240:	080072a1 	.word	0x080072a1
 8007244:	080072a1 	.word	0x080072a1
 8007248:	080072a1 	.word	0x080072a1
 800724c:	08007291 	.word	0x08007291
 8007250:	080072a1 	.word	0x080072a1
 8007254:	080072a1 	.word	0x080072a1
 8007258:	080072a1 	.word	0x080072a1
 800725c:	080072a1 	.word	0x080072a1
 8007260:	080072a1 	.word	0x080072a1
 8007264:	080072a1 	.word	0x080072a1
 8007268:	080072a1 	.word	0x080072a1
 800726c:	08007299 	.word	0x08007299
 8007270:	2301      	movs	r3, #1
 8007272:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007276:	e222      	b.n	80076be <UART_SetConfig+0x5a6>
 8007278:	2304      	movs	r3, #4
 800727a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800727e:	e21e      	b.n	80076be <UART_SetConfig+0x5a6>
 8007280:	2308      	movs	r3, #8
 8007282:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007286:	e21a      	b.n	80076be <UART_SetConfig+0x5a6>
 8007288:	2310      	movs	r3, #16
 800728a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800728e:	e216      	b.n	80076be <UART_SetConfig+0x5a6>
 8007290:	2320      	movs	r3, #32
 8007292:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007296:	e212      	b.n	80076be <UART_SetConfig+0x5a6>
 8007298:	2340      	movs	r3, #64	; 0x40
 800729a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800729e:	e20e      	b.n	80076be <UART_SetConfig+0x5a6>
 80072a0:	2380      	movs	r3, #128	; 0x80
 80072a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072a6:	e20a      	b.n	80076be <UART_SetConfig+0x5a6>
 80072a8:	697b      	ldr	r3, [r7, #20]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	4a69      	ldr	r2, [pc, #420]	; (8007454 <UART_SetConfig+0x33c>)
 80072ae:	4293      	cmp	r3, r2
 80072b0:	d130      	bne.n	8007314 <UART_SetConfig+0x1fc>
 80072b2:	4b67      	ldr	r3, [pc, #412]	; (8007450 <UART_SetConfig+0x338>)
 80072b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072b6:	f003 0307 	and.w	r3, r3, #7
 80072ba:	2b05      	cmp	r3, #5
 80072bc:	d826      	bhi.n	800730c <UART_SetConfig+0x1f4>
 80072be:	a201      	add	r2, pc, #4	; (adr r2, 80072c4 <UART_SetConfig+0x1ac>)
 80072c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072c4:	080072dd 	.word	0x080072dd
 80072c8:	080072e5 	.word	0x080072e5
 80072cc:	080072ed 	.word	0x080072ed
 80072d0:	080072f5 	.word	0x080072f5
 80072d4:	080072fd 	.word	0x080072fd
 80072d8:	08007305 	.word	0x08007305
 80072dc:	2300      	movs	r3, #0
 80072de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072e2:	e1ec      	b.n	80076be <UART_SetConfig+0x5a6>
 80072e4:	2304      	movs	r3, #4
 80072e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072ea:	e1e8      	b.n	80076be <UART_SetConfig+0x5a6>
 80072ec:	2308      	movs	r3, #8
 80072ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072f2:	e1e4      	b.n	80076be <UART_SetConfig+0x5a6>
 80072f4:	2310      	movs	r3, #16
 80072f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072fa:	e1e0      	b.n	80076be <UART_SetConfig+0x5a6>
 80072fc:	2320      	movs	r3, #32
 80072fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007302:	e1dc      	b.n	80076be <UART_SetConfig+0x5a6>
 8007304:	2340      	movs	r3, #64	; 0x40
 8007306:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800730a:	e1d8      	b.n	80076be <UART_SetConfig+0x5a6>
 800730c:	2380      	movs	r3, #128	; 0x80
 800730e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007312:	e1d4      	b.n	80076be <UART_SetConfig+0x5a6>
 8007314:	697b      	ldr	r3, [r7, #20]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	4a4f      	ldr	r2, [pc, #316]	; (8007458 <UART_SetConfig+0x340>)
 800731a:	4293      	cmp	r3, r2
 800731c:	d130      	bne.n	8007380 <UART_SetConfig+0x268>
 800731e:	4b4c      	ldr	r3, [pc, #304]	; (8007450 <UART_SetConfig+0x338>)
 8007320:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007322:	f003 0307 	and.w	r3, r3, #7
 8007326:	2b05      	cmp	r3, #5
 8007328:	d826      	bhi.n	8007378 <UART_SetConfig+0x260>
 800732a:	a201      	add	r2, pc, #4	; (adr r2, 8007330 <UART_SetConfig+0x218>)
 800732c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007330:	08007349 	.word	0x08007349
 8007334:	08007351 	.word	0x08007351
 8007338:	08007359 	.word	0x08007359
 800733c:	08007361 	.word	0x08007361
 8007340:	08007369 	.word	0x08007369
 8007344:	08007371 	.word	0x08007371
 8007348:	2300      	movs	r3, #0
 800734a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800734e:	e1b6      	b.n	80076be <UART_SetConfig+0x5a6>
 8007350:	2304      	movs	r3, #4
 8007352:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007356:	e1b2      	b.n	80076be <UART_SetConfig+0x5a6>
 8007358:	2308      	movs	r3, #8
 800735a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800735e:	e1ae      	b.n	80076be <UART_SetConfig+0x5a6>
 8007360:	2310      	movs	r3, #16
 8007362:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007366:	e1aa      	b.n	80076be <UART_SetConfig+0x5a6>
 8007368:	2320      	movs	r3, #32
 800736a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800736e:	e1a6      	b.n	80076be <UART_SetConfig+0x5a6>
 8007370:	2340      	movs	r3, #64	; 0x40
 8007372:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007376:	e1a2      	b.n	80076be <UART_SetConfig+0x5a6>
 8007378:	2380      	movs	r3, #128	; 0x80
 800737a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800737e:	e19e      	b.n	80076be <UART_SetConfig+0x5a6>
 8007380:	697b      	ldr	r3, [r7, #20]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	4a35      	ldr	r2, [pc, #212]	; (800745c <UART_SetConfig+0x344>)
 8007386:	4293      	cmp	r3, r2
 8007388:	d130      	bne.n	80073ec <UART_SetConfig+0x2d4>
 800738a:	4b31      	ldr	r3, [pc, #196]	; (8007450 <UART_SetConfig+0x338>)
 800738c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800738e:	f003 0307 	and.w	r3, r3, #7
 8007392:	2b05      	cmp	r3, #5
 8007394:	d826      	bhi.n	80073e4 <UART_SetConfig+0x2cc>
 8007396:	a201      	add	r2, pc, #4	; (adr r2, 800739c <UART_SetConfig+0x284>)
 8007398:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800739c:	080073b5 	.word	0x080073b5
 80073a0:	080073bd 	.word	0x080073bd
 80073a4:	080073c5 	.word	0x080073c5
 80073a8:	080073cd 	.word	0x080073cd
 80073ac:	080073d5 	.word	0x080073d5
 80073b0:	080073dd 	.word	0x080073dd
 80073b4:	2300      	movs	r3, #0
 80073b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80073ba:	e180      	b.n	80076be <UART_SetConfig+0x5a6>
 80073bc:	2304      	movs	r3, #4
 80073be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80073c2:	e17c      	b.n	80076be <UART_SetConfig+0x5a6>
 80073c4:	2308      	movs	r3, #8
 80073c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80073ca:	e178      	b.n	80076be <UART_SetConfig+0x5a6>
 80073cc:	2310      	movs	r3, #16
 80073ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80073d2:	e174      	b.n	80076be <UART_SetConfig+0x5a6>
 80073d4:	2320      	movs	r3, #32
 80073d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80073da:	e170      	b.n	80076be <UART_SetConfig+0x5a6>
 80073dc:	2340      	movs	r3, #64	; 0x40
 80073de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80073e2:	e16c      	b.n	80076be <UART_SetConfig+0x5a6>
 80073e4:	2380      	movs	r3, #128	; 0x80
 80073e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80073ea:	e168      	b.n	80076be <UART_SetConfig+0x5a6>
 80073ec:	697b      	ldr	r3, [r7, #20]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	4a1b      	ldr	r2, [pc, #108]	; (8007460 <UART_SetConfig+0x348>)
 80073f2:	4293      	cmp	r3, r2
 80073f4:	d142      	bne.n	800747c <UART_SetConfig+0x364>
 80073f6:	4b16      	ldr	r3, [pc, #88]	; (8007450 <UART_SetConfig+0x338>)
 80073f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073fa:	f003 0307 	and.w	r3, r3, #7
 80073fe:	2b05      	cmp	r3, #5
 8007400:	d838      	bhi.n	8007474 <UART_SetConfig+0x35c>
 8007402:	a201      	add	r2, pc, #4	; (adr r2, 8007408 <UART_SetConfig+0x2f0>)
 8007404:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007408:	08007421 	.word	0x08007421
 800740c:	08007429 	.word	0x08007429
 8007410:	08007431 	.word	0x08007431
 8007414:	08007439 	.word	0x08007439
 8007418:	08007465 	.word	0x08007465
 800741c:	0800746d 	.word	0x0800746d
 8007420:	2300      	movs	r3, #0
 8007422:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007426:	e14a      	b.n	80076be <UART_SetConfig+0x5a6>
 8007428:	2304      	movs	r3, #4
 800742a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800742e:	e146      	b.n	80076be <UART_SetConfig+0x5a6>
 8007430:	2308      	movs	r3, #8
 8007432:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007436:	e142      	b.n	80076be <UART_SetConfig+0x5a6>
 8007438:	2310      	movs	r3, #16
 800743a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800743e:	e13e      	b.n	80076be <UART_SetConfig+0x5a6>
 8007440:	cfff69f3 	.word	0xcfff69f3
 8007444:	58000c00 	.word	0x58000c00
 8007448:	11fff4ff 	.word	0x11fff4ff
 800744c:	40011000 	.word	0x40011000
 8007450:	58024400 	.word	0x58024400
 8007454:	40004400 	.word	0x40004400
 8007458:	40004800 	.word	0x40004800
 800745c:	40004c00 	.word	0x40004c00
 8007460:	40005000 	.word	0x40005000
 8007464:	2320      	movs	r3, #32
 8007466:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800746a:	e128      	b.n	80076be <UART_SetConfig+0x5a6>
 800746c:	2340      	movs	r3, #64	; 0x40
 800746e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007472:	e124      	b.n	80076be <UART_SetConfig+0x5a6>
 8007474:	2380      	movs	r3, #128	; 0x80
 8007476:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800747a:	e120      	b.n	80076be <UART_SetConfig+0x5a6>
 800747c:	697b      	ldr	r3, [r7, #20]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	4acb      	ldr	r2, [pc, #812]	; (80077b0 <UART_SetConfig+0x698>)
 8007482:	4293      	cmp	r3, r2
 8007484:	d176      	bne.n	8007574 <UART_SetConfig+0x45c>
 8007486:	4bcb      	ldr	r3, [pc, #812]	; (80077b4 <UART_SetConfig+0x69c>)
 8007488:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800748a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800748e:	2b28      	cmp	r3, #40	; 0x28
 8007490:	d86c      	bhi.n	800756c <UART_SetConfig+0x454>
 8007492:	a201      	add	r2, pc, #4	; (adr r2, 8007498 <UART_SetConfig+0x380>)
 8007494:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007498:	0800753d 	.word	0x0800753d
 800749c:	0800756d 	.word	0x0800756d
 80074a0:	0800756d 	.word	0x0800756d
 80074a4:	0800756d 	.word	0x0800756d
 80074a8:	0800756d 	.word	0x0800756d
 80074ac:	0800756d 	.word	0x0800756d
 80074b0:	0800756d 	.word	0x0800756d
 80074b4:	0800756d 	.word	0x0800756d
 80074b8:	08007545 	.word	0x08007545
 80074bc:	0800756d 	.word	0x0800756d
 80074c0:	0800756d 	.word	0x0800756d
 80074c4:	0800756d 	.word	0x0800756d
 80074c8:	0800756d 	.word	0x0800756d
 80074cc:	0800756d 	.word	0x0800756d
 80074d0:	0800756d 	.word	0x0800756d
 80074d4:	0800756d 	.word	0x0800756d
 80074d8:	0800754d 	.word	0x0800754d
 80074dc:	0800756d 	.word	0x0800756d
 80074e0:	0800756d 	.word	0x0800756d
 80074e4:	0800756d 	.word	0x0800756d
 80074e8:	0800756d 	.word	0x0800756d
 80074ec:	0800756d 	.word	0x0800756d
 80074f0:	0800756d 	.word	0x0800756d
 80074f4:	0800756d 	.word	0x0800756d
 80074f8:	08007555 	.word	0x08007555
 80074fc:	0800756d 	.word	0x0800756d
 8007500:	0800756d 	.word	0x0800756d
 8007504:	0800756d 	.word	0x0800756d
 8007508:	0800756d 	.word	0x0800756d
 800750c:	0800756d 	.word	0x0800756d
 8007510:	0800756d 	.word	0x0800756d
 8007514:	0800756d 	.word	0x0800756d
 8007518:	0800755d 	.word	0x0800755d
 800751c:	0800756d 	.word	0x0800756d
 8007520:	0800756d 	.word	0x0800756d
 8007524:	0800756d 	.word	0x0800756d
 8007528:	0800756d 	.word	0x0800756d
 800752c:	0800756d 	.word	0x0800756d
 8007530:	0800756d 	.word	0x0800756d
 8007534:	0800756d 	.word	0x0800756d
 8007538:	08007565 	.word	0x08007565
 800753c:	2301      	movs	r3, #1
 800753e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007542:	e0bc      	b.n	80076be <UART_SetConfig+0x5a6>
 8007544:	2304      	movs	r3, #4
 8007546:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800754a:	e0b8      	b.n	80076be <UART_SetConfig+0x5a6>
 800754c:	2308      	movs	r3, #8
 800754e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007552:	e0b4      	b.n	80076be <UART_SetConfig+0x5a6>
 8007554:	2310      	movs	r3, #16
 8007556:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800755a:	e0b0      	b.n	80076be <UART_SetConfig+0x5a6>
 800755c:	2320      	movs	r3, #32
 800755e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007562:	e0ac      	b.n	80076be <UART_SetConfig+0x5a6>
 8007564:	2340      	movs	r3, #64	; 0x40
 8007566:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800756a:	e0a8      	b.n	80076be <UART_SetConfig+0x5a6>
 800756c:	2380      	movs	r3, #128	; 0x80
 800756e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007572:	e0a4      	b.n	80076be <UART_SetConfig+0x5a6>
 8007574:	697b      	ldr	r3, [r7, #20]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	4a8f      	ldr	r2, [pc, #572]	; (80077b8 <UART_SetConfig+0x6a0>)
 800757a:	4293      	cmp	r3, r2
 800757c:	d130      	bne.n	80075e0 <UART_SetConfig+0x4c8>
 800757e:	4b8d      	ldr	r3, [pc, #564]	; (80077b4 <UART_SetConfig+0x69c>)
 8007580:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007582:	f003 0307 	and.w	r3, r3, #7
 8007586:	2b05      	cmp	r3, #5
 8007588:	d826      	bhi.n	80075d8 <UART_SetConfig+0x4c0>
 800758a:	a201      	add	r2, pc, #4	; (adr r2, 8007590 <UART_SetConfig+0x478>)
 800758c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007590:	080075a9 	.word	0x080075a9
 8007594:	080075b1 	.word	0x080075b1
 8007598:	080075b9 	.word	0x080075b9
 800759c:	080075c1 	.word	0x080075c1
 80075a0:	080075c9 	.word	0x080075c9
 80075a4:	080075d1 	.word	0x080075d1
 80075a8:	2300      	movs	r3, #0
 80075aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80075ae:	e086      	b.n	80076be <UART_SetConfig+0x5a6>
 80075b0:	2304      	movs	r3, #4
 80075b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80075b6:	e082      	b.n	80076be <UART_SetConfig+0x5a6>
 80075b8:	2308      	movs	r3, #8
 80075ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80075be:	e07e      	b.n	80076be <UART_SetConfig+0x5a6>
 80075c0:	2310      	movs	r3, #16
 80075c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80075c6:	e07a      	b.n	80076be <UART_SetConfig+0x5a6>
 80075c8:	2320      	movs	r3, #32
 80075ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80075ce:	e076      	b.n	80076be <UART_SetConfig+0x5a6>
 80075d0:	2340      	movs	r3, #64	; 0x40
 80075d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80075d6:	e072      	b.n	80076be <UART_SetConfig+0x5a6>
 80075d8:	2380      	movs	r3, #128	; 0x80
 80075da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80075de:	e06e      	b.n	80076be <UART_SetConfig+0x5a6>
 80075e0:	697b      	ldr	r3, [r7, #20]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	4a75      	ldr	r2, [pc, #468]	; (80077bc <UART_SetConfig+0x6a4>)
 80075e6:	4293      	cmp	r3, r2
 80075e8:	d130      	bne.n	800764c <UART_SetConfig+0x534>
 80075ea:	4b72      	ldr	r3, [pc, #456]	; (80077b4 <UART_SetConfig+0x69c>)
 80075ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075ee:	f003 0307 	and.w	r3, r3, #7
 80075f2:	2b05      	cmp	r3, #5
 80075f4:	d826      	bhi.n	8007644 <UART_SetConfig+0x52c>
 80075f6:	a201      	add	r2, pc, #4	; (adr r2, 80075fc <UART_SetConfig+0x4e4>)
 80075f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075fc:	08007615 	.word	0x08007615
 8007600:	0800761d 	.word	0x0800761d
 8007604:	08007625 	.word	0x08007625
 8007608:	0800762d 	.word	0x0800762d
 800760c:	08007635 	.word	0x08007635
 8007610:	0800763d 	.word	0x0800763d
 8007614:	2300      	movs	r3, #0
 8007616:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800761a:	e050      	b.n	80076be <UART_SetConfig+0x5a6>
 800761c:	2304      	movs	r3, #4
 800761e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007622:	e04c      	b.n	80076be <UART_SetConfig+0x5a6>
 8007624:	2308      	movs	r3, #8
 8007626:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800762a:	e048      	b.n	80076be <UART_SetConfig+0x5a6>
 800762c:	2310      	movs	r3, #16
 800762e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007632:	e044      	b.n	80076be <UART_SetConfig+0x5a6>
 8007634:	2320      	movs	r3, #32
 8007636:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800763a:	e040      	b.n	80076be <UART_SetConfig+0x5a6>
 800763c:	2340      	movs	r3, #64	; 0x40
 800763e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007642:	e03c      	b.n	80076be <UART_SetConfig+0x5a6>
 8007644:	2380      	movs	r3, #128	; 0x80
 8007646:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800764a:	e038      	b.n	80076be <UART_SetConfig+0x5a6>
 800764c:	697b      	ldr	r3, [r7, #20]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	4a5b      	ldr	r2, [pc, #364]	; (80077c0 <UART_SetConfig+0x6a8>)
 8007652:	4293      	cmp	r3, r2
 8007654:	d130      	bne.n	80076b8 <UART_SetConfig+0x5a0>
 8007656:	4b57      	ldr	r3, [pc, #348]	; (80077b4 <UART_SetConfig+0x69c>)
 8007658:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800765a:	f003 0307 	and.w	r3, r3, #7
 800765e:	2b05      	cmp	r3, #5
 8007660:	d826      	bhi.n	80076b0 <UART_SetConfig+0x598>
 8007662:	a201      	add	r2, pc, #4	; (adr r2, 8007668 <UART_SetConfig+0x550>)
 8007664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007668:	08007681 	.word	0x08007681
 800766c:	08007689 	.word	0x08007689
 8007670:	08007691 	.word	0x08007691
 8007674:	08007699 	.word	0x08007699
 8007678:	080076a1 	.word	0x080076a1
 800767c:	080076a9 	.word	0x080076a9
 8007680:	2302      	movs	r3, #2
 8007682:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007686:	e01a      	b.n	80076be <UART_SetConfig+0x5a6>
 8007688:	2304      	movs	r3, #4
 800768a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800768e:	e016      	b.n	80076be <UART_SetConfig+0x5a6>
 8007690:	2308      	movs	r3, #8
 8007692:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007696:	e012      	b.n	80076be <UART_SetConfig+0x5a6>
 8007698:	2310      	movs	r3, #16
 800769a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800769e:	e00e      	b.n	80076be <UART_SetConfig+0x5a6>
 80076a0:	2320      	movs	r3, #32
 80076a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80076a6:	e00a      	b.n	80076be <UART_SetConfig+0x5a6>
 80076a8:	2340      	movs	r3, #64	; 0x40
 80076aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80076ae:	e006      	b.n	80076be <UART_SetConfig+0x5a6>
 80076b0:	2380      	movs	r3, #128	; 0x80
 80076b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80076b6:	e002      	b.n	80076be <UART_SetConfig+0x5a6>
 80076b8:	2380      	movs	r3, #128	; 0x80
 80076ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80076be:	697b      	ldr	r3, [r7, #20]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	4a3f      	ldr	r2, [pc, #252]	; (80077c0 <UART_SetConfig+0x6a8>)
 80076c4:	4293      	cmp	r3, r2
 80076c6:	f040 80f8 	bne.w	80078ba <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80076ca:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80076ce:	2b20      	cmp	r3, #32
 80076d0:	dc46      	bgt.n	8007760 <UART_SetConfig+0x648>
 80076d2:	2b02      	cmp	r3, #2
 80076d4:	f2c0 8082 	blt.w	80077dc <UART_SetConfig+0x6c4>
 80076d8:	3b02      	subs	r3, #2
 80076da:	2b1e      	cmp	r3, #30
 80076dc:	d87e      	bhi.n	80077dc <UART_SetConfig+0x6c4>
 80076de:	a201      	add	r2, pc, #4	; (adr r2, 80076e4 <UART_SetConfig+0x5cc>)
 80076e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076e4:	08007767 	.word	0x08007767
 80076e8:	080077dd 	.word	0x080077dd
 80076ec:	0800776f 	.word	0x0800776f
 80076f0:	080077dd 	.word	0x080077dd
 80076f4:	080077dd 	.word	0x080077dd
 80076f8:	080077dd 	.word	0x080077dd
 80076fc:	0800777f 	.word	0x0800777f
 8007700:	080077dd 	.word	0x080077dd
 8007704:	080077dd 	.word	0x080077dd
 8007708:	080077dd 	.word	0x080077dd
 800770c:	080077dd 	.word	0x080077dd
 8007710:	080077dd 	.word	0x080077dd
 8007714:	080077dd 	.word	0x080077dd
 8007718:	080077dd 	.word	0x080077dd
 800771c:	0800778f 	.word	0x0800778f
 8007720:	080077dd 	.word	0x080077dd
 8007724:	080077dd 	.word	0x080077dd
 8007728:	080077dd 	.word	0x080077dd
 800772c:	080077dd 	.word	0x080077dd
 8007730:	080077dd 	.word	0x080077dd
 8007734:	080077dd 	.word	0x080077dd
 8007738:	080077dd 	.word	0x080077dd
 800773c:	080077dd 	.word	0x080077dd
 8007740:	080077dd 	.word	0x080077dd
 8007744:	080077dd 	.word	0x080077dd
 8007748:	080077dd 	.word	0x080077dd
 800774c:	080077dd 	.word	0x080077dd
 8007750:	080077dd 	.word	0x080077dd
 8007754:	080077dd 	.word	0x080077dd
 8007758:	080077dd 	.word	0x080077dd
 800775c:	080077cf 	.word	0x080077cf
 8007760:	2b40      	cmp	r3, #64	; 0x40
 8007762:	d037      	beq.n	80077d4 <UART_SetConfig+0x6bc>
 8007764:	e03a      	b.n	80077dc <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007766:	f7fe f8d7 	bl	8005918 <HAL_RCCEx_GetD3PCLK1Freq>
 800776a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800776c:	e03c      	b.n	80077e8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800776e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007772:	4618      	mov	r0, r3
 8007774:	f7fe f8e6 	bl	8005944 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800777a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800777c:	e034      	b.n	80077e8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800777e:	f107 0318 	add.w	r3, r7, #24
 8007782:	4618      	mov	r0, r3
 8007784:	f7fe fa32 	bl	8005bec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007788:	69fb      	ldr	r3, [r7, #28]
 800778a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800778c:	e02c      	b.n	80077e8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800778e:	4b09      	ldr	r3, [pc, #36]	; (80077b4 <UART_SetConfig+0x69c>)
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	f003 0320 	and.w	r3, r3, #32
 8007796:	2b00      	cmp	r3, #0
 8007798:	d016      	beq.n	80077c8 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800779a:	4b06      	ldr	r3, [pc, #24]	; (80077b4 <UART_SetConfig+0x69c>)
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	08db      	lsrs	r3, r3, #3
 80077a0:	f003 0303 	and.w	r3, r3, #3
 80077a4:	4a07      	ldr	r2, [pc, #28]	; (80077c4 <UART_SetConfig+0x6ac>)
 80077a6:	fa22 f303 	lsr.w	r3, r2, r3
 80077aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80077ac:	e01c      	b.n	80077e8 <UART_SetConfig+0x6d0>
 80077ae:	bf00      	nop
 80077b0:	40011400 	.word	0x40011400
 80077b4:	58024400 	.word	0x58024400
 80077b8:	40007800 	.word	0x40007800
 80077bc:	40007c00 	.word	0x40007c00
 80077c0:	58000c00 	.word	0x58000c00
 80077c4:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80077c8:	4b9d      	ldr	r3, [pc, #628]	; (8007a40 <UART_SetConfig+0x928>)
 80077ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80077cc:	e00c      	b.n	80077e8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80077ce:	4b9d      	ldr	r3, [pc, #628]	; (8007a44 <UART_SetConfig+0x92c>)
 80077d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80077d2:	e009      	b.n	80077e8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80077d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80077d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80077da:	e005      	b.n	80077e8 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80077dc:	2300      	movs	r3, #0
 80077de:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80077e0:	2301      	movs	r3, #1
 80077e2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80077e6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80077e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	f000 81de 	beq.w	8007bac <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80077f0:	697b      	ldr	r3, [r7, #20]
 80077f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077f4:	4a94      	ldr	r2, [pc, #592]	; (8007a48 <UART_SetConfig+0x930>)
 80077f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80077fa:	461a      	mov	r2, r3
 80077fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077fe:	fbb3 f3f2 	udiv	r3, r3, r2
 8007802:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007804:	697b      	ldr	r3, [r7, #20]
 8007806:	685a      	ldr	r2, [r3, #4]
 8007808:	4613      	mov	r3, r2
 800780a:	005b      	lsls	r3, r3, #1
 800780c:	4413      	add	r3, r2
 800780e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007810:	429a      	cmp	r2, r3
 8007812:	d305      	bcc.n	8007820 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007814:	697b      	ldr	r3, [r7, #20]
 8007816:	685b      	ldr	r3, [r3, #4]
 8007818:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800781a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800781c:	429a      	cmp	r2, r3
 800781e:	d903      	bls.n	8007828 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8007820:	2301      	movs	r3, #1
 8007822:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007826:	e1c1      	b.n	8007bac <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007828:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800782a:	2200      	movs	r2, #0
 800782c:	60bb      	str	r3, [r7, #8]
 800782e:	60fa      	str	r2, [r7, #12]
 8007830:	697b      	ldr	r3, [r7, #20]
 8007832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007834:	4a84      	ldr	r2, [pc, #528]	; (8007a48 <UART_SetConfig+0x930>)
 8007836:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800783a:	b29b      	uxth	r3, r3
 800783c:	2200      	movs	r2, #0
 800783e:	603b      	str	r3, [r7, #0]
 8007840:	607a      	str	r2, [r7, #4]
 8007842:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007846:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800784a:	f7f8 fda1 	bl	8000390 <__aeabi_uldivmod>
 800784e:	4602      	mov	r2, r0
 8007850:	460b      	mov	r3, r1
 8007852:	4610      	mov	r0, r2
 8007854:	4619      	mov	r1, r3
 8007856:	f04f 0200 	mov.w	r2, #0
 800785a:	f04f 0300 	mov.w	r3, #0
 800785e:	020b      	lsls	r3, r1, #8
 8007860:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007864:	0202      	lsls	r2, r0, #8
 8007866:	6979      	ldr	r1, [r7, #20]
 8007868:	6849      	ldr	r1, [r1, #4]
 800786a:	0849      	lsrs	r1, r1, #1
 800786c:	2000      	movs	r0, #0
 800786e:	460c      	mov	r4, r1
 8007870:	4605      	mov	r5, r0
 8007872:	eb12 0804 	adds.w	r8, r2, r4
 8007876:	eb43 0905 	adc.w	r9, r3, r5
 800787a:	697b      	ldr	r3, [r7, #20]
 800787c:	685b      	ldr	r3, [r3, #4]
 800787e:	2200      	movs	r2, #0
 8007880:	469a      	mov	sl, r3
 8007882:	4693      	mov	fp, r2
 8007884:	4652      	mov	r2, sl
 8007886:	465b      	mov	r3, fp
 8007888:	4640      	mov	r0, r8
 800788a:	4649      	mov	r1, r9
 800788c:	f7f8 fd80 	bl	8000390 <__aeabi_uldivmod>
 8007890:	4602      	mov	r2, r0
 8007892:	460b      	mov	r3, r1
 8007894:	4613      	mov	r3, r2
 8007896:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800789a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800789e:	d308      	bcc.n	80078b2 <UART_SetConfig+0x79a>
 80078a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80078a6:	d204      	bcs.n	80078b2 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80078a8:	697b      	ldr	r3, [r7, #20]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80078ae:	60da      	str	r2, [r3, #12]
 80078b0:	e17c      	b.n	8007bac <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80078b2:	2301      	movs	r3, #1
 80078b4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80078b8:	e178      	b.n	8007bac <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80078ba:	697b      	ldr	r3, [r7, #20]
 80078bc:	69db      	ldr	r3, [r3, #28]
 80078be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80078c2:	f040 80c5 	bne.w	8007a50 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80078c6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80078ca:	2b20      	cmp	r3, #32
 80078cc:	dc48      	bgt.n	8007960 <UART_SetConfig+0x848>
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	db7b      	blt.n	80079ca <UART_SetConfig+0x8b2>
 80078d2:	2b20      	cmp	r3, #32
 80078d4:	d879      	bhi.n	80079ca <UART_SetConfig+0x8b2>
 80078d6:	a201      	add	r2, pc, #4	; (adr r2, 80078dc <UART_SetConfig+0x7c4>)
 80078d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078dc:	08007967 	.word	0x08007967
 80078e0:	0800796f 	.word	0x0800796f
 80078e4:	080079cb 	.word	0x080079cb
 80078e8:	080079cb 	.word	0x080079cb
 80078ec:	08007977 	.word	0x08007977
 80078f0:	080079cb 	.word	0x080079cb
 80078f4:	080079cb 	.word	0x080079cb
 80078f8:	080079cb 	.word	0x080079cb
 80078fc:	08007987 	.word	0x08007987
 8007900:	080079cb 	.word	0x080079cb
 8007904:	080079cb 	.word	0x080079cb
 8007908:	080079cb 	.word	0x080079cb
 800790c:	080079cb 	.word	0x080079cb
 8007910:	080079cb 	.word	0x080079cb
 8007914:	080079cb 	.word	0x080079cb
 8007918:	080079cb 	.word	0x080079cb
 800791c:	08007997 	.word	0x08007997
 8007920:	080079cb 	.word	0x080079cb
 8007924:	080079cb 	.word	0x080079cb
 8007928:	080079cb 	.word	0x080079cb
 800792c:	080079cb 	.word	0x080079cb
 8007930:	080079cb 	.word	0x080079cb
 8007934:	080079cb 	.word	0x080079cb
 8007938:	080079cb 	.word	0x080079cb
 800793c:	080079cb 	.word	0x080079cb
 8007940:	080079cb 	.word	0x080079cb
 8007944:	080079cb 	.word	0x080079cb
 8007948:	080079cb 	.word	0x080079cb
 800794c:	080079cb 	.word	0x080079cb
 8007950:	080079cb 	.word	0x080079cb
 8007954:	080079cb 	.word	0x080079cb
 8007958:	080079cb 	.word	0x080079cb
 800795c:	080079bd 	.word	0x080079bd
 8007960:	2b40      	cmp	r3, #64	; 0x40
 8007962:	d02e      	beq.n	80079c2 <UART_SetConfig+0x8aa>
 8007964:	e031      	b.n	80079ca <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007966:	f7fc fd5f 	bl	8004428 <HAL_RCC_GetPCLK1Freq>
 800796a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800796c:	e033      	b.n	80079d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800796e:	f7fc fd71 	bl	8004454 <HAL_RCC_GetPCLK2Freq>
 8007972:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007974:	e02f      	b.n	80079d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007976:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800797a:	4618      	mov	r0, r3
 800797c:	f7fd ffe2 	bl	8005944 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007982:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007984:	e027      	b.n	80079d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007986:	f107 0318 	add.w	r3, r7, #24
 800798a:	4618      	mov	r0, r3
 800798c:	f7fe f92e 	bl	8005bec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007990:	69fb      	ldr	r3, [r7, #28]
 8007992:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007994:	e01f      	b.n	80079d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007996:	4b2d      	ldr	r3, [pc, #180]	; (8007a4c <UART_SetConfig+0x934>)
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	f003 0320 	and.w	r3, r3, #32
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d009      	beq.n	80079b6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80079a2:	4b2a      	ldr	r3, [pc, #168]	; (8007a4c <UART_SetConfig+0x934>)
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	08db      	lsrs	r3, r3, #3
 80079a8:	f003 0303 	and.w	r3, r3, #3
 80079ac:	4a24      	ldr	r2, [pc, #144]	; (8007a40 <UART_SetConfig+0x928>)
 80079ae:	fa22 f303 	lsr.w	r3, r2, r3
 80079b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80079b4:	e00f      	b.n	80079d6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80079b6:	4b22      	ldr	r3, [pc, #136]	; (8007a40 <UART_SetConfig+0x928>)
 80079b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80079ba:	e00c      	b.n	80079d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80079bc:	4b21      	ldr	r3, [pc, #132]	; (8007a44 <UART_SetConfig+0x92c>)
 80079be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80079c0:	e009      	b.n	80079d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80079c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80079c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80079c8:	e005      	b.n	80079d6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80079ca:	2300      	movs	r3, #0
 80079cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80079ce:	2301      	movs	r3, #1
 80079d0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80079d4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80079d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079d8:	2b00      	cmp	r3, #0
 80079da:	f000 80e7 	beq.w	8007bac <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80079de:	697b      	ldr	r3, [r7, #20]
 80079e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079e2:	4a19      	ldr	r2, [pc, #100]	; (8007a48 <UART_SetConfig+0x930>)
 80079e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80079e8:	461a      	mov	r2, r3
 80079ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079ec:	fbb3 f3f2 	udiv	r3, r3, r2
 80079f0:	005a      	lsls	r2, r3, #1
 80079f2:	697b      	ldr	r3, [r7, #20]
 80079f4:	685b      	ldr	r3, [r3, #4]
 80079f6:	085b      	lsrs	r3, r3, #1
 80079f8:	441a      	add	r2, r3
 80079fa:	697b      	ldr	r3, [r7, #20]
 80079fc:	685b      	ldr	r3, [r3, #4]
 80079fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a02:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007a04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a06:	2b0f      	cmp	r3, #15
 8007a08:	d916      	bls.n	8007a38 <UART_SetConfig+0x920>
 8007a0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a10:	d212      	bcs.n	8007a38 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007a12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a14:	b29b      	uxth	r3, r3
 8007a16:	f023 030f 	bic.w	r3, r3, #15
 8007a1a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007a1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a1e:	085b      	lsrs	r3, r3, #1
 8007a20:	b29b      	uxth	r3, r3
 8007a22:	f003 0307 	and.w	r3, r3, #7
 8007a26:	b29a      	uxth	r2, r3
 8007a28:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007a2a:	4313      	orrs	r3, r2
 8007a2c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8007a2e:	697b      	ldr	r3, [r7, #20]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8007a34:	60da      	str	r2, [r3, #12]
 8007a36:	e0b9      	b.n	8007bac <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007a38:	2301      	movs	r3, #1
 8007a3a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007a3e:	e0b5      	b.n	8007bac <UART_SetConfig+0xa94>
 8007a40:	03d09000 	.word	0x03d09000
 8007a44:	003d0900 	.word	0x003d0900
 8007a48:	0800f84c 	.word	0x0800f84c
 8007a4c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8007a50:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007a54:	2b20      	cmp	r3, #32
 8007a56:	dc49      	bgt.n	8007aec <UART_SetConfig+0x9d4>
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	db7c      	blt.n	8007b56 <UART_SetConfig+0xa3e>
 8007a5c:	2b20      	cmp	r3, #32
 8007a5e:	d87a      	bhi.n	8007b56 <UART_SetConfig+0xa3e>
 8007a60:	a201      	add	r2, pc, #4	; (adr r2, 8007a68 <UART_SetConfig+0x950>)
 8007a62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a66:	bf00      	nop
 8007a68:	08007af3 	.word	0x08007af3
 8007a6c:	08007afb 	.word	0x08007afb
 8007a70:	08007b57 	.word	0x08007b57
 8007a74:	08007b57 	.word	0x08007b57
 8007a78:	08007b03 	.word	0x08007b03
 8007a7c:	08007b57 	.word	0x08007b57
 8007a80:	08007b57 	.word	0x08007b57
 8007a84:	08007b57 	.word	0x08007b57
 8007a88:	08007b13 	.word	0x08007b13
 8007a8c:	08007b57 	.word	0x08007b57
 8007a90:	08007b57 	.word	0x08007b57
 8007a94:	08007b57 	.word	0x08007b57
 8007a98:	08007b57 	.word	0x08007b57
 8007a9c:	08007b57 	.word	0x08007b57
 8007aa0:	08007b57 	.word	0x08007b57
 8007aa4:	08007b57 	.word	0x08007b57
 8007aa8:	08007b23 	.word	0x08007b23
 8007aac:	08007b57 	.word	0x08007b57
 8007ab0:	08007b57 	.word	0x08007b57
 8007ab4:	08007b57 	.word	0x08007b57
 8007ab8:	08007b57 	.word	0x08007b57
 8007abc:	08007b57 	.word	0x08007b57
 8007ac0:	08007b57 	.word	0x08007b57
 8007ac4:	08007b57 	.word	0x08007b57
 8007ac8:	08007b57 	.word	0x08007b57
 8007acc:	08007b57 	.word	0x08007b57
 8007ad0:	08007b57 	.word	0x08007b57
 8007ad4:	08007b57 	.word	0x08007b57
 8007ad8:	08007b57 	.word	0x08007b57
 8007adc:	08007b57 	.word	0x08007b57
 8007ae0:	08007b57 	.word	0x08007b57
 8007ae4:	08007b57 	.word	0x08007b57
 8007ae8:	08007b49 	.word	0x08007b49
 8007aec:	2b40      	cmp	r3, #64	; 0x40
 8007aee:	d02e      	beq.n	8007b4e <UART_SetConfig+0xa36>
 8007af0:	e031      	b.n	8007b56 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007af2:	f7fc fc99 	bl	8004428 <HAL_RCC_GetPCLK1Freq>
 8007af6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007af8:	e033      	b.n	8007b62 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007afa:	f7fc fcab 	bl	8004454 <HAL_RCC_GetPCLK2Freq>
 8007afe:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007b00:	e02f      	b.n	8007b62 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007b02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007b06:	4618      	mov	r0, r3
 8007b08:	f7fd ff1c 	bl	8005944 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007b10:	e027      	b.n	8007b62 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007b12:	f107 0318 	add.w	r3, r7, #24
 8007b16:	4618      	mov	r0, r3
 8007b18:	f7fe f868 	bl	8005bec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007b1c:	69fb      	ldr	r3, [r7, #28]
 8007b1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007b20:	e01f      	b.n	8007b62 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007b22:	4b2d      	ldr	r3, [pc, #180]	; (8007bd8 <UART_SetConfig+0xac0>)
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	f003 0320 	and.w	r3, r3, #32
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d009      	beq.n	8007b42 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007b2e:	4b2a      	ldr	r3, [pc, #168]	; (8007bd8 <UART_SetConfig+0xac0>)
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	08db      	lsrs	r3, r3, #3
 8007b34:	f003 0303 	and.w	r3, r3, #3
 8007b38:	4a28      	ldr	r2, [pc, #160]	; (8007bdc <UART_SetConfig+0xac4>)
 8007b3a:	fa22 f303 	lsr.w	r3, r2, r3
 8007b3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007b40:	e00f      	b.n	8007b62 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8007b42:	4b26      	ldr	r3, [pc, #152]	; (8007bdc <UART_SetConfig+0xac4>)
 8007b44:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007b46:	e00c      	b.n	8007b62 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007b48:	4b25      	ldr	r3, [pc, #148]	; (8007be0 <UART_SetConfig+0xac8>)
 8007b4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007b4c:	e009      	b.n	8007b62 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007b4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007b52:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007b54:	e005      	b.n	8007b62 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8007b56:	2300      	movs	r3, #0
 8007b58:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007b5a:	2301      	movs	r3, #1
 8007b5c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007b60:	bf00      	nop
    }

    if (pclk != 0U)
 8007b62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d021      	beq.n	8007bac <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007b68:	697b      	ldr	r3, [r7, #20]
 8007b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b6c:	4a1d      	ldr	r2, [pc, #116]	; (8007be4 <UART_SetConfig+0xacc>)
 8007b6e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007b72:	461a      	mov	r2, r3
 8007b74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b76:	fbb3 f2f2 	udiv	r2, r3, r2
 8007b7a:	697b      	ldr	r3, [r7, #20]
 8007b7c:	685b      	ldr	r3, [r3, #4]
 8007b7e:	085b      	lsrs	r3, r3, #1
 8007b80:	441a      	add	r2, r3
 8007b82:	697b      	ldr	r3, [r7, #20]
 8007b84:	685b      	ldr	r3, [r3, #4]
 8007b86:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b8a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007b8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b8e:	2b0f      	cmp	r3, #15
 8007b90:	d909      	bls.n	8007ba6 <UART_SetConfig+0xa8e>
 8007b92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b98:	d205      	bcs.n	8007ba6 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007b9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b9c:	b29a      	uxth	r2, r3
 8007b9e:	697b      	ldr	r3, [r7, #20]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	60da      	str	r2, [r3, #12]
 8007ba4:	e002      	b.n	8007bac <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007ba6:	2301      	movs	r3, #1
 8007ba8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007bac:	697b      	ldr	r3, [r7, #20]
 8007bae:	2201      	movs	r2, #1
 8007bb0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007bb4:	697b      	ldr	r3, [r7, #20]
 8007bb6:	2201      	movs	r2, #1
 8007bb8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007bbc:	697b      	ldr	r3, [r7, #20]
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8007bc2:	697b      	ldr	r3, [r7, #20]
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8007bc8:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8007bcc:	4618      	mov	r0, r3
 8007bce:	3748      	adds	r7, #72	; 0x48
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007bd6:	bf00      	nop
 8007bd8:	58024400 	.word	0x58024400
 8007bdc:	03d09000 	.word	0x03d09000
 8007be0:	003d0900 	.word	0x003d0900
 8007be4:	0800f84c 	.word	0x0800f84c

08007be8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007be8:	b480      	push	{r7}
 8007bea:	b083      	sub	sp, #12
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bf4:	f003 0301 	and.w	r3, r3, #1
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d00a      	beq.n	8007c12 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	685b      	ldr	r3, [r3, #4]
 8007c02:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	430a      	orrs	r2, r1
 8007c10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c16:	f003 0302 	and.w	r3, r3, #2
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d00a      	beq.n	8007c34 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	685b      	ldr	r3, [r3, #4]
 8007c24:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	430a      	orrs	r2, r1
 8007c32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c38:	f003 0304 	and.w	r3, r3, #4
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d00a      	beq.n	8007c56 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	685b      	ldr	r3, [r3, #4]
 8007c46:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	430a      	orrs	r2, r1
 8007c54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c5a:	f003 0308 	and.w	r3, r3, #8
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d00a      	beq.n	8007c78 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	685b      	ldr	r3, [r3, #4]
 8007c68:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	430a      	orrs	r2, r1
 8007c76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c7c:	f003 0310 	and.w	r3, r3, #16
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d00a      	beq.n	8007c9a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	689b      	ldr	r3, [r3, #8]
 8007c8a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	430a      	orrs	r2, r1
 8007c98:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c9e:	f003 0320 	and.w	r3, r3, #32
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d00a      	beq.n	8007cbc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	689b      	ldr	r3, [r3, #8]
 8007cac:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	430a      	orrs	r2, r1
 8007cba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d01a      	beq.n	8007cfe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	685b      	ldr	r3, [r3, #4]
 8007cce:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	430a      	orrs	r2, r1
 8007cdc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ce2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007ce6:	d10a      	bne.n	8007cfe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	685b      	ldr	r3, [r3, #4]
 8007cee:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	430a      	orrs	r2, r1
 8007cfc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d00a      	beq.n	8007d20 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	685b      	ldr	r3, [r3, #4]
 8007d10:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	430a      	orrs	r2, r1
 8007d1e:	605a      	str	r2, [r3, #4]
  }
}
 8007d20:	bf00      	nop
 8007d22:	370c      	adds	r7, #12
 8007d24:	46bd      	mov	sp, r7
 8007d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2a:	4770      	bx	lr

08007d2c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b098      	sub	sp, #96	; 0x60
 8007d30:	af02      	add	r7, sp, #8
 8007d32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2200      	movs	r2, #0
 8007d38:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007d3c:	f7f9 fd92 	bl	8001864 <HAL_GetTick>
 8007d40:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	f003 0308 	and.w	r3, r3, #8
 8007d4c:	2b08      	cmp	r3, #8
 8007d4e:	d12f      	bne.n	8007db0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007d50:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007d54:	9300      	str	r3, [sp, #0]
 8007d56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007d58:	2200      	movs	r2, #0
 8007d5a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007d5e:	6878      	ldr	r0, [r7, #4]
 8007d60:	f000 f88e 	bl	8007e80 <UART_WaitOnFlagUntilTimeout>
 8007d64:	4603      	mov	r3, r0
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d022      	beq.n	8007db0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d72:	e853 3f00 	ldrex	r3, [r3]
 8007d76:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007d78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007d7e:	653b      	str	r3, [r7, #80]	; 0x50
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	461a      	mov	r2, r3
 8007d86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d88:	647b      	str	r3, [r7, #68]	; 0x44
 8007d8a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d8c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007d8e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007d90:	e841 2300 	strex	r3, r2, [r1]
 8007d94:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007d96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d1e6      	bne.n	8007d6a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2220      	movs	r2, #32
 8007da0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2200      	movs	r2, #0
 8007da8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007dac:	2303      	movs	r3, #3
 8007dae:	e063      	b.n	8007e78 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	f003 0304 	and.w	r3, r3, #4
 8007dba:	2b04      	cmp	r3, #4
 8007dbc:	d149      	bne.n	8007e52 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007dbe:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007dc2:	9300      	str	r3, [sp, #0]
 8007dc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007dc6:	2200      	movs	r2, #0
 8007dc8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007dcc:	6878      	ldr	r0, [r7, #4]
 8007dce:	f000 f857 	bl	8007e80 <UART_WaitOnFlagUntilTimeout>
 8007dd2:	4603      	mov	r3, r0
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d03c      	beq.n	8007e52 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007de0:	e853 3f00 	ldrex	r3, [r3]
 8007de4:	623b      	str	r3, [r7, #32]
   return(result);
 8007de6:	6a3b      	ldr	r3, [r7, #32]
 8007de8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007dec:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	461a      	mov	r2, r3
 8007df4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007df6:	633b      	str	r3, [r7, #48]	; 0x30
 8007df8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dfa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007dfc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007dfe:	e841 2300 	strex	r3, r2, [r1]
 8007e02:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d1e6      	bne.n	8007dd8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	3308      	adds	r3, #8
 8007e10:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e12:	693b      	ldr	r3, [r7, #16]
 8007e14:	e853 3f00 	ldrex	r3, [r3]
 8007e18:	60fb      	str	r3, [r7, #12]
   return(result);
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	f023 0301 	bic.w	r3, r3, #1
 8007e20:	64bb      	str	r3, [r7, #72]	; 0x48
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	3308      	adds	r3, #8
 8007e28:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007e2a:	61fa      	str	r2, [r7, #28]
 8007e2c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e2e:	69b9      	ldr	r1, [r7, #24]
 8007e30:	69fa      	ldr	r2, [r7, #28]
 8007e32:	e841 2300 	strex	r3, r2, [r1]
 8007e36:	617b      	str	r3, [r7, #20]
   return(result);
 8007e38:	697b      	ldr	r3, [r7, #20]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d1e5      	bne.n	8007e0a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	2220      	movs	r2, #32
 8007e42:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	2200      	movs	r2, #0
 8007e4a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007e4e:	2303      	movs	r3, #3
 8007e50:	e012      	b.n	8007e78 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	2220      	movs	r2, #32
 8007e56:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	2220      	movs	r2, #32
 8007e5e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	2200      	movs	r2, #0
 8007e66:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	2200      	movs	r2, #0
 8007e72:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007e76:	2300      	movs	r3, #0
}
 8007e78:	4618      	mov	r0, r3
 8007e7a:	3758      	adds	r7, #88	; 0x58
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	bd80      	pop	{r7, pc}

08007e80 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007e80:	b580      	push	{r7, lr}
 8007e82:	b084      	sub	sp, #16
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	60f8      	str	r0, [r7, #12]
 8007e88:	60b9      	str	r1, [r7, #8]
 8007e8a:	603b      	str	r3, [r7, #0]
 8007e8c:	4613      	mov	r3, r2
 8007e8e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e90:	e049      	b.n	8007f26 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007e92:	69bb      	ldr	r3, [r7, #24]
 8007e94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e98:	d045      	beq.n	8007f26 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e9a:	f7f9 fce3 	bl	8001864 <HAL_GetTick>
 8007e9e:	4602      	mov	r2, r0
 8007ea0:	683b      	ldr	r3, [r7, #0]
 8007ea2:	1ad3      	subs	r3, r2, r3
 8007ea4:	69ba      	ldr	r2, [r7, #24]
 8007ea6:	429a      	cmp	r2, r3
 8007ea8:	d302      	bcc.n	8007eb0 <UART_WaitOnFlagUntilTimeout+0x30>
 8007eaa:	69bb      	ldr	r3, [r7, #24]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d101      	bne.n	8007eb4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007eb0:	2303      	movs	r3, #3
 8007eb2:	e048      	b.n	8007f46 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	f003 0304 	and.w	r3, r3, #4
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d031      	beq.n	8007f26 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	69db      	ldr	r3, [r3, #28]
 8007ec8:	f003 0308 	and.w	r3, r3, #8
 8007ecc:	2b08      	cmp	r3, #8
 8007ece:	d110      	bne.n	8007ef2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	2208      	movs	r2, #8
 8007ed6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8007ed8:	68f8      	ldr	r0, [r7, #12]
 8007eda:	f000 f95b 	bl	8008194 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	2208      	movs	r2, #8
 8007ee2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	2200      	movs	r2, #0
 8007eea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8007eee:	2301      	movs	r3, #1
 8007ef0:	e029      	b.n	8007f46 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	69db      	ldr	r3, [r3, #28]
 8007ef8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007efc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007f00:	d111      	bne.n	8007f26 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007f0a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007f0c:	68f8      	ldr	r0, [r7, #12]
 8007f0e:	f000 f941 	bl	8008194 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	2220      	movs	r2, #32
 8007f16:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8007f22:	2303      	movs	r3, #3
 8007f24:	e00f      	b.n	8007f46 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	69da      	ldr	r2, [r3, #28]
 8007f2c:	68bb      	ldr	r3, [r7, #8]
 8007f2e:	4013      	ands	r3, r2
 8007f30:	68ba      	ldr	r2, [r7, #8]
 8007f32:	429a      	cmp	r2, r3
 8007f34:	bf0c      	ite	eq
 8007f36:	2301      	moveq	r3, #1
 8007f38:	2300      	movne	r3, #0
 8007f3a:	b2db      	uxtb	r3, r3
 8007f3c:	461a      	mov	r2, r3
 8007f3e:	79fb      	ldrb	r3, [r7, #7]
 8007f40:	429a      	cmp	r2, r3
 8007f42:	d0a6      	beq.n	8007e92 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007f44:	2300      	movs	r3, #0
}
 8007f46:	4618      	mov	r0, r3
 8007f48:	3710      	adds	r7, #16
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	bd80      	pop	{r7, pc}
	...

08007f50 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007f50:	b480      	push	{r7}
 8007f52:	b0a3      	sub	sp, #140	; 0x8c
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	60f8      	str	r0, [r7, #12]
 8007f58:	60b9      	str	r1, [r7, #8]
 8007f5a:	4613      	mov	r3, r2
 8007f5c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	68ba      	ldr	r2, [r7, #8]
 8007f62:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	88fa      	ldrh	r2, [r7, #6]
 8007f68:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	88fa      	ldrh	r2, [r7, #6]
 8007f70:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	2200      	movs	r2, #0
 8007f78:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	689b      	ldr	r3, [r3, #8]
 8007f7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f82:	d10e      	bne.n	8007fa2 <UART_Start_Receive_IT+0x52>
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	691b      	ldr	r3, [r3, #16]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d105      	bne.n	8007f98 <UART_Start_Receive_IT+0x48>
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007f92:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007f96:	e02d      	b.n	8007ff4 <UART_Start_Receive_IT+0xa4>
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	22ff      	movs	r2, #255	; 0xff
 8007f9c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007fa0:	e028      	b.n	8007ff4 <UART_Start_Receive_IT+0xa4>
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	689b      	ldr	r3, [r3, #8]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d10d      	bne.n	8007fc6 <UART_Start_Receive_IT+0x76>
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	691b      	ldr	r3, [r3, #16]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d104      	bne.n	8007fbc <UART_Start_Receive_IT+0x6c>
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	22ff      	movs	r2, #255	; 0xff
 8007fb6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007fba:	e01b      	b.n	8007ff4 <UART_Start_Receive_IT+0xa4>
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	227f      	movs	r2, #127	; 0x7f
 8007fc0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007fc4:	e016      	b.n	8007ff4 <UART_Start_Receive_IT+0xa4>
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	689b      	ldr	r3, [r3, #8]
 8007fca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007fce:	d10d      	bne.n	8007fec <UART_Start_Receive_IT+0x9c>
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	691b      	ldr	r3, [r3, #16]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d104      	bne.n	8007fe2 <UART_Start_Receive_IT+0x92>
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	227f      	movs	r2, #127	; 0x7f
 8007fdc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007fe0:	e008      	b.n	8007ff4 <UART_Start_Receive_IT+0xa4>
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	223f      	movs	r2, #63	; 0x3f
 8007fe6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007fea:	e003      	b.n	8007ff4 <UART_Start_Receive_IT+0xa4>
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	2200      	movs	r2, #0
 8007ff0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	2222      	movs	r2, #34	; 0x22
 8008000:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	3308      	adds	r3, #8
 800800a:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800800c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800800e:	e853 3f00 	ldrex	r3, [r3]
 8008012:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8008014:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008016:	f043 0301 	orr.w	r3, r3, #1
 800801a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	3308      	adds	r3, #8
 8008024:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8008028:	673a      	str	r2, [r7, #112]	; 0x70
 800802a:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800802c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800802e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008030:	e841 2300 	strex	r3, r2, [r1]
 8008034:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8008036:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008038:	2b00      	cmp	r3, #0
 800803a:	d1e3      	bne.n	8008004 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008040:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008044:	d14f      	bne.n	80080e6 <UART_Start_Receive_IT+0x196>
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800804c:	88fa      	ldrh	r2, [r7, #6]
 800804e:	429a      	cmp	r2, r3
 8008050:	d349      	bcc.n	80080e6 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	689b      	ldr	r3, [r3, #8]
 8008056:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800805a:	d107      	bne.n	800806c <UART_Start_Receive_IT+0x11c>
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	691b      	ldr	r3, [r3, #16]
 8008060:	2b00      	cmp	r3, #0
 8008062:	d103      	bne.n	800806c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	4a47      	ldr	r2, [pc, #284]	; (8008184 <UART_Start_Receive_IT+0x234>)
 8008068:	675a      	str	r2, [r3, #116]	; 0x74
 800806a:	e002      	b.n	8008072 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	4a46      	ldr	r2, [pc, #280]	; (8008188 <UART_Start_Receive_IT+0x238>)
 8008070:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	691b      	ldr	r3, [r3, #16]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d01a      	beq.n	80080b0 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008080:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008082:	e853 3f00 	ldrex	r3, [r3]
 8008086:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008088:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800808a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800808e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	461a      	mov	r2, r3
 8008098:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800809c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800809e:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080a0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80080a2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80080a4:	e841 2300 	strex	r3, r2, [r1]
 80080a8:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80080aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d1e4      	bne.n	800807a <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	3308      	adds	r3, #8
 80080b6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080ba:	e853 3f00 	ldrex	r3, [r3]
 80080be:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80080c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80080c6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	3308      	adds	r3, #8
 80080ce:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80080d0:	64ba      	str	r2, [r7, #72]	; 0x48
 80080d2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080d4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80080d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80080d8:	e841 2300 	strex	r3, r2, [r1]
 80080dc:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80080de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d1e5      	bne.n	80080b0 <UART_Start_Receive_IT+0x160>
 80080e4:	e046      	b.n	8008174 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	689b      	ldr	r3, [r3, #8]
 80080ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080ee:	d107      	bne.n	8008100 <UART_Start_Receive_IT+0x1b0>
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	691b      	ldr	r3, [r3, #16]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d103      	bne.n	8008100 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	4a24      	ldr	r2, [pc, #144]	; (800818c <UART_Start_Receive_IT+0x23c>)
 80080fc:	675a      	str	r2, [r3, #116]	; 0x74
 80080fe:	e002      	b.n	8008106 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	4a23      	ldr	r2, [pc, #140]	; (8008190 <UART_Start_Receive_IT+0x240>)
 8008104:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	691b      	ldr	r3, [r3, #16]
 800810a:	2b00      	cmp	r3, #0
 800810c:	d019      	beq.n	8008142 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008116:	e853 3f00 	ldrex	r3, [r3]
 800811a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800811c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800811e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8008122:	677b      	str	r3, [r7, #116]	; 0x74
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	461a      	mov	r2, r3
 800812a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800812c:	637b      	str	r3, [r7, #52]	; 0x34
 800812e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008130:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008132:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008134:	e841 2300 	strex	r3, r2, [r1]
 8008138:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800813a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800813c:	2b00      	cmp	r3, #0
 800813e:	d1e6      	bne.n	800810e <UART_Start_Receive_IT+0x1be>
 8008140:	e018      	b.n	8008174 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008148:	697b      	ldr	r3, [r7, #20]
 800814a:	e853 3f00 	ldrex	r3, [r3]
 800814e:	613b      	str	r3, [r7, #16]
   return(result);
 8008150:	693b      	ldr	r3, [r7, #16]
 8008152:	f043 0320 	orr.w	r3, r3, #32
 8008156:	67bb      	str	r3, [r7, #120]	; 0x78
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	461a      	mov	r2, r3
 800815e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008160:	623b      	str	r3, [r7, #32]
 8008162:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008164:	69f9      	ldr	r1, [r7, #28]
 8008166:	6a3a      	ldr	r2, [r7, #32]
 8008168:	e841 2300 	strex	r3, r2, [r1]
 800816c:	61bb      	str	r3, [r7, #24]
   return(result);
 800816e:	69bb      	ldr	r3, [r7, #24]
 8008170:	2b00      	cmp	r3, #0
 8008172:	d1e6      	bne.n	8008142 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8008174:	2300      	movs	r3, #0
}
 8008176:	4618      	mov	r0, r3
 8008178:	378c      	adds	r7, #140	; 0x8c
 800817a:	46bd      	mov	sp, r7
 800817c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008180:	4770      	bx	lr
 8008182:	bf00      	nop
 8008184:	080089b5 	.word	0x080089b5
 8008188:	08008655 	.word	0x08008655
 800818c:	0800849d 	.word	0x0800849d
 8008190:	080082e5 	.word	0x080082e5

08008194 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008194:	b480      	push	{r7}
 8008196:	b095      	sub	sp, #84	; 0x54
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081a4:	e853 3f00 	ldrex	r3, [r3]
 80081a8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80081aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081ac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80081b0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	461a      	mov	r2, r3
 80081b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80081ba:	643b      	str	r3, [r7, #64]	; 0x40
 80081bc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081be:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80081c0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80081c2:	e841 2300 	strex	r3, r2, [r1]
 80081c6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80081c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d1e6      	bne.n	800819c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	3308      	adds	r3, #8
 80081d4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081d6:	6a3b      	ldr	r3, [r7, #32]
 80081d8:	e853 3f00 	ldrex	r3, [r3]
 80081dc:	61fb      	str	r3, [r7, #28]
   return(result);
 80081de:	69fa      	ldr	r2, [r7, #28]
 80081e0:	4b1e      	ldr	r3, [pc, #120]	; (800825c <UART_EndRxTransfer+0xc8>)
 80081e2:	4013      	ands	r3, r2
 80081e4:	64bb      	str	r3, [r7, #72]	; 0x48
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	3308      	adds	r3, #8
 80081ec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80081ee:	62fa      	str	r2, [r7, #44]	; 0x2c
 80081f0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80081f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80081f6:	e841 2300 	strex	r3, r2, [r1]
 80081fa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80081fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d1e5      	bne.n	80081ce <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008206:	2b01      	cmp	r3, #1
 8008208:	d118      	bne.n	800823c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	e853 3f00 	ldrex	r3, [r3]
 8008216:	60bb      	str	r3, [r7, #8]
   return(result);
 8008218:	68bb      	ldr	r3, [r7, #8]
 800821a:	f023 0310 	bic.w	r3, r3, #16
 800821e:	647b      	str	r3, [r7, #68]	; 0x44
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	461a      	mov	r2, r3
 8008226:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008228:	61bb      	str	r3, [r7, #24]
 800822a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800822c:	6979      	ldr	r1, [r7, #20]
 800822e:	69ba      	ldr	r2, [r7, #24]
 8008230:	e841 2300 	strex	r3, r2, [r1]
 8008234:	613b      	str	r3, [r7, #16]
   return(result);
 8008236:	693b      	ldr	r3, [r7, #16]
 8008238:	2b00      	cmp	r3, #0
 800823a:	d1e6      	bne.n	800820a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	2220      	movs	r2, #32
 8008240:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	2200      	movs	r2, #0
 8008248:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	2200      	movs	r2, #0
 800824e:	675a      	str	r2, [r3, #116]	; 0x74
}
 8008250:	bf00      	nop
 8008252:	3754      	adds	r7, #84	; 0x54
 8008254:	46bd      	mov	sp, r7
 8008256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825a:	4770      	bx	lr
 800825c:	effffffe 	.word	0xeffffffe

08008260 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008260:	b580      	push	{r7, lr}
 8008262:	b084      	sub	sp, #16
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800826c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	2200      	movs	r2, #0
 8008272:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	2200      	movs	r2, #0
 800827a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800827e:	68f8      	ldr	r0, [r7, #12]
 8008280:	f7fe ff34 	bl	80070ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008284:	bf00      	nop
 8008286:	3710      	adds	r7, #16
 8008288:	46bd      	mov	sp, r7
 800828a:	bd80      	pop	{r7, pc}

0800828c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800828c:	b580      	push	{r7, lr}
 800828e:	b088      	sub	sp, #32
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	e853 3f00 	ldrex	r3, [r3]
 80082a0:	60bb      	str	r3, [r7, #8]
   return(result);
 80082a2:	68bb      	ldr	r3, [r7, #8]
 80082a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80082a8:	61fb      	str	r3, [r7, #28]
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	461a      	mov	r2, r3
 80082b0:	69fb      	ldr	r3, [r7, #28]
 80082b2:	61bb      	str	r3, [r7, #24]
 80082b4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082b6:	6979      	ldr	r1, [r7, #20]
 80082b8:	69ba      	ldr	r2, [r7, #24]
 80082ba:	e841 2300 	strex	r3, r2, [r1]
 80082be:	613b      	str	r3, [r7, #16]
   return(result);
 80082c0:	693b      	ldr	r3, [r7, #16]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d1e6      	bne.n	8008294 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	2220      	movs	r2, #32
 80082ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	2200      	movs	r2, #0
 80082d2:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80082d4:	6878      	ldr	r0, [r7, #4]
 80082d6:	f7fe feff 	bl	80070d8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80082da:	bf00      	nop
 80082dc:	3720      	adds	r7, #32
 80082de:	46bd      	mov	sp, r7
 80082e0:	bd80      	pop	{r7, pc}
	...

080082e4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80082e4:	b580      	push	{r7, lr}
 80082e6:	b09c      	sub	sp, #112	; 0x70
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80082f2:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80082fc:	2b22      	cmp	r3, #34	; 0x22
 80082fe:	f040 80be 	bne.w	800847e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008308:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800830c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8008310:	b2d9      	uxtb	r1, r3
 8008312:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8008316:	b2da      	uxtb	r2, r3
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800831c:	400a      	ands	r2, r1
 800831e:	b2d2      	uxtb	r2, r2
 8008320:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008326:	1c5a      	adds	r2, r3, #1
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008332:	b29b      	uxth	r3, r3
 8008334:	3b01      	subs	r3, #1
 8008336:	b29a      	uxth	r2, r3
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008344:	b29b      	uxth	r3, r3
 8008346:	2b00      	cmp	r3, #0
 8008348:	f040 80a1 	bne.w	800848e <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008352:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008354:	e853 3f00 	ldrex	r3, [r3]
 8008358:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800835a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800835c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008360:	66bb      	str	r3, [r7, #104]	; 0x68
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	461a      	mov	r2, r3
 8008368:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800836a:	65bb      	str	r3, [r7, #88]	; 0x58
 800836c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800836e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008370:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008372:	e841 2300 	strex	r3, r2, [r1]
 8008376:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008378:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800837a:	2b00      	cmp	r3, #0
 800837c:	d1e6      	bne.n	800834c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	3308      	adds	r3, #8
 8008384:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008388:	e853 3f00 	ldrex	r3, [r3]
 800838c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800838e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008390:	f023 0301 	bic.w	r3, r3, #1
 8008394:	667b      	str	r3, [r7, #100]	; 0x64
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	3308      	adds	r3, #8
 800839c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800839e:	647a      	str	r2, [r7, #68]	; 0x44
 80083a0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083a2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80083a4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80083a6:	e841 2300 	strex	r3, r2, [r1]
 80083aa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80083ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d1e5      	bne.n	800837e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	2220      	movs	r2, #32
 80083b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	2200      	movs	r2, #0
 80083be:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	2200      	movs	r2, #0
 80083c4:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	4a33      	ldr	r2, [pc, #204]	; (8008498 <UART_RxISR_8BIT+0x1b4>)
 80083cc:	4293      	cmp	r3, r2
 80083ce:	d01f      	beq.n	8008410 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	685b      	ldr	r3, [r3, #4]
 80083d6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d018      	beq.n	8008410 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083e6:	e853 3f00 	ldrex	r3, [r3]
 80083ea:	623b      	str	r3, [r7, #32]
   return(result);
 80083ec:	6a3b      	ldr	r3, [r7, #32]
 80083ee:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80083f2:	663b      	str	r3, [r7, #96]	; 0x60
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	461a      	mov	r2, r3
 80083fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80083fc:	633b      	str	r3, [r7, #48]	; 0x30
 80083fe:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008400:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008402:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008404:	e841 2300 	strex	r3, r2, [r1]
 8008408:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800840a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800840c:	2b00      	cmp	r3, #0
 800840e:	d1e6      	bne.n	80083de <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008414:	2b01      	cmp	r3, #1
 8008416:	d12e      	bne.n	8008476 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	2200      	movs	r2, #0
 800841c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008424:	693b      	ldr	r3, [r7, #16]
 8008426:	e853 3f00 	ldrex	r3, [r3]
 800842a:	60fb      	str	r3, [r7, #12]
   return(result);
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	f023 0310 	bic.w	r3, r3, #16
 8008432:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	461a      	mov	r2, r3
 800843a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800843c:	61fb      	str	r3, [r7, #28]
 800843e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008440:	69b9      	ldr	r1, [r7, #24]
 8008442:	69fa      	ldr	r2, [r7, #28]
 8008444:	e841 2300 	strex	r3, r2, [r1]
 8008448:	617b      	str	r3, [r7, #20]
   return(result);
 800844a:	697b      	ldr	r3, [r7, #20]
 800844c:	2b00      	cmp	r3, #0
 800844e:	d1e6      	bne.n	800841e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	69db      	ldr	r3, [r3, #28]
 8008456:	f003 0310 	and.w	r3, r3, #16
 800845a:	2b10      	cmp	r3, #16
 800845c:	d103      	bne.n	8008466 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	2210      	movs	r2, #16
 8008464:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800846c:	4619      	mov	r1, r3
 800846e:	6878      	ldr	r0, [r7, #4]
 8008470:	f7fe fe46 	bl	8007100 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008474:	e00b      	b.n	800848e <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8008476:	6878      	ldr	r0, [r7, #4]
 8008478:	f7f8 fb0c 	bl	8000a94 <HAL_UART_RxCpltCallback>
}
 800847c:	e007      	b.n	800848e <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	699a      	ldr	r2, [r3, #24]
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	f042 0208 	orr.w	r2, r2, #8
 800848c:	619a      	str	r2, [r3, #24]
}
 800848e:	bf00      	nop
 8008490:	3770      	adds	r7, #112	; 0x70
 8008492:	46bd      	mov	sp, r7
 8008494:	bd80      	pop	{r7, pc}
 8008496:	bf00      	nop
 8008498:	58000c00 	.word	0x58000c00

0800849c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800849c:	b580      	push	{r7, lr}
 800849e:	b09c      	sub	sp, #112	; 0x70
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80084aa:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80084b4:	2b22      	cmp	r3, #34	; 0x22
 80084b6:	f040 80be 	bne.w	8008636 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084c0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084c8:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80084ca:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80084ce:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80084d2:	4013      	ands	r3, r2
 80084d4:	b29a      	uxth	r2, r3
 80084d6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80084d8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084de:	1c9a      	adds	r2, r3, #2
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80084ea:	b29b      	uxth	r3, r3
 80084ec:	3b01      	subs	r3, #1
 80084ee:	b29a      	uxth	r2, r3
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80084fc:	b29b      	uxth	r3, r3
 80084fe:	2b00      	cmp	r3, #0
 8008500:	f040 80a1 	bne.w	8008646 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800850a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800850c:	e853 3f00 	ldrex	r3, [r3]
 8008510:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008512:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008514:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008518:	667b      	str	r3, [r7, #100]	; 0x64
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	461a      	mov	r2, r3
 8008520:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008522:	657b      	str	r3, [r7, #84]	; 0x54
 8008524:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008526:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008528:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800852a:	e841 2300 	strex	r3, r2, [r1]
 800852e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008530:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008532:	2b00      	cmp	r3, #0
 8008534:	d1e6      	bne.n	8008504 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	3308      	adds	r3, #8
 800853c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800853e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008540:	e853 3f00 	ldrex	r3, [r3]
 8008544:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008548:	f023 0301 	bic.w	r3, r3, #1
 800854c:	663b      	str	r3, [r7, #96]	; 0x60
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	3308      	adds	r3, #8
 8008554:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008556:	643a      	str	r2, [r7, #64]	; 0x40
 8008558:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800855a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800855c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800855e:	e841 2300 	strex	r3, r2, [r1]
 8008562:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008566:	2b00      	cmp	r3, #0
 8008568:	d1e5      	bne.n	8008536 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	2220      	movs	r2, #32
 800856e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	2200      	movs	r2, #0
 8008576:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	2200      	movs	r2, #0
 800857c:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	4a33      	ldr	r2, [pc, #204]	; (8008650 <UART_RxISR_16BIT+0x1b4>)
 8008584:	4293      	cmp	r3, r2
 8008586:	d01f      	beq.n	80085c8 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	685b      	ldr	r3, [r3, #4]
 800858e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008592:	2b00      	cmp	r3, #0
 8008594:	d018      	beq.n	80085c8 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800859c:	6a3b      	ldr	r3, [r7, #32]
 800859e:	e853 3f00 	ldrex	r3, [r3]
 80085a2:	61fb      	str	r3, [r7, #28]
   return(result);
 80085a4:	69fb      	ldr	r3, [r7, #28]
 80085a6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80085aa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	461a      	mov	r2, r3
 80085b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80085b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80085b6:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80085ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80085bc:	e841 2300 	strex	r3, r2, [r1]
 80085c0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80085c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d1e6      	bne.n	8008596 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80085cc:	2b01      	cmp	r3, #1
 80085ce:	d12e      	bne.n	800862e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	2200      	movs	r2, #0
 80085d4:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	e853 3f00 	ldrex	r3, [r3]
 80085e2:	60bb      	str	r3, [r7, #8]
   return(result);
 80085e4:	68bb      	ldr	r3, [r7, #8]
 80085e6:	f023 0310 	bic.w	r3, r3, #16
 80085ea:	65bb      	str	r3, [r7, #88]	; 0x58
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	461a      	mov	r2, r3
 80085f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80085f4:	61bb      	str	r3, [r7, #24]
 80085f6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085f8:	6979      	ldr	r1, [r7, #20]
 80085fa:	69ba      	ldr	r2, [r7, #24]
 80085fc:	e841 2300 	strex	r3, r2, [r1]
 8008600:	613b      	str	r3, [r7, #16]
   return(result);
 8008602:	693b      	ldr	r3, [r7, #16]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d1e6      	bne.n	80085d6 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	69db      	ldr	r3, [r3, #28]
 800860e:	f003 0310 	and.w	r3, r3, #16
 8008612:	2b10      	cmp	r3, #16
 8008614:	d103      	bne.n	800861e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	2210      	movs	r2, #16
 800861c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008624:	4619      	mov	r1, r3
 8008626:	6878      	ldr	r0, [r7, #4]
 8008628:	f7fe fd6a 	bl	8007100 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800862c:	e00b      	b.n	8008646 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800862e:	6878      	ldr	r0, [r7, #4]
 8008630:	f7f8 fa30 	bl	8000a94 <HAL_UART_RxCpltCallback>
}
 8008634:	e007      	b.n	8008646 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	699a      	ldr	r2, [r3, #24]
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	f042 0208 	orr.w	r2, r2, #8
 8008644:	619a      	str	r2, [r3, #24]
}
 8008646:	bf00      	nop
 8008648:	3770      	adds	r7, #112	; 0x70
 800864a:	46bd      	mov	sp, r7
 800864c:	bd80      	pop	{r7, pc}
 800864e:	bf00      	nop
 8008650:	58000c00 	.word	0x58000c00

08008654 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008654:	b580      	push	{r7, lr}
 8008656:	b0ac      	sub	sp, #176	; 0xb0
 8008658:	af00      	add	r7, sp, #0
 800865a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008662:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	69db      	ldr	r3, [r3, #28]
 800866c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	689b      	ldr	r3, [r3, #8]
 8008680:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800868a:	2b22      	cmp	r3, #34	; 0x22
 800868c:	f040 8180 	bne.w	8008990 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008696:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800869a:	e123      	b.n	80088e4 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086a2:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80086a6:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80086aa:	b2d9      	uxtb	r1, r3
 80086ac:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80086b0:	b2da      	uxtb	r2, r3
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086b6:	400a      	ands	r2, r1
 80086b8:	b2d2      	uxtb	r2, r2
 80086ba:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086c0:	1c5a      	adds	r2, r3, #1
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80086cc:	b29b      	uxth	r3, r3
 80086ce:	3b01      	subs	r3, #1
 80086d0:	b29a      	uxth	r2, r3
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	69db      	ldr	r3, [r3, #28]
 80086de:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80086e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80086e6:	f003 0307 	and.w	r3, r3, #7
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d053      	beq.n	8008796 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80086ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80086f2:	f003 0301 	and.w	r3, r3, #1
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d011      	beq.n	800871e <UART_RxISR_8BIT_FIFOEN+0xca>
 80086fa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80086fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008702:	2b00      	cmp	r3, #0
 8008704:	d00b      	beq.n	800871e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	2201      	movs	r2, #1
 800870c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008714:	f043 0201 	orr.w	r2, r3, #1
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800871e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008722:	f003 0302 	and.w	r3, r3, #2
 8008726:	2b00      	cmp	r3, #0
 8008728:	d011      	beq.n	800874e <UART_RxISR_8BIT_FIFOEN+0xfa>
 800872a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800872e:	f003 0301 	and.w	r3, r3, #1
 8008732:	2b00      	cmp	r3, #0
 8008734:	d00b      	beq.n	800874e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	2202      	movs	r2, #2
 800873c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008744:	f043 0204 	orr.w	r2, r3, #4
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800874e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008752:	f003 0304 	and.w	r3, r3, #4
 8008756:	2b00      	cmp	r3, #0
 8008758:	d011      	beq.n	800877e <UART_RxISR_8BIT_FIFOEN+0x12a>
 800875a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800875e:	f003 0301 	and.w	r3, r3, #1
 8008762:	2b00      	cmp	r3, #0
 8008764:	d00b      	beq.n	800877e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	2204      	movs	r2, #4
 800876c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008774:	f043 0202 	orr.w	r2, r3, #2
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008784:	2b00      	cmp	r3, #0
 8008786:	d006      	beq.n	8008796 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008788:	6878      	ldr	r0, [r7, #4]
 800878a:	f7fe fcaf 	bl	80070ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	2200      	movs	r2, #0
 8008792:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800879c:	b29b      	uxth	r3, r3
 800879e:	2b00      	cmp	r3, #0
 80087a0:	f040 80a0 	bne.w	80088e4 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80087ac:	e853 3f00 	ldrex	r3, [r3]
 80087b0:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 80087b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80087b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	461a      	mov	r2, r3
 80087c2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80087c6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80087c8:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087ca:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80087cc:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80087ce:	e841 2300 	strex	r3, r2, [r1]
 80087d2:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 80087d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d1e4      	bne.n	80087a4 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	3308      	adds	r3, #8
 80087e0:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80087e4:	e853 3f00 	ldrex	r3, [r3]
 80087e8:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 80087ea:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80087ec:	4b6e      	ldr	r3, [pc, #440]	; (80089a8 <UART_RxISR_8BIT_FIFOEN+0x354>)
 80087ee:	4013      	ands	r3, r2
 80087f0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	3308      	adds	r3, #8
 80087fa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80087fe:	66ba      	str	r2, [r7, #104]	; 0x68
 8008800:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008802:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8008804:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008806:	e841 2300 	strex	r3, r2, [r1]
 800880a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800880c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800880e:	2b00      	cmp	r3, #0
 8008810:	d1e3      	bne.n	80087da <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	2220      	movs	r2, #32
 8008816:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	2200      	movs	r2, #0
 800881e:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	2200      	movs	r2, #0
 8008824:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	4a60      	ldr	r2, [pc, #384]	; (80089ac <UART_RxISR_8BIT_FIFOEN+0x358>)
 800882c:	4293      	cmp	r3, r2
 800882e:	d021      	beq.n	8008874 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	685b      	ldr	r3, [r3, #4]
 8008836:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800883a:	2b00      	cmp	r3, #0
 800883c:	d01a      	beq.n	8008874 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008844:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008846:	e853 3f00 	ldrex	r3, [r3]
 800884a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800884c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800884e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008852:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	461a      	mov	r2, r3
 800885c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008860:	657b      	str	r3, [r7, #84]	; 0x54
 8008862:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008864:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008866:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008868:	e841 2300 	strex	r3, r2, [r1]
 800886c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800886e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008870:	2b00      	cmp	r3, #0
 8008872:	d1e4      	bne.n	800883e <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008878:	2b01      	cmp	r3, #1
 800887a:	d130      	bne.n	80088de <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	2200      	movs	r2, #0
 8008880:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008888:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800888a:	e853 3f00 	ldrex	r3, [r3]
 800888e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008892:	f023 0310 	bic.w	r3, r3, #16
 8008896:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	461a      	mov	r2, r3
 80088a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80088a4:	643b      	str	r3, [r7, #64]	; 0x40
 80088a6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088a8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80088aa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80088ac:	e841 2300 	strex	r3, r2, [r1]
 80088b0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80088b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d1e4      	bne.n	8008882 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	69db      	ldr	r3, [r3, #28]
 80088be:	f003 0310 	and.w	r3, r3, #16
 80088c2:	2b10      	cmp	r3, #16
 80088c4:	d103      	bne.n	80088ce <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	2210      	movs	r2, #16
 80088cc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80088d4:	4619      	mov	r1, r3
 80088d6:	6878      	ldr	r0, [r7, #4]
 80088d8:	f7fe fc12 	bl	8007100 <HAL_UARTEx_RxEventCallback>
 80088dc:	e002      	b.n	80088e4 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80088de:	6878      	ldr	r0, [r7, #4]
 80088e0:	f7f8 f8d8 	bl	8000a94 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80088e4:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d006      	beq.n	80088fa <UART_RxISR_8BIT_FIFOEN+0x2a6>
 80088ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80088f0:	f003 0320 	and.w	r3, r3, #32
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	f47f aed1 	bne.w	800869c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008900:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008904:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8008908:	2b00      	cmp	r3, #0
 800890a:	d049      	beq.n	80089a0 <UART_RxISR_8BIT_FIFOEN+0x34c>
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008912:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8008916:	429a      	cmp	r2, r3
 8008918:	d242      	bcs.n	80089a0 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	3308      	adds	r3, #8
 8008920:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008922:	6a3b      	ldr	r3, [r7, #32]
 8008924:	e853 3f00 	ldrex	r3, [r3]
 8008928:	61fb      	str	r3, [r7, #28]
   return(result);
 800892a:	69fb      	ldr	r3, [r7, #28]
 800892c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008930:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	3308      	adds	r3, #8
 800893a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800893e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008940:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008942:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008944:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008946:	e841 2300 	strex	r3, r2, [r1]
 800894a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800894c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800894e:	2b00      	cmp	r3, #0
 8008950:	d1e3      	bne.n	800891a <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	4a16      	ldr	r2, [pc, #88]	; (80089b0 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8008956:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	e853 3f00 	ldrex	r3, [r3]
 8008964:	60bb      	str	r3, [r7, #8]
   return(result);
 8008966:	68bb      	ldr	r3, [r7, #8]
 8008968:	f043 0320 	orr.w	r3, r3, #32
 800896c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	461a      	mov	r2, r3
 8008976:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800897a:	61bb      	str	r3, [r7, #24]
 800897c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800897e:	6979      	ldr	r1, [r7, #20]
 8008980:	69ba      	ldr	r2, [r7, #24]
 8008982:	e841 2300 	strex	r3, r2, [r1]
 8008986:	613b      	str	r3, [r7, #16]
   return(result);
 8008988:	693b      	ldr	r3, [r7, #16]
 800898a:	2b00      	cmp	r3, #0
 800898c:	d1e4      	bne.n	8008958 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800898e:	e007      	b.n	80089a0 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	699a      	ldr	r2, [r3, #24]
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	f042 0208 	orr.w	r2, r2, #8
 800899e:	619a      	str	r2, [r3, #24]
}
 80089a0:	bf00      	nop
 80089a2:	37b0      	adds	r7, #176	; 0xb0
 80089a4:	46bd      	mov	sp, r7
 80089a6:	bd80      	pop	{r7, pc}
 80089a8:	effffffe 	.word	0xeffffffe
 80089ac:	58000c00 	.word	0x58000c00
 80089b0:	080082e5 	.word	0x080082e5

080089b4 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80089b4:	b580      	push	{r7, lr}
 80089b6:	b0ae      	sub	sp, #184	; 0xb8
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80089c2:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	69db      	ldr	r3, [r3, #28]
 80089cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	689b      	ldr	r3, [r3, #8]
 80089e0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80089ea:	2b22      	cmp	r3, #34	; 0x22
 80089ec:	f040 8184 	bne.w	8008cf8 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80089f6:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80089fa:	e127      	b.n	8008c4c <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a02:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a0a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8008a0e:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8008a12:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8008a16:	4013      	ands	r3, r2
 8008a18:	b29a      	uxth	r2, r3
 8008a1a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008a1e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a24:	1c9a      	adds	r2, r3, #2
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008a30:	b29b      	uxth	r3, r3
 8008a32:	3b01      	subs	r3, #1
 8008a34:	b29a      	uxth	r2, r3
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	69db      	ldr	r3, [r3, #28]
 8008a42:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008a46:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008a4a:	f003 0307 	and.w	r3, r3, #7
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d053      	beq.n	8008afa <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008a52:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008a56:	f003 0301 	and.w	r3, r3, #1
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d011      	beq.n	8008a82 <UART_RxISR_16BIT_FIFOEN+0xce>
 8008a5e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008a62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d00b      	beq.n	8008a82 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	2201      	movs	r2, #1
 8008a70:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a78:	f043 0201 	orr.w	r2, r3, #1
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008a82:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008a86:	f003 0302 	and.w	r3, r3, #2
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d011      	beq.n	8008ab2 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8008a8e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008a92:	f003 0301 	and.w	r3, r3, #1
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d00b      	beq.n	8008ab2 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	2202      	movs	r2, #2
 8008aa0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008aa8:	f043 0204 	orr.w	r2, r3, #4
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008ab2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008ab6:	f003 0304 	and.w	r3, r3, #4
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d011      	beq.n	8008ae2 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8008abe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008ac2:	f003 0301 	and.w	r3, r3, #1
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d00b      	beq.n	8008ae2 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	2204      	movs	r2, #4
 8008ad0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ad8:	f043 0202 	orr.w	r2, r3, #2
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d006      	beq.n	8008afa <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008aec:	6878      	ldr	r0, [r7, #4]
 8008aee:	f7fe fafd 	bl	80070ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	2200      	movs	r2, #0
 8008af6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008b00:	b29b      	uxth	r3, r3
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	f040 80a2 	bne.w	8008c4c <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008b10:	e853 3f00 	ldrex	r3, [r3]
 8008b14:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008b16:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008b18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008b1c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	461a      	mov	r2, r3
 8008b26:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008b2a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008b2e:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b30:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008b32:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008b36:	e841 2300 	strex	r3, r2, [r1]
 8008b3a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008b3c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d1e2      	bne.n	8008b08 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	3308      	adds	r3, #8
 8008b48:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b4a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008b4c:	e853 3f00 	ldrex	r3, [r3]
 8008b50:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008b52:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008b54:	4b6e      	ldr	r3, [pc, #440]	; (8008d10 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 8008b56:	4013      	ands	r3, r2
 8008b58:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	3308      	adds	r3, #8
 8008b62:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8008b66:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008b68:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b6a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008b6c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008b6e:	e841 2300 	strex	r3, r2, [r1]
 8008b72:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008b74:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d1e3      	bne.n	8008b42 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	2220      	movs	r2, #32
 8008b7e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	2200      	movs	r2, #0
 8008b86:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	2200      	movs	r2, #0
 8008b8c:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	4a60      	ldr	r2, [pc, #384]	; (8008d14 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8008b94:	4293      	cmp	r3, r2
 8008b96:	d021      	beq.n	8008bdc <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	685b      	ldr	r3, [r3, #4]
 8008b9e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d01a      	beq.n	8008bdc <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008bae:	e853 3f00 	ldrex	r3, [r3]
 8008bb2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008bb4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008bb6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008bba:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	461a      	mov	r2, r3
 8008bc4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008bc8:	65bb      	str	r3, [r7, #88]	; 0x58
 8008bca:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bcc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008bce:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008bd0:	e841 2300 	strex	r3, r2, [r1]
 8008bd4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008bd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d1e4      	bne.n	8008ba6 <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008be0:	2b01      	cmp	r3, #1
 8008be2:	d130      	bne.n	8008c46 <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	2200      	movs	r2, #0
 8008be8:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bf2:	e853 3f00 	ldrex	r3, [r3]
 8008bf6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008bf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bfa:	f023 0310 	bic.w	r3, r3, #16
 8008bfe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	461a      	mov	r2, r3
 8008c08:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008c0c:	647b      	str	r3, [r7, #68]	; 0x44
 8008c0e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c10:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008c12:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008c14:	e841 2300 	strex	r3, r2, [r1]
 8008c18:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008c1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d1e4      	bne.n	8008bea <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	69db      	ldr	r3, [r3, #28]
 8008c26:	f003 0310 	and.w	r3, r3, #16
 8008c2a:	2b10      	cmp	r3, #16
 8008c2c:	d103      	bne.n	8008c36 <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	2210      	movs	r2, #16
 8008c34:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008c3c:	4619      	mov	r1, r3
 8008c3e:	6878      	ldr	r0, [r7, #4]
 8008c40:	f7fe fa5e 	bl	8007100 <HAL_UARTEx_RxEventCallback>
 8008c44:	e002      	b.n	8008c4c <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008c46:	6878      	ldr	r0, [r7, #4]
 8008c48:	f7f7 ff24 	bl	8000a94 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008c4c:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d006      	beq.n	8008c62 <UART_RxISR_16BIT_FIFOEN+0x2ae>
 8008c54:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008c58:	f003 0320 	and.w	r3, r3, #32
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	f47f aecd 	bne.w	80089fc <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008c68:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008c6c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d049      	beq.n	8008d08 <UART_RxISR_16BIT_FIFOEN+0x354>
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008c7a:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8008c7e:	429a      	cmp	r2, r3
 8008c80:	d242      	bcs.n	8008d08 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	3308      	adds	r3, #8
 8008c88:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c8c:	e853 3f00 	ldrex	r3, [r3]
 8008c90:	623b      	str	r3, [r7, #32]
   return(result);
 8008c92:	6a3b      	ldr	r3, [r7, #32]
 8008c94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008c98:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	3308      	adds	r3, #8
 8008ca2:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8008ca6:	633a      	str	r2, [r7, #48]	; 0x30
 8008ca8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008caa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008cac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008cae:	e841 2300 	strex	r3, r2, [r1]
 8008cb2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d1e3      	bne.n	8008c82 <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	4a16      	ldr	r2, [pc, #88]	; (8008d18 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8008cbe:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cc6:	693b      	ldr	r3, [r7, #16]
 8008cc8:	e853 3f00 	ldrex	r3, [r3]
 8008ccc:	60fb      	str	r3, [r7, #12]
   return(result);
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	f043 0320 	orr.w	r3, r3, #32
 8008cd4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	461a      	mov	r2, r3
 8008cde:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008ce2:	61fb      	str	r3, [r7, #28]
 8008ce4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ce6:	69b9      	ldr	r1, [r7, #24]
 8008ce8:	69fa      	ldr	r2, [r7, #28]
 8008cea:	e841 2300 	strex	r3, r2, [r1]
 8008cee:	617b      	str	r3, [r7, #20]
   return(result);
 8008cf0:	697b      	ldr	r3, [r7, #20]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d1e4      	bne.n	8008cc0 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008cf6:	e007      	b.n	8008d08 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	699a      	ldr	r2, [r3, #24]
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	f042 0208 	orr.w	r2, r2, #8
 8008d06:	619a      	str	r2, [r3, #24]
}
 8008d08:	bf00      	nop
 8008d0a:	37b8      	adds	r7, #184	; 0xb8
 8008d0c:	46bd      	mov	sp, r7
 8008d0e:	bd80      	pop	{r7, pc}
 8008d10:	effffffe 	.word	0xeffffffe
 8008d14:	58000c00 	.word	0x58000c00
 8008d18:	0800849d 	.word	0x0800849d

08008d1c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008d1c:	b480      	push	{r7}
 8008d1e:	b083      	sub	sp, #12
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008d24:	bf00      	nop
 8008d26:	370c      	adds	r7, #12
 8008d28:	46bd      	mov	sp, r7
 8008d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d2e:	4770      	bx	lr

08008d30 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008d30:	b480      	push	{r7}
 8008d32:	b083      	sub	sp, #12
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008d38:	bf00      	nop
 8008d3a:	370c      	adds	r7, #12
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d42:	4770      	bx	lr

08008d44 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008d44:	b480      	push	{r7}
 8008d46:	b083      	sub	sp, #12
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008d4c:	bf00      	nop
 8008d4e:	370c      	adds	r7, #12
 8008d50:	46bd      	mov	sp, r7
 8008d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d56:	4770      	bx	lr

08008d58 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008d58:	b480      	push	{r7}
 8008d5a:	b085      	sub	sp, #20
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008d66:	2b01      	cmp	r3, #1
 8008d68:	d101      	bne.n	8008d6e <HAL_UARTEx_DisableFifoMode+0x16>
 8008d6a:	2302      	movs	r3, #2
 8008d6c:	e027      	b.n	8008dbe <HAL_UARTEx_DisableFifoMode+0x66>
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	2201      	movs	r2, #1
 8008d72:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	2224      	movs	r2, #36	; 0x24
 8008d7a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	681a      	ldr	r2, [r3, #0]
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	f022 0201 	bic.w	r2, r2, #1
 8008d94:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008d9c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	2200      	movs	r2, #0
 8008da2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	68fa      	ldr	r2, [r7, #12]
 8008daa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	2220      	movs	r2, #32
 8008db0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	2200      	movs	r2, #0
 8008db8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008dbc:	2300      	movs	r3, #0
}
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	3714      	adds	r7, #20
 8008dc2:	46bd      	mov	sp, r7
 8008dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc8:	4770      	bx	lr

08008dca <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008dca:	b580      	push	{r7, lr}
 8008dcc:	b084      	sub	sp, #16
 8008dce:	af00      	add	r7, sp, #0
 8008dd0:	6078      	str	r0, [r7, #4]
 8008dd2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008dda:	2b01      	cmp	r3, #1
 8008ddc:	d101      	bne.n	8008de2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008dde:	2302      	movs	r3, #2
 8008de0:	e02d      	b.n	8008e3e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	2201      	movs	r2, #1
 8008de6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	2224      	movs	r2, #36	; 0x24
 8008dee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	681a      	ldr	r2, [r3, #0]
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	f022 0201 	bic.w	r2, r2, #1
 8008e08:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	689b      	ldr	r3, [r3, #8]
 8008e10:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	683a      	ldr	r2, [r7, #0]
 8008e1a:	430a      	orrs	r2, r1
 8008e1c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008e1e:	6878      	ldr	r0, [r7, #4]
 8008e20:	f000 f850 	bl	8008ec4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	68fa      	ldr	r2, [r7, #12]
 8008e2a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	2220      	movs	r2, #32
 8008e30:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	2200      	movs	r2, #0
 8008e38:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008e3c:	2300      	movs	r3, #0
}
 8008e3e:	4618      	mov	r0, r3
 8008e40:	3710      	adds	r7, #16
 8008e42:	46bd      	mov	sp, r7
 8008e44:	bd80      	pop	{r7, pc}

08008e46 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008e46:	b580      	push	{r7, lr}
 8008e48:	b084      	sub	sp, #16
 8008e4a:	af00      	add	r7, sp, #0
 8008e4c:	6078      	str	r0, [r7, #4]
 8008e4e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008e56:	2b01      	cmp	r3, #1
 8008e58:	d101      	bne.n	8008e5e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008e5a:	2302      	movs	r3, #2
 8008e5c:	e02d      	b.n	8008eba <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	2201      	movs	r2, #1
 8008e62:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	2224      	movs	r2, #36	; 0x24
 8008e6a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	681a      	ldr	r2, [r3, #0]
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	f022 0201 	bic.w	r2, r2, #1
 8008e84:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	689b      	ldr	r3, [r3, #8]
 8008e8c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	683a      	ldr	r2, [r7, #0]
 8008e96:	430a      	orrs	r2, r1
 8008e98:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008e9a:	6878      	ldr	r0, [r7, #4]
 8008e9c:	f000 f812 	bl	8008ec4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	68fa      	ldr	r2, [r7, #12]
 8008ea6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	2220      	movs	r2, #32
 8008eac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	2200      	movs	r2, #0
 8008eb4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008eb8:	2300      	movs	r3, #0
}
 8008eba:	4618      	mov	r0, r3
 8008ebc:	3710      	adds	r7, #16
 8008ebe:	46bd      	mov	sp, r7
 8008ec0:	bd80      	pop	{r7, pc}
	...

08008ec4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008ec4:	b480      	push	{r7}
 8008ec6:	b085      	sub	sp, #20
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d108      	bne.n	8008ee6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	2201      	movs	r2, #1
 8008ed8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	2201      	movs	r2, #1
 8008ee0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008ee4:	e031      	b.n	8008f4a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008ee6:	2310      	movs	r3, #16
 8008ee8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008eea:	2310      	movs	r3, #16
 8008eec:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	689b      	ldr	r3, [r3, #8]
 8008ef4:	0e5b      	lsrs	r3, r3, #25
 8008ef6:	b2db      	uxtb	r3, r3
 8008ef8:	f003 0307 	and.w	r3, r3, #7
 8008efc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	689b      	ldr	r3, [r3, #8]
 8008f04:	0f5b      	lsrs	r3, r3, #29
 8008f06:	b2db      	uxtb	r3, r3
 8008f08:	f003 0307 	and.w	r3, r3, #7
 8008f0c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008f0e:	7bbb      	ldrb	r3, [r7, #14]
 8008f10:	7b3a      	ldrb	r2, [r7, #12]
 8008f12:	4911      	ldr	r1, [pc, #68]	; (8008f58 <UARTEx_SetNbDataToProcess+0x94>)
 8008f14:	5c8a      	ldrb	r2, [r1, r2]
 8008f16:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008f1a:	7b3a      	ldrb	r2, [r7, #12]
 8008f1c:	490f      	ldr	r1, [pc, #60]	; (8008f5c <UARTEx_SetNbDataToProcess+0x98>)
 8008f1e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008f20:	fb93 f3f2 	sdiv	r3, r3, r2
 8008f24:	b29a      	uxth	r2, r3
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008f2c:	7bfb      	ldrb	r3, [r7, #15]
 8008f2e:	7b7a      	ldrb	r2, [r7, #13]
 8008f30:	4909      	ldr	r1, [pc, #36]	; (8008f58 <UARTEx_SetNbDataToProcess+0x94>)
 8008f32:	5c8a      	ldrb	r2, [r1, r2]
 8008f34:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008f38:	7b7a      	ldrb	r2, [r7, #13]
 8008f3a:	4908      	ldr	r1, [pc, #32]	; (8008f5c <UARTEx_SetNbDataToProcess+0x98>)
 8008f3c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008f3e:	fb93 f3f2 	sdiv	r3, r3, r2
 8008f42:	b29a      	uxth	r2, r3
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008f4a:	bf00      	nop
 8008f4c:	3714      	adds	r7, #20
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f54:	4770      	bx	lr
 8008f56:	bf00      	nop
 8008f58:	0800f864 	.word	0x0800f864
 8008f5c:	0800f86c 	.word	0x0800f86c

08008f60 <__NVIC_SetPriority>:
{
 8008f60:	b480      	push	{r7}
 8008f62:	b083      	sub	sp, #12
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	4603      	mov	r3, r0
 8008f68:	6039      	str	r1, [r7, #0]
 8008f6a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8008f6c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	db0a      	blt.n	8008f8a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008f74:	683b      	ldr	r3, [r7, #0]
 8008f76:	b2da      	uxtb	r2, r3
 8008f78:	490c      	ldr	r1, [pc, #48]	; (8008fac <__NVIC_SetPriority+0x4c>)
 8008f7a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008f7e:	0112      	lsls	r2, r2, #4
 8008f80:	b2d2      	uxtb	r2, r2
 8008f82:	440b      	add	r3, r1
 8008f84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008f88:	e00a      	b.n	8008fa0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008f8a:	683b      	ldr	r3, [r7, #0]
 8008f8c:	b2da      	uxtb	r2, r3
 8008f8e:	4908      	ldr	r1, [pc, #32]	; (8008fb0 <__NVIC_SetPriority+0x50>)
 8008f90:	88fb      	ldrh	r3, [r7, #6]
 8008f92:	f003 030f 	and.w	r3, r3, #15
 8008f96:	3b04      	subs	r3, #4
 8008f98:	0112      	lsls	r2, r2, #4
 8008f9a:	b2d2      	uxtb	r2, r2
 8008f9c:	440b      	add	r3, r1
 8008f9e:	761a      	strb	r2, [r3, #24]
}
 8008fa0:	bf00      	nop
 8008fa2:	370c      	adds	r7, #12
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008faa:	4770      	bx	lr
 8008fac:	e000e100 	.word	0xe000e100
 8008fb0:	e000ed00 	.word	0xe000ed00

08008fb4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8008fb4:	b580      	push	{r7, lr}
 8008fb6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8008fb8:	4b05      	ldr	r3, [pc, #20]	; (8008fd0 <SysTick_Handler+0x1c>)
 8008fba:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8008fbc:	f002 fb32 	bl	800b624 <xTaskGetSchedulerState>
 8008fc0:	4603      	mov	r3, r0
 8008fc2:	2b01      	cmp	r3, #1
 8008fc4:	d001      	beq.n	8008fca <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8008fc6:	f003 fa17 	bl	800c3f8 <xPortSysTickHandler>
  }
}
 8008fca:	bf00      	nop
 8008fcc:	bd80      	pop	{r7, pc}
 8008fce:	bf00      	nop
 8008fd0:	e000e010 	.word	0xe000e010

08008fd4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008fd4:	b580      	push	{r7, lr}
 8008fd6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008fd8:	2100      	movs	r1, #0
 8008fda:	f06f 0004 	mvn.w	r0, #4
 8008fde:	f7ff ffbf 	bl	8008f60 <__NVIC_SetPriority>
#endif
}
 8008fe2:	bf00      	nop
 8008fe4:	bd80      	pop	{r7, pc}
	...

08008fe8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008fe8:	b480      	push	{r7}
 8008fea:	b083      	sub	sp, #12
 8008fec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008fee:	f3ef 8305 	mrs	r3, IPSR
 8008ff2:	603b      	str	r3, [r7, #0]
  return(result);
 8008ff4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d003      	beq.n	8009002 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8008ffa:	f06f 0305 	mvn.w	r3, #5
 8008ffe:	607b      	str	r3, [r7, #4]
 8009000:	e00c      	b.n	800901c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009002:	4b0a      	ldr	r3, [pc, #40]	; (800902c <osKernelInitialize+0x44>)
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	2b00      	cmp	r3, #0
 8009008:	d105      	bne.n	8009016 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800900a:	4b08      	ldr	r3, [pc, #32]	; (800902c <osKernelInitialize+0x44>)
 800900c:	2201      	movs	r2, #1
 800900e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009010:	2300      	movs	r3, #0
 8009012:	607b      	str	r3, [r7, #4]
 8009014:	e002      	b.n	800901c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8009016:	f04f 33ff 	mov.w	r3, #4294967295
 800901a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800901c:	687b      	ldr	r3, [r7, #4]
}
 800901e:	4618      	mov	r0, r3
 8009020:	370c      	adds	r7, #12
 8009022:	46bd      	mov	sp, r7
 8009024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009028:	4770      	bx	lr
 800902a:	bf00      	nop
 800902c:	24001048 	.word	0x24001048

08009030 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009030:	b580      	push	{r7, lr}
 8009032:	b082      	sub	sp, #8
 8009034:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009036:	f3ef 8305 	mrs	r3, IPSR
 800903a:	603b      	str	r3, [r7, #0]
  return(result);
 800903c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800903e:	2b00      	cmp	r3, #0
 8009040:	d003      	beq.n	800904a <osKernelStart+0x1a>
    stat = osErrorISR;
 8009042:	f06f 0305 	mvn.w	r3, #5
 8009046:	607b      	str	r3, [r7, #4]
 8009048:	e010      	b.n	800906c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800904a:	4b0b      	ldr	r3, [pc, #44]	; (8009078 <osKernelStart+0x48>)
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	2b01      	cmp	r3, #1
 8009050:	d109      	bne.n	8009066 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009052:	f7ff ffbf 	bl	8008fd4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009056:	4b08      	ldr	r3, [pc, #32]	; (8009078 <osKernelStart+0x48>)
 8009058:	2202      	movs	r2, #2
 800905a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800905c:	f001 fe86 	bl	800ad6c <vTaskStartScheduler>
      stat = osOK;
 8009060:	2300      	movs	r3, #0
 8009062:	607b      	str	r3, [r7, #4]
 8009064:	e002      	b.n	800906c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8009066:	f04f 33ff 	mov.w	r3, #4294967295
 800906a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800906c:	687b      	ldr	r3, [r7, #4]
}
 800906e:	4618      	mov	r0, r3
 8009070:	3708      	adds	r7, #8
 8009072:	46bd      	mov	sp, r7
 8009074:	bd80      	pop	{r7, pc}
 8009076:	bf00      	nop
 8009078:	24001048 	.word	0x24001048

0800907c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800907c:	b580      	push	{r7, lr}
 800907e:	b08e      	sub	sp, #56	; 0x38
 8009080:	af04      	add	r7, sp, #16
 8009082:	60f8      	str	r0, [r7, #12]
 8009084:	60b9      	str	r1, [r7, #8]
 8009086:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009088:	2300      	movs	r3, #0
 800908a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800908c:	f3ef 8305 	mrs	r3, IPSR
 8009090:	617b      	str	r3, [r7, #20]
  return(result);
 8009092:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8009094:	2b00      	cmp	r3, #0
 8009096:	d17e      	bne.n	8009196 <osThreadNew+0x11a>
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	2b00      	cmp	r3, #0
 800909c:	d07b      	beq.n	8009196 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800909e:	2380      	movs	r3, #128	; 0x80
 80090a0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80090a2:	2318      	movs	r3, #24
 80090a4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80090a6:	2300      	movs	r3, #0
 80090a8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80090aa:	f04f 33ff 	mov.w	r3, #4294967295
 80090ae:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d045      	beq.n	8009142 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d002      	beq.n	80090c4 <osThreadNew+0x48>
        name = attr->name;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	699b      	ldr	r3, [r3, #24]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d002      	beq.n	80090d2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	699b      	ldr	r3, [r3, #24]
 80090d0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80090d2:	69fb      	ldr	r3, [r7, #28]
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d008      	beq.n	80090ea <osThreadNew+0x6e>
 80090d8:	69fb      	ldr	r3, [r7, #28]
 80090da:	2b38      	cmp	r3, #56	; 0x38
 80090dc:	d805      	bhi.n	80090ea <osThreadNew+0x6e>
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	685b      	ldr	r3, [r3, #4]
 80090e2:	f003 0301 	and.w	r3, r3, #1
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d001      	beq.n	80090ee <osThreadNew+0x72>
        return (NULL);
 80090ea:	2300      	movs	r3, #0
 80090ec:	e054      	b.n	8009198 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	695b      	ldr	r3, [r3, #20]
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d003      	beq.n	80090fe <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	695b      	ldr	r3, [r3, #20]
 80090fa:	089b      	lsrs	r3, r3, #2
 80090fc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	689b      	ldr	r3, [r3, #8]
 8009102:	2b00      	cmp	r3, #0
 8009104:	d00e      	beq.n	8009124 <osThreadNew+0xa8>
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	68db      	ldr	r3, [r3, #12]
 800910a:	2ba7      	cmp	r3, #167	; 0xa7
 800910c:	d90a      	bls.n	8009124 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009112:	2b00      	cmp	r3, #0
 8009114:	d006      	beq.n	8009124 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	695b      	ldr	r3, [r3, #20]
 800911a:	2b00      	cmp	r3, #0
 800911c:	d002      	beq.n	8009124 <osThreadNew+0xa8>
        mem = 1;
 800911e:	2301      	movs	r3, #1
 8009120:	61bb      	str	r3, [r7, #24]
 8009122:	e010      	b.n	8009146 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	689b      	ldr	r3, [r3, #8]
 8009128:	2b00      	cmp	r3, #0
 800912a:	d10c      	bne.n	8009146 <osThreadNew+0xca>
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	68db      	ldr	r3, [r3, #12]
 8009130:	2b00      	cmp	r3, #0
 8009132:	d108      	bne.n	8009146 <osThreadNew+0xca>
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	691b      	ldr	r3, [r3, #16]
 8009138:	2b00      	cmp	r3, #0
 800913a:	d104      	bne.n	8009146 <osThreadNew+0xca>
          mem = 0;
 800913c:	2300      	movs	r3, #0
 800913e:	61bb      	str	r3, [r7, #24]
 8009140:	e001      	b.n	8009146 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8009142:	2300      	movs	r3, #0
 8009144:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009146:	69bb      	ldr	r3, [r7, #24]
 8009148:	2b01      	cmp	r3, #1
 800914a:	d110      	bne.n	800916e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009150:	687a      	ldr	r2, [r7, #4]
 8009152:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009154:	9202      	str	r2, [sp, #8]
 8009156:	9301      	str	r3, [sp, #4]
 8009158:	69fb      	ldr	r3, [r7, #28]
 800915a:	9300      	str	r3, [sp, #0]
 800915c:	68bb      	ldr	r3, [r7, #8]
 800915e:	6a3a      	ldr	r2, [r7, #32]
 8009160:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009162:	68f8      	ldr	r0, [r7, #12]
 8009164:	f001 fba0 	bl	800a8a8 <xTaskCreateStatic>
 8009168:	4603      	mov	r3, r0
 800916a:	613b      	str	r3, [r7, #16]
 800916c:	e013      	b.n	8009196 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800916e:	69bb      	ldr	r3, [r7, #24]
 8009170:	2b00      	cmp	r3, #0
 8009172:	d110      	bne.n	8009196 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009174:	6a3b      	ldr	r3, [r7, #32]
 8009176:	b29a      	uxth	r2, r3
 8009178:	f107 0310 	add.w	r3, r7, #16
 800917c:	9301      	str	r3, [sp, #4]
 800917e:	69fb      	ldr	r3, [r7, #28]
 8009180:	9300      	str	r3, [sp, #0]
 8009182:	68bb      	ldr	r3, [r7, #8]
 8009184:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009186:	68f8      	ldr	r0, [r7, #12]
 8009188:	f001 fbeb 	bl	800a962 <xTaskCreate>
 800918c:	4603      	mov	r3, r0
 800918e:	2b01      	cmp	r3, #1
 8009190:	d001      	beq.n	8009196 <osThreadNew+0x11a>
            hTask = NULL;
 8009192:	2300      	movs	r3, #0
 8009194:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009196:	693b      	ldr	r3, [r7, #16]
}
 8009198:	4618      	mov	r0, r3
 800919a:	3728      	adds	r7, #40	; 0x28
 800919c:	46bd      	mov	sp, r7
 800919e:	bd80      	pop	{r7, pc}

080091a0 <osThreadSuspend>:

  return (stat);
}

#if (configUSE_OS2_THREAD_SUSPEND_RESUME == 1)
osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 80091a0:	b580      	push	{r7, lr}
 80091a2:	b086      	sub	sp, #24
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80091ac:	f3ef 8305 	mrs	r3, IPSR
 80091b0:	60fb      	str	r3, [r7, #12]
  return(result);
 80091b2:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d003      	beq.n	80091c0 <osThreadSuspend+0x20>
    stat = osErrorISR;
 80091b8:	f06f 0305 	mvn.w	r3, #5
 80091bc:	617b      	str	r3, [r7, #20]
 80091be:	e00b      	b.n	80091d8 <osThreadSuspend+0x38>
  }
  else if (hTask == NULL) {
 80091c0:	693b      	ldr	r3, [r7, #16]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d103      	bne.n	80091ce <osThreadSuspend+0x2e>
    stat = osErrorParameter;
 80091c6:	f06f 0303 	mvn.w	r3, #3
 80091ca:	617b      	str	r3, [r7, #20]
 80091cc:	e004      	b.n	80091d8 <osThreadSuspend+0x38>
  }
  else {
    stat = osOK;
 80091ce:	2300      	movs	r3, #0
 80091d0:	617b      	str	r3, [r7, #20]
    vTaskSuspend (hTask);
 80091d2:	6938      	ldr	r0, [r7, #16]
 80091d4:	f001 fd54 	bl	800ac80 <vTaskSuspend>
  }

  return (stat);
 80091d8:	697b      	ldr	r3, [r7, #20]
}
 80091da:	4618      	mov	r0, r3
 80091dc:	3718      	adds	r7, #24
 80091de:	46bd      	mov	sp, r7
 80091e0:	bd80      	pop	{r7, pc}

080091e2 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80091e2:	b580      	push	{r7, lr}
 80091e4:	b084      	sub	sp, #16
 80091e6:	af00      	add	r7, sp, #0
 80091e8:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80091ea:	f3ef 8305 	mrs	r3, IPSR
 80091ee:	60bb      	str	r3, [r7, #8]
  return(result);
 80091f0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d003      	beq.n	80091fe <osDelay+0x1c>
    stat = osErrorISR;
 80091f6:	f06f 0305 	mvn.w	r3, #5
 80091fa:	60fb      	str	r3, [r7, #12]
 80091fc:	e007      	b.n	800920e <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80091fe:	2300      	movs	r3, #0
 8009200:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	2b00      	cmp	r3, #0
 8009206:	d002      	beq.n	800920e <osDelay+0x2c>
      vTaskDelay(ticks);
 8009208:	6878      	ldr	r0, [r7, #4]
 800920a:	f001 fd05 	bl	800ac18 <vTaskDelay>
    }
  }

  return (stat);
 800920e:	68fb      	ldr	r3, [r7, #12]
}
 8009210:	4618      	mov	r0, r3
 8009212:	3710      	adds	r7, #16
 8009214:	46bd      	mov	sp, r7
 8009216:	bd80      	pop	{r7, pc}

08009218 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8009218:	b580      	push	{r7, lr}
 800921a:	b08a      	sub	sp, #40	; 0x28
 800921c:	af02      	add	r7, sp, #8
 800921e:	60f8      	str	r0, [r7, #12]
 8009220:	60b9      	str	r1, [r7, #8]
 8009222:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8009224:	2300      	movs	r3, #0
 8009226:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009228:	f3ef 8305 	mrs	r3, IPSR
 800922c:	613b      	str	r3, [r7, #16]
  return(result);
 800922e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8009230:	2b00      	cmp	r3, #0
 8009232:	d175      	bne.n	8009320 <osSemaphoreNew+0x108>
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	2b00      	cmp	r3, #0
 8009238:	d072      	beq.n	8009320 <osSemaphoreNew+0x108>
 800923a:	68ba      	ldr	r2, [r7, #8]
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	429a      	cmp	r2, r3
 8009240:	d86e      	bhi.n	8009320 <osSemaphoreNew+0x108>
    mem = -1;
 8009242:	f04f 33ff 	mov.w	r3, #4294967295
 8009246:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	2b00      	cmp	r3, #0
 800924c:	d015      	beq.n	800927a <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	689b      	ldr	r3, [r3, #8]
 8009252:	2b00      	cmp	r3, #0
 8009254:	d006      	beq.n	8009264 <osSemaphoreNew+0x4c>
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	68db      	ldr	r3, [r3, #12]
 800925a:	2b4f      	cmp	r3, #79	; 0x4f
 800925c:	d902      	bls.n	8009264 <osSemaphoreNew+0x4c>
        mem = 1;
 800925e:	2301      	movs	r3, #1
 8009260:	61bb      	str	r3, [r7, #24]
 8009262:	e00c      	b.n	800927e <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	689b      	ldr	r3, [r3, #8]
 8009268:	2b00      	cmp	r3, #0
 800926a:	d108      	bne.n	800927e <osSemaphoreNew+0x66>
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	68db      	ldr	r3, [r3, #12]
 8009270:	2b00      	cmp	r3, #0
 8009272:	d104      	bne.n	800927e <osSemaphoreNew+0x66>
          mem = 0;
 8009274:	2300      	movs	r3, #0
 8009276:	61bb      	str	r3, [r7, #24]
 8009278:	e001      	b.n	800927e <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800927a:	2300      	movs	r3, #0
 800927c:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800927e:	69bb      	ldr	r3, [r7, #24]
 8009280:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009284:	d04c      	beq.n	8009320 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	2b01      	cmp	r3, #1
 800928a:	d128      	bne.n	80092de <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800928c:	69bb      	ldr	r3, [r7, #24]
 800928e:	2b01      	cmp	r3, #1
 8009290:	d10a      	bne.n	80092a8 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	689b      	ldr	r3, [r3, #8]
 8009296:	2203      	movs	r2, #3
 8009298:	9200      	str	r2, [sp, #0]
 800929a:	2200      	movs	r2, #0
 800929c:	2100      	movs	r1, #0
 800929e:	2001      	movs	r0, #1
 80092a0:	f000 fb5c 	bl	800995c <xQueueGenericCreateStatic>
 80092a4:	61f8      	str	r0, [r7, #28]
 80092a6:	e005      	b.n	80092b4 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 80092a8:	2203      	movs	r2, #3
 80092aa:	2100      	movs	r1, #0
 80092ac:	2001      	movs	r0, #1
 80092ae:	f000 fbcd 	bl	8009a4c <xQueueGenericCreate>
 80092b2:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80092b4:	69fb      	ldr	r3, [r7, #28]
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d022      	beq.n	8009300 <osSemaphoreNew+0xe8>
 80092ba:	68bb      	ldr	r3, [r7, #8]
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d01f      	beq.n	8009300 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80092c0:	2300      	movs	r3, #0
 80092c2:	2200      	movs	r2, #0
 80092c4:	2100      	movs	r1, #0
 80092c6:	69f8      	ldr	r0, [r7, #28]
 80092c8:	f000 fc88 	bl	8009bdc <xQueueGenericSend>
 80092cc:	4603      	mov	r3, r0
 80092ce:	2b01      	cmp	r3, #1
 80092d0:	d016      	beq.n	8009300 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 80092d2:	69f8      	ldr	r0, [r7, #28]
 80092d4:	f001 f914 	bl	800a500 <vQueueDelete>
            hSemaphore = NULL;
 80092d8:	2300      	movs	r3, #0
 80092da:	61fb      	str	r3, [r7, #28]
 80092dc:	e010      	b.n	8009300 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 80092de:	69bb      	ldr	r3, [r7, #24]
 80092e0:	2b01      	cmp	r3, #1
 80092e2:	d108      	bne.n	80092f6 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	689b      	ldr	r3, [r3, #8]
 80092e8:	461a      	mov	r2, r3
 80092ea:	68b9      	ldr	r1, [r7, #8]
 80092ec:	68f8      	ldr	r0, [r7, #12]
 80092ee:	f000 fc0a 	bl	8009b06 <xQueueCreateCountingSemaphoreStatic>
 80092f2:	61f8      	str	r0, [r7, #28]
 80092f4:	e004      	b.n	8009300 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80092f6:	68b9      	ldr	r1, [r7, #8]
 80092f8:	68f8      	ldr	r0, [r7, #12]
 80092fa:	f000 fc3b 	bl	8009b74 <xQueueCreateCountingSemaphore>
 80092fe:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8009300:	69fb      	ldr	r3, [r7, #28]
 8009302:	2b00      	cmp	r3, #0
 8009304:	d00c      	beq.n	8009320 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	2b00      	cmp	r3, #0
 800930a:	d003      	beq.n	8009314 <osSemaphoreNew+0xfc>
          name = attr->name;
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	617b      	str	r3, [r7, #20]
 8009312:	e001      	b.n	8009318 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8009314:	2300      	movs	r3, #0
 8009316:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8009318:	6979      	ldr	r1, [r7, #20]
 800931a:	69f8      	ldr	r0, [r7, #28]
 800931c:	f001 fa3c 	bl	800a798 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8009320:	69fb      	ldr	r3, [r7, #28]
}
 8009322:	4618      	mov	r0, r3
 8009324:	3720      	adds	r7, #32
 8009326:	46bd      	mov	sp, r7
 8009328:	bd80      	pop	{r7, pc}
	...

0800932c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800932c:	b580      	push	{r7, lr}
 800932e:	b086      	sub	sp, #24
 8009330:	af00      	add	r7, sp, #0
 8009332:	6078      	str	r0, [r7, #4]
 8009334:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800933a:	2300      	movs	r3, #0
 800933c:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800933e:	693b      	ldr	r3, [r7, #16]
 8009340:	2b00      	cmp	r3, #0
 8009342:	d103      	bne.n	800934c <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8009344:	f06f 0303 	mvn.w	r3, #3
 8009348:	617b      	str	r3, [r7, #20]
 800934a:	e039      	b.n	80093c0 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800934c:	f3ef 8305 	mrs	r3, IPSR
 8009350:	60fb      	str	r3, [r7, #12]
  return(result);
 8009352:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8009354:	2b00      	cmp	r3, #0
 8009356:	d022      	beq.n	800939e <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8009358:	683b      	ldr	r3, [r7, #0]
 800935a:	2b00      	cmp	r3, #0
 800935c:	d003      	beq.n	8009366 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800935e:	f06f 0303 	mvn.w	r3, #3
 8009362:	617b      	str	r3, [r7, #20]
 8009364:	e02c      	b.n	80093c0 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8009366:	2300      	movs	r3, #0
 8009368:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800936a:	f107 0308 	add.w	r3, r7, #8
 800936e:	461a      	mov	r2, r3
 8009370:	2100      	movs	r1, #0
 8009372:	6938      	ldr	r0, [r7, #16]
 8009374:	f001 f844 	bl	800a400 <xQueueReceiveFromISR>
 8009378:	4603      	mov	r3, r0
 800937a:	2b01      	cmp	r3, #1
 800937c:	d003      	beq.n	8009386 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800937e:	f06f 0302 	mvn.w	r3, #2
 8009382:	617b      	str	r3, [r7, #20]
 8009384:	e01c      	b.n	80093c0 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8009386:	68bb      	ldr	r3, [r7, #8]
 8009388:	2b00      	cmp	r3, #0
 800938a:	d019      	beq.n	80093c0 <osSemaphoreAcquire+0x94>
 800938c:	4b0f      	ldr	r3, [pc, #60]	; (80093cc <osSemaphoreAcquire+0xa0>)
 800938e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009392:	601a      	str	r2, [r3, #0]
 8009394:	f3bf 8f4f 	dsb	sy
 8009398:	f3bf 8f6f 	isb	sy
 800939c:	e010      	b.n	80093c0 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800939e:	6839      	ldr	r1, [r7, #0]
 80093a0:	6938      	ldr	r0, [r7, #16]
 80093a2:	f000 ff21 	bl	800a1e8 <xQueueSemaphoreTake>
 80093a6:	4603      	mov	r3, r0
 80093a8:	2b01      	cmp	r3, #1
 80093aa:	d009      	beq.n	80093c0 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 80093ac:	683b      	ldr	r3, [r7, #0]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d003      	beq.n	80093ba <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 80093b2:	f06f 0301 	mvn.w	r3, #1
 80093b6:	617b      	str	r3, [r7, #20]
 80093b8:	e002      	b.n	80093c0 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 80093ba:	f06f 0302 	mvn.w	r3, #2
 80093be:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80093c0:	697b      	ldr	r3, [r7, #20]
}
 80093c2:	4618      	mov	r0, r3
 80093c4:	3718      	adds	r7, #24
 80093c6:	46bd      	mov	sp, r7
 80093c8:	bd80      	pop	{r7, pc}
 80093ca:	bf00      	nop
 80093cc:	e000ed04 	.word	0xe000ed04

080093d0 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80093d0:	b580      	push	{r7, lr}
 80093d2:	b086      	sub	sp, #24
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80093dc:	2300      	movs	r3, #0
 80093de:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80093e0:	693b      	ldr	r3, [r7, #16]
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d103      	bne.n	80093ee <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80093e6:	f06f 0303 	mvn.w	r3, #3
 80093ea:	617b      	str	r3, [r7, #20]
 80093ec:	e02c      	b.n	8009448 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80093ee:	f3ef 8305 	mrs	r3, IPSR
 80093f2:	60fb      	str	r3, [r7, #12]
  return(result);
 80093f4:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d01a      	beq.n	8009430 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 80093fa:	2300      	movs	r3, #0
 80093fc:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80093fe:	f107 0308 	add.w	r3, r7, #8
 8009402:	4619      	mov	r1, r3
 8009404:	6938      	ldr	r0, [r7, #16]
 8009406:	f000 fd82 	bl	8009f0e <xQueueGiveFromISR>
 800940a:	4603      	mov	r3, r0
 800940c:	2b01      	cmp	r3, #1
 800940e:	d003      	beq.n	8009418 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8009410:	f06f 0302 	mvn.w	r3, #2
 8009414:	617b      	str	r3, [r7, #20]
 8009416:	e017      	b.n	8009448 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8009418:	68bb      	ldr	r3, [r7, #8]
 800941a:	2b00      	cmp	r3, #0
 800941c:	d014      	beq.n	8009448 <osSemaphoreRelease+0x78>
 800941e:	4b0d      	ldr	r3, [pc, #52]	; (8009454 <osSemaphoreRelease+0x84>)
 8009420:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009424:	601a      	str	r2, [r3, #0]
 8009426:	f3bf 8f4f 	dsb	sy
 800942a:	f3bf 8f6f 	isb	sy
 800942e:	e00b      	b.n	8009448 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8009430:	2300      	movs	r3, #0
 8009432:	2200      	movs	r2, #0
 8009434:	2100      	movs	r1, #0
 8009436:	6938      	ldr	r0, [r7, #16]
 8009438:	f000 fbd0 	bl	8009bdc <xQueueGenericSend>
 800943c:	4603      	mov	r3, r0
 800943e:	2b01      	cmp	r3, #1
 8009440:	d002      	beq.n	8009448 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8009442:	f06f 0302 	mvn.w	r3, #2
 8009446:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8009448:	697b      	ldr	r3, [r7, #20]
}
 800944a:	4618      	mov	r0, r3
 800944c:	3718      	adds	r7, #24
 800944e:	46bd      	mov	sp, r7
 8009450:	bd80      	pop	{r7, pc}
 8009452:	bf00      	nop
 8009454:	e000ed04 	.word	0xe000ed04

08009458 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8009458:	b580      	push	{r7, lr}
 800945a:	b08a      	sub	sp, #40	; 0x28
 800945c:	af02      	add	r7, sp, #8
 800945e:	60f8      	str	r0, [r7, #12]
 8009460:	60b9      	str	r1, [r7, #8]
 8009462:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8009464:	2300      	movs	r3, #0
 8009466:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009468:	f3ef 8305 	mrs	r3, IPSR
 800946c:	613b      	str	r3, [r7, #16]
  return(result);
 800946e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8009470:	2b00      	cmp	r3, #0
 8009472:	d15f      	bne.n	8009534 <osMessageQueueNew+0xdc>
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	2b00      	cmp	r3, #0
 8009478:	d05c      	beq.n	8009534 <osMessageQueueNew+0xdc>
 800947a:	68bb      	ldr	r3, [r7, #8]
 800947c:	2b00      	cmp	r3, #0
 800947e:	d059      	beq.n	8009534 <osMessageQueueNew+0xdc>
    mem = -1;
 8009480:	f04f 33ff 	mov.w	r3, #4294967295
 8009484:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	2b00      	cmp	r3, #0
 800948a:	d029      	beq.n	80094e0 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	689b      	ldr	r3, [r3, #8]
 8009490:	2b00      	cmp	r3, #0
 8009492:	d012      	beq.n	80094ba <osMessageQueueNew+0x62>
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	68db      	ldr	r3, [r3, #12]
 8009498:	2b4f      	cmp	r3, #79	; 0x4f
 800949a:	d90e      	bls.n	80094ba <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d00a      	beq.n	80094ba <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	695a      	ldr	r2, [r3, #20]
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	68b9      	ldr	r1, [r7, #8]
 80094ac:	fb01 f303 	mul.w	r3, r1, r3
 80094b0:	429a      	cmp	r2, r3
 80094b2:	d302      	bcc.n	80094ba <osMessageQueueNew+0x62>
        mem = 1;
 80094b4:	2301      	movs	r3, #1
 80094b6:	61bb      	str	r3, [r7, #24]
 80094b8:	e014      	b.n	80094e4 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	689b      	ldr	r3, [r3, #8]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d110      	bne.n	80094e4 <osMessageQueueNew+0x8c>
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	68db      	ldr	r3, [r3, #12]
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d10c      	bne.n	80094e4 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d108      	bne.n	80094e4 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	695b      	ldr	r3, [r3, #20]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d104      	bne.n	80094e4 <osMessageQueueNew+0x8c>
          mem = 0;
 80094da:	2300      	movs	r3, #0
 80094dc:	61bb      	str	r3, [r7, #24]
 80094de:	e001      	b.n	80094e4 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80094e0:	2300      	movs	r3, #0
 80094e2:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80094e4:	69bb      	ldr	r3, [r7, #24]
 80094e6:	2b01      	cmp	r3, #1
 80094e8:	d10b      	bne.n	8009502 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	691a      	ldr	r2, [r3, #16]
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	689b      	ldr	r3, [r3, #8]
 80094f2:	2100      	movs	r1, #0
 80094f4:	9100      	str	r1, [sp, #0]
 80094f6:	68b9      	ldr	r1, [r7, #8]
 80094f8:	68f8      	ldr	r0, [r7, #12]
 80094fa:	f000 fa2f 	bl	800995c <xQueueGenericCreateStatic>
 80094fe:	61f8      	str	r0, [r7, #28]
 8009500:	e008      	b.n	8009514 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8009502:	69bb      	ldr	r3, [r7, #24]
 8009504:	2b00      	cmp	r3, #0
 8009506:	d105      	bne.n	8009514 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8009508:	2200      	movs	r2, #0
 800950a:	68b9      	ldr	r1, [r7, #8]
 800950c:	68f8      	ldr	r0, [r7, #12]
 800950e:	f000 fa9d 	bl	8009a4c <xQueueGenericCreate>
 8009512:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8009514:	69fb      	ldr	r3, [r7, #28]
 8009516:	2b00      	cmp	r3, #0
 8009518:	d00c      	beq.n	8009534 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	2b00      	cmp	r3, #0
 800951e:	d003      	beq.n	8009528 <osMessageQueueNew+0xd0>
        name = attr->name;
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	617b      	str	r3, [r7, #20]
 8009526:	e001      	b.n	800952c <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8009528:	2300      	movs	r3, #0
 800952a:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800952c:	6979      	ldr	r1, [r7, #20]
 800952e:	69f8      	ldr	r0, [r7, #28]
 8009530:	f001 f932 	bl	800a798 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8009534:	69fb      	ldr	r3, [r7, #28]
}
 8009536:	4618      	mov	r0, r3
 8009538:	3720      	adds	r7, #32
 800953a:	46bd      	mov	sp, r7
 800953c:	bd80      	pop	{r7, pc}
	...

08009540 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8009540:	b580      	push	{r7, lr}
 8009542:	b088      	sub	sp, #32
 8009544:	af00      	add	r7, sp, #0
 8009546:	60f8      	str	r0, [r7, #12]
 8009548:	60b9      	str	r1, [r7, #8]
 800954a:	603b      	str	r3, [r7, #0]
 800954c:	4613      	mov	r3, r2
 800954e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8009554:	2300      	movs	r3, #0
 8009556:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009558:	f3ef 8305 	mrs	r3, IPSR
 800955c:	617b      	str	r3, [r7, #20]
  return(result);
 800955e:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8009560:	2b00      	cmp	r3, #0
 8009562:	d028      	beq.n	80095b6 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009564:	69bb      	ldr	r3, [r7, #24]
 8009566:	2b00      	cmp	r3, #0
 8009568:	d005      	beq.n	8009576 <osMessageQueuePut+0x36>
 800956a:	68bb      	ldr	r3, [r7, #8]
 800956c:	2b00      	cmp	r3, #0
 800956e:	d002      	beq.n	8009576 <osMessageQueuePut+0x36>
 8009570:	683b      	ldr	r3, [r7, #0]
 8009572:	2b00      	cmp	r3, #0
 8009574:	d003      	beq.n	800957e <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8009576:	f06f 0303 	mvn.w	r3, #3
 800957a:	61fb      	str	r3, [r7, #28]
 800957c:	e038      	b.n	80095f0 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800957e:	2300      	movs	r3, #0
 8009580:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8009582:	f107 0210 	add.w	r2, r7, #16
 8009586:	2300      	movs	r3, #0
 8009588:	68b9      	ldr	r1, [r7, #8]
 800958a:	69b8      	ldr	r0, [r7, #24]
 800958c:	f000 fc24 	bl	8009dd8 <xQueueGenericSendFromISR>
 8009590:	4603      	mov	r3, r0
 8009592:	2b01      	cmp	r3, #1
 8009594:	d003      	beq.n	800959e <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8009596:	f06f 0302 	mvn.w	r3, #2
 800959a:	61fb      	str	r3, [r7, #28]
 800959c:	e028      	b.n	80095f0 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800959e:	693b      	ldr	r3, [r7, #16]
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d025      	beq.n	80095f0 <osMessageQueuePut+0xb0>
 80095a4:	4b15      	ldr	r3, [pc, #84]	; (80095fc <osMessageQueuePut+0xbc>)
 80095a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80095aa:	601a      	str	r2, [r3, #0]
 80095ac:	f3bf 8f4f 	dsb	sy
 80095b0:	f3bf 8f6f 	isb	sy
 80095b4:	e01c      	b.n	80095f0 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80095b6:	69bb      	ldr	r3, [r7, #24]
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d002      	beq.n	80095c2 <osMessageQueuePut+0x82>
 80095bc:	68bb      	ldr	r3, [r7, #8]
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d103      	bne.n	80095ca <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 80095c2:	f06f 0303 	mvn.w	r3, #3
 80095c6:	61fb      	str	r3, [r7, #28]
 80095c8:	e012      	b.n	80095f0 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80095ca:	2300      	movs	r3, #0
 80095cc:	683a      	ldr	r2, [r7, #0]
 80095ce:	68b9      	ldr	r1, [r7, #8]
 80095d0:	69b8      	ldr	r0, [r7, #24]
 80095d2:	f000 fb03 	bl	8009bdc <xQueueGenericSend>
 80095d6:	4603      	mov	r3, r0
 80095d8:	2b01      	cmp	r3, #1
 80095da:	d009      	beq.n	80095f0 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 80095dc:	683b      	ldr	r3, [r7, #0]
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d003      	beq.n	80095ea <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 80095e2:	f06f 0301 	mvn.w	r3, #1
 80095e6:	61fb      	str	r3, [r7, #28]
 80095e8:	e002      	b.n	80095f0 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 80095ea:	f06f 0302 	mvn.w	r3, #2
 80095ee:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80095f0:	69fb      	ldr	r3, [r7, #28]
}
 80095f2:	4618      	mov	r0, r3
 80095f4:	3720      	adds	r7, #32
 80095f6:	46bd      	mov	sp, r7
 80095f8:	bd80      	pop	{r7, pc}
 80095fa:	bf00      	nop
 80095fc:	e000ed04 	.word	0xe000ed04

08009600 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8009600:	b580      	push	{r7, lr}
 8009602:	b088      	sub	sp, #32
 8009604:	af00      	add	r7, sp, #0
 8009606:	60f8      	str	r0, [r7, #12]
 8009608:	60b9      	str	r1, [r7, #8]
 800960a:	607a      	str	r2, [r7, #4]
 800960c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8009612:	2300      	movs	r3, #0
 8009614:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009616:	f3ef 8305 	mrs	r3, IPSR
 800961a:	617b      	str	r3, [r7, #20]
  return(result);
 800961c:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800961e:	2b00      	cmp	r3, #0
 8009620:	d028      	beq.n	8009674 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009622:	69bb      	ldr	r3, [r7, #24]
 8009624:	2b00      	cmp	r3, #0
 8009626:	d005      	beq.n	8009634 <osMessageQueueGet+0x34>
 8009628:	68bb      	ldr	r3, [r7, #8]
 800962a:	2b00      	cmp	r3, #0
 800962c:	d002      	beq.n	8009634 <osMessageQueueGet+0x34>
 800962e:	683b      	ldr	r3, [r7, #0]
 8009630:	2b00      	cmp	r3, #0
 8009632:	d003      	beq.n	800963c <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8009634:	f06f 0303 	mvn.w	r3, #3
 8009638:	61fb      	str	r3, [r7, #28]
 800963a:	e037      	b.n	80096ac <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800963c:	2300      	movs	r3, #0
 800963e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8009640:	f107 0310 	add.w	r3, r7, #16
 8009644:	461a      	mov	r2, r3
 8009646:	68b9      	ldr	r1, [r7, #8]
 8009648:	69b8      	ldr	r0, [r7, #24]
 800964a:	f000 fed9 	bl	800a400 <xQueueReceiveFromISR>
 800964e:	4603      	mov	r3, r0
 8009650:	2b01      	cmp	r3, #1
 8009652:	d003      	beq.n	800965c <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8009654:	f06f 0302 	mvn.w	r3, #2
 8009658:	61fb      	str	r3, [r7, #28]
 800965a:	e027      	b.n	80096ac <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800965c:	693b      	ldr	r3, [r7, #16]
 800965e:	2b00      	cmp	r3, #0
 8009660:	d024      	beq.n	80096ac <osMessageQueueGet+0xac>
 8009662:	4b15      	ldr	r3, [pc, #84]	; (80096b8 <osMessageQueueGet+0xb8>)
 8009664:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009668:	601a      	str	r2, [r3, #0]
 800966a:	f3bf 8f4f 	dsb	sy
 800966e:	f3bf 8f6f 	isb	sy
 8009672:	e01b      	b.n	80096ac <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8009674:	69bb      	ldr	r3, [r7, #24]
 8009676:	2b00      	cmp	r3, #0
 8009678:	d002      	beq.n	8009680 <osMessageQueueGet+0x80>
 800967a:	68bb      	ldr	r3, [r7, #8]
 800967c:	2b00      	cmp	r3, #0
 800967e:	d103      	bne.n	8009688 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8009680:	f06f 0303 	mvn.w	r3, #3
 8009684:	61fb      	str	r3, [r7, #28]
 8009686:	e011      	b.n	80096ac <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8009688:	683a      	ldr	r2, [r7, #0]
 800968a:	68b9      	ldr	r1, [r7, #8]
 800968c:	69b8      	ldr	r0, [r7, #24]
 800968e:	f000 fccb 	bl	800a028 <xQueueReceive>
 8009692:	4603      	mov	r3, r0
 8009694:	2b01      	cmp	r3, #1
 8009696:	d009      	beq.n	80096ac <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8009698:	683b      	ldr	r3, [r7, #0]
 800969a:	2b00      	cmp	r3, #0
 800969c:	d003      	beq.n	80096a6 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800969e:	f06f 0301 	mvn.w	r3, #1
 80096a2:	61fb      	str	r3, [r7, #28]
 80096a4:	e002      	b.n	80096ac <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 80096a6:	f06f 0302 	mvn.w	r3, #2
 80096aa:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80096ac:	69fb      	ldr	r3, [r7, #28]
}
 80096ae:	4618      	mov	r0, r3
 80096b0:	3720      	adds	r7, #32
 80096b2:	46bd      	mov	sp, r7
 80096b4:	bd80      	pop	{r7, pc}
 80096b6:	bf00      	nop
 80096b8:	e000ed04 	.word	0xe000ed04

080096bc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80096bc:	b480      	push	{r7}
 80096be:	b085      	sub	sp, #20
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	60f8      	str	r0, [r7, #12]
 80096c4:	60b9      	str	r1, [r7, #8]
 80096c6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	4a07      	ldr	r2, [pc, #28]	; (80096e8 <vApplicationGetIdleTaskMemory+0x2c>)
 80096cc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80096ce:	68bb      	ldr	r3, [r7, #8]
 80096d0:	4a06      	ldr	r2, [pc, #24]	; (80096ec <vApplicationGetIdleTaskMemory+0x30>)
 80096d2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	2280      	movs	r2, #128	; 0x80
 80096d8:	601a      	str	r2, [r3, #0]
}
 80096da:	bf00      	nop
 80096dc:	3714      	adds	r7, #20
 80096de:	46bd      	mov	sp, r7
 80096e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e4:	4770      	bx	lr
 80096e6:	bf00      	nop
 80096e8:	2400104c 	.word	0x2400104c
 80096ec:	240010f4 	.word	0x240010f4

080096f0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80096f0:	b480      	push	{r7}
 80096f2:	b085      	sub	sp, #20
 80096f4:	af00      	add	r7, sp, #0
 80096f6:	60f8      	str	r0, [r7, #12]
 80096f8:	60b9      	str	r1, [r7, #8]
 80096fa:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	4a07      	ldr	r2, [pc, #28]	; (800971c <vApplicationGetTimerTaskMemory+0x2c>)
 8009700:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009702:	68bb      	ldr	r3, [r7, #8]
 8009704:	4a06      	ldr	r2, [pc, #24]	; (8009720 <vApplicationGetTimerTaskMemory+0x30>)
 8009706:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800970e:	601a      	str	r2, [r3, #0]
}
 8009710:	bf00      	nop
 8009712:	3714      	adds	r7, #20
 8009714:	46bd      	mov	sp, r7
 8009716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800971a:	4770      	bx	lr
 800971c:	240012f4 	.word	0x240012f4
 8009720:	2400139c 	.word	0x2400139c

08009724 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009724:	b480      	push	{r7}
 8009726:	b083      	sub	sp, #12
 8009728:	af00      	add	r7, sp, #0
 800972a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	f103 0208 	add.w	r2, r3, #8
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	f04f 32ff 	mov.w	r2, #4294967295
 800973c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	f103 0208 	add.w	r2, r3, #8
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	f103 0208 	add.w	r2, r3, #8
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	2200      	movs	r2, #0
 8009756:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009758:	bf00      	nop
 800975a:	370c      	adds	r7, #12
 800975c:	46bd      	mov	sp, r7
 800975e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009762:	4770      	bx	lr

08009764 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009764:	b480      	push	{r7}
 8009766:	b083      	sub	sp, #12
 8009768:	af00      	add	r7, sp, #0
 800976a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	2200      	movs	r2, #0
 8009770:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009772:	bf00      	nop
 8009774:	370c      	adds	r7, #12
 8009776:	46bd      	mov	sp, r7
 8009778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977c:	4770      	bx	lr

0800977e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800977e:	b480      	push	{r7}
 8009780:	b085      	sub	sp, #20
 8009782:	af00      	add	r7, sp, #0
 8009784:	6078      	str	r0, [r7, #4]
 8009786:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	685b      	ldr	r3, [r3, #4]
 800978c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800978e:	683b      	ldr	r3, [r7, #0]
 8009790:	68fa      	ldr	r2, [r7, #12]
 8009792:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	689a      	ldr	r2, [r3, #8]
 8009798:	683b      	ldr	r3, [r7, #0]
 800979a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	689b      	ldr	r3, [r3, #8]
 80097a0:	683a      	ldr	r2, [r7, #0]
 80097a2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	683a      	ldr	r2, [r7, #0]
 80097a8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80097aa:	683b      	ldr	r3, [r7, #0]
 80097ac:	687a      	ldr	r2, [r7, #4]
 80097ae:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	1c5a      	adds	r2, r3, #1
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	601a      	str	r2, [r3, #0]
}
 80097ba:	bf00      	nop
 80097bc:	3714      	adds	r7, #20
 80097be:	46bd      	mov	sp, r7
 80097c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c4:	4770      	bx	lr

080097c6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80097c6:	b480      	push	{r7}
 80097c8:	b085      	sub	sp, #20
 80097ca:	af00      	add	r7, sp, #0
 80097cc:	6078      	str	r0, [r7, #4]
 80097ce:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80097d0:	683b      	ldr	r3, [r7, #0]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80097d6:	68bb      	ldr	r3, [r7, #8]
 80097d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097dc:	d103      	bne.n	80097e6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	691b      	ldr	r3, [r3, #16]
 80097e2:	60fb      	str	r3, [r7, #12]
 80097e4:	e00c      	b.n	8009800 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	3308      	adds	r3, #8
 80097ea:	60fb      	str	r3, [r7, #12]
 80097ec:	e002      	b.n	80097f4 <vListInsert+0x2e>
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	685b      	ldr	r3, [r3, #4]
 80097f2:	60fb      	str	r3, [r7, #12]
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	685b      	ldr	r3, [r3, #4]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	68ba      	ldr	r2, [r7, #8]
 80097fc:	429a      	cmp	r2, r3
 80097fe:	d2f6      	bcs.n	80097ee <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	685a      	ldr	r2, [r3, #4]
 8009804:	683b      	ldr	r3, [r7, #0]
 8009806:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009808:	683b      	ldr	r3, [r7, #0]
 800980a:	685b      	ldr	r3, [r3, #4]
 800980c:	683a      	ldr	r2, [r7, #0]
 800980e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009810:	683b      	ldr	r3, [r7, #0]
 8009812:	68fa      	ldr	r2, [r7, #12]
 8009814:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	683a      	ldr	r2, [r7, #0]
 800981a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800981c:	683b      	ldr	r3, [r7, #0]
 800981e:	687a      	ldr	r2, [r7, #4]
 8009820:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	1c5a      	adds	r2, r3, #1
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	601a      	str	r2, [r3, #0]
}
 800982c:	bf00      	nop
 800982e:	3714      	adds	r7, #20
 8009830:	46bd      	mov	sp, r7
 8009832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009836:	4770      	bx	lr

08009838 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009838:	b480      	push	{r7}
 800983a:	b085      	sub	sp, #20
 800983c:	af00      	add	r7, sp, #0
 800983e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	691b      	ldr	r3, [r3, #16]
 8009844:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	685b      	ldr	r3, [r3, #4]
 800984a:	687a      	ldr	r2, [r7, #4]
 800984c:	6892      	ldr	r2, [r2, #8]
 800984e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	689b      	ldr	r3, [r3, #8]
 8009854:	687a      	ldr	r2, [r7, #4]
 8009856:	6852      	ldr	r2, [r2, #4]
 8009858:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	685b      	ldr	r3, [r3, #4]
 800985e:	687a      	ldr	r2, [r7, #4]
 8009860:	429a      	cmp	r2, r3
 8009862:	d103      	bne.n	800986c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	689a      	ldr	r2, [r3, #8]
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	2200      	movs	r2, #0
 8009870:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	1e5a      	subs	r2, r3, #1
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	681b      	ldr	r3, [r3, #0]
}
 8009880:	4618      	mov	r0, r3
 8009882:	3714      	adds	r7, #20
 8009884:	46bd      	mov	sp, r7
 8009886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988a:	4770      	bx	lr

0800988c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800988c:	b580      	push	{r7, lr}
 800988e:	b084      	sub	sp, #16
 8009890:	af00      	add	r7, sp, #0
 8009892:	6078      	str	r0, [r7, #4]
 8009894:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	2b00      	cmp	r3, #0
 800989e:	d10a      	bne.n	80098b6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80098a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098a4:	f383 8811 	msr	BASEPRI, r3
 80098a8:	f3bf 8f6f 	isb	sy
 80098ac:	f3bf 8f4f 	dsb	sy
 80098b0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80098b2:	bf00      	nop
 80098b4:	e7fe      	b.n	80098b4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80098b6:	f002 fd0d 	bl	800c2d4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	681a      	ldr	r2, [r3, #0]
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098c2:	68f9      	ldr	r1, [r7, #12]
 80098c4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80098c6:	fb01 f303 	mul.w	r3, r1, r3
 80098ca:	441a      	add	r2, r3
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	2200      	movs	r2, #0
 80098d4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	681a      	ldr	r2, [r3, #0]
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	681a      	ldr	r2, [r3, #0]
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098e6:	3b01      	subs	r3, #1
 80098e8:	68f9      	ldr	r1, [r7, #12]
 80098ea:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80098ec:	fb01 f303 	mul.w	r3, r1, r3
 80098f0:	441a      	add	r2, r3
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	22ff      	movs	r2, #255	; 0xff
 80098fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	22ff      	movs	r2, #255	; 0xff
 8009902:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009906:	683b      	ldr	r3, [r7, #0]
 8009908:	2b00      	cmp	r3, #0
 800990a:	d114      	bne.n	8009936 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	691b      	ldr	r3, [r3, #16]
 8009910:	2b00      	cmp	r3, #0
 8009912:	d01a      	beq.n	800994a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	3310      	adds	r3, #16
 8009918:	4618      	mov	r0, r3
 800991a:	f001 fcc1 	bl	800b2a0 <xTaskRemoveFromEventList>
 800991e:	4603      	mov	r3, r0
 8009920:	2b00      	cmp	r3, #0
 8009922:	d012      	beq.n	800994a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009924:	4b0c      	ldr	r3, [pc, #48]	; (8009958 <xQueueGenericReset+0xcc>)
 8009926:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800992a:	601a      	str	r2, [r3, #0]
 800992c:	f3bf 8f4f 	dsb	sy
 8009930:	f3bf 8f6f 	isb	sy
 8009934:	e009      	b.n	800994a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	3310      	adds	r3, #16
 800993a:	4618      	mov	r0, r3
 800993c:	f7ff fef2 	bl	8009724 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	3324      	adds	r3, #36	; 0x24
 8009944:	4618      	mov	r0, r3
 8009946:	f7ff feed 	bl	8009724 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800994a:	f002 fcf3 	bl	800c334 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800994e:	2301      	movs	r3, #1
}
 8009950:	4618      	mov	r0, r3
 8009952:	3710      	adds	r7, #16
 8009954:	46bd      	mov	sp, r7
 8009956:	bd80      	pop	{r7, pc}
 8009958:	e000ed04 	.word	0xe000ed04

0800995c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800995c:	b580      	push	{r7, lr}
 800995e:	b08e      	sub	sp, #56	; 0x38
 8009960:	af02      	add	r7, sp, #8
 8009962:	60f8      	str	r0, [r7, #12]
 8009964:	60b9      	str	r1, [r7, #8]
 8009966:	607a      	str	r2, [r7, #4]
 8009968:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	2b00      	cmp	r3, #0
 800996e:	d10a      	bne.n	8009986 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8009970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009974:	f383 8811 	msr	BASEPRI, r3
 8009978:	f3bf 8f6f 	isb	sy
 800997c:	f3bf 8f4f 	dsb	sy
 8009980:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009982:	bf00      	nop
 8009984:	e7fe      	b.n	8009984 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009986:	683b      	ldr	r3, [r7, #0]
 8009988:	2b00      	cmp	r3, #0
 800998a:	d10a      	bne.n	80099a2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800998c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009990:	f383 8811 	msr	BASEPRI, r3
 8009994:	f3bf 8f6f 	isb	sy
 8009998:	f3bf 8f4f 	dsb	sy
 800999c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800999e:	bf00      	nop
 80099a0:	e7fe      	b.n	80099a0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d002      	beq.n	80099ae <xQueueGenericCreateStatic+0x52>
 80099a8:	68bb      	ldr	r3, [r7, #8]
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d001      	beq.n	80099b2 <xQueueGenericCreateStatic+0x56>
 80099ae:	2301      	movs	r3, #1
 80099b0:	e000      	b.n	80099b4 <xQueueGenericCreateStatic+0x58>
 80099b2:	2300      	movs	r3, #0
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d10a      	bne.n	80099ce <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80099b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099bc:	f383 8811 	msr	BASEPRI, r3
 80099c0:	f3bf 8f6f 	isb	sy
 80099c4:	f3bf 8f4f 	dsb	sy
 80099c8:	623b      	str	r3, [r7, #32]
}
 80099ca:	bf00      	nop
 80099cc:	e7fe      	b.n	80099cc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d102      	bne.n	80099da <xQueueGenericCreateStatic+0x7e>
 80099d4:	68bb      	ldr	r3, [r7, #8]
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d101      	bne.n	80099de <xQueueGenericCreateStatic+0x82>
 80099da:	2301      	movs	r3, #1
 80099dc:	e000      	b.n	80099e0 <xQueueGenericCreateStatic+0x84>
 80099de:	2300      	movs	r3, #0
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d10a      	bne.n	80099fa <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80099e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099e8:	f383 8811 	msr	BASEPRI, r3
 80099ec:	f3bf 8f6f 	isb	sy
 80099f0:	f3bf 8f4f 	dsb	sy
 80099f4:	61fb      	str	r3, [r7, #28]
}
 80099f6:	bf00      	nop
 80099f8:	e7fe      	b.n	80099f8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80099fa:	2350      	movs	r3, #80	; 0x50
 80099fc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80099fe:	697b      	ldr	r3, [r7, #20]
 8009a00:	2b50      	cmp	r3, #80	; 0x50
 8009a02:	d00a      	beq.n	8009a1a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8009a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a08:	f383 8811 	msr	BASEPRI, r3
 8009a0c:	f3bf 8f6f 	isb	sy
 8009a10:	f3bf 8f4f 	dsb	sy
 8009a14:	61bb      	str	r3, [r7, #24]
}
 8009a16:	bf00      	nop
 8009a18:	e7fe      	b.n	8009a18 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009a1a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009a1c:	683b      	ldr	r3, [r7, #0]
 8009a1e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009a20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d00d      	beq.n	8009a42 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009a26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a28:	2201      	movs	r2, #1
 8009a2a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009a2e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a34:	9300      	str	r3, [sp, #0]
 8009a36:	4613      	mov	r3, r2
 8009a38:	687a      	ldr	r2, [r7, #4]
 8009a3a:	68b9      	ldr	r1, [r7, #8]
 8009a3c:	68f8      	ldr	r0, [r7, #12]
 8009a3e:	f000 f83f 	bl	8009ac0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009a42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009a44:	4618      	mov	r0, r3
 8009a46:	3730      	adds	r7, #48	; 0x30
 8009a48:	46bd      	mov	sp, r7
 8009a4a:	bd80      	pop	{r7, pc}

08009a4c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009a4c:	b580      	push	{r7, lr}
 8009a4e:	b08a      	sub	sp, #40	; 0x28
 8009a50:	af02      	add	r7, sp, #8
 8009a52:	60f8      	str	r0, [r7, #12]
 8009a54:	60b9      	str	r1, [r7, #8]
 8009a56:	4613      	mov	r3, r2
 8009a58:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d10a      	bne.n	8009a76 <xQueueGenericCreate+0x2a>
	__asm volatile
 8009a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a64:	f383 8811 	msr	BASEPRI, r3
 8009a68:	f3bf 8f6f 	isb	sy
 8009a6c:	f3bf 8f4f 	dsb	sy
 8009a70:	613b      	str	r3, [r7, #16]
}
 8009a72:	bf00      	nop
 8009a74:	e7fe      	b.n	8009a74 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	68ba      	ldr	r2, [r7, #8]
 8009a7a:	fb02 f303 	mul.w	r3, r2, r3
 8009a7e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009a80:	69fb      	ldr	r3, [r7, #28]
 8009a82:	3350      	adds	r3, #80	; 0x50
 8009a84:	4618      	mov	r0, r3
 8009a86:	f002 fd47 	bl	800c518 <pvPortMalloc>
 8009a8a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009a8c:	69bb      	ldr	r3, [r7, #24]
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d011      	beq.n	8009ab6 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8009a92:	69bb      	ldr	r3, [r7, #24]
 8009a94:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009a96:	697b      	ldr	r3, [r7, #20]
 8009a98:	3350      	adds	r3, #80	; 0x50
 8009a9a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009a9c:	69bb      	ldr	r3, [r7, #24]
 8009a9e:	2200      	movs	r2, #0
 8009aa0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009aa4:	79fa      	ldrb	r2, [r7, #7]
 8009aa6:	69bb      	ldr	r3, [r7, #24]
 8009aa8:	9300      	str	r3, [sp, #0]
 8009aaa:	4613      	mov	r3, r2
 8009aac:	697a      	ldr	r2, [r7, #20]
 8009aae:	68b9      	ldr	r1, [r7, #8]
 8009ab0:	68f8      	ldr	r0, [r7, #12]
 8009ab2:	f000 f805 	bl	8009ac0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009ab6:	69bb      	ldr	r3, [r7, #24]
	}
 8009ab8:	4618      	mov	r0, r3
 8009aba:	3720      	adds	r7, #32
 8009abc:	46bd      	mov	sp, r7
 8009abe:	bd80      	pop	{r7, pc}

08009ac0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009ac0:	b580      	push	{r7, lr}
 8009ac2:	b084      	sub	sp, #16
 8009ac4:	af00      	add	r7, sp, #0
 8009ac6:	60f8      	str	r0, [r7, #12]
 8009ac8:	60b9      	str	r1, [r7, #8]
 8009aca:	607a      	str	r2, [r7, #4]
 8009acc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009ace:	68bb      	ldr	r3, [r7, #8]
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d103      	bne.n	8009adc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009ad4:	69bb      	ldr	r3, [r7, #24]
 8009ad6:	69ba      	ldr	r2, [r7, #24]
 8009ad8:	601a      	str	r2, [r3, #0]
 8009ada:	e002      	b.n	8009ae2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009adc:	69bb      	ldr	r3, [r7, #24]
 8009ade:	687a      	ldr	r2, [r7, #4]
 8009ae0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009ae2:	69bb      	ldr	r3, [r7, #24]
 8009ae4:	68fa      	ldr	r2, [r7, #12]
 8009ae6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009ae8:	69bb      	ldr	r3, [r7, #24]
 8009aea:	68ba      	ldr	r2, [r7, #8]
 8009aec:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009aee:	2101      	movs	r1, #1
 8009af0:	69b8      	ldr	r0, [r7, #24]
 8009af2:	f7ff fecb 	bl	800988c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009af6:	69bb      	ldr	r3, [r7, #24]
 8009af8:	78fa      	ldrb	r2, [r7, #3]
 8009afa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009afe:	bf00      	nop
 8009b00:	3710      	adds	r7, #16
 8009b02:	46bd      	mov	sp, r7
 8009b04:	bd80      	pop	{r7, pc}

08009b06 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8009b06:	b580      	push	{r7, lr}
 8009b08:	b08a      	sub	sp, #40	; 0x28
 8009b0a:	af02      	add	r7, sp, #8
 8009b0c:	60f8      	str	r0, [r7, #12]
 8009b0e:	60b9      	str	r1, [r7, #8]
 8009b10:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d10a      	bne.n	8009b2e <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8009b18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b1c:	f383 8811 	msr	BASEPRI, r3
 8009b20:	f3bf 8f6f 	isb	sy
 8009b24:	f3bf 8f4f 	dsb	sy
 8009b28:	61bb      	str	r3, [r7, #24]
}
 8009b2a:	bf00      	nop
 8009b2c:	e7fe      	b.n	8009b2c <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8009b2e:	68ba      	ldr	r2, [r7, #8]
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	429a      	cmp	r2, r3
 8009b34:	d90a      	bls.n	8009b4c <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8009b36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b3a:	f383 8811 	msr	BASEPRI, r3
 8009b3e:	f3bf 8f6f 	isb	sy
 8009b42:	f3bf 8f4f 	dsb	sy
 8009b46:	617b      	str	r3, [r7, #20]
}
 8009b48:	bf00      	nop
 8009b4a:	e7fe      	b.n	8009b4a <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8009b4c:	2302      	movs	r3, #2
 8009b4e:	9300      	str	r3, [sp, #0]
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	2200      	movs	r2, #0
 8009b54:	2100      	movs	r1, #0
 8009b56:	68f8      	ldr	r0, [r7, #12]
 8009b58:	f7ff ff00 	bl	800995c <xQueueGenericCreateStatic>
 8009b5c:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8009b5e:	69fb      	ldr	r3, [r7, #28]
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d002      	beq.n	8009b6a <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8009b64:	69fb      	ldr	r3, [r7, #28]
 8009b66:	68ba      	ldr	r2, [r7, #8]
 8009b68:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8009b6a:	69fb      	ldr	r3, [r7, #28]
	}
 8009b6c:	4618      	mov	r0, r3
 8009b6e:	3720      	adds	r7, #32
 8009b70:	46bd      	mov	sp, r7
 8009b72:	bd80      	pop	{r7, pc}

08009b74 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8009b74:	b580      	push	{r7, lr}
 8009b76:	b086      	sub	sp, #24
 8009b78:	af00      	add	r7, sp, #0
 8009b7a:	6078      	str	r0, [r7, #4]
 8009b7c:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d10a      	bne.n	8009b9a <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8009b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b88:	f383 8811 	msr	BASEPRI, r3
 8009b8c:	f3bf 8f6f 	isb	sy
 8009b90:	f3bf 8f4f 	dsb	sy
 8009b94:	613b      	str	r3, [r7, #16]
}
 8009b96:	bf00      	nop
 8009b98:	e7fe      	b.n	8009b98 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8009b9a:	683a      	ldr	r2, [r7, #0]
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	429a      	cmp	r2, r3
 8009ba0:	d90a      	bls.n	8009bb8 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8009ba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ba6:	f383 8811 	msr	BASEPRI, r3
 8009baa:	f3bf 8f6f 	isb	sy
 8009bae:	f3bf 8f4f 	dsb	sy
 8009bb2:	60fb      	str	r3, [r7, #12]
}
 8009bb4:	bf00      	nop
 8009bb6:	e7fe      	b.n	8009bb6 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8009bb8:	2202      	movs	r2, #2
 8009bba:	2100      	movs	r1, #0
 8009bbc:	6878      	ldr	r0, [r7, #4]
 8009bbe:	f7ff ff45 	bl	8009a4c <xQueueGenericCreate>
 8009bc2:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8009bc4:	697b      	ldr	r3, [r7, #20]
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d002      	beq.n	8009bd0 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8009bca:	697b      	ldr	r3, [r7, #20]
 8009bcc:	683a      	ldr	r2, [r7, #0]
 8009bce:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8009bd0:	697b      	ldr	r3, [r7, #20]
	}
 8009bd2:	4618      	mov	r0, r3
 8009bd4:	3718      	adds	r7, #24
 8009bd6:	46bd      	mov	sp, r7
 8009bd8:	bd80      	pop	{r7, pc}
	...

08009bdc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009bdc:	b580      	push	{r7, lr}
 8009bde:	b08e      	sub	sp, #56	; 0x38
 8009be0:	af00      	add	r7, sp, #0
 8009be2:	60f8      	str	r0, [r7, #12]
 8009be4:	60b9      	str	r1, [r7, #8]
 8009be6:	607a      	str	r2, [r7, #4]
 8009be8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009bea:	2300      	movs	r3, #0
 8009bec:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d10a      	bne.n	8009c0e <xQueueGenericSend+0x32>
	__asm volatile
 8009bf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bfc:	f383 8811 	msr	BASEPRI, r3
 8009c00:	f3bf 8f6f 	isb	sy
 8009c04:	f3bf 8f4f 	dsb	sy
 8009c08:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009c0a:	bf00      	nop
 8009c0c:	e7fe      	b.n	8009c0c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009c0e:	68bb      	ldr	r3, [r7, #8]
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d103      	bne.n	8009c1c <xQueueGenericSend+0x40>
 8009c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d101      	bne.n	8009c20 <xQueueGenericSend+0x44>
 8009c1c:	2301      	movs	r3, #1
 8009c1e:	e000      	b.n	8009c22 <xQueueGenericSend+0x46>
 8009c20:	2300      	movs	r3, #0
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d10a      	bne.n	8009c3c <xQueueGenericSend+0x60>
	__asm volatile
 8009c26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c2a:	f383 8811 	msr	BASEPRI, r3
 8009c2e:	f3bf 8f6f 	isb	sy
 8009c32:	f3bf 8f4f 	dsb	sy
 8009c36:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009c38:	bf00      	nop
 8009c3a:	e7fe      	b.n	8009c3a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009c3c:	683b      	ldr	r3, [r7, #0]
 8009c3e:	2b02      	cmp	r3, #2
 8009c40:	d103      	bne.n	8009c4a <xQueueGenericSend+0x6e>
 8009c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c46:	2b01      	cmp	r3, #1
 8009c48:	d101      	bne.n	8009c4e <xQueueGenericSend+0x72>
 8009c4a:	2301      	movs	r3, #1
 8009c4c:	e000      	b.n	8009c50 <xQueueGenericSend+0x74>
 8009c4e:	2300      	movs	r3, #0
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d10a      	bne.n	8009c6a <xQueueGenericSend+0x8e>
	__asm volatile
 8009c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c58:	f383 8811 	msr	BASEPRI, r3
 8009c5c:	f3bf 8f6f 	isb	sy
 8009c60:	f3bf 8f4f 	dsb	sy
 8009c64:	623b      	str	r3, [r7, #32]
}
 8009c66:	bf00      	nop
 8009c68:	e7fe      	b.n	8009c68 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009c6a:	f001 fcdb 	bl	800b624 <xTaskGetSchedulerState>
 8009c6e:	4603      	mov	r3, r0
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d102      	bne.n	8009c7a <xQueueGenericSend+0x9e>
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d101      	bne.n	8009c7e <xQueueGenericSend+0xa2>
 8009c7a:	2301      	movs	r3, #1
 8009c7c:	e000      	b.n	8009c80 <xQueueGenericSend+0xa4>
 8009c7e:	2300      	movs	r3, #0
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d10a      	bne.n	8009c9a <xQueueGenericSend+0xbe>
	__asm volatile
 8009c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c88:	f383 8811 	msr	BASEPRI, r3
 8009c8c:	f3bf 8f6f 	isb	sy
 8009c90:	f3bf 8f4f 	dsb	sy
 8009c94:	61fb      	str	r3, [r7, #28]
}
 8009c96:	bf00      	nop
 8009c98:	e7fe      	b.n	8009c98 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009c9a:	f002 fb1b 	bl	800c2d4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ca0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ca4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ca6:	429a      	cmp	r2, r3
 8009ca8:	d302      	bcc.n	8009cb0 <xQueueGenericSend+0xd4>
 8009caa:	683b      	ldr	r3, [r7, #0]
 8009cac:	2b02      	cmp	r3, #2
 8009cae:	d129      	bne.n	8009d04 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009cb0:	683a      	ldr	r2, [r7, #0]
 8009cb2:	68b9      	ldr	r1, [r7, #8]
 8009cb4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009cb6:	f000 fc5e 	bl	800a576 <prvCopyDataToQueue>
 8009cba:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009cbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d010      	beq.n	8009ce6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cc6:	3324      	adds	r3, #36	; 0x24
 8009cc8:	4618      	mov	r0, r3
 8009cca:	f001 fae9 	bl	800b2a0 <xTaskRemoveFromEventList>
 8009cce:	4603      	mov	r3, r0
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d013      	beq.n	8009cfc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009cd4:	4b3f      	ldr	r3, [pc, #252]	; (8009dd4 <xQueueGenericSend+0x1f8>)
 8009cd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009cda:	601a      	str	r2, [r3, #0]
 8009cdc:	f3bf 8f4f 	dsb	sy
 8009ce0:	f3bf 8f6f 	isb	sy
 8009ce4:	e00a      	b.n	8009cfc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009ce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d007      	beq.n	8009cfc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009cec:	4b39      	ldr	r3, [pc, #228]	; (8009dd4 <xQueueGenericSend+0x1f8>)
 8009cee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009cf2:	601a      	str	r2, [r3, #0]
 8009cf4:	f3bf 8f4f 	dsb	sy
 8009cf8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009cfc:	f002 fb1a 	bl	800c334 <vPortExitCritical>
				return pdPASS;
 8009d00:	2301      	movs	r3, #1
 8009d02:	e063      	b.n	8009dcc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d103      	bne.n	8009d12 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009d0a:	f002 fb13 	bl	800c334 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009d0e:	2300      	movs	r3, #0
 8009d10:	e05c      	b.n	8009dcc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009d12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d106      	bne.n	8009d26 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009d18:	f107 0314 	add.w	r3, r7, #20
 8009d1c:	4618      	mov	r0, r3
 8009d1e:	f001 fb23 	bl	800b368 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009d22:	2301      	movs	r3, #1
 8009d24:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009d26:	f002 fb05 	bl	800c334 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009d2a:	f001 f88f 	bl	800ae4c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009d2e:	f002 fad1 	bl	800c2d4 <vPortEnterCritical>
 8009d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d34:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009d38:	b25b      	sxtb	r3, r3
 8009d3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d3e:	d103      	bne.n	8009d48 <xQueueGenericSend+0x16c>
 8009d40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d42:	2200      	movs	r2, #0
 8009d44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d4a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009d4e:	b25b      	sxtb	r3, r3
 8009d50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d54:	d103      	bne.n	8009d5e <xQueueGenericSend+0x182>
 8009d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d58:	2200      	movs	r2, #0
 8009d5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009d5e:	f002 fae9 	bl	800c334 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009d62:	1d3a      	adds	r2, r7, #4
 8009d64:	f107 0314 	add.w	r3, r7, #20
 8009d68:	4611      	mov	r1, r2
 8009d6a:	4618      	mov	r0, r3
 8009d6c:	f001 fb12 	bl	800b394 <xTaskCheckForTimeOut>
 8009d70:	4603      	mov	r3, r0
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d124      	bne.n	8009dc0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009d76:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009d78:	f000 fcf5 	bl	800a766 <prvIsQueueFull>
 8009d7c:	4603      	mov	r3, r0
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d018      	beq.n	8009db4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d84:	3310      	adds	r3, #16
 8009d86:	687a      	ldr	r2, [r7, #4]
 8009d88:	4611      	mov	r1, r2
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	f001 fa38 	bl	800b200 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009d90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009d92:	f000 fc80 	bl	800a696 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009d96:	f001 f867 	bl	800ae68 <xTaskResumeAll>
 8009d9a:	4603      	mov	r3, r0
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	f47f af7c 	bne.w	8009c9a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8009da2:	4b0c      	ldr	r3, [pc, #48]	; (8009dd4 <xQueueGenericSend+0x1f8>)
 8009da4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009da8:	601a      	str	r2, [r3, #0]
 8009daa:	f3bf 8f4f 	dsb	sy
 8009dae:	f3bf 8f6f 	isb	sy
 8009db2:	e772      	b.n	8009c9a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009db4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009db6:	f000 fc6e 	bl	800a696 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009dba:	f001 f855 	bl	800ae68 <xTaskResumeAll>
 8009dbe:	e76c      	b.n	8009c9a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009dc0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009dc2:	f000 fc68 	bl	800a696 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009dc6:	f001 f84f 	bl	800ae68 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009dca:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009dcc:	4618      	mov	r0, r3
 8009dce:	3738      	adds	r7, #56	; 0x38
 8009dd0:	46bd      	mov	sp, r7
 8009dd2:	bd80      	pop	{r7, pc}
 8009dd4:	e000ed04 	.word	0xe000ed04

08009dd8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009dd8:	b580      	push	{r7, lr}
 8009dda:	b090      	sub	sp, #64	; 0x40
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	60f8      	str	r0, [r7, #12]
 8009de0:	60b9      	str	r1, [r7, #8]
 8009de2:	607a      	str	r2, [r7, #4]
 8009de4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8009dea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d10a      	bne.n	8009e06 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8009df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009df4:	f383 8811 	msr	BASEPRI, r3
 8009df8:	f3bf 8f6f 	isb	sy
 8009dfc:	f3bf 8f4f 	dsb	sy
 8009e00:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009e02:	bf00      	nop
 8009e04:	e7fe      	b.n	8009e04 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009e06:	68bb      	ldr	r3, [r7, #8]
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d103      	bne.n	8009e14 <xQueueGenericSendFromISR+0x3c>
 8009e0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d101      	bne.n	8009e18 <xQueueGenericSendFromISR+0x40>
 8009e14:	2301      	movs	r3, #1
 8009e16:	e000      	b.n	8009e1a <xQueueGenericSendFromISR+0x42>
 8009e18:	2300      	movs	r3, #0
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d10a      	bne.n	8009e34 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8009e1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e22:	f383 8811 	msr	BASEPRI, r3
 8009e26:	f3bf 8f6f 	isb	sy
 8009e2a:	f3bf 8f4f 	dsb	sy
 8009e2e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009e30:	bf00      	nop
 8009e32:	e7fe      	b.n	8009e32 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009e34:	683b      	ldr	r3, [r7, #0]
 8009e36:	2b02      	cmp	r3, #2
 8009e38:	d103      	bne.n	8009e42 <xQueueGenericSendFromISR+0x6a>
 8009e3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e3e:	2b01      	cmp	r3, #1
 8009e40:	d101      	bne.n	8009e46 <xQueueGenericSendFromISR+0x6e>
 8009e42:	2301      	movs	r3, #1
 8009e44:	e000      	b.n	8009e48 <xQueueGenericSendFromISR+0x70>
 8009e46:	2300      	movs	r3, #0
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d10a      	bne.n	8009e62 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8009e4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e50:	f383 8811 	msr	BASEPRI, r3
 8009e54:	f3bf 8f6f 	isb	sy
 8009e58:	f3bf 8f4f 	dsb	sy
 8009e5c:	623b      	str	r3, [r7, #32]
}
 8009e5e:	bf00      	nop
 8009e60:	e7fe      	b.n	8009e60 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009e62:	f002 fb19 	bl	800c498 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009e66:	f3ef 8211 	mrs	r2, BASEPRI
 8009e6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e6e:	f383 8811 	msr	BASEPRI, r3
 8009e72:	f3bf 8f6f 	isb	sy
 8009e76:	f3bf 8f4f 	dsb	sy
 8009e7a:	61fa      	str	r2, [r7, #28]
 8009e7c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009e7e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009e80:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009e82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009e86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e8a:	429a      	cmp	r2, r3
 8009e8c:	d302      	bcc.n	8009e94 <xQueueGenericSendFromISR+0xbc>
 8009e8e:	683b      	ldr	r3, [r7, #0]
 8009e90:	2b02      	cmp	r3, #2
 8009e92:	d12f      	bne.n	8009ef4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009e94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e96:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009e9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009e9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ea2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009ea4:	683a      	ldr	r2, [r7, #0]
 8009ea6:	68b9      	ldr	r1, [r7, #8]
 8009ea8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009eaa:	f000 fb64 	bl	800a576 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009eae:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8009eb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009eb6:	d112      	bne.n	8009ede <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009eb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d016      	beq.n	8009eee <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009ec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ec2:	3324      	adds	r3, #36	; 0x24
 8009ec4:	4618      	mov	r0, r3
 8009ec6:	f001 f9eb 	bl	800b2a0 <xTaskRemoveFromEventList>
 8009eca:	4603      	mov	r3, r0
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d00e      	beq.n	8009eee <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d00b      	beq.n	8009eee <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	2201      	movs	r2, #1
 8009eda:	601a      	str	r2, [r3, #0]
 8009edc:	e007      	b.n	8009eee <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009ede:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009ee2:	3301      	adds	r3, #1
 8009ee4:	b2db      	uxtb	r3, r3
 8009ee6:	b25a      	sxtb	r2, r3
 8009ee8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009eea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009eee:	2301      	movs	r3, #1
 8009ef0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8009ef2:	e001      	b.n	8009ef8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009ef4:	2300      	movs	r3, #0
 8009ef6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009ef8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009efa:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009efc:	697b      	ldr	r3, [r7, #20]
 8009efe:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009f02:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009f04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009f06:	4618      	mov	r0, r3
 8009f08:	3740      	adds	r7, #64	; 0x40
 8009f0a:	46bd      	mov	sp, r7
 8009f0c:	bd80      	pop	{r7, pc}

08009f0e <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009f0e:	b580      	push	{r7, lr}
 8009f10:	b08e      	sub	sp, #56	; 0x38
 8009f12:	af00      	add	r7, sp, #0
 8009f14:	6078      	str	r0, [r7, #4]
 8009f16:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8009f1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d10a      	bne.n	8009f38 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8009f22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f26:	f383 8811 	msr	BASEPRI, r3
 8009f2a:	f3bf 8f6f 	isb	sy
 8009f2e:	f3bf 8f4f 	dsb	sy
 8009f32:	623b      	str	r3, [r7, #32]
}
 8009f34:	bf00      	nop
 8009f36:	e7fe      	b.n	8009f36 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009f38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d00a      	beq.n	8009f56 <xQueueGiveFromISR+0x48>
	__asm volatile
 8009f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f44:	f383 8811 	msr	BASEPRI, r3
 8009f48:	f3bf 8f6f 	isb	sy
 8009f4c:	f3bf 8f4f 	dsb	sy
 8009f50:	61fb      	str	r3, [r7, #28]
}
 8009f52:	bf00      	nop
 8009f54:	e7fe      	b.n	8009f54 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8009f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d103      	bne.n	8009f66 <xQueueGiveFromISR+0x58>
 8009f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f60:	689b      	ldr	r3, [r3, #8]
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d101      	bne.n	8009f6a <xQueueGiveFromISR+0x5c>
 8009f66:	2301      	movs	r3, #1
 8009f68:	e000      	b.n	8009f6c <xQueueGiveFromISR+0x5e>
 8009f6a:	2300      	movs	r3, #0
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d10a      	bne.n	8009f86 <xQueueGiveFromISR+0x78>
	__asm volatile
 8009f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f74:	f383 8811 	msr	BASEPRI, r3
 8009f78:	f3bf 8f6f 	isb	sy
 8009f7c:	f3bf 8f4f 	dsb	sy
 8009f80:	61bb      	str	r3, [r7, #24]
}
 8009f82:	bf00      	nop
 8009f84:	e7fe      	b.n	8009f84 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009f86:	f002 fa87 	bl	800c498 <vPortValidateInterruptPriority>
	__asm volatile
 8009f8a:	f3ef 8211 	mrs	r2, BASEPRI
 8009f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f92:	f383 8811 	msr	BASEPRI, r3
 8009f96:	f3bf 8f6f 	isb	sy
 8009f9a:	f3bf 8f4f 	dsb	sy
 8009f9e:	617a      	str	r2, [r7, #20]
 8009fa0:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8009fa2:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009fa4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009faa:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8009fac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009fb0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009fb2:	429a      	cmp	r2, r3
 8009fb4:	d22b      	bcs.n	800a00e <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fb8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009fbc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fc2:	1c5a      	adds	r2, r3, #1
 8009fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fc6:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009fc8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009fcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fd0:	d112      	bne.n	8009ff8 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d016      	beq.n	800a008 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fdc:	3324      	adds	r3, #36	; 0x24
 8009fde:	4618      	mov	r0, r3
 8009fe0:	f001 f95e 	bl	800b2a0 <xTaskRemoveFromEventList>
 8009fe4:	4603      	mov	r3, r0
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d00e      	beq.n	800a008 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009fea:	683b      	ldr	r3, [r7, #0]
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d00b      	beq.n	800a008 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009ff0:	683b      	ldr	r3, [r7, #0]
 8009ff2:	2201      	movs	r2, #1
 8009ff4:	601a      	str	r2, [r3, #0]
 8009ff6:	e007      	b.n	800a008 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009ff8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009ffc:	3301      	adds	r3, #1
 8009ffe:	b2db      	uxtb	r3, r3
 800a000:	b25a      	sxtb	r2, r3
 800a002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a004:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a008:	2301      	movs	r3, #1
 800a00a:	637b      	str	r3, [r7, #52]	; 0x34
 800a00c:	e001      	b.n	800a012 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a00e:	2300      	movs	r3, #0
 800a010:	637b      	str	r3, [r7, #52]	; 0x34
 800a012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a014:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	f383 8811 	msr	BASEPRI, r3
}
 800a01c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a01e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a020:	4618      	mov	r0, r3
 800a022:	3738      	adds	r7, #56	; 0x38
 800a024:	46bd      	mov	sp, r7
 800a026:	bd80      	pop	{r7, pc}

0800a028 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a028:	b580      	push	{r7, lr}
 800a02a:	b08c      	sub	sp, #48	; 0x30
 800a02c:	af00      	add	r7, sp, #0
 800a02e:	60f8      	str	r0, [r7, #12]
 800a030:	60b9      	str	r1, [r7, #8]
 800a032:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a034:	2300      	movs	r3, #0
 800a036:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a03c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d10a      	bne.n	800a058 <xQueueReceive+0x30>
	__asm volatile
 800a042:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a046:	f383 8811 	msr	BASEPRI, r3
 800a04a:	f3bf 8f6f 	isb	sy
 800a04e:	f3bf 8f4f 	dsb	sy
 800a052:	623b      	str	r3, [r7, #32]
}
 800a054:	bf00      	nop
 800a056:	e7fe      	b.n	800a056 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a058:	68bb      	ldr	r3, [r7, #8]
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d103      	bne.n	800a066 <xQueueReceive+0x3e>
 800a05e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a062:	2b00      	cmp	r3, #0
 800a064:	d101      	bne.n	800a06a <xQueueReceive+0x42>
 800a066:	2301      	movs	r3, #1
 800a068:	e000      	b.n	800a06c <xQueueReceive+0x44>
 800a06a:	2300      	movs	r3, #0
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d10a      	bne.n	800a086 <xQueueReceive+0x5e>
	__asm volatile
 800a070:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a074:	f383 8811 	msr	BASEPRI, r3
 800a078:	f3bf 8f6f 	isb	sy
 800a07c:	f3bf 8f4f 	dsb	sy
 800a080:	61fb      	str	r3, [r7, #28]
}
 800a082:	bf00      	nop
 800a084:	e7fe      	b.n	800a084 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a086:	f001 facd 	bl	800b624 <xTaskGetSchedulerState>
 800a08a:	4603      	mov	r3, r0
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d102      	bne.n	800a096 <xQueueReceive+0x6e>
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	2b00      	cmp	r3, #0
 800a094:	d101      	bne.n	800a09a <xQueueReceive+0x72>
 800a096:	2301      	movs	r3, #1
 800a098:	e000      	b.n	800a09c <xQueueReceive+0x74>
 800a09a:	2300      	movs	r3, #0
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d10a      	bne.n	800a0b6 <xQueueReceive+0x8e>
	__asm volatile
 800a0a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0a4:	f383 8811 	msr	BASEPRI, r3
 800a0a8:	f3bf 8f6f 	isb	sy
 800a0ac:	f3bf 8f4f 	dsb	sy
 800a0b0:	61bb      	str	r3, [r7, #24]
}
 800a0b2:	bf00      	nop
 800a0b4:	e7fe      	b.n	800a0b4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a0b6:	f002 f90d 	bl	800c2d4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a0ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0be:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a0c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d01f      	beq.n	800a106 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a0c6:	68b9      	ldr	r1, [r7, #8]
 800a0c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a0ca:	f000 fabe 	bl	800a64a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a0ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0d0:	1e5a      	subs	r2, r3, #1
 800a0d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0d4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a0d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0d8:	691b      	ldr	r3, [r3, #16]
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d00f      	beq.n	800a0fe <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a0de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0e0:	3310      	adds	r3, #16
 800a0e2:	4618      	mov	r0, r3
 800a0e4:	f001 f8dc 	bl	800b2a0 <xTaskRemoveFromEventList>
 800a0e8:	4603      	mov	r3, r0
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d007      	beq.n	800a0fe <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a0ee:	4b3d      	ldr	r3, [pc, #244]	; (800a1e4 <xQueueReceive+0x1bc>)
 800a0f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a0f4:	601a      	str	r2, [r3, #0]
 800a0f6:	f3bf 8f4f 	dsb	sy
 800a0fa:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a0fe:	f002 f919 	bl	800c334 <vPortExitCritical>
				return pdPASS;
 800a102:	2301      	movs	r3, #1
 800a104:	e069      	b.n	800a1da <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d103      	bne.n	800a114 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a10c:	f002 f912 	bl	800c334 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a110:	2300      	movs	r3, #0
 800a112:	e062      	b.n	800a1da <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a116:	2b00      	cmp	r3, #0
 800a118:	d106      	bne.n	800a128 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a11a:	f107 0310 	add.w	r3, r7, #16
 800a11e:	4618      	mov	r0, r3
 800a120:	f001 f922 	bl	800b368 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a124:	2301      	movs	r3, #1
 800a126:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a128:	f002 f904 	bl	800c334 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a12c:	f000 fe8e 	bl	800ae4c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a130:	f002 f8d0 	bl	800c2d4 <vPortEnterCritical>
 800a134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a136:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a13a:	b25b      	sxtb	r3, r3
 800a13c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a140:	d103      	bne.n	800a14a <xQueueReceive+0x122>
 800a142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a144:	2200      	movs	r2, #0
 800a146:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a14a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a14c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a150:	b25b      	sxtb	r3, r3
 800a152:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a156:	d103      	bne.n	800a160 <xQueueReceive+0x138>
 800a158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a15a:	2200      	movs	r2, #0
 800a15c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a160:	f002 f8e8 	bl	800c334 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a164:	1d3a      	adds	r2, r7, #4
 800a166:	f107 0310 	add.w	r3, r7, #16
 800a16a:	4611      	mov	r1, r2
 800a16c:	4618      	mov	r0, r3
 800a16e:	f001 f911 	bl	800b394 <xTaskCheckForTimeOut>
 800a172:	4603      	mov	r3, r0
 800a174:	2b00      	cmp	r3, #0
 800a176:	d123      	bne.n	800a1c0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a178:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a17a:	f000 fade 	bl	800a73a <prvIsQueueEmpty>
 800a17e:	4603      	mov	r3, r0
 800a180:	2b00      	cmp	r3, #0
 800a182:	d017      	beq.n	800a1b4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a186:	3324      	adds	r3, #36	; 0x24
 800a188:	687a      	ldr	r2, [r7, #4]
 800a18a:	4611      	mov	r1, r2
 800a18c:	4618      	mov	r0, r3
 800a18e:	f001 f837 	bl	800b200 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a192:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a194:	f000 fa7f 	bl	800a696 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a198:	f000 fe66 	bl	800ae68 <xTaskResumeAll>
 800a19c:	4603      	mov	r3, r0
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d189      	bne.n	800a0b6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800a1a2:	4b10      	ldr	r3, [pc, #64]	; (800a1e4 <xQueueReceive+0x1bc>)
 800a1a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a1a8:	601a      	str	r2, [r3, #0]
 800a1aa:	f3bf 8f4f 	dsb	sy
 800a1ae:	f3bf 8f6f 	isb	sy
 800a1b2:	e780      	b.n	800a0b6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a1b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a1b6:	f000 fa6e 	bl	800a696 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a1ba:	f000 fe55 	bl	800ae68 <xTaskResumeAll>
 800a1be:	e77a      	b.n	800a0b6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a1c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a1c2:	f000 fa68 	bl	800a696 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a1c6:	f000 fe4f 	bl	800ae68 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a1ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a1cc:	f000 fab5 	bl	800a73a <prvIsQueueEmpty>
 800a1d0:	4603      	mov	r3, r0
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	f43f af6f 	beq.w	800a0b6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a1d8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a1da:	4618      	mov	r0, r3
 800a1dc:	3730      	adds	r7, #48	; 0x30
 800a1de:	46bd      	mov	sp, r7
 800a1e0:	bd80      	pop	{r7, pc}
 800a1e2:	bf00      	nop
 800a1e4:	e000ed04 	.word	0xe000ed04

0800a1e8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800a1e8:	b580      	push	{r7, lr}
 800a1ea:	b08e      	sub	sp, #56	; 0x38
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	6078      	str	r0, [r7, #4]
 800a1f0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800a1f2:	2300      	movs	r3, #0
 800a1f4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800a1fa:	2300      	movs	r3, #0
 800a1fc:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a1fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a200:	2b00      	cmp	r3, #0
 800a202:	d10a      	bne.n	800a21a <xQueueSemaphoreTake+0x32>
	__asm volatile
 800a204:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a208:	f383 8811 	msr	BASEPRI, r3
 800a20c:	f3bf 8f6f 	isb	sy
 800a210:	f3bf 8f4f 	dsb	sy
 800a214:	623b      	str	r3, [r7, #32]
}
 800a216:	bf00      	nop
 800a218:	e7fe      	b.n	800a218 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a21a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a21c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d00a      	beq.n	800a238 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800a222:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a226:	f383 8811 	msr	BASEPRI, r3
 800a22a:	f3bf 8f6f 	isb	sy
 800a22e:	f3bf 8f4f 	dsb	sy
 800a232:	61fb      	str	r3, [r7, #28]
}
 800a234:	bf00      	nop
 800a236:	e7fe      	b.n	800a236 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a238:	f001 f9f4 	bl	800b624 <xTaskGetSchedulerState>
 800a23c:	4603      	mov	r3, r0
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d102      	bne.n	800a248 <xQueueSemaphoreTake+0x60>
 800a242:	683b      	ldr	r3, [r7, #0]
 800a244:	2b00      	cmp	r3, #0
 800a246:	d101      	bne.n	800a24c <xQueueSemaphoreTake+0x64>
 800a248:	2301      	movs	r3, #1
 800a24a:	e000      	b.n	800a24e <xQueueSemaphoreTake+0x66>
 800a24c:	2300      	movs	r3, #0
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d10a      	bne.n	800a268 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800a252:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a256:	f383 8811 	msr	BASEPRI, r3
 800a25a:	f3bf 8f6f 	isb	sy
 800a25e:	f3bf 8f4f 	dsb	sy
 800a262:	61bb      	str	r3, [r7, #24]
}
 800a264:	bf00      	nop
 800a266:	e7fe      	b.n	800a266 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a268:	f002 f834 	bl	800c2d4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800a26c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a26e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a270:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800a272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a274:	2b00      	cmp	r3, #0
 800a276:	d024      	beq.n	800a2c2 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800a278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a27a:	1e5a      	subs	r2, r3, #1
 800a27c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a27e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	2b00      	cmp	r3, #0
 800a286:	d104      	bne.n	800a292 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800a288:	f001 fb42 	bl	800b910 <pvTaskIncrementMutexHeldCount>
 800a28c:	4602      	mov	r2, r0
 800a28e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a290:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a294:	691b      	ldr	r3, [r3, #16]
 800a296:	2b00      	cmp	r3, #0
 800a298:	d00f      	beq.n	800a2ba <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a29a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a29c:	3310      	adds	r3, #16
 800a29e:	4618      	mov	r0, r3
 800a2a0:	f000 fffe 	bl	800b2a0 <xTaskRemoveFromEventList>
 800a2a4:	4603      	mov	r3, r0
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d007      	beq.n	800a2ba <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a2aa:	4b54      	ldr	r3, [pc, #336]	; (800a3fc <xQueueSemaphoreTake+0x214>)
 800a2ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a2b0:	601a      	str	r2, [r3, #0]
 800a2b2:	f3bf 8f4f 	dsb	sy
 800a2b6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a2ba:	f002 f83b 	bl	800c334 <vPortExitCritical>
				return pdPASS;
 800a2be:	2301      	movs	r3, #1
 800a2c0:	e097      	b.n	800a3f2 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a2c2:	683b      	ldr	r3, [r7, #0]
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d111      	bne.n	800a2ec <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800a2c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d00a      	beq.n	800a2e4 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800a2ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2d2:	f383 8811 	msr	BASEPRI, r3
 800a2d6:	f3bf 8f6f 	isb	sy
 800a2da:	f3bf 8f4f 	dsb	sy
 800a2de:	617b      	str	r3, [r7, #20]
}
 800a2e0:	bf00      	nop
 800a2e2:	e7fe      	b.n	800a2e2 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800a2e4:	f002 f826 	bl	800c334 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a2e8:	2300      	movs	r3, #0
 800a2ea:	e082      	b.n	800a3f2 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a2ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d106      	bne.n	800a300 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a2f2:	f107 030c 	add.w	r3, r7, #12
 800a2f6:	4618      	mov	r0, r3
 800a2f8:	f001 f836 	bl	800b368 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a2fc:	2301      	movs	r3, #1
 800a2fe:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a300:	f002 f818 	bl	800c334 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a304:	f000 fda2 	bl	800ae4c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a308:	f001 ffe4 	bl	800c2d4 <vPortEnterCritical>
 800a30c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a30e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a312:	b25b      	sxtb	r3, r3
 800a314:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a318:	d103      	bne.n	800a322 <xQueueSemaphoreTake+0x13a>
 800a31a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a31c:	2200      	movs	r2, #0
 800a31e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a324:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a328:	b25b      	sxtb	r3, r3
 800a32a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a32e:	d103      	bne.n	800a338 <xQueueSemaphoreTake+0x150>
 800a330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a332:	2200      	movs	r2, #0
 800a334:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a338:	f001 fffc 	bl	800c334 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a33c:	463a      	mov	r2, r7
 800a33e:	f107 030c 	add.w	r3, r7, #12
 800a342:	4611      	mov	r1, r2
 800a344:	4618      	mov	r0, r3
 800a346:	f001 f825 	bl	800b394 <xTaskCheckForTimeOut>
 800a34a:	4603      	mov	r3, r0
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d132      	bne.n	800a3b6 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a350:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a352:	f000 f9f2 	bl	800a73a <prvIsQueueEmpty>
 800a356:	4603      	mov	r3, r0
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d026      	beq.n	800a3aa <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a35c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	2b00      	cmp	r3, #0
 800a362:	d109      	bne.n	800a378 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800a364:	f001 ffb6 	bl	800c2d4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a36a:	689b      	ldr	r3, [r3, #8]
 800a36c:	4618      	mov	r0, r3
 800a36e:	f001 f977 	bl	800b660 <xTaskPriorityInherit>
 800a372:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800a374:	f001 ffde 	bl	800c334 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a37a:	3324      	adds	r3, #36	; 0x24
 800a37c:	683a      	ldr	r2, [r7, #0]
 800a37e:	4611      	mov	r1, r2
 800a380:	4618      	mov	r0, r3
 800a382:	f000 ff3d 	bl	800b200 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a386:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a388:	f000 f985 	bl	800a696 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a38c:	f000 fd6c 	bl	800ae68 <xTaskResumeAll>
 800a390:	4603      	mov	r3, r0
 800a392:	2b00      	cmp	r3, #0
 800a394:	f47f af68 	bne.w	800a268 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800a398:	4b18      	ldr	r3, [pc, #96]	; (800a3fc <xQueueSemaphoreTake+0x214>)
 800a39a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a39e:	601a      	str	r2, [r3, #0]
 800a3a0:	f3bf 8f4f 	dsb	sy
 800a3a4:	f3bf 8f6f 	isb	sy
 800a3a8:	e75e      	b.n	800a268 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800a3aa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a3ac:	f000 f973 	bl	800a696 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a3b0:	f000 fd5a 	bl	800ae68 <xTaskResumeAll>
 800a3b4:	e758      	b.n	800a268 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800a3b6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a3b8:	f000 f96d 	bl	800a696 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a3bc:	f000 fd54 	bl	800ae68 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a3c0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a3c2:	f000 f9ba 	bl	800a73a <prvIsQueueEmpty>
 800a3c6:	4603      	mov	r3, r0
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	f43f af4d 	beq.w	800a268 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800a3ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d00d      	beq.n	800a3f0 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800a3d4:	f001 ff7e 	bl	800c2d4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800a3d8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a3da:	f000 f8b4 	bl	800a546 <prvGetDisinheritPriorityAfterTimeout>
 800a3de:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800a3e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3e2:	689b      	ldr	r3, [r3, #8]
 800a3e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	f001 fa10 	bl	800b80c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800a3ec:	f001 ffa2 	bl	800c334 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a3f0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a3f2:	4618      	mov	r0, r3
 800a3f4:	3738      	adds	r7, #56	; 0x38
 800a3f6:	46bd      	mov	sp, r7
 800a3f8:	bd80      	pop	{r7, pc}
 800a3fa:	bf00      	nop
 800a3fc:	e000ed04 	.word	0xe000ed04

0800a400 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a400:	b580      	push	{r7, lr}
 800a402:	b08e      	sub	sp, #56	; 0x38
 800a404:	af00      	add	r7, sp, #0
 800a406:	60f8      	str	r0, [r7, #12]
 800a408:	60b9      	str	r1, [r7, #8]
 800a40a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a412:	2b00      	cmp	r3, #0
 800a414:	d10a      	bne.n	800a42c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800a416:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a41a:	f383 8811 	msr	BASEPRI, r3
 800a41e:	f3bf 8f6f 	isb	sy
 800a422:	f3bf 8f4f 	dsb	sy
 800a426:	623b      	str	r3, [r7, #32]
}
 800a428:	bf00      	nop
 800a42a:	e7fe      	b.n	800a42a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a42c:	68bb      	ldr	r3, [r7, #8]
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d103      	bne.n	800a43a <xQueueReceiveFromISR+0x3a>
 800a432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a436:	2b00      	cmp	r3, #0
 800a438:	d101      	bne.n	800a43e <xQueueReceiveFromISR+0x3e>
 800a43a:	2301      	movs	r3, #1
 800a43c:	e000      	b.n	800a440 <xQueueReceiveFromISR+0x40>
 800a43e:	2300      	movs	r3, #0
 800a440:	2b00      	cmp	r3, #0
 800a442:	d10a      	bne.n	800a45a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800a444:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a448:	f383 8811 	msr	BASEPRI, r3
 800a44c:	f3bf 8f6f 	isb	sy
 800a450:	f3bf 8f4f 	dsb	sy
 800a454:	61fb      	str	r3, [r7, #28]
}
 800a456:	bf00      	nop
 800a458:	e7fe      	b.n	800a458 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a45a:	f002 f81d 	bl	800c498 <vPortValidateInterruptPriority>
	__asm volatile
 800a45e:	f3ef 8211 	mrs	r2, BASEPRI
 800a462:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a466:	f383 8811 	msr	BASEPRI, r3
 800a46a:	f3bf 8f6f 	isb	sy
 800a46e:	f3bf 8f4f 	dsb	sy
 800a472:	61ba      	str	r2, [r7, #24]
 800a474:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800a476:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a478:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a47a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a47c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a47e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a482:	2b00      	cmp	r3, #0
 800a484:	d02f      	beq.n	800a4e6 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800a486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a488:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a48c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a490:	68b9      	ldr	r1, [r7, #8]
 800a492:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a494:	f000 f8d9 	bl	800a64a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a49a:	1e5a      	subs	r2, r3, #1
 800a49c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a49e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800a4a0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a4a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4a8:	d112      	bne.n	800a4d0 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a4aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4ac:	691b      	ldr	r3, [r3, #16]
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d016      	beq.n	800a4e0 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a4b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4b4:	3310      	adds	r3, #16
 800a4b6:	4618      	mov	r0, r3
 800a4b8:	f000 fef2 	bl	800b2a0 <xTaskRemoveFromEventList>
 800a4bc:	4603      	mov	r3, r0
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d00e      	beq.n	800a4e0 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d00b      	beq.n	800a4e0 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	2201      	movs	r2, #1
 800a4cc:	601a      	str	r2, [r3, #0]
 800a4ce:	e007      	b.n	800a4e0 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800a4d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a4d4:	3301      	adds	r3, #1
 800a4d6:	b2db      	uxtb	r3, r3
 800a4d8:	b25a      	sxtb	r2, r3
 800a4da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800a4e0:	2301      	movs	r3, #1
 800a4e2:	637b      	str	r3, [r7, #52]	; 0x34
 800a4e4:	e001      	b.n	800a4ea <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800a4e6:	2300      	movs	r3, #0
 800a4e8:	637b      	str	r3, [r7, #52]	; 0x34
 800a4ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4ec:	613b      	str	r3, [r7, #16]
	__asm volatile
 800a4ee:	693b      	ldr	r3, [r7, #16]
 800a4f0:	f383 8811 	msr	BASEPRI, r3
}
 800a4f4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a4f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a4f8:	4618      	mov	r0, r3
 800a4fa:	3738      	adds	r7, #56	; 0x38
 800a4fc:	46bd      	mov	sp, r7
 800a4fe:	bd80      	pop	{r7, pc}

0800a500 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800a500:	b580      	push	{r7, lr}
 800a502:	b084      	sub	sp, #16
 800a504:	af00      	add	r7, sp, #0
 800a506:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d10a      	bne.n	800a528 <vQueueDelete+0x28>
	__asm volatile
 800a512:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a516:	f383 8811 	msr	BASEPRI, r3
 800a51a:	f3bf 8f6f 	isb	sy
 800a51e:	f3bf 8f4f 	dsb	sy
 800a522:	60bb      	str	r3, [r7, #8]
}
 800a524:	bf00      	nop
 800a526:	e7fe      	b.n	800a526 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800a528:	68f8      	ldr	r0, [r7, #12]
 800a52a:	f000 f95f 	bl	800a7ec <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800a534:	2b00      	cmp	r3, #0
 800a536:	d102      	bne.n	800a53e <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800a538:	68f8      	ldr	r0, [r7, #12]
 800a53a:	f002 f8b9 	bl	800c6b0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800a53e:	bf00      	nop
 800a540:	3710      	adds	r7, #16
 800a542:	46bd      	mov	sp, r7
 800a544:	bd80      	pop	{r7, pc}

0800a546 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800a546:	b480      	push	{r7}
 800a548:	b085      	sub	sp, #20
 800a54a:	af00      	add	r7, sp, #0
 800a54c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a552:	2b00      	cmp	r3, #0
 800a554:	d006      	beq.n	800a564 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800a560:	60fb      	str	r3, [r7, #12]
 800a562:	e001      	b.n	800a568 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800a564:	2300      	movs	r3, #0
 800a566:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800a568:	68fb      	ldr	r3, [r7, #12]
	}
 800a56a:	4618      	mov	r0, r3
 800a56c:	3714      	adds	r7, #20
 800a56e:	46bd      	mov	sp, r7
 800a570:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a574:	4770      	bx	lr

0800a576 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a576:	b580      	push	{r7, lr}
 800a578:	b086      	sub	sp, #24
 800a57a:	af00      	add	r7, sp, #0
 800a57c:	60f8      	str	r0, [r7, #12]
 800a57e:	60b9      	str	r1, [r7, #8]
 800a580:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a582:	2300      	movs	r3, #0
 800a584:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a58a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a590:	2b00      	cmp	r3, #0
 800a592:	d10d      	bne.n	800a5b0 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d14d      	bne.n	800a638 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	689b      	ldr	r3, [r3, #8]
 800a5a0:	4618      	mov	r0, r3
 800a5a2:	f001 f8c5 	bl	800b730 <xTaskPriorityDisinherit>
 800a5a6:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	2200      	movs	r2, #0
 800a5ac:	609a      	str	r2, [r3, #8]
 800a5ae:	e043      	b.n	800a638 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d119      	bne.n	800a5ea <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	6858      	ldr	r0, [r3, #4]
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5be:	461a      	mov	r2, r3
 800a5c0:	68b9      	ldr	r1, [r7, #8]
 800a5c2:	f003 f81d 	bl	800d600 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	685a      	ldr	r2, [r3, #4]
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5ce:	441a      	add	r2, r3
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	685a      	ldr	r2, [r3, #4]
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	689b      	ldr	r3, [r3, #8]
 800a5dc:	429a      	cmp	r2, r3
 800a5de:	d32b      	bcc.n	800a638 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	681a      	ldr	r2, [r3, #0]
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	605a      	str	r2, [r3, #4]
 800a5e8:	e026      	b.n	800a638 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	68d8      	ldr	r0, [r3, #12]
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5f2:	461a      	mov	r2, r3
 800a5f4:	68b9      	ldr	r1, [r7, #8]
 800a5f6:	f003 f803 	bl	800d600 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	68da      	ldr	r2, [r3, #12]
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a602:	425b      	negs	r3, r3
 800a604:	441a      	add	r2, r3
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	68da      	ldr	r2, [r3, #12]
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	429a      	cmp	r2, r3
 800a614:	d207      	bcs.n	800a626 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	689a      	ldr	r2, [r3, #8]
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a61e:	425b      	negs	r3, r3
 800a620:	441a      	add	r2, r3
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	2b02      	cmp	r3, #2
 800a62a:	d105      	bne.n	800a638 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a62c:	693b      	ldr	r3, [r7, #16]
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d002      	beq.n	800a638 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a632:	693b      	ldr	r3, [r7, #16]
 800a634:	3b01      	subs	r3, #1
 800a636:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a638:	693b      	ldr	r3, [r7, #16]
 800a63a:	1c5a      	adds	r2, r3, #1
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a640:	697b      	ldr	r3, [r7, #20]
}
 800a642:	4618      	mov	r0, r3
 800a644:	3718      	adds	r7, #24
 800a646:	46bd      	mov	sp, r7
 800a648:	bd80      	pop	{r7, pc}

0800a64a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a64a:	b580      	push	{r7, lr}
 800a64c:	b082      	sub	sp, #8
 800a64e:	af00      	add	r7, sp, #0
 800a650:	6078      	str	r0, [r7, #4]
 800a652:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d018      	beq.n	800a68e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	68da      	ldr	r2, [r3, #12]
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a664:	441a      	add	r2, r3
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	68da      	ldr	r2, [r3, #12]
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	689b      	ldr	r3, [r3, #8]
 800a672:	429a      	cmp	r2, r3
 800a674:	d303      	bcc.n	800a67e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	681a      	ldr	r2, [r3, #0]
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	68d9      	ldr	r1, [r3, #12]
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a686:	461a      	mov	r2, r3
 800a688:	6838      	ldr	r0, [r7, #0]
 800a68a:	f002 ffb9 	bl	800d600 <memcpy>
	}
}
 800a68e:	bf00      	nop
 800a690:	3708      	adds	r7, #8
 800a692:	46bd      	mov	sp, r7
 800a694:	bd80      	pop	{r7, pc}

0800a696 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a696:	b580      	push	{r7, lr}
 800a698:	b084      	sub	sp, #16
 800a69a:	af00      	add	r7, sp, #0
 800a69c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a69e:	f001 fe19 	bl	800c2d4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a6a8:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a6aa:	e011      	b.n	800a6d0 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d012      	beq.n	800a6da <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	3324      	adds	r3, #36	; 0x24
 800a6b8:	4618      	mov	r0, r3
 800a6ba:	f000 fdf1 	bl	800b2a0 <xTaskRemoveFromEventList>
 800a6be:	4603      	mov	r3, r0
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d001      	beq.n	800a6c8 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a6c4:	f000 fec8 	bl	800b458 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a6c8:	7bfb      	ldrb	r3, [r7, #15]
 800a6ca:	3b01      	subs	r3, #1
 800a6cc:	b2db      	uxtb	r3, r3
 800a6ce:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a6d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	dce9      	bgt.n	800a6ac <prvUnlockQueue+0x16>
 800a6d8:	e000      	b.n	800a6dc <prvUnlockQueue+0x46>
					break;
 800a6da:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	22ff      	movs	r2, #255	; 0xff
 800a6e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a6e4:	f001 fe26 	bl	800c334 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a6e8:	f001 fdf4 	bl	800c2d4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a6f2:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a6f4:	e011      	b.n	800a71a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	691b      	ldr	r3, [r3, #16]
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d012      	beq.n	800a724 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	3310      	adds	r3, #16
 800a702:	4618      	mov	r0, r3
 800a704:	f000 fdcc 	bl	800b2a0 <xTaskRemoveFromEventList>
 800a708:	4603      	mov	r3, r0
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d001      	beq.n	800a712 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a70e:	f000 fea3 	bl	800b458 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a712:	7bbb      	ldrb	r3, [r7, #14]
 800a714:	3b01      	subs	r3, #1
 800a716:	b2db      	uxtb	r3, r3
 800a718:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a71a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a71e:	2b00      	cmp	r3, #0
 800a720:	dce9      	bgt.n	800a6f6 <prvUnlockQueue+0x60>
 800a722:	e000      	b.n	800a726 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a724:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	22ff      	movs	r2, #255	; 0xff
 800a72a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a72e:	f001 fe01 	bl	800c334 <vPortExitCritical>
}
 800a732:	bf00      	nop
 800a734:	3710      	adds	r7, #16
 800a736:	46bd      	mov	sp, r7
 800a738:	bd80      	pop	{r7, pc}

0800a73a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a73a:	b580      	push	{r7, lr}
 800a73c:	b084      	sub	sp, #16
 800a73e:	af00      	add	r7, sp, #0
 800a740:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a742:	f001 fdc7 	bl	800c2d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d102      	bne.n	800a754 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a74e:	2301      	movs	r3, #1
 800a750:	60fb      	str	r3, [r7, #12]
 800a752:	e001      	b.n	800a758 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a754:	2300      	movs	r3, #0
 800a756:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a758:	f001 fdec 	bl	800c334 <vPortExitCritical>

	return xReturn;
 800a75c:	68fb      	ldr	r3, [r7, #12]
}
 800a75e:	4618      	mov	r0, r3
 800a760:	3710      	adds	r7, #16
 800a762:	46bd      	mov	sp, r7
 800a764:	bd80      	pop	{r7, pc}

0800a766 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a766:	b580      	push	{r7, lr}
 800a768:	b084      	sub	sp, #16
 800a76a:	af00      	add	r7, sp, #0
 800a76c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a76e:	f001 fdb1 	bl	800c2d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a77a:	429a      	cmp	r2, r3
 800a77c:	d102      	bne.n	800a784 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a77e:	2301      	movs	r3, #1
 800a780:	60fb      	str	r3, [r7, #12]
 800a782:	e001      	b.n	800a788 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a784:	2300      	movs	r3, #0
 800a786:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a788:	f001 fdd4 	bl	800c334 <vPortExitCritical>

	return xReturn;
 800a78c:	68fb      	ldr	r3, [r7, #12]
}
 800a78e:	4618      	mov	r0, r3
 800a790:	3710      	adds	r7, #16
 800a792:	46bd      	mov	sp, r7
 800a794:	bd80      	pop	{r7, pc}
	...

0800a798 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a798:	b480      	push	{r7}
 800a79a:	b085      	sub	sp, #20
 800a79c:	af00      	add	r7, sp, #0
 800a79e:	6078      	str	r0, [r7, #4]
 800a7a0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a7a2:	2300      	movs	r3, #0
 800a7a4:	60fb      	str	r3, [r7, #12]
 800a7a6:	e014      	b.n	800a7d2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a7a8:	4a0f      	ldr	r2, [pc, #60]	; (800a7e8 <vQueueAddToRegistry+0x50>)
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d10b      	bne.n	800a7cc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a7b4:	490c      	ldr	r1, [pc, #48]	; (800a7e8 <vQueueAddToRegistry+0x50>)
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	683a      	ldr	r2, [r7, #0]
 800a7ba:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a7be:	4a0a      	ldr	r2, [pc, #40]	; (800a7e8 <vQueueAddToRegistry+0x50>)
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	00db      	lsls	r3, r3, #3
 800a7c4:	4413      	add	r3, r2
 800a7c6:	687a      	ldr	r2, [r7, #4]
 800a7c8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a7ca:	e006      	b.n	800a7da <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	3301      	adds	r3, #1
 800a7d0:	60fb      	str	r3, [r7, #12]
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	2b07      	cmp	r3, #7
 800a7d6:	d9e7      	bls.n	800a7a8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a7d8:	bf00      	nop
 800a7da:	bf00      	nop
 800a7dc:	3714      	adds	r7, #20
 800a7de:	46bd      	mov	sp, r7
 800a7e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e4:	4770      	bx	lr
 800a7e6:	bf00      	nop
 800a7e8:	2400179c 	.word	0x2400179c

0800a7ec <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800a7ec:	b480      	push	{r7}
 800a7ee:	b085      	sub	sp, #20
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a7f4:	2300      	movs	r3, #0
 800a7f6:	60fb      	str	r3, [r7, #12]
 800a7f8:	e016      	b.n	800a828 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800a7fa:	4a10      	ldr	r2, [pc, #64]	; (800a83c <vQueueUnregisterQueue+0x50>)
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	00db      	lsls	r3, r3, #3
 800a800:	4413      	add	r3, r2
 800a802:	685b      	ldr	r3, [r3, #4]
 800a804:	687a      	ldr	r2, [r7, #4]
 800a806:	429a      	cmp	r2, r3
 800a808:	d10b      	bne.n	800a822 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800a80a:	4a0c      	ldr	r2, [pc, #48]	; (800a83c <vQueueUnregisterQueue+0x50>)
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	2100      	movs	r1, #0
 800a810:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800a814:	4a09      	ldr	r2, [pc, #36]	; (800a83c <vQueueUnregisterQueue+0x50>)
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	00db      	lsls	r3, r3, #3
 800a81a:	4413      	add	r3, r2
 800a81c:	2200      	movs	r2, #0
 800a81e:	605a      	str	r2, [r3, #4]
				break;
 800a820:	e006      	b.n	800a830 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	3301      	adds	r3, #1
 800a826:	60fb      	str	r3, [r7, #12]
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	2b07      	cmp	r3, #7
 800a82c:	d9e5      	bls.n	800a7fa <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800a82e:	bf00      	nop
 800a830:	bf00      	nop
 800a832:	3714      	adds	r7, #20
 800a834:	46bd      	mov	sp, r7
 800a836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a83a:	4770      	bx	lr
 800a83c:	2400179c 	.word	0x2400179c

0800a840 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a840:	b580      	push	{r7, lr}
 800a842:	b086      	sub	sp, #24
 800a844:	af00      	add	r7, sp, #0
 800a846:	60f8      	str	r0, [r7, #12]
 800a848:	60b9      	str	r1, [r7, #8]
 800a84a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a850:	f001 fd40 	bl	800c2d4 <vPortEnterCritical>
 800a854:	697b      	ldr	r3, [r7, #20]
 800a856:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a85a:	b25b      	sxtb	r3, r3
 800a85c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a860:	d103      	bne.n	800a86a <vQueueWaitForMessageRestricted+0x2a>
 800a862:	697b      	ldr	r3, [r7, #20]
 800a864:	2200      	movs	r2, #0
 800a866:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a86a:	697b      	ldr	r3, [r7, #20]
 800a86c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a870:	b25b      	sxtb	r3, r3
 800a872:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a876:	d103      	bne.n	800a880 <vQueueWaitForMessageRestricted+0x40>
 800a878:	697b      	ldr	r3, [r7, #20]
 800a87a:	2200      	movs	r2, #0
 800a87c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a880:	f001 fd58 	bl	800c334 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a884:	697b      	ldr	r3, [r7, #20]
 800a886:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d106      	bne.n	800a89a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a88c:	697b      	ldr	r3, [r7, #20]
 800a88e:	3324      	adds	r3, #36	; 0x24
 800a890:	687a      	ldr	r2, [r7, #4]
 800a892:	68b9      	ldr	r1, [r7, #8]
 800a894:	4618      	mov	r0, r3
 800a896:	f000 fcd7 	bl	800b248 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a89a:	6978      	ldr	r0, [r7, #20]
 800a89c:	f7ff fefb 	bl	800a696 <prvUnlockQueue>
	}
 800a8a0:	bf00      	nop
 800a8a2:	3718      	adds	r7, #24
 800a8a4:	46bd      	mov	sp, r7
 800a8a6:	bd80      	pop	{r7, pc}

0800a8a8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a8a8:	b580      	push	{r7, lr}
 800a8aa:	b08e      	sub	sp, #56	; 0x38
 800a8ac:	af04      	add	r7, sp, #16
 800a8ae:	60f8      	str	r0, [r7, #12]
 800a8b0:	60b9      	str	r1, [r7, #8]
 800a8b2:	607a      	str	r2, [r7, #4]
 800a8b4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a8b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d10a      	bne.n	800a8d2 <xTaskCreateStatic+0x2a>
	__asm volatile
 800a8bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8c0:	f383 8811 	msr	BASEPRI, r3
 800a8c4:	f3bf 8f6f 	isb	sy
 800a8c8:	f3bf 8f4f 	dsb	sy
 800a8cc:	623b      	str	r3, [r7, #32]
}
 800a8ce:	bf00      	nop
 800a8d0:	e7fe      	b.n	800a8d0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a8d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d10a      	bne.n	800a8ee <xTaskCreateStatic+0x46>
	__asm volatile
 800a8d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8dc:	f383 8811 	msr	BASEPRI, r3
 800a8e0:	f3bf 8f6f 	isb	sy
 800a8e4:	f3bf 8f4f 	dsb	sy
 800a8e8:	61fb      	str	r3, [r7, #28]
}
 800a8ea:	bf00      	nop
 800a8ec:	e7fe      	b.n	800a8ec <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a8ee:	23a8      	movs	r3, #168	; 0xa8
 800a8f0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a8f2:	693b      	ldr	r3, [r7, #16]
 800a8f4:	2ba8      	cmp	r3, #168	; 0xa8
 800a8f6:	d00a      	beq.n	800a90e <xTaskCreateStatic+0x66>
	__asm volatile
 800a8f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8fc:	f383 8811 	msr	BASEPRI, r3
 800a900:	f3bf 8f6f 	isb	sy
 800a904:	f3bf 8f4f 	dsb	sy
 800a908:	61bb      	str	r3, [r7, #24]
}
 800a90a:	bf00      	nop
 800a90c:	e7fe      	b.n	800a90c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a90e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a910:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a912:	2b00      	cmp	r3, #0
 800a914:	d01e      	beq.n	800a954 <xTaskCreateStatic+0xac>
 800a916:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d01b      	beq.n	800a954 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a91c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a91e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a922:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a924:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a928:	2202      	movs	r2, #2
 800a92a:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a92e:	2300      	movs	r3, #0
 800a930:	9303      	str	r3, [sp, #12]
 800a932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a934:	9302      	str	r3, [sp, #8]
 800a936:	f107 0314 	add.w	r3, r7, #20
 800a93a:	9301      	str	r3, [sp, #4]
 800a93c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a93e:	9300      	str	r3, [sp, #0]
 800a940:	683b      	ldr	r3, [r7, #0]
 800a942:	687a      	ldr	r2, [r7, #4]
 800a944:	68b9      	ldr	r1, [r7, #8]
 800a946:	68f8      	ldr	r0, [r7, #12]
 800a948:	f000 f850 	bl	800a9ec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a94c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a94e:	f000 f8f3 	bl	800ab38 <prvAddNewTaskToReadyList>
 800a952:	e001      	b.n	800a958 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800a954:	2300      	movs	r3, #0
 800a956:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a958:	697b      	ldr	r3, [r7, #20]
	}
 800a95a:	4618      	mov	r0, r3
 800a95c:	3728      	adds	r7, #40	; 0x28
 800a95e:	46bd      	mov	sp, r7
 800a960:	bd80      	pop	{r7, pc}

0800a962 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a962:	b580      	push	{r7, lr}
 800a964:	b08c      	sub	sp, #48	; 0x30
 800a966:	af04      	add	r7, sp, #16
 800a968:	60f8      	str	r0, [r7, #12]
 800a96a:	60b9      	str	r1, [r7, #8]
 800a96c:	603b      	str	r3, [r7, #0]
 800a96e:	4613      	mov	r3, r2
 800a970:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a972:	88fb      	ldrh	r3, [r7, #6]
 800a974:	009b      	lsls	r3, r3, #2
 800a976:	4618      	mov	r0, r3
 800a978:	f001 fdce 	bl	800c518 <pvPortMalloc>
 800a97c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a97e:	697b      	ldr	r3, [r7, #20]
 800a980:	2b00      	cmp	r3, #0
 800a982:	d00e      	beq.n	800a9a2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a984:	20a8      	movs	r0, #168	; 0xa8
 800a986:	f001 fdc7 	bl	800c518 <pvPortMalloc>
 800a98a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a98c:	69fb      	ldr	r3, [r7, #28]
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d003      	beq.n	800a99a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a992:	69fb      	ldr	r3, [r7, #28]
 800a994:	697a      	ldr	r2, [r7, #20]
 800a996:	631a      	str	r2, [r3, #48]	; 0x30
 800a998:	e005      	b.n	800a9a6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a99a:	6978      	ldr	r0, [r7, #20]
 800a99c:	f001 fe88 	bl	800c6b0 <vPortFree>
 800a9a0:	e001      	b.n	800a9a6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a9a2:	2300      	movs	r3, #0
 800a9a4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a9a6:	69fb      	ldr	r3, [r7, #28]
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d017      	beq.n	800a9dc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a9ac:	69fb      	ldr	r3, [r7, #28]
 800a9ae:	2200      	movs	r2, #0
 800a9b0:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a9b4:	88fa      	ldrh	r2, [r7, #6]
 800a9b6:	2300      	movs	r3, #0
 800a9b8:	9303      	str	r3, [sp, #12]
 800a9ba:	69fb      	ldr	r3, [r7, #28]
 800a9bc:	9302      	str	r3, [sp, #8]
 800a9be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9c0:	9301      	str	r3, [sp, #4]
 800a9c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9c4:	9300      	str	r3, [sp, #0]
 800a9c6:	683b      	ldr	r3, [r7, #0]
 800a9c8:	68b9      	ldr	r1, [r7, #8]
 800a9ca:	68f8      	ldr	r0, [r7, #12]
 800a9cc:	f000 f80e 	bl	800a9ec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a9d0:	69f8      	ldr	r0, [r7, #28]
 800a9d2:	f000 f8b1 	bl	800ab38 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a9d6:	2301      	movs	r3, #1
 800a9d8:	61bb      	str	r3, [r7, #24]
 800a9da:	e002      	b.n	800a9e2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a9dc:	f04f 33ff 	mov.w	r3, #4294967295
 800a9e0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a9e2:	69bb      	ldr	r3, [r7, #24]
	}
 800a9e4:	4618      	mov	r0, r3
 800a9e6:	3720      	adds	r7, #32
 800a9e8:	46bd      	mov	sp, r7
 800a9ea:	bd80      	pop	{r7, pc}

0800a9ec <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a9ec:	b580      	push	{r7, lr}
 800a9ee:	b088      	sub	sp, #32
 800a9f0:	af00      	add	r7, sp, #0
 800a9f2:	60f8      	str	r0, [r7, #12]
 800a9f4:	60b9      	str	r1, [r7, #8]
 800a9f6:	607a      	str	r2, [r7, #4]
 800a9f8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a9fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9fc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	009b      	lsls	r3, r3, #2
 800aa02:	461a      	mov	r2, r3
 800aa04:	21a5      	movs	r1, #165	; 0xa5
 800aa06:	f002 fd02 	bl	800d40e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800aa0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800aa0e:	6879      	ldr	r1, [r7, #4]
 800aa10:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800aa14:	440b      	add	r3, r1
 800aa16:	009b      	lsls	r3, r3, #2
 800aa18:	4413      	add	r3, r2
 800aa1a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800aa1c:	69bb      	ldr	r3, [r7, #24]
 800aa1e:	f023 0307 	bic.w	r3, r3, #7
 800aa22:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800aa24:	69bb      	ldr	r3, [r7, #24]
 800aa26:	f003 0307 	and.w	r3, r3, #7
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d00a      	beq.n	800aa44 <prvInitialiseNewTask+0x58>
	__asm volatile
 800aa2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa32:	f383 8811 	msr	BASEPRI, r3
 800aa36:	f3bf 8f6f 	isb	sy
 800aa3a:	f3bf 8f4f 	dsb	sy
 800aa3e:	617b      	str	r3, [r7, #20]
}
 800aa40:	bf00      	nop
 800aa42:	e7fe      	b.n	800aa42 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800aa44:	68bb      	ldr	r3, [r7, #8]
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d01f      	beq.n	800aa8a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800aa4a:	2300      	movs	r3, #0
 800aa4c:	61fb      	str	r3, [r7, #28]
 800aa4e:	e012      	b.n	800aa76 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800aa50:	68ba      	ldr	r2, [r7, #8]
 800aa52:	69fb      	ldr	r3, [r7, #28]
 800aa54:	4413      	add	r3, r2
 800aa56:	7819      	ldrb	r1, [r3, #0]
 800aa58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aa5a:	69fb      	ldr	r3, [r7, #28]
 800aa5c:	4413      	add	r3, r2
 800aa5e:	3334      	adds	r3, #52	; 0x34
 800aa60:	460a      	mov	r2, r1
 800aa62:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800aa64:	68ba      	ldr	r2, [r7, #8]
 800aa66:	69fb      	ldr	r3, [r7, #28]
 800aa68:	4413      	add	r3, r2
 800aa6a:	781b      	ldrb	r3, [r3, #0]
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d006      	beq.n	800aa7e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800aa70:	69fb      	ldr	r3, [r7, #28]
 800aa72:	3301      	adds	r3, #1
 800aa74:	61fb      	str	r3, [r7, #28]
 800aa76:	69fb      	ldr	r3, [r7, #28]
 800aa78:	2b0f      	cmp	r3, #15
 800aa7a:	d9e9      	bls.n	800aa50 <prvInitialiseNewTask+0x64>
 800aa7c:	e000      	b.n	800aa80 <prvInitialiseNewTask+0x94>
			{
				break;
 800aa7e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800aa80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa82:	2200      	movs	r2, #0
 800aa84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800aa88:	e003      	b.n	800aa92 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800aa8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa8c:	2200      	movs	r2, #0
 800aa8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800aa92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa94:	2b37      	cmp	r3, #55	; 0x37
 800aa96:	d901      	bls.n	800aa9c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800aa98:	2337      	movs	r3, #55	; 0x37
 800aa9a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800aa9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aaa0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800aaa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaa4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aaa6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800aaa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaaa:	2200      	movs	r2, #0
 800aaac:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800aaae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aab0:	3304      	adds	r3, #4
 800aab2:	4618      	mov	r0, r3
 800aab4:	f7fe fe56 	bl	8009764 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800aab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaba:	3318      	adds	r3, #24
 800aabc:	4618      	mov	r0, r3
 800aabe:	f7fe fe51 	bl	8009764 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800aac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aac4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aac6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaca:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800aace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aad0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800aad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aad4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aad6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800aad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aada:	2200      	movs	r2, #0
 800aadc:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800aae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aae2:	2200      	movs	r2, #0
 800aae4:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800aae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaea:	3354      	adds	r3, #84	; 0x54
 800aaec:	224c      	movs	r2, #76	; 0x4c
 800aaee:	2100      	movs	r1, #0
 800aaf0:	4618      	mov	r0, r3
 800aaf2:	f002 fc8c 	bl	800d40e <memset>
 800aaf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaf8:	4a0c      	ldr	r2, [pc, #48]	; (800ab2c <prvInitialiseNewTask+0x140>)
 800aafa:	659a      	str	r2, [r3, #88]	; 0x58
 800aafc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aafe:	4a0c      	ldr	r2, [pc, #48]	; (800ab30 <prvInitialiseNewTask+0x144>)
 800ab00:	65da      	str	r2, [r3, #92]	; 0x5c
 800ab02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab04:	4a0b      	ldr	r2, [pc, #44]	; (800ab34 <prvInitialiseNewTask+0x148>)
 800ab06:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ab08:	683a      	ldr	r2, [r7, #0]
 800ab0a:	68f9      	ldr	r1, [r7, #12]
 800ab0c:	69b8      	ldr	r0, [r7, #24]
 800ab0e:	f001 fab5 	bl	800c07c <pxPortInitialiseStack>
 800ab12:	4602      	mov	r2, r0
 800ab14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab16:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ab18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d002      	beq.n	800ab24 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ab1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ab22:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ab24:	bf00      	nop
 800ab26:	3720      	adds	r7, #32
 800ab28:	46bd      	mov	sp, r7
 800ab2a:	bd80      	pop	{r7, pc}
 800ab2c:	24005a30 	.word	0x24005a30
 800ab30:	24005a98 	.word	0x24005a98
 800ab34:	24005b00 	.word	0x24005b00

0800ab38 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ab38:	b580      	push	{r7, lr}
 800ab3a:	b082      	sub	sp, #8
 800ab3c:	af00      	add	r7, sp, #0
 800ab3e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ab40:	f001 fbc8 	bl	800c2d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ab44:	4b2d      	ldr	r3, [pc, #180]	; (800abfc <prvAddNewTaskToReadyList+0xc4>)
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	3301      	adds	r3, #1
 800ab4a:	4a2c      	ldr	r2, [pc, #176]	; (800abfc <prvAddNewTaskToReadyList+0xc4>)
 800ab4c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ab4e:	4b2c      	ldr	r3, [pc, #176]	; (800ac00 <prvAddNewTaskToReadyList+0xc8>)
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d109      	bne.n	800ab6a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ab56:	4a2a      	ldr	r2, [pc, #168]	; (800ac00 <prvAddNewTaskToReadyList+0xc8>)
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ab5c:	4b27      	ldr	r3, [pc, #156]	; (800abfc <prvAddNewTaskToReadyList+0xc4>)
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	2b01      	cmp	r3, #1
 800ab62:	d110      	bne.n	800ab86 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ab64:	f000 fc9c 	bl	800b4a0 <prvInitialiseTaskLists>
 800ab68:	e00d      	b.n	800ab86 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ab6a:	4b26      	ldr	r3, [pc, #152]	; (800ac04 <prvAddNewTaskToReadyList+0xcc>)
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d109      	bne.n	800ab86 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ab72:	4b23      	ldr	r3, [pc, #140]	; (800ac00 <prvAddNewTaskToReadyList+0xc8>)
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab7c:	429a      	cmp	r2, r3
 800ab7e:	d802      	bhi.n	800ab86 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ab80:	4a1f      	ldr	r2, [pc, #124]	; (800ac00 <prvAddNewTaskToReadyList+0xc8>)
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ab86:	4b20      	ldr	r3, [pc, #128]	; (800ac08 <prvAddNewTaskToReadyList+0xd0>)
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	3301      	adds	r3, #1
 800ab8c:	4a1e      	ldr	r2, [pc, #120]	; (800ac08 <prvAddNewTaskToReadyList+0xd0>)
 800ab8e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800ab90:	4b1d      	ldr	r3, [pc, #116]	; (800ac08 <prvAddNewTaskToReadyList+0xd0>)
 800ab92:	681a      	ldr	r2, [r3, #0]
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab9c:	4b1b      	ldr	r3, [pc, #108]	; (800ac0c <prvAddNewTaskToReadyList+0xd4>)
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	429a      	cmp	r2, r3
 800aba2:	d903      	bls.n	800abac <prvAddNewTaskToReadyList+0x74>
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aba8:	4a18      	ldr	r2, [pc, #96]	; (800ac0c <prvAddNewTaskToReadyList+0xd4>)
 800abaa:	6013      	str	r3, [r2, #0]
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800abb0:	4613      	mov	r3, r2
 800abb2:	009b      	lsls	r3, r3, #2
 800abb4:	4413      	add	r3, r2
 800abb6:	009b      	lsls	r3, r3, #2
 800abb8:	4a15      	ldr	r2, [pc, #84]	; (800ac10 <prvAddNewTaskToReadyList+0xd8>)
 800abba:	441a      	add	r2, r3
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	3304      	adds	r3, #4
 800abc0:	4619      	mov	r1, r3
 800abc2:	4610      	mov	r0, r2
 800abc4:	f7fe fddb 	bl	800977e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800abc8:	f001 fbb4 	bl	800c334 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800abcc:	4b0d      	ldr	r3, [pc, #52]	; (800ac04 <prvAddNewTaskToReadyList+0xcc>)
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d00e      	beq.n	800abf2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800abd4:	4b0a      	ldr	r3, [pc, #40]	; (800ac00 <prvAddNewTaskToReadyList+0xc8>)
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abde:	429a      	cmp	r2, r3
 800abe0:	d207      	bcs.n	800abf2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800abe2:	4b0c      	ldr	r3, [pc, #48]	; (800ac14 <prvAddNewTaskToReadyList+0xdc>)
 800abe4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800abe8:	601a      	str	r2, [r3, #0]
 800abea:	f3bf 8f4f 	dsb	sy
 800abee:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800abf2:	bf00      	nop
 800abf4:	3708      	adds	r7, #8
 800abf6:	46bd      	mov	sp, r7
 800abf8:	bd80      	pop	{r7, pc}
 800abfa:	bf00      	nop
 800abfc:	24001cb0 	.word	0x24001cb0
 800ac00:	240017dc 	.word	0x240017dc
 800ac04:	24001cbc 	.word	0x24001cbc
 800ac08:	24001ccc 	.word	0x24001ccc
 800ac0c:	24001cb8 	.word	0x24001cb8
 800ac10:	240017e0 	.word	0x240017e0
 800ac14:	e000ed04 	.word	0xe000ed04

0800ac18 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ac18:	b580      	push	{r7, lr}
 800ac1a:	b084      	sub	sp, #16
 800ac1c:	af00      	add	r7, sp, #0
 800ac1e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ac20:	2300      	movs	r3, #0
 800ac22:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d017      	beq.n	800ac5a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ac2a:	4b13      	ldr	r3, [pc, #76]	; (800ac78 <vTaskDelay+0x60>)
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d00a      	beq.n	800ac48 <vTaskDelay+0x30>
	__asm volatile
 800ac32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac36:	f383 8811 	msr	BASEPRI, r3
 800ac3a:	f3bf 8f6f 	isb	sy
 800ac3e:	f3bf 8f4f 	dsb	sy
 800ac42:	60bb      	str	r3, [r7, #8]
}
 800ac44:	bf00      	nop
 800ac46:	e7fe      	b.n	800ac46 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800ac48:	f000 f900 	bl	800ae4c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800ac4c:	2100      	movs	r1, #0
 800ac4e:	6878      	ldr	r0, [r7, #4]
 800ac50:	f000 fe72 	bl	800b938 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800ac54:	f000 f908 	bl	800ae68 <xTaskResumeAll>
 800ac58:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d107      	bne.n	800ac70 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800ac60:	4b06      	ldr	r3, [pc, #24]	; (800ac7c <vTaskDelay+0x64>)
 800ac62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac66:	601a      	str	r2, [r3, #0]
 800ac68:	f3bf 8f4f 	dsb	sy
 800ac6c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ac70:	bf00      	nop
 800ac72:	3710      	adds	r7, #16
 800ac74:	46bd      	mov	sp, r7
 800ac76:	bd80      	pop	{r7, pc}
 800ac78:	24001cd8 	.word	0x24001cd8
 800ac7c:	e000ed04 	.word	0xe000ed04

0800ac80 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800ac80:	b580      	push	{r7, lr}
 800ac82:	b084      	sub	sp, #16
 800ac84:	af00      	add	r7, sp, #0
 800ac86:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800ac88:	f001 fb24 	bl	800c2d4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d102      	bne.n	800ac98 <vTaskSuspend+0x18>
 800ac92:	4b30      	ldr	r3, [pc, #192]	; (800ad54 <vTaskSuspend+0xd4>)
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	e000      	b.n	800ac9a <vTaskSuspend+0x1a>
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	3304      	adds	r3, #4
 800aca0:	4618      	mov	r0, r3
 800aca2:	f7fe fdc9 	bl	8009838 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d004      	beq.n	800acb8 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	3318      	adds	r3, #24
 800acb2:	4618      	mov	r0, r3
 800acb4:	f7fe fdc0 	bl	8009838 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	3304      	adds	r3, #4
 800acbc:	4619      	mov	r1, r3
 800acbe:	4826      	ldr	r0, [pc, #152]	; (800ad58 <vTaskSuspend+0xd8>)
 800acc0:	f7fe fd5d 	bl	800977e <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 800acca:	b2db      	uxtb	r3, r3
 800accc:	2b01      	cmp	r3, #1
 800acce:	d103      	bne.n	800acd8 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	2200      	movs	r2, #0
 800acd4:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800acd8:	f001 fb2c 	bl	800c334 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800acdc:	4b1f      	ldr	r3, [pc, #124]	; (800ad5c <vTaskSuspend+0xdc>)
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d005      	beq.n	800acf0 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800ace4:	f001 faf6 	bl	800c2d4 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800ace8:	f000 fc7c 	bl	800b5e4 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800acec:	f001 fb22 	bl	800c334 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800acf0:	4b18      	ldr	r3, [pc, #96]	; (800ad54 <vTaskSuspend+0xd4>)
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	68fa      	ldr	r2, [r7, #12]
 800acf6:	429a      	cmp	r2, r3
 800acf8:	d127      	bne.n	800ad4a <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 800acfa:	4b18      	ldr	r3, [pc, #96]	; (800ad5c <vTaskSuspend+0xdc>)
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d017      	beq.n	800ad32 <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800ad02:	4b17      	ldr	r3, [pc, #92]	; (800ad60 <vTaskSuspend+0xe0>)
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d00a      	beq.n	800ad20 <vTaskSuspend+0xa0>
	__asm volatile
 800ad0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad0e:	f383 8811 	msr	BASEPRI, r3
 800ad12:	f3bf 8f6f 	isb	sy
 800ad16:	f3bf 8f4f 	dsb	sy
 800ad1a:	60bb      	str	r3, [r7, #8]
}
 800ad1c:	bf00      	nop
 800ad1e:	e7fe      	b.n	800ad1e <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 800ad20:	4b10      	ldr	r3, [pc, #64]	; (800ad64 <vTaskSuspend+0xe4>)
 800ad22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad26:	601a      	str	r2, [r3, #0]
 800ad28:	f3bf 8f4f 	dsb	sy
 800ad2c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ad30:	e00b      	b.n	800ad4a <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800ad32:	4b09      	ldr	r3, [pc, #36]	; (800ad58 <vTaskSuspend+0xd8>)
 800ad34:	681a      	ldr	r2, [r3, #0]
 800ad36:	4b0c      	ldr	r3, [pc, #48]	; (800ad68 <vTaskSuspend+0xe8>)
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	429a      	cmp	r2, r3
 800ad3c:	d103      	bne.n	800ad46 <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 800ad3e:	4b05      	ldr	r3, [pc, #20]	; (800ad54 <vTaskSuspend+0xd4>)
 800ad40:	2200      	movs	r2, #0
 800ad42:	601a      	str	r2, [r3, #0]
	}
 800ad44:	e001      	b.n	800ad4a <vTaskSuspend+0xca>
					vTaskSwitchContext();
 800ad46:	f000 f9f7 	bl	800b138 <vTaskSwitchContext>
	}
 800ad4a:	bf00      	nop
 800ad4c:	3710      	adds	r7, #16
 800ad4e:	46bd      	mov	sp, r7
 800ad50:	bd80      	pop	{r7, pc}
 800ad52:	bf00      	nop
 800ad54:	240017dc 	.word	0x240017dc
 800ad58:	24001c9c 	.word	0x24001c9c
 800ad5c:	24001cbc 	.word	0x24001cbc
 800ad60:	24001cd8 	.word	0x24001cd8
 800ad64:	e000ed04 	.word	0xe000ed04
 800ad68:	24001cb0 	.word	0x24001cb0

0800ad6c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ad6c:	b580      	push	{r7, lr}
 800ad6e:	b08a      	sub	sp, #40	; 0x28
 800ad70:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ad72:	2300      	movs	r3, #0
 800ad74:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ad76:	2300      	movs	r3, #0
 800ad78:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ad7a:	463a      	mov	r2, r7
 800ad7c:	1d39      	adds	r1, r7, #4
 800ad7e:	f107 0308 	add.w	r3, r7, #8
 800ad82:	4618      	mov	r0, r3
 800ad84:	f7fe fc9a 	bl	80096bc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ad88:	6839      	ldr	r1, [r7, #0]
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	68ba      	ldr	r2, [r7, #8]
 800ad8e:	9202      	str	r2, [sp, #8]
 800ad90:	9301      	str	r3, [sp, #4]
 800ad92:	2300      	movs	r3, #0
 800ad94:	9300      	str	r3, [sp, #0]
 800ad96:	2300      	movs	r3, #0
 800ad98:	460a      	mov	r2, r1
 800ad9a:	4924      	ldr	r1, [pc, #144]	; (800ae2c <vTaskStartScheduler+0xc0>)
 800ad9c:	4824      	ldr	r0, [pc, #144]	; (800ae30 <vTaskStartScheduler+0xc4>)
 800ad9e:	f7ff fd83 	bl	800a8a8 <xTaskCreateStatic>
 800ada2:	4603      	mov	r3, r0
 800ada4:	4a23      	ldr	r2, [pc, #140]	; (800ae34 <vTaskStartScheduler+0xc8>)
 800ada6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ada8:	4b22      	ldr	r3, [pc, #136]	; (800ae34 <vTaskStartScheduler+0xc8>)
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	2b00      	cmp	r3, #0
 800adae:	d002      	beq.n	800adb6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800adb0:	2301      	movs	r3, #1
 800adb2:	617b      	str	r3, [r7, #20]
 800adb4:	e001      	b.n	800adba <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800adb6:	2300      	movs	r3, #0
 800adb8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800adba:	697b      	ldr	r3, [r7, #20]
 800adbc:	2b01      	cmp	r3, #1
 800adbe:	d102      	bne.n	800adc6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800adc0:	f000 fe0e 	bl	800b9e0 <xTimerCreateTimerTask>
 800adc4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800adc6:	697b      	ldr	r3, [r7, #20]
 800adc8:	2b01      	cmp	r3, #1
 800adca:	d11b      	bne.n	800ae04 <vTaskStartScheduler+0x98>
	__asm volatile
 800adcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800add0:	f383 8811 	msr	BASEPRI, r3
 800add4:	f3bf 8f6f 	isb	sy
 800add8:	f3bf 8f4f 	dsb	sy
 800addc:	613b      	str	r3, [r7, #16]
}
 800adde:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ade0:	4b15      	ldr	r3, [pc, #84]	; (800ae38 <vTaskStartScheduler+0xcc>)
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	3354      	adds	r3, #84	; 0x54
 800ade6:	4a15      	ldr	r2, [pc, #84]	; (800ae3c <vTaskStartScheduler+0xd0>)
 800ade8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800adea:	4b15      	ldr	r3, [pc, #84]	; (800ae40 <vTaskStartScheduler+0xd4>)
 800adec:	f04f 32ff 	mov.w	r2, #4294967295
 800adf0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800adf2:	4b14      	ldr	r3, [pc, #80]	; (800ae44 <vTaskStartScheduler+0xd8>)
 800adf4:	2201      	movs	r2, #1
 800adf6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800adf8:	4b13      	ldr	r3, [pc, #76]	; (800ae48 <vTaskStartScheduler+0xdc>)
 800adfa:	2200      	movs	r2, #0
 800adfc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800adfe:	f001 f9c7 	bl	800c190 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ae02:	e00e      	b.n	800ae22 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ae04:	697b      	ldr	r3, [r7, #20]
 800ae06:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae0a:	d10a      	bne.n	800ae22 <vTaskStartScheduler+0xb6>
	__asm volatile
 800ae0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae10:	f383 8811 	msr	BASEPRI, r3
 800ae14:	f3bf 8f6f 	isb	sy
 800ae18:	f3bf 8f4f 	dsb	sy
 800ae1c:	60fb      	str	r3, [r7, #12]
}
 800ae1e:	bf00      	nop
 800ae20:	e7fe      	b.n	800ae20 <vTaskStartScheduler+0xb4>
}
 800ae22:	bf00      	nop
 800ae24:	3718      	adds	r7, #24
 800ae26:	46bd      	mov	sp, r7
 800ae28:	bd80      	pop	{r7, pc}
 800ae2a:	bf00      	nop
 800ae2c:	0800f710 	.word	0x0800f710
 800ae30:	0800b471 	.word	0x0800b471
 800ae34:	24001cd4 	.word	0x24001cd4
 800ae38:	240017dc 	.word	0x240017dc
 800ae3c:	24000074 	.word	0x24000074
 800ae40:	24001cd0 	.word	0x24001cd0
 800ae44:	24001cbc 	.word	0x24001cbc
 800ae48:	24001cb4 	.word	0x24001cb4

0800ae4c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ae4c:	b480      	push	{r7}
 800ae4e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800ae50:	4b04      	ldr	r3, [pc, #16]	; (800ae64 <vTaskSuspendAll+0x18>)
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	3301      	adds	r3, #1
 800ae56:	4a03      	ldr	r2, [pc, #12]	; (800ae64 <vTaskSuspendAll+0x18>)
 800ae58:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800ae5a:	bf00      	nop
 800ae5c:	46bd      	mov	sp, r7
 800ae5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae62:	4770      	bx	lr
 800ae64:	24001cd8 	.word	0x24001cd8

0800ae68 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ae68:	b580      	push	{r7, lr}
 800ae6a:	b084      	sub	sp, #16
 800ae6c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ae6e:	2300      	movs	r3, #0
 800ae70:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ae72:	2300      	movs	r3, #0
 800ae74:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ae76:	4b42      	ldr	r3, [pc, #264]	; (800af80 <xTaskResumeAll+0x118>)
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d10a      	bne.n	800ae94 <xTaskResumeAll+0x2c>
	__asm volatile
 800ae7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae82:	f383 8811 	msr	BASEPRI, r3
 800ae86:	f3bf 8f6f 	isb	sy
 800ae8a:	f3bf 8f4f 	dsb	sy
 800ae8e:	603b      	str	r3, [r7, #0]
}
 800ae90:	bf00      	nop
 800ae92:	e7fe      	b.n	800ae92 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ae94:	f001 fa1e 	bl	800c2d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ae98:	4b39      	ldr	r3, [pc, #228]	; (800af80 <xTaskResumeAll+0x118>)
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	3b01      	subs	r3, #1
 800ae9e:	4a38      	ldr	r2, [pc, #224]	; (800af80 <xTaskResumeAll+0x118>)
 800aea0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aea2:	4b37      	ldr	r3, [pc, #220]	; (800af80 <xTaskResumeAll+0x118>)
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d162      	bne.n	800af70 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800aeaa:	4b36      	ldr	r3, [pc, #216]	; (800af84 <xTaskResumeAll+0x11c>)
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d05e      	beq.n	800af70 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800aeb2:	e02f      	b.n	800af14 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aeb4:	4b34      	ldr	r3, [pc, #208]	; (800af88 <xTaskResumeAll+0x120>)
 800aeb6:	68db      	ldr	r3, [r3, #12]
 800aeb8:	68db      	ldr	r3, [r3, #12]
 800aeba:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	3318      	adds	r3, #24
 800aec0:	4618      	mov	r0, r3
 800aec2:	f7fe fcb9 	bl	8009838 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	3304      	adds	r3, #4
 800aeca:	4618      	mov	r0, r3
 800aecc:	f7fe fcb4 	bl	8009838 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aed4:	4b2d      	ldr	r3, [pc, #180]	; (800af8c <xTaskResumeAll+0x124>)
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	429a      	cmp	r2, r3
 800aeda:	d903      	bls.n	800aee4 <xTaskResumeAll+0x7c>
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aee0:	4a2a      	ldr	r2, [pc, #168]	; (800af8c <xTaskResumeAll+0x124>)
 800aee2:	6013      	str	r3, [r2, #0]
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aee8:	4613      	mov	r3, r2
 800aeea:	009b      	lsls	r3, r3, #2
 800aeec:	4413      	add	r3, r2
 800aeee:	009b      	lsls	r3, r3, #2
 800aef0:	4a27      	ldr	r2, [pc, #156]	; (800af90 <xTaskResumeAll+0x128>)
 800aef2:	441a      	add	r2, r3
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	3304      	adds	r3, #4
 800aef8:	4619      	mov	r1, r3
 800aefa:	4610      	mov	r0, r2
 800aefc:	f7fe fc3f 	bl	800977e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af04:	4b23      	ldr	r3, [pc, #140]	; (800af94 <xTaskResumeAll+0x12c>)
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af0a:	429a      	cmp	r2, r3
 800af0c:	d302      	bcc.n	800af14 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800af0e:	4b22      	ldr	r3, [pc, #136]	; (800af98 <xTaskResumeAll+0x130>)
 800af10:	2201      	movs	r2, #1
 800af12:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800af14:	4b1c      	ldr	r3, [pc, #112]	; (800af88 <xTaskResumeAll+0x120>)
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d1cb      	bne.n	800aeb4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d001      	beq.n	800af26 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800af22:	f000 fb5f 	bl	800b5e4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800af26:	4b1d      	ldr	r3, [pc, #116]	; (800af9c <xTaskResumeAll+0x134>)
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d010      	beq.n	800af54 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800af32:	f000 f847 	bl	800afc4 <xTaskIncrementTick>
 800af36:	4603      	mov	r3, r0
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d002      	beq.n	800af42 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800af3c:	4b16      	ldr	r3, [pc, #88]	; (800af98 <xTaskResumeAll+0x130>)
 800af3e:	2201      	movs	r2, #1
 800af40:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	3b01      	subs	r3, #1
 800af46:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d1f1      	bne.n	800af32 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800af4e:	4b13      	ldr	r3, [pc, #76]	; (800af9c <xTaskResumeAll+0x134>)
 800af50:	2200      	movs	r2, #0
 800af52:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800af54:	4b10      	ldr	r3, [pc, #64]	; (800af98 <xTaskResumeAll+0x130>)
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d009      	beq.n	800af70 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800af5c:	2301      	movs	r3, #1
 800af5e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800af60:	4b0f      	ldr	r3, [pc, #60]	; (800afa0 <xTaskResumeAll+0x138>)
 800af62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af66:	601a      	str	r2, [r3, #0]
 800af68:	f3bf 8f4f 	dsb	sy
 800af6c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800af70:	f001 f9e0 	bl	800c334 <vPortExitCritical>

	return xAlreadyYielded;
 800af74:	68bb      	ldr	r3, [r7, #8]
}
 800af76:	4618      	mov	r0, r3
 800af78:	3710      	adds	r7, #16
 800af7a:	46bd      	mov	sp, r7
 800af7c:	bd80      	pop	{r7, pc}
 800af7e:	bf00      	nop
 800af80:	24001cd8 	.word	0x24001cd8
 800af84:	24001cb0 	.word	0x24001cb0
 800af88:	24001c70 	.word	0x24001c70
 800af8c:	24001cb8 	.word	0x24001cb8
 800af90:	240017e0 	.word	0x240017e0
 800af94:	240017dc 	.word	0x240017dc
 800af98:	24001cc4 	.word	0x24001cc4
 800af9c:	24001cc0 	.word	0x24001cc0
 800afa0:	e000ed04 	.word	0xe000ed04

0800afa4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800afa4:	b480      	push	{r7}
 800afa6:	b083      	sub	sp, #12
 800afa8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800afaa:	4b05      	ldr	r3, [pc, #20]	; (800afc0 <xTaskGetTickCount+0x1c>)
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800afb0:	687b      	ldr	r3, [r7, #4]
}
 800afb2:	4618      	mov	r0, r3
 800afb4:	370c      	adds	r7, #12
 800afb6:	46bd      	mov	sp, r7
 800afb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afbc:	4770      	bx	lr
 800afbe:	bf00      	nop
 800afc0:	24001cb4 	.word	0x24001cb4

0800afc4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800afc4:	b580      	push	{r7, lr}
 800afc6:	b086      	sub	sp, #24
 800afc8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800afca:	2300      	movs	r3, #0
 800afcc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800afce:	4b4f      	ldr	r3, [pc, #316]	; (800b10c <xTaskIncrementTick+0x148>)
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	f040 808f 	bne.w	800b0f6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800afd8:	4b4d      	ldr	r3, [pc, #308]	; (800b110 <xTaskIncrementTick+0x14c>)
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	3301      	adds	r3, #1
 800afde:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800afe0:	4a4b      	ldr	r2, [pc, #300]	; (800b110 <xTaskIncrementTick+0x14c>)
 800afe2:	693b      	ldr	r3, [r7, #16]
 800afe4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800afe6:	693b      	ldr	r3, [r7, #16]
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d120      	bne.n	800b02e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800afec:	4b49      	ldr	r3, [pc, #292]	; (800b114 <xTaskIncrementTick+0x150>)
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d00a      	beq.n	800b00c <xTaskIncrementTick+0x48>
	__asm volatile
 800aff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800affa:	f383 8811 	msr	BASEPRI, r3
 800affe:	f3bf 8f6f 	isb	sy
 800b002:	f3bf 8f4f 	dsb	sy
 800b006:	603b      	str	r3, [r7, #0]
}
 800b008:	bf00      	nop
 800b00a:	e7fe      	b.n	800b00a <xTaskIncrementTick+0x46>
 800b00c:	4b41      	ldr	r3, [pc, #260]	; (800b114 <xTaskIncrementTick+0x150>)
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	60fb      	str	r3, [r7, #12]
 800b012:	4b41      	ldr	r3, [pc, #260]	; (800b118 <xTaskIncrementTick+0x154>)
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	4a3f      	ldr	r2, [pc, #252]	; (800b114 <xTaskIncrementTick+0x150>)
 800b018:	6013      	str	r3, [r2, #0]
 800b01a:	4a3f      	ldr	r2, [pc, #252]	; (800b118 <xTaskIncrementTick+0x154>)
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	6013      	str	r3, [r2, #0]
 800b020:	4b3e      	ldr	r3, [pc, #248]	; (800b11c <xTaskIncrementTick+0x158>)
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	3301      	adds	r3, #1
 800b026:	4a3d      	ldr	r2, [pc, #244]	; (800b11c <xTaskIncrementTick+0x158>)
 800b028:	6013      	str	r3, [r2, #0]
 800b02a:	f000 fadb 	bl	800b5e4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b02e:	4b3c      	ldr	r3, [pc, #240]	; (800b120 <xTaskIncrementTick+0x15c>)
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	693a      	ldr	r2, [r7, #16]
 800b034:	429a      	cmp	r2, r3
 800b036:	d349      	bcc.n	800b0cc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b038:	4b36      	ldr	r3, [pc, #216]	; (800b114 <xTaskIncrementTick+0x150>)
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d104      	bne.n	800b04c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b042:	4b37      	ldr	r3, [pc, #220]	; (800b120 <xTaskIncrementTick+0x15c>)
 800b044:	f04f 32ff 	mov.w	r2, #4294967295
 800b048:	601a      	str	r2, [r3, #0]
					break;
 800b04a:	e03f      	b.n	800b0cc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b04c:	4b31      	ldr	r3, [pc, #196]	; (800b114 <xTaskIncrementTick+0x150>)
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	68db      	ldr	r3, [r3, #12]
 800b052:	68db      	ldr	r3, [r3, #12]
 800b054:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b056:	68bb      	ldr	r3, [r7, #8]
 800b058:	685b      	ldr	r3, [r3, #4]
 800b05a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b05c:	693a      	ldr	r2, [r7, #16]
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	429a      	cmp	r2, r3
 800b062:	d203      	bcs.n	800b06c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b064:	4a2e      	ldr	r2, [pc, #184]	; (800b120 <xTaskIncrementTick+0x15c>)
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b06a:	e02f      	b.n	800b0cc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b06c:	68bb      	ldr	r3, [r7, #8]
 800b06e:	3304      	adds	r3, #4
 800b070:	4618      	mov	r0, r3
 800b072:	f7fe fbe1 	bl	8009838 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b076:	68bb      	ldr	r3, [r7, #8]
 800b078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d004      	beq.n	800b088 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b07e:	68bb      	ldr	r3, [r7, #8]
 800b080:	3318      	adds	r3, #24
 800b082:	4618      	mov	r0, r3
 800b084:	f7fe fbd8 	bl	8009838 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b088:	68bb      	ldr	r3, [r7, #8]
 800b08a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b08c:	4b25      	ldr	r3, [pc, #148]	; (800b124 <xTaskIncrementTick+0x160>)
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	429a      	cmp	r2, r3
 800b092:	d903      	bls.n	800b09c <xTaskIncrementTick+0xd8>
 800b094:	68bb      	ldr	r3, [r7, #8]
 800b096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b098:	4a22      	ldr	r2, [pc, #136]	; (800b124 <xTaskIncrementTick+0x160>)
 800b09a:	6013      	str	r3, [r2, #0]
 800b09c:	68bb      	ldr	r3, [r7, #8]
 800b09e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0a0:	4613      	mov	r3, r2
 800b0a2:	009b      	lsls	r3, r3, #2
 800b0a4:	4413      	add	r3, r2
 800b0a6:	009b      	lsls	r3, r3, #2
 800b0a8:	4a1f      	ldr	r2, [pc, #124]	; (800b128 <xTaskIncrementTick+0x164>)
 800b0aa:	441a      	add	r2, r3
 800b0ac:	68bb      	ldr	r3, [r7, #8]
 800b0ae:	3304      	adds	r3, #4
 800b0b0:	4619      	mov	r1, r3
 800b0b2:	4610      	mov	r0, r2
 800b0b4:	f7fe fb63 	bl	800977e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b0b8:	68bb      	ldr	r3, [r7, #8]
 800b0ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0bc:	4b1b      	ldr	r3, [pc, #108]	; (800b12c <xTaskIncrementTick+0x168>)
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0c2:	429a      	cmp	r2, r3
 800b0c4:	d3b8      	bcc.n	800b038 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800b0c6:	2301      	movs	r3, #1
 800b0c8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b0ca:	e7b5      	b.n	800b038 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b0cc:	4b17      	ldr	r3, [pc, #92]	; (800b12c <xTaskIncrementTick+0x168>)
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0d2:	4915      	ldr	r1, [pc, #84]	; (800b128 <xTaskIncrementTick+0x164>)
 800b0d4:	4613      	mov	r3, r2
 800b0d6:	009b      	lsls	r3, r3, #2
 800b0d8:	4413      	add	r3, r2
 800b0da:	009b      	lsls	r3, r3, #2
 800b0dc:	440b      	add	r3, r1
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	2b01      	cmp	r3, #1
 800b0e2:	d901      	bls.n	800b0e8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800b0e4:	2301      	movs	r3, #1
 800b0e6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b0e8:	4b11      	ldr	r3, [pc, #68]	; (800b130 <xTaskIncrementTick+0x16c>)
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d007      	beq.n	800b100 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800b0f0:	2301      	movs	r3, #1
 800b0f2:	617b      	str	r3, [r7, #20]
 800b0f4:	e004      	b.n	800b100 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b0f6:	4b0f      	ldr	r3, [pc, #60]	; (800b134 <xTaskIncrementTick+0x170>)
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	3301      	adds	r3, #1
 800b0fc:	4a0d      	ldr	r2, [pc, #52]	; (800b134 <xTaskIncrementTick+0x170>)
 800b0fe:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b100:	697b      	ldr	r3, [r7, #20]
}
 800b102:	4618      	mov	r0, r3
 800b104:	3718      	adds	r7, #24
 800b106:	46bd      	mov	sp, r7
 800b108:	bd80      	pop	{r7, pc}
 800b10a:	bf00      	nop
 800b10c:	24001cd8 	.word	0x24001cd8
 800b110:	24001cb4 	.word	0x24001cb4
 800b114:	24001c68 	.word	0x24001c68
 800b118:	24001c6c 	.word	0x24001c6c
 800b11c:	24001cc8 	.word	0x24001cc8
 800b120:	24001cd0 	.word	0x24001cd0
 800b124:	24001cb8 	.word	0x24001cb8
 800b128:	240017e0 	.word	0x240017e0
 800b12c:	240017dc 	.word	0x240017dc
 800b130:	24001cc4 	.word	0x24001cc4
 800b134:	24001cc0 	.word	0x24001cc0

0800b138 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b138:	b480      	push	{r7}
 800b13a:	b085      	sub	sp, #20
 800b13c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b13e:	4b2a      	ldr	r3, [pc, #168]	; (800b1e8 <vTaskSwitchContext+0xb0>)
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	2b00      	cmp	r3, #0
 800b144:	d003      	beq.n	800b14e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b146:	4b29      	ldr	r3, [pc, #164]	; (800b1ec <vTaskSwitchContext+0xb4>)
 800b148:	2201      	movs	r2, #1
 800b14a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b14c:	e046      	b.n	800b1dc <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800b14e:	4b27      	ldr	r3, [pc, #156]	; (800b1ec <vTaskSwitchContext+0xb4>)
 800b150:	2200      	movs	r2, #0
 800b152:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b154:	4b26      	ldr	r3, [pc, #152]	; (800b1f0 <vTaskSwitchContext+0xb8>)
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	60fb      	str	r3, [r7, #12]
 800b15a:	e010      	b.n	800b17e <vTaskSwitchContext+0x46>
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d10a      	bne.n	800b178 <vTaskSwitchContext+0x40>
	__asm volatile
 800b162:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b166:	f383 8811 	msr	BASEPRI, r3
 800b16a:	f3bf 8f6f 	isb	sy
 800b16e:	f3bf 8f4f 	dsb	sy
 800b172:	607b      	str	r3, [r7, #4]
}
 800b174:	bf00      	nop
 800b176:	e7fe      	b.n	800b176 <vTaskSwitchContext+0x3e>
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	3b01      	subs	r3, #1
 800b17c:	60fb      	str	r3, [r7, #12]
 800b17e:	491d      	ldr	r1, [pc, #116]	; (800b1f4 <vTaskSwitchContext+0xbc>)
 800b180:	68fa      	ldr	r2, [r7, #12]
 800b182:	4613      	mov	r3, r2
 800b184:	009b      	lsls	r3, r3, #2
 800b186:	4413      	add	r3, r2
 800b188:	009b      	lsls	r3, r3, #2
 800b18a:	440b      	add	r3, r1
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d0e4      	beq.n	800b15c <vTaskSwitchContext+0x24>
 800b192:	68fa      	ldr	r2, [r7, #12]
 800b194:	4613      	mov	r3, r2
 800b196:	009b      	lsls	r3, r3, #2
 800b198:	4413      	add	r3, r2
 800b19a:	009b      	lsls	r3, r3, #2
 800b19c:	4a15      	ldr	r2, [pc, #84]	; (800b1f4 <vTaskSwitchContext+0xbc>)
 800b19e:	4413      	add	r3, r2
 800b1a0:	60bb      	str	r3, [r7, #8]
 800b1a2:	68bb      	ldr	r3, [r7, #8]
 800b1a4:	685b      	ldr	r3, [r3, #4]
 800b1a6:	685a      	ldr	r2, [r3, #4]
 800b1a8:	68bb      	ldr	r3, [r7, #8]
 800b1aa:	605a      	str	r2, [r3, #4]
 800b1ac:	68bb      	ldr	r3, [r7, #8]
 800b1ae:	685a      	ldr	r2, [r3, #4]
 800b1b0:	68bb      	ldr	r3, [r7, #8]
 800b1b2:	3308      	adds	r3, #8
 800b1b4:	429a      	cmp	r2, r3
 800b1b6:	d104      	bne.n	800b1c2 <vTaskSwitchContext+0x8a>
 800b1b8:	68bb      	ldr	r3, [r7, #8]
 800b1ba:	685b      	ldr	r3, [r3, #4]
 800b1bc:	685a      	ldr	r2, [r3, #4]
 800b1be:	68bb      	ldr	r3, [r7, #8]
 800b1c0:	605a      	str	r2, [r3, #4]
 800b1c2:	68bb      	ldr	r3, [r7, #8]
 800b1c4:	685b      	ldr	r3, [r3, #4]
 800b1c6:	68db      	ldr	r3, [r3, #12]
 800b1c8:	4a0b      	ldr	r2, [pc, #44]	; (800b1f8 <vTaskSwitchContext+0xc0>)
 800b1ca:	6013      	str	r3, [r2, #0]
 800b1cc:	4a08      	ldr	r2, [pc, #32]	; (800b1f0 <vTaskSwitchContext+0xb8>)
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b1d2:	4b09      	ldr	r3, [pc, #36]	; (800b1f8 <vTaskSwitchContext+0xc0>)
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	3354      	adds	r3, #84	; 0x54
 800b1d8:	4a08      	ldr	r2, [pc, #32]	; (800b1fc <vTaskSwitchContext+0xc4>)
 800b1da:	6013      	str	r3, [r2, #0]
}
 800b1dc:	bf00      	nop
 800b1de:	3714      	adds	r7, #20
 800b1e0:	46bd      	mov	sp, r7
 800b1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e6:	4770      	bx	lr
 800b1e8:	24001cd8 	.word	0x24001cd8
 800b1ec:	24001cc4 	.word	0x24001cc4
 800b1f0:	24001cb8 	.word	0x24001cb8
 800b1f4:	240017e0 	.word	0x240017e0
 800b1f8:	240017dc 	.word	0x240017dc
 800b1fc:	24000074 	.word	0x24000074

0800b200 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b200:	b580      	push	{r7, lr}
 800b202:	b084      	sub	sp, #16
 800b204:	af00      	add	r7, sp, #0
 800b206:	6078      	str	r0, [r7, #4]
 800b208:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d10a      	bne.n	800b226 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800b210:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b214:	f383 8811 	msr	BASEPRI, r3
 800b218:	f3bf 8f6f 	isb	sy
 800b21c:	f3bf 8f4f 	dsb	sy
 800b220:	60fb      	str	r3, [r7, #12]
}
 800b222:	bf00      	nop
 800b224:	e7fe      	b.n	800b224 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b226:	4b07      	ldr	r3, [pc, #28]	; (800b244 <vTaskPlaceOnEventList+0x44>)
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	3318      	adds	r3, #24
 800b22c:	4619      	mov	r1, r3
 800b22e:	6878      	ldr	r0, [r7, #4]
 800b230:	f7fe fac9 	bl	80097c6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b234:	2101      	movs	r1, #1
 800b236:	6838      	ldr	r0, [r7, #0]
 800b238:	f000 fb7e 	bl	800b938 <prvAddCurrentTaskToDelayedList>
}
 800b23c:	bf00      	nop
 800b23e:	3710      	adds	r7, #16
 800b240:	46bd      	mov	sp, r7
 800b242:	bd80      	pop	{r7, pc}
 800b244:	240017dc 	.word	0x240017dc

0800b248 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b248:	b580      	push	{r7, lr}
 800b24a:	b086      	sub	sp, #24
 800b24c:	af00      	add	r7, sp, #0
 800b24e:	60f8      	str	r0, [r7, #12]
 800b250:	60b9      	str	r1, [r7, #8]
 800b252:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	2b00      	cmp	r3, #0
 800b258:	d10a      	bne.n	800b270 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800b25a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b25e:	f383 8811 	msr	BASEPRI, r3
 800b262:	f3bf 8f6f 	isb	sy
 800b266:	f3bf 8f4f 	dsb	sy
 800b26a:	617b      	str	r3, [r7, #20]
}
 800b26c:	bf00      	nop
 800b26e:	e7fe      	b.n	800b26e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b270:	4b0a      	ldr	r3, [pc, #40]	; (800b29c <vTaskPlaceOnEventListRestricted+0x54>)
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	3318      	adds	r3, #24
 800b276:	4619      	mov	r1, r3
 800b278:	68f8      	ldr	r0, [r7, #12]
 800b27a:	f7fe fa80 	bl	800977e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	2b00      	cmp	r3, #0
 800b282:	d002      	beq.n	800b28a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800b284:	f04f 33ff 	mov.w	r3, #4294967295
 800b288:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b28a:	6879      	ldr	r1, [r7, #4]
 800b28c:	68b8      	ldr	r0, [r7, #8]
 800b28e:	f000 fb53 	bl	800b938 <prvAddCurrentTaskToDelayedList>
	}
 800b292:	bf00      	nop
 800b294:	3718      	adds	r7, #24
 800b296:	46bd      	mov	sp, r7
 800b298:	bd80      	pop	{r7, pc}
 800b29a:	bf00      	nop
 800b29c:	240017dc 	.word	0x240017dc

0800b2a0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b2a0:	b580      	push	{r7, lr}
 800b2a2:	b086      	sub	sp, #24
 800b2a4:	af00      	add	r7, sp, #0
 800b2a6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	68db      	ldr	r3, [r3, #12]
 800b2ac:	68db      	ldr	r3, [r3, #12]
 800b2ae:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b2b0:	693b      	ldr	r3, [r7, #16]
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d10a      	bne.n	800b2cc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800b2b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2ba:	f383 8811 	msr	BASEPRI, r3
 800b2be:	f3bf 8f6f 	isb	sy
 800b2c2:	f3bf 8f4f 	dsb	sy
 800b2c6:	60fb      	str	r3, [r7, #12]
}
 800b2c8:	bf00      	nop
 800b2ca:	e7fe      	b.n	800b2ca <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b2cc:	693b      	ldr	r3, [r7, #16]
 800b2ce:	3318      	adds	r3, #24
 800b2d0:	4618      	mov	r0, r3
 800b2d2:	f7fe fab1 	bl	8009838 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b2d6:	4b1e      	ldr	r3, [pc, #120]	; (800b350 <xTaskRemoveFromEventList+0xb0>)
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d11d      	bne.n	800b31a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b2de:	693b      	ldr	r3, [r7, #16]
 800b2e0:	3304      	adds	r3, #4
 800b2e2:	4618      	mov	r0, r3
 800b2e4:	f7fe faa8 	bl	8009838 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b2e8:	693b      	ldr	r3, [r7, #16]
 800b2ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2ec:	4b19      	ldr	r3, [pc, #100]	; (800b354 <xTaskRemoveFromEventList+0xb4>)
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	429a      	cmp	r2, r3
 800b2f2:	d903      	bls.n	800b2fc <xTaskRemoveFromEventList+0x5c>
 800b2f4:	693b      	ldr	r3, [r7, #16]
 800b2f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2f8:	4a16      	ldr	r2, [pc, #88]	; (800b354 <xTaskRemoveFromEventList+0xb4>)
 800b2fa:	6013      	str	r3, [r2, #0]
 800b2fc:	693b      	ldr	r3, [r7, #16]
 800b2fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b300:	4613      	mov	r3, r2
 800b302:	009b      	lsls	r3, r3, #2
 800b304:	4413      	add	r3, r2
 800b306:	009b      	lsls	r3, r3, #2
 800b308:	4a13      	ldr	r2, [pc, #76]	; (800b358 <xTaskRemoveFromEventList+0xb8>)
 800b30a:	441a      	add	r2, r3
 800b30c:	693b      	ldr	r3, [r7, #16]
 800b30e:	3304      	adds	r3, #4
 800b310:	4619      	mov	r1, r3
 800b312:	4610      	mov	r0, r2
 800b314:	f7fe fa33 	bl	800977e <vListInsertEnd>
 800b318:	e005      	b.n	800b326 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b31a:	693b      	ldr	r3, [r7, #16]
 800b31c:	3318      	adds	r3, #24
 800b31e:	4619      	mov	r1, r3
 800b320:	480e      	ldr	r0, [pc, #56]	; (800b35c <xTaskRemoveFromEventList+0xbc>)
 800b322:	f7fe fa2c 	bl	800977e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b326:	693b      	ldr	r3, [r7, #16]
 800b328:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b32a:	4b0d      	ldr	r3, [pc, #52]	; (800b360 <xTaskRemoveFromEventList+0xc0>)
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b330:	429a      	cmp	r2, r3
 800b332:	d905      	bls.n	800b340 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b334:	2301      	movs	r3, #1
 800b336:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b338:	4b0a      	ldr	r3, [pc, #40]	; (800b364 <xTaskRemoveFromEventList+0xc4>)
 800b33a:	2201      	movs	r2, #1
 800b33c:	601a      	str	r2, [r3, #0]
 800b33e:	e001      	b.n	800b344 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800b340:	2300      	movs	r3, #0
 800b342:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b344:	697b      	ldr	r3, [r7, #20]
}
 800b346:	4618      	mov	r0, r3
 800b348:	3718      	adds	r7, #24
 800b34a:	46bd      	mov	sp, r7
 800b34c:	bd80      	pop	{r7, pc}
 800b34e:	bf00      	nop
 800b350:	24001cd8 	.word	0x24001cd8
 800b354:	24001cb8 	.word	0x24001cb8
 800b358:	240017e0 	.word	0x240017e0
 800b35c:	24001c70 	.word	0x24001c70
 800b360:	240017dc 	.word	0x240017dc
 800b364:	24001cc4 	.word	0x24001cc4

0800b368 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b368:	b480      	push	{r7}
 800b36a:	b083      	sub	sp, #12
 800b36c:	af00      	add	r7, sp, #0
 800b36e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b370:	4b06      	ldr	r3, [pc, #24]	; (800b38c <vTaskInternalSetTimeOutState+0x24>)
 800b372:	681a      	ldr	r2, [r3, #0]
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b378:	4b05      	ldr	r3, [pc, #20]	; (800b390 <vTaskInternalSetTimeOutState+0x28>)
 800b37a:	681a      	ldr	r2, [r3, #0]
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	605a      	str	r2, [r3, #4]
}
 800b380:	bf00      	nop
 800b382:	370c      	adds	r7, #12
 800b384:	46bd      	mov	sp, r7
 800b386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b38a:	4770      	bx	lr
 800b38c:	24001cc8 	.word	0x24001cc8
 800b390:	24001cb4 	.word	0x24001cb4

0800b394 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b394:	b580      	push	{r7, lr}
 800b396:	b088      	sub	sp, #32
 800b398:	af00      	add	r7, sp, #0
 800b39a:	6078      	str	r0, [r7, #4]
 800b39c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d10a      	bne.n	800b3ba <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800b3a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3a8:	f383 8811 	msr	BASEPRI, r3
 800b3ac:	f3bf 8f6f 	isb	sy
 800b3b0:	f3bf 8f4f 	dsb	sy
 800b3b4:	613b      	str	r3, [r7, #16]
}
 800b3b6:	bf00      	nop
 800b3b8:	e7fe      	b.n	800b3b8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b3ba:	683b      	ldr	r3, [r7, #0]
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d10a      	bne.n	800b3d6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800b3c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3c4:	f383 8811 	msr	BASEPRI, r3
 800b3c8:	f3bf 8f6f 	isb	sy
 800b3cc:	f3bf 8f4f 	dsb	sy
 800b3d0:	60fb      	str	r3, [r7, #12]
}
 800b3d2:	bf00      	nop
 800b3d4:	e7fe      	b.n	800b3d4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800b3d6:	f000 ff7d 	bl	800c2d4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b3da:	4b1d      	ldr	r3, [pc, #116]	; (800b450 <xTaskCheckForTimeOut+0xbc>)
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	685b      	ldr	r3, [r3, #4]
 800b3e4:	69ba      	ldr	r2, [r7, #24]
 800b3e6:	1ad3      	subs	r3, r2, r3
 800b3e8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b3ea:	683b      	ldr	r3, [r7, #0]
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3f2:	d102      	bne.n	800b3fa <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b3f4:	2300      	movs	r3, #0
 800b3f6:	61fb      	str	r3, [r7, #28]
 800b3f8:	e023      	b.n	800b442 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	681a      	ldr	r2, [r3, #0]
 800b3fe:	4b15      	ldr	r3, [pc, #84]	; (800b454 <xTaskCheckForTimeOut+0xc0>)
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	429a      	cmp	r2, r3
 800b404:	d007      	beq.n	800b416 <xTaskCheckForTimeOut+0x82>
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	685b      	ldr	r3, [r3, #4]
 800b40a:	69ba      	ldr	r2, [r7, #24]
 800b40c:	429a      	cmp	r2, r3
 800b40e:	d302      	bcc.n	800b416 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b410:	2301      	movs	r3, #1
 800b412:	61fb      	str	r3, [r7, #28]
 800b414:	e015      	b.n	800b442 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b416:	683b      	ldr	r3, [r7, #0]
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	697a      	ldr	r2, [r7, #20]
 800b41c:	429a      	cmp	r2, r3
 800b41e:	d20b      	bcs.n	800b438 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b420:	683b      	ldr	r3, [r7, #0]
 800b422:	681a      	ldr	r2, [r3, #0]
 800b424:	697b      	ldr	r3, [r7, #20]
 800b426:	1ad2      	subs	r2, r2, r3
 800b428:	683b      	ldr	r3, [r7, #0]
 800b42a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b42c:	6878      	ldr	r0, [r7, #4]
 800b42e:	f7ff ff9b 	bl	800b368 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b432:	2300      	movs	r3, #0
 800b434:	61fb      	str	r3, [r7, #28]
 800b436:	e004      	b.n	800b442 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800b438:	683b      	ldr	r3, [r7, #0]
 800b43a:	2200      	movs	r2, #0
 800b43c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b43e:	2301      	movs	r3, #1
 800b440:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b442:	f000 ff77 	bl	800c334 <vPortExitCritical>

	return xReturn;
 800b446:	69fb      	ldr	r3, [r7, #28]
}
 800b448:	4618      	mov	r0, r3
 800b44a:	3720      	adds	r7, #32
 800b44c:	46bd      	mov	sp, r7
 800b44e:	bd80      	pop	{r7, pc}
 800b450:	24001cb4 	.word	0x24001cb4
 800b454:	24001cc8 	.word	0x24001cc8

0800b458 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b458:	b480      	push	{r7}
 800b45a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b45c:	4b03      	ldr	r3, [pc, #12]	; (800b46c <vTaskMissedYield+0x14>)
 800b45e:	2201      	movs	r2, #1
 800b460:	601a      	str	r2, [r3, #0]
}
 800b462:	bf00      	nop
 800b464:	46bd      	mov	sp, r7
 800b466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b46a:	4770      	bx	lr
 800b46c:	24001cc4 	.word	0x24001cc4

0800b470 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b470:	b580      	push	{r7, lr}
 800b472:	b082      	sub	sp, #8
 800b474:	af00      	add	r7, sp, #0
 800b476:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b478:	f000 f852 	bl	800b520 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b47c:	4b06      	ldr	r3, [pc, #24]	; (800b498 <prvIdleTask+0x28>)
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	2b01      	cmp	r3, #1
 800b482:	d9f9      	bls.n	800b478 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b484:	4b05      	ldr	r3, [pc, #20]	; (800b49c <prvIdleTask+0x2c>)
 800b486:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b48a:	601a      	str	r2, [r3, #0]
 800b48c:	f3bf 8f4f 	dsb	sy
 800b490:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b494:	e7f0      	b.n	800b478 <prvIdleTask+0x8>
 800b496:	bf00      	nop
 800b498:	240017e0 	.word	0x240017e0
 800b49c:	e000ed04 	.word	0xe000ed04

0800b4a0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b4a0:	b580      	push	{r7, lr}
 800b4a2:	b082      	sub	sp, #8
 800b4a4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b4a6:	2300      	movs	r3, #0
 800b4a8:	607b      	str	r3, [r7, #4]
 800b4aa:	e00c      	b.n	800b4c6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b4ac:	687a      	ldr	r2, [r7, #4]
 800b4ae:	4613      	mov	r3, r2
 800b4b0:	009b      	lsls	r3, r3, #2
 800b4b2:	4413      	add	r3, r2
 800b4b4:	009b      	lsls	r3, r3, #2
 800b4b6:	4a12      	ldr	r2, [pc, #72]	; (800b500 <prvInitialiseTaskLists+0x60>)
 800b4b8:	4413      	add	r3, r2
 800b4ba:	4618      	mov	r0, r3
 800b4bc:	f7fe f932 	bl	8009724 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	3301      	adds	r3, #1
 800b4c4:	607b      	str	r3, [r7, #4]
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	2b37      	cmp	r3, #55	; 0x37
 800b4ca:	d9ef      	bls.n	800b4ac <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b4cc:	480d      	ldr	r0, [pc, #52]	; (800b504 <prvInitialiseTaskLists+0x64>)
 800b4ce:	f7fe f929 	bl	8009724 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b4d2:	480d      	ldr	r0, [pc, #52]	; (800b508 <prvInitialiseTaskLists+0x68>)
 800b4d4:	f7fe f926 	bl	8009724 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b4d8:	480c      	ldr	r0, [pc, #48]	; (800b50c <prvInitialiseTaskLists+0x6c>)
 800b4da:	f7fe f923 	bl	8009724 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b4de:	480c      	ldr	r0, [pc, #48]	; (800b510 <prvInitialiseTaskLists+0x70>)
 800b4e0:	f7fe f920 	bl	8009724 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b4e4:	480b      	ldr	r0, [pc, #44]	; (800b514 <prvInitialiseTaskLists+0x74>)
 800b4e6:	f7fe f91d 	bl	8009724 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b4ea:	4b0b      	ldr	r3, [pc, #44]	; (800b518 <prvInitialiseTaskLists+0x78>)
 800b4ec:	4a05      	ldr	r2, [pc, #20]	; (800b504 <prvInitialiseTaskLists+0x64>)
 800b4ee:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b4f0:	4b0a      	ldr	r3, [pc, #40]	; (800b51c <prvInitialiseTaskLists+0x7c>)
 800b4f2:	4a05      	ldr	r2, [pc, #20]	; (800b508 <prvInitialiseTaskLists+0x68>)
 800b4f4:	601a      	str	r2, [r3, #0]
}
 800b4f6:	bf00      	nop
 800b4f8:	3708      	adds	r7, #8
 800b4fa:	46bd      	mov	sp, r7
 800b4fc:	bd80      	pop	{r7, pc}
 800b4fe:	bf00      	nop
 800b500:	240017e0 	.word	0x240017e0
 800b504:	24001c40 	.word	0x24001c40
 800b508:	24001c54 	.word	0x24001c54
 800b50c:	24001c70 	.word	0x24001c70
 800b510:	24001c84 	.word	0x24001c84
 800b514:	24001c9c 	.word	0x24001c9c
 800b518:	24001c68 	.word	0x24001c68
 800b51c:	24001c6c 	.word	0x24001c6c

0800b520 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b520:	b580      	push	{r7, lr}
 800b522:	b082      	sub	sp, #8
 800b524:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b526:	e019      	b.n	800b55c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b528:	f000 fed4 	bl	800c2d4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b52c:	4b10      	ldr	r3, [pc, #64]	; (800b570 <prvCheckTasksWaitingTermination+0x50>)
 800b52e:	68db      	ldr	r3, [r3, #12]
 800b530:	68db      	ldr	r3, [r3, #12]
 800b532:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	3304      	adds	r3, #4
 800b538:	4618      	mov	r0, r3
 800b53a:	f7fe f97d 	bl	8009838 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b53e:	4b0d      	ldr	r3, [pc, #52]	; (800b574 <prvCheckTasksWaitingTermination+0x54>)
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	3b01      	subs	r3, #1
 800b544:	4a0b      	ldr	r2, [pc, #44]	; (800b574 <prvCheckTasksWaitingTermination+0x54>)
 800b546:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b548:	4b0b      	ldr	r3, [pc, #44]	; (800b578 <prvCheckTasksWaitingTermination+0x58>)
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	3b01      	subs	r3, #1
 800b54e:	4a0a      	ldr	r2, [pc, #40]	; (800b578 <prvCheckTasksWaitingTermination+0x58>)
 800b550:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b552:	f000 feef 	bl	800c334 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b556:	6878      	ldr	r0, [r7, #4]
 800b558:	f000 f810 	bl	800b57c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b55c:	4b06      	ldr	r3, [pc, #24]	; (800b578 <prvCheckTasksWaitingTermination+0x58>)
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	2b00      	cmp	r3, #0
 800b562:	d1e1      	bne.n	800b528 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b564:	bf00      	nop
 800b566:	bf00      	nop
 800b568:	3708      	adds	r7, #8
 800b56a:	46bd      	mov	sp, r7
 800b56c:	bd80      	pop	{r7, pc}
 800b56e:	bf00      	nop
 800b570:	24001c84 	.word	0x24001c84
 800b574:	24001cb0 	.word	0x24001cb0
 800b578:	24001c98 	.word	0x24001c98

0800b57c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b57c:	b580      	push	{r7, lr}
 800b57e:	b084      	sub	sp, #16
 800b580:	af00      	add	r7, sp, #0
 800b582:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	3354      	adds	r3, #84	; 0x54
 800b588:	4618      	mov	r0, r3
 800b58a:	f001 ff81 	bl	800d490 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800b594:	2b00      	cmp	r3, #0
 800b596:	d108      	bne.n	800b5aa <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b59c:	4618      	mov	r0, r3
 800b59e:	f001 f887 	bl	800c6b0 <vPortFree>
				vPortFree( pxTCB );
 800b5a2:	6878      	ldr	r0, [r7, #4]
 800b5a4:	f001 f884 	bl	800c6b0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b5a8:	e018      	b.n	800b5dc <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800b5b0:	2b01      	cmp	r3, #1
 800b5b2:	d103      	bne.n	800b5bc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800b5b4:	6878      	ldr	r0, [r7, #4]
 800b5b6:	f001 f87b 	bl	800c6b0 <vPortFree>
	}
 800b5ba:	e00f      	b.n	800b5dc <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800b5c2:	2b02      	cmp	r3, #2
 800b5c4:	d00a      	beq.n	800b5dc <prvDeleteTCB+0x60>
	__asm volatile
 800b5c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5ca:	f383 8811 	msr	BASEPRI, r3
 800b5ce:	f3bf 8f6f 	isb	sy
 800b5d2:	f3bf 8f4f 	dsb	sy
 800b5d6:	60fb      	str	r3, [r7, #12]
}
 800b5d8:	bf00      	nop
 800b5da:	e7fe      	b.n	800b5da <prvDeleteTCB+0x5e>
	}
 800b5dc:	bf00      	nop
 800b5de:	3710      	adds	r7, #16
 800b5e0:	46bd      	mov	sp, r7
 800b5e2:	bd80      	pop	{r7, pc}

0800b5e4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b5e4:	b480      	push	{r7}
 800b5e6:	b083      	sub	sp, #12
 800b5e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b5ea:	4b0c      	ldr	r3, [pc, #48]	; (800b61c <prvResetNextTaskUnblockTime+0x38>)
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d104      	bne.n	800b5fe <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b5f4:	4b0a      	ldr	r3, [pc, #40]	; (800b620 <prvResetNextTaskUnblockTime+0x3c>)
 800b5f6:	f04f 32ff 	mov.w	r2, #4294967295
 800b5fa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b5fc:	e008      	b.n	800b610 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b5fe:	4b07      	ldr	r3, [pc, #28]	; (800b61c <prvResetNextTaskUnblockTime+0x38>)
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	68db      	ldr	r3, [r3, #12]
 800b604:	68db      	ldr	r3, [r3, #12]
 800b606:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	685b      	ldr	r3, [r3, #4]
 800b60c:	4a04      	ldr	r2, [pc, #16]	; (800b620 <prvResetNextTaskUnblockTime+0x3c>)
 800b60e:	6013      	str	r3, [r2, #0]
}
 800b610:	bf00      	nop
 800b612:	370c      	adds	r7, #12
 800b614:	46bd      	mov	sp, r7
 800b616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b61a:	4770      	bx	lr
 800b61c:	24001c68 	.word	0x24001c68
 800b620:	24001cd0 	.word	0x24001cd0

0800b624 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b624:	b480      	push	{r7}
 800b626:	b083      	sub	sp, #12
 800b628:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b62a:	4b0b      	ldr	r3, [pc, #44]	; (800b658 <xTaskGetSchedulerState+0x34>)
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d102      	bne.n	800b638 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b632:	2301      	movs	r3, #1
 800b634:	607b      	str	r3, [r7, #4]
 800b636:	e008      	b.n	800b64a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b638:	4b08      	ldr	r3, [pc, #32]	; (800b65c <xTaskGetSchedulerState+0x38>)
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d102      	bne.n	800b646 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b640:	2302      	movs	r3, #2
 800b642:	607b      	str	r3, [r7, #4]
 800b644:	e001      	b.n	800b64a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b646:	2300      	movs	r3, #0
 800b648:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b64a:	687b      	ldr	r3, [r7, #4]
	}
 800b64c:	4618      	mov	r0, r3
 800b64e:	370c      	adds	r7, #12
 800b650:	46bd      	mov	sp, r7
 800b652:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b656:	4770      	bx	lr
 800b658:	24001cbc 	.word	0x24001cbc
 800b65c:	24001cd8 	.word	0x24001cd8

0800b660 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800b660:	b580      	push	{r7, lr}
 800b662:	b084      	sub	sp, #16
 800b664:	af00      	add	r7, sp, #0
 800b666:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800b66c:	2300      	movs	r3, #0
 800b66e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	2b00      	cmp	r3, #0
 800b674:	d051      	beq.n	800b71a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800b676:	68bb      	ldr	r3, [r7, #8]
 800b678:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b67a:	4b2a      	ldr	r3, [pc, #168]	; (800b724 <xTaskPriorityInherit+0xc4>)
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b680:	429a      	cmp	r2, r3
 800b682:	d241      	bcs.n	800b708 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b684:	68bb      	ldr	r3, [r7, #8]
 800b686:	699b      	ldr	r3, [r3, #24]
 800b688:	2b00      	cmp	r3, #0
 800b68a:	db06      	blt.n	800b69a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b68c:	4b25      	ldr	r3, [pc, #148]	; (800b724 <xTaskPriorityInherit+0xc4>)
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b692:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b696:	68bb      	ldr	r3, [r7, #8]
 800b698:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800b69a:	68bb      	ldr	r3, [r7, #8]
 800b69c:	6959      	ldr	r1, [r3, #20]
 800b69e:	68bb      	ldr	r3, [r7, #8]
 800b6a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b6a2:	4613      	mov	r3, r2
 800b6a4:	009b      	lsls	r3, r3, #2
 800b6a6:	4413      	add	r3, r2
 800b6a8:	009b      	lsls	r3, r3, #2
 800b6aa:	4a1f      	ldr	r2, [pc, #124]	; (800b728 <xTaskPriorityInherit+0xc8>)
 800b6ac:	4413      	add	r3, r2
 800b6ae:	4299      	cmp	r1, r3
 800b6b0:	d122      	bne.n	800b6f8 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b6b2:	68bb      	ldr	r3, [r7, #8]
 800b6b4:	3304      	adds	r3, #4
 800b6b6:	4618      	mov	r0, r3
 800b6b8:	f7fe f8be 	bl	8009838 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b6bc:	4b19      	ldr	r3, [pc, #100]	; (800b724 <xTaskPriorityInherit+0xc4>)
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b6c2:	68bb      	ldr	r3, [r7, #8]
 800b6c4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800b6c6:	68bb      	ldr	r3, [r7, #8]
 800b6c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b6ca:	4b18      	ldr	r3, [pc, #96]	; (800b72c <xTaskPriorityInherit+0xcc>)
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	429a      	cmp	r2, r3
 800b6d0:	d903      	bls.n	800b6da <xTaskPriorityInherit+0x7a>
 800b6d2:	68bb      	ldr	r3, [r7, #8]
 800b6d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6d6:	4a15      	ldr	r2, [pc, #84]	; (800b72c <xTaskPriorityInherit+0xcc>)
 800b6d8:	6013      	str	r3, [r2, #0]
 800b6da:	68bb      	ldr	r3, [r7, #8]
 800b6dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b6de:	4613      	mov	r3, r2
 800b6e0:	009b      	lsls	r3, r3, #2
 800b6e2:	4413      	add	r3, r2
 800b6e4:	009b      	lsls	r3, r3, #2
 800b6e6:	4a10      	ldr	r2, [pc, #64]	; (800b728 <xTaskPriorityInherit+0xc8>)
 800b6e8:	441a      	add	r2, r3
 800b6ea:	68bb      	ldr	r3, [r7, #8]
 800b6ec:	3304      	adds	r3, #4
 800b6ee:	4619      	mov	r1, r3
 800b6f0:	4610      	mov	r0, r2
 800b6f2:	f7fe f844 	bl	800977e <vListInsertEnd>
 800b6f6:	e004      	b.n	800b702 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b6f8:	4b0a      	ldr	r3, [pc, #40]	; (800b724 <xTaskPriorityInherit+0xc4>)
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b6fe:	68bb      	ldr	r3, [r7, #8]
 800b700:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800b702:	2301      	movs	r3, #1
 800b704:	60fb      	str	r3, [r7, #12]
 800b706:	e008      	b.n	800b71a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800b708:	68bb      	ldr	r3, [r7, #8]
 800b70a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b70c:	4b05      	ldr	r3, [pc, #20]	; (800b724 <xTaskPriorityInherit+0xc4>)
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b712:	429a      	cmp	r2, r3
 800b714:	d201      	bcs.n	800b71a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800b716:	2301      	movs	r3, #1
 800b718:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b71a:	68fb      	ldr	r3, [r7, #12]
	}
 800b71c:	4618      	mov	r0, r3
 800b71e:	3710      	adds	r7, #16
 800b720:	46bd      	mov	sp, r7
 800b722:	bd80      	pop	{r7, pc}
 800b724:	240017dc 	.word	0x240017dc
 800b728:	240017e0 	.word	0x240017e0
 800b72c:	24001cb8 	.word	0x24001cb8

0800b730 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b730:	b580      	push	{r7, lr}
 800b732:	b086      	sub	sp, #24
 800b734:	af00      	add	r7, sp, #0
 800b736:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b73c:	2300      	movs	r3, #0
 800b73e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	2b00      	cmp	r3, #0
 800b744:	d056      	beq.n	800b7f4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b746:	4b2e      	ldr	r3, [pc, #184]	; (800b800 <xTaskPriorityDisinherit+0xd0>)
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	693a      	ldr	r2, [r7, #16]
 800b74c:	429a      	cmp	r2, r3
 800b74e:	d00a      	beq.n	800b766 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800b750:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b754:	f383 8811 	msr	BASEPRI, r3
 800b758:	f3bf 8f6f 	isb	sy
 800b75c:	f3bf 8f4f 	dsb	sy
 800b760:	60fb      	str	r3, [r7, #12]
}
 800b762:	bf00      	nop
 800b764:	e7fe      	b.n	800b764 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b766:	693b      	ldr	r3, [r7, #16]
 800b768:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d10a      	bne.n	800b784 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800b76e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b772:	f383 8811 	msr	BASEPRI, r3
 800b776:	f3bf 8f6f 	isb	sy
 800b77a:	f3bf 8f4f 	dsb	sy
 800b77e:	60bb      	str	r3, [r7, #8]
}
 800b780:	bf00      	nop
 800b782:	e7fe      	b.n	800b782 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800b784:	693b      	ldr	r3, [r7, #16]
 800b786:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b788:	1e5a      	subs	r2, r3, #1
 800b78a:	693b      	ldr	r3, [r7, #16]
 800b78c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b78e:	693b      	ldr	r3, [r7, #16]
 800b790:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b792:	693b      	ldr	r3, [r7, #16]
 800b794:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b796:	429a      	cmp	r2, r3
 800b798:	d02c      	beq.n	800b7f4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b79a:	693b      	ldr	r3, [r7, #16]
 800b79c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d128      	bne.n	800b7f4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b7a2:	693b      	ldr	r3, [r7, #16]
 800b7a4:	3304      	adds	r3, #4
 800b7a6:	4618      	mov	r0, r3
 800b7a8:	f7fe f846 	bl	8009838 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b7ac:	693b      	ldr	r3, [r7, #16]
 800b7ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b7b0:	693b      	ldr	r3, [r7, #16]
 800b7b2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b7b4:	693b      	ldr	r3, [r7, #16]
 800b7b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7b8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b7bc:	693b      	ldr	r3, [r7, #16]
 800b7be:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b7c0:	693b      	ldr	r3, [r7, #16]
 800b7c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7c4:	4b0f      	ldr	r3, [pc, #60]	; (800b804 <xTaskPriorityDisinherit+0xd4>)
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	429a      	cmp	r2, r3
 800b7ca:	d903      	bls.n	800b7d4 <xTaskPriorityDisinherit+0xa4>
 800b7cc:	693b      	ldr	r3, [r7, #16]
 800b7ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7d0:	4a0c      	ldr	r2, [pc, #48]	; (800b804 <xTaskPriorityDisinherit+0xd4>)
 800b7d2:	6013      	str	r3, [r2, #0]
 800b7d4:	693b      	ldr	r3, [r7, #16]
 800b7d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7d8:	4613      	mov	r3, r2
 800b7da:	009b      	lsls	r3, r3, #2
 800b7dc:	4413      	add	r3, r2
 800b7de:	009b      	lsls	r3, r3, #2
 800b7e0:	4a09      	ldr	r2, [pc, #36]	; (800b808 <xTaskPriorityDisinherit+0xd8>)
 800b7e2:	441a      	add	r2, r3
 800b7e4:	693b      	ldr	r3, [r7, #16]
 800b7e6:	3304      	adds	r3, #4
 800b7e8:	4619      	mov	r1, r3
 800b7ea:	4610      	mov	r0, r2
 800b7ec:	f7fd ffc7 	bl	800977e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b7f0:	2301      	movs	r3, #1
 800b7f2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b7f4:	697b      	ldr	r3, [r7, #20]
	}
 800b7f6:	4618      	mov	r0, r3
 800b7f8:	3718      	adds	r7, #24
 800b7fa:	46bd      	mov	sp, r7
 800b7fc:	bd80      	pop	{r7, pc}
 800b7fe:	bf00      	nop
 800b800:	240017dc 	.word	0x240017dc
 800b804:	24001cb8 	.word	0x24001cb8
 800b808:	240017e0 	.word	0x240017e0

0800b80c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800b80c:	b580      	push	{r7, lr}
 800b80e:	b088      	sub	sp, #32
 800b810:	af00      	add	r7, sp, #0
 800b812:	6078      	str	r0, [r7, #4]
 800b814:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800b81a:	2301      	movs	r3, #1
 800b81c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	2b00      	cmp	r3, #0
 800b822:	d06a      	beq.n	800b8fa <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800b824:	69bb      	ldr	r3, [r7, #24]
 800b826:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d10a      	bne.n	800b842 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800b82c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b830:	f383 8811 	msr	BASEPRI, r3
 800b834:	f3bf 8f6f 	isb	sy
 800b838:	f3bf 8f4f 	dsb	sy
 800b83c:	60fb      	str	r3, [r7, #12]
}
 800b83e:	bf00      	nop
 800b840:	e7fe      	b.n	800b840 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800b842:	69bb      	ldr	r3, [r7, #24]
 800b844:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b846:	683a      	ldr	r2, [r7, #0]
 800b848:	429a      	cmp	r2, r3
 800b84a:	d902      	bls.n	800b852 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800b84c:	683b      	ldr	r3, [r7, #0]
 800b84e:	61fb      	str	r3, [r7, #28]
 800b850:	e002      	b.n	800b858 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800b852:	69bb      	ldr	r3, [r7, #24]
 800b854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b856:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800b858:	69bb      	ldr	r3, [r7, #24]
 800b85a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b85c:	69fa      	ldr	r2, [r7, #28]
 800b85e:	429a      	cmp	r2, r3
 800b860:	d04b      	beq.n	800b8fa <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800b862:	69bb      	ldr	r3, [r7, #24]
 800b864:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b866:	697a      	ldr	r2, [r7, #20]
 800b868:	429a      	cmp	r2, r3
 800b86a:	d146      	bne.n	800b8fa <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800b86c:	4b25      	ldr	r3, [pc, #148]	; (800b904 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	69ba      	ldr	r2, [r7, #24]
 800b872:	429a      	cmp	r2, r3
 800b874:	d10a      	bne.n	800b88c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800b876:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b87a:	f383 8811 	msr	BASEPRI, r3
 800b87e:	f3bf 8f6f 	isb	sy
 800b882:	f3bf 8f4f 	dsb	sy
 800b886:	60bb      	str	r3, [r7, #8]
}
 800b888:	bf00      	nop
 800b88a:	e7fe      	b.n	800b88a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800b88c:	69bb      	ldr	r3, [r7, #24]
 800b88e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b890:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800b892:	69bb      	ldr	r3, [r7, #24]
 800b894:	69fa      	ldr	r2, [r7, #28]
 800b896:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b898:	69bb      	ldr	r3, [r7, #24]
 800b89a:	699b      	ldr	r3, [r3, #24]
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	db04      	blt.n	800b8aa <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b8a0:	69fb      	ldr	r3, [r7, #28]
 800b8a2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b8a6:	69bb      	ldr	r3, [r7, #24]
 800b8a8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800b8aa:	69bb      	ldr	r3, [r7, #24]
 800b8ac:	6959      	ldr	r1, [r3, #20]
 800b8ae:	693a      	ldr	r2, [r7, #16]
 800b8b0:	4613      	mov	r3, r2
 800b8b2:	009b      	lsls	r3, r3, #2
 800b8b4:	4413      	add	r3, r2
 800b8b6:	009b      	lsls	r3, r3, #2
 800b8b8:	4a13      	ldr	r2, [pc, #76]	; (800b908 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800b8ba:	4413      	add	r3, r2
 800b8bc:	4299      	cmp	r1, r3
 800b8be:	d11c      	bne.n	800b8fa <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b8c0:	69bb      	ldr	r3, [r7, #24]
 800b8c2:	3304      	adds	r3, #4
 800b8c4:	4618      	mov	r0, r3
 800b8c6:	f7fd ffb7 	bl	8009838 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800b8ca:	69bb      	ldr	r3, [r7, #24]
 800b8cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8ce:	4b0f      	ldr	r3, [pc, #60]	; (800b90c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	429a      	cmp	r2, r3
 800b8d4:	d903      	bls.n	800b8de <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800b8d6:	69bb      	ldr	r3, [r7, #24]
 800b8d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8da:	4a0c      	ldr	r2, [pc, #48]	; (800b90c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800b8dc:	6013      	str	r3, [r2, #0]
 800b8de:	69bb      	ldr	r3, [r7, #24]
 800b8e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8e2:	4613      	mov	r3, r2
 800b8e4:	009b      	lsls	r3, r3, #2
 800b8e6:	4413      	add	r3, r2
 800b8e8:	009b      	lsls	r3, r3, #2
 800b8ea:	4a07      	ldr	r2, [pc, #28]	; (800b908 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800b8ec:	441a      	add	r2, r3
 800b8ee:	69bb      	ldr	r3, [r7, #24]
 800b8f0:	3304      	adds	r3, #4
 800b8f2:	4619      	mov	r1, r3
 800b8f4:	4610      	mov	r0, r2
 800b8f6:	f7fd ff42 	bl	800977e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b8fa:	bf00      	nop
 800b8fc:	3720      	adds	r7, #32
 800b8fe:	46bd      	mov	sp, r7
 800b900:	bd80      	pop	{r7, pc}
 800b902:	bf00      	nop
 800b904:	240017dc 	.word	0x240017dc
 800b908:	240017e0 	.word	0x240017e0
 800b90c:	24001cb8 	.word	0x24001cb8

0800b910 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800b910:	b480      	push	{r7}
 800b912:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800b914:	4b07      	ldr	r3, [pc, #28]	; (800b934 <pvTaskIncrementMutexHeldCount+0x24>)
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d004      	beq.n	800b926 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800b91c:	4b05      	ldr	r3, [pc, #20]	; (800b934 <pvTaskIncrementMutexHeldCount+0x24>)
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b922:	3201      	adds	r2, #1
 800b924:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800b926:	4b03      	ldr	r3, [pc, #12]	; (800b934 <pvTaskIncrementMutexHeldCount+0x24>)
 800b928:	681b      	ldr	r3, [r3, #0]
	}
 800b92a:	4618      	mov	r0, r3
 800b92c:	46bd      	mov	sp, r7
 800b92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b932:	4770      	bx	lr
 800b934:	240017dc 	.word	0x240017dc

0800b938 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b938:	b580      	push	{r7, lr}
 800b93a:	b084      	sub	sp, #16
 800b93c:	af00      	add	r7, sp, #0
 800b93e:	6078      	str	r0, [r7, #4]
 800b940:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b942:	4b21      	ldr	r3, [pc, #132]	; (800b9c8 <prvAddCurrentTaskToDelayedList+0x90>)
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b948:	4b20      	ldr	r3, [pc, #128]	; (800b9cc <prvAddCurrentTaskToDelayedList+0x94>)
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	3304      	adds	r3, #4
 800b94e:	4618      	mov	r0, r3
 800b950:	f7fd ff72 	bl	8009838 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b95a:	d10a      	bne.n	800b972 <prvAddCurrentTaskToDelayedList+0x3a>
 800b95c:	683b      	ldr	r3, [r7, #0]
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d007      	beq.n	800b972 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b962:	4b1a      	ldr	r3, [pc, #104]	; (800b9cc <prvAddCurrentTaskToDelayedList+0x94>)
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	3304      	adds	r3, #4
 800b968:	4619      	mov	r1, r3
 800b96a:	4819      	ldr	r0, [pc, #100]	; (800b9d0 <prvAddCurrentTaskToDelayedList+0x98>)
 800b96c:	f7fd ff07 	bl	800977e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b970:	e026      	b.n	800b9c0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b972:	68fa      	ldr	r2, [r7, #12]
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	4413      	add	r3, r2
 800b978:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b97a:	4b14      	ldr	r3, [pc, #80]	; (800b9cc <prvAddCurrentTaskToDelayedList+0x94>)
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	68ba      	ldr	r2, [r7, #8]
 800b980:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b982:	68ba      	ldr	r2, [r7, #8]
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	429a      	cmp	r2, r3
 800b988:	d209      	bcs.n	800b99e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b98a:	4b12      	ldr	r3, [pc, #72]	; (800b9d4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800b98c:	681a      	ldr	r2, [r3, #0]
 800b98e:	4b0f      	ldr	r3, [pc, #60]	; (800b9cc <prvAddCurrentTaskToDelayedList+0x94>)
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	3304      	adds	r3, #4
 800b994:	4619      	mov	r1, r3
 800b996:	4610      	mov	r0, r2
 800b998:	f7fd ff15 	bl	80097c6 <vListInsert>
}
 800b99c:	e010      	b.n	800b9c0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b99e:	4b0e      	ldr	r3, [pc, #56]	; (800b9d8 <prvAddCurrentTaskToDelayedList+0xa0>)
 800b9a0:	681a      	ldr	r2, [r3, #0]
 800b9a2:	4b0a      	ldr	r3, [pc, #40]	; (800b9cc <prvAddCurrentTaskToDelayedList+0x94>)
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	3304      	adds	r3, #4
 800b9a8:	4619      	mov	r1, r3
 800b9aa:	4610      	mov	r0, r2
 800b9ac:	f7fd ff0b 	bl	80097c6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b9b0:	4b0a      	ldr	r3, [pc, #40]	; (800b9dc <prvAddCurrentTaskToDelayedList+0xa4>)
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	68ba      	ldr	r2, [r7, #8]
 800b9b6:	429a      	cmp	r2, r3
 800b9b8:	d202      	bcs.n	800b9c0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b9ba:	4a08      	ldr	r2, [pc, #32]	; (800b9dc <prvAddCurrentTaskToDelayedList+0xa4>)
 800b9bc:	68bb      	ldr	r3, [r7, #8]
 800b9be:	6013      	str	r3, [r2, #0]
}
 800b9c0:	bf00      	nop
 800b9c2:	3710      	adds	r7, #16
 800b9c4:	46bd      	mov	sp, r7
 800b9c6:	bd80      	pop	{r7, pc}
 800b9c8:	24001cb4 	.word	0x24001cb4
 800b9cc:	240017dc 	.word	0x240017dc
 800b9d0:	24001c9c 	.word	0x24001c9c
 800b9d4:	24001c6c 	.word	0x24001c6c
 800b9d8:	24001c68 	.word	0x24001c68
 800b9dc:	24001cd0 	.word	0x24001cd0

0800b9e0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b9e0:	b580      	push	{r7, lr}
 800b9e2:	b08a      	sub	sp, #40	; 0x28
 800b9e4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b9e6:	2300      	movs	r3, #0
 800b9e8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b9ea:	f000 fb07 	bl	800bffc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b9ee:	4b1c      	ldr	r3, [pc, #112]	; (800ba60 <xTimerCreateTimerTask+0x80>)
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d021      	beq.n	800ba3a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b9f6:	2300      	movs	r3, #0
 800b9f8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b9fa:	2300      	movs	r3, #0
 800b9fc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b9fe:	1d3a      	adds	r2, r7, #4
 800ba00:	f107 0108 	add.w	r1, r7, #8
 800ba04:	f107 030c 	add.w	r3, r7, #12
 800ba08:	4618      	mov	r0, r3
 800ba0a:	f7fd fe71 	bl	80096f0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800ba0e:	6879      	ldr	r1, [r7, #4]
 800ba10:	68bb      	ldr	r3, [r7, #8]
 800ba12:	68fa      	ldr	r2, [r7, #12]
 800ba14:	9202      	str	r2, [sp, #8]
 800ba16:	9301      	str	r3, [sp, #4]
 800ba18:	2302      	movs	r3, #2
 800ba1a:	9300      	str	r3, [sp, #0]
 800ba1c:	2300      	movs	r3, #0
 800ba1e:	460a      	mov	r2, r1
 800ba20:	4910      	ldr	r1, [pc, #64]	; (800ba64 <xTimerCreateTimerTask+0x84>)
 800ba22:	4811      	ldr	r0, [pc, #68]	; (800ba68 <xTimerCreateTimerTask+0x88>)
 800ba24:	f7fe ff40 	bl	800a8a8 <xTaskCreateStatic>
 800ba28:	4603      	mov	r3, r0
 800ba2a:	4a10      	ldr	r2, [pc, #64]	; (800ba6c <xTimerCreateTimerTask+0x8c>)
 800ba2c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800ba2e:	4b0f      	ldr	r3, [pc, #60]	; (800ba6c <xTimerCreateTimerTask+0x8c>)
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d001      	beq.n	800ba3a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800ba36:	2301      	movs	r3, #1
 800ba38:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800ba3a:	697b      	ldr	r3, [r7, #20]
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d10a      	bne.n	800ba56 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800ba40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba44:	f383 8811 	msr	BASEPRI, r3
 800ba48:	f3bf 8f6f 	isb	sy
 800ba4c:	f3bf 8f4f 	dsb	sy
 800ba50:	613b      	str	r3, [r7, #16]
}
 800ba52:	bf00      	nop
 800ba54:	e7fe      	b.n	800ba54 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800ba56:	697b      	ldr	r3, [r7, #20]
}
 800ba58:	4618      	mov	r0, r3
 800ba5a:	3718      	adds	r7, #24
 800ba5c:	46bd      	mov	sp, r7
 800ba5e:	bd80      	pop	{r7, pc}
 800ba60:	24001d0c 	.word	0x24001d0c
 800ba64:	0800f718 	.word	0x0800f718
 800ba68:	0800bba5 	.word	0x0800bba5
 800ba6c:	24001d10 	.word	0x24001d10

0800ba70 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800ba70:	b580      	push	{r7, lr}
 800ba72:	b08a      	sub	sp, #40	; 0x28
 800ba74:	af00      	add	r7, sp, #0
 800ba76:	60f8      	str	r0, [r7, #12]
 800ba78:	60b9      	str	r1, [r7, #8]
 800ba7a:	607a      	str	r2, [r7, #4]
 800ba7c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800ba7e:	2300      	movs	r3, #0
 800ba80:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d10a      	bne.n	800ba9e <xTimerGenericCommand+0x2e>
	__asm volatile
 800ba88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba8c:	f383 8811 	msr	BASEPRI, r3
 800ba90:	f3bf 8f6f 	isb	sy
 800ba94:	f3bf 8f4f 	dsb	sy
 800ba98:	623b      	str	r3, [r7, #32]
}
 800ba9a:	bf00      	nop
 800ba9c:	e7fe      	b.n	800ba9c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800ba9e:	4b1a      	ldr	r3, [pc, #104]	; (800bb08 <xTimerGenericCommand+0x98>)
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d02a      	beq.n	800bafc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800baa6:	68bb      	ldr	r3, [r7, #8]
 800baa8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800bab2:	68bb      	ldr	r3, [r7, #8]
 800bab4:	2b05      	cmp	r3, #5
 800bab6:	dc18      	bgt.n	800baea <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800bab8:	f7ff fdb4 	bl	800b624 <xTaskGetSchedulerState>
 800babc:	4603      	mov	r3, r0
 800babe:	2b02      	cmp	r3, #2
 800bac0:	d109      	bne.n	800bad6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800bac2:	4b11      	ldr	r3, [pc, #68]	; (800bb08 <xTimerGenericCommand+0x98>)
 800bac4:	6818      	ldr	r0, [r3, #0]
 800bac6:	f107 0110 	add.w	r1, r7, #16
 800baca:	2300      	movs	r3, #0
 800bacc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bace:	f7fe f885 	bl	8009bdc <xQueueGenericSend>
 800bad2:	6278      	str	r0, [r7, #36]	; 0x24
 800bad4:	e012      	b.n	800bafc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800bad6:	4b0c      	ldr	r3, [pc, #48]	; (800bb08 <xTimerGenericCommand+0x98>)
 800bad8:	6818      	ldr	r0, [r3, #0]
 800bada:	f107 0110 	add.w	r1, r7, #16
 800bade:	2300      	movs	r3, #0
 800bae0:	2200      	movs	r2, #0
 800bae2:	f7fe f87b 	bl	8009bdc <xQueueGenericSend>
 800bae6:	6278      	str	r0, [r7, #36]	; 0x24
 800bae8:	e008      	b.n	800bafc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800baea:	4b07      	ldr	r3, [pc, #28]	; (800bb08 <xTimerGenericCommand+0x98>)
 800baec:	6818      	ldr	r0, [r3, #0]
 800baee:	f107 0110 	add.w	r1, r7, #16
 800baf2:	2300      	movs	r3, #0
 800baf4:	683a      	ldr	r2, [r7, #0]
 800baf6:	f7fe f96f 	bl	8009dd8 <xQueueGenericSendFromISR>
 800bafa:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800bafc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bafe:	4618      	mov	r0, r3
 800bb00:	3728      	adds	r7, #40	; 0x28
 800bb02:	46bd      	mov	sp, r7
 800bb04:	bd80      	pop	{r7, pc}
 800bb06:	bf00      	nop
 800bb08:	24001d0c 	.word	0x24001d0c

0800bb0c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800bb0c:	b580      	push	{r7, lr}
 800bb0e:	b088      	sub	sp, #32
 800bb10:	af02      	add	r7, sp, #8
 800bb12:	6078      	str	r0, [r7, #4]
 800bb14:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bb16:	4b22      	ldr	r3, [pc, #136]	; (800bba0 <prvProcessExpiredTimer+0x94>)
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	68db      	ldr	r3, [r3, #12]
 800bb1c:	68db      	ldr	r3, [r3, #12]
 800bb1e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bb20:	697b      	ldr	r3, [r7, #20]
 800bb22:	3304      	adds	r3, #4
 800bb24:	4618      	mov	r0, r3
 800bb26:	f7fd fe87 	bl	8009838 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bb2a:	697b      	ldr	r3, [r7, #20]
 800bb2c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bb30:	f003 0304 	and.w	r3, r3, #4
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d022      	beq.n	800bb7e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800bb38:	697b      	ldr	r3, [r7, #20]
 800bb3a:	699a      	ldr	r2, [r3, #24]
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	18d1      	adds	r1, r2, r3
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	683a      	ldr	r2, [r7, #0]
 800bb44:	6978      	ldr	r0, [r7, #20]
 800bb46:	f000 f8d1 	bl	800bcec <prvInsertTimerInActiveList>
 800bb4a:	4603      	mov	r3, r0
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d01f      	beq.n	800bb90 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bb50:	2300      	movs	r3, #0
 800bb52:	9300      	str	r3, [sp, #0]
 800bb54:	2300      	movs	r3, #0
 800bb56:	687a      	ldr	r2, [r7, #4]
 800bb58:	2100      	movs	r1, #0
 800bb5a:	6978      	ldr	r0, [r7, #20]
 800bb5c:	f7ff ff88 	bl	800ba70 <xTimerGenericCommand>
 800bb60:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800bb62:	693b      	ldr	r3, [r7, #16]
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d113      	bne.n	800bb90 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800bb68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb6c:	f383 8811 	msr	BASEPRI, r3
 800bb70:	f3bf 8f6f 	isb	sy
 800bb74:	f3bf 8f4f 	dsb	sy
 800bb78:	60fb      	str	r3, [r7, #12]
}
 800bb7a:	bf00      	nop
 800bb7c:	e7fe      	b.n	800bb7c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bb7e:	697b      	ldr	r3, [r7, #20]
 800bb80:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bb84:	f023 0301 	bic.w	r3, r3, #1
 800bb88:	b2da      	uxtb	r2, r3
 800bb8a:	697b      	ldr	r3, [r7, #20]
 800bb8c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bb90:	697b      	ldr	r3, [r7, #20]
 800bb92:	6a1b      	ldr	r3, [r3, #32]
 800bb94:	6978      	ldr	r0, [r7, #20]
 800bb96:	4798      	blx	r3
}
 800bb98:	bf00      	nop
 800bb9a:	3718      	adds	r7, #24
 800bb9c:	46bd      	mov	sp, r7
 800bb9e:	bd80      	pop	{r7, pc}
 800bba0:	24001d04 	.word	0x24001d04

0800bba4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800bba4:	b580      	push	{r7, lr}
 800bba6:	b084      	sub	sp, #16
 800bba8:	af00      	add	r7, sp, #0
 800bbaa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bbac:	f107 0308 	add.w	r3, r7, #8
 800bbb0:	4618      	mov	r0, r3
 800bbb2:	f000 f857 	bl	800bc64 <prvGetNextExpireTime>
 800bbb6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800bbb8:	68bb      	ldr	r3, [r7, #8]
 800bbba:	4619      	mov	r1, r3
 800bbbc:	68f8      	ldr	r0, [r7, #12]
 800bbbe:	f000 f803 	bl	800bbc8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800bbc2:	f000 f8d5 	bl	800bd70 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bbc6:	e7f1      	b.n	800bbac <prvTimerTask+0x8>

0800bbc8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800bbc8:	b580      	push	{r7, lr}
 800bbca:	b084      	sub	sp, #16
 800bbcc:	af00      	add	r7, sp, #0
 800bbce:	6078      	str	r0, [r7, #4]
 800bbd0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800bbd2:	f7ff f93b 	bl	800ae4c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bbd6:	f107 0308 	add.w	r3, r7, #8
 800bbda:	4618      	mov	r0, r3
 800bbdc:	f000 f866 	bl	800bcac <prvSampleTimeNow>
 800bbe0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800bbe2:	68bb      	ldr	r3, [r7, #8]
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d130      	bne.n	800bc4a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800bbe8:	683b      	ldr	r3, [r7, #0]
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d10a      	bne.n	800bc04 <prvProcessTimerOrBlockTask+0x3c>
 800bbee:	687a      	ldr	r2, [r7, #4]
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	429a      	cmp	r2, r3
 800bbf4:	d806      	bhi.n	800bc04 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800bbf6:	f7ff f937 	bl	800ae68 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800bbfa:	68f9      	ldr	r1, [r7, #12]
 800bbfc:	6878      	ldr	r0, [r7, #4]
 800bbfe:	f7ff ff85 	bl	800bb0c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800bc02:	e024      	b.n	800bc4e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800bc04:	683b      	ldr	r3, [r7, #0]
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d008      	beq.n	800bc1c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800bc0a:	4b13      	ldr	r3, [pc, #76]	; (800bc58 <prvProcessTimerOrBlockTask+0x90>)
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d101      	bne.n	800bc18 <prvProcessTimerOrBlockTask+0x50>
 800bc14:	2301      	movs	r3, #1
 800bc16:	e000      	b.n	800bc1a <prvProcessTimerOrBlockTask+0x52>
 800bc18:	2300      	movs	r3, #0
 800bc1a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800bc1c:	4b0f      	ldr	r3, [pc, #60]	; (800bc5c <prvProcessTimerOrBlockTask+0x94>)
 800bc1e:	6818      	ldr	r0, [r3, #0]
 800bc20:	687a      	ldr	r2, [r7, #4]
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	1ad3      	subs	r3, r2, r3
 800bc26:	683a      	ldr	r2, [r7, #0]
 800bc28:	4619      	mov	r1, r3
 800bc2a:	f7fe fe09 	bl	800a840 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800bc2e:	f7ff f91b 	bl	800ae68 <xTaskResumeAll>
 800bc32:	4603      	mov	r3, r0
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d10a      	bne.n	800bc4e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800bc38:	4b09      	ldr	r3, [pc, #36]	; (800bc60 <prvProcessTimerOrBlockTask+0x98>)
 800bc3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bc3e:	601a      	str	r2, [r3, #0]
 800bc40:	f3bf 8f4f 	dsb	sy
 800bc44:	f3bf 8f6f 	isb	sy
}
 800bc48:	e001      	b.n	800bc4e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800bc4a:	f7ff f90d 	bl	800ae68 <xTaskResumeAll>
}
 800bc4e:	bf00      	nop
 800bc50:	3710      	adds	r7, #16
 800bc52:	46bd      	mov	sp, r7
 800bc54:	bd80      	pop	{r7, pc}
 800bc56:	bf00      	nop
 800bc58:	24001d08 	.word	0x24001d08
 800bc5c:	24001d0c 	.word	0x24001d0c
 800bc60:	e000ed04 	.word	0xe000ed04

0800bc64 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800bc64:	b480      	push	{r7}
 800bc66:	b085      	sub	sp, #20
 800bc68:	af00      	add	r7, sp, #0
 800bc6a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800bc6c:	4b0e      	ldr	r3, [pc, #56]	; (800bca8 <prvGetNextExpireTime+0x44>)
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d101      	bne.n	800bc7a <prvGetNextExpireTime+0x16>
 800bc76:	2201      	movs	r2, #1
 800bc78:	e000      	b.n	800bc7c <prvGetNextExpireTime+0x18>
 800bc7a:	2200      	movs	r2, #0
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d105      	bne.n	800bc94 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bc88:	4b07      	ldr	r3, [pc, #28]	; (800bca8 <prvGetNextExpireTime+0x44>)
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	68db      	ldr	r3, [r3, #12]
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	60fb      	str	r3, [r7, #12]
 800bc92:	e001      	b.n	800bc98 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800bc94:	2300      	movs	r3, #0
 800bc96:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800bc98:	68fb      	ldr	r3, [r7, #12]
}
 800bc9a:	4618      	mov	r0, r3
 800bc9c:	3714      	adds	r7, #20
 800bc9e:	46bd      	mov	sp, r7
 800bca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca4:	4770      	bx	lr
 800bca6:	bf00      	nop
 800bca8:	24001d04 	.word	0x24001d04

0800bcac <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800bcac:	b580      	push	{r7, lr}
 800bcae:	b084      	sub	sp, #16
 800bcb0:	af00      	add	r7, sp, #0
 800bcb2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800bcb4:	f7ff f976 	bl	800afa4 <xTaskGetTickCount>
 800bcb8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800bcba:	4b0b      	ldr	r3, [pc, #44]	; (800bce8 <prvSampleTimeNow+0x3c>)
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	68fa      	ldr	r2, [r7, #12]
 800bcc0:	429a      	cmp	r2, r3
 800bcc2:	d205      	bcs.n	800bcd0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800bcc4:	f000 f936 	bl	800bf34 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	2201      	movs	r2, #1
 800bccc:	601a      	str	r2, [r3, #0]
 800bcce:	e002      	b.n	800bcd6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	2200      	movs	r2, #0
 800bcd4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800bcd6:	4a04      	ldr	r2, [pc, #16]	; (800bce8 <prvSampleTimeNow+0x3c>)
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800bcdc:	68fb      	ldr	r3, [r7, #12]
}
 800bcde:	4618      	mov	r0, r3
 800bce0:	3710      	adds	r7, #16
 800bce2:	46bd      	mov	sp, r7
 800bce4:	bd80      	pop	{r7, pc}
 800bce6:	bf00      	nop
 800bce8:	24001d14 	.word	0x24001d14

0800bcec <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800bcec:	b580      	push	{r7, lr}
 800bcee:	b086      	sub	sp, #24
 800bcf0:	af00      	add	r7, sp, #0
 800bcf2:	60f8      	str	r0, [r7, #12]
 800bcf4:	60b9      	str	r1, [r7, #8]
 800bcf6:	607a      	str	r2, [r7, #4]
 800bcf8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800bcfa:	2300      	movs	r3, #0
 800bcfc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	68ba      	ldr	r2, [r7, #8]
 800bd02:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	68fa      	ldr	r2, [r7, #12]
 800bd08:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800bd0a:	68ba      	ldr	r2, [r7, #8]
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	429a      	cmp	r2, r3
 800bd10:	d812      	bhi.n	800bd38 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bd12:	687a      	ldr	r2, [r7, #4]
 800bd14:	683b      	ldr	r3, [r7, #0]
 800bd16:	1ad2      	subs	r2, r2, r3
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	699b      	ldr	r3, [r3, #24]
 800bd1c:	429a      	cmp	r2, r3
 800bd1e:	d302      	bcc.n	800bd26 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800bd20:	2301      	movs	r3, #1
 800bd22:	617b      	str	r3, [r7, #20]
 800bd24:	e01b      	b.n	800bd5e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800bd26:	4b10      	ldr	r3, [pc, #64]	; (800bd68 <prvInsertTimerInActiveList+0x7c>)
 800bd28:	681a      	ldr	r2, [r3, #0]
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	3304      	adds	r3, #4
 800bd2e:	4619      	mov	r1, r3
 800bd30:	4610      	mov	r0, r2
 800bd32:	f7fd fd48 	bl	80097c6 <vListInsert>
 800bd36:	e012      	b.n	800bd5e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800bd38:	687a      	ldr	r2, [r7, #4]
 800bd3a:	683b      	ldr	r3, [r7, #0]
 800bd3c:	429a      	cmp	r2, r3
 800bd3e:	d206      	bcs.n	800bd4e <prvInsertTimerInActiveList+0x62>
 800bd40:	68ba      	ldr	r2, [r7, #8]
 800bd42:	683b      	ldr	r3, [r7, #0]
 800bd44:	429a      	cmp	r2, r3
 800bd46:	d302      	bcc.n	800bd4e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800bd48:	2301      	movs	r3, #1
 800bd4a:	617b      	str	r3, [r7, #20]
 800bd4c:	e007      	b.n	800bd5e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bd4e:	4b07      	ldr	r3, [pc, #28]	; (800bd6c <prvInsertTimerInActiveList+0x80>)
 800bd50:	681a      	ldr	r2, [r3, #0]
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	3304      	adds	r3, #4
 800bd56:	4619      	mov	r1, r3
 800bd58:	4610      	mov	r0, r2
 800bd5a:	f7fd fd34 	bl	80097c6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800bd5e:	697b      	ldr	r3, [r7, #20]
}
 800bd60:	4618      	mov	r0, r3
 800bd62:	3718      	adds	r7, #24
 800bd64:	46bd      	mov	sp, r7
 800bd66:	bd80      	pop	{r7, pc}
 800bd68:	24001d08 	.word	0x24001d08
 800bd6c:	24001d04 	.word	0x24001d04

0800bd70 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800bd70:	b580      	push	{r7, lr}
 800bd72:	b08e      	sub	sp, #56	; 0x38
 800bd74:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bd76:	e0ca      	b.n	800bf0e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	da18      	bge.n	800bdb0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800bd7e:	1d3b      	adds	r3, r7, #4
 800bd80:	3304      	adds	r3, #4
 800bd82:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800bd84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d10a      	bne.n	800bda0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800bd8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd8e:	f383 8811 	msr	BASEPRI, r3
 800bd92:	f3bf 8f6f 	isb	sy
 800bd96:	f3bf 8f4f 	dsb	sy
 800bd9a:	61fb      	str	r3, [r7, #28]
}
 800bd9c:	bf00      	nop
 800bd9e:	e7fe      	b.n	800bd9e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800bda0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bda6:	6850      	ldr	r0, [r2, #4]
 800bda8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bdaa:	6892      	ldr	r2, [r2, #8]
 800bdac:	4611      	mov	r1, r2
 800bdae:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	f2c0 80ab 	blt.w	800bf0e <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800bdbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdbe:	695b      	ldr	r3, [r3, #20]
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d004      	beq.n	800bdce <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bdc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdc6:	3304      	adds	r3, #4
 800bdc8:	4618      	mov	r0, r3
 800bdca:	f7fd fd35 	bl	8009838 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bdce:	463b      	mov	r3, r7
 800bdd0:	4618      	mov	r0, r3
 800bdd2:	f7ff ff6b 	bl	800bcac <prvSampleTimeNow>
 800bdd6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	2b09      	cmp	r3, #9
 800bddc:	f200 8096 	bhi.w	800bf0c <prvProcessReceivedCommands+0x19c>
 800bde0:	a201      	add	r2, pc, #4	; (adr r2, 800bde8 <prvProcessReceivedCommands+0x78>)
 800bde2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bde6:	bf00      	nop
 800bde8:	0800be11 	.word	0x0800be11
 800bdec:	0800be11 	.word	0x0800be11
 800bdf0:	0800be11 	.word	0x0800be11
 800bdf4:	0800be85 	.word	0x0800be85
 800bdf8:	0800be99 	.word	0x0800be99
 800bdfc:	0800bee3 	.word	0x0800bee3
 800be00:	0800be11 	.word	0x0800be11
 800be04:	0800be11 	.word	0x0800be11
 800be08:	0800be85 	.word	0x0800be85
 800be0c:	0800be99 	.word	0x0800be99
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800be10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be12:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800be16:	f043 0301 	orr.w	r3, r3, #1
 800be1a:	b2da      	uxtb	r2, r3
 800be1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be1e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800be22:	68ba      	ldr	r2, [r7, #8]
 800be24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be26:	699b      	ldr	r3, [r3, #24]
 800be28:	18d1      	adds	r1, r2, r3
 800be2a:	68bb      	ldr	r3, [r7, #8]
 800be2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800be2e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800be30:	f7ff ff5c 	bl	800bcec <prvInsertTimerInActiveList>
 800be34:	4603      	mov	r3, r0
 800be36:	2b00      	cmp	r3, #0
 800be38:	d069      	beq.n	800bf0e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800be3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be3c:	6a1b      	ldr	r3, [r3, #32]
 800be3e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800be40:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800be42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be44:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800be48:	f003 0304 	and.w	r3, r3, #4
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d05e      	beq.n	800bf0e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800be50:	68ba      	ldr	r2, [r7, #8]
 800be52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be54:	699b      	ldr	r3, [r3, #24]
 800be56:	441a      	add	r2, r3
 800be58:	2300      	movs	r3, #0
 800be5a:	9300      	str	r3, [sp, #0]
 800be5c:	2300      	movs	r3, #0
 800be5e:	2100      	movs	r1, #0
 800be60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800be62:	f7ff fe05 	bl	800ba70 <xTimerGenericCommand>
 800be66:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800be68:	6a3b      	ldr	r3, [r7, #32]
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d14f      	bne.n	800bf0e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800be6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be72:	f383 8811 	msr	BASEPRI, r3
 800be76:	f3bf 8f6f 	isb	sy
 800be7a:	f3bf 8f4f 	dsb	sy
 800be7e:	61bb      	str	r3, [r7, #24]
}
 800be80:	bf00      	nop
 800be82:	e7fe      	b.n	800be82 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800be84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be86:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800be8a:	f023 0301 	bic.w	r3, r3, #1
 800be8e:	b2da      	uxtb	r2, r3
 800be90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be92:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800be96:	e03a      	b.n	800bf0e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800be98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be9a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800be9e:	f043 0301 	orr.w	r3, r3, #1
 800bea2:	b2da      	uxtb	r2, r3
 800bea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bea6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800beaa:	68ba      	ldr	r2, [r7, #8]
 800beac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800beae:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800beb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800beb2:	699b      	ldr	r3, [r3, #24]
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d10a      	bne.n	800bece <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800beb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bebc:	f383 8811 	msr	BASEPRI, r3
 800bec0:	f3bf 8f6f 	isb	sy
 800bec4:	f3bf 8f4f 	dsb	sy
 800bec8:	617b      	str	r3, [r7, #20]
}
 800beca:	bf00      	nop
 800becc:	e7fe      	b.n	800becc <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800bece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bed0:	699a      	ldr	r2, [r3, #24]
 800bed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bed4:	18d1      	adds	r1, r2, r3
 800bed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bed8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800beda:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bedc:	f7ff ff06 	bl	800bcec <prvInsertTimerInActiveList>
					break;
 800bee0:	e015      	b.n	800bf0e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800bee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bee4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bee8:	f003 0302 	and.w	r3, r3, #2
 800beec:	2b00      	cmp	r3, #0
 800beee:	d103      	bne.n	800bef8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800bef0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bef2:	f000 fbdd 	bl	800c6b0 <vPortFree>
 800bef6:	e00a      	b.n	800bf0e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800befa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800befe:	f023 0301 	bic.w	r3, r3, #1
 800bf02:	b2da      	uxtb	r2, r3
 800bf04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf06:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800bf0a:	e000      	b.n	800bf0e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800bf0c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bf0e:	4b08      	ldr	r3, [pc, #32]	; (800bf30 <prvProcessReceivedCommands+0x1c0>)
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	1d39      	adds	r1, r7, #4
 800bf14:	2200      	movs	r2, #0
 800bf16:	4618      	mov	r0, r3
 800bf18:	f7fe f886 	bl	800a028 <xQueueReceive>
 800bf1c:	4603      	mov	r3, r0
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	f47f af2a 	bne.w	800bd78 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800bf24:	bf00      	nop
 800bf26:	bf00      	nop
 800bf28:	3730      	adds	r7, #48	; 0x30
 800bf2a:	46bd      	mov	sp, r7
 800bf2c:	bd80      	pop	{r7, pc}
 800bf2e:	bf00      	nop
 800bf30:	24001d0c 	.word	0x24001d0c

0800bf34 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800bf34:	b580      	push	{r7, lr}
 800bf36:	b088      	sub	sp, #32
 800bf38:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bf3a:	e048      	b.n	800bfce <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bf3c:	4b2d      	ldr	r3, [pc, #180]	; (800bff4 <prvSwitchTimerLists+0xc0>)
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	68db      	ldr	r3, [r3, #12]
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bf46:	4b2b      	ldr	r3, [pc, #172]	; (800bff4 <prvSwitchTimerLists+0xc0>)
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	68db      	ldr	r3, [r3, #12]
 800bf4c:	68db      	ldr	r3, [r3, #12]
 800bf4e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	3304      	adds	r3, #4
 800bf54:	4618      	mov	r0, r3
 800bf56:	f7fd fc6f 	bl	8009838 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	6a1b      	ldr	r3, [r3, #32]
 800bf5e:	68f8      	ldr	r0, [r7, #12]
 800bf60:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bf68:	f003 0304 	and.w	r3, r3, #4
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d02e      	beq.n	800bfce <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	699b      	ldr	r3, [r3, #24]
 800bf74:	693a      	ldr	r2, [r7, #16]
 800bf76:	4413      	add	r3, r2
 800bf78:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800bf7a:	68ba      	ldr	r2, [r7, #8]
 800bf7c:	693b      	ldr	r3, [r7, #16]
 800bf7e:	429a      	cmp	r2, r3
 800bf80:	d90e      	bls.n	800bfa0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	68ba      	ldr	r2, [r7, #8]
 800bf86:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	68fa      	ldr	r2, [r7, #12]
 800bf8c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bf8e:	4b19      	ldr	r3, [pc, #100]	; (800bff4 <prvSwitchTimerLists+0xc0>)
 800bf90:	681a      	ldr	r2, [r3, #0]
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	3304      	adds	r3, #4
 800bf96:	4619      	mov	r1, r3
 800bf98:	4610      	mov	r0, r2
 800bf9a:	f7fd fc14 	bl	80097c6 <vListInsert>
 800bf9e:	e016      	b.n	800bfce <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bfa0:	2300      	movs	r3, #0
 800bfa2:	9300      	str	r3, [sp, #0]
 800bfa4:	2300      	movs	r3, #0
 800bfa6:	693a      	ldr	r2, [r7, #16]
 800bfa8:	2100      	movs	r1, #0
 800bfaa:	68f8      	ldr	r0, [r7, #12]
 800bfac:	f7ff fd60 	bl	800ba70 <xTimerGenericCommand>
 800bfb0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d10a      	bne.n	800bfce <prvSwitchTimerLists+0x9a>
	__asm volatile
 800bfb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfbc:	f383 8811 	msr	BASEPRI, r3
 800bfc0:	f3bf 8f6f 	isb	sy
 800bfc4:	f3bf 8f4f 	dsb	sy
 800bfc8:	603b      	str	r3, [r7, #0]
}
 800bfca:	bf00      	nop
 800bfcc:	e7fe      	b.n	800bfcc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bfce:	4b09      	ldr	r3, [pc, #36]	; (800bff4 <prvSwitchTimerLists+0xc0>)
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d1b1      	bne.n	800bf3c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800bfd8:	4b06      	ldr	r3, [pc, #24]	; (800bff4 <prvSwitchTimerLists+0xc0>)
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800bfde:	4b06      	ldr	r3, [pc, #24]	; (800bff8 <prvSwitchTimerLists+0xc4>)
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	4a04      	ldr	r2, [pc, #16]	; (800bff4 <prvSwitchTimerLists+0xc0>)
 800bfe4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800bfe6:	4a04      	ldr	r2, [pc, #16]	; (800bff8 <prvSwitchTimerLists+0xc4>)
 800bfe8:	697b      	ldr	r3, [r7, #20]
 800bfea:	6013      	str	r3, [r2, #0]
}
 800bfec:	bf00      	nop
 800bfee:	3718      	adds	r7, #24
 800bff0:	46bd      	mov	sp, r7
 800bff2:	bd80      	pop	{r7, pc}
 800bff4:	24001d04 	.word	0x24001d04
 800bff8:	24001d08 	.word	0x24001d08

0800bffc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800bffc:	b580      	push	{r7, lr}
 800bffe:	b082      	sub	sp, #8
 800c000:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c002:	f000 f967 	bl	800c2d4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c006:	4b15      	ldr	r3, [pc, #84]	; (800c05c <prvCheckForValidListAndQueue+0x60>)
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d120      	bne.n	800c050 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c00e:	4814      	ldr	r0, [pc, #80]	; (800c060 <prvCheckForValidListAndQueue+0x64>)
 800c010:	f7fd fb88 	bl	8009724 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c014:	4813      	ldr	r0, [pc, #76]	; (800c064 <prvCheckForValidListAndQueue+0x68>)
 800c016:	f7fd fb85 	bl	8009724 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c01a:	4b13      	ldr	r3, [pc, #76]	; (800c068 <prvCheckForValidListAndQueue+0x6c>)
 800c01c:	4a10      	ldr	r2, [pc, #64]	; (800c060 <prvCheckForValidListAndQueue+0x64>)
 800c01e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c020:	4b12      	ldr	r3, [pc, #72]	; (800c06c <prvCheckForValidListAndQueue+0x70>)
 800c022:	4a10      	ldr	r2, [pc, #64]	; (800c064 <prvCheckForValidListAndQueue+0x68>)
 800c024:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c026:	2300      	movs	r3, #0
 800c028:	9300      	str	r3, [sp, #0]
 800c02a:	4b11      	ldr	r3, [pc, #68]	; (800c070 <prvCheckForValidListAndQueue+0x74>)
 800c02c:	4a11      	ldr	r2, [pc, #68]	; (800c074 <prvCheckForValidListAndQueue+0x78>)
 800c02e:	2110      	movs	r1, #16
 800c030:	200a      	movs	r0, #10
 800c032:	f7fd fc93 	bl	800995c <xQueueGenericCreateStatic>
 800c036:	4603      	mov	r3, r0
 800c038:	4a08      	ldr	r2, [pc, #32]	; (800c05c <prvCheckForValidListAndQueue+0x60>)
 800c03a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c03c:	4b07      	ldr	r3, [pc, #28]	; (800c05c <prvCheckForValidListAndQueue+0x60>)
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	2b00      	cmp	r3, #0
 800c042:	d005      	beq.n	800c050 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c044:	4b05      	ldr	r3, [pc, #20]	; (800c05c <prvCheckForValidListAndQueue+0x60>)
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	490b      	ldr	r1, [pc, #44]	; (800c078 <prvCheckForValidListAndQueue+0x7c>)
 800c04a:	4618      	mov	r0, r3
 800c04c:	f7fe fba4 	bl	800a798 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c050:	f000 f970 	bl	800c334 <vPortExitCritical>
}
 800c054:	bf00      	nop
 800c056:	46bd      	mov	sp, r7
 800c058:	bd80      	pop	{r7, pc}
 800c05a:	bf00      	nop
 800c05c:	24001d0c 	.word	0x24001d0c
 800c060:	24001cdc 	.word	0x24001cdc
 800c064:	24001cf0 	.word	0x24001cf0
 800c068:	24001d04 	.word	0x24001d04
 800c06c:	24001d08 	.word	0x24001d08
 800c070:	24001db8 	.word	0x24001db8
 800c074:	24001d18 	.word	0x24001d18
 800c078:	0800f720 	.word	0x0800f720

0800c07c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c07c:	b480      	push	{r7}
 800c07e:	b085      	sub	sp, #20
 800c080:	af00      	add	r7, sp, #0
 800c082:	60f8      	str	r0, [r7, #12]
 800c084:	60b9      	str	r1, [r7, #8]
 800c086:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	3b04      	subs	r3, #4
 800c08c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c094:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	3b04      	subs	r3, #4
 800c09a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c09c:	68bb      	ldr	r3, [r7, #8]
 800c09e:	f023 0201 	bic.w	r2, r3, #1
 800c0a2:	68fb      	ldr	r3, [r7, #12]
 800c0a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	3b04      	subs	r3, #4
 800c0aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c0ac:	4a0c      	ldr	r2, [pc, #48]	; (800c0e0 <pxPortInitialiseStack+0x64>)
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	3b14      	subs	r3, #20
 800c0b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c0b8:	687a      	ldr	r2, [r7, #4]
 800c0ba:	68fb      	ldr	r3, [r7, #12]
 800c0bc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	3b04      	subs	r3, #4
 800c0c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	f06f 0202 	mvn.w	r2, #2
 800c0ca:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c0cc:	68fb      	ldr	r3, [r7, #12]
 800c0ce:	3b20      	subs	r3, #32
 800c0d0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c0d2:	68fb      	ldr	r3, [r7, #12]
}
 800c0d4:	4618      	mov	r0, r3
 800c0d6:	3714      	adds	r7, #20
 800c0d8:	46bd      	mov	sp, r7
 800c0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0de:	4770      	bx	lr
 800c0e0:	0800c0e5 	.word	0x0800c0e5

0800c0e4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c0e4:	b480      	push	{r7}
 800c0e6:	b085      	sub	sp, #20
 800c0e8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c0ea:	2300      	movs	r3, #0
 800c0ec:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c0ee:	4b12      	ldr	r3, [pc, #72]	; (800c138 <prvTaskExitError+0x54>)
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0f6:	d00a      	beq.n	800c10e <prvTaskExitError+0x2a>
	__asm volatile
 800c0f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0fc:	f383 8811 	msr	BASEPRI, r3
 800c100:	f3bf 8f6f 	isb	sy
 800c104:	f3bf 8f4f 	dsb	sy
 800c108:	60fb      	str	r3, [r7, #12]
}
 800c10a:	bf00      	nop
 800c10c:	e7fe      	b.n	800c10c <prvTaskExitError+0x28>
	__asm volatile
 800c10e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c112:	f383 8811 	msr	BASEPRI, r3
 800c116:	f3bf 8f6f 	isb	sy
 800c11a:	f3bf 8f4f 	dsb	sy
 800c11e:	60bb      	str	r3, [r7, #8]
}
 800c120:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c122:	bf00      	nop
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	2b00      	cmp	r3, #0
 800c128:	d0fc      	beq.n	800c124 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c12a:	bf00      	nop
 800c12c:	bf00      	nop
 800c12e:	3714      	adds	r7, #20
 800c130:	46bd      	mov	sp, r7
 800c132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c136:	4770      	bx	lr
 800c138:	24000018 	.word	0x24000018
 800c13c:	00000000 	.word	0x00000000

0800c140 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c140:	4b07      	ldr	r3, [pc, #28]	; (800c160 <pxCurrentTCBConst2>)
 800c142:	6819      	ldr	r1, [r3, #0]
 800c144:	6808      	ldr	r0, [r1, #0]
 800c146:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c14a:	f380 8809 	msr	PSP, r0
 800c14e:	f3bf 8f6f 	isb	sy
 800c152:	f04f 0000 	mov.w	r0, #0
 800c156:	f380 8811 	msr	BASEPRI, r0
 800c15a:	4770      	bx	lr
 800c15c:	f3af 8000 	nop.w

0800c160 <pxCurrentTCBConst2>:
 800c160:	240017dc 	.word	0x240017dc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c164:	bf00      	nop
 800c166:	bf00      	nop

0800c168 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c168:	4808      	ldr	r0, [pc, #32]	; (800c18c <prvPortStartFirstTask+0x24>)
 800c16a:	6800      	ldr	r0, [r0, #0]
 800c16c:	6800      	ldr	r0, [r0, #0]
 800c16e:	f380 8808 	msr	MSP, r0
 800c172:	f04f 0000 	mov.w	r0, #0
 800c176:	f380 8814 	msr	CONTROL, r0
 800c17a:	b662      	cpsie	i
 800c17c:	b661      	cpsie	f
 800c17e:	f3bf 8f4f 	dsb	sy
 800c182:	f3bf 8f6f 	isb	sy
 800c186:	df00      	svc	0
 800c188:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c18a:	bf00      	nop
 800c18c:	e000ed08 	.word	0xe000ed08

0800c190 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c190:	b580      	push	{r7, lr}
 800c192:	b086      	sub	sp, #24
 800c194:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c196:	4b46      	ldr	r3, [pc, #280]	; (800c2b0 <xPortStartScheduler+0x120>)
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	4a46      	ldr	r2, [pc, #280]	; (800c2b4 <xPortStartScheduler+0x124>)
 800c19c:	4293      	cmp	r3, r2
 800c19e:	d10a      	bne.n	800c1b6 <xPortStartScheduler+0x26>
	__asm volatile
 800c1a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1a4:	f383 8811 	msr	BASEPRI, r3
 800c1a8:	f3bf 8f6f 	isb	sy
 800c1ac:	f3bf 8f4f 	dsb	sy
 800c1b0:	613b      	str	r3, [r7, #16]
}
 800c1b2:	bf00      	nop
 800c1b4:	e7fe      	b.n	800c1b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c1b6:	4b3e      	ldr	r3, [pc, #248]	; (800c2b0 <xPortStartScheduler+0x120>)
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	4a3f      	ldr	r2, [pc, #252]	; (800c2b8 <xPortStartScheduler+0x128>)
 800c1bc:	4293      	cmp	r3, r2
 800c1be:	d10a      	bne.n	800c1d6 <xPortStartScheduler+0x46>
	__asm volatile
 800c1c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1c4:	f383 8811 	msr	BASEPRI, r3
 800c1c8:	f3bf 8f6f 	isb	sy
 800c1cc:	f3bf 8f4f 	dsb	sy
 800c1d0:	60fb      	str	r3, [r7, #12]
}
 800c1d2:	bf00      	nop
 800c1d4:	e7fe      	b.n	800c1d4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c1d6:	4b39      	ldr	r3, [pc, #228]	; (800c2bc <xPortStartScheduler+0x12c>)
 800c1d8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c1da:	697b      	ldr	r3, [r7, #20]
 800c1dc:	781b      	ldrb	r3, [r3, #0]
 800c1de:	b2db      	uxtb	r3, r3
 800c1e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c1e2:	697b      	ldr	r3, [r7, #20]
 800c1e4:	22ff      	movs	r2, #255	; 0xff
 800c1e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c1e8:	697b      	ldr	r3, [r7, #20]
 800c1ea:	781b      	ldrb	r3, [r3, #0]
 800c1ec:	b2db      	uxtb	r3, r3
 800c1ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c1f0:	78fb      	ldrb	r3, [r7, #3]
 800c1f2:	b2db      	uxtb	r3, r3
 800c1f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c1f8:	b2da      	uxtb	r2, r3
 800c1fa:	4b31      	ldr	r3, [pc, #196]	; (800c2c0 <xPortStartScheduler+0x130>)
 800c1fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c1fe:	4b31      	ldr	r3, [pc, #196]	; (800c2c4 <xPortStartScheduler+0x134>)
 800c200:	2207      	movs	r2, #7
 800c202:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c204:	e009      	b.n	800c21a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800c206:	4b2f      	ldr	r3, [pc, #188]	; (800c2c4 <xPortStartScheduler+0x134>)
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	3b01      	subs	r3, #1
 800c20c:	4a2d      	ldr	r2, [pc, #180]	; (800c2c4 <xPortStartScheduler+0x134>)
 800c20e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c210:	78fb      	ldrb	r3, [r7, #3]
 800c212:	b2db      	uxtb	r3, r3
 800c214:	005b      	lsls	r3, r3, #1
 800c216:	b2db      	uxtb	r3, r3
 800c218:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c21a:	78fb      	ldrb	r3, [r7, #3]
 800c21c:	b2db      	uxtb	r3, r3
 800c21e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c222:	2b80      	cmp	r3, #128	; 0x80
 800c224:	d0ef      	beq.n	800c206 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c226:	4b27      	ldr	r3, [pc, #156]	; (800c2c4 <xPortStartScheduler+0x134>)
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	f1c3 0307 	rsb	r3, r3, #7
 800c22e:	2b04      	cmp	r3, #4
 800c230:	d00a      	beq.n	800c248 <xPortStartScheduler+0xb8>
	__asm volatile
 800c232:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c236:	f383 8811 	msr	BASEPRI, r3
 800c23a:	f3bf 8f6f 	isb	sy
 800c23e:	f3bf 8f4f 	dsb	sy
 800c242:	60bb      	str	r3, [r7, #8]
}
 800c244:	bf00      	nop
 800c246:	e7fe      	b.n	800c246 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c248:	4b1e      	ldr	r3, [pc, #120]	; (800c2c4 <xPortStartScheduler+0x134>)
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	021b      	lsls	r3, r3, #8
 800c24e:	4a1d      	ldr	r2, [pc, #116]	; (800c2c4 <xPortStartScheduler+0x134>)
 800c250:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c252:	4b1c      	ldr	r3, [pc, #112]	; (800c2c4 <xPortStartScheduler+0x134>)
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c25a:	4a1a      	ldr	r2, [pc, #104]	; (800c2c4 <xPortStartScheduler+0x134>)
 800c25c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	b2da      	uxtb	r2, r3
 800c262:	697b      	ldr	r3, [r7, #20]
 800c264:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c266:	4b18      	ldr	r3, [pc, #96]	; (800c2c8 <xPortStartScheduler+0x138>)
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	4a17      	ldr	r2, [pc, #92]	; (800c2c8 <xPortStartScheduler+0x138>)
 800c26c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c270:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c272:	4b15      	ldr	r3, [pc, #84]	; (800c2c8 <xPortStartScheduler+0x138>)
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	4a14      	ldr	r2, [pc, #80]	; (800c2c8 <xPortStartScheduler+0x138>)
 800c278:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c27c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c27e:	f000 f8dd 	bl	800c43c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c282:	4b12      	ldr	r3, [pc, #72]	; (800c2cc <xPortStartScheduler+0x13c>)
 800c284:	2200      	movs	r2, #0
 800c286:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c288:	f000 f8fc 	bl	800c484 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c28c:	4b10      	ldr	r3, [pc, #64]	; (800c2d0 <xPortStartScheduler+0x140>)
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	4a0f      	ldr	r2, [pc, #60]	; (800c2d0 <xPortStartScheduler+0x140>)
 800c292:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c296:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c298:	f7ff ff66 	bl	800c168 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c29c:	f7fe ff4c 	bl	800b138 <vTaskSwitchContext>
	prvTaskExitError();
 800c2a0:	f7ff ff20 	bl	800c0e4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c2a4:	2300      	movs	r3, #0
}
 800c2a6:	4618      	mov	r0, r3
 800c2a8:	3718      	adds	r7, #24
 800c2aa:	46bd      	mov	sp, r7
 800c2ac:	bd80      	pop	{r7, pc}
 800c2ae:	bf00      	nop
 800c2b0:	e000ed00 	.word	0xe000ed00
 800c2b4:	410fc271 	.word	0x410fc271
 800c2b8:	410fc270 	.word	0x410fc270
 800c2bc:	e000e400 	.word	0xe000e400
 800c2c0:	24001e08 	.word	0x24001e08
 800c2c4:	24001e0c 	.word	0x24001e0c
 800c2c8:	e000ed20 	.word	0xe000ed20
 800c2cc:	24000018 	.word	0x24000018
 800c2d0:	e000ef34 	.word	0xe000ef34

0800c2d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c2d4:	b480      	push	{r7}
 800c2d6:	b083      	sub	sp, #12
 800c2d8:	af00      	add	r7, sp, #0
	__asm volatile
 800c2da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2de:	f383 8811 	msr	BASEPRI, r3
 800c2e2:	f3bf 8f6f 	isb	sy
 800c2e6:	f3bf 8f4f 	dsb	sy
 800c2ea:	607b      	str	r3, [r7, #4]
}
 800c2ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c2ee:	4b0f      	ldr	r3, [pc, #60]	; (800c32c <vPortEnterCritical+0x58>)
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	3301      	adds	r3, #1
 800c2f4:	4a0d      	ldr	r2, [pc, #52]	; (800c32c <vPortEnterCritical+0x58>)
 800c2f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c2f8:	4b0c      	ldr	r3, [pc, #48]	; (800c32c <vPortEnterCritical+0x58>)
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	2b01      	cmp	r3, #1
 800c2fe:	d10f      	bne.n	800c320 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c300:	4b0b      	ldr	r3, [pc, #44]	; (800c330 <vPortEnterCritical+0x5c>)
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	b2db      	uxtb	r3, r3
 800c306:	2b00      	cmp	r3, #0
 800c308:	d00a      	beq.n	800c320 <vPortEnterCritical+0x4c>
	__asm volatile
 800c30a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c30e:	f383 8811 	msr	BASEPRI, r3
 800c312:	f3bf 8f6f 	isb	sy
 800c316:	f3bf 8f4f 	dsb	sy
 800c31a:	603b      	str	r3, [r7, #0]
}
 800c31c:	bf00      	nop
 800c31e:	e7fe      	b.n	800c31e <vPortEnterCritical+0x4a>
	}
}
 800c320:	bf00      	nop
 800c322:	370c      	adds	r7, #12
 800c324:	46bd      	mov	sp, r7
 800c326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c32a:	4770      	bx	lr
 800c32c:	24000018 	.word	0x24000018
 800c330:	e000ed04 	.word	0xe000ed04

0800c334 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c334:	b480      	push	{r7}
 800c336:	b083      	sub	sp, #12
 800c338:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c33a:	4b12      	ldr	r3, [pc, #72]	; (800c384 <vPortExitCritical+0x50>)
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d10a      	bne.n	800c358 <vPortExitCritical+0x24>
	__asm volatile
 800c342:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c346:	f383 8811 	msr	BASEPRI, r3
 800c34a:	f3bf 8f6f 	isb	sy
 800c34e:	f3bf 8f4f 	dsb	sy
 800c352:	607b      	str	r3, [r7, #4]
}
 800c354:	bf00      	nop
 800c356:	e7fe      	b.n	800c356 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c358:	4b0a      	ldr	r3, [pc, #40]	; (800c384 <vPortExitCritical+0x50>)
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	3b01      	subs	r3, #1
 800c35e:	4a09      	ldr	r2, [pc, #36]	; (800c384 <vPortExitCritical+0x50>)
 800c360:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c362:	4b08      	ldr	r3, [pc, #32]	; (800c384 <vPortExitCritical+0x50>)
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	2b00      	cmp	r3, #0
 800c368:	d105      	bne.n	800c376 <vPortExitCritical+0x42>
 800c36a:	2300      	movs	r3, #0
 800c36c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c36e:	683b      	ldr	r3, [r7, #0]
 800c370:	f383 8811 	msr	BASEPRI, r3
}
 800c374:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c376:	bf00      	nop
 800c378:	370c      	adds	r7, #12
 800c37a:	46bd      	mov	sp, r7
 800c37c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c380:	4770      	bx	lr
 800c382:	bf00      	nop
 800c384:	24000018 	.word	0x24000018
	...

0800c390 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c390:	f3ef 8009 	mrs	r0, PSP
 800c394:	f3bf 8f6f 	isb	sy
 800c398:	4b15      	ldr	r3, [pc, #84]	; (800c3f0 <pxCurrentTCBConst>)
 800c39a:	681a      	ldr	r2, [r3, #0]
 800c39c:	f01e 0f10 	tst.w	lr, #16
 800c3a0:	bf08      	it	eq
 800c3a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c3a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3aa:	6010      	str	r0, [r2, #0]
 800c3ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c3b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c3b4:	f380 8811 	msr	BASEPRI, r0
 800c3b8:	f3bf 8f4f 	dsb	sy
 800c3bc:	f3bf 8f6f 	isb	sy
 800c3c0:	f7fe feba 	bl	800b138 <vTaskSwitchContext>
 800c3c4:	f04f 0000 	mov.w	r0, #0
 800c3c8:	f380 8811 	msr	BASEPRI, r0
 800c3cc:	bc09      	pop	{r0, r3}
 800c3ce:	6819      	ldr	r1, [r3, #0]
 800c3d0:	6808      	ldr	r0, [r1, #0]
 800c3d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3d6:	f01e 0f10 	tst.w	lr, #16
 800c3da:	bf08      	it	eq
 800c3dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c3e0:	f380 8809 	msr	PSP, r0
 800c3e4:	f3bf 8f6f 	isb	sy
 800c3e8:	4770      	bx	lr
 800c3ea:	bf00      	nop
 800c3ec:	f3af 8000 	nop.w

0800c3f0 <pxCurrentTCBConst>:
 800c3f0:	240017dc 	.word	0x240017dc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c3f4:	bf00      	nop
 800c3f6:	bf00      	nop

0800c3f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c3f8:	b580      	push	{r7, lr}
 800c3fa:	b082      	sub	sp, #8
 800c3fc:	af00      	add	r7, sp, #0
	__asm volatile
 800c3fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c402:	f383 8811 	msr	BASEPRI, r3
 800c406:	f3bf 8f6f 	isb	sy
 800c40a:	f3bf 8f4f 	dsb	sy
 800c40e:	607b      	str	r3, [r7, #4]
}
 800c410:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c412:	f7fe fdd7 	bl	800afc4 <xTaskIncrementTick>
 800c416:	4603      	mov	r3, r0
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d003      	beq.n	800c424 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c41c:	4b06      	ldr	r3, [pc, #24]	; (800c438 <xPortSysTickHandler+0x40>)
 800c41e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c422:	601a      	str	r2, [r3, #0]
 800c424:	2300      	movs	r3, #0
 800c426:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c428:	683b      	ldr	r3, [r7, #0]
 800c42a:	f383 8811 	msr	BASEPRI, r3
}
 800c42e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c430:	bf00      	nop
 800c432:	3708      	adds	r7, #8
 800c434:	46bd      	mov	sp, r7
 800c436:	bd80      	pop	{r7, pc}
 800c438:	e000ed04 	.word	0xe000ed04

0800c43c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c43c:	b480      	push	{r7}
 800c43e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c440:	4b0b      	ldr	r3, [pc, #44]	; (800c470 <vPortSetupTimerInterrupt+0x34>)
 800c442:	2200      	movs	r2, #0
 800c444:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c446:	4b0b      	ldr	r3, [pc, #44]	; (800c474 <vPortSetupTimerInterrupt+0x38>)
 800c448:	2200      	movs	r2, #0
 800c44a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c44c:	4b0a      	ldr	r3, [pc, #40]	; (800c478 <vPortSetupTimerInterrupt+0x3c>)
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	4a0a      	ldr	r2, [pc, #40]	; (800c47c <vPortSetupTimerInterrupt+0x40>)
 800c452:	fba2 2303 	umull	r2, r3, r2, r3
 800c456:	099b      	lsrs	r3, r3, #6
 800c458:	4a09      	ldr	r2, [pc, #36]	; (800c480 <vPortSetupTimerInterrupt+0x44>)
 800c45a:	3b01      	subs	r3, #1
 800c45c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c45e:	4b04      	ldr	r3, [pc, #16]	; (800c470 <vPortSetupTimerInterrupt+0x34>)
 800c460:	2207      	movs	r2, #7
 800c462:	601a      	str	r2, [r3, #0]
}
 800c464:	bf00      	nop
 800c466:	46bd      	mov	sp, r7
 800c468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c46c:	4770      	bx	lr
 800c46e:	bf00      	nop
 800c470:	e000e010 	.word	0xe000e010
 800c474:	e000e018 	.word	0xe000e018
 800c478:	24000008 	.word	0x24000008
 800c47c:	10624dd3 	.word	0x10624dd3
 800c480:	e000e014 	.word	0xe000e014

0800c484 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c484:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c494 <vPortEnableVFP+0x10>
 800c488:	6801      	ldr	r1, [r0, #0]
 800c48a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c48e:	6001      	str	r1, [r0, #0]
 800c490:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c492:	bf00      	nop
 800c494:	e000ed88 	.word	0xe000ed88

0800c498 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c498:	b480      	push	{r7}
 800c49a:	b085      	sub	sp, #20
 800c49c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c49e:	f3ef 8305 	mrs	r3, IPSR
 800c4a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	2b0f      	cmp	r3, #15
 800c4a8:	d914      	bls.n	800c4d4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c4aa:	4a17      	ldr	r2, [pc, #92]	; (800c508 <vPortValidateInterruptPriority+0x70>)
 800c4ac:	68fb      	ldr	r3, [r7, #12]
 800c4ae:	4413      	add	r3, r2
 800c4b0:	781b      	ldrb	r3, [r3, #0]
 800c4b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c4b4:	4b15      	ldr	r3, [pc, #84]	; (800c50c <vPortValidateInterruptPriority+0x74>)
 800c4b6:	781b      	ldrb	r3, [r3, #0]
 800c4b8:	7afa      	ldrb	r2, [r7, #11]
 800c4ba:	429a      	cmp	r2, r3
 800c4bc:	d20a      	bcs.n	800c4d4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800c4be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4c2:	f383 8811 	msr	BASEPRI, r3
 800c4c6:	f3bf 8f6f 	isb	sy
 800c4ca:	f3bf 8f4f 	dsb	sy
 800c4ce:	607b      	str	r3, [r7, #4]
}
 800c4d0:	bf00      	nop
 800c4d2:	e7fe      	b.n	800c4d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c4d4:	4b0e      	ldr	r3, [pc, #56]	; (800c510 <vPortValidateInterruptPriority+0x78>)
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c4dc:	4b0d      	ldr	r3, [pc, #52]	; (800c514 <vPortValidateInterruptPriority+0x7c>)
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	429a      	cmp	r2, r3
 800c4e2:	d90a      	bls.n	800c4fa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800c4e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4e8:	f383 8811 	msr	BASEPRI, r3
 800c4ec:	f3bf 8f6f 	isb	sy
 800c4f0:	f3bf 8f4f 	dsb	sy
 800c4f4:	603b      	str	r3, [r7, #0]
}
 800c4f6:	bf00      	nop
 800c4f8:	e7fe      	b.n	800c4f8 <vPortValidateInterruptPriority+0x60>
	}
 800c4fa:	bf00      	nop
 800c4fc:	3714      	adds	r7, #20
 800c4fe:	46bd      	mov	sp, r7
 800c500:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c504:	4770      	bx	lr
 800c506:	bf00      	nop
 800c508:	e000e3f0 	.word	0xe000e3f0
 800c50c:	24001e08 	.word	0x24001e08
 800c510:	e000ed0c 	.word	0xe000ed0c
 800c514:	24001e0c 	.word	0x24001e0c

0800c518 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c518:	b580      	push	{r7, lr}
 800c51a:	b08a      	sub	sp, #40	; 0x28
 800c51c:	af00      	add	r7, sp, #0
 800c51e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c520:	2300      	movs	r3, #0
 800c522:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c524:	f7fe fc92 	bl	800ae4c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c528:	4b5b      	ldr	r3, [pc, #364]	; (800c698 <pvPortMalloc+0x180>)
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	d101      	bne.n	800c534 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c530:	f000 f920 	bl	800c774 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c534:	4b59      	ldr	r3, [pc, #356]	; (800c69c <pvPortMalloc+0x184>)
 800c536:	681a      	ldr	r2, [r3, #0]
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	4013      	ands	r3, r2
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	f040 8093 	bne.w	800c668 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	2b00      	cmp	r3, #0
 800c546:	d01d      	beq.n	800c584 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800c548:	2208      	movs	r2, #8
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	4413      	add	r3, r2
 800c54e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	f003 0307 	and.w	r3, r3, #7
 800c556:	2b00      	cmp	r3, #0
 800c558:	d014      	beq.n	800c584 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	f023 0307 	bic.w	r3, r3, #7
 800c560:	3308      	adds	r3, #8
 800c562:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	f003 0307 	and.w	r3, r3, #7
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d00a      	beq.n	800c584 <pvPortMalloc+0x6c>
	__asm volatile
 800c56e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c572:	f383 8811 	msr	BASEPRI, r3
 800c576:	f3bf 8f6f 	isb	sy
 800c57a:	f3bf 8f4f 	dsb	sy
 800c57e:	617b      	str	r3, [r7, #20]
}
 800c580:	bf00      	nop
 800c582:	e7fe      	b.n	800c582 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	2b00      	cmp	r3, #0
 800c588:	d06e      	beq.n	800c668 <pvPortMalloc+0x150>
 800c58a:	4b45      	ldr	r3, [pc, #276]	; (800c6a0 <pvPortMalloc+0x188>)
 800c58c:	681b      	ldr	r3, [r3, #0]
 800c58e:	687a      	ldr	r2, [r7, #4]
 800c590:	429a      	cmp	r2, r3
 800c592:	d869      	bhi.n	800c668 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c594:	4b43      	ldr	r3, [pc, #268]	; (800c6a4 <pvPortMalloc+0x18c>)
 800c596:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c598:	4b42      	ldr	r3, [pc, #264]	; (800c6a4 <pvPortMalloc+0x18c>)
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c59e:	e004      	b.n	800c5aa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800c5a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c5a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c5aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5ac:	685b      	ldr	r3, [r3, #4]
 800c5ae:	687a      	ldr	r2, [r7, #4]
 800c5b0:	429a      	cmp	r2, r3
 800c5b2:	d903      	bls.n	800c5bc <pvPortMalloc+0xa4>
 800c5b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d1f1      	bne.n	800c5a0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c5bc:	4b36      	ldr	r3, [pc, #216]	; (800c698 <pvPortMalloc+0x180>)
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c5c2:	429a      	cmp	r2, r3
 800c5c4:	d050      	beq.n	800c668 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c5c6:	6a3b      	ldr	r3, [r7, #32]
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	2208      	movs	r2, #8
 800c5cc:	4413      	add	r3, r2
 800c5ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c5d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5d2:	681a      	ldr	r2, [r3, #0]
 800c5d4:	6a3b      	ldr	r3, [r7, #32]
 800c5d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c5d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5da:	685a      	ldr	r2, [r3, #4]
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	1ad2      	subs	r2, r2, r3
 800c5e0:	2308      	movs	r3, #8
 800c5e2:	005b      	lsls	r3, r3, #1
 800c5e4:	429a      	cmp	r2, r3
 800c5e6:	d91f      	bls.n	800c628 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c5e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	4413      	add	r3, r2
 800c5ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c5f0:	69bb      	ldr	r3, [r7, #24]
 800c5f2:	f003 0307 	and.w	r3, r3, #7
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d00a      	beq.n	800c610 <pvPortMalloc+0xf8>
	__asm volatile
 800c5fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5fe:	f383 8811 	msr	BASEPRI, r3
 800c602:	f3bf 8f6f 	isb	sy
 800c606:	f3bf 8f4f 	dsb	sy
 800c60a:	613b      	str	r3, [r7, #16]
}
 800c60c:	bf00      	nop
 800c60e:	e7fe      	b.n	800c60e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c612:	685a      	ldr	r2, [r3, #4]
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	1ad2      	subs	r2, r2, r3
 800c618:	69bb      	ldr	r3, [r7, #24]
 800c61a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c61c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c61e:	687a      	ldr	r2, [r7, #4]
 800c620:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c622:	69b8      	ldr	r0, [r7, #24]
 800c624:	f000 f908 	bl	800c838 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c628:	4b1d      	ldr	r3, [pc, #116]	; (800c6a0 <pvPortMalloc+0x188>)
 800c62a:	681a      	ldr	r2, [r3, #0]
 800c62c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c62e:	685b      	ldr	r3, [r3, #4]
 800c630:	1ad3      	subs	r3, r2, r3
 800c632:	4a1b      	ldr	r2, [pc, #108]	; (800c6a0 <pvPortMalloc+0x188>)
 800c634:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c636:	4b1a      	ldr	r3, [pc, #104]	; (800c6a0 <pvPortMalloc+0x188>)
 800c638:	681a      	ldr	r2, [r3, #0]
 800c63a:	4b1b      	ldr	r3, [pc, #108]	; (800c6a8 <pvPortMalloc+0x190>)
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	429a      	cmp	r2, r3
 800c640:	d203      	bcs.n	800c64a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c642:	4b17      	ldr	r3, [pc, #92]	; (800c6a0 <pvPortMalloc+0x188>)
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	4a18      	ldr	r2, [pc, #96]	; (800c6a8 <pvPortMalloc+0x190>)
 800c648:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c64a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c64c:	685a      	ldr	r2, [r3, #4]
 800c64e:	4b13      	ldr	r3, [pc, #76]	; (800c69c <pvPortMalloc+0x184>)
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	431a      	orrs	r2, r3
 800c654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c656:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c65a:	2200      	movs	r2, #0
 800c65c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c65e:	4b13      	ldr	r3, [pc, #76]	; (800c6ac <pvPortMalloc+0x194>)
 800c660:	681b      	ldr	r3, [r3, #0]
 800c662:	3301      	adds	r3, #1
 800c664:	4a11      	ldr	r2, [pc, #68]	; (800c6ac <pvPortMalloc+0x194>)
 800c666:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c668:	f7fe fbfe 	bl	800ae68 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c66c:	69fb      	ldr	r3, [r7, #28]
 800c66e:	f003 0307 	and.w	r3, r3, #7
 800c672:	2b00      	cmp	r3, #0
 800c674:	d00a      	beq.n	800c68c <pvPortMalloc+0x174>
	__asm volatile
 800c676:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c67a:	f383 8811 	msr	BASEPRI, r3
 800c67e:	f3bf 8f6f 	isb	sy
 800c682:	f3bf 8f4f 	dsb	sy
 800c686:	60fb      	str	r3, [r7, #12]
}
 800c688:	bf00      	nop
 800c68a:	e7fe      	b.n	800c68a <pvPortMalloc+0x172>
	return pvReturn;
 800c68c:	69fb      	ldr	r3, [r7, #28]
}
 800c68e:	4618      	mov	r0, r3
 800c690:	3728      	adds	r7, #40	; 0x28
 800c692:	46bd      	mov	sp, r7
 800c694:	bd80      	pop	{r7, pc}
 800c696:	bf00      	nop
 800c698:	24005a18 	.word	0x24005a18
 800c69c:	24005a2c 	.word	0x24005a2c
 800c6a0:	24005a1c 	.word	0x24005a1c
 800c6a4:	24005a10 	.word	0x24005a10
 800c6a8:	24005a20 	.word	0x24005a20
 800c6ac:	24005a24 	.word	0x24005a24

0800c6b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c6b0:	b580      	push	{r7, lr}
 800c6b2:	b086      	sub	sp, #24
 800c6b4:	af00      	add	r7, sp, #0
 800c6b6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d04d      	beq.n	800c75e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c6c2:	2308      	movs	r3, #8
 800c6c4:	425b      	negs	r3, r3
 800c6c6:	697a      	ldr	r2, [r7, #20]
 800c6c8:	4413      	add	r3, r2
 800c6ca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c6cc:	697b      	ldr	r3, [r7, #20]
 800c6ce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c6d0:	693b      	ldr	r3, [r7, #16]
 800c6d2:	685a      	ldr	r2, [r3, #4]
 800c6d4:	4b24      	ldr	r3, [pc, #144]	; (800c768 <vPortFree+0xb8>)
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	4013      	ands	r3, r2
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d10a      	bne.n	800c6f4 <vPortFree+0x44>
	__asm volatile
 800c6de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6e2:	f383 8811 	msr	BASEPRI, r3
 800c6e6:	f3bf 8f6f 	isb	sy
 800c6ea:	f3bf 8f4f 	dsb	sy
 800c6ee:	60fb      	str	r3, [r7, #12]
}
 800c6f0:	bf00      	nop
 800c6f2:	e7fe      	b.n	800c6f2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c6f4:	693b      	ldr	r3, [r7, #16]
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d00a      	beq.n	800c712 <vPortFree+0x62>
	__asm volatile
 800c6fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c700:	f383 8811 	msr	BASEPRI, r3
 800c704:	f3bf 8f6f 	isb	sy
 800c708:	f3bf 8f4f 	dsb	sy
 800c70c:	60bb      	str	r3, [r7, #8]
}
 800c70e:	bf00      	nop
 800c710:	e7fe      	b.n	800c710 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c712:	693b      	ldr	r3, [r7, #16]
 800c714:	685a      	ldr	r2, [r3, #4]
 800c716:	4b14      	ldr	r3, [pc, #80]	; (800c768 <vPortFree+0xb8>)
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	4013      	ands	r3, r2
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d01e      	beq.n	800c75e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c720:	693b      	ldr	r3, [r7, #16]
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	2b00      	cmp	r3, #0
 800c726:	d11a      	bne.n	800c75e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c728:	693b      	ldr	r3, [r7, #16]
 800c72a:	685a      	ldr	r2, [r3, #4]
 800c72c:	4b0e      	ldr	r3, [pc, #56]	; (800c768 <vPortFree+0xb8>)
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	43db      	mvns	r3, r3
 800c732:	401a      	ands	r2, r3
 800c734:	693b      	ldr	r3, [r7, #16]
 800c736:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c738:	f7fe fb88 	bl	800ae4c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c73c:	693b      	ldr	r3, [r7, #16]
 800c73e:	685a      	ldr	r2, [r3, #4]
 800c740:	4b0a      	ldr	r3, [pc, #40]	; (800c76c <vPortFree+0xbc>)
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	4413      	add	r3, r2
 800c746:	4a09      	ldr	r2, [pc, #36]	; (800c76c <vPortFree+0xbc>)
 800c748:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c74a:	6938      	ldr	r0, [r7, #16]
 800c74c:	f000 f874 	bl	800c838 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c750:	4b07      	ldr	r3, [pc, #28]	; (800c770 <vPortFree+0xc0>)
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	3301      	adds	r3, #1
 800c756:	4a06      	ldr	r2, [pc, #24]	; (800c770 <vPortFree+0xc0>)
 800c758:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c75a:	f7fe fb85 	bl	800ae68 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c75e:	bf00      	nop
 800c760:	3718      	adds	r7, #24
 800c762:	46bd      	mov	sp, r7
 800c764:	bd80      	pop	{r7, pc}
 800c766:	bf00      	nop
 800c768:	24005a2c 	.word	0x24005a2c
 800c76c:	24005a1c 	.word	0x24005a1c
 800c770:	24005a28 	.word	0x24005a28

0800c774 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c774:	b480      	push	{r7}
 800c776:	b085      	sub	sp, #20
 800c778:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c77a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800c77e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c780:	4b27      	ldr	r3, [pc, #156]	; (800c820 <prvHeapInit+0xac>)
 800c782:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c784:	68fb      	ldr	r3, [r7, #12]
 800c786:	f003 0307 	and.w	r3, r3, #7
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d00c      	beq.n	800c7a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c78e:	68fb      	ldr	r3, [r7, #12]
 800c790:	3307      	adds	r3, #7
 800c792:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c794:	68fb      	ldr	r3, [r7, #12]
 800c796:	f023 0307 	bic.w	r3, r3, #7
 800c79a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c79c:	68ba      	ldr	r2, [r7, #8]
 800c79e:	68fb      	ldr	r3, [r7, #12]
 800c7a0:	1ad3      	subs	r3, r2, r3
 800c7a2:	4a1f      	ldr	r2, [pc, #124]	; (800c820 <prvHeapInit+0xac>)
 800c7a4:	4413      	add	r3, r2
 800c7a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c7ac:	4a1d      	ldr	r2, [pc, #116]	; (800c824 <prvHeapInit+0xb0>)
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c7b2:	4b1c      	ldr	r3, [pc, #112]	; (800c824 <prvHeapInit+0xb0>)
 800c7b4:	2200      	movs	r2, #0
 800c7b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	68ba      	ldr	r2, [r7, #8]
 800c7bc:	4413      	add	r3, r2
 800c7be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c7c0:	2208      	movs	r2, #8
 800c7c2:	68fb      	ldr	r3, [r7, #12]
 800c7c4:	1a9b      	subs	r3, r3, r2
 800c7c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c7c8:	68fb      	ldr	r3, [r7, #12]
 800c7ca:	f023 0307 	bic.w	r3, r3, #7
 800c7ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c7d0:	68fb      	ldr	r3, [r7, #12]
 800c7d2:	4a15      	ldr	r2, [pc, #84]	; (800c828 <prvHeapInit+0xb4>)
 800c7d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c7d6:	4b14      	ldr	r3, [pc, #80]	; (800c828 <prvHeapInit+0xb4>)
 800c7d8:	681b      	ldr	r3, [r3, #0]
 800c7da:	2200      	movs	r2, #0
 800c7dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c7de:	4b12      	ldr	r3, [pc, #72]	; (800c828 <prvHeapInit+0xb4>)
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	2200      	movs	r2, #0
 800c7e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c7ea:	683b      	ldr	r3, [r7, #0]
 800c7ec:	68fa      	ldr	r2, [r7, #12]
 800c7ee:	1ad2      	subs	r2, r2, r3
 800c7f0:	683b      	ldr	r3, [r7, #0]
 800c7f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c7f4:	4b0c      	ldr	r3, [pc, #48]	; (800c828 <prvHeapInit+0xb4>)
 800c7f6:	681a      	ldr	r2, [r3, #0]
 800c7f8:	683b      	ldr	r3, [r7, #0]
 800c7fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c7fc:	683b      	ldr	r3, [r7, #0]
 800c7fe:	685b      	ldr	r3, [r3, #4]
 800c800:	4a0a      	ldr	r2, [pc, #40]	; (800c82c <prvHeapInit+0xb8>)
 800c802:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c804:	683b      	ldr	r3, [r7, #0]
 800c806:	685b      	ldr	r3, [r3, #4]
 800c808:	4a09      	ldr	r2, [pc, #36]	; (800c830 <prvHeapInit+0xbc>)
 800c80a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c80c:	4b09      	ldr	r3, [pc, #36]	; (800c834 <prvHeapInit+0xc0>)
 800c80e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c812:	601a      	str	r2, [r3, #0]
}
 800c814:	bf00      	nop
 800c816:	3714      	adds	r7, #20
 800c818:	46bd      	mov	sp, r7
 800c81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c81e:	4770      	bx	lr
 800c820:	24001e10 	.word	0x24001e10
 800c824:	24005a10 	.word	0x24005a10
 800c828:	24005a18 	.word	0x24005a18
 800c82c:	24005a20 	.word	0x24005a20
 800c830:	24005a1c 	.word	0x24005a1c
 800c834:	24005a2c 	.word	0x24005a2c

0800c838 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c838:	b480      	push	{r7}
 800c83a:	b085      	sub	sp, #20
 800c83c:	af00      	add	r7, sp, #0
 800c83e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c840:	4b28      	ldr	r3, [pc, #160]	; (800c8e4 <prvInsertBlockIntoFreeList+0xac>)
 800c842:	60fb      	str	r3, [r7, #12]
 800c844:	e002      	b.n	800c84c <prvInsertBlockIntoFreeList+0x14>
 800c846:	68fb      	ldr	r3, [r7, #12]
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	60fb      	str	r3, [r7, #12]
 800c84c:	68fb      	ldr	r3, [r7, #12]
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	687a      	ldr	r2, [r7, #4]
 800c852:	429a      	cmp	r2, r3
 800c854:	d8f7      	bhi.n	800c846 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c856:	68fb      	ldr	r3, [r7, #12]
 800c858:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c85a:	68fb      	ldr	r3, [r7, #12]
 800c85c:	685b      	ldr	r3, [r3, #4]
 800c85e:	68ba      	ldr	r2, [r7, #8]
 800c860:	4413      	add	r3, r2
 800c862:	687a      	ldr	r2, [r7, #4]
 800c864:	429a      	cmp	r2, r3
 800c866:	d108      	bne.n	800c87a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c868:	68fb      	ldr	r3, [r7, #12]
 800c86a:	685a      	ldr	r2, [r3, #4]
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	685b      	ldr	r3, [r3, #4]
 800c870:	441a      	add	r2, r3
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c876:	68fb      	ldr	r3, [r7, #12]
 800c878:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	685b      	ldr	r3, [r3, #4]
 800c882:	68ba      	ldr	r2, [r7, #8]
 800c884:	441a      	add	r2, r3
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	429a      	cmp	r2, r3
 800c88c:	d118      	bne.n	800c8c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c88e:	68fb      	ldr	r3, [r7, #12]
 800c890:	681a      	ldr	r2, [r3, #0]
 800c892:	4b15      	ldr	r3, [pc, #84]	; (800c8e8 <prvInsertBlockIntoFreeList+0xb0>)
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	429a      	cmp	r2, r3
 800c898:	d00d      	beq.n	800c8b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	685a      	ldr	r2, [r3, #4]
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	685b      	ldr	r3, [r3, #4]
 800c8a4:	441a      	add	r2, r3
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c8aa:	68fb      	ldr	r3, [r7, #12]
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	681a      	ldr	r2, [r3, #0]
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	601a      	str	r2, [r3, #0]
 800c8b4:	e008      	b.n	800c8c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c8b6:	4b0c      	ldr	r3, [pc, #48]	; (800c8e8 <prvInsertBlockIntoFreeList+0xb0>)
 800c8b8:	681a      	ldr	r2, [r3, #0]
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	601a      	str	r2, [r3, #0]
 800c8be:	e003      	b.n	800c8c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c8c0:	68fb      	ldr	r3, [r7, #12]
 800c8c2:	681a      	ldr	r2, [r3, #0]
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c8c8:	68fa      	ldr	r2, [r7, #12]
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	429a      	cmp	r2, r3
 800c8ce:	d002      	beq.n	800c8d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c8d0:	68fb      	ldr	r3, [r7, #12]
 800c8d2:	687a      	ldr	r2, [r7, #4]
 800c8d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c8d6:	bf00      	nop
 800c8d8:	3714      	adds	r7, #20
 800c8da:	46bd      	mov	sp, r7
 800c8dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8e0:	4770      	bx	lr
 800c8e2:	bf00      	nop
 800c8e4:	24005a10 	.word	0x24005a10
 800c8e8:	24005a18 	.word	0x24005a18

0800c8ec <__assert_func>:
 800c8ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c8ee:	4614      	mov	r4, r2
 800c8f0:	461a      	mov	r2, r3
 800c8f2:	4b09      	ldr	r3, [pc, #36]	; (800c918 <__assert_func+0x2c>)
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	4605      	mov	r5, r0
 800c8f8:	68d8      	ldr	r0, [r3, #12]
 800c8fa:	b14c      	cbz	r4, 800c910 <__assert_func+0x24>
 800c8fc:	4b07      	ldr	r3, [pc, #28]	; (800c91c <__assert_func+0x30>)
 800c8fe:	9100      	str	r1, [sp, #0]
 800c900:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c904:	4906      	ldr	r1, [pc, #24]	; (800c920 <__assert_func+0x34>)
 800c906:	462b      	mov	r3, r5
 800c908:	f000 fcda 	bl	800d2c0 <fiprintf>
 800c90c:	f000 fe86 	bl	800d61c <abort>
 800c910:	4b04      	ldr	r3, [pc, #16]	; (800c924 <__assert_func+0x38>)
 800c912:	461c      	mov	r4, r3
 800c914:	e7f3      	b.n	800c8fe <__assert_func+0x12>
 800c916:	bf00      	nop
 800c918:	24000074 	.word	0x24000074
 800c91c:	0800f874 	.word	0x0800f874
 800c920:	0800f881 	.word	0x0800f881
 800c924:	0800f8af 	.word	0x0800f8af

0800c928 <__cvt>:
 800c928:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c92a:	ed2d 8b02 	vpush	{d8}
 800c92e:	eeb0 8b40 	vmov.f64	d8, d0
 800c932:	b085      	sub	sp, #20
 800c934:	4617      	mov	r7, r2
 800c936:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800c938:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800c93a:	ee18 2a90 	vmov	r2, s17
 800c93e:	f025 0520 	bic.w	r5, r5, #32
 800c942:	2a00      	cmp	r2, #0
 800c944:	bfb6      	itet	lt
 800c946:	222d      	movlt	r2, #45	; 0x2d
 800c948:	2200      	movge	r2, #0
 800c94a:	eeb1 8b40 	vneglt.f64	d8, d0
 800c94e:	2d46      	cmp	r5, #70	; 0x46
 800c950:	460c      	mov	r4, r1
 800c952:	701a      	strb	r2, [r3, #0]
 800c954:	d004      	beq.n	800c960 <__cvt+0x38>
 800c956:	2d45      	cmp	r5, #69	; 0x45
 800c958:	d100      	bne.n	800c95c <__cvt+0x34>
 800c95a:	3401      	adds	r4, #1
 800c95c:	2102      	movs	r1, #2
 800c95e:	e000      	b.n	800c962 <__cvt+0x3a>
 800c960:	2103      	movs	r1, #3
 800c962:	ab03      	add	r3, sp, #12
 800c964:	9301      	str	r3, [sp, #4]
 800c966:	ab02      	add	r3, sp, #8
 800c968:	9300      	str	r3, [sp, #0]
 800c96a:	4622      	mov	r2, r4
 800c96c:	4633      	mov	r3, r6
 800c96e:	eeb0 0b48 	vmov.f64	d0, d8
 800c972:	f000 fee5 	bl	800d740 <_dtoa_r>
 800c976:	2d47      	cmp	r5, #71	; 0x47
 800c978:	d101      	bne.n	800c97e <__cvt+0x56>
 800c97a:	07fb      	lsls	r3, r7, #31
 800c97c:	d51a      	bpl.n	800c9b4 <__cvt+0x8c>
 800c97e:	2d46      	cmp	r5, #70	; 0x46
 800c980:	eb00 0204 	add.w	r2, r0, r4
 800c984:	d10c      	bne.n	800c9a0 <__cvt+0x78>
 800c986:	7803      	ldrb	r3, [r0, #0]
 800c988:	2b30      	cmp	r3, #48	; 0x30
 800c98a:	d107      	bne.n	800c99c <__cvt+0x74>
 800c98c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800c990:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c994:	bf1c      	itt	ne
 800c996:	f1c4 0401 	rsbne	r4, r4, #1
 800c99a:	6034      	strne	r4, [r6, #0]
 800c99c:	6833      	ldr	r3, [r6, #0]
 800c99e:	441a      	add	r2, r3
 800c9a0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800c9a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c9a8:	bf08      	it	eq
 800c9aa:	9203      	streq	r2, [sp, #12]
 800c9ac:	2130      	movs	r1, #48	; 0x30
 800c9ae:	9b03      	ldr	r3, [sp, #12]
 800c9b0:	4293      	cmp	r3, r2
 800c9b2:	d307      	bcc.n	800c9c4 <__cvt+0x9c>
 800c9b4:	9b03      	ldr	r3, [sp, #12]
 800c9b6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c9b8:	1a1b      	subs	r3, r3, r0
 800c9ba:	6013      	str	r3, [r2, #0]
 800c9bc:	b005      	add	sp, #20
 800c9be:	ecbd 8b02 	vpop	{d8}
 800c9c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c9c4:	1c5c      	adds	r4, r3, #1
 800c9c6:	9403      	str	r4, [sp, #12]
 800c9c8:	7019      	strb	r1, [r3, #0]
 800c9ca:	e7f0      	b.n	800c9ae <__cvt+0x86>

0800c9cc <__exponent>:
 800c9cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c9ce:	4603      	mov	r3, r0
 800c9d0:	2900      	cmp	r1, #0
 800c9d2:	bfb8      	it	lt
 800c9d4:	4249      	neglt	r1, r1
 800c9d6:	f803 2b02 	strb.w	r2, [r3], #2
 800c9da:	bfb4      	ite	lt
 800c9dc:	222d      	movlt	r2, #45	; 0x2d
 800c9de:	222b      	movge	r2, #43	; 0x2b
 800c9e0:	2909      	cmp	r1, #9
 800c9e2:	7042      	strb	r2, [r0, #1]
 800c9e4:	dd2a      	ble.n	800ca3c <__exponent+0x70>
 800c9e6:	f10d 0207 	add.w	r2, sp, #7
 800c9ea:	4617      	mov	r7, r2
 800c9ec:	260a      	movs	r6, #10
 800c9ee:	4694      	mov	ip, r2
 800c9f0:	fb91 f5f6 	sdiv	r5, r1, r6
 800c9f4:	fb06 1415 	mls	r4, r6, r5, r1
 800c9f8:	3430      	adds	r4, #48	; 0x30
 800c9fa:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800c9fe:	460c      	mov	r4, r1
 800ca00:	2c63      	cmp	r4, #99	; 0x63
 800ca02:	f102 32ff 	add.w	r2, r2, #4294967295
 800ca06:	4629      	mov	r1, r5
 800ca08:	dcf1      	bgt.n	800c9ee <__exponent+0x22>
 800ca0a:	3130      	adds	r1, #48	; 0x30
 800ca0c:	f1ac 0402 	sub.w	r4, ip, #2
 800ca10:	f802 1c01 	strb.w	r1, [r2, #-1]
 800ca14:	1c41      	adds	r1, r0, #1
 800ca16:	4622      	mov	r2, r4
 800ca18:	42ba      	cmp	r2, r7
 800ca1a:	d30a      	bcc.n	800ca32 <__exponent+0x66>
 800ca1c:	f10d 0209 	add.w	r2, sp, #9
 800ca20:	eba2 020c 	sub.w	r2, r2, ip
 800ca24:	42bc      	cmp	r4, r7
 800ca26:	bf88      	it	hi
 800ca28:	2200      	movhi	r2, #0
 800ca2a:	4413      	add	r3, r2
 800ca2c:	1a18      	subs	r0, r3, r0
 800ca2e:	b003      	add	sp, #12
 800ca30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ca32:	f812 5b01 	ldrb.w	r5, [r2], #1
 800ca36:	f801 5f01 	strb.w	r5, [r1, #1]!
 800ca3a:	e7ed      	b.n	800ca18 <__exponent+0x4c>
 800ca3c:	2330      	movs	r3, #48	; 0x30
 800ca3e:	3130      	adds	r1, #48	; 0x30
 800ca40:	7083      	strb	r3, [r0, #2]
 800ca42:	70c1      	strb	r1, [r0, #3]
 800ca44:	1d03      	adds	r3, r0, #4
 800ca46:	e7f1      	b.n	800ca2c <__exponent+0x60>

0800ca48 <_printf_float>:
 800ca48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca4c:	b08b      	sub	sp, #44	; 0x2c
 800ca4e:	460c      	mov	r4, r1
 800ca50:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800ca54:	4616      	mov	r6, r2
 800ca56:	461f      	mov	r7, r3
 800ca58:	4605      	mov	r5, r0
 800ca5a:	f000 fd05 	bl	800d468 <_localeconv_r>
 800ca5e:	f8d0 b000 	ldr.w	fp, [r0]
 800ca62:	4658      	mov	r0, fp
 800ca64:	f7f3 fc8c 	bl	8000380 <strlen>
 800ca68:	2300      	movs	r3, #0
 800ca6a:	9308      	str	r3, [sp, #32]
 800ca6c:	f8d8 3000 	ldr.w	r3, [r8]
 800ca70:	f894 9018 	ldrb.w	r9, [r4, #24]
 800ca74:	6822      	ldr	r2, [r4, #0]
 800ca76:	3307      	adds	r3, #7
 800ca78:	f023 0307 	bic.w	r3, r3, #7
 800ca7c:	f103 0108 	add.w	r1, r3, #8
 800ca80:	f8c8 1000 	str.w	r1, [r8]
 800ca84:	ed93 0b00 	vldr	d0, [r3]
 800ca88:	ed9f 6b97 	vldr	d6, [pc, #604]	; 800cce8 <_printf_float+0x2a0>
 800ca8c:	eeb0 7bc0 	vabs.f64	d7, d0
 800ca90:	eeb4 7b46 	vcmp.f64	d7, d6
 800ca94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca98:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 800ca9c:	4682      	mov	sl, r0
 800ca9e:	dd24      	ble.n	800caea <_printf_float+0xa2>
 800caa0:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800caa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800caa8:	d502      	bpl.n	800cab0 <_printf_float+0x68>
 800caaa:	232d      	movs	r3, #45	; 0x2d
 800caac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cab0:	498f      	ldr	r1, [pc, #572]	; (800ccf0 <_printf_float+0x2a8>)
 800cab2:	4b90      	ldr	r3, [pc, #576]	; (800ccf4 <_printf_float+0x2ac>)
 800cab4:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800cab8:	bf94      	ite	ls
 800caba:	4688      	movls	r8, r1
 800cabc:	4698      	movhi	r8, r3
 800cabe:	2303      	movs	r3, #3
 800cac0:	6123      	str	r3, [r4, #16]
 800cac2:	f022 0204 	bic.w	r2, r2, #4
 800cac6:	2300      	movs	r3, #0
 800cac8:	6022      	str	r2, [r4, #0]
 800caca:	9304      	str	r3, [sp, #16]
 800cacc:	9700      	str	r7, [sp, #0]
 800cace:	4633      	mov	r3, r6
 800cad0:	aa09      	add	r2, sp, #36	; 0x24
 800cad2:	4621      	mov	r1, r4
 800cad4:	4628      	mov	r0, r5
 800cad6:	f000 f9d1 	bl	800ce7c <_printf_common>
 800cada:	3001      	adds	r0, #1
 800cadc:	f040 808a 	bne.w	800cbf4 <_printf_float+0x1ac>
 800cae0:	f04f 30ff 	mov.w	r0, #4294967295
 800cae4:	b00b      	add	sp, #44	; 0x2c
 800cae6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800caea:	eeb4 0b40 	vcmp.f64	d0, d0
 800caee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800caf2:	d709      	bvc.n	800cb08 <_printf_float+0xc0>
 800caf4:	ee10 3a90 	vmov	r3, s1
 800caf8:	2b00      	cmp	r3, #0
 800cafa:	bfbc      	itt	lt
 800cafc:	232d      	movlt	r3, #45	; 0x2d
 800cafe:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800cb02:	497d      	ldr	r1, [pc, #500]	; (800ccf8 <_printf_float+0x2b0>)
 800cb04:	4b7d      	ldr	r3, [pc, #500]	; (800ccfc <_printf_float+0x2b4>)
 800cb06:	e7d5      	b.n	800cab4 <_printf_float+0x6c>
 800cb08:	6863      	ldr	r3, [r4, #4]
 800cb0a:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800cb0e:	9104      	str	r1, [sp, #16]
 800cb10:	1c59      	adds	r1, r3, #1
 800cb12:	d13c      	bne.n	800cb8e <_printf_float+0x146>
 800cb14:	2306      	movs	r3, #6
 800cb16:	6063      	str	r3, [r4, #4]
 800cb18:	2300      	movs	r3, #0
 800cb1a:	9303      	str	r3, [sp, #12]
 800cb1c:	ab08      	add	r3, sp, #32
 800cb1e:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800cb22:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800cb26:	ab07      	add	r3, sp, #28
 800cb28:	6861      	ldr	r1, [r4, #4]
 800cb2a:	9300      	str	r3, [sp, #0]
 800cb2c:	6022      	str	r2, [r4, #0]
 800cb2e:	f10d 031b 	add.w	r3, sp, #27
 800cb32:	4628      	mov	r0, r5
 800cb34:	f7ff fef8 	bl	800c928 <__cvt>
 800cb38:	9b04      	ldr	r3, [sp, #16]
 800cb3a:	9907      	ldr	r1, [sp, #28]
 800cb3c:	2b47      	cmp	r3, #71	; 0x47
 800cb3e:	4680      	mov	r8, r0
 800cb40:	d108      	bne.n	800cb54 <_printf_float+0x10c>
 800cb42:	1cc8      	adds	r0, r1, #3
 800cb44:	db02      	blt.n	800cb4c <_printf_float+0x104>
 800cb46:	6863      	ldr	r3, [r4, #4]
 800cb48:	4299      	cmp	r1, r3
 800cb4a:	dd41      	ble.n	800cbd0 <_printf_float+0x188>
 800cb4c:	f1a9 0902 	sub.w	r9, r9, #2
 800cb50:	fa5f f989 	uxtb.w	r9, r9
 800cb54:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800cb58:	d820      	bhi.n	800cb9c <_printf_float+0x154>
 800cb5a:	3901      	subs	r1, #1
 800cb5c:	464a      	mov	r2, r9
 800cb5e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800cb62:	9107      	str	r1, [sp, #28]
 800cb64:	f7ff ff32 	bl	800c9cc <__exponent>
 800cb68:	9a08      	ldr	r2, [sp, #32]
 800cb6a:	9004      	str	r0, [sp, #16]
 800cb6c:	1813      	adds	r3, r2, r0
 800cb6e:	2a01      	cmp	r2, #1
 800cb70:	6123      	str	r3, [r4, #16]
 800cb72:	dc02      	bgt.n	800cb7a <_printf_float+0x132>
 800cb74:	6822      	ldr	r2, [r4, #0]
 800cb76:	07d2      	lsls	r2, r2, #31
 800cb78:	d501      	bpl.n	800cb7e <_printf_float+0x136>
 800cb7a:	3301      	adds	r3, #1
 800cb7c:	6123      	str	r3, [r4, #16]
 800cb7e:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d0a2      	beq.n	800cacc <_printf_float+0x84>
 800cb86:	232d      	movs	r3, #45	; 0x2d
 800cb88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cb8c:	e79e      	b.n	800cacc <_printf_float+0x84>
 800cb8e:	9904      	ldr	r1, [sp, #16]
 800cb90:	2947      	cmp	r1, #71	; 0x47
 800cb92:	d1c1      	bne.n	800cb18 <_printf_float+0xd0>
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d1bf      	bne.n	800cb18 <_printf_float+0xd0>
 800cb98:	2301      	movs	r3, #1
 800cb9a:	e7bc      	b.n	800cb16 <_printf_float+0xce>
 800cb9c:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800cba0:	d118      	bne.n	800cbd4 <_printf_float+0x18c>
 800cba2:	2900      	cmp	r1, #0
 800cba4:	6863      	ldr	r3, [r4, #4]
 800cba6:	dd0b      	ble.n	800cbc0 <_printf_float+0x178>
 800cba8:	6121      	str	r1, [r4, #16]
 800cbaa:	b913      	cbnz	r3, 800cbb2 <_printf_float+0x16a>
 800cbac:	6822      	ldr	r2, [r4, #0]
 800cbae:	07d0      	lsls	r0, r2, #31
 800cbb0:	d502      	bpl.n	800cbb8 <_printf_float+0x170>
 800cbb2:	3301      	adds	r3, #1
 800cbb4:	440b      	add	r3, r1
 800cbb6:	6123      	str	r3, [r4, #16]
 800cbb8:	2300      	movs	r3, #0
 800cbba:	65a1      	str	r1, [r4, #88]	; 0x58
 800cbbc:	9304      	str	r3, [sp, #16]
 800cbbe:	e7de      	b.n	800cb7e <_printf_float+0x136>
 800cbc0:	b913      	cbnz	r3, 800cbc8 <_printf_float+0x180>
 800cbc2:	6822      	ldr	r2, [r4, #0]
 800cbc4:	07d2      	lsls	r2, r2, #31
 800cbc6:	d501      	bpl.n	800cbcc <_printf_float+0x184>
 800cbc8:	3302      	adds	r3, #2
 800cbca:	e7f4      	b.n	800cbb6 <_printf_float+0x16e>
 800cbcc:	2301      	movs	r3, #1
 800cbce:	e7f2      	b.n	800cbb6 <_printf_float+0x16e>
 800cbd0:	f04f 0967 	mov.w	r9, #103	; 0x67
 800cbd4:	9b08      	ldr	r3, [sp, #32]
 800cbd6:	4299      	cmp	r1, r3
 800cbd8:	db05      	blt.n	800cbe6 <_printf_float+0x19e>
 800cbda:	6823      	ldr	r3, [r4, #0]
 800cbdc:	6121      	str	r1, [r4, #16]
 800cbde:	07d8      	lsls	r0, r3, #31
 800cbe0:	d5ea      	bpl.n	800cbb8 <_printf_float+0x170>
 800cbe2:	1c4b      	adds	r3, r1, #1
 800cbe4:	e7e7      	b.n	800cbb6 <_printf_float+0x16e>
 800cbe6:	2900      	cmp	r1, #0
 800cbe8:	bfd4      	ite	le
 800cbea:	f1c1 0202 	rsble	r2, r1, #2
 800cbee:	2201      	movgt	r2, #1
 800cbf0:	4413      	add	r3, r2
 800cbf2:	e7e0      	b.n	800cbb6 <_printf_float+0x16e>
 800cbf4:	6823      	ldr	r3, [r4, #0]
 800cbf6:	055a      	lsls	r2, r3, #21
 800cbf8:	d407      	bmi.n	800cc0a <_printf_float+0x1c2>
 800cbfa:	6923      	ldr	r3, [r4, #16]
 800cbfc:	4642      	mov	r2, r8
 800cbfe:	4631      	mov	r1, r6
 800cc00:	4628      	mov	r0, r5
 800cc02:	47b8      	blx	r7
 800cc04:	3001      	adds	r0, #1
 800cc06:	d12a      	bne.n	800cc5e <_printf_float+0x216>
 800cc08:	e76a      	b.n	800cae0 <_printf_float+0x98>
 800cc0a:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800cc0e:	f240 80e0 	bls.w	800cdd2 <_printf_float+0x38a>
 800cc12:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800cc16:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800cc1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc1e:	d133      	bne.n	800cc88 <_printf_float+0x240>
 800cc20:	4a37      	ldr	r2, [pc, #220]	; (800cd00 <_printf_float+0x2b8>)
 800cc22:	2301      	movs	r3, #1
 800cc24:	4631      	mov	r1, r6
 800cc26:	4628      	mov	r0, r5
 800cc28:	47b8      	blx	r7
 800cc2a:	3001      	adds	r0, #1
 800cc2c:	f43f af58 	beq.w	800cae0 <_printf_float+0x98>
 800cc30:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800cc34:	429a      	cmp	r2, r3
 800cc36:	db02      	blt.n	800cc3e <_printf_float+0x1f6>
 800cc38:	6823      	ldr	r3, [r4, #0]
 800cc3a:	07d8      	lsls	r0, r3, #31
 800cc3c:	d50f      	bpl.n	800cc5e <_printf_float+0x216>
 800cc3e:	4653      	mov	r3, sl
 800cc40:	465a      	mov	r2, fp
 800cc42:	4631      	mov	r1, r6
 800cc44:	4628      	mov	r0, r5
 800cc46:	47b8      	blx	r7
 800cc48:	3001      	adds	r0, #1
 800cc4a:	f43f af49 	beq.w	800cae0 <_printf_float+0x98>
 800cc4e:	f04f 0800 	mov.w	r8, #0
 800cc52:	f104 091a 	add.w	r9, r4, #26
 800cc56:	9b08      	ldr	r3, [sp, #32]
 800cc58:	3b01      	subs	r3, #1
 800cc5a:	4543      	cmp	r3, r8
 800cc5c:	dc09      	bgt.n	800cc72 <_printf_float+0x22a>
 800cc5e:	6823      	ldr	r3, [r4, #0]
 800cc60:	079b      	lsls	r3, r3, #30
 800cc62:	f100 8106 	bmi.w	800ce72 <_printf_float+0x42a>
 800cc66:	68e0      	ldr	r0, [r4, #12]
 800cc68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc6a:	4298      	cmp	r0, r3
 800cc6c:	bfb8      	it	lt
 800cc6e:	4618      	movlt	r0, r3
 800cc70:	e738      	b.n	800cae4 <_printf_float+0x9c>
 800cc72:	2301      	movs	r3, #1
 800cc74:	464a      	mov	r2, r9
 800cc76:	4631      	mov	r1, r6
 800cc78:	4628      	mov	r0, r5
 800cc7a:	47b8      	blx	r7
 800cc7c:	3001      	adds	r0, #1
 800cc7e:	f43f af2f 	beq.w	800cae0 <_printf_float+0x98>
 800cc82:	f108 0801 	add.w	r8, r8, #1
 800cc86:	e7e6      	b.n	800cc56 <_printf_float+0x20e>
 800cc88:	9b07      	ldr	r3, [sp, #28]
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	dc3a      	bgt.n	800cd04 <_printf_float+0x2bc>
 800cc8e:	4a1c      	ldr	r2, [pc, #112]	; (800cd00 <_printf_float+0x2b8>)
 800cc90:	2301      	movs	r3, #1
 800cc92:	4631      	mov	r1, r6
 800cc94:	4628      	mov	r0, r5
 800cc96:	47b8      	blx	r7
 800cc98:	3001      	adds	r0, #1
 800cc9a:	f43f af21 	beq.w	800cae0 <_printf_float+0x98>
 800cc9e:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 800cca2:	4313      	orrs	r3, r2
 800cca4:	d102      	bne.n	800ccac <_printf_float+0x264>
 800cca6:	6823      	ldr	r3, [r4, #0]
 800cca8:	07d9      	lsls	r1, r3, #31
 800ccaa:	d5d8      	bpl.n	800cc5e <_printf_float+0x216>
 800ccac:	4653      	mov	r3, sl
 800ccae:	465a      	mov	r2, fp
 800ccb0:	4631      	mov	r1, r6
 800ccb2:	4628      	mov	r0, r5
 800ccb4:	47b8      	blx	r7
 800ccb6:	3001      	adds	r0, #1
 800ccb8:	f43f af12 	beq.w	800cae0 <_printf_float+0x98>
 800ccbc:	f04f 0900 	mov.w	r9, #0
 800ccc0:	f104 0a1a 	add.w	sl, r4, #26
 800ccc4:	9b07      	ldr	r3, [sp, #28]
 800ccc6:	425b      	negs	r3, r3
 800ccc8:	454b      	cmp	r3, r9
 800ccca:	dc01      	bgt.n	800ccd0 <_printf_float+0x288>
 800cccc:	9b08      	ldr	r3, [sp, #32]
 800ccce:	e795      	b.n	800cbfc <_printf_float+0x1b4>
 800ccd0:	2301      	movs	r3, #1
 800ccd2:	4652      	mov	r2, sl
 800ccd4:	4631      	mov	r1, r6
 800ccd6:	4628      	mov	r0, r5
 800ccd8:	47b8      	blx	r7
 800ccda:	3001      	adds	r0, #1
 800ccdc:	f43f af00 	beq.w	800cae0 <_printf_float+0x98>
 800cce0:	f109 0901 	add.w	r9, r9, #1
 800cce4:	e7ee      	b.n	800ccc4 <_printf_float+0x27c>
 800cce6:	bf00      	nop
 800cce8:	ffffffff 	.word	0xffffffff
 800ccec:	7fefffff 	.word	0x7fefffff
 800ccf0:	0800f8b0 	.word	0x0800f8b0
 800ccf4:	0800f8b4 	.word	0x0800f8b4
 800ccf8:	0800f8b8 	.word	0x0800f8b8
 800ccfc:	0800f8bc 	.word	0x0800f8bc
 800cd00:	0800f8c0 	.word	0x0800f8c0
 800cd04:	9a08      	ldr	r2, [sp, #32]
 800cd06:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cd08:	429a      	cmp	r2, r3
 800cd0a:	bfa8      	it	ge
 800cd0c:	461a      	movge	r2, r3
 800cd0e:	2a00      	cmp	r2, #0
 800cd10:	4691      	mov	r9, r2
 800cd12:	dc38      	bgt.n	800cd86 <_printf_float+0x33e>
 800cd14:	2300      	movs	r3, #0
 800cd16:	9305      	str	r3, [sp, #20]
 800cd18:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cd1c:	f104 021a 	add.w	r2, r4, #26
 800cd20:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cd22:	9905      	ldr	r1, [sp, #20]
 800cd24:	9304      	str	r3, [sp, #16]
 800cd26:	eba3 0309 	sub.w	r3, r3, r9
 800cd2a:	428b      	cmp	r3, r1
 800cd2c:	dc33      	bgt.n	800cd96 <_printf_float+0x34e>
 800cd2e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800cd32:	429a      	cmp	r2, r3
 800cd34:	db3c      	blt.n	800cdb0 <_printf_float+0x368>
 800cd36:	6823      	ldr	r3, [r4, #0]
 800cd38:	07da      	lsls	r2, r3, #31
 800cd3a:	d439      	bmi.n	800cdb0 <_printf_float+0x368>
 800cd3c:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 800cd40:	eba2 0903 	sub.w	r9, r2, r3
 800cd44:	9b04      	ldr	r3, [sp, #16]
 800cd46:	1ad2      	subs	r2, r2, r3
 800cd48:	4591      	cmp	r9, r2
 800cd4a:	bfa8      	it	ge
 800cd4c:	4691      	movge	r9, r2
 800cd4e:	f1b9 0f00 	cmp.w	r9, #0
 800cd52:	dc35      	bgt.n	800cdc0 <_printf_float+0x378>
 800cd54:	f04f 0800 	mov.w	r8, #0
 800cd58:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cd5c:	f104 0a1a 	add.w	sl, r4, #26
 800cd60:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800cd64:	1a9b      	subs	r3, r3, r2
 800cd66:	eba3 0309 	sub.w	r3, r3, r9
 800cd6a:	4543      	cmp	r3, r8
 800cd6c:	f77f af77 	ble.w	800cc5e <_printf_float+0x216>
 800cd70:	2301      	movs	r3, #1
 800cd72:	4652      	mov	r2, sl
 800cd74:	4631      	mov	r1, r6
 800cd76:	4628      	mov	r0, r5
 800cd78:	47b8      	blx	r7
 800cd7a:	3001      	adds	r0, #1
 800cd7c:	f43f aeb0 	beq.w	800cae0 <_printf_float+0x98>
 800cd80:	f108 0801 	add.w	r8, r8, #1
 800cd84:	e7ec      	b.n	800cd60 <_printf_float+0x318>
 800cd86:	4613      	mov	r3, r2
 800cd88:	4631      	mov	r1, r6
 800cd8a:	4642      	mov	r2, r8
 800cd8c:	4628      	mov	r0, r5
 800cd8e:	47b8      	blx	r7
 800cd90:	3001      	adds	r0, #1
 800cd92:	d1bf      	bne.n	800cd14 <_printf_float+0x2cc>
 800cd94:	e6a4      	b.n	800cae0 <_printf_float+0x98>
 800cd96:	2301      	movs	r3, #1
 800cd98:	4631      	mov	r1, r6
 800cd9a:	4628      	mov	r0, r5
 800cd9c:	9204      	str	r2, [sp, #16]
 800cd9e:	47b8      	blx	r7
 800cda0:	3001      	adds	r0, #1
 800cda2:	f43f ae9d 	beq.w	800cae0 <_printf_float+0x98>
 800cda6:	9b05      	ldr	r3, [sp, #20]
 800cda8:	9a04      	ldr	r2, [sp, #16]
 800cdaa:	3301      	adds	r3, #1
 800cdac:	9305      	str	r3, [sp, #20]
 800cdae:	e7b7      	b.n	800cd20 <_printf_float+0x2d8>
 800cdb0:	4653      	mov	r3, sl
 800cdb2:	465a      	mov	r2, fp
 800cdb4:	4631      	mov	r1, r6
 800cdb6:	4628      	mov	r0, r5
 800cdb8:	47b8      	blx	r7
 800cdba:	3001      	adds	r0, #1
 800cdbc:	d1be      	bne.n	800cd3c <_printf_float+0x2f4>
 800cdbe:	e68f      	b.n	800cae0 <_printf_float+0x98>
 800cdc0:	9a04      	ldr	r2, [sp, #16]
 800cdc2:	464b      	mov	r3, r9
 800cdc4:	4442      	add	r2, r8
 800cdc6:	4631      	mov	r1, r6
 800cdc8:	4628      	mov	r0, r5
 800cdca:	47b8      	blx	r7
 800cdcc:	3001      	adds	r0, #1
 800cdce:	d1c1      	bne.n	800cd54 <_printf_float+0x30c>
 800cdd0:	e686      	b.n	800cae0 <_printf_float+0x98>
 800cdd2:	9a08      	ldr	r2, [sp, #32]
 800cdd4:	2a01      	cmp	r2, #1
 800cdd6:	dc01      	bgt.n	800cddc <_printf_float+0x394>
 800cdd8:	07db      	lsls	r3, r3, #31
 800cdda:	d537      	bpl.n	800ce4c <_printf_float+0x404>
 800cddc:	2301      	movs	r3, #1
 800cdde:	4642      	mov	r2, r8
 800cde0:	4631      	mov	r1, r6
 800cde2:	4628      	mov	r0, r5
 800cde4:	47b8      	blx	r7
 800cde6:	3001      	adds	r0, #1
 800cde8:	f43f ae7a 	beq.w	800cae0 <_printf_float+0x98>
 800cdec:	4653      	mov	r3, sl
 800cdee:	465a      	mov	r2, fp
 800cdf0:	4631      	mov	r1, r6
 800cdf2:	4628      	mov	r0, r5
 800cdf4:	47b8      	blx	r7
 800cdf6:	3001      	adds	r0, #1
 800cdf8:	f43f ae72 	beq.w	800cae0 <_printf_float+0x98>
 800cdfc:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800ce00:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ce04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce08:	9b08      	ldr	r3, [sp, #32]
 800ce0a:	d01a      	beq.n	800ce42 <_printf_float+0x3fa>
 800ce0c:	3b01      	subs	r3, #1
 800ce0e:	f108 0201 	add.w	r2, r8, #1
 800ce12:	4631      	mov	r1, r6
 800ce14:	4628      	mov	r0, r5
 800ce16:	47b8      	blx	r7
 800ce18:	3001      	adds	r0, #1
 800ce1a:	d10e      	bne.n	800ce3a <_printf_float+0x3f2>
 800ce1c:	e660      	b.n	800cae0 <_printf_float+0x98>
 800ce1e:	2301      	movs	r3, #1
 800ce20:	464a      	mov	r2, r9
 800ce22:	4631      	mov	r1, r6
 800ce24:	4628      	mov	r0, r5
 800ce26:	47b8      	blx	r7
 800ce28:	3001      	adds	r0, #1
 800ce2a:	f43f ae59 	beq.w	800cae0 <_printf_float+0x98>
 800ce2e:	f108 0801 	add.w	r8, r8, #1
 800ce32:	9b08      	ldr	r3, [sp, #32]
 800ce34:	3b01      	subs	r3, #1
 800ce36:	4543      	cmp	r3, r8
 800ce38:	dcf1      	bgt.n	800ce1e <_printf_float+0x3d6>
 800ce3a:	9b04      	ldr	r3, [sp, #16]
 800ce3c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800ce40:	e6dd      	b.n	800cbfe <_printf_float+0x1b6>
 800ce42:	f04f 0800 	mov.w	r8, #0
 800ce46:	f104 091a 	add.w	r9, r4, #26
 800ce4a:	e7f2      	b.n	800ce32 <_printf_float+0x3ea>
 800ce4c:	2301      	movs	r3, #1
 800ce4e:	4642      	mov	r2, r8
 800ce50:	e7df      	b.n	800ce12 <_printf_float+0x3ca>
 800ce52:	2301      	movs	r3, #1
 800ce54:	464a      	mov	r2, r9
 800ce56:	4631      	mov	r1, r6
 800ce58:	4628      	mov	r0, r5
 800ce5a:	47b8      	blx	r7
 800ce5c:	3001      	adds	r0, #1
 800ce5e:	f43f ae3f 	beq.w	800cae0 <_printf_float+0x98>
 800ce62:	f108 0801 	add.w	r8, r8, #1
 800ce66:	68e3      	ldr	r3, [r4, #12]
 800ce68:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ce6a:	1a5b      	subs	r3, r3, r1
 800ce6c:	4543      	cmp	r3, r8
 800ce6e:	dcf0      	bgt.n	800ce52 <_printf_float+0x40a>
 800ce70:	e6f9      	b.n	800cc66 <_printf_float+0x21e>
 800ce72:	f04f 0800 	mov.w	r8, #0
 800ce76:	f104 0919 	add.w	r9, r4, #25
 800ce7a:	e7f4      	b.n	800ce66 <_printf_float+0x41e>

0800ce7c <_printf_common>:
 800ce7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ce80:	4616      	mov	r6, r2
 800ce82:	4699      	mov	r9, r3
 800ce84:	688a      	ldr	r2, [r1, #8]
 800ce86:	690b      	ldr	r3, [r1, #16]
 800ce88:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ce8c:	4293      	cmp	r3, r2
 800ce8e:	bfb8      	it	lt
 800ce90:	4613      	movlt	r3, r2
 800ce92:	6033      	str	r3, [r6, #0]
 800ce94:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ce98:	4607      	mov	r7, r0
 800ce9a:	460c      	mov	r4, r1
 800ce9c:	b10a      	cbz	r2, 800cea2 <_printf_common+0x26>
 800ce9e:	3301      	adds	r3, #1
 800cea0:	6033      	str	r3, [r6, #0]
 800cea2:	6823      	ldr	r3, [r4, #0]
 800cea4:	0699      	lsls	r1, r3, #26
 800cea6:	bf42      	ittt	mi
 800cea8:	6833      	ldrmi	r3, [r6, #0]
 800ceaa:	3302      	addmi	r3, #2
 800ceac:	6033      	strmi	r3, [r6, #0]
 800ceae:	6825      	ldr	r5, [r4, #0]
 800ceb0:	f015 0506 	ands.w	r5, r5, #6
 800ceb4:	d106      	bne.n	800cec4 <_printf_common+0x48>
 800ceb6:	f104 0a19 	add.w	sl, r4, #25
 800ceba:	68e3      	ldr	r3, [r4, #12]
 800cebc:	6832      	ldr	r2, [r6, #0]
 800cebe:	1a9b      	subs	r3, r3, r2
 800cec0:	42ab      	cmp	r3, r5
 800cec2:	dc26      	bgt.n	800cf12 <_printf_common+0x96>
 800cec4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800cec8:	1e13      	subs	r3, r2, #0
 800ceca:	6822      	ldr	r2, [r4, #0]
 800cecc:	bf18      	it	ne
 800cece:	2301      	movne	r3, #1
 800ced0:	0692      	lsls	r2, r2, #26
 800ced2:	d42b      	bmi.n	800cf2c <_printf_common+0xb0>
 800ced4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ced8:	4649      	mov	r1, r9
 800ceda:	4638      	mov	r0, r7
 800cedc:	47c0      	blx	r8
 800cede:	3001      	adds	r0, #1
 800cee0:	d01e      	beq.n	800cf20 <_printf_common+0xa4>
 800cee2:	6823      	ldr	r3, [r4, #0]
 800cee4:	6922      	ldr	r2, [r4, #16]
 800cee6:	f003 0306 	and.w	r3, r3, #6
 800ceea:	2b04      	cmp	r3, #4
 800ceec:	bf02      	ittt	eq
 800ceee:	68e5      	ldreq	r5, [r4, #12]
 800cef0:	6833      	ldreq	r3, [r6, #0]
 800cef2:	1aed      	subeq	r5, r5, r3
 800cef4:	68a3      	ldr	r3, [r4, #8]
 800cef6:	bf0c      	ite	eq
 800cef8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cefc:	2500      	movne	r5, #0
 800cefe:	4293      	cmp	r3, r2
 800cf00:	bfc4      	itt	gt
 800cf02:	1a9b      	subgt	r3, r3, r2
 800cf04:	18ed      	addgt	r5, r5, r3
 800cf06:	2600      	movs	r6, #0
 800cf08:	341a      	adds	r4, #26
 800cf0a:	42b5      	cmp	r5, r6
 800cf0c:	d11a      	bne.n	800cf44 <_printf_common+0xc8>
 800cf0e:	2000      	movs	r0, #0
 800cf10:	e008      	b.n	800cf24 <_printf_common+0xa8>
 800cf12:	2301      	movs	r3, #1
 800cf14:	4652      	mov	r2, sl
 800cf16:	4649      	mov	r1, r9
 800cf18:	4638      	mov	r0, r7
 800cf1a:	47c0      	blx	r8
 800cf1c:	3001      	adds	r0, #1
 800cf1e:	d103      	bne.n	800cf28 <_printf_common+0xac>
 800cf20:	f04f 30ff 	mov.w	r0, #4294967295
 800cf24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf28:	3501      	adds	r5, #1
 800cf2a:	e7c6      	b.n	800ceba <_printf_common+0x3e>
 800cf2c:	18e1      	adds	r1, r4, r3
 800cf2e:	1c5a      	adds	r2, r3, #1
 800cf30:	2030      	movs	r0, #48	; 0x30
 800cf32:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cf36:	4422      	add	r2, r4
 800cf38:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cf3c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cf40:	3302      	adds	r3, #2
 800cf42:	e7c7      	b.n	800ced4 <_printf_common+0x58>
 800cf44:	2301      	movs	r3, #1
 800cf46:	4622      	mov	r2, r4
 800cf48:	4649      	mov	r1, r9
 800cf4a:	4638      	mov	r0, r7
 800cf4c:	47c0      	blx	r8
 800cf4e:	3001      	adds	r0, #1
 800cf50:	d0e6      	beq.n	800cf20 <_printf_common+0xa4>
 800cf52:	3601      	adds	r6, #1
 800cf54:	e7d9      	b.n	800cf0a <_printf_common+0x8e>
	...

0800cf58 <_printf_i>:
 800cf58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cf5c:	7e0f      	ldrb	r7, [r1, #24]
 800cf5e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800cf60:	2f78      	cmp	r7, #120	; 0x78
 800cf62:	4691      	mov	r9, r2
 800cf64:	4680      	mov	r8, r0
 800cf66:	460c      	mov	r4, r1
 800cf68:	469a      	mov	sl, r3
 800cf6a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800cf6e:	d807      	bhi.n	800cf80 <_printf_i+0x28>
 800cf70:	2f62      	cmp	r7, #98	; 0x62
 800cf72:	d80a      	bhi.n	800cf8a <_printf_i+0x32>
 800cf74:	2f00      	cmp	r7, #0
 800cf76:	f000 80d4 	beq.w	800d122 <_printf_i+0x1ca>
 800cf7a:	2f58      	cmp	r7, #88	; 0x58
 800cf7c:	f000 80c0 	beq.w	800d100 <_printf_i+0x1a8>
 800cf80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cf84:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800cf88:	e03a      	b.n	800d000 <_printf_i+0xa8>
 800cf8a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800cf8e:	2b15      	cmp	r3, #21
 800cf90:	d8f6      	bhi.n	800cf80 <_printf_i+0x28>
 800cf92:	a101      	add	r1, pc, #4	; (adr r1, 800cf98 <_printf_i+0x40>)
 800cf94:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cf98:	0800cff1 	.word	0x0800cff1
 800cf9c:	0800d005 	.word	0x0800d005
 800cfa0:	0800cf81 	.word	0x0800cf81
 800cfa4:	0800cf81 	.word	0x0800cf81
 800cfa8:	0800cf81 	.word	0x0800cf81
 800cfac:	0800cf81 	.word	0x0800cf81
 800cfb0:	0800d005 	.word	0x0800d005
 800cfb4:	0800cf81 	.word	0x0800cf81
 800cfb8:	0800cf81 	.word	0x0800cf81
 800cfbc:	0800cf81 	.word	0x0800cf81
 800cfc0:	0800cf81 	.word	0x0800cf81
 800cfc4:	0800d109 	.word	0x0800d109
 800cfc8:	0800d031 	.word	0x0800d031
 800cfcc:	0800d0c3 	.word	0x0800d0c3
 800cfd0:	0800cf81 	.word	0x0800cf81
 800cfd4:	0800cf81 	.word	0x0800cf81
 800cfd8:	0800d12b 	.word	0x0800d12b
 800cfdc:	0800cf81 	.word	0x0800cf81
 800cfe0:	0800d031 	.word	0x0800d031
 800cfe4:	0800cf81 	.word	0x0800cf81
 800cfe8:	0800cf81 	.word	0x0800cf81
 800cfec:	0800d0cb 	.word	0x0800d0cb
 800cff0:	682b      	ldr	r3, [r5, #0]
 800cff2:	1d1a      	adds	r2, r3, #4
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	602a      	str	r2, [r5, #0]
 800cff8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cffc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d000:	2301      	movs	r3, #1
 800d002:	e09f      	b.n	800d144 <_printf_i+0x1ec>
 800d004:	6820      	ldr	r0, [r4, #0]
 800d006:	682b      	ldr	r3, [r5, #0]
 800d008:	0607      	lsls	r7, r0, #24
 800d00a:	f103 0104 	add.w	r1, r3, #4
 800d00e:	6029      	str	r1, [r5, #0]
 800d010:	d501      	bpl.n	800d016 <_printf_i+0xbe>
 800d012:	681e      	ldr	r6, [r3, #0]
 800d014:	e003      	b.n	800d01e <_printf_i+0xc6>
 800d016:	0646      	lsls	r6, r0, #25
 800d018:	d5fb      	bpl.n	800d012 <_printf_i+0xba>
 800d01a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800d01e:	2e00      	cmp	r6, #0
 800d020:	da03      	bge.n	800d02a <_printf_i+0xd2>
 800d022:	232d      	movs	r3, #45	; 0x2d
 800d024:	4276      	negs	r6, r6
 800d026:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d02a:	485a      	ldr	r0, [pc, #360]	; (800d194 <_printf_i+0x23c>)
 800d02c:	230a      	movs	r3, #10
 800d02e:	e012      	b.n	800d056 <_printf_i+0xfe>
 800d030:	682b      	ldr	r3, [r5, #0]
 800d032:	6820      	ldr	r0, [r4, #0]
 800d034:	1d19      	adds	r1, r3, #4
 800d036:	6029      	str	r1, [r5, #0]
 800d038:	0605      	lsls	r5, r0, #24
 800d03a:	d501      	bpl.n	800d040 <_printf_i+0xe8>
 800d03c:	681e      	ldr	r6, [r3, #0]
 800d03e:	e002      	b.n	800d046 <_printf_i+0xee>
 800d040:	0641      	lsls	r1, r0, #25
 800d042:	d5fb      	bpl.n	800d03c <_printf_i+0xe4>
 800d044:	881e      	ldrh	r6, [r3, #0]
 800d046:	4853      	ldr	r0, [pc, #332]	; (800d194 <_printf_i+0x23c>)
 800d048:	2f6f      	cmp	r7, #111	; 0x6f
 800d04a:	bf0c      	ite	eq
 800d04c:	2308      	moveq	r3, #8
 800d04e:	230a      	movne	r3, #10
 800d050:	2100      	movs	r1, #0
 800d052:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d056:	6865      	ldr	r5, [r4, #4]
 800d058:	60a5      	str	r5, [r4, #8]
 800d05a:	2d00      	cmp	r5, #0
 800d05c:	bfa2      	ittt	ge
 800d05e:	6821      	ldrge	r1, [r4, #0]
 800d060:	f021 0104 	bicge.w	r1, r1, #4
 800d064:	6021      	strge	r1, [r4, #0]
 800d066:	b90e      	cbnz	r6, 800d06c <_printf_i+0x114>
 800d068:	2d00      	cmp	r5, #0
 800d06a:	d04b      	beq.n	800d104 <_printf_i+0x1ac>
 800d06c:	4615      	mov	r5, r2
 800d06e:	fbb6 f1f3 	udiv	r1, r6, r3
 800d072:	fb03 6711 	mls	r7, r3, r1, r6
 800d076:	5dc7      	ldrb	r7, [r0, r7]
 800d078:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d07c:	4637      	mov	r7, r6
 800d07e:	42bb      	cmp	r3, r7
 800d080:	460e      	mov	r6, r1
 800d082:	d9f4      	bls.n	800d06e <_printf_i+0x116>
 800d084:	2b08      	cmp	r3, #8
 800d086:	d10b      	bne.n	800d0a0 <_printf_i+0x148>
 800d088:	6823      	ldr	r3, [r4, #0]
 800d08a:	07de      	lsls	r6, r3, #31
 800d08c:	d508      	bpl.n	800d0a0 <_printf_i+0x148>
 800d08e:	6923      	ldr	r3, [r4, #16]
 800d090:	6861      	ldr	r1, [r4, #4]
 800d092:	4299      	cmp	r1, r3
 800d094:	bfde      	ittt	le
 800d096:	2330      	movle	r3, #48	; 0x30
 800d098:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d09c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d0a0:	1b52      	subs	r2, r2, r5
 800d0a2:	6122      	str	r2, [r4, #16]
 800d0a4:	f8cd a000 	str.w	sl, [sp]
 800d0a8:	464b      	mov	r3, r9
 800d0aa:	aa03      	add	r2, sp, #12
 800d0ac:	4621      	mov	r1, r4
 800d0ae:	4640      	mov	r0, r8
 800d0b0:	f7ff fee4 	bl	800ce7c <_printf_common>
 800d0b4:	3001      	adds	r0, #1
 800d0b6:	d14a      	bne.n	800d14e <_printf_i+0x1f6>
 800d0b8:	f04f 30ff 	mov.w	r0, #4294967295
 800d0bc:	b004      	add	sp, #16
 800d0be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d0c2:	6823      	ldr	r3, [r4, #0]
 800d0c4:	f043 0320 	orr.w	r3, r3, #32
 800d0c8:	6023      	str	r3, [r4, #0]
 800d0ca:	4833      	ldr	r0, [pc, #204]	; (800d198 <_printf_i+0x240>)
 800d0cc:	2778      	movs	r7, #120	; 0x78
 800d0ce:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d0d2:	6823      	ldr	r3, [r4, #0]
 800d0d4:	6829      	ldr	r1, [r5, #0]
 800d0d6:	061f      	lsls	r7, r3, #24
 800d0d8:	f851 6b04 	ldr.w	r6, [r1], #4
 800d0dc:	d402      	bmi.n	800d0e4 <_printf_i+0x18c>
 800d0de:	065f      	lsls	r7, r3, #25
 800d0e0:	bf48      	it	mi
 800d0e2:	b2b6      	uxthmi	r6, r6
 800d0e4:	07df      	lsls	r7, r3, #31
 800d0e6:	bf48      	it	mi
 800d0e8:	f043 0320 	orrmi.w	r3, r3, #32
 800d0ec:	6029      	str	r1, [r5, #0]
 800d0ee:	bf48      	it	mi
 800d0f0:	6023      	strmi	r3, [r4, #0]
 800d0f2:	b91e      	cbnz	r6, 800d0fc <_printf_i+0x1a4>
 800d0f4:	6823      	ldr	r3, [r4, #0]
 800d0f6:	f023 0320 	bic.w	r3, r3, #32
 800d0fa:	6023      	str	r3, [r4, #0]
 800d0fc:	2310      	movs	r3, #16
 800d0fe:	e7a7      	b.n	800d050 <_printf_i+0xf8>
 800d100:	4824      	ldr	r0, [pc, #144]	; (800d194 <_printf_i+0x23c>)
 800d102:	e7e4      	b.n	800d0ce <_printf_i+0x176>
 800d104:	4615      	mov	r5, r2
 800d106:	e7bd      	b.n	800d084 <_printf_i+0x12c>
 800d108:	682b      	ldr	r3, [r5, #0]
 800d10a:	6826      	ldr	r6, [r4, #0]
 800d10c:	6961      	ldr	r1, [r4, #20]
 800d10e:	1d18      	adds	r0, r3, #4
 800d110:	6028      	str	r0, [r5, #0]
 800d112:	0635      	lsls	r5, r6, #24
 800d114:	681b      	ldr	r3, [r3, #0]
 800d116:	d501      	bpl.n	800d11c <_printf_i+0x1c4>
 800d118:	6019      	str	r1, [r3, #0]
 800d11a:	e002      	b.n	800d122 <_printf_i+0x1ca>
 800d11c:	0670      	lsls	r0, r6, #25
 800d11e:	d5fb      	bpl.n	800d118 <_printf_i+0x1c0>
 800d120:	8019      	strh	r1, [r3, #0]
 800d122:	2300      	movs	r3, #0
 800d124:	6123      	str	r3, [r4, #16]
 800d126:	4615      	mov	r5, r2
 800d128:	e7bc      	b.n	800d0a4 <_printf_i+0x14c>
 800d12a:	682b      	ldr	r3, [r5, #0]
 800d12c:	1d1a      	adds	r2, r3, #4
 800d12e:	602a      	str	r2, [r5, #0]
 800d130:	681d      	ldr	r5, [r3, #0]
 800d132:	6862      	ldr	r2, [r4, #4]
 800d134:	2100      	movs	r1, #0
 800d136:	4628      	mov	r0, r5
 800d138:	f7f3 f8d2 	bl	80002e0 <memchr>
 800d13c:	b108      	cbz	r0, 800d142 <_printf_i+0x1ea>
 800d13e:	1b40      	subs	r0, r0, r5
 800d140:	6060      	str	r0, [r4, #4]
 800d142:	6863      	ldr	r3, [r4, #4]
 800d144:	6123      	str	r3, [r4, #16]
 800d146:	2300      	movs	r3, #0
 800d148:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d14c:	e7aa      	b.n	800d0a4 <_printf_i+0x14c>
 800d14e:	6923      	ldr	r3, [r4, #16]
 800d150:	462a      	mov	r2, r5
 800d152:	4649      	mov	r1, r9
 800d154:	4640      	mov	r0, r8
 800d156:	47d0      	blx	sl
 800d158:	3001      	adds	r0, #1
 800d15a:	d0ad      	beq.n	800d0b8 <_printf_i+0x160>
 800d15c:	6823      	ldr	r3, [r4, #0]
 800d15e:	079b      	lsls	r3, r3, #30
 800d160:	d413      	bmi.n	800d18a <_printf_i+0x232>
 800d162:	68e0      	ldr	r0, [r4, #12]
 800d164:	9b03      	ldr	r3, [sp, #12]
 800d166:	4298      	cmp	r0, r3
 800d168:	bfb8      	it	lt
 800d16a:	4618      	movlt	r0, r3
 800d16c:	e7a6      	b.n	800d0bc <_printf_i+0x164>
 800d16e:	2301      	movs	r3, #1
 800d170:	4632      	mov	r2, r6
 800d172:	4649      	mov	r1, r9
 800d174:	4640      	mov	r0, r8
 800d176:	47d0      	blx	sl
 800d178:	3001      	adds	r0, #1
 800d17a:	d09d      	beq.n	800d0b8 <_printf_i+0x160>
 800d17c:	3501      	adds	r5, #1
 800d17e:	68e3      	ldr	r3, [r4, #12]
 800d180:	9903      	ldr	r1, [sp, #12]
 800d182:	1a5b      	subs	r3, r3, r1
 800d184:	42ab      	cmp	r3, r5
 800d186:	dcf2      	bgt.n	800d16e <_printf_i+0x216>
 800d188:	e7eb      	b.n	800d162 <_printf_i+0x20a>
 800d18a:	2500      	movs	r5, #0
 800d18c:	f104 0619 	add.w	r6, r4, #25
 800d190:	e7f5      	b.n	800d17e <_printf_i+0x226>
 800d192:	bf00      	nop
 800d194:	0800f8c2 	.word	0x0800f8c2
 800d198:	0800f8d3 	.word	0x0800f8d3

0800d19c <std>:
 800d19c:	2300      	movs	r3, #0
 800d19e:	b510      	push	{r4, lr}
 800d1a0:	4604      	mov	r4, r0
 800d1a2:	e9c0 3300 	strd	r3, r3, [r0]
 800d1a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d1aa:	6083      	str	r3, [r0, #8]
 800d1ac:	8181      	strh	r1, [r0, #12]
 800d1ae:	6643      	str	r3, [r0, #100]	; 0x64
 800d1b0:	81c2      	strh	r2, [r0, #14]
 800d1b2:	6183      	str	r3, [r0, #24]
 800d1b4:	4619      	mov	r1, r3
 800d1b6:	2208      	movs	r2, #8
 800d1b8:	305c      	adds	r0, #92	; 0x5c
 800d1ba:	f000 f928 	bl	800d40e <memset>
 800d1be:	4b05      	ldr	r3, [pc, #20]	; (800d1d4 <std+0x38>)
 800d1c0:	6263      	str	r3, [r4, #36]	; 0x24
 800d1c2:	4b05      	ldr	r3, [pc, #20]	; (800d1d8 <std+0x3c>)
 800d1c4:	62a3      	str	r3, [r4, #40]	; 0x28
 800d1c6:	4b05      	ldr	r3, [pc, #20]	; (800d1dc <std+0x40>)
 800d1c8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d1ca:	4b05      	ldr	r3, [pc, #20]	; (800d1e0 <std+0x44>)
 800d1cc:	6224      	str	r4, [r4, #32]
 800d1ce:	6323      	str	r3, [r4, #48]	; 0x30
 800d1d0:	bd10      	pop	{r4, pc}
 800d1d2:	bf00      	nop
 800d1d4:	0800d389 	.word	0x0800d389
 800d1d8:	0800d3ab 	.word	0x0800d3ab
 800d1dc:	0800d3e3 	.word	0x0800d3e3
 800d1e0:	0800d407 	.word	0x0800d407

0800d1e4 <stdio_exit_handler>:
 800d1e4:	4a02      	ldr	r2, [pc, #8]	; (800d1f0 <stdio_exit_handler+0xc>)
 800d1e6:	4903      	ldr	r1, [pc, #12]	; (800d1f4 <stdio_exit_handler+0x10>)
 800d1e8:	4803      	ldr	r0, [pc, #12]	; (800d1f8 <stdio_exit_handler+0x14>)
 800d1ea:	f000 b87b 	b.w	800d2e4 <_fwalk_sglue>
 800d1ee:	bf00      	nop
 800d1f0:	2400001c 	.word	0x2400001c
 800d1f4:	0800f155 	.word	0x0800f155
 800d1f8:	24000028 	.word	0x24000028

0800d1fc <cleanup_stdio>:
 800d1fc:	6841      	ldr	r1, [r0, #4]
 800d1fe:	4b0c      	ldr	r3, [pc, #48]	; (800d230 <cleanup_stdio+0x34>)
 800d200:	4299      	cmp	r1, r3
 800d202:	b510      	push	{r4, lr}
 800d204:	4604      	mov	r4, r0
 800d206:	d001      	beq.n	800d20c <cleanup_stdio+0x10>
 800d208:	f001 ffa4 	bl	800f154 <_fflush_r>
 800d20c:	68a1      	ldr	r1, [r4, #8]
 800d20e:	4b09      	ldr	r3, [pc, #36]	; (800d234 <cleanup_stdio+0x38>)
 800d210:	4299      	cmp	r1, r3
 800d212:	d002      	beq.n	800d21a <cleanup_stdio+0x1e>
 800d214:	4620      	mov	r0, r4
 800d216:	f001 ff9d 	bl	800f154 <_fflush_r>
 800d21a:	68e1      	ldr	r1, [r4, #12]
 800d21c:	4b06      	ldr	r3, [pc, #24]	; (800d238 <cleanup_stdio+0x3c>)
 800d21e:	4299      	cmp	r1, r3
 800d220:	d004      	beq.n	800d22c <cleanup_stdio+0x30>
 800d222:	4620      	mov	r0, r4
 800d224:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d228:	f001 bf94 	b.w	800f154 <_fflush_r>
 800d22c:	bd10      	pop	{r4, pc}
 800d22e:	bf00      	nop
 800d230:	24005a30 	.word	0x24005a30
 800d234:	24005a98 	.word	0x24005a98
 800d238:	24005b00 	.word	0x24005b00

0800d23c <global_stdio_init.part.0>:
 800d23c:	b510      	push	{r4, lr}
 800d23e:	4b0b      	ldr	r3, [pc, #44]	; (800d26c <global_stdio_init.part.0+0x30>)
 800d240:	4c0b      	ldr	r4, [pc, #44]	; (800d270 <global_stdio_init.part.0+0x34>)
 800d242:	4a0c      	ldr	r2, [pc, #48]	; (800d274 <global_stdio_init.part.0+0x38>)
 800d244:	601a      	str	r2, [r3, #0]
 800d246:	4620      	mov	r0, r4
 800d248:	2200      	movs	r2, #0
 800d24a:	2104      	movs	r1, #4
 800d24c:	f7ff ffa6 	bl	800d19c <std>
 800d250:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800d254:	2201      	movs	r2, #1
 800d256:	2109      	movs	r1, #9
 800d258:	f7ff ffa0 	bl	800d19c <std>
 800d25c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800d260:	2202      	movs	r2, #2
 800d262:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d266:	2112      	movs	r1, #18
 800d268:	f7ff bf98 	b.w	800d19c <std>
 800d26c:	24005b68 	.word	0x24005b68
 800d270:	24005a30 	.word	0x24005a30
 800d274:	0800d1e5 	.word	0x0800d1e5

0800d278 <__sfp_lock_acquire>:
 800d278:	4801      	ldr	r0, [pc, #4]	; (800d280 <__sfp_lock_acquire+0x8>)
 800d27a:	f000 b9bf 	b.w	800d5fc <__retarget_lock_acquire_recursive>
 800d27e:	bf00      	nop
 800d280:	24005b71 	.word	0x24005b71

0800d284 <__sfp_lock_release>:
 800d284:	4801      	ldr	r0, [pc, #4]	; (800d28c <__sfp_lock_release+0x8>)
 800d286:	f000 b9ba 	b.w	800d5fe <__retarget_lock_release_recursive>
 800d28a:	bf00      	nop
 800d28c:	24005b71 	.word	0x24005b71

0800d290 <__sinit>:
 800d290:	b510      	push	{r4, lr}
 800d292:	4604      	mov	r4, r0
 800d294:	f7ff fff0 	bl	800d278 <__sfp_lock_acquire>
 800d298:	6a23      	ldr	r3, [r4, #32]
 800d29a:	b11b      	cbz	r3, 800d2a4 <__sinit+0x14>
 800d29c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d2a0:	f7ff bff0 	b.w	800d284 <__sfp_lock_release>
 800d2a4:	4b04      	ldr	r3, [pc, #16]	; (800d2b8 <__sinit+0x28>)
 800d2a6:	6223      	str	r3, [r4, #32]
 800d2a8:	4b04      	ldr	r3, [pc, #16]	; (800d2bc <__sinit+0x2c>)
 800d2aa:	681b      	ldr	r3, [r3, #0]
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	d1f5      	bne.n	800d29c <__sinit+0xc>
 800d2b0:	f7ff ffc4 	bl	800d23c <global_stdio_init.part.0>
 800d2b4:	e7f2      	b.n	800d29c <__sinit+0xc>
 800d2b6:	bf00      	nop
 800d2b8:	0800d1fd 	.word	0x0800d1fd
 800d2bc:	24005b68 	.word	0x24005b68

0800d2c0 <fiprintf>:
 800d2c0:	b40e      	push	{r1, r2, r3}
 800d2c2:	b503      	push	{r0, r1, lr}
 800d2c4:	4601      	mov	r1, r0
 800d2c6:	ab03      	add	r3, sp, #12
 800d2c8:	4805      	ldr	r0, [pc, #20]	; (800d2e0 <fiprintf+0x20>)
 800d2ca:	f853 2b04 	ldr.w	r2, [r3], #4
 800d2ce:	6800      	ldr	r0, [r0, #0]
 800d2d0:	9301      	str	r3, [sp, #4]
 800d2d2:	f001 fd9f 	bl	800ee14 <_vfiprintf_r>
 800d2d6:	b002      	add	sp, #8
 800d2d8:	f85d eb04 	ldr.w	lr, [sp], #4
 800d2dc:	b003      	add	sp, #12
 800d2de:	4770      	bx	lr
 800d2e0:	24000074 	.word	0x24000074

0800d2e4 <_fwalk_sglue>:
 800d2e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d2e8:	4607      	mov	r7, r0
 800d2ea:	4688      	mov	r8, r1
 800d2ec:	4614      	mov	r4, r2
 800d2ee:	2600      	movs	r6, #0
 800d2f0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d2f4:	f1b9 0901 	subs.w	r9, r9, #1
 800d2f8:	d505      	bpl.n	800d306 <_fwalk_sglue+0x22>
 800d2fa:	6824      	ldr	r4, [r4, #0]
 800d2fc:	2c00      	cmp	r4, #0
 800d2fe:	d1f7      	bne.n	800d2f0 <_fwalk_sglue+0xc>
 800d300:	4630      	mov	r0, r6
 800d302:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d306:	89ab      	ldrh	r3, [r5, #12]
 800d308:	2b01      	cmp	r3, #1
 800d30a:	d907      	bls.n	800d31c <_fwalk_sglue+0x38>
 800d30c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d310:	3301      	adds	r3, #1
 800d312:	d003      	beq.n	800d31c <_fwalk_sglue+0x38>
 800d314:	4629      	mov	r1, r5
 800d316:	4638      	mov	r0, r7
 800d318:	47c0      	blx	r8
 800d31a:	4306      	orrs	r6, r0
 800d31c:	3568      	adds	r5, #104	; 0x68
 800d31e:	e7e9      	b.n	800d2f4 <_fwalk_sglue+0x10>

0800d320 <sniprintf>:
 800d320:	b40c      	push	{r2, r3}
 800d322:	b530      	push	{r4, r5, lr}
 800d324:	4b17      	ldr	r3, [pc, #92]	; (800d384 <sniprintf+0x64>)
 800d326:	1e0c      	subs	r4, r1, #0
 800d328:	681d      	ldr	r5, [r3, #0]
 800d32a:	b09d      	sub	sp, #116	; 0x74
 800d32c:	da08      	bge.n	800d340 <sniprintf+0x20>
 800d32e:	238b      	movs	r3, #139	; 0x8b
 800d330:	602b      	str	r3, [r5, #0]
 800d332:	f04f 30ff 	mov.w	r0, #4294967295
 800d336:	b01d      	add	sp, #116	; 0x74
 800d338:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d33c:	b002      	add	sp, #8
 800d33e:	4770      	bx	lr
 800d340:	f44f 7302 	mov.w	r3, #520	; 0x208
 800d344:	f8ad 3014 	strh.w	r3, [sp, #20]
 800d348:	bf14      	ite	ne
 800d34a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800d34e:	4623      	moveq	r3, r4
 800d350:	9304      	str	r3, [sp, #16]
 800d352:	9307      	str	r3, [sp, #28]
 800d354:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d358:	9002      	str	r0, [sp, #8]
 800d35a:	9006      	str	r0, [sp, #24]
 800d35c:	f8ad 3016 	strh.w	r3, [sp, #22]
 800d360:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800d362:	ab21      	add	r3, sp, #132	; 0x84
 800d364:	a902      	add	r1, sp, #8
 800d366:	4628      	mov	r0, r5
 800d368:	9301      	str	r3, [sp, #4]
 800d36a:	f001 fc2b 	bl	800ebc4 <_svfiprintf_r>
 800d36e:	1c43      	adds	r3, r0, #1
 800d370:	bfbc      	itt	lt
 800d372:	238b      	movlt	r3, #139	; 0x8b
 800d374:	602b      	strlt	r3, [r5, #0]
 800d376:	2c00      	cmp	r4, #0
 800d378:	d0dd      	beq.n	800d336 <sniprintf+0x16>
 800d37a:	9b02      	ldr	r3, [sp, #8]
 800d37c:	2200      	movs	r2, #0
 800d37e:	701a      	strb	r2, [r3, #0]
 800d380:	e7d9      	b.n	800d336 <sniprintf+0x16>
 800d382:	bf00      	nop
 800d384:	24000074 	.word	0x24000074

0800d388 <__sread>:
 800d388:	b510      	push	{r4, lr}
 800d38a:	460c      	mov	r4, r1
 800d38c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d390:	f000 f8e6 	bl	800d560 <_read_r>
 800d394:	2800      	cmp	r0, #0
 800d396:	bfab      	itete	ge
 800d398:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d39a:	89a3      	ldrhlt	r3, [r4, #12]
 800d39c:	181b      	addge	r3, r3, r0
 800d39e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d3a2:	bfac      	ite	ge
 800d3a4:	6563      	strge	r3, [r4, #84]	; 0x54
 800d3a6:	81a3      	strhlt	r3, [r4, #12]
 800d3a8:	bd10      	pop	{r4, pc}

0800d3aa <__swrite>:
 800d3aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d3ae:	461f      	mov	r7, r3
 800d3b0:	898b      	ldrh	r3, [r1, #12]
 800d3b2:	05db      	lsls	r3, r3, #23
 800d3b4:	4605      	mov	r5, r0
 800d3b6:	460c      	mov	r4, r1
 800d3b8:	4616      	mov	r6, r2
 800d3ba:	d505      	bpl.n	800d3c8 <__swrite+0x1e>
 800d3bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d3c0:	2302      	movs	r3, #2
 800d3c2:	2200      	movs	r2, #0
 800d3c4:	f000 f8ba 	bl	800d53c <_lseek_r>
 800d3c8:	89a3      	ldrh	r3, [r4, #12]
 800d3ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d3ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d3d2:	81a3      	strh	r3, [r4, #12]
 800d3d4:	4632      	mov	r2, r6
 800d3d6:	463b      	mov	r3, r7
 800d3d8:	4628      	mov	r0, r5
 800d3da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d3de:	f000 b8d1 	b.w	800d584 <_write_r>

0800d3e2 <__sseek>:
 800d3e2:	b510      	push	{r4, lr}
 800d3e4:	460c      	mov	r4, r1
 800d3e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d3ea:	f000 f8a7 	bl	800d53c <_lseek_r>
 800d3ee:	1c43      	adds	r3, r0, #1
 800d3f0:	89a3      	ldrh	r3, [r4, #12]
 800d3f2:	bf15      	itete	ne
 800d3f4:	6560      	strne	r0, [r4, #84]	; 0x54
 800d3f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d3fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d3fe:	81a3      	strheq	r3, [r4, #12]
 800d400:	bf18      	it	ne
 800d402:	81a3      	strhne	r3, [r4, #12]
 800d404:	bd10      	pop	{r4, pc}

0800d406 <__sclose>:
 800d406:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d40a:	f000 b831 	b.w	800d470 <_close_r>

0800d40e <memset>:
 800d40e:	4402      	add	r2, r0
 800d410:	4603      	mov	r3, r0
 800d412:	4293      	cmp	r3, r2
 800d414:	d100      	bne.n	800d418 <memset+0xa>
 800d416:	4770      	bx	lr
 800d418:	f803 1b01 	strb.w	r1, [r3], #1
 800d41c:	e7f9      	b.n	800d412 <memset+0x4>

0800d41e <strcat>:
 800d41e:	b510      	push	{r4, lr}
 800d420:	4602      	mov	r2, r0
 800d422:	7814      	ldrb	r4, [r2, #0]
 800d424:	4613      	mov	r3, r2
 800d426:	3201      	adds	r2, #1
 800d428:	2c00      	cmp	r4, #0
 800d42a:	d1fa      	bne.n	800d422 <strcat+0x4>
 800d42c:	3b01      	subs	r3, #1
 800d42e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d432:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d436:	2a00      	cmp	r2, #0
 800d438:	d1f9      	bne.n	800d42e <strcat+0x10>
 800d43a:	bd10      	pop	{r4, pc}

0800d43c <strstr>:
 800d43c:	780a      	ldrb	r2, [r1, #0]
 800d43e:	b570      	push	{r4, r5, r6, lr}
 800d440:	b96a      	cbnz	r2, 800d45e <strstr+0x22>
 800d442:	bd70      	pop	{r4, r5, r6, pc}
 800d444:	429a      	cmp	r2, r3
 800d446:	d109      	bne.n	800d45c <strstr+0x20>
 800d448:	460c      	mov	r4, r1
 800d44a:	4605      	mov	r5, r0
 800d44c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800d450:	2b00      	cmp	r3, #0
 800d452:	d0f6      	beq.n	800d442 <strstr+0x6>
 800d454:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800d458:	429e      	cmp	r6, r3
 800d45a:	d0f7      	beq.n	800d44c <strstr+0x10>
 800d45c:	3001      	adds	r0, #1
 800d45e:	7803      	ldrb	r3, [r0, #0]
 800d460:	2b00      	cmp	r3, #0
 800d462:	d1ef      	bne.n	800d444 <strstr+0x8>
 800d464:	4618      	mov	r0, r3
 800d466:	e7ec      	b.n	800d442 <strstr+0x6>

0800d468 <_localeconv_r>:
 800d468:	4800      	ldr	r0, [pc, #0]	; (800d46c <_localeconv_r+0x4>)
 800d46a:	4770      	bx	lr
 800d46c:	24000168 	.word	0x24000168

0800d470 <_close_r>:
 800d470:	b538      	push	{r3, r4, r5, lr}
 800d472:	4d06      	ldr	r5, [pc, #24]	; (800d48c <_close_r+0x1c>)
 800d474:	2300      	movs	r3, #0
 800d476:	4604      	mov	r4, r0
 800d478:	4608      	mov	r0, r1
 800d47a:	602b      	str	r3, [r5, #0]
 800d47c:	f7f4 f885 	bl	800158a <_close>
 800d480:	1c43      	adds	r3, r0, #1
 800d482:	d102      	bne.n	800d48a <_close_r+0x1a>
 800d484:	682b      	ldr	r3, [r5, #0]
 800d486:	b103      	cbz	r3, 800d48a <_close_r+0x1a>
 800d488:	6023      	str	r3, [r4, #0]
 800d48a:	bd38      	pop	{r3, r4, r5, pc}
 800d48c:	24005b6c 	.word	0x24005b6c

0800d490 <_reclaim_reent>:
 800d490:	4b29      	ldr	r3, [pc, #164]	; (800d538 <_reclaim_reent+0xa8>)
 800d492:	681b      	ldr	r3, [r3, #0]
 800d494:	4283      	cmp	r3, r0
 800d496:	b570      	push	{r4, r5, r6, lr}
 800d498:	4604      	mov	r4, r0
 800d49a:	d04b      	beq.n	800d534 <_reclaim_reent+0xa4>
 800d49c:	69c3      	ldr	r3, [r0, #28]
 800d49e:	b143      	cbz	r3, 800d4b2 <_reclaim_reent+0x22>
 800d4a0:	68db      	ldr	r3, [r3, #12]
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d144      	bne.n	800d530 <_reclaim_reent+0xa0>
 800d4a6:	69e3      	ldr	r3, [r4, #28]
 800d4a8:	6819      	ldr	r1, [r3, #0]
 800d4aa:	b111      	cbz	r1, 800d4b2 <_reclaim_reent+0x22>
 800d4ac:	4620      	mov	r0, r4
 800d4ae:	f000 feb3 	bl	800e218 <_free_r>
 800d4b2:	6961      	ldr	r1, [r4, #20]
 800d4b4:	b111      	cbz	r1, 800d4bc <_reclaim_reent+0x2c>
 800d4b6:	4620      	mov	r0, r4
 800d4b8:	f000 feae 	bl	800e218 <_free_r>
 800d4bc:	69e1      	ldr	r1, [r4, #28]
 800d4be:	b111      	cbz	r1, 800d4c6 <_reclaim_reent+0x36>
 800d4c0:	4620      	mov	r0, r4
 800d4c2:	f000 fea9 	bl	800e218 <_free_r>
 800d4c6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800d4c8:	b111      	cbz	r1, 800d4d0 <_reclaim_reent+0x40>
 800d4ca:	4620      	mov	r0, r4
 800d4cc:	f000 fea4 	bl	800e218 <_free_r>
 800d4d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d4d2:	b111      	cbz	r1, 800d4da <_reclaim_reent+0x4a>
 800d4d4:	4620      	mov	r0, r4
 800d4d6:	f000 fe9f 	bl	800e218 <_free_r>
 800d4da:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800d4dc:	b111      	cbz	r1, 800d4e4 <_reclaim_reent+0x54>
 800d4de:	4620      	mov	r0, r4
 800d4e0:	f000 fe9a 	bl	800e218 <_free_r>
 800d4e4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800d4e6:	b111      	cbz	r1, 800d4ee <_reclaim_reent+0x5e>
 800d4e8:	4620      	mov	r0, r4
 800d4ea:	f000 fe95 	bl	800e218 <_free_r>
 800d4ee:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800d4f0:	b111      	cbz	r1, 800d4f8 <_reclaim_reent+0x68>
 800d4f2:	4620      	mov	r0, r4
 800d4f4:	f000 fe90 	bl	800e218 <_free_r>
 800d4f8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800d4fa:	b111      	cbz	r1, 800d502 <_reclaim_reent+0x72>
 800d4fc:	4620      	mov	r0, r4
 800d4fe:	f000 fe8b 	bl	800e218 <_free_r>
 800d502:	6a23      	ldr	r3, [r4, #32]
 800d504:	b1b3      	cbz	r3, 800d534 <_reclaim_reent+0xa4>
 800d506:	4620      	mov	r0, r4
 800d508:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d50c:	4718      	bx	r3
 800d50e:	5949      	ldr	r1, [r1, r5]
 800d510:	b941      	cbnz	r1, 800d524 <_reclaim_reent+0x94>
 800d512:	3504      	adds	r5, #4
 800d514:	69e3      	ldr	r3, [r4, #28]
 800d516:	2d80      	cmp	r5, #128	; 0x80
 800d518:	68d9      	ldr	r1, [r3, #12]
 800d51a:	d1f8      	bne.n	800d50e <_reclaim_reent+0x7e>
 800d51c:	4620      	mov	r0, r4
 800d51e:	f000 fe7b 	bl	800e218 <_free_r>
 800d522:	e7c0      	b.n	800d4a6 <_reclaim_reent+0x16>
 800d524:	680e      	ldr	r6, [r1, #0]
 800d526:	4620      	mov	r0, r4
 800d528:	f000 fe76 	bl	800e218 <_free_r>
 800d52c:	4631      	mov	r1, r6
 800d52e:	e7ef      	b.n	800d510 <_reclaim_reent+0x80>
 800d530:	2500      	movs	r5, #0
 800d532:	e7ef      	b.n	800d514 <_reclaim_reent+0x84>
 800d534:	bd70      	pop	{r4, r5, r6, pc}
 800d536:	bf00      	nop
 800d538:	24000074 	.word	0x24000074

0800d53c <_lseek_r>:
 800d53c:	b538      	push	{r3, r4, r5, lr}
 800d53e:	4d07      	ldr	r5, [pc, #28]	; (800d55c <_lseek_r+0x20>)
 800d540:	4604      	mov	r4, r0
 800d542:	4608      	mov	r0, r1
 800d544:	4611      	mov	r1, r2
 800d546:	2200      	movs	r2, #0
 800d548:	602a      	str	r2, [r5, #0]
 800d54a:	461a      	mov	r2, r3
 800d54c:	f7f4 f844 	bl	80015d8 <_lseek>
 800d550:	1c43      	adds	r3, r0, #1
 800d552:	d102      	bne.n	800d55a <_lseek_r+0x1e>
 800d554:	682b      	ldr	r3, [r5, #0]
 800d556:	b103      	cbz	r3, 800d55a <_lseek_r+0x1e>
 800d558:	6023      	str	r3, [r4, #0]
 800d55a:	bd38      	pop	{r3, r4, r5, pc}
 800d55c:	24005b6c 	.word	0x24005b6c

0800d560 <_read_r>:
 800d560:	b538      	push	{r3, r4, r5, lr}
 800d562:	4d07      	ldr	r5, [pc, #28]	; (800d580 <_read_r+0x20>)
 800d564:	4604      	mov	r4, r0
 800d566:	4608      	mov	r0, r1
 800d568:	4611      	mov	r1, r2
 800d56a:	2200      	movs	r2, #0
 800d56c:	602a      	str	r2, [r5, #0]
 800d56e:	461a      	mov	r2, r3
 800d570:	f7f3 ffd2 	bl	8001518 <_read>
 800d574:	1c43      	adds	r3, r0, #1
 800d576:	d102      	bne.n	800d57e <_read_r+0x1e>
 800d578:	682b      	ldr	r3, [r5, #0]
 800d57a:	b103      	cbz	r3, 800d57e <_read_r+0x1e>
 800d57c:	6023      	str	r3, [r4, #0]
 800d57e:	bd38      	pop	{r3, r4, r5, pc}
 800d580:	24005b6c 	.word	0x24005b6c

0800d584 <_write_r>:
 800d584:	b538      	push	{r3, r4, r5, lr}
 800d586:	4d07      	ldr	r5, [pc, #28]	; (800d5a4 <_write_r+0x20>)
 800d588:	4604      	mov	r4, r0
 800d58a:	4608      	mov	r0, r1
 800d58c:	4611      	mov	r1, r2
 800d58e:	2200      	movs	r2, #0
 800d590:	602a      	str	r2, [r5, #0]
 800d592:	461a      	mov	r2, r3
 800d594:	f7f3 ffdd 	bl	8001552 <_write>
 800d598:	1c43      	adds	r3, r0, #1
 800d59a:	d102      	bne.n	800d5a2 <_write_r+0x1e>
 800d59c:	682b      	ldr	r3, [r5, #0]
 800d59e:	b103      	cbz	r3, 800d5a2 <_write_r+0x1e>
 800d5a0:	6023      	str	r3, [r4, #0]
 800d5a2:	bd38      	pop	{r3, r4, r5, pc}
 800d5a4:	24005b6c 	.word	0x24005b6c

0800d5a8 <__errno>:
 800d5a8:	4b01      	ldr	r3, [pc, #4]	; (800d5b0 <__errno+0x8>)
 800d5aa:	6818      	ldr	r0, [r3, #0]
 800d5ac:	4770      	bx	lr
 800d5ae:	bf00      	nop
 800d5b0:	24000074 	.word	0x24000074

0800d5b4 <__libc_init_array>:
 800d5b4:	b570      	push	{r4, r5, r6, lr}
 800d5b6:	4d0d      	ldr	r5, [pc, #52]	; (800d5ec <__libc_init_array+0x38>)
 800d5b8:	4c0d      	ldr	r4, [pc, #52]	; (800d5f0 <__libc_init_array+0x3c>)
 800d5ba:	1b64      	subs	r4, r4, r5
 800d5bc:	10a4      	asrs	r4, r4, #2
 800d5be:	2600      	movs	r6, #0
 800d5c0:	42a6      	cmp	r6, r4
 800d5c2:	d109      	bne.n	800d5d8 <__libc_init_array+0x24>
 800d5c4:	4d0b      	ldr	r5, [pc, #44]	; (800d5f4 <__libc_init_array+0x40>)
 800d5c6:	4c0c      	ldr	r4, [pc, #48]	; (800d5f8 <__libc_init_array+0x44>)
 800d5c8:	f001 ffe0 	bl	800f58c <_init>
 800d5cc:	1b64      	subs	r4, r4, r5
 800d5ce:	10a4      	asrs	r4, r4, #2
 800d5d0:	2600      	movs	r6, #0
 800d5d2:	42a6      	cmp	r6, r4
 800d5d4:	d105      	bne.n	800d5e2 <__libc_init_array+0x2e>
 800d5d6:	bd70      	pop	{r4, r5, r6, pc}
 800d5d8:	f855 3b04 	ldr.w	r3, [r5], #4
 800d5dc:	4798      	blx	r3
 800d5de:	3601      	adds	r6, #1
 800d5e0:	e7ee      	b.n	800d5c0 <__libc_init_array+0xc>
 800d5e2:	f855 3b04 	ldr.w	r3, [r5], #4
 800d5e6:	4798      	blx	r3
 800d5e8:	3601      	adds	r6, #1
 800d5ea:	e7f2      	b.n	800d5d2 <__libc_init_array+0x1e>
 800d5ec:	0800fbf0 	.word	0x0800fbf0
 800d5f0:	0800fbf0 	.word	0x0800fbf0
 800d5f4:	0800fbf0 	.word	0x0800fbf0
 800d5f8:	0800fbf4 	.word	0x0800fbf4

0800d5fc <__retarget_lock_acquire_recursive>:
 800d5fc:	4770      	bx	lr

0800d5fe <__retarget_lock_release_recursive>:
 800d5fe:	4770      	bx	lr

0800d600 <memcpy>:
 800d600:	440a      	add	r2, r1
 800d602:	4291      	cmp	r1, r2
 800d604:	f100 33ff 	add.w	r3, r0, #4294967295
 800d608:	d100      	bne.n	800d60c <memcpy+0xc>
 800d60a:	4770      	bx	lr
 800d60c:	b510      	push	{r4, lr}
 800d60e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d612:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d616:	4291      	cmp	r1, r2
 800d618:	d1f9      	bne.n	800d60e <memcpy+0xe>
 800d61a:	bd10      	pop	{r4, pc}

0800d61c <abort>:
 800d61c:	b508      	push	{r3, lr}
 800d61e:	2006      	movs	r0, #6
 800d620:	f001 fe98 	bl	800f354 <raise>
 800d624:	2001      	movs	r0, #1
 800d626:	f7f3 ff6d 	bl	8001504 <_exit>

0800d62a <quorem>:
 800d62a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d62e:	6903      	ldr	r3, [r0, #16]
 800d630:	690c      	ldr	r4, [r1, #16]
 800d632:	42a3      	cmp	r3, r4
 800d634:	4607      	mov	r7, r0
 800d636:	db7e      	blt.n	800d736 <quorem+0x10c>
 800d638:	3c01      	subs	r4, #1
 800d63a:	f101 0814 	add.w	r8, r1, #20
 800d63e:	f100 0514 	add.w	r5, r0, #20
 800d642:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d646:	9301      	str	r3, [sp, #4]
 800d648:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d64c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d650:	3301      	adds	r3, #1
 800d652:	429a      	cmp	r2, r3
 800d654:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d658:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d65c:	fbb2 f6f3 	udiv	r6, r2, r3
 800d660:	d331      	bcc.n	800d6c6 <quorem+0x9c>
 800d662:	f04f 0e00 	mov.w	lr, #0
 800d666:	4640      	mov	r0, r8
 800d668:	46ac      	mov	ip, r5
 800d66a:	46f2      	mov	sl, lr
 800d66c:	f850 2b04 	ldr.w	r2, [r0], #4
 800d670:	b293      	uxth	r3, r2
 800d672:	fb06 e303 	mla	r3, r6, r3, lr
 800d676:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d67a:	0c1a      	lsrs	r2, r3, #16
 800d67c:	b29b      	uxth	r3, r3
 800d67e:	ebaa 0303 	sub.w	r3, sl, r3
 800d682:	f8dc a000 	ldr.w	sl, [ip]
 800d686:	fa13 f38a 	uxtah	r3, r3, sl
 800d68a:	fb06 220e 	mla	r2, r6, lr, r2
 800d68e:	9300      	str	r3, [sp, #0]
 800d690:	9b00      	ldr	r3, [sp, #0]
 800d692:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d696:	b292      	uxth	r2, r2
 800d698:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800d69c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d6a0:	f8bd 3000 	ldrh.w	r3, [sp]
 800d6a4:	4581      	cmp	r9, r0
 800d6a6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d6aa:	f84c 3b04 	str.w	r3, [ip], #4
 800d6ae:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800d6b2:	d2db      	bcs.n	800d66c <quorem+0x42>
 800d6b4:	f855 300b 	ldr.w	r3, [r5, fp]
 800d6b8:	b92b      	cbnz	r3, 800d6c6 <quorem+0x9c>
 800d6ba:	9b01      	ldr	r3, [sp, #4]
 800d6bc:	3b04      	subs	r3, #4
 800d6be:	429d      	cmp	r5, r3
 800d6c0:	461a      	mov	r2, r3
 800d6c2:	d32c      	bcc.n	800d71e <quorem+0xf4>
 800d6c4:	613c      	str	r4, [r7, #16]
 800d6c6:	4638      	mov	r0, r7
 800d6c8:	f001 f922 	bl	800e910 <__mcmp>
 800d6cc:	2800      	cmp	r0, #0
 800d6ce:	db22      	blt.n	800d716 <quorem+0xec>
 800d6d0:	3601      	adds	r6, #1
 800d6d2:	4629      	mov	r1, r5
 800d6d4:	2000      	movs	r0, #0
 800d6d6:	f858 2b04 	ldr.w	r2, [r8], #4
 800d6da:	f8d1 c000 	ldr.w	ip, [r1]
 800d6de:	b293      	uxth	r3, r2
 800d6e0:	1ac3      	subs	r3, r0, r3
 800d6e2:	0c12      	lsrs	r2, r2, #16
 800d6e4:	fa13 f38c 	uxtah	r3, r3, ip
 800d6e8:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800d6ec:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d6f0:	b29b      	uxth	r3, r3
 800d6f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d6f6:	45c1      	cmp	r9, r8
 800d6f8:	f841 3b04 	str.w	r3, [r1], #4
 800d6fc:	ea4f 4022 	mov.w	r0, r2, asr #16
 800d700:	d2e9      	bcs.n	800d6d6 <quorem+0xac>
 800d702:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d706:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d70a:	b922      	cbnz	r2, 800d716 <quorem+0xec>
 800d70c:	3b04      	subs	r3, #4
 800d70e:	429d      	cmp	r5, r3
 800d710:	461a      	mov	r2, r3
 800d712:	d30a      	bcc.n	800d72a <quorem+0x100>
 800d714:	613c      	str	r4, [r7, #16]
 800d716:	4630      	mov	r0, r6
 800d718:	b003      	add	sp, #12
 800d71a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d71e:	6812      	ldr	r2, [r2, #0]
 800d720:	3b04      	subs	r3, #4
 800d722:	2a00      	cmp	r2, #0
 800d724:	d1ce      	bne.n	800d6c4 <quorem+0x9a>
 800d726:	3c01      	subs	r4, #1
 800d728:	e7c9      	b.n	800d6be <quorem+0x94>
 800d72a:	6812      	ldr	r2, [r2, #0]
 800d72c:	3b04      	subs	r3, #4
 800d72e:	2a00      	cmp	r2, #0
 800d730:	d1f0      	bne.n	800d714 <quorem+0xea>
 800d732:	3c01      	subs	r4, #1
 800d734:	e7eb      	b.n	800d70e <quorem+0xe4>
 800d736:	2000      	movs	r0, #0
 800d738:	e7ee      	b.n	800d718 <quorem+0xee>
 800d73a:	0000      	movs	r0, r0
 800d73c:	0000      	movs	r0, r0
	...

0800d740 <_dtoa_r>:
 800d740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d744:	ed2d 8b02 	vpush	{d8}
 800d748:	69c5      	ldr	r5, [r0, #28]
 800d74a:	b091      	sub	sp, #68	; 0x44
 800d74c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800d750:	ec59 8b10 	vmov	r8, r9, d0
 800d754:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800d756:	9106      	str	r1, [sp, #24]
 800d758:	4606      	mov	r6, r0
 800d75a:	9208      	str	r2, [sp, #32]
 800d75c:	930c      	str	r3, [sp, #48]	; 0x30
 800d75e:	b975      	cbnz	r5, 800d77e <_dtoa_r+0x3e>
 800d760:	2010      	movs	r0, #16
 800d762:	f000 fda5 	bl	800e2b0 <malloc>
 800d766:	4602      	mov	r2, r0
 800d768:	61f0      	str	r0, [r6, #28]
 800d76a:	b920      	cbnz	r0, 800d776 <_dtoa_r+0x36>
 800d76c:	4ba6      	ldr	r3, [pc, #664]	; (800da08 <_dtoa_r+0x2c8>)
 800d76e:	21ef      	movs	r1, #239	; 0xef
 800d770:	48a6      	ldr	r0, [pc, #664]	; (800da0c <_dtoa_r+0x2cc>)
 800d772:	f7ff f8bb 	bl	800c8ec <__assert_func>
 800d776:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d77a:	6005      	str	r5, [r0, #0]
 800d77c:	60c5      	str	r5, [r0, #12]
 800d77e:	69f3      	ldr	r3, [r6, #28]
 800d780:	6819      	ldr	r1, [r3, #0]
 800d782:	b151      	cbz	r1, 800d79a <_dtoa_r+0x5a>
 800d784:	685a      	ldr	r2, [r3, #4]
 800d786:	604a      	str	r2, [r1, #4]
 800d788:	2301      	movs	r3, #1
 800d78a:	4093      	lsls	r3, r2
 800d78c:	608b      	str	r3, [r1, #8]
 800d78e:	4630      	mov	r0, r6
 800d790:	f000 fe82 	bl	800e498 <_Bfree>
 800d794:	69f3      	ldr	r3, [r6, #28]
 800d796:	2200      	movs	r2, #0
 800d798:	601a      	str	r2, [r3, #0]
 800d79a:	f1b9 0300 	subs.w	r3, r9, #0
 800d79e:	bfbb      	ittet	lt
 800d7a0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800d7a4:	9303      	strlt	r3, [sp, #12]
 800d7a6:	2300      	movge	r3, #0
 800d7a8:	2201      	movlt	r2, #1
 800d7aa:	bfac      	ite	ge
 800d7ac:	6023      	strge	r3, [r4, #0]
 800d7ae:	6022      	strlt	r2, [r4, #0]
 800d7b0:	4b97      	ldr	r3, [pc, #604]	; (800da10 <_dtoa_r+0x2d0>)
 800d7b2:	9c03      	ldr	r4, [sp, #12]
 800d7b4:	43a3      	bics	r3, r4
 800d7b6:	d11c      	bne.n	800d7f2 <_dtoa_r+0xb2>
 800d7b8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d7ba:	f242 730f 	movw	r3, #9999	; 0x270f
 800d7be:	6013      	str	r3, [r2, #0]
 800d7c0:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800d7c4:	ea53 0308 	orrs.w	r3, r3, r8
 800d7c8:	f000 84fb 	beq.w	800e1c2 <_dtoa_r+0xa82>
 800d7cc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d7ce:	b963      	cbnz	r3, 800d7ea <_dtoa_r+0xaa>
 800d7d0:	4b90      	ldr	r3, [pc, #576]	; (800da14 <_dtoa_r+0x2d4>)
 800d7d2:	e020      	b.n	800d816 <_dtoa_r+0xd6>
 800d7d4:	4b90      	ldr	r3, [pc, #576]	; (800da18 <_dtoa_r+0x2d8>)
 800d7d6:	9301      	str	r3, [sp, #4]
 800d7d8:	3308      	adds	r3, #8
 800d7da:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800d7dc:	6013      	str	r3, [r2, #0]
 800d7de:	9801      	ldr	r0, [sp, #4]
 800d7e0:	b011      	add	sp, #68	; 0x44
 800d7e2:	ecbd 8b02 	vpop	{d8}
 800d7e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7ea:	4b8a      	ldr	r3, [pc, #552]	; (800da14 <_dtoa_r+0x2d4>)
 800d7ec:	9301      	str	r3, [sp, #4]
 800d7ee:	3303      	adds	r3, #3
 800d7f0:	e7f3      	b.n	800d7da <_dtoa_r+0x9a>
 800d7f2:	ed9d 8b02 	vldr	d8, [sp, #8]
 800d7f6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800d7fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d7fe:	d10c      	bne.n	800d81a <_dtoa_r+0xda>
 800d800:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d802:	2301      	movs	r3, #1
 800d804:	6013      	str	r3, [r2, #0]
 800d806:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d808:	2b00      	cmp	r3, #0
 800d80a:	f000 84d7 	beq.w	800e1bc <_dtoa_r+0xa7c>
 800d80e:	4b83      	ldr	r3, [pc, #524]	; (800da1c <_dtoa_r+0x2dc>)
 800d810:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800d812:	6013      	str	r3, [r2, #0]
 800d814:	3b01      	subs	r3, #1
 800d816:	9301      	str	r3, [sp, #4]
 800d818:	e7e1      	b.n	800d7de <_dtoa_r+0x9e>
 800d81a:	aa0e      	add	r2, sp, #56	; 0x38
 800d81c:	a90f      	add	r1, sp, #60	; 0x3c
 800d81e:	4630      	mov	r0, r6
 800d820:	eeb0 0b48 	vmov.f64	d0, d8
 800d824:	f001 f91a 	bl	800ea5c <__d2b>
 800d828:	f3c4 530a 	ubfx	r3, r4, #20, #11
 800d82c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d82e:	4605      	mov	r5, r0
 800d830:	2b00      	cmp	r3, #0
 800d832:	d046      	beq.n	800d8c2 <_dtoa_r+0x182>
 800d834:	eeb0 7b48 	vmov.f64	d7, d8
 800d838:	ee18 1a90 	vmov	r1, s17
 800d83c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800d840:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 800d844:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800d848:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800d84c:	2000      	movs	r0, #0
 800d84e:	ee07 1a90 	vmov	s15, r1
 800d852:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 800d856:	ed9f 5b66 	vldr	d5, [pc, #408]	; 800d9f0 <_dtoa_r+0x2b0>
 800d85a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800d85e:	ed9f 6b66 	vldr	d6, [pc, #408]	; 800d9f8 <_dtoa_r+0x2b8>
 800d862:	eea7 6b05 	vfma.f64	d6, d7, d5
 800d866:	ed9f 5b66 	vldr	d5, [pc, #408]	; 800da00 <_dtoa_r+0x2c0>
 800d86a:	ee07 3a90 	vmov	s15, r3
 800d86e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800d872:	eeb0 7b46 	vmov.f64	d7, d6
 800d876:	eea4 7b05 	vfma.f64	d7, d4, d5
 800d87a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800d87e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800d882:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d886:	ee16 ba90 	vmov	fp, s13
 800d88a:	9009      	str	r0, [sp, #36]	; 0x24
 800d88c:	d508      	bpl.n	800d8a0 <_dtoa_r+0x160>
 800d88e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800d892:	eeb4 6b47 	vcmp.f64	d6, d7
 800d896:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d89a:	bf18      	it	ne
 800d89c:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800d8a0:	f1bb 0f16 	cmp.w	fp, #22
 800d8a4:	d82b      	bhi.n	800d8fe <_dtoa_r+0x1be>
 800d8a6:	495e      	ldr	r1, [pc, #376]	; (800da20 <_dtoa_r+0x2e0>)
 800d8a8:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 800d8ac:	ed91 7b00 	vldr	d7, [r1]
 800d8b0:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800d8b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d8b8:	d501      	bpl.n	800d8be <_dtoa_r+0x17e>
 800d8ba:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d8be:	2100      	movs	r1, #0
 800d8c0:	e01e      	b.n	800d900 <_dtoa_r+0x1c0>
 800d8c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d8c4:	4413      	add	r3, r2
 800d8c6:	f203 4132 	addw	r1, r3, #1074	; 0x432
 800d8ca:	2920      	cmp	r1, #32
 800d8cc:	bfc1      	itttt	gt
 800d8ce:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 800d8d2:	408c      	lslgt	r4, r1
 800d8d4:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 800d8d8:	fa28 f101 	lsrgt.w	r1, r8, r1
 800d8dc:	bfd6      	itet	le
 800d8de:	f1c1 0120 	rsble	r1, r1, #32
 800d8e2:	4321      	orrgt	r1, r4
 800d8e4:	fa08 f101 	lslle.w	r1, r8, r1
 800d8e8:	ee07 1a90 	vmov	s15, r1
 800d8ec:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800d8f0:	3b01      	subs	r3, #1
 800d8f2:	ee17 1a90 	vmov	r1, s15
 800d8f6:	2001      	movs	r0, #1
 800d8f8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800d8fc:	e7a7      	b.n	800d84e <_dtoa_r+0x10e>
 800d8fe:	2101      	movs	r1, #1
 800d900:	1ad2      	subs	r2, r2, r3
 800d902:	1e53      	subs	r3, r2, #1
 800d904:	9305      	str	r3, [sp, #20]
 800d906:	bf45      	ittet	mi
 800d908:	f1c2 0301 	rsbmi	r3, r2, #1
 800d90c:	9304      	strmi	r3, [sp, #16]
 800d90e:	2300      	movpl	r3, #0
 800d910:	2300      	movmi	r3, #0
 800d912:	bf4c      	ite	mi
 800d914:	9305      	strmi	r3, [sp, #20]
 800d916:	9304      	strpl	r3, [sp, #16]
 800d918:	f1bb 0f00 	cmp.w	fp, #0
 800d91c:	910b      	str	r1, [sp, #44]	; 0x2c
 800d91e:	db18      	blt.n	800d952 <_dtoa_r+0x212>
 800d920:	9b05      	ldr	r3, [sp, #20]
 800d922:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800d926:	445b      	add	r3, fp
 800d928:	9305      	str	r3, [sp, #20]
 800d92a:	2300      	movs	r3, #0
 800d92c:	9a06      	ldr	r2, [sp, #24]
 800d92e:	2a09      	cmp	r2, #9
 800d930:	d848      	bhi.n	800d9c4 <_dtoa_r+0x284>
 800d932:	2a05      	cmp	r2, #5
 800d934:	bfc4      	itt	gt
 800d936:	3a04      	subgt	r2, #4
 800d938:	9206      	strgt	r2, [sp, #24]
 800d93a:	9a06      	ldr	r2, [sp, #24]
 800d93c:	f1a2 0202 	sub.w	r2, r2, #2
 800d940:	bfcc      	ite	gt
 800d942:	2400      	movgt	r4, #0
 800d944:	2401      	movle	r4, #1
 800d946:	2a03      	cmp	r2, #3
 800d948:	d847      	bhi.n	800d9da <_dtoa_r+0x29a>
 800d94a:	e8df f002 	tbb	[pc, r2]
 800d94e:	2d0b      	.short	0x2d0b
 800d950:	392b      	.short	0x392b
 800d952:	9b04      	ldr	r3, [sp, #16]
 800d954:	2200      	movs	r2, #0
 800d956:	eba3 030b 	sub.w	r3, r3, fp
 800d95a:	9304      	str	r3, [sp, #16]
 800d95c:	920a      	str	r2, [sp, #40]	; 0x28
 800d95e:	f1cb 0300 	rsb	r3, fp, #0
 800d962:	e7e3      	b.n	800d92c <_dtoa_r+0x1ec>
 800d964:	2200      	movs	r2, #0
 800d966:	9207      	str	r2, [sp, #28]
 800d968:	9a08      	ldr	r2, [sp, #32]
 800d96a:	2a00      	cmp	r2, #0
 800d96c:	dc38      	bgt.n	800d9e0 <_dtoa_r+0x2a0>
 800d96e:	f04f 0a01 	mov.w	sl, #1
 800d972:	46d1      	mov	r9, sl
 800d974:	4652      	mov	r2, sl
 800d976:	f8cd a020 	str.w	sl, [sp, #32]
 800d97a:	69f7      	ldr	r7, [r6, #28]
 800d97c:	2100      	movs	r1, #0
 800d97e:	2004      	movs	r0, #4
 800d980:	f100 0c14 	add.w	ip, r0, #20
 800d984:	4594      	cmp	ip, r2
 800d986:	d930      	bls.n	800d9ea <_dtoa_r+0x2aa>
 800d988:	6079      	str	r1, [r7, #4]
 800d98a:	4630      	mov	r0, r6
 800d98c:	930d      	str	r3, [sp, #52]	; 0x34
 800d98e:	f000 fd43 	bl	800e418 <_Balloc>
 800d992:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d994:	9001      	str	r0, [sp, #4]
 800d996:	4602      	mov	r2, r0
 800d998:	2800      	cmp	r0, #0
 800d99a:	d145      	bne.n	800da28 <_dtoa_r+0x2e8>
 800d99c:	4b21      	ldr	r3, [pc, #132]	; (800da24 <_dtoa_r+0x2e4>)
 800d99e:	f240 11af 	movw	r1, #431	; 0x1af
 800d9a2:	e6e5      	b.n	800d770 <_dtoa_r+0x30>
 800d9a4:	2201      	movs	r2, #1
 800d9a6:	e7de      	b.n	800d966 <_dtoa_r+0x226>
 800d9a8:	2200      	movs	r2, #0
 800d9aa:	9207      	str	r2, [sp, #28]
 800d9ac:	9a08      	ldr	r2, [sp, #32]
 800d9ae:	eb0b 0a02 	add.w	sl, fp, r2
 800d9b2:	f10a 0901 	add.w	r9, sl, #1
 800d9b6:	464a      	mov	r2, r9
 800d9b8:	2a01      	cmp	r2, #1
 800d9ba:	bfb8      	it	lt
 800d9bc:	2201      	movlt	r2, #1
 800d9be:	e7dc      	b.n	800d97a <_dtoa_r+0x23a>
 800d9c0:	2201      	movs	r2, #1
 800d9c2:	e7f2      	b.n	800d9aa <_dtoa_r+0x26a>
 800d9c4:	2401      	movs	r4, #1
 800d9c6:	2200      	movs	r2, #0
 800d9c8:	e9cd 2406 	strd	r2, r4, [sp, #24]
 800d9cc:	f04f 3aff 	mov.w	sl, #4294967295
 800d9d0:	2100      	movs	r1, #0
 800d9d2:	46d1      	mov	r9, sl
 800d9d4:	2212      	movs	r2, #18
 800d9d6:	9108      	str	r1, [sp, #32]
 800d9d8:	e7cf      	b.n	800d97a <_dtoa_r+0x23a>
 800d9da:	2201      	movs	r2, #1
 800d9dc:	9207      	str	r2, [sp, #28]
 800d9de:	e7f5      	b.n	800d9cc <_dtoa_r+0x28c>
 800d9e0:	f8dd a020 	ldr.w	sl, [sp, #32]
 800d9e4:	46d1      	mov	r9, sl
 800d9e6:	4652      	mov	r2, sl
 800d9e8:	e7c7      	b.n	800d97a <_dtoa_r+0x23a>
 800d9ea:	3101      	adds	r1, #1
 800d9ec:	0040      	lsls	r0, r0, #1
 800d9ee:	e7c7      	b.n	800d980 <_dtoa_r+0x240>
 800d9f0:	636f4361 	.word	0x636f4361
 800d9f4:	3fd287a7 	.word	0x3fd287a7
 800d9f8:	8b60c8b3 	.word	0x8b60c8b3
 800d9fc:	3fc68a28 	.word	0x3fc68a28
 800da00:	509f79fb 	.word	0x509f79fb
 800da04:	3fd34413 	.word	0x3fd34413
 800da08:	0800f8f1 	.word	0x0800f8f1
 800da0c:	0800f908 	.word	0x0800f908
 800da10:	7ff00000 	.word	0x7ff00000
 800da14:	0800f8ed 	.word	0x0800f8ed
 800da18:	0800f8e4 	.word	0x0800f8e4
 800da1c:	0800f8c1 	.word	0x0800f8c1
 800da20:	0800f9f8 	.word	0x0800f9f8
 800da24:	0800f960 	.word	0x0800f960
 800da28:	69f2      	ldr	r2, [r6, #28]
 800da2a:	9901      	ldr	r1, [sp, #4]
 800da2c:	6011      	str	r1, [r2, #0]
 800da2e:	f1b9 0f0e 	cmp.w	r9, #14
 800da32:	d86c      	bhi.n	800db0e <_dtoa_r+0x3ce>
 800da34:	2c00      	cmp	r4, #0
 800da36:	d06a      	beq.n	800db0e <_dtoa_r+0x3ce>
 800da38:	f1bb 0f00 	cmp.w	fp, #0
 800da3c:	f340 80a0 	ble.w	800db80 <_dtoa_r+0x440>
 800da40:	4ac1      	ldr	r2, [pc, #772]	; (800dd48 <_dtoa_r+0x608>)
 800da42:	f00b 010f 	and.w	r1, fp, #15
 800da46:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800da4a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800da4e:	ed92 7b00 	vldr	d7, [r2]
 800da52:	ea4f 122b 	mov.w	r2, fp, asr #4
 800da56:	f000 8087 	beq.w	800db68 <_dtoa_r+0x428>
 800da5a:	49bc      	ldr	r1, [pc, #752]	; (800dd4c <_dtoa_r+0x60c>)
 800da5c:	ed91 6b08 	vldr	d6, [r1, #32]
 800da60:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800da64:	ed8d 6b02 	vstr	d6, [sp, #8]
 800da68:	f002 020f 	and.w	r2, r2, #15
 800da6c:	2103      	movs	r1, #3
 800da6e:	48b7      	ldr	r0, [pc, #732]	; (800dd4c <_dtoa_r+0x60c>)
 800da70:	2a00      	cmp	r2, #0
 800da72:	d17b      	bne.n	800db6c <_dtoa_r+0x42c>
 800da74:	ed9d 6b02 	vldr	d6, [sp, #8]
 800da78:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800da7c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800da80:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800da82:	ed9d 7b02 	vldr	d7, [sp, #8]
 800da86:	2a00      	cmp	r2, #0
 800da88:	f000 80a0 	beq.w	800dbcc <_dtoa_r+0x48c>
 800da8c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800da90:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800da94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da98:	f140 8098 	bpl.w	800dbcc <_dtoa_r+0x48c>
 800da9c:	f1b9 0f00 	cmp.w	r9, #0
 800daa0:	f000 8094 	beq.w	800dbcc <_dtoa_r+0x48c>
 800daa4:	f1ba 0f00 	cmp.w	sl, #0
 800daa8:	dd2f      	ble.n	800db0a <_dtoa_r+0x3ca>
 800daaa:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800daae:	ee27 7b06 	vmul.f64	d7, d7, d6
 800dab2:	ed8d 7b02 	vstr	d7, [sp, #8]
 800dab6:	f10b 32ff 	add.w	r2, fp, #4294967295
 800daba:	3101      	adds	r1, #1
 800dabc:	4654      	mov	r4, sl
 800dabe:	ed9d 6b02 	vldr	d6, [sp, #8]
 800dac2:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800dac6:	ee07 1a90 	vmov	s15, r1
 800daca:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800dace:	eea7 5b06 	vfma.f64	d5, d7, d6
 800dad2:	ee15 7a90 	vmov	r7, s11
 800dad6:	ec51 0b15 	vmov	r0, r1, d5
 800dada:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 800dade:	2c00      	cmp	r4, #0
 800dae0:	d177      	bne.n	800dbd2 <_dtoa_r+0x492>
 800dae2:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800dae6:	ee36 6b47 	vsub.f64	d6, d6, d7
 800daea:	ec41 0b17 	vmov	d7, r0, r1
 800daee:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800daf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800daf6:	f300 826a 	bgt.w	800dfce <_dtoa_r+0x88e>
 800dafa:	eeb1 7b47 	vneg.f64	d7, d7
 800dafe:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800db02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db06:	f100 8260 	bmi.w	800dfca <_dtoa_r+0x88a>
 800db0a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800db0e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800db10:	2a00      	cmp	r2, #0
 800db12:	f2c0 811d 	blt.w	800dd50 <_dtoa_r+0x610>
 800db16:	f1bb 0f0e 	cmp.w	fp, #14
 800db1a:	f300 8119 	bgt.w	800dd50 <_dtoa_r+0x610>
 800db1e:	4b8a      	ldr	r3, [pc, #552]	; (800dd48 <_dtoa_r+0x608>)
 800db20:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800db24:	ed93 6b00 	vldr	d6, [r3]
 800db28:	9b08      	ldr	r3, [sp, #32]
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	f280 80b7 	bge.w	800dc9e <_dtoa_r+0x55e>
 800db30:	f1b9 0f00 	cmp.w	r9, #0
 800db34:	f300 80b3 	bgt.w	800dc9e <_dtoa_r+0x55e>
 800db38:	f040 8246 	bne.w	800dfc8 <_dtoa_r+0x888>
 800db3c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800db40:	ee26 6b07 	vmul.f64	d6, d6, d7
 800db44:	ed9d 7b02 	vldr	d7, [sp, #8]
 800db48:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800db4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db50:	464c      	mov	r4, r9
 800db52:	464f      	mov	r7, r9
 800db54:	f280 821c 	bge.w	800df90 <_dtoa_r+0x850>
 800db58:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800db5c:	2331      	movs	r3, #49	; 0x31
 800db5e:	f808 3b01 	strb.w	r3, [r8], #1
 800db62:	f10b 0b01 	add.w	fp, fp, #1
 800db66:	e218      	b.n	800df9a <_dtoa_r+0x85a>
 800db68:	2102      	movs	r1, #2
 800db6a:	e780      	b.n	800da6e <_dtoa_r+0x32e>
 800db6c:	07d4      	lsls	r4, r2, #31
 800db6e:	d504      	bpl.n	800db7a <_dtoa_r+0x43a>
 800db70:	ed90 6b00 	vldr	d6, [r0]
 800db74:	3101      	adds	r1, #1
 800db76:	ee27 7b06 	vmul.f64	d7, d7, d6
 800db7a:	1052      	asrs	r2, r2, #1
 800db7c:	3008      	adds	r0, #8
 800db7e:	e777      	b.n	800da70 <_dtoa_r+0x330>
 800db80:	d022      	beq.n	800dbc8 <_dtoa_r+0x488>
 800db82:	f1cb 0200 	rsb	r2, fp, #0
 800db86:	4970      	ldr	r1, [pc, #448]	; (800dd48 <_dtoa_r+0x608>)
 800db88:	f002 000f 	and.w	r0, r2, #15
 800db8c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800db90:	ed91 7b00 	vldr	d7, [r1]
 800db94:	ee28 7b07 	vmul.f64	d7, d8, d7
 800db98:	ed8d 7b02 	vstr	d7, [sp, #8]
 800db9c:	486b      	ldr	r0, [pc, #428]	; (800dd4c <_dtoa_r+0x60c>)
 800db9e:	1112      	asrs	r2, r2, #4
 800dba0:	2400      	movs	r4, #0
 800dba2:	2102      	movs	r1, #2
 800dba4:	b92a      	cbnz	r2, 800dbb2 <_dtoa_r+0x472>
 800dba6:	2c00      	cmp	r4, #0
 800dba8:	f43f af6a 	beq.w	800da80 <_dtoa_r+0x340>
 800dbac:	ed8d 7b02 	vstr	d7, [sp, #8]
 800dbb0:	e766      	b.n	800da80 <_dtoa_r+0x340>
 800dbb2:	07d7      	lsls	r7, r2, #31
 800dbb4:	d505      	bpl.n	800dbc2 <_dtoa_r+0x482>
 800dbb6:	ed90 6b00 	vldr	d6, [r0]
 800dbba:	3101      	adds	r1, #1
 800dbbc:	2401      	movs	r4, #1
 800dbbe:	ee27 7b06 	vmul.f64	d7, d7, d6
 800dbc2:	1052      	asrs	r2, r2, #1
 800dbc4:	3008      	adds	r0, #8
 800dbc6:	e7ed      	b.n	800dba4 <_dtoa_r+0x464>
 800dbc8:	2102      	movs	r1, #2
 800dbca:	e759      	b.n	800da80 <_dtoa_r+0x340>
 800dbcc:	465a      	mov	r2, fp
 800dbce:	464c      	mov	r4, r9
 800dbd0:	e775      	b.n	800dabe <_dtoa_r+0x37e>
 800dbd2:	ec41 0b17 	vmov	d7, r0, r1
 800dbd6:	495c      	ldr	r1, [pc, #368]	; (800dd48 <_dtoa_r+0x608>)
 800dbd8:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 800dbdc:	ed11 4b02 	vldr	d4, [r1, #-8]
 800dbe0:	9901      	ldr	r1, [sp, #4]
 800dbe2:	440c      	add	r4, r1
 800dbe4:	9907      	ldr	r1, [sp, #28]
 800dbe6:	b351      	cbz	r1, 800dc3e <_dtoa_r+0x4fe>
 800dbe8:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800dbec:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800dbf0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800dbf4:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800dbf8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800dbfc:	ee35 7b47 	vsub.f64	d7, d5, d7
 800dc00:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800dc04:	ee14 1a90 	vmov	r1, s9
 800dc08:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800dc0c:	3130      	adds	r1, #48	; 0x30
 800dc0e:	ee36 6b45 	vsub.f64	d6, d6, d5
 800dc12:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800dc16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc1a:	f808 1b01 	strb.w	r1, [r8], #1
 800dc1e:	d439      	bmi.n	800dc94 <_dtoa_r+0x554>
 800dc20:	ee32 5b46 	vsub.f64	d5, d2, d6
 800dc24:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800dc28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc2c:	d472      	bmi.n	800dd14 <_dtoa_r+0x5d4>
 800dc2e:	45a0      	cmp	r8, r4
 800dc30:	f43f af6b 	beq.w	800db0a <_dtoa_r+0x3ca>
 800dc34:	ee27 7b03 	vmul.f64	d7, d7, d3
 800dc38:	ee26 6b03 	vmul.f64	d6, d6, d3
 800dc3c:	e7e0      	b.n	800dc00 <_dtoa_r+0x4c0>
 800dc3e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800dc42:	ee27 7b04 	vmul.f64	d7, d7, d4
 800dc46:	4620      	mov	r0, r4
 800dc48:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800dc4c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800dc50:	ee14 1a90 	vmov	r1, s9
 800dc54:	3130      	adds	r1, #48	; 0x30
 800dc56:	f808 1b01 	strb.w	r1, [r8], #1
 800dc5a:	45a0      	cmp	r8, r4
 800dc5c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800dc60:	ee36 6b45 	vsub.f64	d6, d6, d5
 800dc64:	d118      	bne.n	800dc98 <_dtoa_r+0x558>
 800dc66:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800dc6a:	ee37 4b05 	vadd.f64	d4, d7, d5
 800dc6e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800dc72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc76:	dc4d      	bgt.n	800dd14 <_dtoa_r+0x5d4>
 800dc78:	ee35 5b47 	vsub.f64	d5, d5, d7
 800dc7c:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800dc80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc84:	f57f af41 	bpl.w	800db0a <_dtoa_r+0x3ca>
 800dc88:	4680      	mov	r8, r0
 800dc8a:	3801      	subs	r0, #1
 800dc8c:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800dc90:	2b30      	cmp	r3, #48	; 0x30
 800dc92:	d0f9      	beq.n	800dc88 <_dtoa_r+0x548>
 800dc94:	4693      	mov	fp, r2
 800dc96:	e02a      	b.n	800dcee <_dtoa_r+0x5ae>
 800dc98:	ee26 6b03 	vmul.f64	d6, d6, d3
 800dc9c:	e7d6      	b.n	800dc4c <_dtoa_r+0x50c>
 800dc9e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800dca2:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800dca6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800dcaa:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800dcae:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800dcb2:	ee15 3a10 	vmov	r3, s10
 800dcb6:	3330      	adds	r3, #48	; 0x30
 800dcb8:	f808 3b01 	strb.w	r3, [r8], #1
 800dcbc:	9b01      	ldr	r3, [sp, #4]
 800dcbe:	eba8 0303 	sub.w	r3, r8, r3
 800dcc2:	4599      	cmp	r9, r3
 800dcc4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800dcc8:	eea3 7b46 	vfms.f64	d7, d3, d6
 800dccc:	d133      	bne.n	800dd36 <_dtoa_r+0x5f6>
 800dcce:	ee37 7b07 	vadd.f64	d7, d7, d7
 800dcd2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800dcd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dcda:	dc1a      	bgt.n	800dd12 <_dtoa_r+0x5d2>
 800dcdc:	eeb4 7b46 	vcmp.f64	d7, d6
 800dce0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dce4:	d103      	bne.n	800dcee <_dtoa_r+0x5ae>
 800dce6:	ee15 3a10 	vmov	r3, s10
 800dcea:	07d9      	lsls	r1, r3, #31
 800dcec:	d411      	bmi.n	800dd12 <_dtoa_r+0x5d2>
 800dcee:	4629      	mov	r1, r5
 800dcf0:	4630      	mov	r0, r6
 800dcf2:	f000 fbd1 	bl	800e498 <_Bfree>
 800dcf6:	2300      	movs	r3, #0
 800dcf8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800dcfa:	f888 3000 	strb.w	r3, [r8]
 800dcfe:	f10b 0301 	add.w	r3, fp, #1
 800dd02:	6013      	str	r3, [r2, #0]
 800dd04:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800dd06:	2b00      	cmp	r3, #0
 800dd08:	f43f ad69 	beq.w	800d7de <_dtoa_r+0x9e>
 800dd0c:	f8c3 8000 	str.w	r8, [r3]
 800dd10:	e565      	b.n	800d7de <_dtoa_r+0x9e>
 800dd12:	465a      	mov	r2, fp
 800dd14:	4643      	mov	r3, r8
 800dd16:	4698      	mov	r8, r3
 800dd18:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 800dd1c:	2939      	cmp	r1, #57	; 0x39
 800dd1e:	d106      	bne.n	800dd2e <_dtoa_r+0x5ee>
 800dd20:	9901      	ldr	r1, [sp, #4]
 800dd22:	4299      	cmp	r1, r3
 800dd24:	d1f7      	bne.n	800dd16 <_dtoa_r+0x5d6>
 800dd26:	9801      	ldr	r0, [sp, #4]
 800dd28:	2130      	movs	r1, #48	; 0x30
 800dd2a:	3201      	adds	r2, #1
 800dd2c:	7001      	strb	r1, [r0, #0]
 800dd2e:	7819      	ldrb	r1, [r3, #0]
 800dd30:	3101      	adds	r1, #1
 800dd32:	7019      	strb	r1, [r3, #0]
 800dd34:	e7ae      	b.n	800dc94 <_dtoa_r+0x554>
 800dd36:	ee27 7b04 	vmul.f64	d7, d7, d4
 800dd3a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800dd3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd42:	d1b2      	bne.n	800dcaa <_dtoa_r+0x56a>
 800dd44:	e7d3      	b.n	800dcee <_dtoa_r+0x5ae>
 800dd46:	bf00      	nop
 800dd48:	0800f9f8 	.word	0x0800f9f8
 800dd4c:	0800f9d0 	.word	0x0800f9d0
 800dd50:	9907      	ldr	r1, [sp, #28]
 800dd52:	2900      	cmp	r1, #0
 800dd54:	f000 80d0 	beq.w	800def8 <_dtoa_r+0x7b8>
 800dd58:	9906      	ldr	r1, [sp, #24]
 800dd5a:	2901      	cmp	r1, #1
 800dd5c:	f300 80b4 	bgt.w	800dec8 <_dtoa_r+0x788>
 800dd60:	9909      	ldr	r1, [sp, #36]	; 0x24
 800dd62:	2900      	cmp	r1, #0
 800dd64:	f000 80ac 	beq.w	800dec0 <_dtoa_r+0x780>
 800dd68:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800dd6c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800dd70:	461c      	mov	r4, r3
 800dd72:	9309      	str	r3, [sp, #36]	; 0x24
 800dd74:	9b04      	ldr	r3, [sp, #16]
 800dd76:	4413      	add	r3, r2
 800dd78:	9304      	str	r3, [sp, #16]
 800dd7a:	9b05      	ldr	r3, [sp, #20]
 800dd7c:	2101      	movs	r1, #1
 800dd7e:	4413      	add	r3, r2
 800dd80:	4630      	mov	r0, r6
 800dd82:	9305      	str	r3, [sp, #20]
 800dd84:	f000 fc3e 	bl	800e604 <__i2b>
 800dd88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dd8a:	4607      	mov	r7, r0
 800dd8c:	f1b8 0f00 	cmp.w	r8, #0
 800dd90:	d00d      	beq.n	800ddae <_dtoa_r+0x66e>
 800dd92:	9a05      	ldr	r2, [sp, #20]
 800dd94:	2a00      	cmp	r2, #0
 800dd96:	dd0a      	ble.n	800ddae <_dtoa_r+0x66e>
 800dd98:	4542      	cmp	r2, r8
 800dd9a:	9904      	ldr	r1, [sp, #16]
 800dd9c:	bfa8      	it	ge
 800dd9e:	4642      	movge	r2, r8
 800dda0:	1a89      	subs	r1, r1, r2
 800dda2:	9104      	str	r1, [sp, #16]
 800dda4:	9905      	ldr	r1, [sp, #20]
 800dda6:	eba8 0802 	sub.w	r8, r8, r2
 800ddaa:	1a8a      	subs	r2, r1, r2
 800ddac:	9205      	str	r2, [sp, #20]
 800ddae:	b303      	cbz	r3, 800ddf2 <_dtoa_r+0x6b2>
 800ddb0:	9a07      	ldr	r2, [sp, #28]
 800ddb2:	2a00      	cmp	r2, #0
 800ddb4:	f000 80a5 	beq.w	800df02 <_dtoa_r+0x7c2>
 800ddb8:	2c00      	cmp	r4, #0
 800ddba:	dd13      	ble.n	800dde4 <_dtoa_r+0x6a4>
 800ddbc:	4639      	mov	r1, r7
 800ddbe:	4622      	mov	r2, r4
 800ddc0:	4630      	mov	r0, r6
 800ddc2:	930d      	str	r3, [sp, #52]	; 0x34
 800ddc4:	f000 fcde 	bl	800e784 <__pow5mult>
 800ddc8:	462a      	mov	r2, r5
 800ddca:	4601      	mov	r1, r0
 800ddcc:	4607      	mov	r7, r0
 800ddce:	4630      	mov	r0, r6
 800ddd0:	f000 fc2e 	bl	800e630 <__multiply>
 800ddd4:	4629      	mov	r1, r5
 800ddd6:	9009      	str	r0, [sp, #36]	; 0x24
 800ddd8:	4630      	mov	r0, r6
 800ddda:	f000 fb5d 	bl	800e498 <_Bfree>
 800ddde:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dde0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dde2:	4615      	mov	r5, r2
 800dde4:	1b1a      	subs	r2, r3, r4
 800dde6:	d004      	beq.n	800ddf2 <_dtoa_r+0x6b2>
 800dde8:	4629      	mov	r1, r5
 800ddea:	4630      	mov	r0, r6
 800ddec:	f000 fcca 	bl	800e784 <__pow5mult>
 800ddf0:	4605      	mov	r5, r0
 800ddf2:	2101      	movs	r1, #1
 800ddf4:	4630      	mov	r0, r6
 800ddf6:	f000 fc05 	bl	800e604 <__i2b>
 800ddfa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	4604      	mov	r4, r0
 800de00:	f340 8081 	ble.w	800df06 <_dtoa_r+0x7c6>
 800de04:	461a      	mov	r2, r3
 800de06:	4601      	mov	r1, r0
 800de08:	4630      	mov	r0, r6
 800de0a:	f000 fcbb 	bl	800e784 <__pow5mult>
 800de0e:	9b06      	ldr	r3, [sp, #24]
 800de10:	2b01      	cmp	r3, #1
 800de12:	4604      	mov	r4, r0
 800de14:	dd7a      	ble.n	800df0c <_dtoa_r+0x7cc>
 800de16:	2300      	movs	r3, #0
 800de18:	9309      	str	r3, [sp, #36]	; 0x24
 800de1a:	6922      	ldr	r2, [r4, #16]
 800de1c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800de20:	6910      	ldr	r0, [r2, #16]
 800de22:	f000 fba1 	bl	800e568 <__hi0bits>
 800de26:	f1c0 0020 	rsb	r0, r0, #32
 800de2a:	9b05      	ldr	r3, [sp, #20]
 800de2c:	4418      	add	r0, r3
 800de2e:	f010 001f 	ands.w	r0, r0, #31
 800de32:	f000 8093 	beq.w	800df5c <_dtoa_r+0x81c>
 800de36:	f1c0 0220 	rsb	r2, r0, #32
 800de3a:	2a04      	cmp	r2, #4
 800de3c:	f340 8085 	ble.w	800df4a <_dtoa_r+0x80a>
 800de40:	9b04      	ldr	r3, [sp, #16]
 800de42:	f1c0 001c 	rsb	r0, r0, #28
 800de46:	4403      	add	r3, r0
 800de48:	9304      	str	r3, [sp, #16]
 800de4a:	9b05      	ldr	r3, [sp, #20]
 800de4c:	4480      	add	r8, r0
 800de4e:	4403      	add	r3, r0
 800de50:	9305      	str	r3, [sp, #20]
 800de52:	9b04      	ldr	r3, [sp, #16]
 800de54:	2b00      	cmp	r3, #0
 800de56:	dd05      	ble.n	800de64 <_dtoa_r+0x724>
 800de58:	4629      	mov	r1, r5
 800de5a:	461a      	mov	r2, r3
 800de5c:	4630      	mov	r0, r6
 800de5e:	f000 fceb 	bl	800e838 <__lshift>
 800de62:	4605      	mov	r5, r0
 800de64:	9b05      	ldr	r3, [sp, #20]
 800de66:	2b00      	cmp	r3, #0
 800de68:	dd05      	ble.n	800de76 <_dtoa_r+0x736>
 800de6a:	4621      	mov	r1, r4
 800de6c:	461a      	mov	r2, r3
 800de6e:	4630      	mov	r0, r6
 800de70:	f000 fce2 	bl	800e838 <__lshift>
 800de74:	4604      	mov	r4, r0
 800de76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800de78:	2b00      	cmp	r3, #0
 800de7a:	d071      	beq.n	800df60 <_dtoa_r+0x820>
 800de7c:	4621      	mov	r1, r4
 800de7e:	4628      	mov	r0, r5
 800de80:	f000 fd46 	bl	800e910 <__mcmp>
 800de84:	2800      	cmp	r0, #0
 800de86:	da6b      	bge.n	800df60 <_dtoa_r+0x820>
 800de88:	2300      	movs	r3, #0
 800de8a:	4629      	mov	r1, r5
 800de8c:	220a      	movs	r2, #10
 800de8e:	4630      	mov	r0, r6
 800de90:	f000 fb24 	bl	800e4dc <__multadd>
 800de94:	9b07      	ldr	r3, [sp, #28]
 800de96:	f10b 3bff 	add.w	fp, fp, #4294967295
 800de9a:	4605      	mov	r5, r0
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	f000 8197 	beq.w	800e1d0 <_dtoa_r+0xa90>
 800dea2:	4639      	mov	r1, r7
 800dea4:	2300      	movs	r3, #0
 800dea6:	220a      	movs	r2, #10
 800dea8:	4630      	mov	r0, r6
 800deaa:	f000 fb17 	bl	800e4dc <__multadd>
 800deae:	f1ba 0f00 	cmp.w	sl, #0
 800deb2:	4607      	mov	r7, r0
 800deb4:	f300 8093 	bgt.w	800dfde <_dtoa_r+0x89e>
 800deb8:	9b06      	ldr	r3, [sp, #24]
 800deba:	2b02      	cmp	r3, #2
 800debc:	dc57      	bgt.n	800df6e <_dtoa_r+0x82e>
 800debe:	e08e      	b.n	800dfde <_dtoa_r+0x89e>
 800dec0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800dec2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800dec6:	e751      	b.n	800dd6c <_dtoa_r+0x62c>
 800dec8:	f109 34ff 	add.w	r4, r9, #4294967295
 800decc:	42a3      	cmp	r3, r4
 800dece:	bfbf      	itttt	lt
 800ded0:	1ae2      	sublt	r2, r4, r3
 800ded2:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800ded4:	189b      	addlt	r3, r3, r2
 800ded6:	930a      	strlt	r3, [sp, #40]	; 0x28
 800ded8:	bfae      	itee	ge
 800deda:	1b1c      	subge	r4, r3, r4
 800dedc:	4623      	movlt	r3, r4
 800dede:	2400      	movlt	r4, #0
 800dee0:	f1b9 0f00 	cmp.w	r9, #0
 800dee4:	bfb5      	itete	lt
 800dee6:	9a04      	ldrlt	r2, [sp, #16]
 800dee8:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 800deec:	eba2 0809 	sublt.w	r8, r2, r9
 800def0:	464a      	movge	r2, r9
 800def2:	bfb8      	it	lt
 800def4:	2200      	movlt	r2, #0
 800def6:	e73c      	b.n	800dd72 <_dtoa_r+0x632>
 800def8:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800defc:	9f07      	ldr	r7, [sp, #28]
 800defe:	461c      	mov	r4, r3
 800df00:	e744      	b.n	800dd8c <_dtoa_r+0x64c>
 800df02:	461a      	mov	r2, r3
 800df04:	e770      	b.n	800dde8 <_dtoa_r+0x6a8>
 800df06:	9b06      	ldr	r3, [sp, #24]
 800df08:	2b01      	cmp	r3, #1
 800df0a:	dc18      	bgt.n	800df3e <_dtoa_r+0x7fe>
 800df0c:	9b02      	ldr	r3, [sp, #8]
 800df0e:	b9b3      	cbnz	r3, 800df3e <_dtoa_r+0x7fe>
 800df10:	9b03      	ldr	r3, [sp, #12]
 800df12:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800df16:	b9a2      	cbnz	r2, 800df42 <_dtoa_r+0x802>
 800df18:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800df1c:	0d12      	lsrs	r2, r2, #20
 800df1e:	0512      	lsls	r2, r2, #20
 800df20:	b18a      	cbz	r2, 800df46 <_dtoa_r+0x806>
 800df22:	9b04      	ldr	r3, [sp, #16]
 800df24:	3301      	adds	r3, #1
 800df26:	9304      	str	r3, [sp, #16]
 800df28:	9b05      	ldr	r3, [sp, #20]
 800df2a:	3301      	adds	r3, #1
 800df2c:	9305      	str	r3, [sp, #20]
 800df2e:	2301      	movs	r3, #1
 800df30:	9309      	str	r3, [sp, #36]	; 0x24
 800df32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800df34:	2b00      	cmp	r3, #0
 800df36:	f47f af70 	bne.w	800de1a <_dtoa_r+0x6da>
 800df3a:	2001      	movs	r0, #1
 800df3c:	e775      	b.n	800de2a <_dtoa_r+0x6ea>
 800df3e:	2300      	movs	r3, #0
 800df40:	e7f6      	b.n	800df30 <_dtoa_r+0x7f0>
 800df42:	9b02      	ldr	r3, [sp, #8]
 800df44:	e7f4      	b.n	800df30 <_dtoa_r+0x7f0>
 800df46:	9209      	str	r2, [sp, #36]	; 0x24
 800df48:	e7f3      	b.n	800df32 <_dtoa_r+0x7f2>
 800df4a:	d082      	beq.n	800de52 <_dtoa_r+0x712>
 800df4c:	9b04      	ldr	r3, [sp, #16]
 800df4e:	321c      	adds	r2, #28
 800df50:	4413      	add	r3, r2
 800df52:	9304      	str	r3, [sp, #16]
 800df54:	9b05      	ldr	r3, [sp, #20]
 800df56:	4490      	add	r8, r2
 800df58:	4413      	add	r3, r2
 800df5a:	e779      	b.n	800de50 <_dtoa_r+0x710>
 800df5c:	4602      	mov	r2, r0
 800df5e:	e7f5      	b.n	800df4c <_dtoa_r+0x80c>
 800df60:	f1b9 0f00 	cmp.w	r9, #0
 800df64:	dc36      	bgt.n	800dfd4 <_dtoa_r+0x894>
 800df66:	9b06      	ldr	r3, [sp, #24]
 800df68:	2b02      	cmp	r3, #2
 800df6a:	dd33      	ble.n	800dfd4 <_dtoa_r+0x894>
 800df6c:	46ca      	mov	sl, r9
 800df6e:	f1ba 0f00 	cmp.w	sl, #0
 800df72:	d10d      	bne.n	800df90 <_dtoa_r+0x850>
 800df74:	4621      	mov	r1, r4
 800df76:	4653      	mov	r3, sl
 800df78:	2205      	movs	r2, #5
 800df7a:	4630      	mov	r0, r6
 800df7c:	f000 faae 	bl	800e4dc <__multadd>
 800df80:	4601      	mov	r1, r0
 800df82:	4604      	mov	r4, r0
 800df84:	4628      	mov	r0, r5
 800df86:	f000 fcc3 	bl	800e910 <__mcmp>
 800df8a:	2800      	cmp	r0, #0
 800df8c:	f73f ade4 	bgt.w	800db58 <_dtoa_r+0x418>
 800df90:	9b08      	ldr	r3, [sp, #32]
 800df92:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800df96:	ea6f 0b03 	mvn.w	fp, r3
 800df9a:	f04f 0900 	mov.w	r9, #0
 800df9e:	4621      	mov	r1, r4
 800dfa0:	4630      	mov	r0, r6
 800dfa2:	f000 fa79 	bl	800e498 <_Bfree>
 800dfa6:	2f00      	cmp	r7, #0
 800dfa8:	f43f aea1 	beq.w	800dcee <_dtoa_r+0x5ae>
 800dfac:	f1b9 0f00 	cmp.w	r9, #0
 800dfb0:	d005      	beq.n	800dfbe <_dtoa_r+0x87e>
 800dfb2:	45b9      	cmp	r9, r7
 800dfb4:	d003      	beq.n	800dfbe <_dtoa_r+0x87e>
 800dfb6:	4649      	mov	r1, r9
 800dfb8:	4630      	mov	r0, r6
 800dfba:	f000 fa6d 	bl	800e498 <_Bfree>
 800dfbe:	4639      	mov	r1, r7
 800dfc0:	4630      	mov	r0, r6
 800dfc2:	f000 fa69 	bl	800e498 <_Bfree>
 800dfc6:	e692      	b.n	800dcee <_dtoa_r+0x5ae>
 800dfc8:	2400      	movs	r4, #0
 800dfca:	4627      	mov	r7, r4
 800dfcc:	e7e0      	b.n	800df90 <_dtoa_r+0x850>
 800dfce:	4693      	mov	fp, r2
 800dfd0:	4627      	mov	r7, r4
 800dfd2:	e5c1      	b.n	800db58 <_dtoa_r+0x418>
 800dfd4:	9b07      	ldr	r3, [sp, #28]
 800dfd6:	46ca      	mov	sl, r9
 800dfd8:	2b00      	cmp	r3, #0
 800dfda:	f000 8100 	beq.w	800e1de <_dtoa_r+0xa9e>
 800dfde:	f1b8 0f00 	cmp.w	r8, #0
 800dfe2:	dd05      	ble.n	800dff0 <_dtoa_r+0x8b0>
 800dfe4:	4639      	mov	r1, r7
 800dfe6:	4642      	mov	r2, r8
 800dfe8:	4630      	mov	r0, r6
 800dfea:	f000 fc25 	bl	800e838 <__lshift>
 800dfee:	4607      	mov	r7, r0
 800dff0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dff2:	2b00      	cmp	r3, #0
 800dff4:	d05d      	beq.n	800e0b2 <_dtoa_r+0x972>
 800dff6:	6879      	ldr	r1, [r7, #4]
 800dff8:	4630      	mov	r0, r6
 800dffa:	f000 fa0d 	bl	800e418 <_Balloc>
 800dffe:	4680      	mov	r8, r0
 800e000:	b928      	cbnz	r0, 800e00e <_dtoa_r+0x8ce>
 800e002:	4b82      	ldr	r3, [pc, #520]	; (800e20c <_dtoa_r+0xacc>)
 800e004:	4602      	mov	r2, r0
 800e006:	f240 21ef 	movw	r1, #751	; 0x2ef
 800e00a:	f7ff bbb1 	b.w	800d770 <_dtoa_r+0x30>
 800e00e:	693a      	ldr	r2, [r7, #16]
 800e010:	3202      	adds	r2, #2
 800e012:	0092      	lsls	r2, r2, #2
 800e014:	f107 010c 	add.w	r1, r7, #12
 800e018:	300c      	adds	r0, #12
 800e01a:	f7ff faf1 	bl	800d600 <memcpy>
 800e01e:	2201      	movs	r2, #1
 800e020:	4641      	mov	r1, r8
 800e022:	4630      	mov	r0, r6
 800e024:	f000 fc08 	bl	800e838 <__lshift>
 800e028:	9b01      	ldr	r3, [sp, #4]
 800e02a:	3301      	adds	r3, #1
 800e02c:	9304      	str	r3, [sp, #16]
 800e02e:	9b01      	ldr	r3, [sp, #4]
 800e030:	4453      	add	r3, sl
 800e032:	9308      	str	r3, [sp, #32]
 800e034:	9b02      	ldr	r3, [sp, #8]
 800e036:	f003 0301 	and.w	r3, r3, #1
 800e03a:	46b9      	mov	r9, r7
 800e03c:	9307      	str	r3, [sp, #28]
 800e03e:	4607      	mov	r7, r0
 800e040:	9b04      	ldr	r3, [sp, #16]
 800e042:	4621      	mov	r1, r4
 800e044:	3b01      	subs	r3, #1
 800e046:	4628      	mov	r0, r5
 800e048:	9302      	str	r3, [sp, #8]
 800e04a:	f7ff faee 	bl	800d62a <quorem>
 800e04e:	4603      	mov	r3, r0
 800e050:	3330      	adds	r3, #48	; 0x30
 800e052:	9005      	str	r0, [sp, #20]
 800e054:	4649      	mov	r1, r9
 800e056:	4628      	mov	r0, r5
 800e058:	9309      	str	r3, [sp, #36]	; 0x24
 800e05a:	f000 fc59 	bl	800e910 <__mcmp>
 800e05e:	463a      	mov	r2, r7
 800e060:	4682      	mov	sl, r0
 800e062:	4621      	mov	r1, r4
 800e064:	4630      	mov	r0, r6
 800e066:	f000 fc6f 	bl	800e948 <__mdiff>
 800e06a:	68c2      	ldr	r2, [r0, #12]
 800e06c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e06e:	4680      	mov	r8, r0
 800e070:	bb0a      	cbnz	r2, 800e0b6 <_dtoa_r+0x976>
 800e072:	4601      	mov	r1, r0
 800e074:	4628      	mov	r0, r5
 800e076:	f000 fc4b 	bl	800e910 <__mcmp>
 800e07a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e07c:	4602      	mov	r2, r0
 800e07e:	4641      	mov	r1, r8
 800e080:	4630      	mov	r0, r6
 800e082:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 800e086:	f000 fa07 	bl	800e498 <_Bfree>
 800e08a:	9b06      	ldr	r3, [sp, #24]
 800e08c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e08e:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800e092:	ea43 0102 	orr.w	r1, r3, r2
 800e096:	9b07      	ldr	r3, [sp, #28]
 800e098:	4319      	orrs	r1, r3
 800e09a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e09c:	d10d      	bne.n	800e0ba <_dtoa_r+0x97a>
 800e09e:	2b39      	cmp	r3, #57	; 0x39
 800e0a0:	d029      	beq.n	800e0f6 <_dtoa_r+0x9b6>
 800e0a2:	f1ba 0f00 	cmp.w	sl, #0
 800e0a6:	dd01      	ble.n	800e0ac <_dtoa_r+0x96c>
 800e0a8:	9b05      	ldr	r3, [sp, #20]
 800e0aa:	3331      	adds	r3, #49	; 0x31
 800e0ac:	9a02      	ldr	r2, [sp, #8]
 800e0ae:	7013      	strb	r3, [r2, #0]
 800e0b0:	e775      	b.n	800df9e <_dtoa_r+0x85e>
 800e0b2:	4638      	mov	r0, r7
 800e0b4:	e7b8      	b.n	800e028 <_dtoa_r+0x8e8>
 800e0b6:	2201      	movs	r2, #1
 800e0b8:	e7e1      	b.n	800e07e <_dtoa_r+0x93e>
 800e0ba:	f1ba 0f00 	cmp.w	sl, #0
 800e0be:	db06      	blt.n	800e0ce <_dtoa_r+0x98e>
 800e0c0:	9906      	ldr	r1, [sp, #24]
 800e0c2:	ea41 0a0a 	orr.w	sl, r1, sl
 800e0c6:	9907      	ldr	r1, [sp, #28]
 800e0c8:	ea5a 0a01 	orrs.w	sl, sl, r1
 800e0cc:	d120      	bne.n	800e110 <_dtoa_r+0x9d0>
 800e0ce:	2a00      	cmp	r2, #0
 800e0d0:	ddec      	ble.n	800e0ac <_dtoa_r+0x96c>
 800e0d2:	4629      	mov	r1, r5
 800e0d4:	2201      	movs	r2, #1
 800e0d6:	4630      	mov	r0, r6
 800e0d8:	9304      	str	r3, [sp, #16]
 800e0da:	f000 fbad 	bl	800e838 <__lshift>
 800e0de:	4621      	mov	r1, r4
 800e0e0:	4605      	mov	r5, r0
 800e0e2:	f000 fc15 	bl	800e910 <__mcmp>
 800e0e6:	2800      	cmp	r0, #0
 800e0e8:	9b04      	ldr	r3, [sp, #16]
 800e0ea:	dc02      	bgt.n	800e0f2 <_dtoa_r+0x9b2>
 800e0ec:	d1de      	bne.n	800e0ac <_dtoa_r+0x96c>
 800e0ee:	07da      	lsls	r2, r3, #31
 800e0f0:	d5dc      	bpl.n	800e0ac <_dtoa_r+0x96c>
 800e0f2:	2b39      	cmp	r3, #57	; 0x39
 800e0f4:	d1d8      	bne.n	800e0a8 <_dtoa_r+0x968>
 800e0f6:	9a02      	ldr	r2, [sp, #8]
 800e0f8:	2339      	movs	r3, #57	; 0x39
 800e0fa:	7013      	strb	r3, [r2, #0]
 800e0fc:	4643      	mov	r3, r8
 800e0fe:	4698      	mov	r8, r3
 800e100:	3b01      	subs	r3, #1
 800e102:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800e106:	2a39      	cmp	r2, #57	; 0x39
 800e108:	d051      	beq.n	800e1ae <_dtoa_r+0xa6e>
 800e10a:	3201      	adds	r2, #1
 800e10c:	701a      	strb	r2, [r3, #0]
 800e10e:	e746      	b.n	800df9e <_dtoa_r+0x85e>
 800e110:	2a00      	cmp	r2, #0
 800e112:	dd03      	ble.n	800e11c <_dtoa_r+0x9dc>
 800e114:	2b39      	cmp	r3, #57	; 0x39
 800e116:	d0ee      	beq.n	800e0f6 <_dtoa_r+0x9b6>
 800e118:	3301      	adds	r3, #1
 800e11a:	e7c7      	b.n	800e0ac <_dtoa_r+0x96c>
 800e11c:	9a04      	ldr	r2, [sp, #16]
 800e11e:	9908      	ldr	r1, [sp, #32]
 800e120:	f802 3c01 	strb.w	r3, [r2, #-1]
 800e124:	428a      	cmp	r2, r1
 800e126:	d02b      	beq.n	800e180 <_dtoa_r+0xa40>
 800e128:	4629      	mov	r1, r5
 800e12a:	2300      	movs	r3, #0
 800e12c:	220a      	movs	r2, #10
 800e12e:	4630      	mov	r0, r6
 800e130:	f000 f9d4 	bl	800e4dc <__multadd>
 800e134:	45b9      	cmp	r9, r7
 800e136:	4605      	mov	r5, r0
 800e138:	f04f 0300 	mov.w	r3, #0
 800e13c:	f04f 020a 	mov.w	r2, #10
 800e140:	4649      	mov	r1, r9
 800e142:	4630      	mov	r0, r6
 800e144:	d107      	bne.n	800e156 <_dtoa_r+0xa16>
 800e146:	f000 f9c9 	bl	800e4dc <__multadd>
 800e14a:	4681      	mov	r9, r0
 800e14c:	4607      	mov	r7, r0
 800e14e:	9b04      	ldr	r3, [sp, #16]
 800e150:	3301      	adds	r3, #1
 800e152:	9304      	str	r3, [sp, #16]
 800e154:	e774      	b.n	800e040 <_dtoa_r+0x900>
 800e156:	f000 f9c1 	bl	800e4dc <__multadd>
 800e15a:	4639      	mov	r1, r7
 800e15c:	4681      	mov	r9, r0
 800e15e:	2300      	movs	r3, #0
 800e160:	220a      	movs	r2, #10
 800e162:	4630      	mov	r0, r6
 800e164:	f000 f9ba 	bl	800e4dc <__multadd>
 800e168:	4607      	mov	r7, r0
 800e16a:	e7f0      	b.n	800e14e <_dtoa_r+0xa0e>
 800e16c:	f1ba 0f00 	cmp.w	sl, #0
 800e170:	9a01      	ldr	r2, [sp, #4]
 800e172:	bfcc      	ite	gt
 800e174:	46d0      	movgt	r8, sl
 800e176:	f04f 0801 	movle.w	r8, #1
 800e17a:	4490      	add	r8, r2
 800e17c:	f04f 0900 	mov.w	r9, #0
 800e180:	4629      	mov	r1, r5
 800e182:	2201      	movs	r2, #1
 800e184:	4630      	mov	r0, r6
 800e186:	9302      	str	r3, [sp, #8]
 800e188:	f000 fb56 	bl	800e838 <__lshift>
 800e18c:	4621      	mov	r1, r4
 800e18e:	4605      	mov	r5, r0
 800e190:	f000 fbbe 	bl	800e910 <__mcmp>
 800e194:	2800      	cmp	r0, #0
 800e196:	dcb1      	bgt.n	800e0fc <_dtoa_r+0x9bc>
 800e198:	d102      	bne.n	800e1a0 <_dtoa_r+0xa60>
 800e19a:	9b02      	ldr	r3, [sp, #8]
 800e19c:	07db      	lsls	r3, r3, #31
 800e19e:	d4ad      	bmi.n	800e0fc <_dtoa_r+0x9bc>
 800e1a0:	4643      	mov	r3, r8
 800e1a2:	4698      	mov	r8, r3
 800e1a4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e1a8:	2a30      	cmp	r2, #48	; 0x30
 800e1aa:	d0fa      	beq.n	800e1a2 <_dtoa_r+0xa62>
 800e1ac:	e6f7      	b.n	800df9e <_dtoa_r+0x85e>
 800e1ae:	9a01      	ldr	r2, [sp, #4]
 800e1b0:	429a      	cmp	r2, r3
 800e1b2:	d1a4      	bne.n	800e0fe <_dtoa_r+0x9be>
 800e1b4:	f10b 0b01 	add.w	fp, fp, #1
 800e1b8:	2331      	movs	r3, #49	; 0x31
 800e1ba:	e778      	b.n	800e0ae <_dtoa_r+0x96e>
 800e1bc:	4b14      	ldr	r3, [pc, #80]	; (800e210 <_dtoa_r+0xad0>)
 800e1be:	f7ff bb2a 	b.w	800d816 <_dtoa_r+0xd6>
 800e1c2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e1c4:	2b00      	cmp	r3, #0
 800e1c6:	f47f ab05 	bne.w	800d7d4 <_dtoa_r+0x94>
 800e1ca:	4b12      	ldr	r3, [pc, #72]	; (800e214 <_dtoa_r+0xad4>)
 800e1cc:	f7ff bb23 	b.w	800d816 <_dtoa_r+0xd6>
 800e1d0:	f1ba 0f00 	cmp.w	sl, #0
 800e1d4:	dc03      	bgt.n	800e1de <_dtoa_r+0xa9e>
 800e1d6:	9b06      	ldr	r3, [sp, #24]
 800e1d8:	2b02      	cmp	r3, #2
 800e1da:	f73f aec8 	bgt.w	800df6e <_dtoa_r+0x82e>
 800e1de:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800e1e2:	4621      	mov	r1, r4
 800e1e4:	4628      	mov	r0, r5
 800e1e6:	f7ff fa20 	bl	800d62a <quorem>
 800e1ea:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800e1ee:	f808 3b01 	strb.w	r3, [r8], #1
 800e1f2:	9a01      	ldr	r2, [sp, #4]
 800e1f4:	eba8 0202 	sub.w	r2, r8, r2
 800e1f8:	4592      	cmp	sl, r2
 800e1fa:	ddb7      	ble.n	800e16c <_dtoa_r+0xa2c>
 800e1fc:	4629      	mov	r1, r5
 800e1fe:	2300      	movs	r3, #0
 800e200:	220a      	movs	r2, #10
 800e202:	4630      	mov	r0, r6
 800e204:	f000 f96a 	bl	800e4dc <__multadd>
 800e208:	4605      	mov	r5, r0
 800e20a:	e7ea      	b.n	800e1e2 <_dtoa_r+0xaa2>
 800e20c:	0800f960 	.word	0x0800f960
 800e210:	0800f8c0 	.word	0x0800f8c0
 800e214:	0800f8e4 	.word	0x0800f8e4

0800e218 <_free_r>:
 800e218:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e21a:	2900      	cmp	r1, #0
 800e21c:	d044      	beq.n	800e2a8 <_free_r+0x90>
 800e21e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e222:	9001      	str	r0, [sp, #4]
 800e224:	2b00      	cmp	r3, #0
 800e226:	f1a1 0404 	sub.w	r4, r1, #4
 800e22a:	bfb8      	it	lt
 800e22c:	18e4      	addlt	r4, r4, r3
 800e22e:	f000 f8e7 	bl	800e400 <__malloc_lock>
 800e232:	4a1e      	ldr	r2, [pc, #120]	; (800e2ac <_free_r+0x94>)
 800e234:	9801      	ldr	r0, [sp, #4]
 800e236:	6813      	ldr	r3, [r2, #0]
 800e238:	b933      	cbnz	r3, 800e248 <_free_r+0x30>
 800e23a:	6063      	str	r3, [r4, #4]
 800e23c:	6014      	str	r4, [r2, #0]
 800e23e:	b003      	add	sp, #12
 800e240:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e244:	f000 b8e2 	b.w	800e40c <__malloc_unlock>
 800e248:	42a3      	cmp	r3, r4
 800e24a:	d908      	bls.n	800e25e <_free_r+0x46>
 800e24c:	6825      	ldr	r5, [r4, #0]
 800e24e:	1961      	adds	r1, r4, r5
 800e250:	428b      	cmp	r3, r1
 800e252:	bf01      	itttt	eq
 800e254:	6819      	ldreq	r1, [r3, #0]
 800e256:	685b      	ldreq	r3, [r3, #4]
 800e258:	1949      	addeq	r1, r1, r5
 800e25a:	6021      	streq	r1, [r4, #0]
 800e25c:	e7ed      	b.n	800e23a <_free_r+0x22>
 800e25e:	461a      	mov	r2, r3
 800e260:	685b      	ldr	r3, [r3, #4]
 800e262:	b10b      	cbz	r3, 800e268 <_free_r+0x50>
 800e264:	42a3      	cmp	r3, r4
 800e266:	d9fa      	bls.n	800e25e <_free_r+0x46>
 800e268:	6811      	ldr	r1, [r2, #0]
 800e26a:	1855      	adds	r5, r2, r1
 800e26c:	42a5      	cmp	r5, r4
 800e26e:	d10b      	bne.n	800e288 <_free_r+0x70>
 800e270:	6824      	ldr	r4, [r4, #0]
 800e272:	4421      	add	r1, r4
 800e274:	1854      	adds	r4, r2, r1
 800e276:	42a3      	cmp	r3, r4
 800e278:	6011      	str	r1, [r2, #0]
 800e27a:	d1e0      	bne.n	800e23e <_free_r+0x26>
 800e27c:	681c      	ldr	r4, [r3, #0]
 800e27e:	685b      	ldr	r3, [r3, #4]
 800e280:	6053      	str	r3, [r2, #4]
 800e282:	440c      	add	r4, r1
 800e284:	6014      	str	r4, [r2, #0]
 800e286:	e7da      	b.n	800e23e <_free_r+0x26>
 800e288:	d902      	bls.n	800e290 <_free_r+0x78>
 800e28a:	230c      	movs	r3, #12
 800e28c:	6003      	str	r3, [r0, #0]
 800e28e:	e7d6      	b.n	800e23e <_free_r+0x26>
 800e290:	6825      	ldr	r5, [r4, #0]
 800e292:	1961      	adds	r1, r4, r5
 800e294:	428b      	cmp	r3, r1
 800e296:	bf04      	itt	eq
 800e298:	6819      	ldreq	r1, [r3, #0]
 800e29a:	685b      	ldreq	r3, [r3, #4]
 800e29c:	6063      	str	r3, [r4, #4]
 800e29e:	bf04      	itt	eq
 800e2a0:	1949      	addeq	r1, r1, r5
 800e2a2:	6021      	streq	r1, [r4, #0]
 800e2a4:	6054      	str	r4, [r2, #4]
 800e2a6:	e7ca      	b.n	800e23e <_free_r+0x26>
 800e2a8:	b003      	add	sp, #12
 800e2aa:	bd30      	pop	{r4, r5, pc}
 800e2ac:	24005b74 	.word	0x24005b74

0800e2b0 <malloc>:
 800e2b0:	4b02      	ldr	r3, [pc, #8]	; (800e2bc <malloc+0xc>)
 800e2b2:	4601      	mov	r1, r0
 800e2b4:	6818      	ldr	r0, [r3, #0]
 800e2b6:	f000 b823 	b.w	800e300 <_malloc_r>
 800e2ba:	bf00      	nop
 800e2bc:	24000074 	.word	0x24000074

0800e2c0 <sbrk_aligned>:
 800e2c0:	b570      	push	{r4, r5, r6, lr}
 800e2c2:	4e0e      	ldr	r6, [pc, #56]	; (800e2fc <sbrk_aligned+0x3c>)
 800e2c4:	460c      	mov	r4, r1
 800e2c6:	6831      	ldr	r1, [r6, #0]
 800e2c8:	4605      	mov	r5, r0
 800e2ca:	b911      	cbnz	r1, 800e2d2 <sbrk_aligned+0x12>
 800e2cc:	f001 f85e 	bl	800f38c <_sbrk_r>
 800e2d0:	6030      	str	r0, [r6, #0]
 800e2d2:	4621      	mov	r1, r4
 800e2d4:	4628      	mov	r0, r5
 800e2d6:	f001 f859 	bl	800f38c <_sbrk_r>
 800e2da:	1c43      	adds	r3, r0, #1
 800e2dc:	d00a      	beq.n	800e2f4 <sbrk_aligned+0x34>
 800e2de:	1cc4      	adds	r4, r0, #3
 800e2e0:	f024 0403 	bic.w	r4, r4, #3
 800e2e4:	42a0      	cmp	r0, r4
 800e2e6:	d007      	beq.n	800e2f8 <sbrk_aligned+0x38>
 800e2e8:	1a21      	subs	r1, r4, r0
 800e2ea:	4628      	mov	r0, r5
 800e2ec:	f001 f84e 	bl	800f38c <_sbrk_r>
 800e2f0:	3001      	adds	r0, #1
 800e2f2:	d101      	bne.n	800e2f8 <sbrk_aligned+0x38>
 800e2f4:	f04f 34ff 	mov.w	r4, #4294967295
 800e2f8:	4620      	mov	r0, r4
 800e2fa:	bd70      	pop	{r4, r5, r6, pc}
 800e2fc:	24005b78 	.word	0x24005b78

0800e300 <_malloc_r>:
 800e300:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e304:	1ccd      	adds	r5, r1, #3
 800e306:	f025 0503 	bic.w	r5, r5, #3
 800e30a:	3508      	adds	r5, #8
 800e30c:	2d0c      	cmp	r5, #12
 800e30e:	bf38      	it	cc
 800e310:	250c      	movcc	r5, #12
 800e312:	2d00      	cmp	r5, #0
 800e314:	4607      	mov	r7, r0
 800e316:	db01      	blt.n	800e31c <_malloc_r+0x1c>
 800e318:	42a9      	cmp	r1, r5
 800e31a:	d905      	bls.n	800e328 <_malloc_r+0x28>
 800e31c:	230c      	movs	r3, #12
 800e31e:	603b      	str	r3, [r7, #0]
 800e320:	2600      	movs	r6, #0
 800e322:	4630      	mov	r0, r6
 800e324:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e328:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800e3fc <_malloc_r+0xfc>
 800e32c:	f000 f868 	bl	800e400 <__malloc_lock>
 800e330:	f8d8 3000 	ldr.w	r3, [r8]
 800e334:	461c      	mov	r4, r3
 800e336:	bb5c      	cbnz	r4, 800e390 <_malloc_r+0x90>
 800e338:	4629      	mov	r1, r5
 800e33a:	4638      	mov	r0, r7
 800e33c:	f7ff ffc0 	bl	800e2c0 <sbrk_aligned>
 800e340:	1c43      	adds	r3, r0, #1
 800e342:	4604      	mov	r4, r0
 800e344:	d155      	bne.n	800e3f2 <_malloc_r+0xf2>
 800e346:	f8d8 4000 	ldr.w	r4, [r8]
 800e34a:	4626      	mov	r6, r4
 800e34c:	2e00      	cmp	r6, #0
 800e34e:	d145      	bne.n	800e3dc <_malloc_r+0xdc>
 800e350:	2c00      	cmp	r4, #0
 800e352:	d048      	beq.n	800e3e6 <_malloc_r+0xe6>
 800e354:	6823      	ldr	r3, [r4, #0]
 800e356:	4631      	mov	r1, r6
 800e358:	4638      	mov	r0, r7
 800e35a:	eb04 0903 	add.w	r9, r4, r3
 800e35e:	f001 f815 	bl	800f38c <_sbrk_r>
 800e362:	4581      	cmp	r9, r0
 800e364:	d13f      	bne.n	800e3e6 <_malloc_r+0xe6>
 800e366:	6821      	ldr	r1, [r4, #0]
 800e368:	1a6d      	subs	r5, r5, r1
 800e36a:	4629      	mov	r1, r5
 800e36c:	4638      	mov	r0, r7
 800e36e:	f7ff ffa7 	bl	800e2c0 <sbrk_aligned>
 800e372:	3001      	adds	r0, #1
 800e374:	d037      	beq.n	800e3e6 <_malloc_r+0xe6>
 800e376:	6823      	ldr	r3, [r4, #0]
 800e378:	442b      	add	r3, r5
 800e37a:	6023      	str	r3, [r4, #0]
 800e37c:	f8d8 3000 	ldr.w	r3, [r8]
 800e380:	2b00      	cmp	r3, #0
 800e382:	d038      	beq.n	800e3f6 <_malloc_r+0xf6>
 800e384:	685a      	ldr	r2, [r3, #4]
 800e386:	42a2      	cmp	r2, r4
 800e388:	d12b      	bne.n	800e3e2 <_malloc_r+0xe2>
 800e38a:	2200      	movs	r2, #0
 800e38c:	605a      	str	r2, [r3, #4]
 800e38e:	e00f      	b.n	800e3b0 <_malloc_r+0xb0>
 800e390:	6822      	ldr	r2, [r4, #0]
 800e392:	1b52      	subs	r2, r2, r5
 800e394:	d41f      	bmi.n	800e3d6 <_malloc_r+0xd6>
 800e396:	2a0b      	cmp	r2, #11
 800e398:	d917      	bls.n	800e3ca <_malloc_r+0xca>
 800e39a:	1961      	adds	r1, r4, r5
 800e39c:	42a3      	cmp	r3, r4
 800e39e:	6025      	str	r5, [r4, #0]
 800e3a0:	bf18      	it	ne
 800e3a2:	6059      	strne	r1, [r3, #4]
 800e3a4:	6863      	ldr	r3, [r4, #4]
 800e3a6:	bf08      	it	eq
 800e3a8:	f8c8 1000 	streq.w	r1, [r8]
 800e3ac:	5162      	str	r2, [r4, r5]
 800e3ae:	604b      	str	r3, [r1, #4]
 800e3b0:	4638      	mov	r0, r7
 800e3b2:	f104 060b 	add.w	r6, r4, #11
 800e3b6:	f000 f829 	bl	800e40c <__malloc_unlock>
 800e3ba:	f026 0607 	bic.w	r6, r6, #7
 800e3be:	1d23      	adds	r3, r4, #4
 800e3c0:	1af2      	subs	r2, r6, r3
 800e3c2:	d0ae      	beq.n	800e322 <_malloc_r+0x22>
 800e3c4:	1b9b      	subs	r3, r3, r6
 800e3c6:	50a3      	str	r3, [r4, r2]
 800e3c8:	e7ab      	b.n	800e322 <_malloc_r+0x22>
 800e3ca:	42a3      	cmp	r3, r4
 800e3cc:	6862      	ldr	r2, [r4, #4]
 800e3ce:	d1dd      	bne.n	800e38c <_malloc_r+0x8c>
 800e3d0:	f8c8 2000 	str.w	r2, [r8]
 800e3d4:	e7ec      	b.n	800e3b0 <_malloc_r+0xb0>
 800e3d6:	4623      	mov	r3, r4
 800e3d8:	6864      	ldr	r4, [r4, #4]
 800e3da:	e7ac      	b.n	800e336 <_malloc_r+0x36>
 800e3dc:	4634      	mov	r4, r6
 800e3de:	6876      	ldr	r6, [r6, #4]
 800e3e0:	e7b4      	b.n	800e34c <_malloc_r+0x4c>
 800e3e2:	4613      	mov	r3, r2
 800e3e4:	e7cc      	b.n	800e380 <_malloc_r+0x80>
 800e3e6:	230c      	movs	r3, #12
 800e3e8:	603b      	str	r3, [r7, #0]
 800e3ea:	4638      	mov	r0, r7
 800e3ec:	f000 f80e 	bl	800e40c <__malloc_unlock>
 800e3f0:	e797      	b.n	800e322 <_malloc_r+0x22>
 800e3f2:	6025      	str	r5, [r4, #0]
 800e3f4:	e7dc      	b.n	800e3b0 <_malloc_r+0xb0>
 800e3f6:	605b      	str	r3, [r3, #4]
 800e3f8:	deff      	udf	#255	; 0xff
 800e3fa:	bf00      	nop
 800e3fc:	24005b74 	.word	0x24005b74

0800e400 <__malloc_lock>:
 800e400:	4801      	ldr	r0, [pc, #4]	; (800e408 <__malloc_lock+0x8>)
 800e402:	f7ff b8fb 	b.w	800d5fc <__retarget_lock_acquire_recursive>
 800e406:	bf00      	nop
 800e408:	24005b70 	.word	0x24005b70

0800e40c <__malloc_unlock>:
 800e40c:	4801      	ldr	r0, [pc, #4]	; (800e414 <__malloc_unlock+0x8>)
 800e40e:	f7ff b8f6 	b.w	800d5fe <__retarget_lock_release_recursive>
 800e412:	bf00      	nop
 800e414:	24005b70 	.word	0x24005b70

0800e418 <_Balloc>:
 800e418:	b570      	push	{r4, r5, r6, lr}
 800e41a:	69c6      	ldr	r6, [r0, #28]
 800e41c:	4604      	mov	r4, r0
 800e41e:	460d      	mov	r5, r1
 800e420:	b976      	cbnz	r6, 800e440 <_Balloc+0x28>
 800e422:	2010      	movs	r0, #16
 800e424:	f7ff ff44 	bl	800e2b0 <malloc>
 800e428:	4602      	mov	r2, r0
 800e42a:	61e0      	str	r0, [r4, #28]
 800e42c:	b920      	cbnz	r0, 800e438 <_Balloc+0x20>
 800e42e:	4b18      	ldr	r3, [pc, #96]	; (800e490 <_Balloc+0x78>)
 800e430:	4818      	ldr	r0, [pc, #96]	; (800e494 <_Balloc+0x7c>)
 800e432:	216b      	movs	r1, #107	; 0x6b
 800e434:	f7fe fa5a 	bl	800c8ec <__assert_func>
 800e438:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e43c:	6006      	str	r6, [r0, #0]
 800e43e:	60c6      	str	r6, [r0, #12]
 800e440:	69e6      	ldr	r6, [r4, #28]
 800e442:	68f3      	ldr	r3, [r6, #12]
 800e444:	b183      	cbz	r3, 800e468 <_Balloc+0x50>
 800e446:	69e3      	ldr	r3, [r4, #28]
 800e448:	68db      	ldr	r3, [r3, #12]
 800e44a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e44e:	b9b8      	cbnz	r0, 800e480 <_Balloc+0x68>
 800e450:	2101      	movs	r1, #1
 800e452:	fa01 f605 	lsl.w	r6, r1, r5
 800e456:	1d72      	adds	r2, r6, #5
 800e458:	0092      	lsls	r2, r2, #2
 800e45a:	4620      	mov	r0, r4
 800e45c:	f000 ffa6 	bl	800f3ac <_calloc_r>
 800e460:	b160      	cbz	r0, 800e47c <_Balloc+0x64>
 800e462:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e466:	e00e      	b.n	800e486 <_Balloc+0x6e>
 800e468:	2221      	movs	r2, #33	; 0x21
 800e46a:	2104      	movs	r1, #4
 800e46c:	4620      	mov	r0, r4
 800e46e:	f000 ff9d 	bl	800f3ac <_calloc_r>
 800e472:	69e3      	ldr	r3, [r4, #28]
 800e474:	60f0      	str	r0, [r6, #12]
 800e476:	68db      	ldr	r3, [r3, #12]
 800e478:	2b00      	cmp	r3, #0
 800e47a:	d1e4      	bne.n	800e446 <_Balloc+0x2e>
 800e47c:	2000      	movs	r0, #0
 800e47e:	bd70      	pop	{r4, r5, r6, pc}
 800e480:	6802      	ldr	r2, [r0, #0]
 800e482:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e486:	2300      	movs	r3, #0
 800e488:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e48c:	e7f7      	b.n	800e47e <_Balloc+0x66>
 800e48e:	bf00      	nop
 800e490:	0800f8f1 	.word	0x0800f8f1
 800e494:	0800f971 	.word	0x0800f971

0800e498 <_Bfree>:
 800e498:	b570      	push	{r4, r5, r6, lr}
 800e49a:	69c6      	ldr	r6, [r0, #28]
 800e49c:	4605      	mov	r5, r0
 800e49e:	460c      	mov	r4, r1
 800e4a0:	b976      	cbnz	r6, 800e4c0 <_Bfree+0x28>
 800e4a2:	2010      	movs	r0, #16
 800e4a4:	f7ff ff04 	bl	800e2b0 <malloc>
 800e4a8:	4602      	mov	r2, r0
 800e4aa:	61e8      	str	r0, [r5, #28]
 800e4ac:	b920      	cbnz	r0, 800e4b8 <_Bfree+0x20>
 800e4ae:	4b09      	ldr	r3, [pc, #36]	; (800e4d4 <_Bfree+0x3c>)
 800e4b0:	4809      	ldr	r0, [pc, #36]	; (800e4d8 <_Bfree+0x40>)
 800e4b2:	218f      	movs	r1, #143	; 0x8f
 800e4b4:	f7fe fa1a 	bl	800c8ec <__assert_func>
 800e4b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e4bc:	6006      	str	r6, [r0, #0]
 800e4be:	60c6      	str	r6, [r0, #12]
 800e4c0:	b13c      	cbz	r4, 800e4d2 <_Bfree+0x3a>
 800e4c2:	69eb      	ldr	r3, [r5, #28]
 800e4c4:	6862      	ldr	r2, [r4, #4]
 800e4c6:	68db      	ldr	r3, [r3, #12]
 800e4c8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e4cc:	6021      	str	r1, [r4, #0]
 800e4ce:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e4d2:	bd70      	pop	{r4, r5, r6, pc}
 800e4d4:	0800f8f1 	.word	0x0800f8f1
 800e4d8:	0800f971 	.word	0x0800f971

0800e4dc <__multadd>:
 800e4dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e4e0:	690d      	ldr	r5, [r1, #16]
 800e4e2:	4607      	mov	r7, r0
 800e4e4:	460c      	mov	r4, r1
 800e4e6:	461e      	mov	r6, r3
 800e4e8:	f101 0c14 	add.w	ip, r1, #20
 800e4ec:	2000      	movs	r0, #0
 800e4ee:	f8dc 3000 	ldr.w	r3, [ip]
 800e4f2:	b299      	uxth	r1, r3
 800e4f4:	fb02 6101 	mla	r1, r2, r1, r6
 800e4f8:	0c1e      	lsrs	r6, r3, #16
 800e4fa:	0c0b      	lsrs	r3, r1, #16
 800e4fc:	fb02 3306 	mla	r3, r2, r6, r3
 800e500:	b289      	uxth	r1, r1
 800e502:	3001      	adds	r0, #1
 800e504:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e508:	4285      	cmp	r5, r0
 800e50a:	f84c 1b04 	str.w	r1, [ip], #4
 800e50e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e512:	dcec      	bgt.n	800e4ee <__multadd+0x12>
 800e514:	b30e      	cbz	r6, 800e55a <__multadd+0x7e>
 800e516:	68a3      	ldr	r3, [r4, #8]
 800e518:	42ab      	cmp	r3, r5
 800e51a:	dc19      	bgt.n	800e550 <__multadd+0x74>
 800e51c:	6861      	ldr	r1, [r4, #4]
 800e51e:	4638      	mov	r0, r7
 800e520:	3101      	adds	r1, #1
 800e522:	f7ff ff79 	bl	800e418 <_Balloc>
 800e526:	4680      	mov	r8, r0
 800e528:	b928      	cbnz	r0, 800e536 <__multadd+0x5a>
 800e52a:	4602      	mov	r2, r0
 800e52c:	4b0c      	ldr	r3, [pc, #48]	; (800e560 <__multadd+0x84>)
 800e52e:	480d      	ldr	r0, [pc, #52]	; (800e564 <__multadd+0x88>)
 800e530:	21ba      	movs	r1, #186	; 0xba
 800e532:	f7fe f9db 	bl	800c8ec <__assert_func>
 800e536:	6922      	ldr	r2, [r4, #16]
 800e538:	3202      	adds	r2, #2
 800e53a:	f104 010c 	add.w	r1, r4, #12
 800e53e:	0092      	lsls	r2, r2, #2
 800e540:	300c      	adds	r0, #12
 800e542:	f7ff f85d 	bl	800d600 <memcpy>
 800e546:	4621      	mov	r1, r4
 800e548:	4638      	mov	r0, r7
 800e54a:	f7ff ffa5 	bl	800e498 <_Bfree>
 800e54e:	4644      	mov	r4, r8
 800e550:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e554:	3501      	adds	r5, #1
 800e556:	615e      	str	r6, [r3, #20]
 800e558:	6125      	str	r5, [r4, #16]
 800e55a:	4620      	mov	r0, r4
 800e55c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e560:	0800f960 	.word	0x0800f960
 800e564:	0800f971 	.word	0x0800f971

0800e568 <__hi0bits>:
 800e568:	0c03      	lsrs	r3, r0, #16
 800e56a:	041b      	lsls	r3, r3, #16
 800e56c:	b9d3      	cbnz	r3, 800e5a4 <__hi0bits+0x3c>
 800e56e:	0400      	lsls	r0, r0, #16
 800e570:	2310      	movs	r3, #16
 800e572:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800e576:	bf04      	itt	eq
 800e578:	0200      	lsleq	r0, r0, #8
 800e57a:	3308      	addeq	r3, #8
 800e57c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800e580:	bf04      	itt	eq
 800e582:	0100      	lsleq	r0, r0, #4
 800e584:	3304      	addeq	r3, #4
 800e586:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800e58a:	bf04      	itt	eq
 800e58c:	0080      	lsleq	r0, r0, #2
 800e58e:	3302      	addeq	r3, #2
 800e590:	2800      	cmp	r0, #0
 800e592:	db05      	blt.n	800e5a0 <__hi0bits+0x38>
 800e594:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800e598:	f103 0301 	add.w	r3, r3, #1
 800e59c:	bf08      	it	eq
 800e59e:	2320      	moveq	r3, #32
 800e5a0:	4618      	mov	r0, r3
 800e5a2:	4770      	bx	lr
 800e5a4:	2300      	movs	r3, #0
 800e5a6:	e7e4      	b.n	800e572 <__hi0bits+0xa>

0800e5a8 <__lo0bits>:
 800e5a8:	6803      	ldr	r3, [r0, #0]
 800e5aa:	f013 0207 	ands.w	r2, r3, #7
 800e5ae:	d00c      	beq.n	800e5ca <__lo0bits+0x22>
 800e5b0:	07d9      	lsls	r1, r3, #31
 800e5b2:	d422      	bmi.n	800e5fa <__lo0bits+0x52>
 800e5b4:	079a      	lsls	r2, r3, #30
 800e5b6:	bf49      	itett	mi
 800e5b8:	085b      	lsrmi	r3, r3, #1
 800e5ba:	089b      	lsrpl	r3, r3, #2
 800e5bc:	6003      	strmi	r3, [r0, #0]
 800e5be:	2201      	movmi	r2, #1
 800e5c0:	bf5c      	itt	pl
 800e5c2:	6003      	strpl	r3, [r0, #0]
 800e5c4:	2202      	movpl	r2, #2
 800e5c6:	4610      	mov	r0, r2
 800e5c8:	4770      	bx	lr
 800e5ca:	b299      	uxth	r1, r3
 800e5cc:	b909      	cbnz	r1, 800e5d2 <__lo0bits+0x2a>
 800e5ce:	0c1b      	lsrs	r3, r3, #16
 800e5d0:	2210      	movs	r2, #16
 800e5d2:	b2d9      	uxtb	r1, r3
 800e5d4:	b909      	cbnz	r1, 800e5da <__lo0bits+0x32>
 800e5d6:	3208      	adds	r2, #8
 800e5d8:	0a1b      	lsrs	r3, r3, #8
 800e5da:	0719      	lsls	r1, r3, #28
 800e5dc:	bf04      	itt	eq
 800e5de:	091b      	lsreq	r3, r3, #4
 800e5e0:	3204      	addeq	r2, #4
 800e5e2:	0799      	lsls	r1, r3, #30
 800e5e4:	bf04      	itt	eq
 800e5e6:	089b      	lsreq	r3, r3, #2
 800e5e8:	3202      	addeq	r2, #2
 800e5ea:	07d9      	lsls	r1, r3, #31
 800e5ec:	d403      	bmi.n	800e5f6 <__lo0bits+0x4e>
 800e5ee:	085b      	lsrs	r3, r3, #1
 800e5f0:	f102 0201 	add.w	r2, r2, #1
 800e5f4:	d003      	beq.n	800e5fe <__lo0bits+0x56>
 800e5f6:	6003      	str	r3, [r0, #0]
 800e5f8:	e7e5      	b.n	800e5c6 <__lo0bits+0x1e>
 800e5fa:	2200      	movs	r2, #0
 800e5fc:	e7e3      	b.n	800e5c6 <__lo0bits+0x1e>
 800e5fe:	2220      	movs	r2, #32
 800e600:	e7e1      	b.n	800e5c6 <__lo0bits+0x1e>
	...

0800e604 <__i2b>:
 800e604:	b510      	push	{r4, lr}
 800e606:	460c      	mov	r4, r1
 800e608:	2101      	movs	r1, #1
 800e60a:	f7ff ff05 	bl	800e418 <_Balloc>
 800e60e:	4602      	mov	r2, r0
 800e610:	b928      	cbnz	r0, 800e61e <__i2b+0x1a>
 800e612:	4b05      	ldr	r3, [pc, #20]	; (800e628 <__i2b+0x24>)
 800e614:	4805      	ldr	r0, [pc, #20]	; (800e62c <__i2b+0x28>)
 800e616:	f240 1145 	movw	r1, #325	; 0x145
 800e61a:	f7fe f967 	bl	800c8ec <__assert_func>
 800e61e:	2301      	movs	r3, #1
 800e620:	6144      	str	r4, [r0, #20]
 800e622:	6103      	str	r3, [r0, #16]
 800e624:	bd10      	pop	{r4, pc}
 800e626:	bf00      	nop
 800e628:	0800f960 	.word	0x0800f960
 800e62c:	0800f971 	.word	0x0800f971

0800e630 <__multiply>:
 800e630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e634:	4691      	mov	r9, r2
 800e636:	690a      	ldr	r2, [r1, #16]
 800e638:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e63c:	429a      	cmp	r2, r3
 800e63e:	bfb8      	it	lt
 800e640:	460b      	movlt	r3, r1
 800e642:	460c      	mov	r4, r1
 800e644:	bfbc      	itt	lt
 800e646:	464c      	movlt	r4, r9
 800e648:	4699      	movlt	r9, r3
 800e64a:	6927      	ldr	r7, [r4, #16]
 800e64c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800e650:	68a3      	ldr	r3, [r4, #8]
 800e652:	6861      	ldr	r1, [r4, #4]
 800e654:	eb07 060a 	add.w	r6, r7, sl
 800e658:	42b3      	cmp	r3, r6
 800e65a:	b085      	sub	sp, #20
 800e65c:	bfb8      	it	lt
 800e65e:	3101      	addlt	r1, #1
 800e660:	f7ff feda 	bl	800e418 <_Balloc>
 800e664:	b930      	cbnz	r0, 800e674 <__multiply+0x44>
 800e666:	4602      	mov	r2, r0
 800e668:	4b44      	ldr	r3, [pc, #272]	; (800e77c <__multiply+0x14c>)
 800e66a:	4845      	ldr	r0, [pc, #276]	; (800e780 <__multiply+0x150>)
 800e66c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800e670:	f7fe f93c 	bl	800c8ec <__assert_func>
 800e674:	f100 0514 	add.w	r5, r0, #20
 800e678:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e67c:	462b      	mov	r3, r5
 800e67e:	2200      	movs	r2, #0
 800e680:	4543      	cmp	r3, r8
 800e682:	d321      	bcc.n	800e6c8 <__multiply+0x98>
 800e684:	f104 0314 	add.w	r3, r4, #20
 800e688:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800e68c:	f109 0314 	add.w	r3, r9, #20
 800e690:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800e694:	9202      	str	r2, [sp, #8]
 800e696:	1b3a      	subs	r2, r7, r4
 800e698:	3a15      	subs	r2, #21
 800e69a:	f022 0203 	bic.w	r2, r2, #3
 800e69e:	3204      	adds	r2, #4
 800e6a0:	f104 0115 	add.w	r1, r4, #21
 800e6a4:	428f      	cmp	r7, r1
 800e6a6:	bf38      	it	cc
 800e6a8:	2204      	movcc	r2, #4
 800e6aa:	9201      	str	r2, [sp, #4]
 800e6ac:	9a02      	ldr	r2, [sp, #8]
 800e6ae:	9303      	str	r3, [sp, #12]
 800e6b0:	429a      	cmp	r2, r3
 800e6b2:	d80c      	bhi.n	800e6ce <__multiply+0x9e>
 800e6b4:	2e00      	cmp	r6, #0
 800e6b6:	dd03      	ble.n	800e6c0 <__multiply+0x90>
 800e6b8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	d05b      	beq.n	800e778 <__multiply+0x148>
 800e6c0:	6106      	str	r6, [r0, #16]
 800e6c2:	b005      	add	sp, #20
 800e6c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e6c8:	f843 2b04 	str.w	r2, [r3], #4
 800e6cc:	e7d8      	b.n	800e680 <__multiply+0x50>
 800e6ce:	f8b3 a000 	ldrh.w	sl, [r3]
 800e6d2:	f1ba 0f00 	cmp.w	sl, #0
 800e6d6:	d024      	beq.n	800e722 <__multiply+0xf2>
 800e6d8:	f104 0e14 	add.w	lr, r4, #20
 800e6dc:	46a9      	mov	r9, r5
 800e6de:	f04f 0c00 	mov.w	ip, #0
 800e6e2:	f85e 2b04 	ldr.w	r2, [lr], #4
 800e6e6:	f8d9 1000 	ldr.w	r1, [r9]
 800e6ea:	fa1f fb82 	uxth.w	fp, r2
 800e6ee:	b289      	uxth	r1, r1
 800e6f0:	fb0a 110b 	mla	r1, sl, fp, r1
 800e6f4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800e6f8:	f8d9 2000 	ldr.w	r2, [r9]
 800e6fc:	4461      	add	r1, ip
 800e6fe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e702:	fb0a c20b 	mla	r2, sl, fp, ip
 800e706:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800e70a:	b289      	uxth	r1, r1
 800e70c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e710:	4577      	cmp	r7, lr
 800e712:	f849 1b04 	str.w	r1, [r9], #4
 800e716:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e71a:	d8e2      	bhi.n	800e6e2 <__multiply+0xb2>
 800e71c:	9a01      	ldr	r2, [sp, #4]
 800e71e:	f845 c002 	str.w	ip, [r5, r2]
 800e722:	9a03      	ldr	r2, [sp, #12]
 800e724:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800e728:	3304      	adds	r3, #4
 800e72a:	f1b9 0f00 	cmp.w	r9, #0
 800e72e:	d021      	beq.n	800e774 <__multiply+0x144>
 800e730:	6829      	ldr	r1, [r5, #0]
 800e732:	f104 0c14 	add.w	ip, r4, #20
 800e736:	46ae      	mov	lr, r5
 800e738:	f04f 0a00 	mov.w	sl, #0
 800e73c:	f8bc b000 	ldrh.w	fp, [ip]
 800e740:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800e744:	fb09 220b 	mla	r2, r9, fp, r2
 800e748:	4452      	add	r2, sl
 800e74a:	b289      	uxth	r1, r1
 800e74c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e750:	f84e 1b04 	str.w	r1, [lr], #4
 800e754:	f85c 1b04 	ldr.w	r1, [ip], #4
 800e758:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800e75c:	f8be 1000 	ldrh.w	r1, [lr]
 800e760:	fb09 110a 	mla	r1, r9, sl, r1
 800e764:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800e768:	4567      	cmp	r7, ip
 800e76a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800e76e:	d8e5      	bhi.n	800e73c <__multiply+0x10c>
 800e770:	9a01      	ldr	r2, [sp, #4]
 800e772:	50a9      	str	r1, [r5, r2]
 800e774:	3504      	adds	r5, #4
 800e776:	e799      	b.n	800e6ac <__multiply+0x7c>
 800e778:	3e01      	subs	r6, #1
 800e77a:	e79b      	b.n	800e6b4 <__multiply+0x84>
 800e77c:	0800f960 	.word	0x0800f960
 800e780:	0800f971 	.word	0x0800f971

0800e784 <__pow5mult>:
 800e784:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e788:	4615      	mov	r5, r2
 800e78a:	f012 0203 	ands.w	r2, r2, #3
 800e78e:	4606      	mov	r6, r0
 800e790:	460f      	mov	r7, r1
 800e792:	d007      	beq.n	800e7a4 <__pow5mult+0x20>
 800e794:	4c25      	ldr	r4, [pc, #148]	; (800e82c <__pow5mult+0xa8>)
 800e796:	3a01      	subs	r2, #1
 800e798:	2300      	movs	r3, #0
 800e79a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e79e:	f7ff fe9d 	bl	800e4dc <__multadd>
 800e7a2:	4607      	mov	r7, r0
 800e7a4:	10ad      	asrs	r5, r5, #2
 800e7a6:	d03d      	beq.n	800e824 <__pow5mult+0xa0>
 800e7a8:	69f4      	ldr	r4, [r6, #28]
 800e7aa:	b97c      	cbnz	r4, 800e7cc <__pow5mult+0x48>
 800e7ac:	2010      	movs	r0, #16
 800e7ae:	f7ff fd7f 	bl	800e2b0 <malloc>
 800e7b2:	4602      	mov	r2, r0
 800e7b4:	61f0      	str	r0, [r6, #28]
 800e7b6:	b928      	cbnz	r0, 800e7c4 <__pow5mult+0x40>
 800e7b8:	4b1d      	ldr	r3, [pc, #116]	; (800e830 <__pow5mult+0xac>)
 800e7ba:	481e      	ldr	r0, [pc, #120]	; (800e834 <__pow5mult+0xb0>)
 800e7bc:	f240 11b3 	movw	r1, #435	; 0x1b3
 800e7c0:	f7fe f894 	bl	800c8ec <__assert_func>
 800e7c4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e7c8:	6004      	str	r4, [r0, #0]
 800e7ca:	60c4      	str	r4, [r0, #12]
 800e7cc:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800e7d0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e7d4:	b94c      	cbnz	r4, 800e7ea <__pow5mult+0x66>
 800e7d6:	f240 2171 	movw	r1, #625	; 0x271
 800e7da:	4630      	mov	r0, r6
 800e7dc:	f7ff ff12 	bl	800e604 <__i2b>
 800e7e0:	2300      	movs	r3, #0
 800e7e2:	f8c8 0008 	str.w	r0, [r8, #8]
 800e7e6:	4604      	mov	r4, r0
 800e7e8:	6003      	str	r3, [r0, #0]
 800e7ea:	f04f 0900 	mov.w	r9, #0
 800e7ee:	07eb      	lsls	r3, r5, #31
 800e7f0:	d50a      	bpl.n	800e808 <__pow5mult+0x84>
 800e7f2:	4639      	mov	r1, r7
 800e7f4:	4622      	mov	r2, r4
 800e7f6:	4630      	mov	r0, r6
 800e7f8:	f7ff ff1a 	bl	800e630 <__multiply>
 800e7fc:	4639      	mov	r1, r7
 800e7fe:	4680      	mov	r8, r0
 800e800:	4630      	mov	r0, r6
 800e802:	f7ff fe49 	bl	800e498 <_Bfree>
 800e806:	4647      	mov	r7, r8
 800e808:	106d      	asrs	r5, r5, #1
 800e80a:	d00b      	beq.n	800e824 <__pow5mult+0xa0>
 800e80c:	6820      	ldr	r0, [r4, #0]
 800e80e:	b938      	cbnz	r0, 800e820 <__pow5mult+0x9c>
 800e810:	4622      	mov	r2, r4
 800e812:	4621      	mov	r1, r4
 800e814:	4630      	mov	r0, r6
 800e816:	f7ff ff0b 	bl	800e630 <__multiply>
 800e81a:	6020      	str	r0, [r4, #0]
 800e81c:	f8c0 9000 	str.w	r9, [r0]
 800e820:	4604      	mov	r4, r0
 800e822:	e7e4      	b.n	800e7ee <__pow5mult+0x6a>
 800e824:	4638      	mov	r0, r7
 800e826:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e82a:	bf00      	nop
 800e82c:	0800fac0 	.word	0x0800fac0
 800e830:	0800f8f1 	.word	0x0800f8f1
 800e834:	0800f971 	.word	0x0800f971

0800e838 <__lshift>:
 800e838:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e83c:	460c      	mov	r4, r1
 800e83e:	6849      	ldr	r1, [r1, #4]
 800e840:	6923      	ldr	r3, [r4, #16]
 800e842:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e846:	68a3      	ldr	r3, [r4, #8]
 800e848:	4607      	mov	r7, r0
 800e84a:	4691      	mov	r9, r2
 800e84c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e850:	f108 0601 	add.w	r6, r8, #1
 800e854:	42b3      	cmp	r3, r6
 800e856:	db0b      	blt.n	800e870 <__lshift+0x38>
 800e858:	4638      	mov	r0, r7
 800e85a:	f7ff fddd 	bl	800e418 <_Balloc>
 800e85e:	4605      	mov	r5, r0
 800e860:	b948      	cbnz	r0, 800e876 <__lshift+0x3e>
 800e862:	4602      	mov	r2, r0
 800e864:	4b28      	ldr	r3, [pc, #160]	; (800e908 <__lshift+0xd0>)
 800e866:	4829      	ldr	r0, [pc, #164]	; (800e90c <__lshift+0xd4>)
 800e868:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800e86c:	f7fe f83e 	bl	800c8ec <__assert_func>
 800e870:	3101      	adds	r1, #1
 800e872:	005b      	lsls	r3, r3, #1
 800e874:	e7ee      	b.n	800e854 <__lshift+0x1c>
 800e876:	2300      	movs	r3, #0
 800e878:	f100 0114 	add.w	r1, r0, #20
 800e87c:	f100 0210 	add.w	r2, r0, #16
 800e880:	4618      	mov	r0, r3
 800e882:	4553      	cmp	r3, sl
 800e884:	db33      	blt.n	800e8ee <__lshift+0xb6>
 800e886:	6920      	ldr	r0, [r4, #16]
 800e888:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e88c:	f104 0314 	add.w	r3, r4, #20
 800e890:	f019 091f 	ands.w	r9, r9, #31
 800e894:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e898:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e89c:	d02b      	beq.n	800e8f6 <__lshift+0xbe>
 800e89e:	f1c9 0e20 	rsb	lr, r9, #32
 800e8a2:	468a      	mov	sl, r1
 800e8a4:	2200      	movs	r2, #0
 800e8a6:	6818      	ldr	r0, [r3, #0]
 800e8a8:	fa00 f009 	lsl.w	r0, r0, r9
 800e8ac:	4310      	orrs	r0, r2
 800e8ae:	f84a 0b04 	str.w	r0, [sl], #4
 800e8b2:	f853 2b04 	ldr.w	r2, [r3], #4
 800e8b6:	459c      	cmp	ip, r3
 800e8b8:	fa22 f20e 	lsr.w	r2, r2, lr
 800e8bc:	d8f3      	bhi.n	800e8a6 <__lshift+0x6e>
 800e8be:	ebac 0304 	sub.w	r3, ip, r4
 800e8c2:	3b15      	subs	r3, #21
 800e8c4:	f023 0303 	bic.w	r3, r3, #3
 800e8c8:	3304      	adds	r3, #4
 800e8ca:	f104 0015 	add.w	r0, r4, #21
 800e8ce:	4584      	cmp	ip, r0
 800e8d0:	bf38      	it	cc
 800e8d2:	2304      	movcc	r3, #4
 800e8d4:	50ca      	str	r2, [r1, r3]
 800e8d6:	b10a      	cbz	r2, 800e8dc <__lshift+0xa4>
 800e8d8:	f108 0602 	add.w	r6, r8, #2
 800e8dc:	3e01      	subs	r6, #1
 800e8de:	4638      	mov	r0, r7
 800e8e0:	612e      	str	r6, [r5, #16]
 800e8e2:	4621      	mov	r1, r4
 800e8e4:	f7ff fdd8 	bl	800e498 <_Bfree>
 800e8e8:	4628      	mov	r0, r5
 800e8ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e8ee:	f842 0f04 	str.w	r0, [r2, #4]!
 800e8f2:	3301      	adds	r3, #1
 800e8f4:	e7c5      	b.n	800e882 <__lshift+0x4a>
 800e8f6:	3904      	subs	r1, #4
 800e8f8:	f853 2b04 	ldr.w	r2, [r3], #4
 800e8fc:	f841 2f04 	str.w	r2, [r1, #4]!
 800e900:	459c      	cmp	ip, r3
 800e902:	d8f9      	bhi.n	800e8f8 <__lshift+0xc0>
 800e904:	e7ea      	b.n	800e8dc <__lshift+0xa4>
 800e906:	bf00      	nop
 800e908:	0800f960 	.word	0x0800f960
 800e90c:	0800f971 	.word	0x0800f971

0800e910 <__mcmp>:
 800e910:	b530      	push	{r4, r5, lr}
 800e912:	6902      	ldr	r2, [r0, #16]
 800e914:	690c      	ldr	r4, [r1, #16]
 800e916:	1b12      	subs	r2, r2, r4
 800e918:	d10e      	bne.n	800e938 <__mcmp+0x28>
 800e91a:	f100 0314 	add.w	r3, r0, #20
 800e91e:	3114      	adds	r1, #20
 800e920:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800e924:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800e928:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800e92c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800e930:	42a5      	cmp	r5, r4
 800e932:	d003      	beq.n	800e93c <__mcmp+0x2c>
 800e934:	d305      	bcc.n	800e942 <__mcmp+0x32>
 800e936:	2201      	movs	r2, #1
 800e938:	4610      	mov	r0, r2
 800e93a:	bd30      	pop	{r4, r5, pc}
 800e93c:	4283      	cmp	r3, r0
 800e93e:	d3f3      	bcc.n	800e928 <__mcmp+0x18>
 800e940:	e7fa      	b.n	800e938 <__mcmp+0x28>
 800e942:	f04f 32ff 	mov.w	r2, #4294967295
 800e946:	e7f7      	b.n	800e938 <__mcmp+0x28>

0800e948 <__mdiff>:
 800e948:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e94c:	460c      	mov	r4, r1
 800e94e:	4606      	mov	r6, r0
 800e950:	4611      	mov	r1, r2
 800e952:	4620      	mov	r0, r4
 800e954:	4690      	mov	r8, r2
 800e956:	f7ff ffdb 	bl	800e910 <__mcmp>
 800e95a:	1e05      	subs	r5, r0, #0
 800e95c:	d110      	bne.n	800e980 <__mdiff+0x38>
 800e95e:	4629      	mov	r1, r5
 800e960:	4630      	mov	r0, r6
 800e962:	f7ff fd59 	bl	800e418 <_Balloc>
 800e966:	b930      	cbnz	r0, 800e976 <__mdiff+0x2e>
 800e968:	4b3a      	ldr	r3, [pc, #232]	; (800ea54 <__mdiff+0x10c>)
 800e96a:	4602      	mov	r2, r0
 800e96c:	f240 2137 	movw	r1, #567	; 0x237
 800e970:	4839      	ldr	r0, [pc, #228]	; (800ea58 <__mdiff+0x110>)
 800e972:	f7fd ffbb 	bl	800c8ec <__assert_func>
 800e976:	2301      	movs	r3, #1
 800e978:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e97c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e980:	bfa4      	itt	ge
 800e982:	4643      	movge	r3, r8
 800e984:	46a0      	movge	r8, r4
 800e986:	4630      	mov	r0, r6
 800e988:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800e98c:	bfa6      	itte	ge
 800e98e:	461c      	movge	r4, r3
 800e990:	2500      	movge	r5, #0
 800e992:	2501      	movlt	r5, #1
 800e994:	f7ff fd40 	bl	800e418 <_Balloc>
 800e998:	b920      	cbnz	r0, 800e9a4 <__mdiff+0x5c>
 800e99a:	4b2e      	ldr	r3, [pc, #184]	; (800ea54 <__mdiff+0x10c>)
 800e99c:	4602      	mov	r2, r0
 800e99e:	f240 2145 	movw	r1, #581	; 0x245
 800e9a2:	e7e5      	b.n	800e970 <__mdiff+0x28>
 800e9a4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800e9a8:	6926      	ldr	r6, [r4, #16]
 800e9aa:	60c5      	str	r5, [r0, #12]
 800e9ac:	f104 0914 	add.w	r9, r4, #20
 800e9b0:	f108 0514 	add.w	r5, r8, #20
 800e9b4:	f100 0e14 	add.w	lr, r0, #20
 800e9b8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800e9bc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800e9c0:	f108 0210 	add.w	r2, r8, #16
 800e9c4:	46f2      	mov	sl, lr
 800e9c6:	2100      	movs	r1, #0
 800e9c8:	f859 3b04 	ldr.w	r3, [r9], #4
 800e9cc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800e9d0:	fa11 f88b 	uxtah	r8, r1, fp
 800e9d4:	b299      	uxth	r1, r3
 800e9d6:	0c1b      	lsrs	r3, r3, #16
 800e9d8:	eba8 0801 	sub.w	r8, r8, r1
 800e9dc:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800e9e0:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800e9e4:	fa1f f888 	uxth.w	r8, r8
 800e9e8:	1419      	asrs	r1, r3, #16
 800e9ea:	454e      	cmp	r6, r9
 800e9ec:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800e9f0:	f84a 3b04 	str.w	r3, [sl], #4
 800e9f4:	d8e8      	bhi.n	800e9c8 <__mdiff+0x80>
 800e9f6:	1b33      	subs	r3, r6, r4
 800e9f8:	3b15      	subs	r3, #21
 800e9fa:	f023 0303 	bic.w	r3, r3, #3
 800e9fe:	3304      	adds	r3, #4
 800ea00:	3415      	adds	r4, #21
 800ea02:	42a6      	cmp	r6, r4
 800ea04:	bf38      	it	cc
 800ea06:	2304      	movcc	r3, #4
 800ea08:	441d      	add	r5, r3
 800ea0a:	4473      	add	r3, lr
 800ea0c:	469e      	mov	lr, r3
 800ea0e:	462e      	mov	r6, r5
 800ea10:	4566      	cmp	r6, ip
 800ea12:	d30e      	bcc.n	800ea32 <__mdiff+0xea>
 800ea14:	f10c 0203 	add.w	r2, ip, #3
 800ea18:	1b52      	subs	r2, r2, r5
 800ea1a:	f022 0203 	bic.w	r2, r2, #3
 800ea1e:	3d03      	subs	r5, #3
 800ea20:	45ac      	cmp	ip, r5
 800ea22:	bf38      	it	cc
 800ea24:	2200      	movcc	r2, #0
 800ea26:	4413      	add	r3, r2
 800ea28:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800ea2c:	b17a      	cbz	r2, 800ea4e <__mdiff+0x106>
 800ea2e:	6107      	str	r7, [r0, #16]
 800ea30:	e7a4      	b.n	800e97c <__mdiff+0x34>
 800ea32:	f856 8b04 	ldr.w	r8, [r6], #4
 800ea36:	fa11 f288 	uxtah	r2, r1, r8
 800ea3a:	1414      	asrs	r4, r2, #16
 800ea3c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800ea40:	b292      	uxth	r2, r2
 800ea42:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800ea46:	f84e 2b04 	str.w	r2, [lr], #4
 800ea4a:	1421      	asrs	r1, r4, #16
 800ea4c:	e7e0      	b.n	800ea10 <__mdiff+0xc8>
 800ea4e:	3f01      	subs	r7, #1
 800ea50:	e7ea      	b.n	800ea28 <__mdiff+0xe0>
 800ea52:	bf00      	nop
 800ea54:	0800f960 	.word	0x0800f960
 800ea58:	0800f971 	.word	0x0800f971

0800ea5c <__d2b>:
 800ea5c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ea60:	460f      	mov	r7, r1
 800ea62:	2101      	movs	r1, #1
 800ea64:	ec59 8b10 	vmov	r8, r9, d0
 800ea68:	4616      	mov	r6, r2
 800ea6a:	f7ff fcd5 	bl	800e418 <_Balloc>
 800ea6e:	4604      	mov	r4, r0
 800ea70:	b930      	cbnz	r0, 800ea80 <__d2b+0x24>
 800ea72:	4602      	mov	r2, r0
 800ea74:	4b24      	ldr	r3, [pc, #144]	; (800eb08 <__d2b+0xac>)
 800ea76:	4825      	ldr	r0, [pc, #148]	; (800eb0c <__d2b+0xb0>)
 800ea78:	f240 310f 	movw	r1, #783	; 0x30f
 800ea7c:	f7fd ff36 	bl	800c8ec <__assert_func>
 800ea80:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ea84:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ea88:	bb2d      	cbnz	r5, 800ead6 <__d2b+0x7a>
 800ea8a:	9301      	str	r3, [sp, #4]
 800ea8c:	f1b8 0300 	subs.w	r3, r8, #0
 800ea90:	d026      	beq.n	800eae0 <__d2b+0x84>
 800ea92:	4668      	mov	r0, sp
 800ea94:	9300      	str	r3, [sp, #0]
 800ea96:	f7ff fd87 	bl	800e5a8 <__lo0bits>
 800ea9a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ea9e:	b1e8      	cbz	r0, 800eadc <__d2b+0x80>
 800eaa0:	f1c0 0320 	rsb	r3, r0, #32
 800eaa4:	fa02 f303 	lsl.w	r3, r2, r3
 800eaa8:	430b      	orrs	r3, r1
 800eaaa:	40c2      	lsrs	r2, r0
 800eaac:	6163      	str	r3, [r4, #20]
 800eaae:	9201      	str	r2, [sp, #4]
 800eab0:	9b01      	ldr	r3, [sp, #4]
 800eab2:	61a3      	str	r3, [r4, #24]
 800eab4:	2b00      	cmp	r3, #0
 800eab6:	bf14      	ite	ne
 800eab8:	2202      	movne	r2, #2
 800eaba:	2201      	moveq	r2, #1
 800eabc:	6122      	str	r2, [r4, #16]
 800eabe:	b1bd      	cbz	r5, 800eaf0 <__d2b+0x94>
 800eac0:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800eac4:	4405      	add	r5, r0
 800eac6:	603d      	str	r5, [r7, #0]
 800eac8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800eacc:	6030      	str	r0, [r6, #0]
 800eace:	4620      	mov	r0, r4
 800ead0:	b003      	add	sp, #12
 800ead2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ead6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800eada:	e7d6      	b.n	800ea8a <__d2b+0x2e>
 800eadc:	6161      	str	r1, [r4, #20]
 800eade:	e7e7      	b.n	800eab0 <__d2b+0x54>
 800eae0:	a801      	add	r0, sp, #4
 800eae2:	f7ff fd61 	bl	800e5a8 <__lo0bits>
 800eae6:	9b01      	ldr	r3, [sp, #4]
 800eae8:	6163      	str	r3, [r4, #20]
 800eaea:	3020      	adds	r0, #32
 800eaec:	2201      	movs	r2, #1
 800eaee:	e7e5      	b.n	800eabc <__d2b+0x60>
 800eaf0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800eaf4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800eaf8:	6038      	str	r0, [r7, #0]
 800eafa:	6918      	ldr	r0, [r3, #16]
 800eafc:	f7ff fd34 	bl	800e568 <__hi0bits>
 800eb00:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800eb04:	e7e2      	b.n	800eacc <__d2b+0x70>
 800eb06:	bf00      	nop
 800eb08:	0800f960 	.word	0x0800f960
 800eb0c:	0800f971 	.word	0x0800f971

0800eb10 <__ssputs_r>:
 800eb10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eb14:	688e      	ldr	r6, [r1, #8]
 800eb16:	461f      	mov	r7, r3
 800eb18:	42be      	cmp	r6, r7
 800eb1a:	680b      	ldr	r3, [r1, #0]
 800eb1c:	4682      	mov	sl, r0
 800eb1e:	460c      	mov	r4, r1
 800eb20:	4690      	mov	r8, r2
 800eb22:	d82c      	bhi.n	800eb7e <__ssputs_r+0x6e>
 800eb24:	898a      	ldrh	r2, [r1, #12]
 800eb26:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800eb2a:	d026      	beq.n	800eb7a <__ssputs_r+0x6a>
 800eb2c:	6965      	ldr	r5, [r4, #20]
 800eb2e:	6909      	ldr	r1, [r1, #16]
 800eb30:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800eb34:	eba3 0901 	sub.w	r9, r3, r1
 800eb38:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800eb3c:	1c7b      	adds	r3, r7, #1
 800eb3e:	444b      	add	r3, r9
 800eb40:	106d      	asrs	r5, r5, #1
 800eb42:	429d      	cmp	r5, r3
 800eb44:	bf38      	it	cc
 800eb46:	461d      	movcc	r5, r3
 800eb48:	0553      	lsls	r3, r2, #21
 800eb4a:	d527      	bpl.n	800eb9c <__ssputs_r+0x8c>
 800eb4c:	4629      	mov	r1, r5
 800eb4e:	f7ff fbd7 	bl	800e300 <_malloc_r>
 800eb52:	4606      	mov	r6, r0
 800eb54:	b360      	cbz	r0, 800ebb0 <__ssputs_r+0xa0>
 800eb56:	6921      	ldr	r1, [r4, #16]
 800eb58:	464a      	mov	r2, r9
 800eb5a:	f7fe fd51 	bl	800d600 <memcpy>
 800eb5e:	89a3      	ldrh	r3, [r4, #12]
 800eb60:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800eb64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eb68:	81a3      	strh	r3, [r4, #12]
 800eb6a:	6126      	str	r6, [r4, #16]
 800eb6c:	6165      	str	r5, [r4, #20]
 800eb6e:	444e      	add	r6, r9
 800eb70:	eba5 0509 	sub.w	r5, r5, r9
 800eb74:	6026      	str	r6, [r4, #0]
 800eb76:	60a5      	str	r5, [r4, #8]
 800eb78:	463e      	mov	r6, r7
 800eb7a:	42be      	cmp	r6, r7
 800eb7c:	d900      	bls.n	800eb80 <__ssputs_r+0x70>
 800eb7e:	463e      	mov	r6, r7
 800eb80:	6820      	ldr	r0, [r4, #0]
 800eb82:	4632      	mov	r2, r6
 800eb84:	4641      	mov	r1, r8
 800eb86:	f000 fba3 	bl	800f2d0 <memmove>
 800eb8a:	68a3      	ldr	r3, [r4, #8]
 800eb8c:	1b9b      	subs	r3, r3, r6
 800eb8e:	60a3      	str	r3, [r4, #8]
 800eb90:	6823      	ldr	r3, [r4, #0]
 800eb92:	4433      	add	r3, r6
 800eb94:	6023      	str	r3, [r4, #0]
 800eb96:	2000      	movs	r0, #0
 800eb98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eb9c:	462a      	mov	r2, r5
 800eb9e:	f000 fc2d 	bl	800f3fc <_realloc_r>
 800eba2:	4606      	mov	r6, r0
 800eba4:	2800      	cmp	r0, #0
 800eba6:	d1e0      	bne.n	800eb6a <__ssputs_r+0x5a>
 800eba8:	6921      	ldr	r1, [r4, #16]
 800ebaa:	4650      	mov	r0, sl
 800ebac:	f7ff fb34 	bl	800e218 <_free_r>
 800ebb0:	230c      	movs	r3, #12
 800ebb2:	f8ca 3000 	str.w	r3, [sl]
 800ebb6:	89a3      	ldrh	r3, [r4, #12]
 800ebb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ebbc:	81a3      	strh	r3, [r4, #12]
 800ebbe:	f04f 30ff 	mov.w	r0, #4294967295
 800ebc2:	e7e9      	b.n	800eb98 <__ssputs_r+0x88>

0800ebc4 <_svfiprintf_r>:
 800ebc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ebc8:	4698      	mov	r8, r3
 800ebca:	898b      	ldrh	r3, [r1, #12]
 800ebcc:	061b      	lsls	r3, r3, #24
 800ebce:	b09d      	sub	sp, #116	; 0x74
 800ebd0:	4607      	mov	r7, r0
 800ebd2:	460d      	mov	r5, r1
 800ebd4:	4614      	mov	r4, r2
 800ebd6:	d50e      	bpl.n	800ebf6 <_svfiprintf_r+0x32>
 800ebd8:	690b      	ldr	r3, [r1, #16]
 800ebda:	b963      	cbnz	r3, 800ebf6 <_svfiprintf_r+0x32>
 800ebdc:	2140      	movs	r1, #64	; 0x40
 800ebde:	f7ff fb8f 	bl	800e300 <_malloc_r>
 800ebe2:	6028      	str	r0, [r5, #0]
 800ebe4:	6128      	str	r0, [r5, #16]
 800ebe6:	b920      	cbnz	r0, 800ebf2 <_svfiprintf_r+0x2e>
 800ebe8:	230c      	movs	r3, #12
 800ebea:	603b      	str	r3, [r7, #0]
 800ebec:	f04f 30ff 	mov.w	r0, #4294967295
 800ebf0:	e0d0      	b.n	800ed94 <_svfiprintf_r+0x1d0>
 800ebf2:	2340      	movs	r3, #64	; 0x40
 800ebf4:	616b      	str	r3, [r5, #20]
 800ebf6:	2300      	movs	r3, #0
 800ebf8:	9309      	str	r3, [sp, #36]	; 0x24
 800ebfa:	2320      	movs	r3, #32
 800ebfc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ec00:	f8cd 800c 	str.w	r8, [sp, #12]
 800ec04:	2330      	movs	r3, #48	; 0x30
 800ec06:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800edac <_svfiprintf_r+0x1e8>
 800ec0a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ec0e:	f04f 0901 	mov.w	r9, #1
 800ec12:	4623      	mov	r3, r4
 800ec14:	469a      	mov	sl, r3
 800ec16:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ec1a:	b10a      	cbz	r2, 800ec20 <_svfiprintf_r+0x5c>
 800ec1c:	2a25      	cmp	r2, #37	; 0x25
 800ec1e:	d1f9      	bne.n	800ec14 <_svfiprintf_r+0x50>
 800ec20:	ebba 0b04 	subs.w	fp, sl, r4
 800ec24:	d00b      	beq.n	800ec3e <_svfiprintf_r+0x7a>
 800ec26:	465b      	mov	r3, fp
 800ec28:	4622      	mov	r2, r4
 800ec2a:	4629      	mov	r1, r5
 800ec2c:	4638      	mov	r0, r7
 800ec2e:	f7ff ff6f 	bl	800eb10 <__ssputs_r>
 800ec32:	3001      	adds	r0, #1
 800ec34:	f000 80a9 	beq.w	800ed8a <_svfiprintf_r+0x1c6>
 800ec38:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ec3a:	445a      	add	r2, fp
 800ec3c:	9209      	str	r2, [sp, #36]	; 0x24
 800ec3e:	f89a 3000 	ldrb.w	r3, [sl]
 800ec42:	2b00      	cmp	r3, #0
 800ec44:	f000 80a1 	beq.w	800ed8a <_svfiprintf_r+0x1c6>
 800ec48:	2300      	movs	r3, #0
 800ec4a:	f04f 32ff 	mov.w	r2, #4294967295
 800ec4e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ec52:	f10a 0a01 	add.w	sl, sl, #1
 800ec56:	9304      	str	r3, [sp, #16]
 800ec58:	9307      	str	r3, [sp, #28]
 800ec5a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ec5e:	931a      	str	r3, [sp, #104]	; 0x68
 800ec60:	4654      	mov	r4, sl
 800ec62:	2205      	movs	r2, #5
 800ec64:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ec68:	4850      	ldr	r0, [pc, #320]	; (800edac <_svfiprintf_r+0x1e8>)
 800ec6a:	f7f1 fb39 	bl	80002e0 <memchr>
 800ec6e:	9a04      	ldr	r2, [sp, #16]
 800ec70:	b9d8      	cbnz	r0, 800ecaa <_svfiprintf_r+0xe6>
 800ec72:	06d0      	lsls	r0, r2, #27
 800ec74:	bf44      	itt	mi
 800ec76:	2320      	movmi	r3, #32
 800ec78:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ec7c:	0711      	lsls	r1, r2, #28
 800ec7e:	bf44      	itt	mi
 800ec80:	232b      	movmi	r3, #43	; 0x2b
 800ec82:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ec86:	f89a 3000 	ldrb.w	r3, [sl]
 800ec8a:	2b2a      	cmp	r3, #42	; 0x2a
 800ec8c:	d015      	beq.n	800ecba <_svfiprintf_r+0xf6>
 800ec8e:	9a07      	ldr	r2, [sp, #28]
 800ec90:	4654      	mov	r4, sl
 800ec92:	2000      	movs	r0, #0
 800ec94:	f04f 0c0a 	mov.w	ip, #10
 800ec98:	4621      	mov	r1, r4
 800ec9a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ec9e:	3b30      	subs	r3, #48	; 0x30
 800eca0:	2b09      	cmp	r3, #9
 800eca2:	d94d      	bls.n	800ed40 <_svfiprintf_r+0x17c>
 800eca4:	b1b0      	cbz	r0, 800ecd4 <_svfiprintf_r+0x110>
 800eca6:	9207      	str	r2, [sp, #28]
 800eca8:	e014      	b.n	800ecd4 <_svfiprintf_r+0x110>
 800ecaa:	eba0 0308 	sub.w	r3, r0, r8
 800ecae:	fa09 f303 	lsl.w	r3, r9, r3
 800ecb2:	4313      	orrs	r3, r2
 800ecb4:	9304      	str	r3, [sp, #16]
 800ecb6:	46a2      	mov	sl, r4
 800ecb8:	e7d2      	b.n	800ec60 <_svfiprintf_r+0x9c>
 800ecba:	9b03      	ldr	r3, [sp, #12]
 800ecbc:	1d19      	adds	r1, r3, #4
 800ecbe:	681b      	ldr	r3, [r3, #0]
 800ecc0:	9103      	str	r1, [sp, #12]
 800ecc2:	2b00      	cmp	r3, #0
 800ecc4:	bfbb      	ittet	lt
 800ecc6:	425b      	neglt	r3, r3
 800ecc8:	f042 0202 	orrlt.w	r2, r2, #2
 800eccc:	9307      	strge	r3, [sp, #28]
 800ecce:	9307      	strlt	r3, [sp, #28]
 800ecd0:	bfb8      	it	lt
 800ecd2:	9204      	strlt	r2, [sp, #16]
 800ecd4:	7823      	ldrb	r3, [r4, #0]
 800ecd6:	2b2e      	cmp	r3, #46	; 0x2e
 800ecd8:	d10c      	bne.n	800ecf4 <_svfiprintf_r+0x130>
 800ecda:	7863      	ldrb	r3, [r4, #1]
 800ecdc:	2b2a      	cmp	r3, #42	; 0x2a
 800ecde:	d134      	bne.n	800ed4a <_svfiprintf_r+0x186>
 800ece0:	9b03      	ldr	r3, [sp, #12]
 800ece2:	1d1a      	adds	r2, r3, #4
 800ece4:	681b      	ldr	r3, [r3, #0]
 800ece6:	9203      	str	r2, [sp, #12]
 800ece8:	2b00      	cmp	r3, #0
 800ecea:	bfb8      	it	lt
 800ecec:	f04f 33ff 	movlt.w	r3, #4294967295
 800ecf0:	3402      	adds	r4, #2
 800ecf2:	9305      	str	r3, [sp, #20]
 800ecf4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800edbc <_svfiprintf_r+0x1f8>
 800ecf8:	7821      	ldrb	r1, [r4, #0]
 800ecfa:	2203      	movs	r2, #3
 800ecfc:	4650      	mov	r0, sl
 800ecfe:	f7f1 faef 	bl	80002e0 <memchr>
 800ed02:	b138      	cbz	r0, 800ed14 <_svfiprintf_r+0x150>
 800ed04:	9b04      	ldr	r3, [sp, #16]
 800ed06:	eba0 000a 	sub.w	r0, r0, sl
 800ed0a:	2240      	movs	r2, #64	; 0x40
 800ed0c:	4082      	lsls	r2, r0
 800ed0e:	4313      	orrs	r3, r2
 800ed10:	3401      	adds	r4, #1
 800ed12:	9304      	str	r3, [sp, #16]
 800ed14:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ed18:	4825      	ldr	r0, [pc, #148]	; (800edb0 <_svfiprintf_r+0x1ec>)
 800ed1a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ed1e:	2206      	movs	r2, #6
 800ed20:	f7f1 fade 	bl	80002e0 <memchr>
 800ed24:	2800      	cmp	r0, #0
 800ed26:	d038      	beq.n	800ed9a <_svfiprintf_r+0x1d6>
 800ed28:	4b22      	ldr	r3, [pc, #136]	; (800edb4 <_svfiprintf_r+0x1f0>)
 800ed2a:	bb1b      	cbnz	r3, 800ed74 <_svfiprintf_r+0x1b0>
 800ed2c:	9b03      	ldr	r3, [sp, #12]
 800ed2e:	3307      	adds	r3, #7
 800ed30:	f023 0307 	bic.w	r3, r3, #7
 800ed34:	3308      	adds	r3, #8
 800ed36:	9303      	str	r3, [sp, #12]
 800ed38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ed3a:	4433      	add	r3, r6
 800ed3c:	9309      	str	r3, [sp, #36]	; 0x24
 800ed3e:	e768      	b.n	800ec12 <_svfiprintf_r+0x4e>
 800ed40:	fb0c 3202 	mla	r2, ip, r2, r3
 800ed44:	460c      	mov	r4, r1
 800ed46:	2001      	movs	r0, #1
 800ed48:	e7a6      	b.n	800ec98 <_svfiprintf_r+0xd4>
 800ed4a:	2300      	movs	r3, #0
 800ed4c:	3401      	adds	r4, #1
 800ed4e:	9305      	str	r3, [sp, #20]
 800ed50:	4619      	mov	r1, r3
 800ed52:	f04f 0c0a 	mov.w	ip, #10
 800ed56:	4620      	mov	r0, r4
 800ed58:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ed5c:	3a30      	subs	r2, #48	; 0x30
 800ed5e:	2a09      	cmp	r2, #9
 800ed60:	d903      	bls.n	800ed6a <_svfiprintf_r+0x1a6>
 800ed62:	2b00      	cmp	r3, #0
 800ed64:	d0c6      	beq.n	800ecf4 <_svfiprintf_r+0x130>
 800ed66:	9105      	str	r1, [sp, #20]
 800ed68:	e7c4      	b.n	800ecf4 <_svfiprintf_r+0x130>
 800ed6a:	fb0c 2101 	mla	r1, ip, r1, r2
 800ed6e:	4604      	mov	r4, r0
 800ed70:	2301      	movs	r3, #1
 800ed72:	e7f0      	b.n	800ed56 <_svfiprintf_r+0x192>
 800ed74:	ab03      	add	r3, sp, #12
 800ed76:	9300      	str	r3, [sp, #0]
 800ed78:	462a      	mov	r2, r5
 800ed7a:	4b0f      	ldr	r3, [pc, #60]	; (800edb8 <_svfiprintf_r+0x1f4>)
 800ed7c:	a904      	add	r1, sp, #16
 800ed7e:	4638      	mov	r0, r7
 800ed80:	f7fd fe62 	bl	800ca48 <_printf_float>
 800ed84:	1c42      	adds	r2, r0, #1
 800ed86:	4606      	mov	r6, r0
 800ed88:	d1d6      	bne.n	800ed38 <_svfiprintf_r+0x174>
 800ed8a:	89ab      	ldrh	r3, [r5, #12]
 800ed8c:	065b      	lsls	r3, r3, #25
 800ed8e:	f53f af2d 	bmi.w	800ebec <_svfiprintf_r+0x28>
 800ed92:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ed94:	b01d      	add	sp, #116	; 0x74
 800ed96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed9a:	ab03      	add	r3, sp, #12
 800ed9c:	9300      	str	r3, [sp, #0]
 800ed9e:	462a      	mov	r2, r5
 800eda0:	4b05      	ldr	r3, [pc, #20]	; (800edb8 <_svfiprintf_r+0x1f4>)
 800eda2:	a904      	add	r1, sp, #16
 800eda4:	4638      	mov	r0, r7
 800eda6:	f7fe f8d7 	bl	800cf58 <_printf_i>
 800edaa:	e7eb      	b.n	800ed84 <_svfiprintf_r+0x1c0>
 800edac:	0800facc 	.word	0x0800facc
 800edb0:	0800fad6 	.word	0x0800fad6
 800edb4:	0800ca49 	.word	0x0800ca49
 800edb8:	0800eb11 	.word	0x0800eb11
 800edbc:	0800fad2 	.word	0x0800fad2

0800edc0 <__sfputc_r>:
 800edc0:	6893      	ldr	r3, [r2, #8]
 800edc2:	3b01      	subs	r3, #1
 800edc4:	2b00      	cmp	r3, #0
 800edc6:	b410      	push	{r4}
 800edc8:	6093      	str	r3, [r2, #8]
 800edca:	da08      	bge.n	800edde <__sfputc_r+0x1e>
 800edcc:	6994      	ldr	r4, [r2, #24]
 800edce:	42a3      	cmp	r3, r4
 800edd0:	db01      	blt.n	800edd6 <__sfputc_r+0x16>
 800edd2:	290a      	cmp	r1, #10
 800edd4:	d103      	bne.n	800edde <__sfputc_r+0x1e>
 800edd6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800edda:	f000 b9e3 	b.w	800f1a4 <__swbuf_r>
 800edde:	6813      	ldr	r3, [r2, #0]
 800ede0:	1c58      	adds	r0, r3, #1
 800ede2:	6010      	str	r0, [r2, #0]
 800ede4:	7019      	strb	r1, [r3, #0]
 800ede6:	4608      	mov	r0, r1
 800ede8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800edec:	4770      	bx	lr

0800edee <__sfputs_r>:
 800edee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800edf0:	4606      	mov	r6, r0
 800edf2:	460f      	mov	r7, r1
 800edf4:	4614      	mov	r4, r2
 800edf6:	18d5      	adds	r5, r2, r3
 800edf8:	42ac      	cmp	r4, r5
 800edfa:	d101      	bne.n	800ee00 <__sfputs_r+0x12>
 800edfc:	2000      	movs	r0, #0
 800edfe:	e007      	b.n	800ee10 <__sfputs_r+0x22>
 800ee00:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ee04:	463a      	mov	r2, r7
 800ee06:	4630      	mov	r0, r6
 800ee08:	f7ff ffda 	bl	800edc0 <__sfputc_r>
 800ee0c:	1c43      	adds	r3, r0, #1
 800ee0e:	d1f3      	bne.n	800edf8 <__sfputs_r+0xa>
 800ee10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ee14 <_vfiprintf_r>:
 800ee14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee18:	460d      	mov	r5, r1
 800ee1a:	b09d      	sub	sp, #116	; 0x74
 800ee1c:	4614      	mov	r4, r2
 800ee1e:	4698      	mov	r8, r3
 800ee20:	4606      	mov	r6, r0
 800ee22:	b118      	cbz	r0, 800ee2c <_vfiprintf_r+0x18>
 800ee24:	6a03      	ldr	r3, [r0, #32]
 800ee26:	b90b      	cbnz	r3, 800ee2c <_vfiprintf_r+0x18>
 800ee28:	f7fe fa32 	bl	800d290 <__sinit>
 800ee2c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ee2e:	07d9      	lsls	r1, r3, #31
 800ee30:	d405      	bmi.n	800ee3e <_vfiprintf_r+0x2a>
 800ee32:	89ab      	ldrh	r3, [r5, #12]
 800ee34:	059a      	lsls	r2, r3, #22
 800ee36:	d402      	bmi.n	800ee3e <_vfiprintf_r+0x2a>
 800ee38:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ee3a:	f7fe fbdf 	bl	800d5fc <__retarget_lock_acquire_recursive>
 800ee3e:	89ab      	ldrh	r3, [r5, #12]
 800ee40:	071b      	lsls	r3, r3, #28
 800ee42:	d501      	bpl.n	800ee48 <_vfiprintf_r+0x34>
 800ee44:	692b      	ldr	r3, [r5, #16]
 800ee46:	b99b      	cbnz	r3, 800ee70 <_vfiprintf_r+0x5c>
 800ee48:	4629      	mov	r1, r5
 800ee4a:	4630      	mov	r0, r6
 800ee4c:	f000 f9e8 	bl	800f220 <__swsetup_r>
 800ee50:	b170      	cbz	r0, 800ee70 <_vfiprintf_r+0x5c>
 800ee52:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ee54:	07dc      	lsls	r4, r3, #31
 800ee56:	d504      	bpl.n	800ee62 <_vfiprintf_r+0x4e>
 800ee58:	f04f 30ff 	mov.w	r0, #4294967295
 800ee5c:	b01d      	add	sp, #116	; 0x74
 800ee5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee62:	89ab      	ldrh	r3, [r5, #12]
 800ee64:	0598      	lsls	r0, r3, #22
 800ee66:	d4f7      	bmi.n	800ee58 <_vfiprintf_r+0x44>
 800ee68:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ee6a:	f7fe fbc8 	bl	800d5fe <__retarget_lock_release_recursive>
 800ee6e:	e7f3      	b.n	800ee58 <_vfiprintf_r+0x44>
 800ee70:	2300      	movs	r3, #0
 800ee72:	9309      	str	r3, [sp, #36]	; 0x24
 800ee74:	2320      	movs	r3, #32
 800ee76:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ee7a:	f8cd 800c 	str.w	r8, [sp, #12]
 800ee7e:	2330      	movs	r3, #48	; 0x30
 800ee80:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800f034 <_vfiprintf_r+0x220>
 800ee84:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ee88:	f04f 0901 	mov.w	r9, #1
 800ee8c:	4623      	mov	r3, r4
 800ee8e:	469a      	mov	sl, r3
 800ee90:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ee94:	b10a      	cbz	r2, 800ee9a <_vfiprintf_r+0x86>
 800ee96:	2a25      	cmp	r2, #37	; 0x25
 800ee98:	d1f9      	bne.n	800ee8e <_vfiprintf_r+0x7a>
 800ee9a:	ebba 0b04 	subs.w	fp, sl, r4
 800ee9e:	d00b      	beq.n	800eeb8 <_vfiprintf_r+0xa4>
 800eea0:	465b      	mov	r3, fp
 800eea2:	4622      	mov	r2, r4
 800eea4:	4629      	mov	r1, r5
 800eea6:	4630      	mov	r0, r6
 800eea8:	f7ff ffa1 	bl	800edee <__sfputs_r>
 800eeac:	3001      	adds	r0, #1
 800eeae:	f000 80a9 	beq.w	800f004 <_vfiprintf_r+0x1f0>
 800eeb2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800eeb4:	445a      	add	r2, fp
 800eeb6:	9209      	str	r2, [sp, #36]	; 0x24
 800eeb8:	f89a 3000 	ldrb.w	r3, [sl]
 800eebc:	2b00      	cmp	r3, #0
 800eebe:	f000 80a1 	beq.w	800f004 <_vfiprintf_r+0x1f0>
 800eec2:	2300      	movs	r3, #0
 800eec4:	f04f 32ff 	mov.w	r2, #4294967295
 800eec8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800eecc:	f10a 0a01 	add.w	sl, sl, #1
 800eed0:	9304      	str	r3, [sp, #16]
 800eed2:	9307      	str	r3, [sp, #28]
 800eed4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800eed8:	931a      	str	r3, [sp, #104]	; 0x68
 800eeda:	4654      	mov	r4, sl
 800eedc:	2205      	movs	r2, #5
 800eede:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eee2:	4854      	ldr	r0, [pc, #336]	; (800f034 <_vfiprintf_r+0x220>)
 800eee4:	f7f1 f9fc 	bl	80002e0 <memchr>
 800eee8:	9a04      	ldr	r2, [sp, #16]
 800eeea:	b9d8      	cbnz	r0, 800ef24 <_vfiprintf_r+0x110>
 800eeec:	06d1      	lsls	r1, r2, #27
 800eeee:	bf44      	itt	mi
 800eef0:	2320      	movmi	r3, #32
 800eef2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800eef6:	0713      	lsls	r3, r2, #28
 800eef8:	bf44      	itt	mi
 800eefa:	232b      	movmi	r3, #43	; 0x2b
 800eefc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ef00:	f89a 3000 	ldrb.w	r3, [sl]
 800ef04:	2b2a      	cmp	r3, #42	; 0x2a
 800ef06:	d015      	beq.n	800ef34 <_vfiprintf_r+0x120>
 800ef08:	9a07      	ldr	r2, [sp, #28]
 800ef0a:	4654      	mov	r4, sl
 800ef0c:	2000      	movs	r0, #0
 800ef0e:	f04f 0c0a 	mov.w	ip, #10
 800ef12:	4621      	mov	r1, r4
 800ef14:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ef18:	3b30      	subs	r3, #48	; 0x30
 800ef1a:	2b09      	cmp	r3, #9
 800ef1c:	d94d      	bls.n	800efba <_vfiprintf_r+0x1a6>
 800ef1e:	b1b0      	cbz	r0, 800ef4e <_vfiprintf_r+0x13a>
 800ef20:	9207      	str	r2, [sp, #28]
 800ef22:	e014      	b.n	800ef4e <_vfiprintf_r+0x13a>
 800ef24:	eba0 0308 	sub.w	r3, r0, r8
 800ef28:	fa09 f303 	lsl.w	r3, r9, r3
 800ef2c:	4313      	orrs	r3, r2
 800ef2e:	9304      	str	r3, [sp, #16]
 800ef30:	46a2      	mov	sl, r4
 800ef32:	e7d2      	b.n	800eeda <_vfiprintf_r+0xc6>
 800ef34:	9b03      	ldr	r3, [sp, #12]
 800ef36:	1d19      	adds	r1, r3, #4
 800ef38:	681b      	ldr	r3, [r3, #0]
 800ef3a:	9103      	str	r1, [sp, #12]
 800ef3c:	2b00      	cmp	r3, #0
 800ef3e:	bfbb      	ittet	lt
 800ef40:	425b      	neglt	r3, r3
 800ef42:	f042 0202 	orrlt.w	r2, r2, #2
 800ef46:	9307      	strge	r3, [sp, #28]
 800ef48:	9307      	strlt	r3, [sp, #28]
 800ef4a:	bfb8      	it	lt
 800ef4c:	9204      	strlt	r2, [sp, #16]
 800ef4e:	7823      	ldrb	r3, [r4, #0]
 800ef50:	2b2e      	cmp	r3, #46	; 0x2e
 800ef52:	d10c      	bne.n	800ef6e <_vfiprintf_r+0x15a>
 800ef54:	7863      	ldrb	r3, [r4, #1]
 800ef56:	2b2a      	cmp	r3, #42	; 0x2a
 800ef58:	d134      	bne.n	800efc4 <_vfiprintf_r+0x1b0>
 800ef5a:	9b03      	ldr	r3, [sp, #12]
 800ef5c:	1d1a      	adds	r2, r3, #4
 800ef5e:	681b      	ldr	r3, [r3, #0]
 800ef60:	9203      	str	r2, [sp, #12]
 800ef62:	2b00      	cmp	r3, #0
 800ef64:	bfb8      	it	lt
 800ef66:	f04f 33ff 	movlt.w	r3, #4294967295
 800ef6a:	3402      	adds	r4, #2
 800ef6c:	9305      	str	r3, [sp, #20]
 800ef6e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800f044 <_vfiprintf_r+0x230>
 800ef72:	7821      	ldrb	r1, [r4, #0]
 800ef74:	2203      	movs	r2, #3
 800ef76:	4650      	mov	r0, sl
 800ef78:	f7f1 f9b2 	bl	80002e0 <memchr>
 800ef7c:	b138      	cbz	r0, 800ef8e <_vfiprintf_r+0x17a>
 800ef7e:	9b04      	ldr	r3, [sp, #16]
 800ef80:	eba0 000a 	sub.w	r0, r0, sl
 800ef84:	2240      	movs	r2, #64	; 0x40
 800ef86:	4082      	lsls	r2, r0
 800ef88:	4313      	orrs	r3, r2
 800ef8a:	3401      	adds	r4, #1
 800ef8c:	9304      	str	r3, [sp, #16]
 800ef8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ef92:	4829      	ldr	r0, [pc, #164]	; (800f038 <_vfiprintf_r+0x224>)
 800ef94:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ef98:	2206      	movs	r2, #6
 800ef9a:	f7f1 f9a1 	bl	80002e0 <memchr>
 800ef9e:	2800      	cmp	r0, #0
 800efa0:	d03f      	beq.n	800f022 <_vfiprintf_r+0x20e>
 800efa2:	4b26      	ldr	r3, [pc, #152]	; (800f03c <_vfiprintf_r+0x228>)
 800efa4:	bb1b      	cbnz	r3, 800efee <_vfiprintf_r+0x1da>
 800efa6:	9b03      	ldr	r3, [sp, #12]
 800efa8:	3307      	adds	r3, #7
 800efaa:	f023 0307 	bic.w	r3, r3, #7
 800efae:	3308      	adds	r3, #8
 800efb0:	9303      	str	r3, [sp, #12]
 800efb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800efb4:	443b      	add	r3, r7
 800efb6:	9309      	str	r3, [sp, #36]	; 0x24
 800efb8:	e768      	b.n	800ee8c <_vfiprintf_r+0x78>
 800efba:	fb0c 3202 	mla	r2, ip, r2, r3
 800efbe:	460c      	mov	r4, r1
 800efc0:	2001      	movs	r0, #1
 800efc2:	e7a6      	b.n	800ef12 <_vfiprintf_r+0xfe>
 800efc4:	2300      	movs	r3, #0
 800efc6:	3401      	adds	r4, #1
 800efc8:	9305      	str	r3, [sp, #20]
 800efca:	4619      	mov	r1, r3
 800efcc:	f04f 0c0a 	mov.w	ip, #10
 800efd0:	4620      	mov	r0, r4
 800efd2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800efd6:	3a30      	subs	r2, #48	; 0x30
 800efd8:	2a09      	cmp	r2, #9
 800efda:	d903      	bls.n	800efe4 <_vfiprintf_r+0x1d0>
 800efdc:	2b00      	cmp	r3, #0
 800efde:	d0c6      	beq.n	800ef6e <_vfiprintf_r+0x15a>
 800efe0:	9105      	str	r1, [sp, #20]
 800efe2:	e7c4      	b.n	800ef6e <_vfiprintf_r+0x15a>
 800efe4:	fb0c 2101 	mla	r1, ip, r1, r2
 800efe8:	4604      	mov	r4, r0
 800efea:	2301      	movs	r3, #1
 800efec:	e7f0      	b.n	800efd0 <_vfiprintf_r+0x1bc>
 800efee:	ab03      	add	r3, sp, #12
 800eff0:	9300      	str	r3, [sp, #0]
 800eff2:	462a      	mov	r2, r5
 800eff4:	4b12      	ldr	r3, [pc, #72]	; (800f040 <_vfiprintf_r+0x22c>)
 800eff6:	a904      	add	r1, sp, #16
 800eff8:	4630      	mov	r0, r6
 800effa:	f7fd fd25 	bl	800ca48 <_printf_float>
 800effe:	4607      	mov	r7, r0
 800f000:	1c78      	adds	r0, r7, #1
 800f002:	d1d6      	bne.n	800efb2 <_vfiprintf_r+0x19e>
 800f004:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f006:	07d9      	lsls	r1, r3, #31
 800f008:	d405      	bmi.n	800f016 <_vfiprintf_r+0x202>
 800f00a:	89ab      	ldrh	r3, [r5, #12]
 800f00c:	059a      	lsls	r2, r3, #22
 800f00e:	d402      	bmi.n	800f016 <_vfiprintf_r+0x202>
 800f010:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f012:	f7fe faf4 	bl	800d5fe <__retarget_lock_release_recursive>
 800f016:	89ab      	ldrh	r3, [r5, #12]
 800f018:	065b      	lsls	r3, r3, #25
 800f01a:	f53f af1d 	bmi.w	800ee58 <_vfiprintf_r+0x44>
 800f01e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f020:	e71c      	b.n	800ee5c <_vfiprintf_r+0x48>
 800f022:	ab03      	add	r3, sp, #12
 800f024:	9300      	str	r3, [sp, #0]
 800f026:	462a      	mov	r2, r5
 800f028:	4b05      	ldr	r3, [pc, #20]	; (800f040 <_vfiprintf_r+0x22c>)
 800f02a:	a904      	add	r1, sp, #16
 800f02c:	4630      	mov	r0, r6
 800f02e:	f7fd ff93 	bl	800cf58 <_printf_i>
 800f032:	e7e4      	b.n	800effe <_vfiprintf_r+0x1ea>
 800f034:	0800facc 	.word	0x0800facc
 800f038:	0800fad6 	.word	0x0800fad6
 800f03c:	0800ca49 	.word	0x0800ca49
 800f040:	0800edef 	.word	0x0800edef
 800f044:	0800fad2 	.word	0x0800fad2

0800f048 <__sflush_r>:
 800f048:	898a      	ldrh	r2, [r1, #12]
 800f04a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f04e:	4605      	mov	r5, r0
 800f050:	0710      	lsls	r0, r2, #28
 800f052:	460c      	mov	r4, r1
 800f054:	d458      	bmi.n	800f108 <__sflush_r+0xc0>
 800f056:	684b      	ldr	r3, [r1, #4]
 800f058:	2b00      	cmp	r3, #0
 800f05a:	dc05      	bgt.n	800f068 <__sflush_r+0x20>
 800f05c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f05e:	2b00      	cmp	r3, #0
 800f060:	dc02      	bgt.n	800f068 <__sflush_r+0x20>
 800f062:	2000      	movs	r0, #0
 800f064:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f068:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f06a:	2e00      	cmp	r6, #0
 800f06c:	d0f9      	beq.n	800f062 <__sflush_r+0x1a>
 800f06e:	2300      	movs	r3, #0
 800f070:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f074:	682f      	ldr	r7, [r5, #0]
 800f076:	6a21      	ldr	r1, [r4, #32]
 800f078:	602b      	str	r3, [r5, #0]
 800f07a:	d032      	beq.n	800f0e2 <__sflush_r+0x9a>
 800f07c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f07e:	89a3      	ldrh	r3, [r4, #12]
 800f080:	075a      	lsls	r2, r3, #29
 800f082:	d505      	bpl.n	800f090 <__sflush_r+0x48>
 800f084:	6863      	ldr	r3, [r4, #4]
 800f086:	1ac0      	subs	r0, r0, r3
 800f088:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f08a:	b10b      	cbz	r3, 800f090 <__sflush_r+0x48>
 800f08c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f08e:	1ac0      	subs	r0, r0, r3
 800f090:	2300      	movs	r3, #0
 800f092:	4602      	mov	r2, r0
 800f094:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f096:	6a21      	ldr	r1, [r4, #32]
 800f098:	4628      	mov	r0, r5
 800f09a:	47b0      	blx	r6
 800f09c:	1c43      	adds	r3, r0, #1
 800f09e:	89a3      	ldrh	r3, [r4, #12]
 800f0a0:	d106      	bne.n	800f0b0 <__sflush_r+0x68>
 800f0a2:	6829      	ldr	r1, [r5, #0]
 800f0a4:	291d      	cmp	r1, #29
 800f0a6:	d82b      	bhi.n	800f100 <__sflush_r+0xb8>
 800f0a8:	4a29      	ldr	r2, [pc, #164]	; (800f150 <__sflush_r+0x108>)
 800f0aa:	410a      	asrs	r2, r1
 800f0ac:	07d6      	lsls	r6, r2, #31
 800f0ae:	d427      	bmi.n	800f100 <__sflush_r+0xb8>
 800f0b0:	2200      	movs	r2, #0
 800f0b2:	6062      	str	r2, [r4, #4]
 800f0b4:	04d9      	lsls	r1, r3, #19
 800f0b6:	6922      	ldr	r2, [r4, #16]
 800f0b8:	6022      	str	r2, [r4, #0]
 800f0ba:	d504      	bpl.n	800f0c6 <__sflush_r+0x7e>
 800f0bc:	1c42      	adds	r2, r0, #1
 800f0be:	d101      	bne.n	800f0c4 <__sflush_r+0x7c>
 800f0c0:	682b      	ldr	r3, [r5, #0]
 800f0c2:	b903      	cbnz	r3, 800f0c6 <__sflush_r+0x7e>
 800f0c4:	6560      	str	r0, [r4, #84]	; 0x54
 800f0c6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f0c8:	602f      	str	r7, [r5, #0]
 800f0ca:	2900      	cmp	r1, #0
 800f0cc:	d0c9      	beq.n	800f062 <__sflush_r+0x1a>
 800f0ce:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f0d2:	4299      	cmp	r1, r3
 800f0d4:	d002      	beq.n	800f0dc <__sflush_r+0x94>
 800f0d6:	4628      	mov	r0, r5
 800f0d8:	f7ff f89e 	bl	800e218 <_free_r>
 800f0dc:	2000      	movs	r0, #0
 800f0de:	6360      	str	r0, [r4, #52]	; 0x34
 800f0e0:	e7c0      	b.n	800f064 <__sflush_r+0x1c>
 800f0e2:	2301      	movs	r3, #1
 800f0e4:	4628      	mov	r0, r5
 800f0e6:	47b0      	blx	r6
 800f0e8:	1c41      	adds	r1, r0, #1
 800f0ea:	d1c8      	bne.n	800f07e <__sflush_r+0x36>
 800f0ec:	682b      	ldr	r3, [r5, #0]
 800f0ee:	2b00      	cmp	r3, #0
 800f0f0:	d0c5      	beq.n	800f07e <__sflush_r+0x36>
 800f0f2:	2b1d      	cmp	r3, #29
 800f0f4:	d001      	beq.n	800f0fa <__sflush_r+0xb2>
 800f0f6:	2b16      	cmp	r3, #22
 800f0f8:	d101      	bne.n	800f0fe <__sflush_r+0xb6>
 800f0fa:	602f      	str	r7, [r5, #0]
 800f0fc:	e7b1      	b.n	800f062 <__sflush_r+0x1a>
 800f0fe:	89a3      	ldrh	r3, [r4, #12]
 800f100:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f104:	81a3      	strh	r3, [r4, #12]
 800f106:	e7ad      	b.n	800f064 <__sflush_r+0x1c>
 800f108:	690f      	ldr	r7, [r1, #16]
 800f10a:	2f00      	cmp	r7, #0
 800f10c:	d0a9      	beq.n	800f062 <__sflush_r+0x1a>
 800f10e:	0793      	lsls	r3, r2, #30
 800f110:	680e      	ldr	r6, [r1, #0]
 800f112:	bf08      	it	eq
 800f114:	694b      	ldreq	r3, [r1, #20]
 800f116:	600f      	str	r7, [r1, #0]
 800f118:	bf18      	it	ne
 800f11a:	2300      	movne	r3, #0
 800f11c:	eba6 0807 	sub.w	r8, r6, r7
 800f120:	608b      	str	r3, [r1, #8]
 800f122:	f1b8 0f00 	cmp.w	r8, #0
 800f126:	dd9c      	ble.n	800f062 <__sflush_r+0x1a>
 800f128:	6a21      	ldr	r1, [r4, #32]
 800f12a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f12c:	4643      	mov	r3, r8
 800f12e:	463a      	mov	r2, r7
 800f130:	4628      	mov	r0, r5
 800f132:	47b0      	blx	r6
 800f134:	2800      	cmp	r0, #0
 800f136:	dc06      	bgt.n	800f146 <__sflush_r+0xfe>
 800f138:	89a3      	ldrh	r3, [r4, #12]
 800f13a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f13e:	81a3      	strh	r3, [r4, #12]
 800f140:	f04f 30ff 	mov.w	r0, #4294967295
 800f144:	e78e      	b.n	800f064 <__sflush_r+0x1c>
 800f146:	4407      	add	r7, r0
 800f148:	eba8 0800 	sub.w	r8, r8, r0
 800f14c:	e7e9      	b.n	800f122 <__sflush_r+0xda>
 800f14e:	bf00      	nop
 800f150:	dfbffffe 	.word	0xdfbffffe

0800f154 <_fflush_r>:
 800f154:	b538      	push	{r3, r4, r5, lr}
 800f156:	690b      	ldr	r3, [r1, #16]
 800f158:	4605      	mov	r5, r0
 800f15a:	460c      	mov	r4, r1
 800f15c:	b913      	cbnz	r3, 800f164 <_fflush_r+0x10>
 800f15e:	2500      	movs	r5, #0
 800f160:	4628      	mov	r0, r5
 800f162:	bd38      	pop	{r3, r4, r5, pc}
 800f164:	b118      	cbz	r0, 800f16e <_fflush_r+0x1a>
 800f166:	6a03      	ldr	r3, [r0, #32]
 800f168:	b90b      	cbnz	r3, 800f16e <_fflush_r+0x1a>
 800f16a:	f7fe f891 	bl	800d290 <__sinit>
 800f16e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f172:	2b00      	cmp	r3, #0
 800f174:	d0f3      	beq.n	800f15e <_fflush_r+0xa>
 800f176:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f178:	07d0      	lsls	r0, r2, #31
 800f17a:	d404      	bmi.n	800f186 <_fflush_r+0x32>
 800f17c:	0599      	lsls	r1, r3, #22
 800f17e:	d402      	bmi.n	800f186 <_fflush_r+0x32>
 800f180:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f182:	f7fe fa3b 	bl	800d5fc <__retarget_lock_acquire_recursive>
 800f186:	4628      	mov	r0, r5
 800f188:	4621      	mov	r1, r4
 800f18a:	f7ff ff5d 	bl	800f048 <__sflush_r>
 800f18e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f190:	07da      	lsls	r2, r3, #31
 800f192:	4605      	mov	r5, r0
 800f194:	d4e4      	bmi.n	800f160 <_fflush_r+0xc>
 800f196:	89a3      	ldrh	r3, [r4, #12]
 800f198:	059b      	lsls	r3, r3, #22
 800f19a:	d4e1      	bmi.n	800f160 <_fflush_r+0xc>
 800f19c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f19e:	f7fe fa2e 	bl	800d5fe <__retarget_lock_release_recursive>
 800f1a2:	e7dd      	b.n	800f160 <_fflush_r+0xc>

0800f1a4 <__swbuf_r>:
 800f1a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f1a6:	460e      	mov	r6, r1
 800f1a8:	4614      	mov	r4, r2
 800f1aa:	4605      	mov	r5, r0
 800f1ac:	b118      	cbz	r0, 800f1b6 <__swbuf_r+0x12>
 800f1ae:	6a03      	ldr	r3, [r0, #32]
 800f1b0:	b90b      	cbnz	r3, 800f1b6 <__swbuf_r+0x12>
 800f1b2:	f7fe f86d 	bl	800d290 <__sinit>
 800f1b6:	69a3      	ldr	r3, [r4, #24]
 800f1b8:	60a3      	str	r3, [r4, #8]
 800f1ba:	89a3      	ldrh	r3, [r4, #12]
 800f1bc:	071a      	lsls	r2, r3, #28
 800f1be:	d525      	bpl.n	800f20c <__swbuf_r+0x68>
 800f1c0:	6923      	ldr	r3, [r4, #16]
 800f1c2:	b31b      	cbz	r3, 800f20c <__swbuf_r+0x68>
 800f1c4:	6823      	ldr	r3, [r4, #0]
 800f1c6:	6922      	ldr	r2, [r4, #16]
 800f1c8:	1a98      	subs	r0, r3, r2
 800f1ca:	6963      	ldr	r3, [r4, #20]
 800f1cc:	b2f6      	uxtb	r6, r6
 800f1ce:	4283      	cmp	r3, r0
 800f1d0:	4637      	mov	r7, r6
 800f1d2:	dc04      	bgt.n	800f1de <__swbuf_r+0x3a>
 800f1d4:	4621      	mov	r1, r4
 800f1d6:	4628      	mov	r0, r5
 800f1d8:	f7ff ffbc 	bl	800f154 <_fflush_r>
 800f1dc:	b9e0      	cbnz	r0, 800f218 <__swbuf_r+0x74>
 800f1de:	68a3      	ldr	r3, [r4, #8]
 800f1e0:	3b01      	subs	r3, #1
 800f1e2:	60a3      	str	r3, [r4, #8]
 800f1e4:	6823      	ldr	r3, [r4, #0]
 800f1e6:	1c5a      	adds	r2, r3, #1
 800f1e8:	6022      	str	r2, [r4, #0]
 800f1ea:	701e      	strb	r6, [r3, #0]
 800f1ec:	6962      	ldr	r2, [r4, #20]
 800f1ee:	1c43      	adds	r3, r0, #1
 800f1f0:	429a      	cmp	r2, r3
 800f1f2:	d004      	beq.n	800f1fe <__swbuf_r+0x5a>
 800f1f4:	89a3      	ldrh	r3, [r4, #12]
 800f1f6:	07db      	lsls	r3, r3, #31
 800f1f8:	d506      	bpl.n	800f208 <__swbuf_r+0x64>
 800f1fa:	2e0a      	cmp	r6, #10
 800f1fc:	d104      	bne.n	800f208 <__swbuf_r+0x64>
 800f1fe:	4621      	mov	r1, r4
 800f200:	4628      	mov	r0, r5
 800f202:	f7ff ffa7 	bl	800f154 <_fflush_r>
 800f206:	b938      	cbnz	r0, 800f218 <__swbuf_r+0x74>
 800f208:	4638      	mov	r0, r7
 800f20a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f20c:	4621      	mov	r1, r4
 800f20e:	4628      	mov	r0, r5
 800f210:	f000 f806 	bl	800f220 <__swsetup_r>
 800f214:	2800      	cmp	r0, #0
 800f216:	d0d5      	beq.n	800f1c4 <__swbuf_r+0x20>
 800f218:	f04f 37ff 	mov.w	r7, #4294967295
 800f21c:	e7f4      	b.n	800f208 <__swbuf_r+0x64>
	...

0800f220 <__swsetup_r>:
 800f220:	b538      	push	{r3, r4, r5, lr}
 800f222:	4b2a      	ldr	r3, [pc, #168]	; (800f2cc <__swsetup_r+0xac>)
 800f224:	4605      	mov	r5, r0
 800f226:	6818      	ldr	r0, [r3, #0]
 800f228:	460c      	mov	r4, r1
 800f22a:	b118      	cbz	r0, 800f234 <__swsetup_r+0x14>
 800f22c:	6a03      	ldr	r3, [r0, #32]
 800f22e:	b90b      	cbnz	r3, 800f234 <__swsetup_r+0x14>
 800f230:	f7fe f82e 	bl	800d290 <__sinit>
 800f234:	89a3      	ldrh	r3, [r4, #12]
 800f236:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f23a:	0718      	lsls	r0, r3, #28
 800f23c:	d422      	bmi.n	800f284 <__swsetup_r+0x64>
 800f23e:	06d9      	lsls	r1, r3, #27
 800f240:	d407      	bmi.n	800f252 <__swsetup_r+0x32>
 800f242:	2309      	movs	r3, #9
 800f244:	602b      	str	r3, [r5, #0]
 800f246:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f24a:	81a3      	strh	r3, [r4, #12]
 800f24c:	f04f 30ff 	mov.w	r0, #4294967295
 800f250:	e034      	b.n	800f2bc <__swsetup_r+0x9c>
 800f252:	0758      	lsls	r0, r3, #29
 800f254:	d512      	bpl.n	800f27c <__swsetup_r+0x5c>
 800f256:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f258:	b141      	cbz	r1, 800f26c <__swsetup_r+0x4c>
 800f25a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f25e:	4299      	cmp	r1, r3
 800f260:	d002      	beq.n	800f268 <__swsetup_r+0x48>
 800f262:	4628      	mov	r0, r5
 800f264:	f7fe ffd8 	bl	800e218 <_free_r>
 800f268:	2300      	movs	r3, #0
 800f26a:	6363      	str	r3, [r4, #52]	; 0x34
 800f26c:	89a3      	ldrh	r3, [r4, #12]
 800f26e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f272:	81a3      	strh	r3, [r4, #12]
 800f274:	2300      	movs	r3, #0
 800f276:	6063      	str	r3, [r4, #4]
 800f278:	6923      	ldr	r3, [r4, #16]
 800f27a:	6023      	str	r3, [r4, #0]
 800f27c:	89a3      	ldrh	r3, [r4, #12]
 800f27e:	f043 0308 	orr.w	r3, r3, #8
 800f282:	81a3      	strh	r3, [r4, #12]
 800f284:	6923      	ldr	r3, [r4, #16]
 800f286:	b94b      	cbnz	r3, 800f29c <__swsetup_r+0x7c>
 800f288:	89a3      	ldrh	r3, [r4, #12]
 800f28a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f28e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f292:	d003      	beq.n	800f29c <__swsetup_r+0x7c>
 800f294:	4621      	mov	r1, r4
 800f296:	4628      	mov	r0, r5
 800f298:	f000 f912 	bl	800f4c0 <__smakebuf_r>
 800f29c:	89a0      	ldrh	r0, [r4, #12]
 800f29e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f2a2:	f010 0301 	ands.w	r3, r0, #1
 800f2a6:	d00a      	beq.n	800f2be <__swsetup_r+0x9e>
 800f2a8:	2300      	movs	r3, #0
 800f2aa:	60a3      	str	r3, [r4, #8]
 800f2ac:	6963      	ldr	r3, [r4, #20]
 800f2ae:	425b      	negs	r3, r3
 800f2b0:	61a3      	str	r3, [r4, #24]
 800f2b2:	6923      	ldr	r3, [r4, #16]
 800f2b4:	b943      	cbnz	r3, 800f2c8 <__swsetup_r+0xa8>
 800f2b6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f2ba:	d1c4      	bne.n	800f246 <__swsetup_r+0x26>
 800f2bc:	bd38      	pop	{r3, r4, r5, pc}
 800f2be:	0781      	lsls	r1, r0, #30
 800f2c0:	bf58      	it	pl
 800f2c2:	6963      	ldrpl	r3, [r4, #20]
 800f2c4:	60a3      	str	r3, [r4, #8]
 800f2c6:	e7f4      	b.n	800f2b2 <__swsetup_r+0x92>
 800f2c8:	2000      	movs	r0, #0
 800f2ca:	e7f7      	b.n	800f2bc <__swsetup_r+0x9c>
 800f2cc:	24000074 	.word	0x24000074

0800f2d0 <memmove>:
 800f2d0:	4288      	cmp	r0, r1
 800f2d2:	b510      	push	{r4, lr}
 800f2d4:	eb01 0402 	add.w	r4, r1, r2
 800f2d8:	d902      	bls.n	800f2e0 <memmove+0x10>
 800f2da:	4284      	cmp	r4, r0
 800f2dc:	4623      	mov	r3, r4
 800f2de:	d807      	bhi.n	800f2f0 <memmove+0x20>
 800f2e0:	1e43      	subs	r3, r0, #1
 800f2e2:	42a1      	cmp	r1, r4
 800f2e4:	d008      	beq.n	800f2f8 <memmove+0x28>
 800f2e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f2ea:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f2ee:	e7f8      	b.n	800f2e2 <memmove+0x12>
 800f2f0:	4402      	add	r2, r0
 800f2f2:	4601      	mov	r1, r0
 800f2f4:	428a      	cmp	r2, r1
 800f2f6:	d100      	bne.n	800f2fa <memmove+0x2a>
 800f2f8:	bd10      	pop	{r4, pc}
 800f2fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f2fe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f302:	e7f7      	b.n	800f2f4 <memmove+0x24>

0800f304 <_raise_r>:
 800f304:	291f      	cmp	r1, #31
 800f306:	b538      	push	{r3, r4, r5, lr}
 800f308:	4604      	mov	r4, r0
 800f30a:	460d      	mov	r5, r1
 800f30c:	d904      	bls.n	800f318 <_raise_r+0x14>
 800f30e:	2316      	movs	r3, #22
 800f310:	6003      	str	r3, [r0, #0]
 800f312:	f04f 30ff 	mov.w	r0, #4294967295
 800f316:	bd38      	pop	{r3, r4, r5, pc}
 800f318:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800f31a:	b112      	cbz	r2, 800f322 <_raise_r+0x1e>
 800f31c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f320:	b94b      	cbnz	r3, 800f336 <_raise_r+0x32>
 800f322:	4620      	mov	r0, r4
 800f324:	f000 f830 	bl	800f388 <_getpid_r>
 800f328:	462a      	mov	r2, r5
 800f32a:	4601      	mov	r1, r0
 800f32c:	4620      	mov	r0, r4
 800f32e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f332:	f000 b817 	b.w	800f364 <_kill_r>
 800f336:	2b01      	cmp	r3, #1
 800f338:	d00a      	beq.n	800f350 <_raise_r+0x4c>
 800f33a:	1c59      	adds	r1, r3, #1
 800f33c:	d103      	bne.n	800f346 <_raise_r+0x42>
 800f33e:	2316      	movs	r3, #22
 800f340:	6003      	str	r3, [r0, #0]
 800f342:	2001      	movs	r0, #1
 800f344:	e7e7      	b.n	800f316 <_raise_r+0x12>
 800f346:	2400      	movs	r4, #0
 800f348:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f34c:	4628      	mov	r0, r5
 800f34e:	4798      	blx	r3
 800f350:	2000      	movs	r0, #0
 800f352:	e7e0      	b.n	800f316 <_raise_r+0x12>

0800f354 <raise>:
 800f354:	4b02      	ldr	r3, [pc, #8]	; (800f360 <raise+0xc>)
 800f356:	4601      	mov	r1, r0
 800f358:	6818      	ldr	r0, [r3, #0]
 800f35a:	f7ff bfd3 	b.w	800f304 <_raise_r>
 800f35e:	bf00      	nop
 800f360:	24000074 	.word	0x24000074

0800f364 <_kill_r>:
 800f364:	b538      	push	{r3, r4, r5, lr}
 800f366:	4d07      	ldr	r5, [pc, #28]	; (800f384 <_kill_r+0x20>)
 800f368:	2300      	movs	r3, #0
 800f36a:	4604      	mov	r4, r0
 800f36c:	4608      	mov	r0, r1
 800f36e:	4611      	mov	r1, r2
 800f370:	602b      	str	r3, [r5, #0]
 800f372:	f7f2 f8b7 	bl	80014e4 <_kill>
 800f376:	1c43      	adds	r3, r0, #1
 800f378:	d102      	bne.n	800f380 <_kill_r+0x1c>
 800f37a:	682b      	ldr	r3, [r5, #0]
 800f37c:	b103      	cbz	r3, 800f380 <_kill_r+0x1c>
 800f37e:	6023      	str	r3, [r4, #0]
 800f380:	bd38      	pop	{r3, r4, r5, pc}
 800f382:	bf00      	nop
 800f384:	24005b6c 	.word	0x24005b6c

0800f388 <_getpid_r>:
 800f388:	f7f2 b8a4 	b.w	80014d4 <_getpid>

0800f38c <_sbrk_r>:
 800f38c:	b538      	push	{r3, r4, r5, lr}
 800f38e:	4d06      	ldr	r5, [pc, #24]	; (800f3a8 <_sbrk_r+0x1c>)
 800f390:	2300      	movs	r3, #0
 800f392:	4604      	mov	r4, r0
 800f394:	4608      	mov	r0, r1
 800f396:	602b      	str	r3, [r5, #0]
 800f398:	f7f2 f92c 	bl	80015f4 <_sbrk>
 800f39c:	1c43      	adds	r3, r0, #1
 800f39e:	d102      	bne.n	800f3a6 <_sbrk_r+0x1a>
 800f3a0:	682b      	ldr	r3, [r5, #0]
 800f3a2:	b103      	cbz	r3, 800f3a6 <_sbrk_r+0x1a>
 800f3a4:	6023      	str	r3, [r4, #0]
 800f3a6:	bd38      	pop	{r3, r4, r5, pc}
 800f3a8:	24005b6c 	.word	0x24005b6c

0800f3ac <_calloc_r>:
 800f3ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f3ae:	fba1 2402 	umull	r2, r4, r1, r2
 800f3b2:	b94c      	cbnz	r4, 800f3c8 <_calloc_r+0x1c>
 800f3b4:	4611      	mov	r1, r2
 800f3b6:	9201      	str	r2, [sp, #4]
 800f3b8:	f7fe ffa2 	bl	800e300 <_malloc_r>
 800f3bc:	9a01      	ldr	r2, [sp, #4]
 800f3be:	4605      	mov	r5, r0
 800f3c0:	b930      	cbnz	r0, 800f3d0 <_calloc_r+0x24>
 800f3c2:	4628      	mov	r0, r5
 800f3c4:	b003      	add	sp, #12
 800f3c6:	bd30      	pop	{r4, r5, pc}
 800f3c8:	220c      	movs	r2, #12
 800f3ca:	6002      	str	r2, [r0, #0]
 800f3cc:	2500      	movs	r5, #0
 800f3ce:	e7f8      	b.n	800f3c2 <_calloc_r+0x16>
 800f3d0:	4621      	mov	r1, r4
 800f3d2:	f7fe f81c 	bl	800d40e <memset>
 800f3d6:	e7f4      	b.n	800f3c2 <_calloc_r+0x16>

0800f3d8 <__ascii_mbtowc>:
 800f3d8:	b082      	sub	sp, #8
 800f3da:	b901      	cbnz	r1, 800f3de <__ascii_mbtowc+0x6>
 800f3dc:	a901      	add	r1, sp, #4
 800f3de:	b142      	cbz	r2, 800f3f2 <__ascii_mbtowc+0x1a>
 800f3e0:	b14b      	cbz	r3, 800f3f6 <__ascii_mbtowc+0x1e>
 800f3e2:	7813      	ldrb	r3, [r2, #0]
 800f3e4:	600b      	str	r3, [r1, #0]
 800f3e6:	7812      	ldrb	r2, [r2, #0]
 800f3e8:	1e10      	subs	r0, r2, #0
 800f3ea:	bf18      	it	ne
 800f3ec:	2001      	movne	r0, #1
 800f3ee:	b002      	add	sp, #8
 800f3f0:	4770      	bx	lr
 800f3f2:	4610      	mov	r0, r2
 800f3f4:	e7fb      	b.n	800f3ee <__ascii_mbtowc+0x16>
 800f3f6:	f06f 0001 	mvn.w	r0, #1
 800f3fa:	e7f8      	b.n	800f3ee <__ascii_mbtowc+0x16>

0800f3fc <_realloc_r>:
 800f3fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f400:	4680      	mov	r8, r0
 800f402:	4614      	mov	r4, r2
 800f404:	460e      	mov	r6, r1
 800f406:	b921      	cbnz	r1, 800f412 <_realloc_r+0x16>
 800f408:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f40c:	4611      	mov	r1, r2
 800f40e:	f7fe bf77 	b.w	800e300 <_malloc_r>
 800f412:	b92a      	cbnz	r2, 800f420 <_realloc_r+0x24>
 800f414:	f7fe ff00 	bl	800e218 <_free_r>
 800f418:	4625      	mov	r5, r4
 800f41a:	4628      	mov	r0, r5
 800f41c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f420:	f000 f8ac 	bl	800f57c <_malloc_usable_size_r>
 800f424:	4284      	cmp	r4, r0
 800f426:	4607      	mov	r7, r0
 800f428:	d802      	bhi.n	800f430 <_realloc_r+0x34>
 800f42a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f42e:	d812      	bhi.n	800f456 <_realloc_r+0x5a>
 800f430:	4621      	mov	r1, r4
 800f432:	4640      	mov	r0, r8
 800f434:	f7fe ff64 	bl	800e300 <_malloc_r>
 800f438:	4605      	mov	r5, r0
 800f43a:	2800      	cmp	r0, #0
 800f43c:	d0ed      	beq.n	800f41a <_realloc_r+0x1e>
 800f43e:	42bc      	cmp	r4, r7
 800f440:	4622      	mov	r2, r4
 800f442:	4631      	mov	r1, r6
 800f444:	bf28      	it	cs
 800f446:	463a      	movcs	r2, r7
 800f448:	f7fe f8da 	bl	800d600 <memcpy>
 800f44c:	4631      	mov	r1, r6
 800f44e:	4640      	mov	r0, r8
 800f450:	f7fe fee2 	bl	800e218 <_free_r>
 800f454:	e7e1      	b.n	800f41a <_realloc_r+0x1e>
 800f456:	4635      	mov	r5, r6
 800f458:	e7df      	b.n	800f41a <_realloc_r+0x1e>

0800f45a <__ascii_wctomb>:
 800f45a:	b149      	cbz	r1, 800f470 <__ascii_wctomb+0x16>
 800f45c:	2aff      	cmp	r2, #255	; 0xff
 800f45e:	bf85      	ittet	hi
 800f460:	238a      	movhi	r3, #138	; 0x8a
 800f462:	6003      	strhi	r3, [r0, #0]
 800f464:	700a      	strbls	r2, [r1, #0]
 800f466:	f04f 30ff 	movhi.w	r0, #4294967295
 800f46a:	bf98      	it	ls
 800f46c:	2001      	movls	r0, #1
 800f46e:	4770      	bx	lr
 800f470:	4608      	mov	r0, r1
 800f472:	4770      	bx	lr

0800f474 <__swhatbuf_r>:
 800f474:	b570      	push	{r4, r5, r6, lr}
 800f476:	460c      	mov	r4, r1
 800f478:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f47c:	2900      	cmp	r1, #0
 800f47e:	b096      	sub	sp, #88	; 0x58
 800f480:	4615      	mov	r5, r2
 800f482:	461e      	mov	r6, r3
 800f484:	da0d      	bge.n	800f4a2 <__swhatbuf_r+0x2e>
 800f486:	89a3      	ldrh	r3, [r4, #12]
 800f488:	f013 0f80 	tst.w	r3, #128	; 0x80
 800f48c:	f04f 0100 	mov.w	r1, #0
 800f490:	bf0c      	ite	eq
 800f492:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800f496:	2340      	movne	r3, #64	; 0x40
 800f498:	2000      	movs	r0, #0
 800f49a:	6031      	str	r1, [r6, #0]
 800f49c:	602b      	str	r3, [r5, #0]
 800f49e:	b016      	add	sp, #88	; 0x58
 800f4a0:	bd70      	pop	{r4, r5, r6, pc}
 800f4a2:	466a      	mov	r2, sp
 800f4a4:	f000 f848 	bl	800f538 <_fstat_r>
 800f4a8:	2800      	cmp	r0, #0
 800f4aa:	dbec      	blt.n	800f486 <__swhatbuf_r+0x12>
 800f4ac:	9901      	ldr	r1, [sp, #4]
 800f4ae:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800f4b2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800f4b6:	4259      	negs	r1, r3
 800f4b8:	4159      	adcs	r1, r3
 800f4ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f4be:	e7eb      	b.n	800f498 <__swhatbuf_r+0x24>

0800f4c0 <__smakebuf_r>:
 800f4c0:	898b      	ldrh	r3, [r1, #12]
 800f4c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f4c4:	079d      	lsls	r5, r3, #30
 800f4c6:	4606      	mov	r6, r0
 800f4c8:	460c      	mov	r4, r1
 800f4ca:	d507      	bpl.n	800f4dc <__smakebuf_r+0x1c>
 800f4cc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f4d0:	6023      	str	r3, [r4, #0]
 800f4d2:	6123      	str	r3, [r4, #16]
 800f4d4:	2301      	movs	r3, #1
 800f4d6:	6163      	str	r3, [r4, #20]
 800f4d8:	b002      	add	sp, #8
 800f4da:	bd70      	pop	{r4, r5, r6, pc}
 800f4dc:	ab01      	add	r3, sp, #4
 800f4de:	466a      	mov	r2, sp
 800f4e0:	f7ff ffc8 	bl	800f474 <__swhatbuf_r>
 800f4e4:	9900      	ldr	r1, [sp, #0]
 800f4e6:	4605      	mov	r5, r0
 800f4e8:	4630      	mov	r0, r6
 800f4ea:	f7fe ff09 	bl	800e300 <_malloc_r>
 800f4ee:	b948      	cbnz	r0, 800f504 <__smakebuf_r+0x44>
 800f4f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f4f4:	059a      	lsls	r2, r3, #22
 800f4f6:	d4ef      	bmi.n	800f4d8 <__smakebuf_r+0x18>
 800f4f8:	f023 0303 	bic.w	r3, r3, #3
 800f4fc:	f043 0302 	orr.w	r3, r3, #2
 800f500:	81a3      	strh	r3, [r4, #12]
 800f502:	e7e3      	b.n	800f4cc <__smakebuf_r+0xc>
 800f504:	89a3      	ldrh	r3, [r4, #12]
 800f506:	6020      	str	r0, [r4, #0]
 800f508:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f50c:	81a3      	strh	r3, [r4, #12]
 800f50e:	9b00      	ldr	r3, [sp, #0]
 800f510:	6163      	str	r3, [r4, #20]
 800f512:	9b01      	ldr	r3, [sp, #4]
 800f514:	6120      	str	r0, [r4, #16]
 800f516:	b15b      	cbz	r3, 800f530 <__smakebuf_r+0x70>
 800f518:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f51c:	4630      	mov	r0, r6
 800f51e:	f000 f81d 	bl	800f55c <_isatty_r>
 800f522:	b128      	cbz	r0, 800f530 <__smakebuf_r+0x70>
 800f524:	89a3      	ldrh	r3, [r4, #12]
 800f526:	f023 0303 	bic.w	r3, r3, #3
 800f52a:	f043 0301 	orr.w	r3, r3, #1
 800f52e:	81a3      	strh	r3, [r4, #12]
 800f530:	89a3      	ldrh	r3, [r4, #12]
 800f532:	431d      	orrs	r5, r3
 800f534:	81a5      	strh	r5, [r4, #12]
 800f536:	e7cf      	b.n	800f4d8 <__smakebuf_r+0x18>

0800f538 <_fstat_r>:
 800f538:	b538      	push	{r3, r4, r5, lr}
 800f53a:	4d07      	ldr	r5, [pc, #28]	; (800f558 <_fstat_r+0x20>)
 800f53c:	2300      	movs	r3, #0
 800f53e:	4604      	mov	r4, r0
 800f540:	4608      	mov	r0, r1
 800f542:	4611      	mov	r1, r2
 800f544:	602b      	str	r3, [r5, #0]
 800f546:	f7f2 f82c 	bl	80015a2 <_fstat>
 800f54a:	1c43      	adds	r3, r0, #1
 800f54c:	d102      	bne.n	800f554 <_fstat_r+0x1c>
 800f54e:	682b      	ldr	r3, [r5, #0]
 800f550:	b103      	cbz	r3, 800f554 <_fstat_r+0x1c>
 800f552:	6023      	str	r3, [r4, #0]
 800f554:	bd38      	pop	{r3, r4, r5, pc}
 800f556:	bf00      	nop
 800f558:	24005b6c 	.word	0x24005b6c

0800f55c <_isatty_r>:
 800f55c:	b538      	push	{r3, r4, r5, lr}
 800f55e:	4d06      	ldr	r5, [pc, #24]	; (800f578 <_isatty_r+0x1c>)
 800f560:	2300      	movs	r3, #0
 800f562:	4604      	mov	r4, r0
 800f564:	4608      	mov	r0, r1
 800f566:	602b      	str	r3, [r5, #0]
 800f568:	f7f2 f82b 	bl	80015c2 <_isatty>
 800f56c:	1c43      	adds	r3, r0, #1
 800f56e:	d102      	bne.n	800f576 <_isatty_r+0x1a>
 800f570:	682b      	ldr	r3, [r5, #0]
 800f572:	b103      	cbz	r3, 800f576 <_isatty_r+0x1a>
 800f574:	6023      	str	r3, [r4, #0]
 800f576:	bd38      	pop	{r3, r4, r5, pc}
 800f578:	24005b6c 	.word	0x24005b6c

0800f57c <_malloc_usable_size_r>:
 800f57c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f580:	1f18      	subs	r0, r3, #4
 800f582:	2b00      	cmp	r3, #0
 800f584:	bfbc      	itt	lt
 800f586:	580b      	ldrlt	r3, [r1, r0]
 800f588:	18c0      	addlt	r0, r0, r3
 800f58a:	4770      	bx	lr

0800f58c <_init>:
 800f58c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f58e:	bf00      	nop
 800f590:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f592:	bc08      	pop	{r3}
 800f594:	469e      	mov	lr, r3
 800f596:	4770      	bx	lr

0800f598 <_fini>:
 800f598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f59a:	bf00      	nop
 800f59c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f59e:	bc08      	pop	{r3}
 800f5a0:	469e      	mov	lr, r3
 800f5a2:	4770      	bx	lr
