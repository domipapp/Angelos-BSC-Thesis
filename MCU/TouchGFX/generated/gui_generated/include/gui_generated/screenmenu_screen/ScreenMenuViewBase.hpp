/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#ifndef SCREENMENUVIEWBASE_HPP
#define SCREENMENUVIEWBASE_HPP

#include <gui/common/FrontendApplication.hpp>
#include <mvp/View.hpp>
#include <gui/screenmenu_screen/ScreenMenuPresenter.hpp>
#include <touchgfx/widgets/Box.hpp>
#include <touchgfx/widgets/Image.hpp>
#include <touchgfx/widgets/TextArea.hpp>
#include <touchgfx/containers/ScrollableContainer.hpp>
#include <touchgfx/containers/buttons/Buttons.hpp>
#include <touchgfx/widgets/TextAreaWithWildcard.hpp>
#include <touchgfx/EasingEquations.hpp>
#include <touchgfx/mixins/FadeAnimator.hpp>

class ScreenMenuViewBase : public touchgfx::View<ScreenMenuPresenter>
{
public:
    ScreenMenuViewBase();
    virtual ~ScreenMenuViewBase();
    virtual void setupScreen();

    /*
     * Virtual Action Handlers
     */
    virtual void ServerPortClicked()
    {
        // Override and implement this function in ScreenMenu
    }

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
    }

    /*
     * Member Declarations
     */
    touchgfx::Box __background;
    touchgfx::Image Background;
    touchgfx::Image TopBar;
    touchgfx::TextArea textAreaMenu;
    touchgfx::ScrollableContainer scrollableContainer1;
    touchgfx::TextButtonStyle< touchgfx::ClickButtonTrigger >  flexButtonDataFrequency;
    touchgfx::TextButtonStyle< touchgfx::ClickButtonTrigger >  flexButtonWifiSsid;
    touchgfx::TextButtonStyle< touchgfx::ClickButtonTrigger >  flexButtonWifiPass;
    touchgfx::TextButtonStyle< touchgfx::ClickButtonTrigger >  flexButtonServerIP;
    touchgfx::TextButtonStyle< touchgfx::ClickButtonTrigger >  flexButtonServerPort;
    touchgfx::Box boxTextAreaServerPortBackground;
    touchgfx::TextAreaWithOneWildcard textAreaServerPort;
    touchgfx::Image imageScrollSeparator;

    /*
     * Wildcard Buffers
     */
    static const uint16_t TEXTAREASERVERPORT_SIZE = 50;
    touchgfx::Unicode::UnicodeChar textAreaServerPortBuffer[TEXTAREASERVERPORT_SIZE];

private:

    /*
     * Callback Declarations
     */
    touchgfx::Callback<ScreenMenuViewBase, const touchgfx::AbstractButtonContainer&> flexButtonCallback;

    /*
     * Callback Handler Declarations
     */
    void flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src);

};

#endif // SCREENMENUVIEWBASE_HPP
