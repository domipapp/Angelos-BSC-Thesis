
STM32H750B-DK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .bootloader   0000227c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .isr_vector   00000298  90000000  90000000  00020000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00026308  900002a0  900002a0  000202a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00002fac  900265a8  900265a8  000465a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 FontSearchFlashSection 00000018  90029554  90029554  00049554  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM.extab    00000000  9002956c  9002956c  00079fc8  2**0
                  CONTENTS
  6 .ARM          00000008  9002956c  9002956c  0004956c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .preinit_array 00000000  90029574  90029574  00079fc8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  8 .init_array   00000018  90029574  90029574  00049574  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .fini_array   00000008  9002958c  9002958c  0004958c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .data         000002c8  24000000  90029594  00050000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 11 CCMRAM        00005a00  240002c8  9002985c  000502c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .bss          0001cb7c  24005cc8  9002f25c  00055cc8  2**3
                  ALLOC
 13 ._user_heap_stack 00002004  24022844  9002f25c  00062844  2**0
                  ALLOC
 14 .ARM.attributes 0000002e  00000000  00000000  00079fc8  2**0
                  CONTENTS, READONLY
 15 FontFlashSection 000001a8  90200000  90200000  00060000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 16 TextFlashSection 00000010  902001a8  902001a8  000601a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 17 ExtFlashSection 00019e10  902001b8  902001b8  000601b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 18 TouchGFX_Framebuffer 000bf400  d0000000  d0000000  00080000  2**2
                  ALLOC
 19 Video_RGB_Buffer 00043800  d00bf400  d00bf400  00080000  2**2
                  ALLOC
 20 .comment      000000c2  00000000  00000000  00079ff6  2**0
                  CONTENTS, READONLY
 21 .debug_line   00071a82  00000000  00000000  0007a0b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005a  00000000  00000000  000ebb3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_info   000be1a1  00000000  00000000  000ebb94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_abbrev 000152e6  00000000  00000000  001a9d35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_aranges 00003178  00000000  00000000  001bf020  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .debug_str    001a20f9  00000000  00000000  001c2198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 27 .debug_rnglists 00005df6  00000000  00000000  00364291  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 28 .debug_macro  00048159  00000000  00000000  0036a087  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 29 .debug_frame  0000ac7c  00000000  00000000  003b21e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 30 .debug_loclists 00523e94  00000000  00000000  003bce5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

900002a0 <__do_global_dtors_aux>:
900002a0:	b510      	push	{r4, lr}
900002a2:	4c05      	ldr	r4, [pc, #20]	; (900002b8 <__do_global_dtors_aux+0x18>)
900002a4:	7823      	ldrb	r3, [r4, #0]
900002a6:	b933      	cbnz	r3, 900002b6 <__do_global_dtors_aux+0x16>
900002a8:	4b04      	ldr	r3, [pc, #16]	; (900002bc <__do_global_dtors_aux+0x1c>)
900002aa:	b113      	cbz	r3, 900002b2 <__do_global_dtors_aux+0x12>
900002ac:	4804      	ldr	r0, [pc, #16]	; (900002c0 <__do_global_dtors_aux+0x20>)
900002ae:	f3af 8000 	nop.w
900002b2:	2301      	movs	r3, #1
900002b4:	7023      	strb	r3, [r4, #0]
900002b6:	bd10      	pop	{r4, pc}
900002b8:	24005cc8 	.word	0x24005cc8
900002bc:	00000000 	.word	0x00000000
900002c0:	90026590 	.word	0x90026590

900002c4 <frame_dummy>:
900002c4:	b508      	push	{r3, lr}
900002c6:	4b03      	ldr	r3, [pc, #12]	; (900002d4 <frame_dummy+0x10>)
900002c8:	b11b      	cbz	r3, 900002d2 <frame_dummy+0xe>
900002ca:	4903      	ldr	r1, [pc, #12]	; (900002d8 <frame_dummy+0x14>)
900002cc:	4803      	ldr	r0, [pc, #12]	; (900002dc <frame_dummy+0x18>)
900002ce:	f3af 8000 	nop.w
900002d2:	bd08      	pop	{r3, pc}
900002d4:	00000000 	.word	0x00000000
900002d8:	24005ccc 	.word	0x24005ccc
900002dc:	90026590 	.word	0x90026590

900002e0 <memchr>:
900002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
900002e4:	2a10      	cmp	r2, #16
900002e6:	db2b      	blt.n	90000340 <memchr+0x60>
900002e8:	f010 0f07 	tst.w	r0, #7
900002ec:	d008      	beq.n	90000300 <memchr+0x20>
900002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
900002f2:	3a01      	subs	r2, #1
900002f4:	428b      	cmp	r3, r1
900002f6:	d02d      	beq.n	90000354 <memchr+0x74>
900002f8:	f010 0f07 	tst.w	r0, #7
900002fc:	b342      	cbz	r2, 90000350 <memchr+0x70>
900002fe:	d1f6      	bne.n	900002ee <memchr+0xe>
90000300:	b4f0      	push	{r4, r5, r6, r7}
90000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
90000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
9000030a:	f022 0407 	bic.w	r4, r2, #7
9000030e:	f07f 0700 	mvns.w	r7, #0
90000312:	2300      	movs	r3, #0
90000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
90000318:	3c08      	subs	r4, #8
9000031a:	ea85 0501 	eor.w	r5, r5, r1
9000031e:	ea86 0601 	eor.w	r6, r6, r1
90000322:	fa85 f547 	uadd8	r5, r5, r7
90000326:	faa3 f587 	sel	r5, r3, r7
9000032a:	fa86 f647 	uadd8	r6, r6, r7
9000032e:	faa5 f687 	sel	r6, r5, r7
90000332:	b98e      	cbnz	r6, 90000358 <memchr+0x78>
90000334:	d1ee      	bne.n	90000314 <memchr+0x34>
90000336:	bcf0      	pop	{r4, r5, r6, r7}
90000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
9000033c:	f002 0207 	and.w	r2, r2, #7
90000340:	b132      	cbz	r2, 90000350 <memchr+0x70>
90000342:	f810 3b01 	ldrb.w	r3, [r0], #1
90000346:	3a01      	subs	r2, #1
90000348:	ea83 0301 	eor.w	r3, r3, r1
9000034c:	b113      	cbz	r3, 90000354 <memchr+0x74>
9000034e:	d1f8      	bne.n	90000342 <memchr+0x62>
90000350:	2000      	movs	r0, #0
90000352:	4770      	bx	lr
90000354:	3801      	subs	r0, #1
90000356:	4770      	bx	lr
90000358:	2d00      	cmp	r5, #0
9000035a:	bf06      	itte	eq
9000035c:	4635      	moveq	r5, r6
9000035e:	3803      	subeq	r0, #3
90000360:	3807      	subne	r0, #7
90000362:	f015 0f01 	tst.w	r5, #1
90000366:	d107      	bne.n	90000378 <memchr+0x98>
90000368:	3001      	adds	r0, #1
9000036a:	f415 7f80 	tst.w	r5, #256	; 0x100
9000036e:	bf02      	ittt	eq
90000370:	3001      	addeq	r0, #1
90000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
90000376:	3001      	addeq	r0, #1
90000378:	bcf0      	pop	{r4, r5, r6, r7}
9000037a:	3801      	subs	r0, #1
9000037c:	4770      	bx	lr
9000037e:	bf00      	nop

90000380 <strlen>:
90000380:	4603      	mov	r3, r0
90000382:	f813 2b01 	ldrb.w	r2, [r3], #1
90000386:	2a00      	cmp	r2, #0
90000388:	d1fb      	bne.n	90000382 <strlen+0x2>
9000038a:	1a18      	subs	r0, r3, r0
9000038c:	3801      	subs	r0, #1
9000038e:	4770      	bx	lr

90000390 <__aeabi_uldivmod>:
90000390:	b953      	cbnz	r3, 900003a8 <__aeabi_uldivmod+0x18>
90000392:	b94a      	cbnz	r2, 900003a8 <__aeabi_uldivmod+0x18>
90000394:	2900      	cmp	r1, #0
90000396:	bf08      	it	eq
90000398:	2800      	cmpeq	r0, #0
9000039a:	bf1c      	itt	ne
9000039c:	f04f 31ff 	movne.w	r1, #4294967295
900003a0:	f04f 30ff 	movne.w	r0, #4294967295
900003a4:	f000 b970 	b.w	90000688 <__aeabi_idiv0>
900003a8:	f1ad 0c08 	sub.w	ip, sp, #8
900003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
900003b0:	f000 f806 	bl	900003c0 <__udivmoddi4>
900003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
900003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
900003bc:	b004      	add	sp, #16
900003be:	4770      	bx	lr

900003c0 <__udivmoddi4>:
900003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
900003c4:	9e08      	ldr	r6, [sp, #32]
900003c6:	460d      	mov	r5, r1
900003c8:	4604      	mov	r4, r0
900003ca:	460f      	mov	r7, r1
900003cc:	2b00      	cmp	r3, #0
900003ce:	d14a      	bne.n	90000466 <__udivmoddi4+0xa6>
900003d0:	428a      	cmp	r2, r1
900003d2:	4694      	mov	ip, r2
900003d4:	d965      	bls.n	900004a2 <__udivmoddi4+0xe2>
900003d6:	fab2 f382 	clz	r3, r2
900003da:	b143      	cbz	r3, 900003ee <__udivmoddi4+0x2e>
900003dc:	fa02 fc03 	lsl.w	ip, r2, r3
900003e0:	f1c3 0220 	rsb	r2, r3, #32
900003e4:	409f      	lsls	r7, r3
900003e6:	fa20 f202 	lsr.w	r2, r0, r2
900003ea:	4317      	orrs	r7, r2
900003ec:	409c      	lsls	r4, r3
900003ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
900003f2:	fa1f f58c 	uxth.w	r5, ip
900003f6:	fbb7 f1fe 	udiv	r1, r7, lr
900003fa:	0c22      	lsrs	r2, r4, #16
900003fc:	fb0e 7711 	mls	r7, lr, r1, r7
90000400:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
90000404:	fb01 f005 	mul.w	r0, r1, r5
90000408:	4290      	cmp	r0, r2
9000040a:	d90a      	bls.n	90000422 <__udivmoddi4+0x62>
9000040c:	eb1c 0202 	adds.w	r2, ip, r2
90000410:	f101 37ff 	add.w	r7, r1, #4294967295
90000414:	f080 811c 	bcs.w	90000650 <__udivmoddi4+0x290>
90000418:	4290      	cmp	r0, r2
9000041a:	f240 8119 	bls.w	90000650 <__udivmoddi4+0x290>
9000041e:	3902      	subs	r1, #2
90000420:	4462      	add	r2, ip
90000422:	1a12      	subs	r2, r2, r0
90000424:	b2a4      	uxth	r4, r4
90000426:	fbb2 f0fe 	udiv	r0, r2, lr
9000042a:	fb0e 2210 	mls	r2, lr, r0, r2
9000042e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
90000432:	fb00 f505 	mul.w	r5, r0, r5
90000436:	42a5      	cmp	r5, r4
90000438:	d90a      	bls.n	90000450 <__udivmoddi4+0x90>
9000043a:	eb1c 0404 	adds.w	r4, ip, r4
9000043e:	f100 32ff 	add.w	r2, r0, #4294967295
90000442:	f080 8107 	bcs.w	90000654 <__udivmoddi4+0x294>
90000446:	42a5      	cmp	r5, r4
90000448:	f240 8104 	bls.w	90000654 <__udivmoddi4+0x294>
9000044c:	4464      	add	r4, ip
9000044e:	3802      	subs	r0, #2
90000450:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
90000454:	1b64      	subs	r4, r4, r5
90000456:	2100      	movs	r1, #0
90000458:	b11e      	cbz	r6, 90000462 <__udivmoddi4+0xa2>
9000045a:	40dc      	lsrs	r4, r3
9000045c:	2300      	movs	r3, #0
9000045e:	e9c6 4300 	strd	r4, r3, [r6]
90000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
90000466:	428b      	cmp	r3, r1
90000468:	d908      	bls.n	9000047c <__udivmoddi4+0xbc>
9000046a:	2e00      	cmp	r6, #0
9000046c:	f000 80ed 	beq.w	9000064a <__udivmoddi4+0x28a>
90000470:	2100      	movs	r1, #0
90000472:	e9c6 0500 	strd	r0, r5, [r6]
90000476:	4608      	mov	r0, r1
90000478:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
9000047c:	fab3 f183 	clz	r1, r3
90000480:	2900      	cmp	r1, #0
90000482:	d149      	bne.n	90000518 <__udivmoddi4+0x158>
90000484:	42ab      	cmp	r3, r5
90000486:	d302      	bcc.n	9000048e <__udivmoddi4+0xce>
90000488:	4282      	cmp	r2, r0
9000048a:	f200 80f8 	bhi.w	9000067e <__udivmoddi4+0x2be>
9000048e:	1a84      	subs	r4, r0, r2
90000490:	eb65 0203 	sbc.w	r2, r5, r3
90000494:	2001      	movs	r0, #1
90000496:	4617      	mov	r7, r2
90000498:	2e00      	cmp	r6, #0
9000049a:	d0e2      	beq.n	90000462 <__udivmoddi4+0xa2>
9000049c:	e9c6 4700 	strd	r4, r7, [r6]
900004a0:	e7df      	b.n	90000462 <__udivmoddi4+0xa2>
900004a2:	b902      	cbnz	r2, 900004a6 <__udivmoddi4+0xe6>
900004a4:	deff      	udf	#255	; 0xff
900004a6:	fab2 f382 	clz	r3, r2
900004aa:	2b00      	cmp	r3, #0
900004ac:	f040 8090 	bne.w	900005d0 <__udivmoddi4+0x210>
900004b0:	1a8a      	subs	r2, r1, r2
900004b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
900004b6:	fa1f fe8c 	uxth.w	lr, ip
900004ba:	2101      	movs	r1, #1
900004bc:	fbb2 f5f7 	udiv	r5, r2, r7
900004c0:	fb07 2015 	mls	r0, r7, r5, r2
900004c4:	0c22      	lsrs	r2, r4, #16
900004c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
900004ca:	fb0e f005 	mul.w	r0, lr, r5
900004ce:	4290      	cmp	r0, r2
900004d0:	d908      	bls.n	900004e4 <__udivmoddi4+0x124>
900004d2:	eb1c 0202 	adds.w	r2, ip, r2
900004d6:	f105 38ff 	add.w	r8, r5, #4294967295
900004da:	d202      	bcs.n	900004e2 <__udivmoddi4+0x122>
900004dc:	4290      	cmp	r0, r2
900004de:	f200 80cb 	bhi.w	90000678 <__udivmoddi4+0x2b8>
900004e2:	4645      	mov	r5, r8
900004e4:	1a12      	subs	r2, r2, r0
900004e6:	b2a4      	uxth	r4, r4
900004e8:	fbb2 f0f7 	udiv	r0, r2, r7
900004ec:	fb07 2210 	mls	r2, r7, r0, r2
900004f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
900004f4:	fb0e fe00 	mul.w	lr, lr, r0
900004f8:	45a6      	cmp	lr, r4
900004fa:	d908      	bls.n	9000050e <__udivmoddi4+0x14e>
900004fc:	eb1c 0404 	adds.w	r4, ip, r4
90000500:	f100 32ff 	add.w	r2, r0, #4294967295
90000504:	d202      	bcs.n	9000050c <__udivmoddi4+0x14c>
90000506:	45a6      	cmp	lr, r4
90000508:	f200 80bb 	bhi.w	90000682 <__udivmoddi4+0x2c2>
9000050c:	4610      	mov	r0, r2
9000050e:	eba4 040e 	sub.w	r4, r4, lr
90000512:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
90000516:	e79f      	b.n	90000458 <__udivmoddi4+0x98>
90000518:	f1c1 0720 	rsb	r7, r1, #32
9000051c:	408b      	lsls	r3, r1
9000051e:	fa22 fc07 	lsr.w	ip, r2, r7
90000522:	ea4c 0c03 	orr.w	ip, ip, r3
90000526:	fa05 f401 	lsl.w	r4, r5, r1
9000052a:	fa20 f307 	lsr.w	r3, r0, r7
9000052e:	40fd      	lsrs	r5, r7
90000530:	ea4f 491c 	mov.w	r9, ip, lsr #16
90000534:	4323      	orrs	r3, r4
90000536:	fbb5 f8f9 	udiv	r8, r5, r9
9000053a:	fa1f fe8c 	uxth.w	lr, ip
9000053e:	fb09 5518 	mls	r5, r9, r8, r5
90000542:	0c1c      	lsrs	r4, r3, #16
90000544:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
90000548:	fb08 f50e 	mul.w	r5, r8, lr
9000054c:	42a5      	cmp	r5, r4
9000054e:	fa02 f201 	lsl.w	r2, r2, r1
90000552:	fa00 f001 	lsl.w	r0, r0, r1
90000556:	d90b      	bls.n	90000570 <__udivmoddi4+0x1b0>
90000558:	eb1c 0404 	adds.w	r4, ip, r4
9000055c:	f108 3aff 	add.w	sl, r8, #4294967295
90000560:	f080 8088 	bcs.w	90000674 <__udivmoddi4+0x2b4>
90000564:	42a5      	cmp	r5, r4
90000566:	f240 8085 	bls.w	90000674 <__udivmoddi4+0x2b4>
9000056a:	f1a8 0802 	sub.w	r8, r8, #2
9000056e:	4464      	add	r4, ip
90000570:	1b64      	subs	r4, r4, r5
90000572:	b29d      	uxth	r5, r3
90000574:	fbb4 f3f9 	udiv	r3, r4, r9
90000578:	fb09 4413 	mls	r4, r9, r3, r4
9000057c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
90000580:	fb03 fe0e 	mul.w	lr, r3, lr
90000584:	45a6      	cmp	lr, r4
90000586:	d908      	bls.n	9000059a <__udivmoddi4+0x1da>
90000588:	eb1c 0404 	adds.w	r4, ip, r4
9000058c:	f103 35ff 	add.w	r5, r3, #4294967295
90000590:	d26c      	bcs.n	9000066c <__udivmoddi4+0x2ac>
90000592:	45a6      	cmp	lr, r4
90000594:	d96a      	bls.n	9000066c <__udivmoddi4+0x2ac>
90000596:	3b02      	subs	r3, #2
90000598:	4464      	add	r4, ip
9000059a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
9000059e:	fba3 9502 	umull	r9, r5, r3, r2
900005a2:	eba4 040e 	sub.w	r4, r4, lr
900005a6:	42ac      	cmp	r4, r5
900005a8:	46c8      	mov	r8, r9
900005aa:	46ae      	mov	lr, r5
900005ac:	d356      	bcc.n	9000065c <__udivmoddi4+0x29c>
900005ae:	d053      	beq.n	90000658 <__udivmoddi4+0x298>
900005b0:	b156      	cbz	r6, 900005c8 <__udivmoddi4+0x208>
900005b2:	ebb0 0208 	subs.w	r2, r0, r8
900005b6:	eb64 040e 	sbc.w	r4, r4, lr
900005ba:	fa04 f707 	lsl.w	r7, r4, r7
900005be:	40ca      	lsrs	r2, r1
900005c0:	40cc      	lsrs	r4, r1
900005c2:	4317      	orrs	r7, r2
900005c4:	e9c6 7400 	strd	r7, r4, [r6]
900005c8:	4618      	mov	r0, r3
900005ca:	2100      	movs	r1, #0
900005cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
900005d0:	f1c3 0120 	rsb	r1, r3, #32
900005d4:	fa02 fc03 	lsl.w	ip, r2, r3
900005d8:	fa20 f201 	lsr.w	r2, r0, r1
900005dc:	fa25 f101 	lsr.w	r1, r5, r1
900005e0:	409d      	lsls	r5, r3
900005e2:	432a      	orrs	r2, r5
900005e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
900005e8:	fa1f fe8c 	uxth.w	lr, ip
900005ec:	fbb1 f0f7 	udiv	r0, r1, r7
900005f0:	fb07 1510 	mls	r5, r7, r0, r1
900005f4:	0c11      	lsrs	r1, r2, #16
900005f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
900005fa:	fb00 f50e 	mul.w	r5, r0, lr
900005fe:	428d      	cmp	r5, r1
90000600:	fa04 f403 	lsl.w	r4, r4, r3
90000604:	d908      	bls.n	90000618 <__udivmoddi4+0x258>
90000606:	eb1c 0101 	adds.w	r1, ip, r1
9000060a:	f100 38ff 	add.w	r8, r0, #4294967295
9000060e:	d22f      	bcs.n	90000670 <__udivmoddi4+0x2b0>
90000610:	428d      	cmp	r5, r1
90000612:	d92d      	bls.n	90000670 <__udivmoddi4+0x2b0>
90000614:	3802      	subs	r0, #2
90000616:	4461      	add	r1, ip
90000618:	1b49      	subs	r1, r1, r5
9000061a:	b292      	uxth	r2, r2
9000061c:	fbb1 f5f7 	udiv	r5, r1, r7
90000620:	fb07 1115 	mls	r1, r7, r5, r1
90000624:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
90000628:	fb05 f10e 	mul.w	r1, r5, lr
9000062c:	4291      	cmp	r1, r2
9000062e:	d908      	bls.n	90000642 <__udivmoddi4+0x282>
90000630:	eb1c 0202 	adds.w	r2, ip, r2
90000634:	f105 38ff 	add.w	r8, r5, #4294967295
90000638:	d216      	bcs.n	90000668 <__udivmoddi4+0x2a8>
9000063a:	4291      	cmp	r1, r2
9000063c:	d914      	bls.n	90000668 <__udivmoddi4+0x2a8>
9000063e:	3d02      	subs	r5, #2
90000640:	4462      	add	r2, ip
90000642:	1a52      	subs	r2, r2, r1
90000644:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
90000648:	e738      	b.n	900004bc <__udivmoddi4+0xfc>
9000064a:	4631      	mov	r1, r6
9000064c:	4630      	mov	r0, r6
9000064e:	e708      	b.n	90000462 <__udivmoddi4+0xa2>
90000650:	4639      	mov	r1, r7
90000652:	e6e6      	b.n	90000422 <__udivmoddi4+0x62>
90000654:	4610      	mov	r0, r2
90000656:	e6fb      	b.n	90000450 <__udivmoddi4+0x90>
90000658:	4548      	cmp	r0, r9
9000065a:	d2a9      	bcs.n	900005b0 <__udivmoddi4+0x1f0>
9000065c:	ebb9 0802 	subs.w	r8, r9, r2
90000660:	eb65 0e0c 	sbc.w	lr, r5, ip
90000664:	3b01      	subs	r3, #1
90000666:	e7a3      	b.n	900005b0 <__udivmoddi4+0x1f0>
90000668:	4645      	mov	r5, r8
9000066a:	e7ea      	b.n	90000642 <__udivmoddi4+0x282>
9000066c:	462b      	mov	r3, r5
9000066e:	e794      	b.n	9000059a <__udivmoddi4+0x1da>
90000670:	4640      	mov	r0, r8
90000672:	e7d1      	b.n	90000618 <__udivmoddi4+0x258>
90000674:	46d0      	mov	r8, sl
90000676:	e77b      	b.n	90000570 <__udivmoddi4+0x1b0>
90000678:	3d02      	subs	r5, #2
9000067a:	4462      	add	r2, ip
9000067c:	e732      	b.n	900004e4 <__udivmoddi4+0x124>
9000067e:	4608      	mov	r0, r1
90000680:	e70a      	b.n	90000498 <__udivmoddi4+0xd8>
90000682:	4464      	add	r4, ip
90000684:	3802      	subs	r0, #2
90000686:	e742      	b.n	9000050e <__udivmoddi4+0x14e>

90000688 <__aeabi_idiv0>:
90000688:	4770      	bx	lr
9000068a:	bf00      	nop

9000068c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
9000068c:	f8df d034 	ldr.w	sp, [pc, #52]	; 900006c4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
90000690:	2100      	movs	r1, #0
  b  LoopCopyDataInit
90000692:	e003      	b.n	9000069c <LoopCopyDataInit>

90000694 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
90000694:	4b0c      	ldr	r3, [pc, #48]	; (900006c8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
90000696:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
90000698:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
9000069a:	3104      	adds	r1, #4

9000069c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
9000069c:	480b      	ldr	r0, [pc, #44]	; (900006cc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
9000069e:	4b0c      	ldr	r3, [pc, #48]	; (900006d0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
900006a0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
900006a2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
900006a4:	d3f6      	bcc.n	90000694 <CopyDataInit>
  ldr  r2, =_sbss
900006a6:	4a0b      	ldr	r2, [pc, #44]	; (900006d4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
900006a8:	e002      	b.n	900006b0 <LoopFillZerobss>

900006aa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
900006aa:	2300      	movs	r3, #0
  str  r3, [r2], #4
900006ac:	f842 3b04 	str.w	r3, [r2], #4

900006b0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
900006b0:	4b09      	ldr	r3, [pc, #36]	; (900006d8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
900006b2:	429a      	cmp	r2, r3
  bcc  FillZerobss
900006b4:	d3f9      	bcc.n	900006aa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
900006b6:	f005 fd03 	bl	900060c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
900006ba:	f024 f8c5 	bl	90024848 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
900006be:	f002 fe69 	bl	90003394 <main>
  bx  lr    
900006c2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
900006c4:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
900006c8:	90029594 	.word	0x90029594
  ldr  r0, =_sdata
900006cc:	24000000 	.word	0x24000000
  ldr  r3, =_edata
900006d0:	240002c8 	.word	0x240002c8
  ldr  r2, =_sbss
900006d4:	24005cc8 	.word	0x24005cc8
  ldr  r3, = _ebss
900006d8:	24022844 	.word	0x24022844

900006dc <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
900006dc:	e7fe      	b.n	900006dc <ADC3_IRQHandler>
	...

900006e0 <MX_LIBJPEG_Init>:
  */

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}
900006e0:	4770      	bx	lr
900006e2:	bf00      	nop

900006e4 <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
900006e4:	b508      	push	{r3, lr}
  // Calling forward to touchgfx_init in C++ domain
  touchgfx_components_init();
900006e6:	f001 fe6b 	bl	900023c0 <touchgfx_components_init>
  touchgfx_init();
}
900006ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  touchgfx_init();
900006ee:	f001 bdef 	b.w	900022d0 <touchgfx_init>
900006f2:	bf00      	nop

900006f4 <TouchGFX_Task>:
 * TouchGFX application thread
 */
void TouchGFX_Task(void *argument)
{
  // Calling forward to touchgfx_taskEntry in C++ domain
  touchgfx_taskEntry();
900006f4:	f001 be66 	b.w	900023c4 <touchgfx_taskEntry>

900006f8 <_ZN8touchgfx18MCUInstrumentation13getCCConsumedEv>:
     *
     * @return clock cycles.
     */
    virtual uint32_t getCCConsumed()
    {
        return cc_consumed;
900006f8:	6840      	ldr	r0, [r0, #4]
    }
900006fa:	4770      	bx	lr

900006fc <_ZN8touchgfx18MCUInstrumentation13setCCConsumedEm>:
     *
     * @param  val number of clock cycles.
     */
    virtual void setCCConsumed(uint32_t val)
    {
        cc_consumed = val;
900006fc:	6041      	str	r1, [r0, #4]
    }
900006fe:	4770      	bx	lr

90000700 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv>:
    //                                    Embedded Trace Macrocell (ETM)
    //                                    Trace Port Interface Unit (TPIU).
    //                                    This enables control of power usage unless tracing is required. The application can enable this, for ITM use, or use by a debugger.

    // Enable Debug Exception and Monitor Control Register
    *((volatile unsigned int*)0xE000EDFC) |= 0x01000000;
90000700:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    // Enable Lock Access Register
    *((volatile unsigned int*)0xE0001FB0) |= 0xC5ACCE55;
90000704:	4b08      	ldr	r3, [pc, #32]	; (90000728 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv+0x28>)
90000706:	4a09      	ldr	r2, [pc, #36]	; (9000072c <_ZN8touchgfx25CortexMMCUInstrumentation4initEv+0x2c>)
    *((volatile unsigned int*)0xE000EDFC) |= 0x01000000;
90000708:	f8d0 1dfc 	ldr.w	r1, [r0, #3580]	; 0xdfc
9000070c:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
90000710:	f8c0 1dfc 	str.w	r1, [r0, #3580]	; 0xdfc
    *((volatile unsigned int*)0xE0001FB0) |= 0xC5ACCE55;
90000714:	f8d3 1fb0 	ldr.w	r1, [r3, #4016]	; 0xfb0
90000718:	430a      	orrs	r2, r1
9000071a:	f8c3 2fb0 	str.w	r2, [r3, #4016]	; 0xfb0
    // Enable Data Watchpoint and Trace Control Register
    *((volatile unsigned int*)0xE0001000) |= 1;
9000071e:	681a      	ldr	r2, [r3, #0]
90000720:	f042 0201 	orr.w	r2, r2, #1
90000724:	601a      	str	r2, [r3, #0]
}
90000726:	4770      	bx	lr
90000728:	e0001000 	.word	0xe0001000
9000072c:	c5acce55 	.word	0xc5acce55

90000730 <_ZN8touchgfx25CortexMMCUInstrumentation12getElapsedUSEjjj>:

//Board specific clockfrequency
unsigned int CortexMMCUInstrumentation::getElapsedUS(unsigned int start, unsigned int now, unsigned int clockfrequency)
{
    return ((now - start) + (clockfrequency / 2)) / clockfrequency;
90000730:	1a51      	subs	r1, r2, r1
90000732:	eb01 0153 	add.w	r1, r1, r3, lsr #1
}
90000736:	fbb1 f0f3 	udiv	r0, r1, r3
9000073a:	4770      	bx	lr

9000073c <_ZN8touchgfx25CortexMMCUInstrumentation12getCPUCyclesEv>:

unsigned int CortexMMCUInstrumentation::getCPUCycles()
{
    return *((volatile unsigned int*)0xE0001004);
9000073c:	4b01      	ldr	r3, [pc, #4]	; (90000744 <_ZN8touchgfx25CortexMMCUInstrumentation12getCPUCyclesEv+0x8>)
9000073e:	6858      	ldr	r0, [r3, #4]
}
90000740:	4770      	bx	lr
90000742:	bf00      	nop
90000744:	e0001000 	.word	0xe0001000

90000748 <_ZN8touchgfx25CortexMMCUInstrumentationD1Ev>:
 *        Interface for instrumenting Cortex-M processors to measure MCU load via measured CPU
 *        cycles.
 *
 * @sa MCUInstrumentation
 */
class CortexMMCUInstrumentation : public MCUInstrumentation
90000748:	4770      	bx	lr
9000074a:	bf00      	nop

9000074c <_ZN8touchgfx25CortexMMCUInstrumentationD0Ev>:
9000074c:	b510      	push	{r4, lr}
9000074e:	4604      	mov	r4, r0
90000750:	210c      	movs	r1, #12
90000752:	f023 f880 	bl	90023856 <_ZdlPvj>
90000756:	4620      	mov	r0, r4
90000758:	bd10      	pop	{r4, pc}
9000075a:	bf00      	nop

9000075c <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb>:

void CortexMMCUInstrumentation::setMCUActive(bool active)
{
    if (active) //idle task sched out
    {
        uint32_t cc_temp = getCPUCycles() - cc_in;
9000075c:	6803      	ldr	r3, [r0, #0]
9000075e:	4a0c      	ldr	r2, [pc, #48]	; (90000790 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x34>)
90000760:	691b      	ldr	r3, [r3, #16]
{
90000762:	b510      	push	{r4, lr}
90000764:	4604      	mov	r4, r0
    if (active) //idle task sched out
90000766:	b149      	cbz	r1, 9000077c <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x20>
        uint32_t cc_temp = getCPUCycles() - cc_in;
90000768:	4293      	cmp	r3, r2
9000076a:	d10d      	bne.n	90000788 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x2c>
    return *((volatile unsigned int*)0xE0001004);
9000076c:	4b09      	ldr	r3, [pc, #36]	; (90000794 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x38>)
9000076e:	6858      	ldr	r0, [r3, #4]
        uint32_t cc_temp = getCPUCycles() - cc_in;
90000770:	68a2      	ldr	r2, [r4, #8]
        cc_consumed += cc_temp;
90000772:	6863      	ldr	r3, [r4, #4]
90000774:	1a9b      	subs	r3, r3, r2
90000776:	4403      	add	r3, r0
90000778:	6063      	str	r3, [r4, #4]
    }
    else //idle task sched in
    {
        cc_in = getCPUCycles();
    }
}
9000077a:	bd10      	pop	{r4, pc}
        cc_in = getCPUCycles();
9000077c:	4293      	cmp	r3, r2
9000077e:	d105      	bne.n	9000078c <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x30>
    return *((volatile unsigned int*)0xE0001004);
90000780:	4b04      	ldr	r3, [pc, #16]	; (90000794 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x38>)
90000782:	6858      	ldr	r0, [r3, #4]
        cc_in = getCPUCycles();
90000784:	60a0      	str	r0, [r4, #8]
}
90000786:	bd10      	pop	{r4, pc}
        uint32_t cc_temp = getCPUCycles() - cc_in;
90000788:	4798      	blx	r3
9000078a:	e7f1      	b.n	90000770 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x14>
        cc_in = getCPUCycles();
9000078c:	4798      	blx	r3
9000078e:	e7f9      	b.n	90000784 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x28>
90000790:	9000073d 	.word	0x9000073d
90000794:	e0001000 	.word	0xe0001000

90000798 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
90000798:	4770      	bx	lr
9000079a:	bf00      	nop
9000079c:	0000      	movs	r0, r0
	...

900007a0 <_ZN20STM32TouchController4initEv>:

#include <STM32TouchController.hpp>
#include "stm32h750b_discovery_ts.h"

void STM32TouchController::init()
{
900007a0:	b500      	push	{lr}
900007a2:	b085      	sub	sp, #20
     *
     */
    TS_Init_t hTS;
    hTS.Orientation = TS_SWAP_XY;
    hTS.Accuracy = 0;
    hTS.Width = 480;
900007a4:	2208      	movs	r2, #8
900007a6:	2300      	movs	r3, #0
    hTS.Height = 272;
    BSP_TS_Init(0, &hTS);
900007a8:	2000      	movs	r0, #0
900007aa:	4669      	mov	r1, sp
    hTS.Width = 480;
900007ac:	ed9f 7b06 	vldr	d7, [pc, #24]	; 900007c8 <_ZN20STM32TouchController4initEv+0x28>
900007b0:	e9cd 2302 	strd	r2, r3, [sp, #8]
900007b4:	ed8d 7b00 	vstr	d7, [sp]
    BSP_TS_Init(0, &hTS);
900007b8:	f005 fb90 	bl	90005edc <BSP_TS_Init>
}
900007bc:	b005      	add	sp, #20
900007be:	f85d fb04 	ldr.w	pc, [sp], #4
900007c2:	bf00      	nop
900007c4:	f3af 8000 	nop.w
900007c8:	000001e0 	.word	0x000001e0
900007cc:	00000110 	.word	0x00000110

900007d0 <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
900007d0:	b530      	push	{r4, r5, lr}
900007d2:	b085      	sub	sp, #20
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    TS_State_t  TS_State = { 0 };
900007d4:	2000      	movs	r0, #0
{
900007d6:	460d      	mov	r5, r1
900007d8:	4614      	mov	r4, r2
    BSP_TS_GetState(0, &TS_State);
900007da:	a901      	add	r1, sp, #4
    TS_State_t  TS_State = { 0 };
900007dc:	9001      	str	r0, [sp, #4]
900007de:	e9cd 0002 	strd	r0, r0, [sp, #8]
    BSP_TS_GetState(0, &TS_State);
900007e2:	f005 fc09 	bl	90005ff8 <BSP_TS_GetState>
    if (TS_State.TouchDetected)
900007e6:	9801      	ldr	r0, [sp, #4]
900007e8:	b120      	cbz	r0, 900007f4 <_ZN20STM32TouchController11sampleTouchERlS0_+0x24>
    {
        x = TS_State.TouchX;
        y = TS_State.TouchY;
        return true;
900007ea:	2001      	movs	r0, #1
        y = TS_State.TouchY;
900007ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
        x = TS_State.TouchX;
900007f0:	602a      	str	r2, [r5, #0]
        y = TS_State.TouchY;
900007f2:	6023      	str	r3, [r4, #0]
    }

    return false;
}
900007f4:	b005      	add	sp, #20
900007f6:	bd30      	pop	{r4, r5, pc}

900007f8 <_ZN20STM32TouchControllerD0Ev>:
900007f8:	b510      	push	{r4, lr}
900007fa:	4604      	mov	r4, r0
900007fc:	2104      	movs	r1, #4
900007fe:	f023 f82a 	bl	90023856 <_ZdlPvj>
90000802:	4620      	mov	r0, r4
90000804:	bd10      	pop	{r4, pc}
90000806:	bf00      	nop

90000808 <_ZN8touchgfx4GPIO4initEv>:
    GPIO_PinState bitstatus = GPIO_PIN_RESET;
    switch (id)
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        bitstatus = HAL_GPIO_ReadPin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
90000808:	2108      	movs	r1, #8
9000080a:	4810      	ldr	r0, [pc, #64]	; (9000084c <_ZN8touchgfx4GPIO4initEv+0x44>)
{
9000080c:	b508      	push	{r3, lr}
        bitstatus = HAL_GPIO_ReadPin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
9000080e:	f006 fbad 	bl	90006f6c <HAL_GPIO_ReadPin>
        if (GPIO::get(static_cast<GPIO_ID>(id)))
90000812:	2801      	cmp	r0, #1
90000814:	d101      	bne.n	9000081a <_ZN8touchgfx4GPIO4initEv+0x12>
            GPIO_InvertedLevels[id] = 1;
90000816:	4b0e      	ldr	r3, [pc, #56]	; (90000850 <_ZN8touchgfx4GPIO4initEv+0x48>)
90000818:	6018      	str	r0, [r3, #0]
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        bitstatus = HAL_GPIO_ReadPin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
9000081a:	2180      	movs	r1, #128	; 0x80
9000081c:	480d      	ldr	r0, [pc, #52]	; (90000854 <_ZN8touchgfx4GPIO4initEv+0x4c>)
9000081e:	f006 fba5 	bl	90006f6c <HAL_GPIO_ReadPin>
        if (GPIO::get(static_cast<GPIO_ID>(id)))
90000822:	2801      	cmp	r0, #1
90000824:	d101      	bne.n	9000082a <_ZN8touchgfx4GPIO4initEv+0x22>
            GPIO_InvertedLevels[id] = 1;
90000826:	4b0a      	ldr	r3, [pc, #40]	; (90000850 <_ZN8touchgfx4GPIO4initEv+0x48>)
90000828:	6058      	str	r0, [r3, #4]
#endif
        break;
    case GPIO::FRAME_RATE:
#if defined(FRAME_RATE_GPIO_Port) && defined(FRAME_RATE_Pin)
        bitstatus = HAL_GPIO_ReadPin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
9000082a:	2140      	movs	r1, #64	; 0x40
9000082c:	4809      	ldr	r0, [pc, #36]	; (90000854 <_ZN8touchgfx4GPIO4initEv+0x4c>)
9000082e:	f006 fb9d 	bl	90006f6c <HAL_GPIO_ReadPin>
        if (GPIO::get(static_cast<GPIO_ID>(id)))
90000832:	2801      	cmp	r0, #1
90000834:	d101      	bne.n	9000083a <_ZN8touchgfx4GPIO4initEv+0x32>
            GPIO_InvertedLevels[id] = 1;
90000836:	4b06      	ldr	r3, [pc, #24]	; (90000850 <_ZN8touchgfx4GPIO4initEv+0x48>)
90000838:	6098      	str	r0, [r3, #8]
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        bitstatus = HAL_GPIO_ReadPin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
9000083a:	2140      	movs	r1, #64	; 0x40
9000083c:	4806      	ldr	r0, [pc, #24]	; (90000858 <_ZN8touchgfx4GPIO4initEv+0x50>)
9000083e:	f006 fb95 	bl	90006f6c <HAL_GPIO_ReadPin>
        if (GPIO::get(static_cast<GPIO_ID>(id)))
90000842:	2801      	cmp	r0, #1
90000844:	d101      	bne.n	9000084a <_ZN8touchgfx4GPIO4initEv+0x42>
            GPIO_InvertedLevels[id] = 1;
90000846:	4b02      	ldr	r3, [pc, #8]	; (90000850 <_ZN8touchgfx4GPIO4initEv+0x48>)
90000848:	60d8      	str	r0, [r3, #12]
}
9000084a:	bd08      	pop	{r3, pc}
9000084c:	58021800 	.word	0x58021800
90000850:	24005ce4 	.word	0x24005ce4
90000854:	58020400 	.word	0x58020400
90000858:	58020000 	.word	0x58020000

9000085c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:
    switch (id)
9000085c:	2803      	cmp	r0, #3
9000085e:	d827      	bhi.n	900008b0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x54>
90000860:	e8df f000 	tbb	[pc, r0]
90000864:	020b141d 	.word	0x020b141d
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
90000868:	4b12      	ldr	r3, [pc, #72]	; (900008b4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x58>)
9000086a:	2140      	movs	r1, #64	; 0x40
9000086c:	4812      	ldr	r0, [pc, #72]	; (900008b8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x5c>)
9000086e:	68da      	ldr	r2, [r3, #12]
90000870:	fab2 f282 	clz	r2, r2
90000874:	0952      	lsrs	r2, r2, #5
90000876:	f006 bb7f 	b.w	90006f78 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_SET(id));
9000087a:	4b0e      	ldr	r3, [pc, #56]	; (900008b4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x58>)
9000087c:	2140      	movs	r1, #64	; 0x40
9000087e:	480f      	ldr	r0, [pc, #60]	; (900008bc <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x60>)
90000880:	689a      	ldr	r2, [r3, #8]
90000882:	fab2 f282 	clz	r2, r2
90000886:	0952      	lsrs	r2, r2, #5
90000888:	f006 bb76 	b.w	90006f78 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_SET(id));
9000088c:	4b09      	ldr	r3, [pc, #36]	; (900008b4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x58>)
9000088e:	2180      	movs	r1, #128	; 0x80
90000890:	480a      	ldr	r0, [pc, #40]	; (900008bc <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x60>)
90000892:	685a      	ldr	r2, [r3, #4]
90000894:	fab2 f282 	clz	r2, r2
90000898:	0952      	lsrs	r2, r2, #5
9000089a:	f006 bb6d 	b.w	90006f78 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_SET(id));
9000089e:	4b05      	ldr	r3, [pc, #20]	; (900008b4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x58>)
900008a0:	2108      	movs	r1, #8
900008a2:	4807      	ldr	r0, [pc, #28]	; (900008c0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x64>)
900008a4:	681a      	ldr	r2, [r3, #0]
900008a6:	fab2 f282 	clz	r2, r2
900008aa:	0952      	lsrs	r2, r2, #5
900008ac:	f006 bb64 	b.w	90006f78 <HAL_GPIO_WritePin>
}
900008b0:	4770      	bx	lr
900008b2:	bf00      	nop
900008b4:	24005ce4 	.word	0x24005ce4
900008b8:	58020000 	.word	0x58020000
900008bc:	58020400 	.word	0x58020400
900008c0:	58021800 	.word	0x58021800

900008c4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:
    switch (id)
900008c4:	2803      	cmp	r0, #3
900008c6:	d827      	bhi.n	90000918 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>
900008c8:	e8df f000 	tbb	[pc, r0]
900008cc:	020b141d 	.word	0x020b141d
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
900008d0:	4b12      	ldr	r3, [pc, #72]	; (9000091c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x58>)
900008d2:	2140      	movs	r1, #64	; 0x40
900008d4:	4812      	ldr	r0, [pc, #72]	; (90000920 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x5c>)
900008d6:	68da      	ldr	r2, [r3, #12]
900008d8:	3a00      	subs	r2, #0
900008da:	bf18      	it	ne
900008dc:	2201      	movne	r2, #1
900008de:	f006 bb4b 	b.w	90006f78 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
900008e2:	4b0e      	ldr	r3, [pc, #56]	; (9000091c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x58>)
900008e4:	2140      	movs	r1, #64	; 0x40
900008e6:	480f      	ldr	r0, [pc, #60]	; (90000924 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x60>)
900008e8:	689a      	ldr	r2, [r3, #8]
900008ea:	3a00      	subs	r2, #0
900008ec:	bf18      	it	ne
900008ee:	2201      	movne	r2, #1
900008f0:	f006 bb42 	b.w	90006f78 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_RESET(id));
900008f4:	4b09      	ldr	r3, [pc, #36]	; (9000091c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x58>)
900008f6:	2180      	movs	r1, #128	; 0x80
900008f8:	480a      	ldr	r0, [pc, #40]	; (90000924 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x60>)
900008fa:	685a      	ldr	r2, [r3, #4]
900008fc:	3a00      	subs	r2, #0
900008fe:	bf18      	it	ne
90000900:	2201      	movne	r2, #1
90000902:	f006 bb39 	b.w	90006f78 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_RESET(id));
90000906:	4b05      	ldr	r3, [pc, #20]	; (9000091c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x58>)
90000908:	2108      	movs	r1, #8
9000090a:	4807      	ldr	r0, [pc, #28]	; (90000928 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x64>)
9000090c:	681a      	ldr	r2, [r3, #0]
9000090e:	3a00      	subs	r2, #0
90000910:	bf18      	it	ne
90000912:	2201      	movne	r2, #1
90000914:	f006 bb30 	b.w	90006f78 <HAL_GPIO_WritePin>
}
90000918:	4770      	bx	lr
9000091a:	bf00      	nop
9000091c:	24005ce4 	.word	0x24005ce4
90000920:	58020000 	.word	0x58020000
90000924:	58020400 	.word	0x58020400
90000928:	58021800 	.word	0x58021800

9000092c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:
    switch (id)
9000092c:	2803      	cmp	r0, #3
9000092e:	d813      	bhi.n	90000958 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x2c>
90000930:	e8df f000 	tbb	[pc, r0]
90000934:	02060a0e 	.word	0x02060a0e
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
90000938:	2140      	movs	r1, #64	; 0x40
9000093a:	4808      	ldr	r0, [pc, #32]	; (9000095c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x30>)
9000093c:	f006 bb20 	b.w	90006f80 <HAL_GPIO_TogglePin>
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
90000940:	2140      	movs	r1, #64	; 0x40
90000942:	4807      	ldr	r0, [pc, #28]	; (90000960 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x34>)
90000944:	f006 bb1c 	b.w	90006f80 <HAL_GPIO_TogglePin>
        HAL_GPIO_TogglePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
90000948:	2180      	movs	r1, #128	; 0x80
9000094a:	4805      	ldr	r0, [pc, #20]	; (90000960 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x34>)
9000094c:	f006 bb18 	b.w	90006f80 <HAL_GPIO_TogglePin>
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
90000950:	2108      	movs	r1, #8
90000952:	4804      	ldr	r0, [pc, #16]	; (90000964 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x38>)
90000954:	f006 bb14 	b.w	90006f80 <HAL_GPIO_TogglePin>
}
90000958:	4770      	bx	lr
9000095a:	bf00      	nop
9000095c:	58020000 	.word	0x58020000
90000960:	58020400 	.word	0x58020400
90000964:	58021800 	.word	0x58021800

90000968 <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual DMAType getDMAType()
    {
        return DMA_TYPE_GENERIC;
    }
90000968:	2000      	movs	r0, #0
9000096a:	4770      	bx	lr

9000096c <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
     * @note A screen transition must occur before this takes effect!
     */
    virtual void setDisplayOrientation(DisplayOrientation orientation)
    {
        requestedOrientation = orientation;
        displayOrientationChangeRequested = true;
9000096c:	2301      	movs	r3, #1
        requestedOrientation = orientation;
9000096e:	f880 1078 	strb.w	r1, [r0, #120]	; 0x78
        displayOrientationChangeRequested = true;
90000972:	f880 3079 	strb.w	r3, [r0, #121]	; 0x79
    }
90000976:	4770      	bx	lr

90000978 <_ZN8touchgfx3HAL9sampleKeyERh>:
     */
    virtual bool sampleKey(uint8_t& key)
    {
        (void)key; // Unused variable
        return false;
    }
90000978:	2000      	movs	r0, #0
9000097a:	4770      	bx	lr

9000097c <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
     * @see setFrameBufferStartAddresses
     */
    virtual void setAnimationStorage(void* animationStorage)
    {
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
        USE_ANIMATION_STORAGE = animationStorage != 0;
9000097c:	1e0a      	subs	r2, r1, #0
9000097e:	4b03      	ldr	r3, [pc, #12]	; (9000098c <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x10>)
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
90000980:	6441      	str	r1, [r0, #68]	; 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
90000982:	bf18      	it	ne
90000984:	2201      	movne	r2, #1
90000986:	701a      	strb	r2, [r3, #0]
    }
90000988:	4770      	bx	lr
9000098a:	bf00      	nop
9000098c:	24021c13 	.word	0x24021c13

90000990 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
    {
        return 0;
    }
90000990:	2000      	movs	r0, #0
90000992:	4770      	bx	lr

90000994 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
    {
        if (taskDelayFunc)
90000994:	6b83      	ldr	r3, [r0, #56]	; 0x38
    virtual void taskDelay(uint16_t ms)
90000996:	4608      	mov	r0, r1
        if (taskDelayFunc)
90000998:	b103      	cbz	r3, 9000099c <_ZN8touchgfx3HAL9taskDelayEt+0x8>
        {
            taskDelayFunc(ms);
9000099a:	4718      	bx	r3
        }
    }
9000099c:	4770      	bx	lr
9000099e:	bf00      	nop

900009a0 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
    {
        return 0xFFFFu;
    }
900009a0:	f64f 70ff 	movw	r0, #65535	; 0xffff
900009a4:	4770      	bx	lr
900009a6:	bf00      	nop

900009a8 <_ZN11TouchGFXHALD1Ev>:
 *
 * @brief HAL implementation for TouchGFX.
 *
 * @sa HAL
 */
class TouchGFXHAL : public TouchGFXGeneratedHAL
900009a8:	4770      	bx	lr
900009aa:	bf00      	nop

900009ac <_ZN8touchgfx3HAL15backPorchExitedEv>:
    virtual void backPorchExited()
900009ac:	b510      	push	{r4, lr}
900009ae:	4604      	mov	r4, r0
        swapFrameBuffers();
900009b0:	f011 fb0e 	bl	90011fd0 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
900009b4:	6823      	ldr	r3, [r4, #0]
900009b6:	4620      	mov	r0, r4
900009b8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
    }
900009bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        tick();
900009c0:	4718      	bx	r3
900009c2:	bf00      	nop

900009c4 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
900009c4:	f001 bdde 	b.w	90002584 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>

900009c8 <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
900009c8:	f001 bde2 	b.w	90002590 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>

900009cc <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
900009cc:	b510      	push	{r4, lr}
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
900009ce:	f001 fec7 	bl	90002760 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
900009d2:	4812      	ldr	r0, [pc, #72]	; (90000a1c <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x50>)
900009d4:	2300      	movs	r3, #0
900009d6:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
900009da:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
900009de:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
900009e2:	f643 74e0 	movw	r4, #16352	; 0x3fe0
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
900009e6:	f3c3 3c4e 	ubfx	ip, r3, #13, #15
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
900009ea:	f3c3 0ec9 	ubfx	lr, r3, #3, #10
900009ee:	ea4f 1c4c 	mov.w	ip, ip, lsl #5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
900009f2:	ea0c 0104 	and.w	r1, ip, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
900009f6:	4673      	mov	r3, lr
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
900009f8:	ea41 7283 	orr.w	r2, r1, r3, lsl #30
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
900009fc:	3b01      	subs	r3, #1
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
900009fe:	f8c0 2274 	str.w	r2, [r0, #628]	; 0x274
      } while (ways-- != 0U);
90000a02:	1c5a      	adds	r2, r3, #1
90000a04:	d1f8      	bne.n	900009f8 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x2c>
    } while(sets-- != 0U);
90000a06:	f1ac 0c20 	sub.w	ip, ip, #32
90000a0a:	f11c 0f20 	cmn.w	ip, #32
90000a0e:	d1f0      	bne.n	900009f2 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x26>
90000a10:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
90000a14:	f3bf 8f6f 	isb	sy
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then we need
    // to flush the Dcache to make sure framebuffer is correct in RAM. That's done
    // using SCB_CleanInvalidateDCache().

    SCB_CleanInvalidateDCache();
}
90000a18:	bd10      	pop	{r4, pc}
90000a1a:	bf00      	nop
90000a1c:	e000ed00 	.word	0xe000ed00

90000a20 <_ZN11TouchGFXHAL19configureInterruptsEv>:
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
90000a20:	f001 bd8c 	b.w	9000253c <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>

90000a24 <_ZN11TouchGFXHAL16enableInterruptsEv>:
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
90000a24:	f001 bf9a 	b.w	9000295c <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>

90000a28 <_ZN11TouchGFXHAL17disableInterruptsEv>:
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
90000a28:	f001 bf84 	b.w	90002934 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>

90000a2c <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
90000a2c:	f001 bd90 	b.w	90002550 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>

90000a30 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
90000a30:	b508      	push	{r3, lr}
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
90000a32:	4b09      	ldr	r3, [pc, #36]	; (90000a58 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x28>)
90000a34:	881b      	ldrh	r3, [r3, #0]
90000a36:	428b      	cmp	r3, r1
90000a38:	d808      	bhi.n	90000a4c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x1c>
90000a3a:	4b08      	ldr	r3, [pc, #32]	; (90000a5c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x2c>)
90000a3c:	881b      	ldrh	r3, [r3, #0]
90000a3e:	4293      	cmp	r3, r2
90000a40:	d804      	bhi.n	90000a4c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x1c>
        FRAME_BUFFER_WIDTH = width;
90000a42:	4807      	ldr	r0, [pc, #28]	; (90000a60 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>)
        FRAME_BUFFER_HEIGHT = height;
90000a44:	4b07      	ldr	r3, [pc, #28]	; (90000a64 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x34>)
        FRAME_BUFFER_WIDTH = width;
90000a46:	8001      	strh	r1, [r0, #0]
        FRAME_BUFFER_HEIGHT = height;
90000a48:	801a      	strh	r2, [r3, #0]
    }
90000a4a:	bd08      	pop	{r3, pc}
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
90000a4c:	4b06      	ldr	r3, [pc, #24]	; (90000a68 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x38>)
90000a4e:	219e      	movs	r1, #158	; 0x9e
90000a50:	4a06      	ldr	r2, [pc, #24]	; (90000a6c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x3c>)
90000a52:	4807      	ldr	r0, [pc, #28]	; (90000a70 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x40>)
90000a54:	f022 ff2e 	bl	900238b4 <__assert_func>
90000a58:	24021c08 	.word	0x24021c08
90000a5c:	24021c0a 	.word	0x24021c0a
90000a60:	24021c0e 	.word	0x24021c0e
90000a64:	24021c10 	.word	0x24021c10
90000a68:	90026628 	.word	0x90026628
90000a6c:	9002668c 	.word	0x9002668c
90000a70:	900266d0 	.word	0x900266d0

90000a74 <_ZN20TouchGFXGeneratedHAL17unlockFrameBufferEv>:
     * @brief Unlocks the framebuffer.
     *
     * This specialization is marks DMA2D as un-reserved by the framwork.
     * @see HAL::unlockFrameBuffer
     */
    virtual void unlockFrameBuffer()
90000a74:	b510      	push	{r4, lr}
90000a76:	4604      	mov	r4, r0
    {
        HAL::unlockFrameBuffer();
90000a78:	f010 fe26 	bl	900116c8 <_ZN8touchgfx3HAL17unlockFrameBufferEv>
        dma.start();
90000a7c:	6860      	ldr	r0, [r4, #4]
90000a7e:	6803      	ldr	r3, [r0, #0]
    }
90000a80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        dma.start();
90000a84:	691b      	ldr	r3, [r3, #16]
90000a86:	4718      	bx	r3

90000a88 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
        HAL::flushFrameBuffer();
90000a88:	f010 bcf4 	b.w	90011474 <_ZN8touchgfx3HAL16flushFrameBufferEv>

90000a8c <_ZN11TouchGFXHALD0Ev>:
90000a8c:	b510      	push	{r4, lr}
90000a8e:	4604      	mov	r4, r0
90000a90:	2188      	movs	r1, #136	; 0x88
90000a92:	f022 fee0 	bl	90023856 <_ZdlPvj>
90000a96:	4620      	mov	r0, r4
90000a98:	bd10      	pop	{r4, pc}
90000a9a:	bf00      	nop

90000a9c <_ZN8touchgfx3HAL11getBlitCapsEv>:
        if (useDMAAcceleration)
90000a9c:	f890 307a 	ldrb.w	r3, [r0, #122]	; 0x7a
90000aa0:	b11b      	cbz	r3, 90000aaa <_ZN8touchgfx3HAL11getBlitCapsEv+0xe>
            return dma.getBlitCaps();
90000aa2:	6840      	ldr	r0, [r0, #4]
90000aa4:	6803      	ldr	r3, [r0, #0]
90000aa6:	681b      	ldr	r3, [r3, #0]
90000aa8:	4718      	bx	r3
    }
90000aaa:	4618      	mov	r0, r3
90000aac:	4770      	bx	lr
90000aae:	bf00      	nop

90000ab0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
    {
        if (requestedOrientation != nativeDisplayOrientation)
90000ab0:	f890 2078 	ldrb.w	r2, [r0, #120]	; 0x78
90000ab4:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
90000ab8:	429a      	cmp	r2, r3
        {
            if (DISPLAY_ROTATION == rotate0)
90000aba:	4b0b      	ldr	r3, [pc, #44]	; (90000ae8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x38>)
90000abc:	781a      	ldrb	r2, [r3, #0]
        if (requestedOrientation != nativeDisplayOrientation)
90000abe:	d00b      	beq.n	90000ad8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x28>
            if (DISPLAY_ROTATION == rotate0)
90000ac0:	b94a      	cbnz	r2, 90000ad6 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x26>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
90000ac2:	4a0a      	ldr	r2, [pc, #40]	; (90000aec <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>)
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
                DISPLAY_WIDTH = tmp;
                DISPLAY_ROTATION = rotate90;
90000ac4:	f04f 0c01 	mov.w	ip, #1
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
90000ac8:	4909      	ldr	r1, [pc, #36]	; (90000af0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
            }
        }
        else if (DISPLAY_ROTATION != rotate0)
        {
            const uint16_t tmp = DISPLAY_HEIGHT;
90000aca:	8810      	ldrh	r0, [r2, #0]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_WIDTH = tmp;
            DISPLAY_ROTATION = rotate0;
90000acc:	f883 c000 	strb.w	ip, [r3]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
90000ad0:	880b      	ldrh	r3, [r1, #0]
            DISPLAY_WIDTH = tmp;
90000ad2:	8008      	strh	r0, [r1, #0]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
90000ad4:	8013      	strh	r3, [r2, #0]
        }
    }
90000ad6:	4770      	bx	lr
        else if (DISPLAY_ROTATION != rotate0)
90000ad8:	2a00      	cmp	r2, #0
90000ada:	d0fc      	beq.n	90000ad6 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x26>
            const uint16_t tmp = DISPLAY_HEIGHT;
90000adc:	4a03      	ldr	r2, [pc, #12]	; (90000aec <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>)
            DISPLAY_ROTATION = rotate0;
90000ade:	f04f 0c00 	mov.w	ip, #0
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
90000ae2:	4903      	ldr	r1, [pc, #12]	; (90000af0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
90000ae4:	e7f1      	b.n	90000aca <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x1a>
90000ae6:	bf00      	nop
90000ae8:	24021c0c 	.word	0x24021c0c
90000aec:	24021c0a 	.word	0x24021c0a
90000af0:	24021c08 	.word	0x24021c08

90000af4 <_ZN8touchgfx3HAL10getDMATypeEv>:
        return dma.getDMAType();
90000af4:	6840      	ldr	r0, [r0, #4]
90000af6:	4a04      	ldr	r2, [pc, #16]	; (90000b08 <_ZN8touchgfx3HAL10getDMATypeEv+0x14>)
90000af8:	6803      	ldr	r3, [r0, #0]
90000afa:	699b      	ldr	r3, [r3, #24]
90000afc:	4293      	cmp	r3, r2
90000afe:	d101      	bne.n	90000b04 <_ZN8touchgfx3HAL10getDMATypeEv+0x10>
    }
90000b00:	2000      	movs	r0, #0
90000b02:	4770      	bx	lr
        return dma.getDMAType();
90000b04:	4718      	bx	r3
90000b06:	bf00      	nop
90000b08:	90000969 	.word	0x90000969

90000b0c <_ZN11TouchGFXHAL10initializeEv>:
{
90000b0c:	b538      	push	{r3, r4, r5, lr}
90000b0e:	4604      	mov	r4, r0
    TouchGFXGeneratedHAL::initialize();
90000b10:	f001 ff2e 	bl	90002970 <_ZN20TouchGFXGeneratedHAL10initializeEv>
    setAnimationStorage((void*)animationBuffer);    // Add animation storage
90000b14:	4a0b      	ldr	r2, [pc, #44]	; (90000b44 <_ZN11TouchGFXHAL10initializeEv+0x38>)
90000b16:	6823      	ldr	r3, [r4, #0]
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
90000b18:	490b      	ldr	r1, [pc, #44]	; (90000b48 <_ZN11TouchGFXHAL10initializeEv+0x3c>)
90000b1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
90000b1e:	4293      	cmp	r3, r2
90000b20:	d10d      	bne.n	90000b3e <_ZN11TouchGFXHAL10initializeEv+0x32>
        USE_ANIMATION_STORAGE = animationStorage != 0;
90000b22:	4b0a      	ldr	r3, [pc, #40]	; (90000b4c <_ZN11TouchGFXHAL10initializeEv+0x40>)
90000b24:	2201      	movs	r2, #1
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
90000b26:	6461      	str	r1, [r4, #68]	; 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
90000b28:	701a      	strb	r2, [r3, #0]
    instrumentation.init();
90000b2a:	f104 057c 	add.w	r5, r4, #124	; 0x7c
90000b2e:	4628      	mov	r0, r5
90000b30:	f7ff fde6 	bl	90000700 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv>
        updateMCULoad = enabled;
90000b34:	2301      	movs	r3, #1
        mcuInstrumentation = mcuInstr;
90000b36:	6125      	str	r5, [r4, #16]
        updateMCULoad = enabled;
90000b38:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
}
90000b3c:	bd38      	pop	{r3, r4, r5, pc}
    setAnimationStorage((void*)animationBuffer);    // Add animation storage
90000b3e:	4620      	mov	r0, r4
90000b40:	4798      	blx	r3
90000b42:	e7f2      	b.n	90000b2a <_ZN11TouchGFXHAL10initializeEv+0x1e>
90000b44:	9000097d 	.word	0x9000097d
90000b48:	d0000000 	.word	0xd0000000
90000b4c:	24021c13 	.word	0x24021c13

90000b50 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
        assert(frameBuffer != 0 && "A framebuffer address must be set");
90000b50:	b1a9      	cbz	r1, 90000b7e <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x2e>
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
90000b52:	6402      	str	r2, [r0, #64]	; 0x40
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
90000b54:	3a00      	subs	r2, #0
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
90000b56:	63c1      	str	r1, [r0, #60]	; 0x3c
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
90000b58:	bf18      	it	ne
90000b5a:	2201      	movne	r2, #1
90000b5c:	490c      	ldr	r1, [pc, #48]	; (90000b90 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x40>)
90000b5e:	700a      	strb	r2, [r1, #0]
        setAnimationStorage(animationStorage);
90000b60:	6802      	ldr	r2, [r0, #0]
90000b62:	490c      	ldr	r1, [pc, #48]	; (90000b94 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x44>)
90000b64:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
90000b68:	428a      	cmp	r2, r1
90000b6a:	d106      	bne.n	90000b7a <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x2a>
        USE_ANIMATION_STORAGE = animationStorage != 0;
90000b6c:	1e19      	subs	r1, r3, #0
90000b6e:	4a0a      	ldr	r2, [pc, #40]	; (90000b98 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x48>)
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
90000b70:	6443      	str	r3, [r0, #68]	; 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
90000b72:	bf18      	it	ne
90000b74:	2101      	movne	r1, #1
90000b76:	7011      	strb	r1, [r2, #0]
90000b78:	4770      	bx	lr
        setAnimationStorage(animationStorage);
90000b7a:	4619      	mov	r1, r3
90000b7c:	4710      	bx	r2
        assert(frameBuffer != 0 && "A framebuffer address must be set");
90000b7e:	4b07      	ldr	r3, [pc, #28]	; (90000b9c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x4c>)
90000b80:	f240 21d2 	movw	r1, #722	; 0x2d2
90000b84:	4a06      	ldr	r2, [pc, #24]	; (90000ba0 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x50>)
90000b86:	4807      	ldr	r0, [pc, #28]	; (90000ba4 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x54>)
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
90000b88:	b510      	push	{r4, lr}
        assert(frameBuffer != 0 && "A framebuffer address must be set");
90000b8a:	f022 fe93 	bl	900238b4 <__assert_func>
90000b8e:	bf00      	nop
90000b90:	24021c12 	.word	0x24021c12
90000b94:	9000097d 	.word	0x9000097d
90000b98:	24021c13 	.word	0x24021c13
90000b9c:	90026718 	.word	0x90026718
90000ba0:	90026750 	.word	0x90026750
90000ba4:	900266d0 	.word	0x900266d0

90000ba8 <_ZN11TouchGFXHAL9taskEntryEv>:
{
90000ba8:	b508      	push	{r3, lr}
    enableLCDControllerInterrupt();
90000baa:	6803      	ldr	r3, [r0, #0]
{
90000bac:	4604      	mov	r4, r0
90000bae:	4d17      	ldr	r5, [pc, #92]	; (90000c0c <_ZN11TouchGFXHAL9taskEntryEv+0x64>)
    enableLCDControllerInterrupt();
90000bb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
90000bb4:	4798      	blx	r3
    enableInterrupts();
90000bb6:	6823      	ldr	r3, [r4, #0]
90000bb8:	4620      	mov	r0, r4
90000bba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
90000bbc:	4798      	blx	r3
    OSWrappers::waitForVSync();
90000bbe:	f000 ffef 	bl	90001ba0 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
    backPorchExited();
90000bc2:	6823      	ldr	r3, [r4, #0]
90000bc4:	4620      	mov	r0, r4
90000bc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90000bc8:	4798      	blx	r3
    HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_SET);
90000bca:	2201      	movs	r2, #1
90000bcc:	2104      	movs	r1, #4
90000bce:	4810      	ldr	r0, [pc, #64]	; (90000c10 <_ZN11TouchGFXHAL9taskEntryEv+0x68>)
90000bd0:	f006 f9d2 	bl	90006f78 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_DE_GPIO_Port, LCD_DE_Pin, GPIO_PIN_SET);
90000bd4:	2201      	movs	r2, #1
90000bd6:	2180      	movs	r1, #128	; 0x80
90000bd8:	480e      	ldr	r0, [pc, #56]	; (90000c14 <_ZN11TouchGFXHAL9taskEntryEv+0x6c>)
90000bda:	f006 f9cd 	bl	90006f78 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
90000bde:	2201      	movs	r2, #1
90000be0:	480d      	ldr	r0, [pc, #52]	; (90000c18 <_ZN11TouchGFXHAL9taskEntryEv+0x70>)
90000be2:	4611      	mov	r1, r2
90000be4:	f006 f9c8 	bl	90006f78 <HAL_GPIO_WritePin>
        OSWrappers::waitForVSync();
90000be8:	f000 ffda 	bl	90001ba0 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
        backPorchExited();
90000bec:	6823      	ldr	r3, [r4, #0]
        swapFrameBuffers();
90000bee:	4620      	mov	r0, r4
90000bf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90000bf2:	42ab      	cmp	r3, r5
90000bf4:	d107      	bne.n	90000c06 <_ZN11TouchGFXHAL9taskEntryEv+0x5e>
90000bf6:	f011 f9eb 	bl	90011fd0 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
90000bfa:	6823      	ldr	r3, [r4, #0]
90000bfc:	4620      	mov	r0, r4
90000bfe:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
90000c02:	4798      	blx	r3
    }
90000c04:	e7f0      	b.n	90000be8 <_ZN11TouchGFXHAL9taskEntryEv+0x40>
90000c06:	4798      	blx	r3
90000c08:	e7ee      	b.n	90000be8 <_ZN11TouchGFXHAL9taskEntryEv+0x40>
90000c0a:	bf00      	nop
90000c0c:	900009ad 	.word	0x900009ad
90000c10:	58020000 	.word	0x58020000
90000c14:	58020c00 	.word	0x58020c00
90000c18:	58022800 	.word	0x58022800

90000c1c <IdleTaskHook>:
}

extern "C"
{
    portBASE_TYPE IdleTaskHook(void* p)
    {
90000c1c:	b508      	push	{r3, lr}
        return instance;
90000c1e:	4b07      	ldr	r3, [pc, #28]	; (90000c3c <IdleTaskHook+0x20>)
        if ((int)p) //idle task sched out
90000c20:	b128      	cbz	r0, 90000c2e <IdleTaskHook+0x12>
        {
            touchgfx::HAL::getInstance()->setMCUActive(true);
90000c22:	6818      	ldr	r0, [r3, #0]
90000c24:	2101      	movs	r1, #1
90000c26:	f011 f9ed 	bl	90012004 <_ZN8touchgfx3HAL12setMCUActiveEb>
        else //idle task sched in
        {
            touchgfx::HAL::getInstance()->setMCUActive(false);
        }
        return pdTRUE;
    }
90000c2a:	2001      	movs	r0, #1
90000c2c:	bd08      	pop	{r3, pc}
            touchgfx::HAL::getInstance()->setMCUActive(false);
90000c2e:	4601      	mov	r1, r0
90000c30:	6818      	ldr	r0, [r3, #0]
90000c32:	f011 f9e7 	bl	90012004 <_ZN8touchgfx3HAL12setMCUActiveEb>
    }
90000c36:	2001      	movs	r0, #1
90000c38:	bd08      	pop	{r3, pc}
90000c3a:	bf00      	nop
90000c3c:	24021c14 	.word	0x24021c14

90000c40 <_ZNK20HardwareMJPEGDecoder21getCurrentFrameNumberEv>:
    virtual bool decodeThumbnail(uint32_t frameno, uint8_t* buffer, uint16_t width, uint16_t height);
    virtual void gotoFrame(uint32_t frameno);
    virtual uint32_t getCurrentFrameNumber() const
    {
        return frameNumber;
    }
90000c40:	6940      	ldr	r0, [r0, #20]
90000c42:	4770      	bx	lr

90000c44 <_ZN20HardwareMJPEGDecoder12getLastErrorEv>:
    }

    virtual AVIErrors getLastError()
    {
        return lastError;
    }
90000c44:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
90000c48:	4770      	bx	lr
90000c4a:	bf00      	nop

90000c4c <_ZN20HardwareMJPEGDecoder8hasVideoEv>:
    readVideoHeader();
}

bool HardwareMJPEGDecoder::hasVideo()
{
    return (reader != 0) || (movieData != 0);
90000c4c:	6b03      	ldr	r3, [r0, #48]	; 0x30
90000c4e:	b10b      	cbz	r3, 90000c54 <_ZN20HardwareMJPEGDecoder8hasVideoEv+0x8>
90000c50:	2001      	movs	r0, #1
}
90000c52:	4770      	bx	lr
    return (reader != 0) || (movieData != 0);
90000c54:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
90000c56:	3800      	subs	r0, #0
90000c58:	bf18      	it	ne
90000c5a:	2001      	movne	r0, #1
90000c5c:	4770      	bx	lr
90000c5e:	bf00      	nop

90000c60 <_ZN20HardwareMJPEGDecoder17getNumberOfFramesEv>:
}

uint32_t HardwareMJPEGDecoder::getNumberOfFrames()
{
    return videoInfo.number_of_frames;
}
90000c60:	6880      	ldr	r0, [r0, #8]
90000c62:	4770      	bx	lr

90000c64 <_ZN20HardwareMJPEGDecoder14setRepeatVideoEb>:

void HardwareMJPEGDecoder::setRepeatVideo(bool repeat)
{

}
90000c64:	4770      	bx	lr
90000c66:	bf00      	nop

90000c68 <_ZN20HardwareMJPEGDecoder12getVideoInfoEPN8touchgfx16VideoInformationE>:

void HardwareMJPEGDecoder::getVideoInfo(touchgfx::VideoInformation* data)
{
    *data = videoInfo;
90000c68:	3004      	adds	r0, #4
{
90000c6a:	468c      	mov	ip, r1
    *data = videoInfo;
90000c6c:	c80f      	ldmia	r0, {r0, r1, r2, r3}
90000c6e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
}
90000c72:	4770      	bx	lr

90000c74 <_ZN20HardwareMJPEGDecoderD1Ev>:
class HardwareMJPEGDecoder : public MJPEGDecoder
90000c74:	4770      	bx	lr
90000c76:	bf00      	nop

90000c78 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt>:
{
90000c78:	b508      	push	{r3, lr}
    assert(0);
90000c7a:	4a03      	ldr	r2, [pc, #12]	; (90000c88 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x10>)
90000c7c:	f44f 71de 	mov.w	r1, #444	; 0x1bc
90000c80:	4b02      	ldr	r3, [pc, #8]	; (90000c8c <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x14>)
90000c82:	4803      	ldr	r0, [pc, #12]	; (90000c90 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x18>)
90000c84:	f022 fe16 	bl	900238b4 <__assert_func>
90000c88:	9002687c 	.word	0x9002687c
90000c8c:	90026878 	.word	0x90026878
90000c90:	900268d8 	.word	0x900268d8

90000c94 <_ZN20HardwareMJPEGDecoderD0Ev>:
90000c94:	b510      	push	{r4, lr}
90000c96:	4604      	mov	r4, r0
90000c98:	2148      	movs	r1, #72	; 0x48
90000c9a:	f022 fddc 	bl	90023856 <_ZdlPvj>
90000c9e:	4620      	mov	r0, r4
90000ca0:	bd10      	pop	{r4, pc}
90000ca2:	bf00      	nop
90000ca4:	0000      	movs	r0, r0
	...

90000ca8 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0>:
void HardwareMJPEGDecoder::decodeMJPEGFrame(const uint8_t* const mjpgdata, const uint32_t length, uint8_t* outputBuffer, uint16_t bufferWidth, uint16_t bufferHeight, uint32_t bufferStride)
90000ca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        JPEG_ConvertorParams.bytes_pr_pixel = 2;
90000cac:	4c4a      	ldr	r4, [pc, #296]	; (90000dd8 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x130>)
void HardwareMJPEGDecoder::decodeMJPEGFrame(const uint8_t* const mjpgdata, const uint32_t length, uint8_t* outputBuffer, uint16_t bufferWidth, uint16_t bufferHeight, uint32_t bufferStride)
90000cae:	4683      	mov	fp, r0
90000cb0:	461d      	mov	r5, r3
        JPEG_ConvertorParams.WidthExtend = videoInfo.frame_width;
90000cb2:	68c0      	ldr	r0, [r0, #12]
        JPEG_ConvertorParams.bytes_pr_pixel = 2;
90000cb4:	2302      	movs	r3, #2
void HardwareMJPEGDecoder::decodeMJPEGFrame(const uint8_t* const mjpgdata, const uint32_t length, uint8_t* outputBuffer, uint16_t bufferWidth, uint16_t bufferHeight, uint32_t bufferStride)
90000cb6:	b083      	sub	sp, #12
      * @retval None
      */
    uint32_t JPEG_Decode_DMA(JPEG_HandleTypeDef* hjpeg, uint8_t* input, uint32_t chunkSizeIn /* length */, uint8_t* output)
    {
        FrameBufferAddress = output;
        JPEG_output_is_paused = 0;
90000cb8:	4f48      	ldr	r7, [pc, #288]	; (90000ddc <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x134>)
        JPEG_ConvertorParams.ScaledWidth = 480 * JPEG_ConvertorParams.bytes_pr_pixel;
90000cba:	f44f 7c70 	mov.w	ip, #960	; 0x3c0
        JPEG_ConvertorParams.bytes_pr_pixel = 2;
90000cbe:	6123      	str	r3, [r4, #16]
        if ((JPEG_ConvertorParams.WidthExtend % 16) != 0)
90000cc0:	0703      	lsls	r3, r0, #28
        JPEG_OUT_Read_BufferIndex = 0;
90000cc2:	4b47      	ldr	r3, [pc, #284]	; (90000de0 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x138>)
            JPEG_ConvertorParams.WidthExtend += 16 - (JPEG_ConvertorParams.WidthExtend % 16);
90000cc4:	bf18      	it	ne
90000cc6:	f020 000f 	bicne.w	r0, r0, #15
        JPEG_OUT_Write_BufferIndex = 0;
90000cca:	f8df a140 	ldr.w	sl, [pc, #320]	; 90000e0c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x164>
        MCU_BlockIndex = 0;

        /* Init buffers */
        for (uint32_t i = 0; i < NB_OUTPUT_DATA_BUFFERS; ++i)
        {
            Jpeg_OUT_BufferTab[i].State = JPEG_BUFFER_EMPTY;
90000cce:	4e45      	ldr	r6, [pc, #276]	; (90000de4 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x13c>)
            JPEG_ConvertorParams.WidthExtend += 16 - (JPEG_ConvertorParams.WidthExtend % 16);
90000cd0:	bf18      	it	ne
90000cd2:	3010      	addne	r0, #16
        DMA2D_reference = dma;
90000cd4:	f8df 8138 	ldr.w	r8, [pc, #312]	; 90000e10 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x168>
90000cd8:	f8df 9138 	ldr.w	r9, [pc, #312]	; 90000e14 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x16c>
            JPEG_ConvertorParams.WidthExtend += 16 - (JPEG_ConvertorParams.WidthExtend % 16);
90000cdc:	6020      	str	r0, [r4, #0]
        JPEG_ConvertorParams.MCU_pr_line = JPEG_ConvertorParams.WidthExtend / MCU_WIDTH_PIXELS;
90000cde:	0900      	lsrs	r0, r0, #4
90000ce0:	60e0      	str	r0, [r4, #12]
            Jpeg_OUT_BufferTab[i].DataBufferSize = 0;
            Jpeg_OUT_BufferTab[i].MCU_index = 0;
        }

        /* Do not return from this function until done with decoding all chunks. */
        HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
90000ce2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
90000ce6:	01c0      	lsls	r0, r0, #7
90000ce8:	9000      	str	r0, [sp, #0]
        JPEG_output_is_paused = 0;
90000cea:	2000      	movs	r0, #0
        JPEG_ConvertorParams.ScaledWidth = 480 * JPEG_ConvertorParams.bytes_pr_pixel;
90000cec:	f8c4 c004 	str.w	ip, [r4, #4]
        JPEG_output_is_paused = 0;
90000cf0:	6038      	str	r0, [r7, #0]
        JPEG_OUT_Read_BufferIndex = 0;
90000cf2:	6018      	str	r0, [r3, #0]
        MCU_BlockIndex = 0;
90000cf4:	4b3c      	ldr	r3, [pc, #240]	; (90000de8 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x140>)
        JPEG_OUT_Write_BufferIndex = 0;
90000cf6:	f8ca 0000 	str.w	r0, [sl]
        MCU_BlockIndex = 0;
90000cfa:	6018      	str	r0, [r3, #0]
        JPEG_ConvertorParams.LastLineHeight = 16 - (videoInfo.frame_height % MCU_HEIGHT_PIXELS);
90000cfc:	f8db 3010 	ldr.w	r3, [fp, #16]
            Jpeg_OUT_BufferTab[i].State = JPEG_BUFFER_EMPTY;
90000d00:	7030      	strb	r0, [r6, #0]
        JPEG_ConvertorParams.LastLineHeight = 16 - (videoInfo.frame_height % MCU_HEIGHT_PIXELS);
90000d02:	f003 030f 	and.w	r3, r3, #15
            Jpeg_OUT_BufferTab[i].State = JPEG_BUFFER_EMPTY;
90000d06:	7430      	strb	r0, [r6, #16]
        JPEG_ConvertorParams.LastLineHeight = 16 - (videoInfo.frame_height % MCU_HEIGHT_PIXELS);
90000d08:	f1c3 0310 	rsb	r3, r3, #16
90000d0c:	60a3      	str	r3, [r4, #8]
        FrameBufferAddress = output;
90000d0e:	4c37      	ldr	r4, [pc, #220]	; (90000dec <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x144>)
        HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
90000d10:	f8da 3000 	ldr.w	r3, [sl]
        FrameBufferAddress = output;
90000d14:	6025      	str	r5, [r4, #0]
        JPEG_InputImageIndex = 0;
90000d16:	4c36      	ldr	r4, [pc, #216]	; (90000df0 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x148>)
        HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
90000d18:	eb06 1303 	add.w	r3, r6, r3, lsl #4
90000d1c:	4d35      	ldr	r5, [pc, #212]	; (90000df4 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x14c>)
        JPEG_InputImageIndex = 0;
90000d1e:	6020      	str	r0, [r4, #0]
        JPEG_InputImageAddress = (uint32_t)input;
90000d20:	4835      	ldr	r0, [pc, #212]	; (90000df8 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x150>)
        HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
90000d22:	685b      	ldr	r3, [r3, #4]
        JPEG_InputImageAddress = (uint32_t)input;
90000d24:	6001      	str	r1, [r0, #0]
        JPEG_InputImageSize_Bytes = chunkSizeIn;
90000d26:	4835      	ldr	r0, [pc, #212]	; (90000dfc <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x154>)
90000d28:	4c35      	ldr	r4, [pc, #212]	; (90000e00 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x158>)
90000d2a:	6002      	str	r2, [r0, #0]
        HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
90000d2c:	f44f 4250 	mov.w	r2, #53248	; 0xd000
90000d30:	4834      	ldr	r0, [pc, #208]	; (90000e04 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x15c>)
            Jpeg_OUT_BufferTab[i].DataBufferSize = 0;
90000d32:	ed9f 7b27 	vldr	d7, [pc, #156]	; 90000dd0 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x128>
90000d36:	ed86 7b02 	vstr	d7, [r6, #8]
90000d3a:	ed86 7b06 	vstr	d7, [r6, #24]
        HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
90000d3e:	f007 fdab 	bl	90008898 <HAL_JPEG_Decode_DMA>
        DMA2D_reference = dma;
90000d42:	f8db 3044 	ldr.w	r3, [fp, #68]	; 0x44
90000d46:	f8c8 3000 	str.w	r3, [r8]
  * @retval 1 : if JPEG processing has finished, 0 : if JPEG processing still ongoing
  */
uint32_t JPEG_OutputHandler(JPEG_HandleTypeDef* hjpeg)
{
    /* Decode frame complete */
    if (Jpeg_HWDecodingEnd && DMA2D_CopyBufferEnd)
90000d4a:	682b      	ldr	r3, [r5, #0]
90000d4c:	b113      	cbz	r3, 90000d54 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xac>
90000d4e:	f8d9 3000 	ldr.w	r3, [r9]
90000d52:	bb63      	cbnz	r3, 90000dae <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x106>
    {
        return 1;
    }

    /* Try to start DMA2D video transfer if next buffer if full */
    if (!DMA2D_reference->isDMARunning() && (Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL) && (DMA2D_CopyBufferEnd == 0))
90000d54:	f8d8 0000 	ldr.w	r0, [r8]
90000d58:	7a03      	ldrb	r3, [r0, #8]
90000d5a:	b92b      	cbnz	r3, 90000d68 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xc0>
90000d5c:	4b20      	ldr	r3, [pc, #128]	; (90000de0 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x138>)
90000d5e:	681b      	ldr	r3, [r3, #0]
90000d60:	011b      	lsls	r3, r3, #4
90000d62:	5cf3      	ldrb	r3, [r6, r3]
90000d64:	2b01      	cmp	r3, #1
90000d66:	d024      	beq.n	90000db2 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x10a>
    {
        DMA2D_reference->start();
    }

    /* Start JPEG IP if paused and next buffer is empty */
    if ((JPEG_output_is_paused == 1) && (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State == JPEG_BUFFER_EMPTY) && (Jpeg_HWDecodingEnd == 0))
90000d68:	683b      	ldr	r3, [r7, #0]
90000d6a:	2b01      	cmp	r3, #1
90000d6c:	d106      	bne.n	90000d7c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xd4>
90000d6e:	f8da 3000 	ldr.w	r3, [sl]
90000d72:	011b      	lsls	r3, r3, #4
90000d74:	5cf3      	ldrb	r3, [r6, r3]
90000d76:	b90b      	cbnz	r3, 90000d7c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xd4>
90000d78:	682b      	ldr	r3, [r5, #0]
90000d7a:	b313      	cbz	r3, 90000dc2 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x11a>
    {
        JPEG_output_is_paused = 0;
        HAL_JPEG_Resume(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
    }

    return 2;
90000d7c:	2302      	movs	r3, #2
            JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
90000d7e:	6023      	str	r3, [r4, #0]
            if (JpegProcessing_End == 2)
90000d80:	6823      	ldr	r3, [r4, #0]
90000d82:	2b02      	cmp	r3, #2
90000d84:	d009      	beq.n	90000d9a <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xf2>
        } while (JpegProcessing_End != 1);
90000d86:	6823      	ldr	r3, [r4, #0]
90000d88:	2b01      	cmp	r3, #1
90000d8a:	d1de      	bne.n	90000d4a <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xa2>
        Jpeg_HWDecodingEnd = 0;
90000d8c:	2300      	movs	r3, #0
90000d8e:	602b      	str	r3, [r5, #0]
        DMA2D_CopyBufferEnd = 0;
90000d90:	f8c9 3000 	str.w	r3, [r9]
}
90000d94:	b003      	add	sp, #12
90000d96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                SEM_WAIT(semDecodingDone);
90000d9a:	4b1b      	ldr	r3, [pc, #108]	; (90000e08 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x160>)
90000d9c:	f04f 31ff 	mov.w	r1, #4294967295
90000da0:	6818      	ldr	r0, [r3, #0]
90000da2:	f00c ff77 	bl	9000dc94 <osSemaphoreAcquire>
        } while (JpegProcessing_End != 1);
90000da6:	6823      	ldr	r3, [r4, #0]
90000da8:	2b01      	cmp	r3, #1
90000daa:	d1ce      	bne.n	90000d4a <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xa2>
90000dac:	e7ee      	b.n	90000d8c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xe4>
        return 1;
90000dae:	2301      	movs	r3, #1
90000db0:	e7e5      	b.n	90000d7e <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xd6>
    if (!DMA2D_reference->isDMARunning() && (Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL) && (DMA2D_CopyBufferEnd == 0))
90000db2:	f8d9 3000 	ldr.w	r3, [r9]
90000db6:	2b00      	cmp	r3, #0
90000db8:	d1d6      	bne.n	90000d68 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xc0>
        DMA2D_reference->start();
90000dba:	6803      	ldr	r3, [r0, #0]
90000dbc:	691b      	ldr	r3, [r3, #16]
90000dbe:	4798      	blx	r3
90000dc0:	e7d2      	b.n	90000d68 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xc0>
        HAL_JPEG_Resume(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
90000dc2:	2102      	movs	r1, #2
90000dc4:	480f      	ldr	r0, [pc, #60]	; (90000e04 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x15c>)
        JPEG_output_is_paused = 0;
90000dc6:	603b      	str	r3, [r7, #0]
        HAL_JPEG_Resume(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
90000dc8:	f007 feae 	bl	90008b28 <HAL_JPEG_Resume>
90000dcc:	2302      	movs	r3, #2
90000dce:	e7d6      	b.n	90000d7e <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xd6>
	...
90000dd8:	24005d00 	.word	0x24005d00
90000ddc:	24005d2c 	.word	0x24005d2c
90000de0:	24005cf8 	.word	0x24005cf8
90000de4:	24000008 	.word	0x24000008
90000de8:	24005cfc 	.word	0x24005cfc
90000dec:	24005d1c 	.word	0x24005d1c
90000df0:	24005d28 	.word	0x24005d28
90000df4:	24005d24 	.word	0x24005d24
90000df8:	24005d30 	.word	0x24005d30
90000dfc:	24005d34 	.word	0x24005d34
90000e00:	24005d20 	.word	0x24005d20
90000e04:	24007050 	.word	0x24007050
90000e08:	24005d3c 	.word	0x24005d3c
90000e0c:	24005d38 	.word	0x24005d38
90000e10:	24005d18 	.word	0x24005d18
90000e14:	24005cf4 	.word	0x24005cf4

90000e18 <_ZN20HardwareMJPEGDecoder9gotoFrameEm>:
{
90000e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (frameNumber > getNumberOfFrames())
90000e1a:	6803      	ldr	r3, [r0, #0]
90000e1c:	2901      	cmp	r1, #1
90000e1e:	4e2a      	ldr	r6, [pc, #168]	; (90000ec8 <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0xb0>)
{
90000e20:	4604      	mov	r4, r0
    if (frameNumber > getNumberOfFrames())
90000e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90000e24:	bf38      	it	cc
90000e26:	2101      	movcc	r1, #1
90000e28:	42b3      	cmp	r3, r6
90000e2a:	460d      	mov	r5, r1
90000e2c:	d138      	bne.n	90000ea0 <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x88>
    return videoInfo.number_of_frames;
90000e2e:	6883      	ldr	r3, [r0, #8]
    if (frameNumber > getNumberOfFrames())
90000e30:	4299      	cmp	r1, r3
90000e32:	d82a      	bhi.n	90000e8a <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x72>
    uint32_t offset = indexOffset + 8 + (frameNumber - 1) * 16;
90000e34:	1e6b      	subs	r3, r5, #1
90000e36:	69e2      	ldr	r2, [r4, #28]
    if (reader != 0)
90000e38:	6b20      	ldr	r0, [r4, #48]	; 0x30
    uint32_t offset = indexOffset + 8 + (frameNumber - 1) * 16;
90000e3a:	eb02 1703 	add.w	r7, r2, r3, lsl #4
    if (reader != 0)
90000e3e:	b350      	cbz	r0, 90000e96 <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x7e>
        if (length > aviBufferLength)
90000e40:	6ba3      	ldr	r3, [r4, #56]	; 0x38
90000e42:	2b0f      	cmp	r3, #15
90000e44:	d937      	bls.n	90000eb6 <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x9e>
        reader->seek(offset);
90000e46:	6803      	ldr	r3, [r0, #0]
    uint32_t offset = indexOffset + 8 + (frameNumber - 1) * 16;
90000e48:	f107 0608 	add.w	r6, r7, #8
        reader->seek(offset);
90000e4c:	68db      	ldr	r3, [r3, #12]
90000e4e:	4631      	mov	r1, r6
90000e50:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
90000e52:	6b20      	ldr	r0, [r4, #48]	; 0x30
90000e54:	2210      	movs	r2, #16
90000e56:	6b61      	ldr	r1, [r4, #52]	; 0x34
90000e58:	6803      	ldr	r3, [r0, #0]
90000e5a:	691b      	ldr	r3, [r3, #16]
90000e5c:	4798      	blx	r3
90000e5e:	b1b0      	cbz	r0, 90000e8e <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x76>
    if (reader != 0)
90000e60:	6b23      	ldr	r3, [r4, #48]	; 0x30
        aviBufferStartOffset = offset;
90000e62:	63e6      	str	r6, [r4, #60]	; 0x3c
    if (reader != 0)
90000e64:	b1bb      	cbz	r3, 90000e96 <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x7e>
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8) | (aviBuffer[index + 2] << 16) | (aviBuffer[index + 3] << 24);
90000e66:	6b62      	ldr	r2, [r4, #52]	; 0x34
90000e68:	7a93      	ldrb	r3, [r2, #10]
90000e6a:	7a51      	ldrb	r1, [r2, #9]
90000e6c:	041b      	lsls	r3, r3, #16
90000e6e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
90000e72:	7a11      	ldrb	r1, [r2, #8]
90000e74:	7ad2      	ldrb	r2, [r2, #11]
90000e76:	430b      	orrs	r3, r1
90000e78:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
    currentMovieOffset = getU32(offset + 8) + firstFrameOffset - 4;
90000e7c:	6a22      	ldr	r2, [r4, #32]
    this->frameNumber = frameNumber;
90000e7e:	6165      	str	r5, [r4, #20]
    currentMovieOffset = getU32(offset + 8) + firstFrameOffset - 4;
90000e80:	3a04      	subs	r2, #4
90000e82:	441a      	add	r2, r3
90000e84:	61a2      	str	r2, [r4, #24]
}
90000e86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return videoInfo.number_of_frames;
90000e88:	68a3      	ldr	r3, [r4, #8]
{
90000e8a:	461d      	mov	r5, r3
90000e8c:	e7d2      	b.n	90000e34 <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x1c>
            lastError = AVI_ERROR_EOF_REACHED;
90000e8e:	230d      	movs	r3, #13
90000e90:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
90000e94:	e7e4      	b.n	90000e60 <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x48>
    currentMovieOffset = getU32(offset + 8) + firstFrameOffset - 4;
90000e96:	f107 0310 	add.w	r3, r7, #16
        return d[0] | (d[1] << 8) | (d[2] << 16) | (d[3] << 24);
90000e9a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
90000e9c:	58d3      	ldr	r3, [r2, r3]
90000e9e:	e7ed      	b.n	90000e7c <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x64>
    if (frameNumber > getNumberOfFrames())
90000ea0:	4798      	blx	r3
90000ea2:	4285      	cmp	r5, r0
90000ea4:	d9c6      	bls.n	90000e34 <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x1c>
        frameNumber = getNumberOfFrames();
90000ea6:	6823      	ldr	r3, [r4, #0]
90000ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90000eaa:	42b3      	cmp	r3, r6
90000eac:	d0ec      	beq.n	90000e88 <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x70>
90000eae:	4620      	mov	r0, r4
90000eb0:	4798      	blx	r3
90000eb2:	4605      	mov	r5, r0
90000eb4:	e7be      	b.n	90000e34 <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x1c>
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
90000eb6:	2009      	movs	r0, #9
            assert(!"Buffer to small");
90000eb8:	4b04      	ldr	r3, [pc, #16]	; (90000ecc <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0xb4>)
90000eba:	4a05      	ldr	r2, [pc, #20]	; (90000ed0 <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0xb8>)
90000ebc:	2197      	movs	r1, #151	; 0x97
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
90000ebe:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
            assert(!"Buffer to small");
90000ec2:	4804      	ldr	r0, [pc, #16]	; (90000ed4 <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0xbc>)
90000ec4:	f022 fcf6 	bl	900238b4 <__assert_func>
90000ec8:	90000c61 	.word	0x90000c61
90000ecc:	90026924 	.word	0x90026924
90000ed0:	90026938 	.word	0x90026938
90000ed4:	900268d8 	.word	0x900268d8

90000ed8 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm>:
{
90000ed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90000edc:	4604      	mov	r4, r0
    if (reader != 0)
90000ede:	6b00      	ldr	r0, [r0, #48]	; 0x30
{
90000ee0:	b083      	sub	sp, #12
90000ee2:	4615      	mov	r5, r2
    readData(currentMovieOffset, 8);
90000ee4:	69a6      	ldr	r6, [r4, #24]
    if (reader != 0)
90000ee6:	2800      	cmp	r0, #0
90000ee8:	f000 80ad 	beq.w	90001046 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x16e>
        if (length > aviBufferLength)
90000eec:	6ba3      	ldr	r3, [r4, #56]	; 0x38
90000eee:	2b07      	cmp	r3, #7
90000ef0:	f240 80b0 	bls.w	90001054 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x17c>
        reader->seek(offset);
90000ef4:	6803      	ldr	r3, [r0, #0]
90000ef6:	4631      	mov	r1, r6
90000ef8:	68db      	ldr	r3, [r3, #12]
90000efa:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
90000efc:	6b20      	ldr	r0, [r4, #48]	; 0x30
90000efe:	2208      	movs	r2, #8
90000f00:	6b61      	ldr	r1, [r4, #52]	; 0x34
90000f02:	6803      	ldr	r3, [r0, #0]
90000f04:	691b      	ldr	r3, [r3, #16]
90000f06:	4798      	blx	r3
90000f08:	2800      	cmp	r0, #0
90000f0a:	f000 8091 	beq.w	90001030 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x158>
    const uint32_t length = getU32(currentMovieOffset + 4);
90000f0e:	69a7      	ldr	r7, [r4, #24]
    if (reader != 0)
90000f10:	6b20      	ldr	r0, [r4, #48]	; 0x30
    const uint32_t length = getU32(currentMovieOffset + 4);
90000f12:	1d3a      	adds	r2, r7, #4
        aviBufferStartOffset = offset;
90000f14:	63e6      	str	r6, [r4, #60]	; 0x3c
    if (reader != 0)
90000f16:	2800      	cmp	r0, #0
90000f18:	f000 80a5 	beq.w	90001066 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x18e>
        const uint32_t index = offset - aviBufferStartOffset;
90000f1c:	1b92      	subs	r2, r2, r6
    const uint8_t* mjpgdata = readData(currentMovieOffset + 8, length);
90000f1e:	3708      	adds	r7, #8
        if (length > aviBufferLength)
90000f20:	e9d4 630d 	ldrd	r6, r3, [r4, #52]	; 0x34
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8) | (aviBuffer[index + 2] << 16) | (aviBuffer[index + 3] << 24);
90000f24:	18b1      	adds	r1, r6, r2
90000f26:	5cb2      	ldrb	r2, [r6, r2]
90000f28:	788e      	ldrb	r6, [r1, #2]
90000f2a:	f891 c001 	ldrb.w	ip, [r1, #1]
90000f2e:	0436      	lsls	r6, r6, #16
90000f30:	ea46 260c 	orr.w	r6, r6, ip, lsl #8
90000f34:	4316      	orrs	r6, r2
90000f36:	78ca      	ldrb	r2, [r1, #3]
90000f38:	ea46 6602 	orr.w	r6, r6, r2, lsl #24
        if (length > aviBufferLength)
90000f3c:	42b3      	cmp	r3, r6
90000f3e:	f0c0 8089 	bcc.w	90001054 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x17c>
        reader->seek(offset);
90000f42:	6803      	ldr	r3, [r0, #0]
90000f44:	4639      	mov	r1, r7
90000f46:	68db      	ldr	r3, [r3, #12]
90000f48:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
90000f4a:	6b20      	ldr	r0, [r4, #48]	; 0x30
90000f4c:	4632      	mov	r2, r6
90000f4e:	6b61      	ldr	r1, [r4, #52]	; 0x34
90000f50:	6803      	ldr	r3, [r0, #0]
90000f52:	691b      	ldr	r3, [r3, #16]
90000f54:	4798      	blx	r3
90000f56:	b910      	cbnz	r0, 90000f5e <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x86>
            lastError = AVI_ERROR_EOF_REACHED;
90000f58:	230d      	movs	r3, #13
90000f5a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return aviBuffer;
90000f5e:	6b61      	ldr	r1, [r4, #52]	; 0x34
        aviBufferStartOffset = offset;
90000f60:	63e7      	str	r7, [r4, #60]	; 0x3c
    if (frameBuffer) /* only decode if buffers are assigned. */
90000f62:	2d00      	cmp	r5, #0
90000f64:	d058      	beq.n	90001018 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x140>
        FrameBufferAddress = output;
90000f66:	4b44      	ldr	r3, [pc, #272]	; (90001078 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x1a0>)
        JPEG_output_is_paused = 0;
90000f68:	2200      	movs	r2, #0
90000f6a:	4f44      	ldr	r7, [pc, #272]	; (9000107c <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x1a4>)
        FrameBufferAddress = output;
90000f6c:	601d      	str	r5, [r3, #0]
        HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
90000f6e:	4b44      	ldr	r3, [pc, #272]	; (90001080 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x1a8>)
        JPEG_output_is_paused = 0;
90000f70:	603a      	str	r2, [r7, #0]
        HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
90000f72:	68db      	ldr	r3, [r3, #12]
            Jpeg_OUT_BufferTab[i].State = JPEG_BUFFER_EMPTY;
90000f74:	4d43      	ldr	r5, [pc, #268]	; (90001084 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x1ac>)
        HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
90000f76:	eb03 0343 	add.w	r3, r3, r3, lsl #1
        JPEG_OUT_Write_BufferIndex = 0;
90000f7a:	f8df a134 	ldr.w	sl, [pc, #308]	; 900010b0 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x1d8>
        JPEG_OUT_Read_BufferIndex = 0;
90000f7e:	f8df b134 	ldr.w	fp, [pc, #308]	; 900010b4 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x1dc>
        HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
90000f82:	01db      	lsls	r3, r3, #7
        JPEG_InputImageIndex = 0;
90000f84:	4840      	ldr	r0, [pc, #256]	; (90001088 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x1b0>)
        JPEG_OUT_Read_BufferIndex = 0;
90000f86:	f8cb 2000 	str.w	r2, [fp]
        HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
90000f8a:	9300      	str	r3, [sp, #0]
        MCU_BlockIndex = 0;
90000f8c:	4b3f      	ldr	r3, [pc, #252]	; (9000108c <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x1b4>)
        JPEG_OUT_Write_BufferIndex = 0;
90000f8e:	f8ca 2000 	str.w	r2, [sl]
            Jpeg_OUT_BufferTab[i].State = JPEG_BUFFER_EMPTY;
90000f92:	702a      	strb	r2, [r5, #0]
        MCU_BlockIndex = 0;
90000f94:	601a      	str	r2, [r3, #0]
            Jpeg_OUT_BufferTab[i].State = JPEG_BUFFER_EMPTY;
90000f96:	742a      	strb	r2, [r5, #16]
        HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
90000f98:	f8da 3000 	ldr.w	r3, [sl]
        JPEG_InputImageIndex = 0;
90000f9c:	6002      	str	r2, [r0, #0]
        JPEG_InputImageAddress = (uint32_t)input;
90000f9e:	4a3c      	ldr	r2, [pc, #240]	; (90001090 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x1b8>)
        HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
90000fa0:	eb05 1303 	add.w	r3, r5, r3, lsl #4
90000fa4:	483b      	ldr	r0, [pc, #236]	; (90001094 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x1bc>)
        JPEG_InputImageAddress = (uint32_t)input;
90000fa6:	6011      	str	r1, [r2, #0]
        JPEG_InputImageSize_Bytes = chunkSizeIn;
90000fa8:	4a3b      	ldr	r2, [pc, #236]	; (90001098 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x1c0>)
        HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
90000faa:	685b      	ldr	r3, [r3, #4]
        JPEG_InputImageSize_Bytes = chunkSizeIn;
90000fac:	6016      	str	r6, [r2, #0]
        HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
90000fae:	f44f 4250 	mov.w	r2, #53248	; 0xd000
90000fb2:	4e3a      	ldr	r6, [pc, #232]	; (9000109c <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x1c4>)
90000fb4:	4c3a      	ldr	r4, [pc, #232]	; (900010a0 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x1c8>)
    if (!DMA2D_reference->isDMARunning() && (Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL) && (DMA2D_CopyBufferEnd == 0))
90000fb6:	f8df 8100 	ldr.w	r8, [pc, #256]	; 900010b8 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x1e0>
90000fba:	f8df 9100 	ldr.w	r9, [pc, #256]	; 900010bc <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x1e4>
            Jpeg_OUT_BufferTab[i].DataBufferSize = 0;
90000fbe:	ed9f 7b2c 	vldr	d7, [pc, #176]	; 90001070 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x198>
90000fc2:	ed85 7b02 	vstr	d7, [r5, #8]
90000fc6:	ed85 7b06 	vstr	d7, [r5, #24]
        HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
90000fca:	f007 fc65 	bl	90008898 <HAL_JPEG_Decode_DMA>
        return 0;
90000fce:	e017      	b.n	90001000 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x128>
    if (!DMA2D_reference->isDMARunning() && (Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL) && (DMA2D_CopyBufferEnd == 0))
90000fd0:	f8d8 0000 	ldr.w	r0, [r8]
90000fd4:	7a03      	ldrb	r3, [r0, #8]
90000fd6:	b92b      	cbnz	r3, 90000fe4 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x10c>
90000fd8:	f8db 3000 	ldr.w	r3, [fp]
90000fdc:	011b      	lsls	r3, r3, #4
90000fde:	5ceb      	ldrb	r3, [r5, r3]
90000fe0:	2b01      	cmp	r3, #1
90000fe2:	d01d      	beq.n	90001020 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x148>
    if ((JPEG_output_is_paused == 1) && (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State == JPEG_BUFFER_EMPTY) && (Jpeg_HWDecodingEnd == 0))
90000fe4:	683b      	ldr	r3, [r7, #0]
90000fe6:	2b01      	cmp	r3, #1
90000fe8:	d106      	bne.n	90000ff8 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x120>
90000fea:	f8da 3000 	ldr.w	r3, [sl]
90000fee:	011b      	lsls	r3, r3, #4
90000ff0:	5ceb      	ldrb	r3, [r5, r3]
90000ff2:	b90b      	cbnz	r3, 90000ff8 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x120>
90000ff4:	6833      	ldr	r3, [r6, #0]
90000ff6:	b1fb      	cbz	r3, 90001038 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x160>
    return 2;
90000ff8:	2302      	movs	r3, #2
            JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
90000ffa:	6023      	str	r3, [r4, #0]
        } while (JpegProcessing_End == 0);
90000ffc:	6823      	ldr	r3, [r4, #0]
90000ffe:	b95b      	cbnz	r3, 90001018 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x140>
    if (Jpeg_HWDecodingEnd && DMA2D_CopyBufferEnd)
90001000:	6833      	ldr	r3, [r6, #0]
90001002:	2b00      	cmp	r3, #0
90001004:	d0e4      	beq.n	90000fd0 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0xf8>
90001006:	f8d9 3000 	ldr.w	r3, [r9]
9000100a:	2b00      	cmp	r3, #0
9000100c:	d0e0      	beq.n	90000fd0 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0xf8>
        return 1;
9000100e:	2301      	movs	r3, #1
            JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
90001010:	6023      	str	r3, [r4, #0]
        } while (JpegProcessing_End == 0);
90001012:	6823      	ldr	r3, [r4, #0]
90001014:	2b00      	cmp	r3, #0
90001016:	d0f3      	beq.n	90001000 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x128>
}
90001018:	2001      	movs	r0, #1
9000101a:	b003      	add	sp, #12
9000101c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (!DMA2D_reference->isDMARunning() && (Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL) && (DMA2D_CopyBufferEnd == 0))
90001020:	f8d9 3000 	ldr.w	r3, [r9]
90001024:	2b00      	cmp	r3, #0
90001026:	d1dd      	bne.n	90000fe4 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x10c>
        DMA2D_reference->start();
90001028:	6803      	ldr	r3, [r0, #0]
9000102a:	691b      	ldr	r3, [r3, #16]
9000102c:	4798      	blx	r3
9000102e:	e7d9      	b.n	90000fe4 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x10c>
            lastError = AVI_ERROR_EOF_REACHED;
90001030:	230d      	movs	r3, #13
90001032:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
90001036:	e76a      	b.n	90000f0e <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x36>
        HAL_JPEG_Resume(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
90001038:	2102      	movs	r1, #2
9000103a:	4816      	ldr	r0, [pc, #88]	; (90001094 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x1bc>)
        JPEG_output_is_paused = 0;
9000103c:	603b      	str	r3, [r7, #0]
        HAL_JPEG_Resume(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
9000103e:	f007 fd73 	bl	90008b28 <HAL_JPEG_Resume>
90001042:	2302      	movs	r3, #2
90001044:	e7d9      	b.n	90000ffa <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x122>
    const uint32_t length = getU32(currentMovieOffset + 4);
90001046:	1d32      	adds	r2, r6, #4
    if (reader != 0)
90001048:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    const uint8_t* mjpgdata = readData(currentMovieOffset + 8, length);
9000104a:	f106 0308 	add.w	r3, r6, #8
9000104e:	588e      	ldr	r6, [r1, r2]
    return movieData + offset;
90001050:	4419      	add	r1, r3
90001052:	e786      	b.n	90000f62 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x8a>
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
90001054:	2009      	movs	r0, #9
            assert(!"Buffer to small");
90001056:	4b13      	ldr	r3, [pc, #76]	; (900010a4 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x1cc>)
90001058:	4a13      	ldr	r2, [pc, #76]	; (900010a8 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x1d0>)
9000105a:	2197      	movs	r1, #151	; 0x97
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
9000105c:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
            assert(!"Buffer to small");
90001060:	4812      	ldr	r0, [pc, #72]	; (900010ac <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x1d4>)
90001062:	f022 fc27 	bl	900238b4 <__assert_func>
    const uint32_t length = getU32(currentMovieOffset + 4);
90001066:	463e      	mov	r6, r7
90001068:	e7ee      	b.n	90001048 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x170>
9000106a:	bf00      	nop
9000106c:	f3af 8000 	nop.w
	...
90001078:	24005d1c 	.word	0x24005d1c
9000107c:	24005d2c 	.word	0x24005d2c
90001080:	24005d00 	.word	0x24005d00
90001084:	24000008 	.word	0x24000008
90001088:	24005d28 	.word	0x24005d28
9000108c:	24005cfc 	.word	0x24005cfc
90001090:	24005d30 	.word	0x24005d30
90001094:	24007050 	.word	0x24007050
90001098:	24005d34 	.word	0x24005d34
9000109c:	24005d24 	.word	0x24005d24
900010a0:	24005d20 	.word	0x24005d20
900010a4:	90026924 	.word	0x90026924
900010a8:	90026938 	.word	0x90026938
900010ac:	900268d8 	.word	0x900268d8
900010b0:	24005d38 	.word	0x24005d38
900010b4:	24005cf8 	.word	0x24005cf8
900010b8:	24005d18 	.word	0x24005d18
900010bc:	24005cf4 	.word	0x24005cf4

900010c0 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv>:
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
900010c0:	6943      	ldr	r3, [r0, #20]
{
900010c2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
900010c6:	2b00      	cmp	r3, #0
900010c8:	f000 8098 	beq.w	900011fc <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x13c>
    readData(currentMovieOffset, 8);
900010cc:	4605      	mov	r5, r0
    if (reader != 0)
900010ce:	6b00      	ldr	r0, [r0, #48]	; 0x30
    readData(currentMovieOffset, 8);
900010d0:	69ac      	ldr	r4, [r5, #24]
    if (reader != 0)
900010d2:	2800      	cmp	r0, #0
900010d4:	f000 8082 	beq.w	900011dc <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x11c>
        if (length > aviBufferLength)
900010d8:	6bab      	ldr	r3, [r5, #56]	; 0x38
900010da:	2b07      	cmp	r3, #7
900010dc:	f240 8083 	bls.w	900011e6 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x126>
        reader->seek(offset);
900010e0:	6803      	ldr	r3, [r0, #0]
900010e2:	4621      	mov	r1, r4
900010e4:	68db      	ldr	r3, [r3, #12]
900010e6:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
900010e8:	6b28      	ldr	r0, [r5, #48]	; 0x30
900010ea:	2208      	movs	r2, #8
900010ec:	6b69      	ldr	r1, [r5, #52]	; 0x34
900010ee:	6803      	ldr	r3, [r0, #0]
900010f0:	691b      	ldr	r3, [r3, #16]
900010f2:	4798      	blx	r3
900010f4:	2800      	cmp	r0, #0
900010f6:	d06d      	beq.n	900011d4 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x114>
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
900010f8:	69ab      	ldr	r3, [r5, #24]
    if (reader != 0)
900010fa:	6b28      	ldr	r0, [r5, #48]	; 0x30
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
900010fc:	1d1a      	adds	r2, r3, #4
        aviBufferStartOffset = offset;
900010fe:	63ec      	str	r4, [r5, #60]	; 0x3c
    if (reader != 0)
90001100:	2800      	cmp	r0, #0
90001102:	d06d      	beq.n	900011e0 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x120>
        const uint32_t index = offset - aviBufferStartOffset;
90001104:	1b12      	subs	r2, r2, r4
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8) | (aviBuffer[index + 2] << 16) | (aviBuffer[index + 3] << 24);
90001106:	6b6c      	ldr	r4, [r5, #52]	; 0x34
90001108:	18a1      	adds	r1, r4, r2
9000110a:	5ca2      	ldrb	r2, [r4, r2]
9000110c:	788c      	ldrb	r4, [r1, #2]
9000110e:	784e      	ldrb	r6, [r1, #1]
90001110:	0424      	lsls	r4, r4, #16
90001112:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
90001116:	4314      	orrs	r4, r2
90001118:	78ca      	ldrb	r2, [r1, #3]
9000111a:	ea44 6402 	orr.w	r4, r4, r2, lsl #24
            lastError = AVI_ERROR_EOF_REACHED;
9000111e:	270d      	movs	r7, #13
        if (streamNo == STREAM0 && chunkType == TYPEDC)
90001120:	f243 0630 	movw	r6, #12336	; 0x3030
90001124:	e039      	b.n	9000119a <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0xda>
        if (length > aviBufferLength)
90001126:	6bab      	ldr	r3, [r5, #56]	; 0x38
90001128:	2b07      	cmp	r3, #7
9000112a:	d95c      	bls.n	900011e6 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x126>
        reader->seek(offset);
9000112c:	6803      	ldr	r3, [r0, #0]
9000112e:	4621      	mov	r1, r4
90001130:	68db      	ldr	r3, [r3, #12]
90001132:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
90001134:	6b28      	ldr	r0, [r5, #48]	; 0x30
90001136:	2208      	movs	r2, #8
90001138:	6b69      	ldr	r1, [r5, #52]	; 0x34
9000113a:	6803      	ldr	r3, [r0, #0]
9000113c:	691b      	ldr	r3, [r3, #16]
9000113e:	4798      	blx	r3
90001140:	b908      	cbnz	r0, 90001146 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x86>
            lastError = AVI_ERROR_EOF_REACHED;
90001142:	f885 7040 	strb.w	r7, [r5, #64]	; 0x40
    if (reader != 0)
90001146:	6b28      	ldr	r0, [r5, #48]	; 0x30
        uint32_t streamNo  = getU16(currentMovieOffset);
90001148:	69aa      	ldr	r2, [r5, #24]
        aviBufferStartOffset = offset;
9000114a:	63ec      	str	r4, [r5, #60]	; 0x3c
    if (reader != 0)
9000114c:	2800      	cmp	r0, #0
9000114e:	d053      	beq.n	900011f8 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x138>
        const uint32_t index = offset - aviBufferStartOffset;
90001150:	1b12      	subs	r2, r2, r4
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8);
90001152:	6b69      	ldr	r1, [r5, #52]	; 0x34
90001154:	188b      	adds	r3, r1, r2
90001156:	5c89      	ldrb	r1, [r1, r2]
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8) | (aviBuffer[index + 2] << 16) | (aviBuffer[index + 3] << 24);
90001158:	799c      	ldrb	r4, [r3, #6]
9000115a:	f893 a005 	ldrb.w	sl, [r3, #5]
9000115e:	0424      	lsls	r4, r4, #16
90001160:	f893 e004 	ldrb.w	lr, [r3, #4]
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8);
90001164:	f893 9001 	ldrb.w	r9, [r3, #1]
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8) | (aviBuffer[index + 2] << 16) | (aviBuffer[index + 3] << 24);
90001168:	ea44 240a 	orr.w	r4, r4, sl, lsl #8
9000116c:	f893 c007 	ldrb.w	ip, [r3, #7]
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8);
90001170:	f893 8003 	ldrb.w	r8, [r3, #3]
90001174:	ea41 2109 	orr.w	r1, r1, r9, lsl #8
90001178:	789a      	ldrb	r2, [r3, #2]
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8) | (aviBuffer[index + 2] << 16) | (aviBuffer[index + 3] << 24);
9000117a:	ea44 040e 	orr.w	r4, r4, lr
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8);
9000117e:	ea42 2308 	orr.w	r3, r2, r8, lsl #8
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8) | (aviBuffer[index + 2] << 16) | (aviBuffer[index + 3] << 24);
90001182:	ea44 640c 	orr.w	r4, r4, ip, lsl #24
        if (streamNo == STREAM0 && chunkType == TYPEDC)
90001186:	f246 3264 	movw	r2, #25444	; 0x6364
9000118a:	42b1      	cmp	r1, r6
9000118c:	bf08      	it	eq
9000118e:	4293      	cmpeq	r3, r2
90001190:	bf0c      	ite	eq
90001192:	2101      	moveq	r1, #1
90001194:	2100      	movne	r1, #0
90001196:	d01a      	beq.n	900011ce <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x10e>
    while (currentMovieOffset + 8 + chunkSize < movieLength)
90001198:	69ab      	ldr	r3, [r5, #24]
9000119a:	441c      	add	r4, r3
9000119c:	6aab      	ldr	r3, [r5, #40]	; 0x28
9000119e:	f104 0208 	add.w	r2, r4, #8
900011a2:	429a      	cmp	r2, r3
900011a4:	d20e      	bcs.n	900011c4 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x104>
        frameNumber++;
900011a6:	696b      	ldr	r3, [r5, #20]
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; /* pad to next word */
900011a8:	3409      	adds	r4, #9
        frameNumber++;
900011aa:	3301      	adds	r3, #1
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; /* pad to next word */
900011ac:	f024 0401 	bic.w	r4, r4, #1
900011b0:	e9c5 3405 	strd	r3, r4, [r5, #20]
    if (reader != 0)
900011b4:	2800      	cmp	r0, #0
900011b6:	d1b6      	bne.n	90001126 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x66>
        const uint8_t* const d = movieData + offset;
900011b8:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
        return d[0] | (d[1] << 8);
900011ba:	191a      	adds	r2, r3, r4
900011bc:	5b19      	ldrh	r1, [r3, r4]
900011be:	8853      	ldrh	r3, [r2, #2]
        return d[0] | (d[1] << 8) | (d[2] << 16) | (d[3] << 24);
900011c0:	6854      	ldr	r4, [r2, #4]
900011c2:	e7e0      	b.n	90001186 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0xc6>
    frameNumber = 1;
900011c4:	2201      	movs	r2, #1
    currentMovieOffset = firstFrameOffset; /* start over */
900011c6:	6a2b      	ldr	r3, [r5, #32]
    return false;
900011c8:	2100      	movs	r1, #0
    currentMovieOffset = firstFrameOffset; /* start over */
900011ca:	e9c5 2305 	strd	r2, r3, [r5, #20]
}
900011ce:	4608      	mov	r0, r1
900011d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            lastError = AVI_ERROR_EOF_REACHED;
900011d4:	230d      	movs	r3, #13
900011d6:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
900011da:	e78d      	b.n	900010f8 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x38>
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
900011dc:	1d22      	adds	r2, r4, #4
900011de:	4623      	mov	r3, r4
        return d[0] | (d[1] << 8) | (d[2] << 16) | (d[3] << 24);
900011e0:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
900011e2:	588c      	ldr	r4, [r1, r2]
900011e4:	e79b      	b.n	9000111e <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x5e>
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
900011e6:	2009      	movs	r0, #9
            assert(!"Buffer to small");
900011e8:	4b07      	ldr	r3, [pc, #28]	; (90001208 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x148>)
900011ea:	4a08      	ldr	r2, [pc, #32]	; (9000120c <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x14c>)
900011ec:	2197      	movs	r1, #151	; 0x97
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
900011ee:	f885 0040 	strb.w	r0, [r5, #64]	; 0x40
            assert(!"Buffer to small");
900011f2:	4807      	ldr	r0, [pc, #28]	; (90001210 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x150>)
900011f4:	f022 fb5e 	bl	900238b4 <__assert_func>
        uint32_t streamNo  = getU16(currentMovieOffset);
900011f8:	4614      	mov	r4, r2
900011fa:	e7dd      	b.n	900011b8 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0xf8>
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
900011fc:	4b05      	ldr	r3, [pc, #20]	; (90001214 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x154>)
900011fe:	21dd      	movs	r1, #221	; 0xdd
90001200:	4a05      	ldr	r2, [pc, #20]	; (90001218 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x158>)
90001202:	4803      	ldr	r0, [pc, #12]	; (90001210 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x150>)
90001204:	f022 fb56 	bl	900238b4 <__assert_func>
90001208:	90026924 	.word	0x90026924
9000120c:	90026938 	.word	0x90026938
90001210:	900268d8 	.word	0x900268d8
90001214:	9002697c 	.word	0x9002697c
90001218:	900269c8 	.word	0x900269c8

9000121c <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm>:
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
9000121c:	6943      	ldr	r3, [r0, #20]
{
9000121e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
90001222:	2b00      	cmp	r3, #0
90001224:	f000 809b 	beq.w	9000135e <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x142>
    readData(currentMovieOffset, 8);
90001228:	4604      	mov	r4, r0
    if (reader != 0)
9000122a:	6b00      	ldr	r0, [r0, #48]	; 0x30
9000122c:	460e      	mov	r6, r1
    readData(currentMovieOffset, 8);
9000122e:	69a5      	ldr	r5, [r4, #24]
    if (reader != 0)
90001230:	2800      	cmp	r0, #0
90001232:	d061      	beq.n	900012f8 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xdc>
        if (length > aviBufferLength)
90001234:	6ba3      	ldr	r3, [r4, #56]	; 0x38
90001236:	2b07      	cmp	r3, #7
90001238:	f240 8097 	bls.w	9000136a <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x14e>
        reader->seek(offset);
9000123c:	6803      	ldr	r3, [r0, #0]
9000123e:	4629      	mov	r1, r5
90001240:	68db      	ldr	r3, [r3, #12]
90001242:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
90001244:	6b20      	ldr	r0, [r4, #48]	; 0x30
90001246:	2208      	movs	r2, #8
90001248:	6b61      	ldr	r1, [r4, #52]	; 0x34
9000124a:	6803      	ldr	r3, [r0, #0]
9000124c:	691b      	ldr	r3, [r3, #16]
9000124e:	4798      	blx	r3
90001250:	2800      	cmp	r0, #0
90001252:	d04c      	beq.n	900012ee <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xd2>
    if (reader != 0)
90001254:	6b20      	ldr	r0, [r4, #48]	; 0x30
    uint32_t streamNo  = getU16(currentMovieOffset);
90001256:	69a1      	ldr	r1, [r4, #24]
        aviBufferStartOffset = offset;
90001258:	63e5      	str	r5, [r4, #60]	; 0x3c
    if (reader != 0)
9000125a:	2800      	cmp	r0, #0
9000125c:	d04b      	beq.n	900012f6 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xda>
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
9000125e:	f101 0c04 	add.w	ip, r1, #4
    uint32_t chunkType = getU16(currentMovieOffset + 2);
90001262:	1c8a      	adds	r2, r1, #2
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8);
90001264:	6b63      	ldr	r3, [r4, #52]	; 0x34
        const uint32_t index = offset - aviBufferStartOffset;
90001266:	ebac 0c05 	sub.w	ip, ip, r5
        const uint32_t index = offset - aviBufferStartOffset;
9000126a:	1b52      	subs	r2, r2, r5
9000126c:	1b4d      	subs	r5, r1, r5
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8) | (aviBuffer[index + 2] << 16) | (aviBuffer[index + 3] << 24);
9000126e:	eb03 0e0c 	add.w	lr, r3, ip
90001272:	f813 700c 	ldrb.w	r7, [r3, ip]
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8);
90001276:	eb03 0805 	add.w	r8, r3, r5
9000127a:	f813 c005 	ldrb.w	ip, [r3, r5]
9000127e:	f898 5001 	ldrb.w	r5, [r8, #1]
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8) | (aviBuffer[index + 2] << 16) | (aviBuffer[index + 3] << 24);
90001282:	f89e 8001 	ldrb.w	r8, [lr, #1]
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8);
90001286:	ea4c 2c05 	orr.w	ip, ip, r5, lsl #8
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8) | (aviBuffer[index + 2] << 16) | (aviBuffer[index + 3] << 24);
9000128a:	f89e 5002 	ldrb.w	r5, [lr, #2]
9000128e:	f89e e003 	ldrb.w	lr, [lr, #3]
90001292:	042d      	lsls	r5, r5, #16
90001294:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
90001298:	433d      	orrs	r5, r7
9000129a:	ea45 650e 	orr.w	r5, r5, lr, lsl #24
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8);
9000129e:	eb03 0e02 	add.w	lr, r3, r2
900012a2:	5c9b      	ldrb	r3, [r3, r2]
900012a4:	f89e 2001 	ldrb.w	r2, [lr, #1]
900012a8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    if (currentMovieOffset + 8 + chunkSize < movieLength)
900012ac:	194a      	adds	r2, r1, r5
900012ae:	6aa7      	ldr	r7, [r4, #40]	; 0x28
900012b0:	f102 0e08 	add.w	lr, r2, #8
900012b4:	45be      	cmp	lr, r7
900012b6:	d213      	bcs.n	900012e0 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xc4>
        if (streamNo == STREAM0 && chunkType == TYPEDC && chunkSize > 0)
900012b8:	f243 0730 	movw	r7, #12336	; 0x3030
900012bc:	45bc      	cmp	ip, r7
900012be:	d124      	bne.n	9000130a <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xee>
900012c0:	f246 3764 	movw	r7, #25444	; 0x6364
900012c4:	42bb      	cmp	r3, r7
900012c6:	d120      	bne.n	9000130a <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xee>
900012c8:	bb1d      	cbnz	r5, 90001312 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xf6>
            currentMovieOffset += 8;
900012ca:	4672      	mov	r2, lr
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; /* pad to next word */
900012cc:	3201      	adds	r2, #1
        if (currentMovieOffset == lastFrameEnd)
900012ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; /* pad to next word */
900012d0:	f022 0201 	bic.w	r2, r2, #1
        if (currentMovieOffset == lastFrameEnd)
900012d4:	429a      	cmp	r2, r3
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; /* pad to next word */
900012d6:	61a2      	str	r2, [r4, #24]
        if (currentMovieOffset == lastFrameEnd)
900012d8:	d002      	beq.n	900012e0 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xc4>
900012da:	2001      	movs	r0, #1
}
900012dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        frameNumber = 1;
900012e0:	2201      	movs	r2, #1
        currentMovieOffset = firstFrameOffset; /* start over */
900012e2:	6a23      	ldr	r3, [r4, #32]
900012e4:	2000      	movs	r0, #0
900012e6:	e9c4 2305 	strd	r2, r3, [r4, #20]
}
900012ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            lastError = AVI_ERROR_EOF_REACHED;
900012ee:	230d      	movs	r3, #13
900012f0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
900012f4:	e7ae      	b.n	90001254 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x38>
    uint32_t streamNo  = getU16(currentMovieOffset);
900012f6:	460d      	mov	r5, r1
        const uint8_t* const d = movieData + offset;
900012f8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
        const uint8_t* const d = movieData + offset;
900012fa:	4629      	mov	r1, r5
900012fc:	2000      	movs	r0, #0
        return d[0] | (d[1] << 8);
900012fe:	f832 c005 	ldrh.w	ip, [r2, r5]
90001302:	442a      	add	r2, r5
90001304:	8853      	ldrh	r3, [r2, #2]
        return d[0] | (d[1] << 8) | (d[2] << 16) | (d[3] << 24);
90001306:	6855      	ldr	r5, [r2, #4]
90001308:	e7d0      	b.n	900012ac <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x90>
        currentMovieOffset += chunkSize;
9000130a:	61a2      	str	r2, [r4, #24]
        if (chunkSize == 0) /* Empty frame - Skip */
9000130c:	2d00      	cmp	r5, #0
9000130e:	d1dd      	bne.n	900012cc <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xb0>
90001310:	e7db      	b.n	900012ca <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xae>
            currentMovieOffset += 8;
90001312:	f101 0708 	add.w	r7, r1, #8
90001316:	61a7      	str	r7, [r4, #24]
    if (reader != 0)
90001318:	b1f0      	cbz	r0, 90001358 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x13c>
        if (length > aviBufferLength)
9000131a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
9000131c:	429d      	cmp	r5, r3
9000131e:	d824      	bhi.n	9000136a <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x14e>
        reader->seek(offset);
90001320:	6803      	ldr	r3, [r0, #0]
90001322:	4639      	mov	r1, r7
90001324:	68db      	ldr	r3, [r3, #12]
90001326:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
90001328:	6b20      	ldr	r0, [r4, #48]	; 0x30
9000132a:	462a      	mov	r2, r5
9000132c:	6b61      	ldr	r1, [r4, #52]	; 0x34
9000132e:	6803      	ldr	r3, [r0, #0]
90001330:	691b      	ldr	r3, [r3, #16]
90001332:	4798      	blx	r3
90001334:	b910      	cbnz	r0, 9000133c <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x120>
            lastError = AVI_ERROR_EOF_REACHED;
90001336:	230d      	movs	r3, #13
90001338:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return aviBuffer;
9000133c:	6b61      	ldr	r1, [r4, #52]	; 0x34
        aviBufferStartOffset = offset;
9000133e:	63e7      	str	r7, [r4, #60]	; 0x3c
    if (outputBuffer) /* only decode if buffers are assigned. */
90001340:	b126      	cbz	r6, 9000134c <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x130>
90001342:	4633      	mov	r3, r6
90001344:	462a      	mov	r2, r5
90001346:	4620      	mov	r0, r4
90001348:	f7ff fcae 	bl	90000ca8 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0>
        currentMovieOffset += chunkSize;
9000134c:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
            frameNumber++;
90001350:	3301      	adds	r3, #1
        currentMovieOffset += chunkSize;
90001352:	442a      	add	r2, r5
            frameNumber++;
90001354:	6163      	str	r3, [r4, #20]
        if (chunkSize == 0) /* Empty frame - Skip */
90001356:	e7b9      	b.n	900012cc <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xb0>
    return movieData + offset;
90001358:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
9000135a:	4439      	add	r1, r7
9000135c:	e7f0      	b.n	90001340 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x124>
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
9000135e:	4b07      	ldr	r3, [pc, #28]	; (9000137c <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x160>)
90001360:	21a9      	movs	r1, #169	; 0xa9
90001362:	4a07      	ldr	r2, [pc, #28]	; (90001380 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x164>)
90001364:	4807      	ldr	r0, [pc, #28]	; (90001384 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x168>)
90001366:	f022 faa5 	bl	900238b4 <__assert_func>
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
9000136a:	2009      	movs	r0, #9
            assert(!"Buffer to small");
9000136c:	4b06      	ldr	r3, [pc, #24]	; (90001388 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x16c>)
9000136e:	4a07      	ldr	r2, [pc, #28]	; (9000138c <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x170>)
90001370:	2197      	movs	r1, #151	; 0x97
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
90001372:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
            assert(!"Buffer to small");
90001376:	4803      	ldr	r0, [pc, #12]	; (90001384 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x168>)
90001378:	f022 fa9c 	bl	900238b4 <__assert_func>
9000137c:	9002697c 	.word	0x9002697c
90001380:	900269fc 	.word	0x900269fc
90001384:	900268d8 	.word	0x900268d8
90001388:	90026924 	.word	0x90026924
9000138c:	90026938 	.word	0x90026938

90001390 <_ZN20HardwareMJPEGDecoderC1Ev>:
HardwareMJPEGDecoder::HardwareMJPEGDecoder()
90001390:	b510      	push	{r4, lr}
    : frameNumber(0), currentMovieOffset(0), indexOffset(0), firstFrameOffset(0), lastFrameEnd(0), movieLength(0), movieData(0),
90001392:	2200      	movs	r2, #0
HardwareMJPEGDecoder::HardwareMJPEGDecoder()
90001394:	4604      	mov	r4, r0
      reader(0), aviBuffer(0), aviBufferLength(0), aviBufferStartOffset(0), lastError(AVI_NO_ERROR)
90001396:	4b0e      	ldr	r3, [pc, #56]	; (900013d0 <_ZN20HardwareMJPEGDecoderC1Ev+0x40>)
    semDecodingDone = SEM_CREATE();
90001398:	2001      	movs	r0, #1
9000139a:	4611      	mov	r1, r2
      reader(0), aviBuffer(0), aviBufferLength(0), aviBufferStartOffset(0), lastError(AVI_NO_ERROR)
9000139c:	63e2      	str	r2, [r4, #60]	; 0x3c
9000139e:	6023      	str	r3, [r4, #0]
900013a0:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    : frameNumber(0), currentMovieOffset(0), indexOffset(0), firstFrameOffset(0), lastFrameEnd(0), movieLength(0), movieData(0),
900013a4:	e9c4 2205 	strd	r2, r2, [r4, #20]
900013a8:	e9c4 2207 	strd	r2, r2, [r4, #28]
900013ac:	e9c4 2209 	strd	r2, r2, [r4, #36]	; 0x24
      reader(0), aviBuffer(0), aviBufferLength(0), aviBufferStartOffset(0), lastError(AVI_NO_ERROR)
900013b0:	e9c4 220b 	strd	r2, r2, [r4, #44]	; 0x2c
900013b4:	e9c4 220d 	strd	r2, r2, [r4, #52]	; 0x34
    videoInfo.frame_width = 0;
900013b8:	e9c4 2203 	strd	r2, r2, [r4, #12]
    videoInfo.number_of_frames = 0;
900013bc:	e9c4 2201 	strd	r2, r2, [r4, #4]
    semDecodingDone = SEM_CREATE();
900013c0:	f00c fc18 	bl	9000dbf4 <osSemaphoreNew>
900013c4:	4b03      	ldr	r3, [pc, #12]	; (900013d4 <_ZN20HardwareMJPEGDecoderC1Ev+0x44>)
900013c6:	4602      	mov	r2, r0
}
900013c8:	4620      	mov	r0, r4
    semDecodingDone = SEM_CREATE();
900013ca:	601a      	str	r2, [r3, #0]
}
900013cc:	bd10      	pop	{r4, pc}
900013ce:	bf00      	nop
900013d0:	90026b20 	.word	0x90026b20
900013d4:	24005d3c 	.word	0x24005d3c

900013d8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>:
{
900013d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    currentMovieOffset = 0;
900013dc:	2100      	movs	r1, #0
    if (reader != 0)
900013de:	6b06      	ldr	r6, [r0, #48]	; 0x30
{
900013e0:	b083      	sub	sp, #12
900013e2:	4605      	mov	r5, r0
    currentMovieOffset = 0;
900013e4:	6181      	str	r1, [r0, #24]
    lastError = AVI_NO_ERROR;
900013e6:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
    if (reader != 0)
900013ea:	2e00      	cmp	r6, #0
900013ec:	f000 81aa 	beq.w	90001744 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x36c>
        if (length > aviBufferLength)
900013f0:	6b83      	ldr	r3, [r0, #56]	; 0x38
900013f2:	2b47      	cmp	r3, #71	; 0x47
900013f4:	f240 8202 	bls.w	900017fc <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x424>
        reader->seek(offset);
900013f8:	6833      	ldr	r3, [r6, #0]
900013fa:	4630      	mov	r0, r6
900013fc:	68db      	ldr	r3, [r3, #12]
900013fe:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
90001400:	6b28      	ldr	r0, [r5, #48]	; 0x30
90001402:	2248      	movs	r2, #72	; 0x48
90001404:	6b69      	ldr	r1, [r5, #52]	; 0x34
90001406:	6803      	ldr	r3, [r0, #0]
90001408:	691b      	ldr	r3, [r3, #16]
9000140a:	4798      	blx	r3
9000140c:	2800      	cmp	r0, #0
9000140e:	f000 80ce 	beq.w	900015ae <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1d6>
        aviBufferStartOffset = offset;
90001412:	2300      	movs	r3, #0
    if (reader != 0)
90001414:	6b2e      	ldr	r6, [r5, #48]	; 0x30
    if (compare(currentMovieOffset, "RIFF", 4))
90001416:	69af      	ldr	r7, [r5, #24]
    if (reader != 0)
90001418:	46b1      	mov	r9, r6
        aviBufferStartOffset = offset;
9000141a:	63eb      	str	r3, [r5, #60]	; 0x3c
    if (reader != 0)
9000141c:	2e00      	cmp	r6, #0
9000141e:	f000 8192 	beq.w	90001746 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x36e>
        src = reinterpret_cast<const char*>(aviBuffer + (offset - aviBufferStartOffset));
90001422:	f8d5 8034 	ldr.w	r8, [r5, #52]	; 0x34
    return strncmp(src, str, num);
90001426:	2204      	movs	r2, #4
90001428:	49be      	ldr	r1, [pc, #760]	; (90001724 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x34c>)
        src = reinterpret_cast<const char*>(aviBuffer + (offset - aviBufferStartOffset));
9000142a:	eb08 0b07 	add.w	fp, r8, r7
    return strncmp(src, str, num);
9000142e:	4658      	mov	r0, fp
90001430:	f023 f93e 	bl	900246b0 <strncmp>
    if (compare(currentMovieOffset, "RIFF", 4))
90001434:	2800      	cmp	r0, #0
90001436:	f040 81ea 	bne.w	9000180e <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x436>
    currentMovieOffset += 8;
9000143a:	f107 0008 	add.w	r0, r7, #8
    return strncmp(src, str, num);
9000143e:	2204      	movs	r2, #4
90001440:	49b9      	ldr	r1, [pc, #740]	; (90001728 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x350>)
    currentMovieOffset += 8;
90001442:	61a8      	str	r0, [r5, #24]
    return strncmp(src, str, num);
90001444:	4440      	add	r0, r8
90001446:	f023 f933 	bl	900246b0 <strncmp>
    if (compare(currentMovieOffset, "AVI ", 4))
9000144a:	2800      	cmp	r0, #0
9000144c:	f040 81fa 	bne.w	90001844 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x46c>
    currentMovieOffset += 4;
90001450:	f107 0a0c 	add.w	sl, r7, #12
    return strncmp(src, str, num);
90001454:	2204      	movs	r2, #4
90001456:	49b5      	ldr	r1, [pc, #724]	; (9000172c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x354>)
90001458:	eb08 000a 	add.w	r0, r8, sl
    currentMovieOffset += 4;
9000145c:	f8c5 a018 	str.w	sl, [r5, #24]
    return strncmp(src, str, num);
90001460:	f023 f926 	bl	900246b0 <strncmp>
    if (compare(currentMovieOffset, "LIST", 4))
90001464:	9001      	str	r0, [sp, #4]
90001466:	2800      	cmp	r0, #0
90001468:	f040 81e2 	bne.w	90001830 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x458>
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8) | (aviBuffer[index + 2] << 16) | (aviBuffer[index + 3] << 24);
9000146c:	f89b 4012 	ldrb.w	r4, [fp, #18]
90001470:	f89b 2011 	ldrb.w	r2, [fp, #17]
90001474:	0424      	lsls	r4, r4, #16
90001476:	f89b 3013 	ldrb.w	r3, [fp, #19]
9000147a:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
9000147e:	f89b 2010 	ldrb.w	r2, [fp, #16]
90001482:	4314      	orrs	r4, r2
    assert(aviListSize);
90001484:	ea54 6403 	orrs.w	r4, r4, r3, lsl #24
90001488:	f000 81cb 	beq.w	90001822 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x44a>
    uint32_t offset =  currentMovieOffset + 8;
9000148c:	f107 0014 	add.w	r0, r7, #20
    return strncmp(src, str, num);
90001490:	2204      	movs	r2, #4
90001492:	49a7      	ldr	r1, [pc, #668]	; (90001730 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x358>)
90001494:	4440      	add	r0, r8
90001496:	f023 f90b 	bl	900246b0 <strncmp>
    if (compare(offset, "hdrl", 4))
9000149a:	2800      	cmp	r0, #0
9000149c:	f000 808b 	beq.w	900015b6 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1de>
        lastError = AVI_ERROR_AVI_HDRL_NOT_FOUND;
900014a0:	2306      	movs	r3, #6
        foundFrame = false;
900014a2:	f8dd b004 	ldr.w	fp, [sp, #4]
    offset += 4;
900014a6:	f107 0018 	add.w	r0, r7, #24
        lastError = AVI_ERROR_AVI_HDRL_NOT_FOUND;
900014aa:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
        src = reinterpret_cast<const char*>(aviBuffer + (offset - aviBufferStartOffset));
900014ae:	4440      	add	r0, r8
    return strncmp(src, str, num);
900014b0:	2204      	movs	r2, #4
900014b2:	49a0      	ldr	r1, [pc, #640]	; (90001734 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x35c>)
900014b4:	f023 f8fc 	bl	900246b0 <strncmp>
    if (compare(offset, "avih", 4))
900014b8:	2800      	cmp	r0, #0
900014ba:	f000 8085 	beq.w	900015c8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1f0>
        lastError = AVI_ERROR_AVI_AVIH_NOT_FOUND;
900014be:	2307      	movs	r3, #7
900014c0:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
    uint32_t listOffset = aviListOffset + aviListSize + 8;
900014c4:	4454      	add	r4, sl
900014c6:	3408      	adds	r4, #8
    if (reader != 0)
900014c8:	f1b9 0f00 	cmp.w	r9, #0
900014cc:	d015      	beq.n	900014fa <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x122>
        if (length > aviBufferLength)
900014ce:	6bab      	ldr	r3, [r5, #56]	; 0x38
900014d0:	2b0b      	cmp	r3, #11
900014d2:	f240 8193 	bls.w	900017fc <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x424>
        reader->seek(offset);
900014d6:	f8d9 3000 	ldr.w	r3, [r9]
900014da:	4621      	mov	r1, r4
900014dc:	4648      	mov	r0, r9
900014de:	68db      	ldr	r3, [r3, #12]
900014e0:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
900014e2:	6b28      	ldr	r0, [r5, #48]	; 0x30
900014e4:	220c      	movs	r2, #12
900014e6:	6b69      	ldr	r1, [r5, #52]	; 0x34
900014e8:	6803      	ldr	r3, [r0, #0]
900014ea:	691b      	ldr	r3, [r3, #16]
900014ec:	4798      	blx	r3
900014ee:	b910      	cbnz	r0, 900014f6 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x11e>
            lastError = AVI_ERROR_EOF_REACHED;
900014f0:	230d      	movs	r3, #13
900014f2:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
        aviBufferStartOffset = offset;
900014f6:	6b2e      	ldr	r6, [r5, #48]	; 0x30
900014f8:	63ec      	str	r4, [r5, #60]	; 0x3c
        return aviBuffer;
900014fa:	f895 9040 	ldrb.w	r9, [r5, #64]	; 0x40
    return strncmp(src, str, num);
900014fe:	4f8e      	ldr	r7, [pc, #568]	; (90001738 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x360>)
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
90001500:	f104 0808 	add.w	r8, r4, #8
    if (reader != 0)
90001504:	2e00      	cmp	r6, #0
90001506:	d041      	beq.n	9000158c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1b4>
        src = reinterpret_cast<const char*>(aviBuffer + (offset - aviBufferStartOffset));
90001508:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    return strncmp(src, str, num);
9000150a:	2204      	movs	r2, #4
        src = reinterpret_cast<const char*>(aviBuffer + (offset - aviBufferStartOffset));
9000150c:	6b68      	ldr	r0, [r5, #52]	; 0x34
    return strncmp(src, str, num);
9000150e:	4639      	mov	r1, r7
        src = reinterpret_cast<const char*>(aviBuffer + (offset - aviBufferStartOffset));
90001510:	eba8 0303 	sub.w	r3, r8, r3
90001514:	4418      	add	r0, r3
    return strncmp(src, str, num);
90001516:	f023 f8cb 	bl	900246b0 <strncmp>
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
9000151a:	2800      	cmp	r0, #0
9000151c:	d03e      	beq.n	9000159c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1c4>
9000151e:	f1b9 0f00 	cmp.w	r9, #0
90001522:	d13e      	bne.n	900015a2 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1ca>
90001524:	6aab      	ldr	r3, [r5, #40]	; 0x28
90001526:	42a3      	cmp	r3, r4
90001528:	f240 80a7 	bls.w	9000167a <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2a2>
        const uint32_t listSize = getU32(listOffset + 4) + 8;
9000152c:	3404      	adds	r4, #4
    if (reader != 0)
9000152e:	2e00      	cmp	r6, #0
90001530:	d046      	beq.n	900015c0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1e8>
        const uint32_t index = offset - aviBufferStartOffset;
90001532:	6bea      	ldr	r2, [r5, #60]	; 0x3c
        if (length > aviBufferLength)
90001534:	e9d5 130d 	ldrd	r1, r3, [r5, #52]	; 0x34
        const uint32_t index = offset - aviBufferStartOffset;
90001538:	1aa4      	subs	r4, r4, r2
        if (length > aviBufferLength)
9000153a:	2b0b      	cmp	r3, #11
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8) | (aviBuffer[index + 2] << 16) | (aviBuffer[index + 3] << 24);
9000153c:	eb01 0204 	add.w	r2, r1, r4
90001540:	5d09      	ldrb	r1, [r1, r4]
90001542:	7894      	ldrb	r4, [r2, #2]
90001544:	7850      	ldrb	r0, [r2, #1]
90001546:	ea4f 4404 	mov.w	r4, r4, lsl #16
9000154a:	78d2      	ldrb	r2, [r2, #3]
9000154c:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
90001550:	ea44 0401 	orr.w	r4, r4, r1
90001554:	ea44 6402 	orr.w	r4, r4, r2, lsl #24
        listOffset += listSize;
90001558:	4444      	add	r4, r8
        if (length > aviBufferLength)
9000155a:	f240 814f 	bls.w	900017fc <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x424>
        reader->seek(offset);
9000155e:	6833      	ldr	r3, [r6, #0]
90001560:	4621      	mov	r1, r4
90001562:	4630      	mov	r0, r6
90001564:	68db      	ldr	r3, [r3, #12]
90001566:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
90001568:	6b28      	ldr	r0, [r5, #48]	; 0x30
9000156a:	220c      	movs	r2, #12
9000156c:	6b69      	ldr	r1, [r5, #52]	; 0x34
9000156e:	6803      	ldr	r3, [r0, #0]
90001570:	691b      	ldr	r3, [r3, #16]
90001572:	4798      	blx	r3
90001574:	b910      	cbnz	r0, 9000157c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1a4>
            lastError = AVI_ERROR_EOF_REACHED;
90001576:	230d      	movs	r3, #13
90001578:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
        aviBufferStartOffset = offset;
9000157c:	6b2e      	ldr	r6, [r5, #48]	; 0x30
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
9000157e:	f104 0808 	add.w	r8, r4, #8
90001582:	f895 9040 	ldrb.w	r9, [r5, #64]	; 0x40
        aviBufferStartOffset = offset;
90001586:	63ec      	str	r4, [r5, #60]	; 0x3c
    if (reader != 0)
90001588:	2e00      	cmp	r6, #0
9000158a:	d1bd      	bne.n	90001508 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x130>
        src = (const char*)movieData + offset;
9000158c:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    return strncmp(src, str, num);
9000158e:	2204      	movs	r2, #4
90001590:	4639      	mov	r1, r7
        src = (const char*)movieData + offset;
90001592:	4440      	add	r0, r8
    return strncmp(src, str, num);
90001594:	f023 f88c 	bl	900246b0 <strncmp>
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
90001598:	2800      	cmp	r0, #0
9000159a:	d1c0      	bne.n	9000151e <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x146>
    if (lastError != AVI_NO_ERROR)
9000159c:	f1b9 0f00 	cmp.w	r9, #0
900015a0:	d06b      	beq.n	9000167a <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2a2>
        lastError = AVI_ERROR_MOVI_NOT_FOUND;
900015a2:	230a      	movs	r3, #10
900015a4:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
}
900015a8:	b003      	add	sp, #12
900015aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            lastError = AVI_ERROR_EOF_REACHED;
900015ae:	230d      	movs	r3, #13
900015b0:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
900015b4:	e72d      	b.n	90001412 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x3a>
    offset += 4;
900015b6:	f107 0018 	add.w	r0, r7, #24
    bool foundFrame = true;
900015ba:	f04f 0b01 	mov.w	fp, #1
900015be:	e776      	b.n	900014ae <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xd6>
        listOffset += listSize;
900015c0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
900015c2:	591c      	ldr	r4, [r3, r4]
900015c4:	4444      	add	r4, r8
    return movieData + offset;
900015c6:	e79b      	b.n	90001500 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x128>
    if (foundFrame)
900015c8:	f1bb 0f00 	cmp.w	fp, #0
900015cc:	f43f af7a 	beq.w	900014c4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xec>
        offset += 8; /* skip fourcc and cb in AVIMAINHEADER */
900015d0:	f107 0120 	add.w	r1, r7, #32
    if (reader != 0)
900015d4:	f1b9 0f00 	cmp.w	r9, #0
900015d8:	f000 80f4 	beq.w	900017c4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x3ec>
        const uint32_t index = offset - aviBufferStartOffset;
900015dc:	6beb      	ldr	r3, [r5, #60]	; 0x3c
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8) | (aviBuffer[index + 2] << 16) | (aviBuffer[index + 3] << 24);
900015de:	6b6a      	ldr	r2, [r5, #52]	; 0x34
        const uint32_t index = offset - aviBufferStartOffset;
900015e0:	1ac9      	subs	r1, r1, r3
900015e2:	f1c3 0030 	rsb	r0, r3, #48	; 0x30
        videoInfo.ms_between_frames = getU32(offset) / 1000;
900015e6:	f8df c158 	ldr.w	ip, [pc, #344]	; 90001740 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x368>
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8) | (aviBuffer[index + 2] << 16) | (aviBuffer[index + 3] << 24);
900015ea:	f812 8001 	ldrb.w	r8, [r2, r1]
900015ee:	eb02 0e01 	add.w	lr, r2, r1
        const uint32_t index = offset - aviBufferStartOffset;
900015f2:	f1c3 0140 	rsb	r1, r3, #64	; 0x40
900015f6:	f1c3 0344 	rsb	r3, r3, #68	; 0x44
900015fa:	4438      	add	r0, r7
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8) | (aviBuffer[index + 2] << 16) | (aviBuffer[index + 3] << 24);
900015fc:	f89e b001 	ldrb.w	fp, [lr, #1]
        const uint32_t index = offset - aviBufferStartOffset;
90001600:	4439      	add	r1, r7
90001602:	441f      	add	r7, r3
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8) | (aviBuffer[index + 2] << 16) | (aviBuffer[index + 3] << 24);
90001604:	f89e 3002 	ldrb.w	r3, [lr, #2]
90001608:	f89e e003 	ldrb.w	lr, [lr, #3]
9000160c:	041b      	lsls	r3, r3, #16
9000160e:	ea43 230b 	orr.w	r3, r3, fp, lsl #8
90001612:	ea43 0308 	orr.w	r3, r3, r8
90001616:	ea43 630e 	orr.w	r3, r3, lr, lsl #24
        videoInfo.ms_between_frames = getU32(offset) / 1000;
9000161a:	fbac c303 	umull	ip, r3, ip, r3
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8) | (aviBuffer[index + 2] << 16) | (aviBuffer[index + 3] << 24);
9000161e:	eb02 0c00 	add.w	ip, r2, r0
        videoInfo.ms_between_frames = getU32(offset) / 1000;
90001622:	099b      	lsrs	r3, r3, #6
90001624:	606b      	str	r3, [r5, #4]
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8) | (aviBuffer[index + 2] << 16) | (aviBuffer[index + 3] << 24);
90001626:	f89c 3002 	ldrb.w	r3, [ip, #2]
9000162a:	f89c 8001 	ldrb.w	r8, [ip, #1]
9000162e:	041b      	lsls	r3, r3, #16
90001630:	f812 e000 	ldrb.w	lr, [r2, r0]
90001634:	f89c c003 	ldrb.w	ip, [ip, #3]
90001638:	1850      	adds	r0, r2, r1
9000163a:	ea43 2308 	orr.w	r3, r3, r8, lsl #8
9000163e:	ea43 030e 	orr.w	r3, r3, lr
90001642:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
        videoInfo.number_of_frames = getU32(offset + 16);
90001646:	60ab      	str	r3, [r5, #8]
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8) | (aviBuffer[index + 2] << 16) | (aviBuffer[index + 3] << 24);
90001648:	7883      	ldrb	r3, [r0, #2]
9000164a:	f890 c001 	ldrb.w	ip, [r0, #1]
9000164e:	041b      	lsls	r3, r3, #16
90001650:	5c51      	ldrb	r1, [r2, r1]
90001652:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
90001656:	430b      	orrs	r3, r1
90001658:	78c1      	ldrb	r1, [r0, #3]
9000165a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
9000165e:	19d1      	adds	r1, r2, r7
        videoInfo.frame_width = getU32(offset + 32);
90001660:	60eb      	str	r3, [r5, #12]
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8) | (aviBuffer[index + 2] << 16) | (aviBuffer[index + 3] << 24);
90001662:	788b      	ldrb	r3, [r1, #2]
90001664:	7848      	ldrb	r0, [r1, #1]
90001666:	041b      	lsls	r3, r3, #16
90001668:	5dd2      	ldrb	r2, [r2, r7]
9000166a:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
9000166e:	4313      	orrs	r3, r2
90001670:	78ca      	ldrb	r2, [r1, #3]
90001672:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
        videoInfo.frame_height = getU32(offset + 36);
90001676:	612b      	str	r3, [r5, #16]
90001678:	e724      	b.n	900014c4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xec>
    currentMovieOffset = listOffset + 8 + 4; /* skip LIST and 'movi' */
9000167a:	f104 030c 	add.w	r3, r4, #12
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
9000167e:	3404      	adds	r4, #4
    currentMovieOffset = listOffset + 8 + 4; /* skip LIST and 'movi' */
90001680:	61ab      	str	r3, [r5, #24]
    if (reader != 0)
90001682:	2e00      	cmp	r6, #0
90001684:	f000 80b2 	beq.w	900017ec <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x414>
        const uint32_t index = offset - aviBufferStartOffset;
90001688:	6beb      	ldr	r3, [r5, #60]	; 0x3c
9000168a:	1ae4      	subs	r4, r4, r3
        if (length > aviBufferLength)
9000168c:	e9d5 120d 	ldrd	r1, r2, [r5, #52]	; 0x34
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8) | (aviBuffer[index + 2] << 16) | (aviBuffer[index + 3] << 24);
90001690:	f104 0c02 	add.w	ip, r4, #2
90001694:	1c67      	adds	r7, r4, #1
90001696:	f811 e004 	ldrb.w	lr, [r1, r4]
9000169a:	1ce0      	adds	r0, r4, #3
9000169c:	f811 300c 	ldrb.w	r3, [r1, ip]
        if (length > aviBufferLength)
900016a0:	2a03      	cmp	r2, #3
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8) | (aviBuffer[index + 2] << 16) | (aviBuffer[index + 3] << 24);
900016a2:	f811 9007 	ldrb.w	r9, [r1, r7]
900016a6:	ea4f 4303 	mov.w	r3, r3, lsl #16
900016aa:	ea43 2309 	orr.w	r3, r3, r9, lsl #8
900016ae:	ea43 030e 	orr.w	r3, r3, lr
900016b2:	f811 e000 	ldrb.w	lr, [r1, r0]
900016b6:	ea43 630e 	orr.w	r3, r3, lr, lsl #24
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
900016ba:	4443      	add	r3, r8
900016bc:	626b      	str	r3, [r5, #36]	; 0x24
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8) | (aviBuffer[index + 2] << 16) | (aviBuffer[index + 3] << 24);
900016be:	f811 300c 	ldrb.w	r3, [r1, ip]
900016c2:	f811 c007 	ldrb.w	ip, [r1, r7]
900016c6:	5d0f      	ldrb	r7, [r1, r4]
900016c8:	ea4f 4403 	mov.w	r4, r3, lsl #16
900016cc:	5c09      	ldrb	r1, [r1, r0]
900016ce:	ea44 240c 	orr.w	r4, r4, ip, lsl #8
900016d2:	ea44 0407 	orr.w	r4, r4, r7
900016d6:	ea44 6401 	orr.w	r4, r4, r1, lsl #24
    listOffset += listSize;
900016da:	4444      	add	r4, r8
        if (length > aviBufferLength)
900016dc:	f240 808e 	bls.w	900017fc <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x424>
        reader->seek(offset);
900016e0:	6833      	ldr	r3, [r6, #0]
900016e2:	4621      	mov	r1, r4
900016e4:	4630      	mov	r0, r6
900016e6:	68db      	ldr	r3, [r3, #12]
900016e8:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
900016ea:	6b28      	ldr	r0, [r5, #48]	; 0x30
900016ec:	2204      	movs	r2, #4
900016ee:	6b69      	ldr	r1, [r5, #52]	; 0x34
900016f0:	6803      	ldr	r3, [r0, #0]
900016f2:	691b      	ldr	r3, [r3, #16]
900016f4:	4798      	blx	r3
900016f6:	2800      	cmp	r0, #0
900016f8:	d05a      	beq.n	900017b0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x3d8>
    if (reader != 0)
900016fa:	6b2b      	ldr	r3, [r5, #48]	; 0x30
        aviBufferStartOffset = offset;
900016fc:	63ec      	str	r4, [r5, #60]	; 0x3c
    if (reader != 0)
900016fe:	2b00      	cmp	r3, #0
90001700:	f000 80aa 	beq.w	90001858 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x480>
        src = reinterpret_cast<const char*>(aviBuffer + (offset - aviBufferStartOffset));
90001704:	6b68      	ldr	r0, [r5, #52]	; 0x34
    return strncmp(src, str, num);
90001706:	2204      	movs	r2, #4
90001708:	490c      	ldr	r1, [pc, #48]	; (9000173c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x364>)
9000170a:	f022 ffd1 	bl	900246b0 <strncmp>
    if (!compare(listOffset, "idx1", 4))
9000170e:	2800      	cmp	r0, #0
90001710:	d166      	bne.n	900017e0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x408>
    frameNumber = 1; /* next frame number is 1 */
90001712:	2201      	movs	r2, #1
    firstFrameOffset = currentMovieOffset;
90001714:	69ab      	ldr	r3, [r5, #24]
        indexOffset = listOffset;
90001716:	61ec      	str	r4, [r5, #28]
    frameNumber = 1; /* next frame number is 1 */
90001718:	616a      	str	r2, [r5, #20]
    firstFrameOffset = currentMovieOffset;
9000171a:	622b      	str	r3, [r5, #32]
}
9000171c:	b003      	add	sp, #12
9000171e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90001722:	bf00      	nop
90001724:	90026a58 	.word	0x90026a58
90001728:	90026b10 	.word	0x90026b10
9000172c:	90026b08 	.word	0x90026b08
90001730:	90026b00 	.word	0x90026b00
90001734:	90026ae8 	.word	0x90026ae8
90001738:	90026af0 	.word	0x90026af0
9000173c:	90026af8 	.word	0x90026af8
90001740:	10624dd3 	.word	0x10624dd3
    if (compare(currentMovieOffset, "RIFF", 4))
90001744:	4637      	mov	r7, r6
        src = (const char*)movieData + offset;
90001746:	f8d5 802c 	ldr.w	r8, [r5, #44]	; 0x2c
    return strncmp(src, str, num);
9000174a:	2204      	movs	r2, #4
9000174c:	4944      	ldr	r1, [pc, #272]	; (90001860 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x488>)
        src = (const char*)movieData + offset;
9000174e:	eb08 0407 	add.w	r4, r8, r7
    return strncmp(src, str, num);
90001752:	4620      	mov	r0, r4
90001754:	f022 ffac 	bl	900246b0 <strncmp>
    if (compare(currentMovieOffset, "RIFF", 4))
90001758:	2800      	cmp	r0, #0
9000175a:	d158      	bne.n	9000180e <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x436>
    currentMovieOffset += 8;
9000175c:	f107 0008 	add.w	r0, r7, #8
    return strncmp(src, str, num);
90001760:	2204      	movs	r2, #4
90001762:	4940      	ldr	r1, [pc, #256]	; (90001864 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x48c>)
    currentMovieOffset += 8;
90001764:	61a8      	str	r0, [r5, #24]
    return strncmp(src, str, num);
90001766:	4440      	add	r0, r8
90001768:	f022 ffa2 	bl	900246b0 <strncmp>
    if (compare(currentMovieOffset, "AVI ", 4))
9000176c:	2800      	cmp	r0, #0
9000176e:	d169      	bne.n	90001844 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x46c>
    currentMovieOffset += 4;
90001770:	f107 0a0c 	add.w	sl, r7, #12
    return strncmp(src, str, num);
90001774:	2204      	movs	r2, #4
90001776:	493c      	ldr	r1, [pc, #240]	; (90001868 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x490>)
90001778:	eb08 000a 	add.w	r0, r8, sl
    currentMovieOffset += 4;
9000177c:	f8c5 a018 	str.w	sl, [r5, #24]
    return strncmp(src, str, num);
90001780:	f022 ff96 	bl	900246b0 <strncmp>
    if (compare(currentMovieOffset, "LIST", 4))
90001784:	4683      	mov	fp, r0
90001786:	2800      	cmp	r0, #0
90001788:	d152      	bne.n	90001830 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x458>
        return d[0] | (d[1] << 8) | (d[2] << 16) | (d[3] << 24);
9000178a:	6924      	ldr	r4, [r4, #16]
    assert(aviListSize);
9000178c:	2c00      	cmp	r4, #0
9000178e:	d048      	beq.n	90001822 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x44a>
    uint32_t offset =  currentMovieOffset + 8;
90001790:	f107 0014 	add.w	r0, r7, #20
    return strncmp(src, str, num);
90001794:	2204      	movs	r2, #4
90001796:	4935      	ldr	r1, [pc, #212]	; (9000186c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x494>)
90001798:	4440      	add	r0, r8
9000179a:	f022 ff89 	bl	900246b0 <strncmp>
    if (compare(offset, "hdrl", 4))
9000179e:	b958      	cbnz	r0, 900017b8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x3e0>
    offset += 4;
900017a0:	f107 0018 	add.w	r0, r7, #24
    bool foundFrame = true;
900017a4:	f04f 0b01 	mov.w	fp, #1
        src = (const char*)movieData + offset;
900017a8:	4440      	add	r0, r8
900017aa:	f04f 0900 	mov.w	r9, #0
900017ae:	e67f      	b.n	900014b0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xd8>
            lastError = AVI_ERROR_EOF_REACHED;
900017b0:	230d      	movs	r3, #13
900017b2:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
900017b6:	e7a0      	b.n	900016fa <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x322>
        lastError = AVI_ERROR_AVI_HDRL_NOT_FOUND;
900017b8:	2306      	movs	r3, #6
    offset += 4;
900017ba:	f107 0018 	add.w	r0, r7, #24
        lastError = AVI_ERROR_AVI_HDRL_NOT_FOUND;
900017be:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
    if (reader != 0)
900017c2:	e7f1      	b.n	900017a8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x3d0>
900017c4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
        videoInfo.ms_between_frames = getU32(offset) / 1000;
900017c6:	585a      	ldr	r2, [r3, r1]
900017c8:	443b      	add	r3, r7
900017ca:	4929      	ldr	r1, [pc, #164]	; (90001870 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x498>)
900017cc:	fba1 1202 	umull	r1, r2, r1, r2
900017d0:	0992      	lsrs	r2, r2, #6
900017d2:	606a      	str	r2, [r5, #4]
        return d[0] | (d[1] << 8) | (d[2] << 16) | (d[3] << 24);
900017d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
        videoInfo.number_of_frames = getU32(offset + 16);
900017d6:	60aa      	str	r2, [r5, #8]
        return d[0] | (d[1] << 8) | (d[2] << 16) | (d[3] << 24);
900017d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
        videoInfo.frame_width = getU32(offset + 32);
900017da:	60ea      	str	r2, [r5, #12]
        return d[0] | (d[1] << 8) | (d[2] << 16) | (d[3] << 24);
900017dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
900017de:	e74a      	b.n	90001676 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x29e>
        lastError = AVI_ERROR_IDX1_NOT_FOUND;
900017e0:	230b      	movs	r3, #11
900017e2:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
}
900017e6:	b003      	add	sp, #12
900017e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
900017ec:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
900017ee:	5903      	ldr	r3, [r0, r4]
900017f0:	4443      	add	r3, r8
900017f2:	626b      	str	r3, [r5, #36]	; 0x24
    listOffset += listSize;
900017f4:	5904      	ldr	r4, [r0, r4]
900017f6:	4444      	add	r4, r8
        src = (const char*)movieData + offset;
900017f8:	4420      	add	r0, r4
900017fa:	e784      	b.n	90001706 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x32e>
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
900017fc:	2009      	movs	r0, #9
            assert(!"Buffer to small");
900017fe:	4b1d      	ldr	r3, [pc, #116]	; (90001874 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x49c>)
90001800:	4a1d      	ldr	r2, [pc, #116]	; (90001878 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4a0>)
90001802:	2197      	movs	r1, #151	; 0x97
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
90001804:	f885 0040 	strb.w	r0, [r5, #64]	; 0x40
            assert(!"Buffer to small");
90001808:	481c      	ldr	r0, [pc, #112]	; (9000187c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4a4>)
9000180a:	f022 f853 	bl	900238b4 <__assert_func>
        lastError = AVI_ERROR_NOT_RIFF;
9000180e:	2003      	movs	r0, #3
        assert(!"RIFF header not found");
90001810:	4b1b      	ldr	r3, [pc, #108]	; (90001880 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4a8>)
90001812:	4a1c      	ldr	r2, [pc, #112]	; (90001884 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4ac>)
90001814:	f240 1125 	movw	r1, #293	; 0x125
        lastError = AVI_ERROR_NOT_RIFF;
90001818:	f885 0040 	strb.w	r0, [r5, #64]	; 0x40
        assert(!"RIFF header not found");
9000181c:	4817      	ldr	r0, [pc, #92]	; (9000187c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4a4>)
9000181e:	f022 f849 	bl	900238b4 <__assert_func>
    assert(aviListSize);
90001822:	4b19      	ldr	r3, [pc, #100]	; (90001888 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4b0>)
90001824:	f44f 719d 	mov.w	r1, #314	; 0x13a
90001828:	4a16      	ldr	r2, [pc, #88]	; (90001884 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4ac>)
9000182a:	4814      	ldr	r0, [pc, #80]	; (9000187c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4a4>)
9000182c:	f022 f842 	bl	900238b4 <__assert_func>
        lastError = AVI_ERROR_AVI_LIST_NOT_FOUND;
90001830:	2005      	movs	r0, #5
        assert(!"AVI LIST not found");
90001832:	4b16      	ldr	r3, [pc, #88]	; (9000188c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4b4>)
90001834:	4a13      	ldr	r2, [pc, #76]	; (90001884 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4ac>)
90001836:	f44f 719a 	mov.w	r1, #308	; 0x134
        lastError = AVI_ERROR_AVI_LIST_NOT_FOUND;
9000183a:	f885 0040 	strb.w	r0, [r5, #64]	; 0x40
        assert(!"AVI LIST not found");
9000183e:	480f      	ldr	r0, [pc, #60]	; (9000187c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4a4>)
90001840:	f022 f838 	bl	900238b4 <__assert_func>
        lastError = AVI_ERROR_AVI_HEADER_NOT_FOUND;
90001844:	2004      	movs	r0, #4
        assert(!"AVI header not found");
90001846:	4b12      	ldr	r3, [pc, #72]	; (90001890 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4b8>)
90001848:	4a0e      	ldr	r2, [pc, #56]	; (90001884 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4ac>)
9000184a:	f240 112d 	movw	r1, #301	; 0x12d
        lastError = AVI_ERROR_AVI_HEADER_NOT_FOUND;
9000184e:	f885 0040 	strb.w	r0, [r5, #64]	; 0x40
        assert(!"AVI header not found");
90001852:	480a      	ldr	r0, [pc, #40]	; (9000187c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4a4>)
90001854:	f022 f82e 	bl	900238b4 <__assert_func>
        src = (const char*)movieData + offset;
90001858:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
9000185a:	4420      	add	r0, r4
9000185c:	e753      	b.n	90001706 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x32e>
9000185e:	bf00      	nop
90001860:	90026a58 	.word	0x90026a58
90001864:	90026b10 	.word	0x90026b10
90001868:	90026b08 	.word	0x90026b08
9000186c:	90026b00 	.word	0x90026b00
90001870:	10624dd3 	.word	0x10624dd3
90001874:	90026924 	.word	0x90026924
90001878:	90026938 	.word	0x90026938
9000187c:	900268d8 	.word	0x900268d8
90001880:	90026a60 	.word	0x90026a60
90001884:	90026a7c 	.word	0x90026a7c
90001888:	90026adc 	.word	0x90026adc
9000188c:	90026ac4 	.word	0x90026ac4
90001890:	90026aac 	.word	0x90026aac

90001894 <_ZN20HardwareMJPEGDecoder12setVideoDataEPKhm>:
{
90001894:	b410      	push	{r4}
    reader = 0; /* not using reader */
90001896:	2400      	movs	r4, #0
    movieLength = length;
90001898:	e9c0 210a 	strd	r2, r1, [r0, #40]	; 0x28
    reader = 0; /* not using reader */
9000189c:	6304      	str	r4, [r0, #48]	; 0x30
}
9000189e:	f85d 4b04 	ldr.w	r4, [sp], #4
    readVideoHeader();
900018a2:	f7ff bd99 	b.w	900013d8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>
900018a6:	bf00      	nop

900018a8 <_ZN20HardwareMJPEGDecoder12setVideoDataERN8touchgfx15VideoDataReaderE>:
{
900018a8:	b510      	push	{r4, lr}
    movieLength = reader.getDataLength();
900018aa:	680b      	ldr	r3, [r1, #0]
{
900018ac:	4604      	mov	r4, r0
    movieData = 0;
900018ae:	2200      	movs	r2, #0
    movieLength = reader.getDataLength();
900018b0:	4608      	mov	r0, r1
900018b2:	689b      	ldr	r3, [r3, #8]
    movieData = 0;
900018b4:	e9c4 210b 	strd	r2, r1, [r4, #44]	; 0x2c
    movieLength = reader.getDataLength();
900018b8:	4798      	blx	r3
900018ba:	4603      	mov	r3, r0
    readVideoHeader();
900018bc:	4620      	mov	r0, r4
    movieLength = reader.getDataLength();
900018be:	62a3      	str	r3, [r4, #40]	; 0x28
}
900018c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    readVideoHeader();
900018c4:	f7ff bd88 	b.w	900013d8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>

900018c8 <HAL_JPEG_InfoReadyCallback>:
        if (pInfo->ChromaSubsampling == JPEG_420_SUBSAMPLING)
900018c8:	684b      	ldr	r3, [r1, #4]
900018ca:	2b01      	cmp	r3, #1
900018cc:	d015      	beq.n	900018fa <HAL_JPEG_InfoReadyCallback+0x32>
            if (pInfo->ChromaSubsampling == JPEG_422_SUBSAMPLING)
900018ce:	2b02      	cmp	r3, #2
900018d0:	d00b      	beq.n	900018ea <HAL_JPEG_InfoReadyCallback+0x22>
            if (pInfo->ChromaSubsampling == JPEG_444_SUBSAMPLING)
900018d2:	b94b      	cbnz	r3, 900018e8 <HAL_JPEG_InfoReadyCallback+0x20>
                if ((pInfo->ImageWidth % 8) != 0)
900018d4:	68cb      	ldr	r3, [r1, #12]
900018d6:	0758      	lsls	r0, r3, #29
900018d8:	d124      	bne.n	90001924 <HAL_JPEG_InfoReadyCallback+0x5c>
                if ((pInfo->ImageHeight % 8) != 0)
900018da:	688b      	ldr	r3, [r1, #8]
900018dc:	075a      	lsls	r2, r3, #29
900018de:	d003      	beq.n	900018e8 <HAL_JPEG_InfoReadyCallback+0x20>
                    pInfo->ImageHeight += (8 - (pInfo->ImageHeight % 8));
900018e0:	f023 0307 	bic.w	r3, r3, #7
900018e4:	3308      	adds	r3, #8
900018e6:	608b      	str	r3, [r1, #8]
    }
900018e8:	4770      	bx	lr
                if ((pInfo->ImageWidth % 16) != 0)
900018ea:	68cb      	ldr	r3, [r1, #12]
900018ec:	071a      	lsls	r2, r3, #28
900018ee:	d0f4      	beq.n	900018da <HAL_JPEG_InfoReadyCallback+0x12>
                    pInfo->ImageWidth += (16 - (pInfo->ImageWidth % 16));
900018f0:	f023 030f 	bic.w	r3, r3, #15
900018f4:	3310      	adds	r3, #16
900018f6:	60cb      	str	r3, [r1, #12]
900018f8:	e7ef      	b.n	900018da <HAL_JPEG_InfoReadyCallback+0x12>
            if ((pInfo->ImageWidth % 16) != 0)
900018fa:	68cb      	ldr	r3, [r1, #12]
900018fc:	071a      	lsls	r2, r3, #28
900018fe:	d003      	beq.n	90001908 <HAL_JPEG_InfoReadyCallback+0x40>
                pInfo->ImageWidth += (16 - (pInfo->ImageWidth % 16));
90001900:	f023 030f 	bic.w	r3, r3, #15
90001904:	3310      	adds	r3, #16
90001906:	60cb      	str	r3, [r1, #12]
            if ((pInfo->ImageHeight % 16) != 0)
90001908:	688a      	ldr	r2, [r1, #8]
9000190a:	0710      	lsls	r0, r2, #28
9000190c:	d003      	beq.n	90001916 <HAL_JPEG_InfoReadyCallback+0x4e>
                pInfo->ImageHeight += (16 - (pInfo->ImageHeight % 16));
9000190e:	f022 020f 	bic.w	r2, r2, #15
90001912:	3210      	adds	r2, #16
90001914:	608a      	str	r2, [r1, #8]
            hMCU = (pInfo->ImageWidth / MCU_WIDTH_PIXELS);
90001916:	091b      	lsrs	r3, r3, #4
            MCU_TotalNb = (hMCU * vMCU);
90001918:	4905      	ldr	r1, [pc, #20]	; (90001930 <HAL_JPEG_InfoReadyCallback+0x68>)
            vMCU = (pInfo->ImageHeight / MCU_HEIGHT_PIXELS);
9000191a:	0912      	lsrs	r2, r2, #4
            MCU_TotalNb = (hMCU * vMCU);
9000191c:	fb02 f303 	mul.w	r3, r2, r3
90001920:	600b      	str	r3, [r1, #0]
90001922:	4770      	bx	lr
                    pInfo->ImageWidth += (8 - (pInfo->ImageWidth % 8));
90001924:	f023 0307 	bic.w	r3, r3, #7
90001928:	3308      	adds	r3, #8
9000192a:	60cb      	str	r3, [r1, #12]
9000192c:	e7d5      	b.n	900018da <HAL_JPEG_InfoReadyCallback+0x12>
9000192e:	bf00      	nop
90001930:	24005d14 	.word	0x24005d14

90001934 <HAL_JPEG_GetDataCallback>:
    {
90001934:	b410      	push	{r4}
        JPEG_InputImageIndex += NbDecodedData;
90001936:	4c0c      	ldr	r4, [pc, #48]	; (90001968 <HAL_JPEG_GetDataCallback+0x34>)
        if (JPEG_InputImageIndex < JPEG_InputImageSize_Bytes)
90001938:	4a0c      	ldr	r2, [pc, #48]	; (9000196c <HAL_JPEG_GetDataCallback+0x38>)
        JPEG_InputImageIndex += NbDecodedData;
9000193a:	6823      	ldr	r3, [r4, #0]
        if (JPEG_InputImageIndex < JPEG_InputImageSize_Bytes)
9000193c:	6812      	ldr	r2, [r2, #0]
        JPEG_InputImageIndex += NbDecodedData;
9000193e:	440b      	add	r3, r1
        if (JPEG_InputImageIndex < JPEG_InputImageSize_Bytes)
90001940:	4293      	cmp	r3, r2
        JPEG_InputImageIndex += NbDecodedData;
90001942:	6023      	str	r3, [r4, #0]
        if (JPEG_InputImageIndex < JPEG_InputImageSize_Bytes)
90001944:	d302      	bcc.n	9000194c <HAL_JPEG_GetDataCallback+0x18>
    }
90001946:	f85d 4b04 	ldr.w	r4, [sp], #4
9000194a:	4770      	bx	lr
            uint32_t inDataLength = JPEG_InputImageSize_Bytes - JPEG_InputImageIndex;
9000194c:	1ad2      	subs	r2, r2, r3
            JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
9000194e:	4b08      	ldr	r3, [pc, #32]	; (90001970 <HAL_JPEG_GetDataCallback+0x3c>)
90001950:	681c      	ldr	r4, [r3, #0]
            HAL_JPEG_ConfigInputBuffer(hjpeg, (uint8_t*)JPEG_InputImageAddress, inDataLength >= CHUNK_SIZE_IN ? CHUNK_SIZE_IN : inDataLength);
90001952:	f5b2 4f50 	cmp.w	r2, #53248	; 0xd000
            JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
90001956:	4421      	add	r1, r4
            HAL_JPEG_ConfigInputBuffer(hjpeg, (uint8_t*)JPEG_InputImageAddress, inDataLength >= CHUNK_SIZE_IN ? CHUNK_SIZE_IN : inDataLength);
90001958:	bf28      	it	cs
9000195a:	f44f 4250 	movcs.w	r2, #53248	; 0xd000
    }
9000195e:	f85d 4b04 	ldr.w	r4, [sp], #4
            JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
90001962:	6019      	str	r1, [r3, #0]
            HAL_JPEG_ConfigInputBuffer(hjpeg, (uint8_t*)JPEG_InputImageAddress, inDataLength >= CHUNK_SIZE_IN ? CHUNK_SIZE_IN : inDataLength);
90001964:	f007 b812 	b.w	9000898c <HAL_JPEG_ConfigInputBuffer>
90001968:	24005d28 	.word	0x24005d28
9000196c:	24005d34 	.word	0x24005d34
90001970:	24005d30 	.word	0x24005d30

90001974 <HAL_JPEG_DataReadyCallback>:
    {
90001974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State = JPEG_BUFFER_FULL;
90001976:	4c22      	ldr	r4, [pc, #136]	; (90001a00 <HAL_JPEG_DataReadyCallback+0x8c>)
    {
90001978:	4606      	mov	r6, r0
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State = JPEG_BUFFER_FULL;
9000197a:	4d22      	ldr	r5, [pc, #136]	; (90001a04 <HAL_JPEG_DataReadyCallback+0x90>)
9000197c:	6823      	ldr	r3, [r4, #0]
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBufferSize = OutDataLength;
9000197e:	6820      	ldr	r0, [r4, #0]
        const uint32_t MCU = MCU_BlockIndex;
90001980:	4921      	ldr	r1, [pc, #132]	; (90001a08 <HAL_JPEG_DataReadyCallback+0x94>)
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State = JPEG_BUFFER_FULL;
90001982:	011b      	lsls	r3, r3, #4
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBufferSize = OutDataLength;
90001984:	eb05 1000 	add.w	r0, r5, r0, lsl #4
        MCU_BlockIndex += JPEG_ConvertorParams.MCU_pr_line;
90001988:	4f20      	ldr	r7, [pc, #128]	; (90001a0c <HAL_JPEG_DataReadyCallback+0x98>)
        const uint32_t MCU = MCU_BlockIndex;
9000198a:	f8d1 c000 	ldr.w	ip, [r1]
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBufferSize = OutDataLength;
9000198e:	6082      	str	r2, [r0, #8]
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].MCU_index = MCU;
90001990:	6820      	ldr	r0, [r4, #0]
        MCU_BlockIndex += JPEG_ConvertorParams.MCU_pr_line;
90001992:	68fa      	ldr	r2, [r7, #12]
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].MCU_index = MCU;
90001994:	eb05 1000 	add.w	r0, r5, r0, lsl #4
90001998:	f8c0 c00c 	str.w	ip, [r0, #12]
        MCU_BlockIndex += JPEG_ConvertorParams.MCU_pr_line;
9000199c:	6808      	ldr	r0, [r1, #0]
9000199e:	4410      	add	r0, r2
900019a0:	6008      	str	r0, [r1, #0]
        JPEG_OUT_Write_BufferIndex++;
900019a2:	6821      	ldr	r1, [r4, #0]
900019a4:	3101      	adds	r1, #1
900019a6:	6021      	str	r1, [r4, #0]
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State = JPEG_BUFFER_FULL;
900019a8:	2101      	movs	r1, #1
900019aa:	54e9      	strb	r1, [r5, r3]
        if (JPEG_OUT_Write_BufferIndex >= NB_OUTPUT_DATA_BUFFERS)
900019ac:	6823      	ldr	r3, [r4, #0]
900019ae:	428b      	cmp	r3, r1
900019b0:	d901      	bls.n	900019b6 <HAL_JPEG_DataReadyCallback+0x42>
            JPEG_OUT_Write_BufferIndex = 0;
900019b2:	2300      	movs	r3, #0
900019b4:	6023      	str	r3, [r4, #0]
        if (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State != JPEG_BUFFER_EMPTY)
900019b6:	6823      	ldr	r3, [r4, #0]
900019b8:	011b      	lsls	r3, r3, #4
900019ba:	5ceb      	ldrb	r3, [r5, r3]
900019bc:	b983      	cbnz	r3, 900019e0 <HAL_JPEG_DataReadyCallback+0x6c>
        HAL_JPEG_ConfigOutputBuffer(hjpeg, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
900019be:	6823      	ldr	r3, [r4, #0]
900019c0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
900019c4:	4630      	mov	r0, r6
900019c6:	eb05 1503 	add.w	r5, r5, r3, lsl #4
900019ca:	01d2      	lsls	r2, r2, #7
900019cc:	6869      	ldr	r1, [r5, #4]
900019ce:	f006 ffe1 	bl	90008994 <HAL_JPEG_ConfigOutputBuffer>
        if (!DMA2D_reference->isDMARunning() && !DMA2D_reference->getReserved())
900019d2:	4b0f      	ldr	r3, [pc, #60]	; (90001a10 <HAL_JPEG_DataReadyCallback+0x9c>)
900019d4:	681b      	ldr	r3, [r3, #0]
900019d6:	7a1a      	ldrb	r2, [r3, #8]
900019d8:	b90a      	cbnz	r2, 900019de <HAL_JPEG_DataReadyCallback+0x6a>
        return isReserved;
900019da:	7a9b      	ldrb	r3, [r3, #10]
900019dc:	b14b      	cbz	r3, 900019f2 <HAL_JPEG_DataReadyCallback+0x7e>
    }
900019de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            HAL_JPEG_Pause(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
900019e0:	2102      	movs	r1, #2
900019e2:	4630      	mov	r0, r6
900019e4:	f006 ff9a 	bl	9000891c <HAL_JPEG_Pause>
            JPEG_output_is_paused = 1;
900019e8:	4b0a      	ldr	r3, [pc, #40]	; (90001a14 <HAL_JPEG_DataReadyCallback+0xa0>)
900019ea:	2101      	movs	r1, #1
        HAL_JPEG_ConfigOutputBuffer(hjpeg, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
900019ec:	68fa      	ldr	r2, [r7, #12]
            JPEG_output_is_paused = 1;
900019ee:	6019      	str	r1, [r3, #0]
900019f0:	e7e5      	b.n	900019be <HAL_JPEG_DataReadyCallback+0x4a>
            SEM_POST(semDecodingDone);
900019f2:	4b09      	ldr	r3, [pc, #36]	; (90001a18 <HAL_JPEG_DataReadyCallback+0xa4>)
900019f4:	6818      	ldr	r0, [r3, #0]
    }
900019f6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            SEM_POST(semDecodingDone);
900019fa:	f00c b97f 	b.w	9000dcfc <osSemaphoreRelease>
900019fe:	bf00      	nop
90001a00:	24005d38 	.word	0x24005d38
90001a04:	24000008 	.word	0x24000008
90001a08:	24005cfc 	.word	0x24005cfc
90001a0c:	24005d00 	.word	0x24005d00
90001a10:	24005d18 	.word	0x24005d18
90001a14:	24005d2c 	.word	0x24005d2c
90001a18:	24005d3c 	.word	0x24005d3c

90001a1c <HAL_JPEG_ErrorCallback>:
  __ASM volatile ("cpsid i" : : : "memory");
90001a1c:	b672      	cpsid	i
        while (1)
90001a1e:	e7fe      	b.n	90001a1e <HAL_JPEG_ErrorCallback+0x2>

90001a20 <HAL_JPEG_DecodeCpltCallback>:
        Jpeg_HWDecodingEnd = 1;
90001a20:	4b01      	ldr	r3, [pc, #4]	; (90001a28 <HAL_JPEG_DecodeCpltCallback+0x8>)
90001a22:	2201      	movs	r2, #1
90001a24:	601a      	str	r2, [r3, #0]
    }
90001a26:	4770      	bx	lr
90001a28:	24005d24 	.word	0x24005d24

90001a2c <DMA2D_CopyBuffer>:
  * @brief  Configures external DMA2D job to copy YCbCr data to RGB buffer(s)
  * @param job: External job reference
  * @retval None
  */
void DMA2D_CopyBuffer(JPEG_Data_BufferTypeDef& job)
{
90001a2c:	b570      	push	{r4, r5, r6, lr}
    uint32_t xRef, yRef, refline;

    yRef = ((job.MCU_index * MCU_WIDTH_PIXELS) / JPEG_ConvertorParams.WidthExtend) * MCU_WIDTH_PIXELS;
90001a2e:	491b      	ldr	r1, [pc, #108]	; (90001a9c <DMA2D_CopyBuffer+0x70>)
    xRef = ((job.MCU_index * MCU_WIDTH_PIXELS) % JPEG_ConvertorParams.WidthExtend);

    refline = (JPEG_ConvertorParams.ScaledWidth) * yRef + (JPEG_ConvertorParams.bytes_pr_pixel * xRef);

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB565);
90001a30:	2302      	movs	r3, #2
    yRef = ((job.MCU_index * MCU_WIDTH_PIXELS) / JPEG_ConvertorParams.WidthExtend) * MCU_WIDTH_PIXELS;
90001a32:	68c5      	ldr	r5, [r0, #12]
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB565);
90001a34:	4c1a      	ldr	r4, [pc, #104]	; (90001aa0 <DMA2D_CopyBuffer+0x74>)
    yRef = ((job.MCU_index * MCU_WIDTH_PIXELS) / JPEG_ConvertorParams.WidthExtend) * MCU_WIDTH_PIXELS;
90001a36:	680a      	ldr	r2, [r1, #0]
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB565);
90001a38:	6363      	str	r3, [r4, #52]	; 0x34
    yRef = ((job.MCU_index * MCU_WIDTH_PIXELS) / JPEG_ConvertorParams.WidthExtend) * MCU_WIDTH_PIXELS;
90001a3a:	012b      	lsls	r3, r5, #4

    /* Configure DMA2D data size */
    if (job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line))  /*  Last line of frame */
90001a3c:	4e19      	ldr	r6, [pc, #100]	; (90001aa4 <DMA2D_CopyBuffer+0x78>)
    yRef = ((job.MCU_index * MCU_WIDTH_PIXELS) / JPEG_ConvertorParams.WidthExtend) * MCU_WIDTH_PIXELS;
90001a3e:	fbb3 fcf2 	udiv	ip, r3, r2
    xRef = ((job.MCU_index * MCU_WIDTH_PIXELS) % JPEG_ConvertorParams.WidthExtend);
90001a42:	fb02 321c 	mls	r2, r2, ip, r3
    refline = (JPEG_ConvertorParams.ScaledWidth) * yRef + (JPEG_ConvertorParams.bytes_pr_pixel * xRef);
90001a46:	684b      	ldr	r3, [r1, #4]
    if (job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line))  /*  Last line of frame */
90001a48:	6836      	ldr	r6, [r6, #0]
    refline = (JPEG_ConvertorParams.ScaledWidth) * yRef + (JPEG_ConvertorParams.bytes_pr_pixel * xRef);
90001a4a:	fb03 fc0c 	mul.w	ip, r3, ip
    if (job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line))  /*  Last line of frame */
90001a4e:	68cb      	ldr	r3, [r1, #12]
90001a50:	eba6 0e03 	sub.w	lr, r6, r3
    refline = (JPEG_ConvertorParams.ScaledWidth) * yRef + (JPEG_ConvertorParams.bytes_pr_pixel * xRef);
90001a54:	690e      	ldr	r6, [r1, #16]
90001a56:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
    if (job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line))  /*  Last line of frame */
90001a5a:	4575      	cmp	r5, lr
    refline = (JPEG_ConvertorParams.ScaledWidth) * yRef + (JPEG_ConvertorParams.bytes_pr_pixel * xRef);
90001a5c:	fb06 f202 	mul.w	r2, r6, r2
    if (job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line))  /*  Last line of frame */
90001a60:	d316      	bcc.n	90001a90 <DMA2D_CopyBuffer+0x64>
    {
        WRITE_REG(DMA2D->NLR, (JPEG_ConvertorParams.LastLineHeight | ((MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line) << DMA2D_NLR_PL_Pos)));
90001a62:	6889      	ldr	r1, [r1, #8]
90001a64:	ea41 5103 	orr.w	r1, r1, r3, lsl #20
90001a68:	6461      	str	r1, [r4, #68]	; 0x44
    {
        WRITE_REG(DMA2D->NLR, (MCU_HEIGHT_PIXELS | ((MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line) << DMA2D_NLR_PL_Pos)));
    }

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, (reinterpret_cast<uint32_t>(FrameBufferAddress) + refline));
90001a6a:	490f      	ldr	r1, [pc, #60]	; (90001aa8 <DMA2D_CopyBuffer+0x7c>)

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, 480 - (MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line));
90001a6c:	f1c3 031e 	rsb	r3, r3, #30

    /* DMA2D FGPFCCR register configuration */
    WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_YCBCR | (DMA2D_CSS_420 << DMA2D_FGPFCCR_CSS_Pos) | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (0xFFU << DMA2D_FGPFCCR_ALPHA_Pos));

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(job.DataBuffer));
90001a70:	6840      	ldr	r0, [r0, #4]
    WRITE_REG(DMA2D->FGOR, 0);
90001a72:	2400      	movs	r4, #0
    WRITE_REG(DMA2D->OMAR, (reinterpret_cast<uint32_t>(FrameBufferAddress) + refline));
90001a74:	6809      	ldr	r1, [r1, #0]
    WRITE_REG(DMA2D->OOR, 480 - (MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line));
90001a76:	011b      	lsls	r3, r3, #4
    WRITE_REG(DMA2D->OMAR, (reinterpret_cast<uint32_t>(FrameBufferAddress) + refline));
90001a78:	4411      	add	r1, r2
90001a7a:	4a09      	ldr	r2, [pc, #36]	; (90001aa0 <DMA2D_CopyBuffer+0x74>)
90001a7c:	4461      	add	r1, ip
90001a7e:	63d1      	str	r1, [r2, #60]	; 0x3c
    WRITE_REG(DMA2D->OOR, 480 - (MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line));
90001a80:	6413      	str	r3, [r2, #64]	; 0x40
    WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_YCBCR | (DMA2D_CSS_420 << DMA2D_FGPFCCR_CSS_Pos) | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (0xFFU << DMA2D_FGPFCCR_ALPHA_Pos));
90001a82:	490a      	ldr	r1, [pc, #40]	; (90001aac <DMA2D_CopyBuffer+0x80>)

    /* Configure DMA2D contol register */
    WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
90001a84:	4b0a      	ldr	r3, [pc, #40]	; (90001ab0 <DMA2D_CopyBuffer+0x84>)
    WRITE_REG(DMA2D->FGOR, 0);
90001a86:	6114      	str	r4, [r2, #16]
    WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_YCBCR | (DMA2D_CSS_420 << DMA2D_FGPFCCR_CSS_Pos) | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (0xFFU << DMA2D_FGPFCCR_ALPHA_Pos));
90001a88:	61d1      	str	r1, [r2, #28]
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(job.DataBuffer));
90001a8a:	60d0      	str	r0, [r2, #12]
    WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
90001a8c:	6013      	str	r3, [r2, #0]
}
90001a8e:	bd70      	pop	{r4, r5, r6, pc}
        WRITE_REG(DMA2D->NLR, (MCU_HEIGHT_PIXELS | ((MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line) << DMA2D_NLR_PL_Pos)));
90001a90:	0519      	lsls	r1, r3, #20
90001a92:	f041 0110 	orr.w	r1, r1, #16
90001a96:	6461      	str	r1, [r4, #68]	; 0x44
90001a98:	e7e7      	b.n	90001a6a <DMA2D_CopyBuffer+0x3e>
90001a9a:	bf00      	nop
90001a9c:	24005d00 	.word	0x24005d00
90001aa0:	52001000 	.word	0x52001000
90001aa4:	24005d14 	.word	0x24005d14
90001aa8:	24005d1c 	.word	0x24005d1c
90001aac:	ff09000b 	.word	0xff09000b
90001ab0:	00010201 	.word	0x00010201

90001ab4 <DMA2D_ExternalJobCompleted>:
void DMA2D_ExternalJobCompleted(JPEG_Data_BufferTypeDef& job)
{
    job.State = JPEG_BUFFER_EMPTY;
    job.DataBufferSize = 0;

    JPEG_OUT_Read_BufferIndex++;
90001ab4:	4b0c      	ldr	r3, [pc, #48]	; (90001ae8 <DMA2D_ExternalJobCompleted+0x34>)
    job.State = JPEG_BUFFER_EMPTY;
90001ab6:	2100      	movs	r1, #0
90001ab8:	7001      	strb	r1, [r0, #0]
    JPEG_OUT_Read_BufferIndex++;
90001aba:	681a      	ldr	r2, [r3, #0]
    job.DataBufferSize = 0;
90001abc:	6081      	str	r1, [r0, #8]
    JPEG_OUT_Read_BufferIndex++;
90001abe:	3201      	adds	r2, #1
90001ac0:	601a      	str	r2, [r3, #0]
    if (JPEG_OUT_Read_BufferIndex >= NB_OUTPUT_DATA_BUFFERS)
90001ac2:	681a      	ldr	r2, [r3, #0]
90001ac4:	2a01      	cmp	r2, #1
90001ac6:	d900      	bls.n	90001aca <DMA2D_ExternalJobCompleted+0x16>
    {
        JPEG_OUT_Read_BufferIndex = 0;
90001ac8:	6019      	str	r1, [r3, #0]
    }

    /* Check if last line */
    if (job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line))
90001aca:	4b08      	ldr	r3, [pc, #32]	; (90001aec <DMA2D_ExternalJobCompleted+0x38>)
90001acc:	4908      	ldr	r1, [pc, #32]	; (90001af0 <DMA2D_ExternalJobCompleted+0x3c>)
90001ace:	681b      	ldr	r3, [r3, #0]
90001ad0:	68c9      	ldr	r1, [r1, #12]
90001ad2:	68c2      	ldr	r2, [r0, #12]
90001ad4:	1a5b      	subs	r3, r3, r1
90001ad6:	429a      	cmp	r2, r3
90001ad8:	d302      	bcc.n	90001ae0 <DMA2D_ExternalJobCompleted+0x2c>
    {
        DMA2D_CopyBufferEnd = 1;
90001ada:	4b06      	ldr	r3, [pc, #24]	; (90001af4 <DMA2D_ExternalJobCompleted+0x40>)
90001adc:	2201      	movs	r2, #1
90001ade:	601a      	str	r2, [r3, #0]
    }

    /* Signal decoder thread to wake up and continue decoding */
    SEM_POST(semDecodingDone);
90001ae0:	4b05      	ldr	r3, [pc, #20]	; (90001af8 <DMA2D_ExternalJobCompleted+0x44>)
90001ae2:	6818      	ldr	r0, [r3, #0]
90001ae4:	f00c b90a 	b.w	9000dcfc <osSemaphoreRelease>
90001ae8:	24005cf8 	.word	0x24005cf8
90001aec:	24005d14 	.word	0x24005d14
90001af0:	24005d00 	.word	0x24005d00
90001af4:	24005cf4 	.word	0x24005cf4
90001af8:	24005d3c 	.word	0x24005d3c

90001afc <_ZN8touchgfx10OSWrappers10initializeEv>:
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
90001afc:	2101      	movs	r1, #1
90001afe:	2200      	movs	r2, #0
{
90001b00:	b508      	push	{r3, lr}
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
90001b02:	4608      	mov	r0, r1
90001b04:	f00c f876 	bl	9000dbf4 <osSemaphoreNew>
90001b08:	4b0b      	ldr	r3, [pc, #44]	; (90001b38 <_ZN8touchgfx10OSWrappers10initializeEv+0x3c>)
90001b0a:	6018      	str	r0, [r3, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
90001b0c:	b140      	cbz	r0, 90001b20 <_ZN8touchgfx10OSWrappers10initializeEv+0x24>

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
90001b0e:	2200      	movs	r2, #0
90001b10:	2104      	movs	r1, #4
90001b12:	2001      	movs	r0, #1
90001b14:	f00c f91e 	bl	9000dd54 <osMessageQueueNew>
90001b18:	4b08      	ldr	r3, [pc, #32]	; (90001b3c <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
90001b1a:	6018      	str	r0, [r3, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
90001b1c:	b130      	cbz	r0, 90001b2c <_ZN8touchgfx10OSWrappers10initializeEv+0x30>
}
90001b1e:	bd08      	pop	{r3, pc}
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
90001b20:	4b07      	ldr	r3, [pc, #28]	; (90001b40 <_ZN8touchgfx10OSWrappers10initializeEv+0x44>)
90001b22:	2128      	movs	r1, #40	; 0x28
90001b24:	4a07      	ldr	r2, [pc, #28]	; (90001b44 <_ZN8touchgfx10OSWrappers10initializeEv+0x48>)
90001b26:	4808      	ldr	r0, [pc, #32]	; (90001b48 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>)
90001b28:	f021 fec4 	bl	900238b4 <__assert_func>
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
90001b2c:	4b07      	ldr	r3, [pc, #28]	; (90001b4c <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
90001b2e:	212c      	movs	r1, #44	; 0x2c
90001b30:	4a04      	ldr	r2, [pc, #16]	; (90001b44 <_ZN8touchgfx10OSWrappers10initializeEv+0x48>)
90001b32:	4805      	ldr	r0, [pc, #20]	; (90001b48 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>)
90001b34:	f021 febe 	bl	900238b4 <__assert_func>
90001b38:	24005d44 	.word	0x24005d44
90001b3c:	24005d40 	.word	0x24005d40
90001b40:	90026b5c 	.word	0x90026b5c
90001b44:	90026ba8 	.word	0x90026ba8
90001b48:	90026bd8 	.word	0x90026bd8
90001b4c:	90026c1c 	.word	0x90026c1c

90001b50 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:
/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
90001b50:	4b02      	ldr	r3, [pc, #8]	; (90001b5c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0xc>)
90001b52:	f04f 31ff 	mov.w	r1, #4294967295
90001b56:	6818      	ldr	r0, [r3, #0]
90001b58:	f00c b89c 	b.w	9000dc94 <osSemaphoreAcquire>
90001b5c:	24005d44 	.word	0x24005d44

90001b60 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:
/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
    osSemaphoreRelease(frame_buffer_sem);
90001b60:	4b01      	ldr	r3, [pc, #4]	; (90001b68 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x8>)
90001b62:	6818      	ldr	r0, [r3, #0]
90001b64:	f00c b8ca 	b.w	9000dcfc <osSemaphoreRelease>
90001b68:	24005d44 	.word	0x24005d44

90001b6c <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, 0);
90001b6c:	4b02      	ldr	r3, [pc, #8]	; (90001b78 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0xc>)
90001b6e:	2100      	movs	r1, #0
90001b70:	6818      	ldr	r0, [r3, #0]
90001b72:	f00c b88f 	b.w	9000dc94 <osSemaphoreAcquire>
90001b76:	bf00      	nop
90001b78:	24005d44 	.word	0x24005d44

90001b7c <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
90001b7c:	4b01      	ldr	r3, [pc, #4]	; (90001b84 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x8>)
90001b7e:	6818      	ldr	r0, [r3, #0]
90001b80:	f00c b8bc 	b.w	9000dcfc <osSemaphoreRelease>
90001b84:	24005d44 	.word	0x24005d44

90001b88 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
90001b88:	4803      	ldr	r0, [pc, #12]	; (90001b98 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x10>)
90001b8a:	2300      	movs	r3, #0
90001b8c:	4903      	ldr	r1, [pc, #12]	; (90001b9c <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x14>)
90001b8e:	461a      	mov	r2, r3
90001b90:	6800      	ldr	r0, [r0, #0]
90001b92:	f00c b91d 	b.w	9000ddd0 <osMessageQueuePut>
90001b96:	bf00      	nop
90001b98:	24005d40 	.word	0x24005d40
90001b9c:	24000028 	.word	0x24000028

90001ba0 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
90001ba0:	b510      	push	{r4, lr}
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
90001ba2:	2300      	movs	r3, #0
{
90001ba4:	b082      	sub	sp, #8
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
90001ba6:	4c07      	ldr	r4, [pc, #28]	; (90001bc4 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x24>)
90001ba8:	461a      	mov	r2, r3
90001baa:	a901      	add	r1, sp, #4
90001bac:	6820      	ldr	r0, [r4, #0]
90001bae:	f00c f951 	bl	9000de54 <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
90001bb2:	f04f 33ff 	mov.w	r3, #4294967295
90001bb6:	2200      	movs	r2, #0
90001bb8:	a901      	add	r1, sp, #4
90001bba:	6820      	ldr	r0, [r4, #0]
90001bbc:	f00c f94a 	bl	9000de54 <osMessageQueueGet>
}
90001bc0:	b002      	add	sp, #8
90001bc2:	bd10      	pop	{r4, pc}
90001bc4:	24005d40 	.word	0x24005d40

90001bc8 <_ZN8touchgfx13DMA_Interface5flushEv>:
        waitForFrameBufferSemaphore();
90001bc8:	6803      	ldr	r3, [r0, #0]
90001bca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
90001bcc:	4718      	bx	r3
90001bce:	bf00      	nop

90001bd0 <_ZN8STM32DMA10getDMATypeEv>:
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
    {
        return touchgfx::DMA_TYPE_CHROMART;
    }
90001bd0:	2001      	movs	r0, #1
90001bd2:	4770      	bx	lr

90001bd4 <_ZN8STM32DMAD1Ev>:
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0])), started_by_external_job(false), mutexIsRunning(0)
{
    mutexIsRunning = MUTEX_CREATE();
}

STM32DMA::~STM32DMA()
90001bd4:	4905      	ldr	r1, [pc, #20]	; (90001bec <_ZN8STM32DMAD1Ev+0x18>)
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
90001bd6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
90001bda:	4b05      	ldr	r3, [pc, #20]	; (90001bf0 <_ZN8STM32DMAD1Ev+0x1c>)
90001bdc:	6001      	str	r1, [r0, #0]
90001bde:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
90001be2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
90001be6:	f3bf 8f6f 	isb	sy
{
    /* Disable DMA2D global Interrupt */
    NVIC_DisableIRQ(DMA2D_IRQn);
}
90001bea:	4770      	bx	lr
90001bec:	90026db8 	.word	0x90026db8
90001bf0:	e000e100 	.word	0xe000e100

90001bf4 <_ZN8STM32DMA10initializeEv>:

void STM32DMA::initialize()
{
    /* Ensure DMA2D Clock is enabled */
    __HAL_RCC_DMA2D_CLK_ENABLE();
90001bf4:	4b0f      	ldr	r3, [pc, #60]	; (90001c34 <_ZN8STM32DMA10initializeEv+0x40>)
{
90001bf6:	b082      	sub	sp, #8
    __HAL_RCC_DMA2D_FORCE_RESET();
    __HAL_RCC_DMA2D_RELEASE_RESET();

    /* Add transfer complete callback function */
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
90001bf8:	490f      	ldr	r1, [pc, #60]	; (90001c38 <_ZN8STM32DMA10initializeEv+0x44>)
    __HAL_RCC_DMA2D_CLK_ENABLE();
90001bfa:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
90001bfe:	480f      	ldr	r0, [pc, #60]	; (90001c3c <_ZN8STM32DMA10initializeEv+0x48>)
    __HAL_RCC_DMA2D_CLK_ENABLE();
90001c00:	f042 0210 	orr.w	r2, r2, #16
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
90001c04:	6208      	str	r0, [r1, #32]
    __HAL_RCC_DMA2D_CLK_ENABLE();
90001c06:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
90001c0a:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
90001c0e:	f002 0210 	and.w	r2, r2, #16
90001c12:	9201      	str	r2, [sp, #4]
90001c14:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_DMA2D_FORCE_RESET();
90001c16:	6fda      	ldr	r2, [r3, #124]	; 0x7c
90001c18:	f042 0210 	orr.w	r2, r2, #16
90001c1c:	67da      	str	r2, [r3, #124]	; 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
90001c1e:	6fda      	ldr	r2, [r3, #124]	; 0x7c
90001c20:	f022 0210 	bic.w	r2, r2, #16
90001c24:	67da      	str	r2, [r3, #124]	; 0x7c
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
90001c26:	4b06      	ldr	r3, [pc, #24]	; (90001c40 <_ZN8STM32DMA10initializeEv+0x4c>)
90001c28:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
90001c2c:	609a      	str	r2, [r3, #8]

    /* Enable DMA2D global Interrupt */
    NVIC_EnableIRQ(DMA2D_IRQn);
}
90001c2e:	b002      	add	sp, #8
90001c30:	4770      	bx	lr
90001c32:	bf00      	nop
90001c34:	58024400 	.word	0x58024400
90001c38:	24006f94 	.word	0x24006f94
90001c3c:	90002021 	.word	0x90002021
90001c40:	e000e100 	.word	0xe000e100

90001c44 <_ZN8STM32DMA11getBlitCapsEv>:
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
}
90001c44:	f240 30ef 	movw	r0, #1007	; 0x3ef
90001c48:	4770      	bx	lr
90001c4a:	bf00      	nop

90001c4c <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
90001c4c:	4909      	ldr	r1, [pc, #36]	; (90001c74 <_ZN8STM32DMAD0Ev+0x28>)
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
90001c4e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
90001c52:	4b09      	ldr	r3, [pc, #36]	; (90001c78 <_ZN8STM32DMAD0Ev+0x2c>)
90001c54:	b510      	push	{r4, lr}
90001c56:	6001      	str	r1, [r0, #0]
90001c58:	4604      	mov	r4, r0
90001c5a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
90001c5e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
90001c62:	f3bf 8f6f 	isb	sy
}
90001c66:	f640 51a8 	movw	r1, #3496	; 0xda8
90001c6a:	f021 fdf4 	bl	90023856 <_ZdlPvj>
90001c6e:	4620      	mov	r0, r4
90001c70:	bd10      	pop	{r4, pc}
90001c72:	bf00      	nop
90001c74:	90026db8 	.word	0x90026db8
90001c78:	e000e100 	.word	0xe000e100

90001c7c <_ZN8STM32DMA5startEv>:
                execute();
            }
        }
    }

    virtual void start()
90001c7c:	b510      	push	{r4, lr}
90001c7e:	4604      	mov	r4, r0
    {
        MUTEX_LOCK(mutexIsRunning);
90001c80:	f04f 31ff 	mov.w	r1, #4294967295
90001c84:	f8d0 0da4 	ldr.w	r0, [r0, #3492]	; 0xda4
90001c88:	f00b ff6e 	bl	9000db68 <osMutexAcquire>
        if (!queue.isEmpty() && isAllowed && !isRunning)
90001c8c:	6860      	ldr	r0, [r4, #4]
90001c8e:	6803      	ldr	r3, [r0, #0]
90001c90:	681b      	ldr	r3, [r3, #0]
90001c92:	4798      	blx	r3
90001c94:	b908      	cbnz	r0, 90001c9a <_ZN8STM32DMA5startEv+0x1e>
90001c96:	7a63      	ldrb	r3, [r4, #9]
90001c98:	b963      	cbnz	r3, 90001cb4 <_ZN8STM32DMA5startEv+0x38>
        {
            started_by_external_job = false;
            execute();
        }
        else if ((Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL) && !isReserved && !isRunning)
90001c9a:	4915      	ldr	r1, [pc, #84]	; (90001cf0 <_ZN8STM32DMA5startEv+0x74>)
90001c9c:	4a15      	ldr	r2, [pc, #84]	; (90001cf4 <_ZN8STM32DMA5startEv+0x78>)
90001c9e:	680b      	ldr	r3, [r1, #0]
90001ca0:	011b      	lsls	r3, r3, #4
90001ca2:	5cd3      	ldrb	r3, [r2, r3]
90001ca4:	2b01      	cmp	r3, #1
90001ca6:	d014      	beq.n	90001cd2 <_ZN8STM32DMA5startEv+0x56>
        {
            started_by_external_job = true;
            externalJobExecute();
        }
        MUTEX_UNLOCK(mutexIsRunning);
90001ca8:	f8d4 0da4 	ldr.w	r0, [r4, #3492]	; 0xda4
    }
90001cac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        MUTEX_UNLOCK(mutexIsRunning);
90001cb0:	f00b bf7e 	b.w	9000dbb0 <osMutexRelease>
        if (!queue.isEmpty() && isAllowed && !isRunning)
90001cb4:	7a23      	ldrb	r3, [r4, #8]
90001cb6:	2b00      	cmp	r3, #0
90001cb8:	d1ef      	bne.n	90001c9a <_ZN8STM32DMA5startEv+0x1e>
            execute();
90001cba:	6822      	ldr	r2, [r4, #0]
90001cbc:	4620      	mov	r0, r4
            started_by_external_job = false;
90001cbe:	f884 3da0 	strb.w	r3, [r4, #3488]	; 0xda0
            execute();
90001cc2:	6a53      	ldr	r3, [r2, #36]	; 0x24
90001cc4:	4798      	blx	r3
        MUTEX_UNLOCK(mutexIsRunning);
90001cc6:	f8d4 0da4 	ldr.w	r0, [r4, #3492]	; 0xda4
    }
90001cca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        MUTEX_UNLOCK(mutexIsRunning);
90001cce:	f00b bf6f 	b.w	9000dbb0 <osMutexRelease>
        else if ((Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL) && !isReserved && !isRunning)
90001cd2:	7aa0      	ldrb	r0, [r4, #10]
90001cd4:	2800      	cmp	r0, #0
90001cd6:	d1e7      	bne.n	90001ca8 <_ZN8STM32DMA5startEv+0x2c>
90001cd8:	7a20      	ldrb	r0, [r4, #8]
90001cda:	2800      	cmp	r0, #0
90001cdc:	d1e4      	bne.n	90001ca8 <_ZN8STM32DMA5startEv+0x2c>
     * @param None
     */
    void externalJobExecute()
    {
        isRunning = true;
        DMA2D_CopyBuffer(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
90001cde:	6808      	ldr	r0, [r1, #0]
            started_by_external_job = true;
90001ce0:	f884 3da0 	strb.w	r3, [r4, #3488]	; 0xda0
        DMA2D_CopyBuffer(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
90001ce4:	eb02 1000 	add.w	r0, r2, r0, lsl #4
        isRunning = true;
90001ce8:	7223      	strb	r3, [r4, #8]
        DMA2D_CopyBuffer(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
90001cea:	f7ff fe9f 	bl	90001a2c <DMA2D_CopyBuffer>
    }
90001cee:	e7db      	b.n	90001ca8 <_ZN8STM32DMA5startEv+0x2c>
90001cf0:	24005cf8 	.word	0x24005cf8
90001cf4:	24000008 	.word	0x24000008

90001cf8 <_ZN8STM32DMA18signalDMAInterruptEv>:
        if (!started_by_external_job)
90001cf8:	f890 3da0 	ldrb.w	r3, [r0, #3488]	; 0xda0
    virtual void signalDMAInterrupt()
90001cfc:	b510      	push	{r4, lr}
90001cfe:	4604      	mov	r4, r0
        if (!started_by_external_job)
90001d00:	b953      	cbnz	r3, 90001d18 <_ZN8STM32DMA18signalDMAInterruptEv+0x20>
            executeCompleted();
90001d02:	6803      	ldr	r3, [r0, #0]
90001d04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90001d06:	4798      	blx	r3
            if (Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL && !DMA2D_CopyBufferEnd && !isReserved && !isRunning)
90001d08:	491c      	ldr	r1, [pc, #112]	; (90001d7c <_ZN8STM32DMA18signalDMAInterruptEv+0x84>)
90001d0a:	4a1d      	ldr	r2, [pc, #116]	; (90001d80 <_ZN8STM32DMA18signalDMAInterruptEv+0x88>)
90001d0c:	680b      	ldr	r3, [r1, #0]
90001d0e:	011b      	lsls	r3, r3, #4
90001d10:	5cd3      	ldrb	r3, [r2, r3]
90001d12:	2b01      	cmp	r3, #1
90001d14:	d014      	beq.n	90001d40 <_ZN8STM32DMA18signalDMAInterruptEv+0x48>
    }
90001d16:	bd10      	pop	{r4, pc}
        if (isRunning)
90001d18:	7a03      	ldrb	r3, [r0, #8]
90001d1a:	bb2b      	cbnz	r3, 90001d68 <_ZN8STM32DMA18signalDMAInterruptEv+0x70>
            if (!queue.isEmpty() && isAllowed)
90001d1c:	6860      	ldr	r0, [r4, #4]
90001d1e:	6803      	ldr	r3, [r0, #0]
90001d20:	681b      	ldr	r3, [r3, #0]
90001d22:	4798      	blx	r3
90001d24:	4603      	mov	r3, r0
90001d26:	2800      	cmp	r0, #0
90001d28:	d1f5      	bne.n	90001d16 <_ZN8STM32DMA18signalDMAInterruptEv+0x1e>
90001d2a:	7a62      	ldrb	r2, [r4, #9]
90001d2c:	2a00      	cmp	r2, #0
90001d2e:	d0f2      	beq.n	90001d16 <_ZN8STM32DMA18signalDMAInterruptEv+0x1e>
                execute();
90001d30:	6822      	ldr	r2, [r4, #0]
90001d32:	4620      	mov	r0, r4
                started_by_external_job = false;
90001d34:	f884 3da0 	strb.w	r3, [r4, #3488]	; 0xda0
                execute();
90001d38:	6a53      	ldr	r3, [r2, #36]	; 0x24
    }
90001d3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
                execute();
90001d3e:	4718      	bx	r3
            if (Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL && !DMA2D_CopyBufferEnd && !isReserved && !isRunning)
90001d40:	4810      	ldr	r0, [pc, #64]	; (90001d84 <_ZN8STM32DMA18signalDMAInterruptEv+0x8c>)
90001d42:	6800      	ldr	r0, [r0, #0]
90001d44:	2800      	cmp	r0, #0
90001d46:	d1e6      	bne.n	90001d16 <_ZN8STM32DMA18signalDMAInterruptEv+0x1e>
90001d48:	7aa0      	ldrb	r0, [r4, #10]
90001d4a:	2800      	cmp	r0, #0
90001d4c:	d1e3      	bne.n	90001d16 <_ZN8STM32DMA18signalDMAInterruptEv+0x1e>
90001d4e:	7a20      	ldrb	r0, [r4, #8]
90001d50:	2800      	cmp	r0, #0
90001d52:	d1e0      	bne.n	90001d16 <_ZN8STM32DMA18signalDMAInterruptEv+0x1e>
        DMA2D_CopyBuffer(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
90001d54:	6808      	ldr	r0, [r1, #0]
                started_by_external_job = true;
90001d56:	f884 3da0 	strb.w	r3, [r4, #3488]	; 0xda0
        isRunning = true;
90001d5a:	7223      	strb	r3, [r4, #8]
        DMA2D_CopyBuffer(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
90001d5c:	eb02 1000 	add.w	r0, r2, r0, lsl #4
    }
90001d60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        DMA2D_CopyBuffer(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
90001d64:	f7ff be62 	b.w	90001a2c <DMA2D_CopyBuffer>
            DMA2D_ExternalJobCompleted(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
90001d68:	4904      	ldr	r1, [pc, #16]	; (90001d7c <_ZN8STM32DMA18signalDMAInterruptEv+0x84>)
            isRunning = false;
90001d6a:	2200      	movs	r2, #0
            DMA2D_ExternalJobCompleted(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
90001d6c:	4b04      	ldr	r3, [pc, #16]	; (90001d80 <_ZN8STM32DMA18signalDMAInterruptEv+0x88>)
90001d6e:	6808      	ldr	r0, [r1, #0]
            isRunning = false;
90001d70:	7222      	strb	r2, [r4, #8]
            DMA2D_ExternalJobCompleted(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
90001d72:	eb03 1000 	add.w	r0, r3, r0, lsl #4
90001d76:	f7ff fe9d 	bl	90001ab4 <DMA2D_ExternalJobCompleted>
90001d7a:	e7cf      	b.n	90001d1c <_ZN8STM32DMA18signalDMAInterruptEv+0x24>
90001d7c:	24005cf8 	.word	0x24005cf8
90001d80:	24000008 	.word	0x24000008
90001d84:	24005cf4 	.word	0x24005cf4

90001d88 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
90001d88:	b538      	push	{r3, r4, r5, lr}
    switch (format)
90001d8a:	7f8b      	ldrb	r3, [r1, #30]
90001d8c:	2b0a      	cmp	r3, #10
90001d8e:	d83e      	bhi.n	90001e0e <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x86>
90001d90:	e8df f003 	tbb	[pc, r3]
90001d94:	3d2a063b 	.word	0x3d2a063b
90001d98:	063d3d3d 	.word	0x063d3d3d
90001d9c:	0606      	.short	0x0606
90001d9e:	06          	.byte	0x06
90001d9f:	00          	.byte	0x00
90001da0:	2401      	movs	r4, #1

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
90001da2:	f8b1 c014 	ldrh.w	ip, [r1, #20]
90001da6:	8ac8      	ldrh	r0, [r1, #22]

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
90001da8:	8b4a      	ldrh	r2, [r1, #26]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
90001daa:	4b1c      	ldr	r3, [pc, #112]	; (90001e1c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x94>)
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
90001dac:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
90001db0:	eba2 020c 	sub.w	r2, r2, ip
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
90001db4:	635c      	str	r4, [r3, #52]	; 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
90001db6:	6458      	str	r0, [r3, #68]	; 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
90001db8:	6908      	ldr	r0, [r1, #16]
90001dba:	63d8      	str	r0, [r3, #60]	; 0x3c
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
90001dbc:	641a      	str	r2, [r3, #64]	; 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
90001dbe:	680d      	ldr	r5, [r1, #0]
90001dc0:	2d08      	cmp	r5, #8
90001dc2:	d013      	beq.n	90001dec <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x64>
    {
        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));

        /* DMA2D FGOR register configuration */
        WRITE_REG(DMA2D->FGOR, 0);
90001dc4:	2200      	movs	r2, #0
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
90001dc6:	61dc      	str	r4, [r3, #28]

        /* Set color */
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
90001dc8:	4c15      	ldr	r4, [pc, #84]	; (90001e20 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x98>)
        WRITE_REG(DMA2D->FGOR, 0);
90001dca:	611a      	str	r2, [r3, #16]
     *
     * @return The result of the operation.
     */
    operator uint32_t() const
    {
        return color;
90001dcc:	68c9      	ldr	r1, [r1, #12]
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));
90001dce:	0a0a      	lsrs	r2, r1, #8
90001dd0:	0948      	lsrs	r0, r1, #5
90001dd2:	f3c1 01c4 	ubfx	r1, r1, #3, #5
90001dd6:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
90001dda:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
90001dde:	4302      	orrs	r2, r0
90001de0:	430a      	orrs	r2, r1
90001de2:	639a      	str	r2, [r3, #56]	; 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
90001de4:	601c      	str	r4, [r3, #0]
    }
}
90001de6:	bd38      	pop	{r3, r4, r5, pc}
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
90001de8:	2400      	movs	r4, #0
90001dea:	e7da      	b.n	90001da2 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1a>
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
90001dec:	619a      	str	r2, [r3, #24]
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
90001dee:	611a      	str	r2, [r3, #16]
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
90001df0:	625c      	str	r4, [r3, #36]	; 0x24
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_FGPFCCR_ALPHA));
90001df2:	4a0c      	ldr	r2, [pc, #48]	; (90001e24 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x9c>)
90001df4:	7f0c      	ldrb	r4, [r1, #28]
90001df6:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
90001dfa:	4c0b      	ldr	r4, [pc, #44]	; (90001e28 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xa0>)
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_FGPFCCR_ALPHA));
90001dfc:	61da      	str	r2, [r3, #28]
90001dfe:	68ca      	ldr	r2, [r1, #12]
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
90001e00:	621a      	str	r2, [r3, #32]
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
90001e02:	6158      	str	r0, [r3, #20]
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
90001e04:	60d8      	str	r0, [r3, #12]
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
90001e06:	601c      	str	r4, [r3, #0]
}
90001e08:	bd38      	pop	{r3, r4, r5, pc}
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
90001e0a:	2402      	movs	r4, #2
90001e0c:	e7c9      	b.n	90001da2 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1a>
        assert(0 && "Unsupported Format!");
90001e0e:	4b07      	ldr	r3, [pc, #28]	; (90001e2c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xa4>)
90001e10:	2187      	movs	r1, #135	; 0x87
90001e12:	4a07      	ldr	r2, [pc, #28]	; (90001e30 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xa8>)
90001e14:	4807      	ldr	r0, [pc, #28]	; (90001e34 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xac>)
90001e16:	f021 fd4d 	bl	900238b4 <__assert_func>
90001e1a:	bf00      	nop
90001e1c:	52001000 	.word	0x52001000
90001e20:	00030201 	.word	0x00030201
90001e24:	00010009 	.word	0x00010009
90001e28:	00020201 	.word	0x00020201
90001e2c:	90026c60 	.word	0x90026c60
90001e30:	90026c7c 	.word	0x90026c7c
90001e34:	90026cc8 	.word	0x90026cc8

90001e38 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
{
90001e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
90001e3a:	f891 e01d 	ldrb.w	lr, [r1, #29]
    switch (format)
90001e3e:	f1be 0f0b 	cmp.w	lr, #11
90001e42:	f200 80c1 	bhi.w	90001fc8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x190>
90001e46:	e8df f01e 	tbh	[pc, lr, lsl #1]
90001e4a:	0063      	.short	0x0063
90001e4c:	004c0065 	.word	0x004c0065
90001e50:	00bf00bf 	.word	0x00bf00bf
90001e54:	00bf00bf 	.word	0x00bf00bf
90001e58:	000c000c 	.word	0x000c000c
90001e5c:	000c000c 	.word	0x000c000c
90001e60:	000c      	.short	0x000c
        dma2dColorMode = DMA2D_INPUT_L8;
90001e62:	2505      	movs	r5, #5
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
90001e64:	f891 c01e 	ldrb.w	ip, [r1, #30]
    switch (format)
90001e68:	f1bc 0f0b 	cmp.w	ip, #11
90001e6c:	f200 80ac 	bhi.w	90001fc8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x190>
90001e70:	e8df f00c 	tbb	[pc, ip]
90001e74:	aa0e4b52 	.word	0xaa0e4b52
90001e78:	06aaaaaa 	.word	0x06aaaaaa
90001e7c:	06060606 	.word	0x06060606
    switch (format)
90001e80:	f1ac 0307 	sub.w	r3, ip, #7
90001e84:	2b03      	cmp	r3, #3
90001e86:	f200 80a5 	bhi.w	90001fd4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x19c>
90001e8a:	2605      	movs	r6, #5
90001e8c:	2701      	movs	r7, #1
90001e8e:	e001      	b.n	90001e94 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x5c>
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
90001e90:	2600      	movs	r6, #0
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
90001e92:	4637      	mov	r7, r6
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
90001e94:	8a8b      	ldrh	r3, [r1, #20]
90001e96:	8b4a      	ldrh	r2, [r1, #26]
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
90001e98:	8b0c      	ldrh	r4, [r1, #24]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
90001e9a:	8ac8      	ldrh	r0, [r1, #22]
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
90001e9c:	1ad2      	subs	r2, r2, r3
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
90001e9e:	1ae4      	subs	r4, r4, r3
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
90001ea0:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
90001ea4:	4b52      	ldr	r3, [pc, #328]	; (90001ff0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1b8>)
90001ea6:	641a      	str	r2, [r3, #64]	; 0x40
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
90001ea8:	619a      	str	r2, [r3, #24]
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
90001eaa:	611c      	str	r4, [r3, #16]
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
90001eac:	684a      	ldr	r2, [r1, #4]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
90001eae:	635f      	str	r7, [r3, #52]	; 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
90001eb0:	6458      	str	r0, [r3, #68]	; 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
90001eb2:	6908      	ldr	r0, [r1, #16]
90001eb4:	63d8      	str	r0, [r3, #60]	; 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
90001eb6:	60da      	str	r2, [r3, #12]
    switch (blitOp.operation)
90001eb8:	680a      	ldr	r2, [r1, #0]
90001eba:	2a80      	cmp	r2, #128	; 0x80
90001ebc:	d03b      	beq.n	90001f36 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xfe>
90001ebe:	d812      	bhi.n	90001ee6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xae>
90001ec0:	2a20      	cmp	r2, #32
90001ec2:	d02c      	beq.n	90001f1e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xe6>
90001ec4:	2a40      	cmp	r2, #64	; 0x40
90001ec6:	d02a      	beq.n	90001f1e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xe6>
90001ec8:	2a04      	cmp	r2, #4
90001eca:	d169      	bne.n	90001fa0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x168>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
90001ecc:	7f0a      	ldrb	r2, [r1, #28]
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
90001ece:	4949      	ldr	r1, [pc, #292]	; (90001ff4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1bc>)
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
90001ed0:	ea45 6202 	orr.w	r2, r5, r2, lsl #24
90001ed4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
90001ed8:	61da      	str	r2, [r3, #28]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
90001eda:	625e      	str	r6, [r3, #36]	; 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
90001edc:	6158      	str	r0, [r3, #20]
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
90001ede:	6019      	str	r1, [r3, #0]
}
90001ee0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
90001ee2:	2500      	movs	r5, #0
90001ee4:	e7be      	b.n	90001e64 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c>
    switch (blitOp.operation)
90001ee6:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
90001eea:	d067      	beq.n	90001fbc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x184>
90001eec:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
90001ef0:	d156      	bne.n	90001fa0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x168>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
90001ef2:	7f0c      	ldrb	r4, [r1, #28]
90001ef4:	4a40      	ldr	r2, [pc, #256]	; (90001ff8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1c0>)
90001ef6:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
90001efa:	61da      	str	r2, [r3, #28]
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
90001efc:	4a3d      	ldr	r2, [pc, #244]	; (90001ff4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1bc>)
90001efe:	68c9      	ldr	r1, [r1, #12]
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
90001f00:	6219      	str	r1, [r3, #32]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
90001f02:	625e      	str	r6, [r3, #36]	; 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
90001f04:	6158      	str	r0, [r3, #20]
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
90001f06:	601a      	str	r2, [r3, #0]
}
90001f08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch (format)
90001f0a:	2601      	movs	r6, #1
90001f0c:	4637      	mov	r7, r6
90001f0e:	e7c1      	b.n	90001e94 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x5c>
90001f10:	2502      	movs	r5, #2
90001f12:	e7a7      	b.n	90001e64 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c>
        dma2dColorMode = DMA2D_INPUT_RGB888;
90001f14:	2501      	movs	r5, #1
90001f16:	e7a5      	b.n	90001e64 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c>
        dma2dColorMode = DMA2D_INPUT_RGB565;
90001f18:	2602      	movs	r6, #2
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
90001f1a:	4637      	mov	r7, r6
90001f1c:	e7ba      	b.n	90001e94 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x5c>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
90001f1e:	7f0b      	ldrb	r3, [r1, #28]
90001f20:	4a33      	ldr	r2, [pc, #204]	; (90001ff0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1b8>)
90001f22:	ea45 6303 	orr.w	r3, r5, r3, lsl #24
90001f26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
90001f2a:	61d3      	str	r3, [r2, #28]
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
90001f2c:	4b31      	ldr	r3, [pc, #196]	; (90001ff4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1bc>)
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
90001f2e:	6256      	str	r6, [r2, #36]	; 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
90001f30:	6150      	str	r0, [r2, #20]
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
90001f32:	6013      	str	r3, [r2, #0]
}
90001f34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
90001f36:	688a      	ldr	r2, [r1, #8]
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
90001f38:	1d14      	adds	r4, r2, #4
90001f3a:	62dc      	str	r4, [r3, #44]	; 0x2c
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
90001f3c:	7f0c      	ldrb	r4, [r1, #28]
            switch ((Bitmap::ClutFormat)palette->format)
90001f3e:	7811      	ldrb	r1, [r2, #0]
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
90001f40:	ea45 6504 	orr.w	r5, r5, r4, lsl #24
90001f44:	f445 3500 	orr.w	r5, r5, #131072	; 0x20000
90001f48:	61dd      	str	r5, [r3, #28]
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
90001f4a:	625e      	str	r6, [r3, #36]	; 0x24
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
90001f4c:	6158      	str	r0, [r3, #20]
            switch ((Bitmap::ClutFormat)palette->format)
90001f4e:	b9b1      	cbnz	r1, 90001f7e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x146>
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
90001f50:	8851      	ldrh	r1, [r2, #2]
            bool blend = true;
90001f52:	2401      	movs	r4, #1
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
90001f54:	69d8      	ldr	r0, [r3, #28]
90001f56:	4a29      	ldr	r2, [pc, #164]	; (90001ffc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1c4>)
90001f58:	3901      	subs	r1, #1
90001f5a:	4002      	ands	r2, r0
90001f5c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
90001f60:	61da      	str	r2, [r3, #28]
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
90001f62:	4a23      	ldr	r2, [pc, #140]	; (90001ff0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1b8>)
90001f64:	69d3      	ldr	r3, [r2, #28]
90001f66:	f043 0320 	orr.w	r3, r3, #32
90001f6a:	61d3      	str	r3, [r2, #28]
            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
90001f6c:	69d3      	ldr	r3, [r2, #28]
90001f6e:	069b      	lsls	r3, r3, #26
90001f70:	d4fc      	bmi.n	90001f6c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x134>
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
90001f72:	2310      	movs	r3, #16
90001f74:	6093      	str	r3, [r2, #8]
            if (blend)
90001f76:	b324      	cbz	r4, 90001fc2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x18a>
                WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
90001f78:	4b1e      	ldr	r3, [pc, #120]	; (90001ff4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1bc>)
90001f7a:	6013      	str	r3, [r2, #0]
}
90001f7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
90001f7e:	2901      	cmp	r1, #1
90001f80:	d12e      	bne.n	90001fe0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1a8>
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
90001f82:	8851      	ldrh	r1, [r2, #2]
                if (blitOp.alpha == 255)
90001f84:	3cff      	subs	r4, #255	; 0xff
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
90001f86:	69d8      	ldr	r0, [r3, #28]
90001f88:	4a1c      	ldr	r2, [pc, #112]	; (90001ffc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1c4>)
90001f8a:	f101 31ff 	add.w	r1, r1, #4294967295
                if (blitOp.alpha == 255)
90001f8e:	bf18      	it	ne
90001f90:	2401      	movne	r4, #1
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
90001f92:	4002      	ands	r2, r0
90001f94:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
90001f98:	f042 0210 	orr.w	r2, r2, #16
90001f9c:	61da      	str	r2, [r3, #28]
                break;
90001f9e:	e7e0      	b.n	90001f62 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12a>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
90001fa0:	7f0a      	ldrb	r2, [r1, #28]
        if (blitOp.srcFormat != blitOp.dstFormat)
90001fa2:	45e6      	cmp	lr, ip
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
90001fa4:	4b12      	ldr	r3, [pc, #72]	; (90001ff0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1b8>)
90001fa6:	ea45 6502 	orr.w	r5, r5, r2, lsl #24
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
90001faa:	bf14      	ite	ne
90001fac:	4a14      	ldrne	r2, [pc, #80]	; (90002000 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1c8>)
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
90001fae:	f240 2201 	movweq	r2, #513	; 0x201
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
90001fb2:	f445 3500 	orr.w	r5, r5, #131072	; 0x20000
90001fb6:	61dd      	str	r5, [r3, #28]
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
90001fb8:	601a      	str	r2, [r3, #0]
}
90001fba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
90001fbc:	7f0c      	ldrb	r4, [r1, #28]
90001fbe:	4a11      	ldr	r2, [pc, #68]	; (90002004 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1cc>)
90001fc0:	e799      	b.n	90001ef6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xbe>
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
90001fc2:	4b0f      	ldr	r3, [pc, #60]	; (90002000 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1c8>)
90001fc4:	6013      	str	r3, [r2, #0]
}
90001fc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        assert(0 && "Unsupported Format!");
90001fc8:	4b0f      	ldr	r3, [pc, #60]	; (90002008 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1d0>)
90001fca:	2166      	movs	r1, #102	; 0x66
90001fcc:	4a0f      	ldr	r2, [pc, #60]	; (9000200c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1d4>)
90001fce:	4810      	ldr	r0, [pc, #64]	; (90002010 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1d8>)
90001fd0:	f021 fc70 	bl	900238b4 <__assert_func>
        assert(0 && "Unsupported Format!");
90001fd4:	4b0c      	ldr	r3, [pc, #48]	; (90002008 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1d0>)
90001fd6:	2187      	movs	r1, #135	; 0x87
90001fd8:	4a0e      	ldr	r2, [pc, #56]	; (90002014 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1dc>)
90001fda:	480d      	ldr	r0, [pc, #52]	; (90002010 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1d8>)
90001fdc:	f021 fc6a 	bl	900238b4 <__assert_func>
                assert(0 && "Unsupported format");
90001fe0:	4b0d      	ldr	r3, [pc, #52]	; (90002018 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1e0>)
90001fe2:	f240 1111 	movw	r1, #273	; 0x111
90001fe6:	4a0d      	ldr	r2, [pc, #52]	; (9000201c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1e4>)
90001fe8:	4809      	ldr	r0, [pc, #36]	; (90002010 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1d8>)
90001fea:	f021 fc63 	bl	900238b4 <__assert_func>
90001fee:	bf00      	nop
90001ff0:	52001000 	.word	0x52001000
90001ff4:	00020201 	.word	0x00020201
90001ff8:	00020009 	.word	0x00020009
90001ffc:	ffff00ef 	.word	0xffff00ef
90002000:	00010201 	.word	0x00010201
90002004:	0002000a 	.word	0x0002000a
90002008:	90026c60 	.word	0x90026c60
9000200c:	90026d08 	.word	0x90026d08
90002010:	90026cc8 	.word	0x90026cc8
90002014:	90026c7c 	.word	0x90026c7c
90002018:	90026d54 	.word	0x90026d54
9000201c:	90026d70 	.word	0x90026d70

90002020 <DMA2D_XferCpltCallback>:
        dma.signalDMAInterrupt();
90002020:	4b25      	ldr	r3, [pc, #148]	; (900020b8 <DMA2D_XferCpltCallback+0x98>)
90002022:	4926      	ldr	r1, [pc, #152]	; (900020bc <DMA2D_XferCpltCallback+0x9c>)
90002024:	681b      	ldr	r3, [r3, #0]
    {
90002026:	b510      	push	{r4, lr}
90002028:	685c      	ldr	r4, [r3, #4]
9000202a:	6823      	ldr	r3, [r4, #0]
9000202c:	695a      	ldr	r2, [r3, #20]
9000202e:	428a      	cmp	r2, r1
90002030:	d120      	bne.n	90002074 <DMA2D_XferCpltCallback+0x54>
        if (!started_by_external_job)
90002032:	f894 2da0 	ldrb.w	r2, [r4, #3488]	; 0xda0
90002036:	b192      	cbz	r2, 9000205e <DMA2D_XferCpltCallback+0x3e>
        if (isRunning)
90002038:	7a23      	ldrb	r3, [r4, #8]
9000203a:	2b00      	cmp	r3, #0
9000203c:	d132      	bne.n	900020a4 <DMA2D_XferCpltCallback+0x84>
            if (!queue.isEmpty() && isAllowed)
9000203e:	6860      	ldr	r0, [r4, #4]
90002040:	6803      	ldr	r3, [r0, #0]
90002042:	681b      	ldr	r3, [r3, #0]
90002044:	4798      	blx	r3
90002046:	4603      	mov	r3, r0
90002048:	b998      	cbnz	r0, 90002072 <DMA2D_XferCpltCallback+0x52>
9000204a:	7a62      	ldrb	r2, [r4, #9]
9000204c:	b18a      	cbz	r2, 90002072 <DMA2D_XferCpltCallback+0x52>
                execute();
9000204e:	6822      	ldr	r2, [r4, #0]
90002050:	4620      	mov	r0, r4
                started_by_external_job = false;
90002052:	f884 3da0 	strb.w	r3, [r4, #3488]	; 0xda0
                execute();
90002056:	6a53      	ldr	r3, [r2, #36]	; 0x24
    }
90002058:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9000205c:	4718      	bx	r3
            executeCompleted();
9000205e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90002060:	4620      	mov	r0, r4
90002062:	4798      	blx	r3
            if (Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL && !DMA2D_CopyBufferEnd && !isReserved && !isRunning)
90002064:	4916      	ldr	r1, [pc, #88]	; (900020c0 <DMA2D_XferCpltCallback+0xa0>)
90002066:	4a17      	ldr	r2, [pc, #92]	; (900020c4 <DMA2D_XferCpltCallback+0xa4>)
90002068:	680b      	ldr	r3, [r1, #0]
9000206a:	011b      	lsls	r3, r3, #4
9000206c:	5cd3      	ldrb	r3, [r2, r3]
9000206e:	2b01      	cmp	r3, #1
90002070:	d004      	beq.n	9000207c <DMA2D_XferCpltCallback+0x5c>
90002072:	bd10      	pop	{r4, pc}
90002074:	4620      	mov	r0, r4
90002076:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9000207a:	4710      	bx	r2
9000207c:	4812      	ldr	r0, [pc, #72]	; (900020c8 <DMA2D_XferCpltCallback+0xa8>)
9000207e:	6800      	ldr	r0, [r0, #0]
90002080:	2800      	cmp	r0, #0
90002082:	d1f6      	bne.n	90002072 <DMA2D_XferCpltCallback+0x52>
90002084:	7aa0      	ldrb	r0, [r4, #10]
90002086:	2800      	cmp	r0, #0
90002088:	d1f3      	bne.n	90002072 <DMA2D_XferCpltCallback+0x52>
9000208a:	7a20      	ldrb	r0, [r4, #8]
9000208c:	2800      	cmp	r0, #0
9000208e:	d1f0      	bne.n	90002072 <DMA2D_XferCpltCallback+0x52>
        DMA2D_CopyBuffer(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
90002090:	6808      	ldr	r0, [r1, #0]
                started_by_external_job = true;
90002092:	f884 3da0 	strb.w	r3, [r4, #3488]	; 0xda0
        isRunning = true;
90002096:	7223      	strb	r3, [r4, #8]
        DMA2D_CopyBuffer(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
90002098:	eb02 1000 	add.w	r0, r2, r0, lsl #4
9000209c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
900020a0:	f7ff bcc4 	b.w	90001a2c <DMA2D_CopyBuffer>
            DMA2D_ExternalJobCompleted(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
900020a4:	4906      	ldr	r1, [pc, #24]	; (900020c0 <DMA2D_XferCpltCallback+0xa0>)
            isRunning = false;
900020a6:	2200      	movs	r2, #0
            DMA2D_ExternalJobCompleted(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
900020a8:	4b06      	ldr	r3, [pc, #24]	; (900020c4 <DMA2D_XferCpltCallback+0xa4>)
900020aa:	6808      	ldr	r0, [r1, #0]
            isRunning = false;
900020ac:	7222      	strb	r2, [r4, #8]
            DMA2D_ExternalJobCompleted(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
900020ae:	eb03 1000 	add.w	r0, r3, r0, lsl #4
900020b2:	f7ff fcff 	bl	90001ab4 <DMA2D_ExternalJobCompleted>
900020b6:	e7c2      	b.n	9000203e <DMA2D_XferCpltCallback+0x1e>
900020b8:	24021c14 	.word	0x24021c14
900020bc:	90001cf9 	.word	0x90001cf9
900020c0:	24005cf8 	.word	0x24005cf8
900020c4:	24000008 	.word	0x24000008
900020c8:	24005cf4 	.word	0x24005cf4

900020cc <_ZN8STM32DMAC1Ev>:
STM32DMA::STM32DMA()
900020cc:	b570      	push	{r4, r5, r6, lr}
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0])), started_by_external_job(false), mutexIsRunning(0)
900020ce:	4b10      	ldr	r3, [pc, #64]	; (90002110 <_ZN8STM32DMAC1Ev+0x44>)
STM32DMA::STM32DMA()
900020d0:	4606      	mov	r6, r0
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0])), started_by_external_job(false), mutexIsRunning(0)
900020d2:	4604      	mov	r4, r0
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
        : queue(dmaQueue), isRunning(false), isAllowed(false)
900020d4:	2500      	movs	r5, #0
900020d6:	300c      	adds	r0, #12
900020d8:	2260      	movs	r2, #96	; 0x60
900020da:	7235      	strb	r5, [r6, #8]
900020dc:	7275      	strb	r5, [r6, #9]
900020de:	6070      	str	r0, [r6, #4]
900020e0:	f844 3b20 	str.w	r3, [r4], #32
900020e4:	4621      	mov	r1, r4
900020e6:	f010 f8b7 	bl	90012258 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
900020ea:	4621      	mov	r1, r4
900020ec:	f506 635a 	add.w	r3, r6, #3488	; 0xda0
        : color(0)
900020f0:	60cd      	str	r5, [r1, #12]
900020f2:	3124      	adds	r1, #36	; 0x24
900020f4:	428b      	cmp	r3, r1
900020f6:	d1fb      	bne.n	900020f0 <_ZN8STM32DMAC1Ev+0x24>
900020f8:	f886 5da0 	strb.w	r5, [r6, #3488]	; 0xda0
    mutexIsRunning = MUTEX_CREATE();
900020fc:	2000      	movs	r0, #0
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0])), started_by_external_job(false), mutexIsRunning(0)
900020fe:	f8c6 5da4 	str.w	r5, [r6, #3492]	; 0xda4
    mutexIsRunning = MUTEX_CREATE();
90002102:	f00b fcf1 	bl	9000dae8 <osMutexNew>
90002106:	4603      	mov	r3, r0
}
90002108:	4630      	mov	r0, r6
    mutexIsRunning = MUTEX_CREATE();
9000210a:	f8c6 3da4 	str.w	r3, [r6, #3492]	; 0xda4
}
9000210e:	bd70      	pop	{r4, r5, r6, pc}
90002110:	90026db8 	.word	0x90026db8

90002114 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    };

    virtual uint16_t capacity() const
    {
        return NUMBER_OF_ELEMENTS;
    }
90002114:	2001      	movs	r0, #1
90002116:	4770      	bx	lr

90002118 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
    {
        return sizeof(stBlocks[0]);
    }
90002118:	200c      	movs	r0, #12
9000211a:	4770      	bx	lr

9000211c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
    {
        return &stBlocks[index];
9000211c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
90002120:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    }
90002124:	3008      	adds	r0, #8
90002126:	4770      	bx	lr

90002128 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
    {
        return &stBlocks[index];
90002128:	eb01 0141 	add.w	r1, r1, r1, lsl #1
9000212c:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    }
90002130:	3008      	adds	r0, #8
90002132:	4770      	bx	lr

90002134 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
90002134:	2001      	movs	r0, #1
90002136:	4770      	bx	lr

90002138 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
90002138:	20a8      	movs	r0, #168	; 0xa8
9000213a:	4770      	bx	lr

9000213c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
9000213c:	23a8      	movs	r3, #168	; 0xa8
9000213e:	fb03 0001 	mla	r0, r3, r1, r0
    }
90002142:	3008      	adds	r0, #8
90002144:	4770      	bx	lr
90002146:	bf00      	nop

90002148 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
90002148:	23a8      	movs	r3, #168	; 0xa8
9000214a:	fb03 0001 	mla	r0, r3, r1, r0
    }
9000214e:	3008      	adds	r0, #8
90002150:	4770      	bx	lr
90002152:	bf00      	nop

90002154 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
90002154:	2001      	movs	r0, #1
90002156:	4770      	bx	lr

90002158 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
90002158:	2010      	movs	r0, #16
9000215a:	4770      	bx	lr

9000215c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
9000215c:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
90002160:	3008      	adds	r0, #8
90002162:	4770      	bx	lr

90002164 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
90002164:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
90002168:	3008      	adds	r0, #8
9000216a:	4770      	bx	lr

9000216c <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
    {
        app.gotoScreen1ScreenNoTransition();
9000216c:	4608      	mov	r0, r1
9000216e:	f002 bbe9 	b.w	90004944 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
90002172:	bf00      	nop

90002174 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
class Partition : public AbstractPartition
90002174:	4b03      	ldr	r3, [pc, #12]	; (90002184 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
90002176:	b510      	push	{r4, lr}
90002178:	4604      	mov	r4, r0
9000217a:	6003      	str	r3, [r0, #0]
9000217c:	f00e fed1 	bl	90010f22 <_ZN8touchgfx17AbstractPartitionD1Ev>
90002180:	4620      	mov	r0, r4
90002182:	bd10      	pop	{r4, pc}
90002184:	90026e70 	.word	0x90026e70

90002188 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
90002188:	4b05      	ldr	r3, [pc, #20]	; (900021a0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev+0x18>)
9000218a:	b510      	push	{r4, lr}
9000218c:	4604      	mov	r4, r0
9000218e:	6003      	str	r3, [r0, #0]
90002190:	f00e fec7 	bl	90010f22 <_ZN8touchgfx17AbstractPartitionD1Ev>
90002194:	2114      	movs	r1, #20
90002196:	4620      	mov	r0, r4
90002198:	f021 fb5d 	bl	90023856 <_ZdlPvj>
9000219c:	4620      	mov	r0, r4
9000219e:	bd10      	pop	{r4, pc}
900021a0:	90026e70 	.word	0x90026e70

900021a4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
900021a4:	4b03      	ldr	r3, [pc, #12]	; (900021b4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
900021a6:	b510      	push	{r4, lr}
900021a8:	4604      	mov	r4, r0
900021aa:	6003      	str	r3, [r0, #0]
900021ac:	f00e feb9 	bl	90010f22 <_ZN8touchgfx17AbstractPartitionD1Ev>
900021b0:	4620      	mov	r0, r4
900021b2:	bd10      	pop	{r4, pc}
900021b4:	90026e3c 	.word	0x90026e3c

900021b8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
900021b8:	4b05      	ldr	r3, [pc, #20]	; (900021d0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED0Ev+0x18>)
900021ba:	b510      	push	{r4, lr}
900021bc:	4604      	mov	r4, r0
900021be:	6003      	str	r3, [r0, #0]
900021c0:	f00e feaf 	bl	90010f22 <_ZN8touchgfx17AbstractPartitionD1Ev>
900021c4:	21b0      	movs	r1, #176	; 0xb0
900021c6:	4620      	mov	r0, r4
900021c8:	f021 fb45 	bl	90023856 <_ZdlPvj>
900021cc:	4620      	mov	r0, r4
900021ce:	bd10      	pop	{r4, pc}
900021d0:	90026e3c 	.word	0x90026e3c

900021d4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
900021d4:	4b03      	ldr	r3, [pc, #12]	; (900021e4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
900021d6:	b510      	push	{r4, lr}
900021d8:	4604      	mov	r4, r0
900021da:	6003      	str	r3, [r0, #0]
900021dc:	f00e fea1 	bl	90010f22 <_ZN8touchgfx17AbstractPartitionD1Ev>
900021e0:	4620      	mov	r0, r4
900021e2:	bd10      	pop	{r4, pc}
900021e4:	90026e08 	.word	0x90026e08

900021e8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
900021e8:	4b05      	ldr	r3, [pc, #20]	; (90002200 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev+0x18>)
900021ea:	b510      	push	{r4, lr}
900021ec:	4604      	mov	r4, r0
900021ee:	6003      	str	r3, [r0, #0]
900021f0:	f00e fe97 	bl	90010f22 <_ZN8touchgfx17AbstractPartitionD1Ev>
900021f4:	2118      	movs	r1, #24
900021f6:	4620      	mov	r0, r4
900021f8:	f021 fb2d 	bl	90023856 <_ZdlPvj>
900021fc:	4620      	mov	r0, r4
900021fe:	bd10      	pop	{r4, pc}
90002200:	90026e08 	.word	0x90026e08

90002204 <_ZN12FrontendHeapD1Ev>:
#ifndef FRONTENDHEAP_HPP
#define FRONTENDHEAP_HPP

#include <gui_generated/common/FrontendHeapBase.hpp>

class FrontendHeap : public FrontendHeapBase
90002204:	4a0b      	ldr	r2, [pc, #44]	; (90002234 <_ZN12FrontendHeapD1Ev+0x30>)
90002206:	4b0c      	ldr	r3, [pc, #48]	; (90002238 <_ZN12FrontendHeapD1Ev+0x34>)
90002208:	b510      	push	{r4, lr}
9000220a:	4604      	mov	r4, r0
9000220c:	6002      	str	r2, [r0, #0]
9000220e:	f840 3fdc 	str.w	r3, [r0, #220]!
90002212:	f00e fe86 	bl	90010f22 <_ZN8touchgfx17AbstractPartitionD1Ev>
90002216:	4620      	mov	r0, r4
90002218:	4b08      	ldr	r3, [pc, #32]	; (9000223c <_ZN12FrontendHeapD1Ev+0x38>)
9000221a:	f840 3f2c 	str.w	r3, [r0, #44]!
9000221e:	f00e fe80 	bl	90010f22 <_ZN8touchgfx17AbstractPartitionD1Ev>
90002222:	4620      	mov	r0, r4
90002224:	4b06      	ldr	r3, [pc, #24]	; (90002240 <_ZN12FrontendHeapD1Ev+0x3c>)
90002226:	f840 3f14 	str.w	r3, [r0, #20]!
9000222a:	f00e fe7a 	bl	90010f22 <_ZN8touchgfx17AbstractPartitionD1Ev>
9000222e:	4620      	mov	r0, r4
90002230:	bd10      	pop	{r4, pc}
90002232:	bf00      	nop
90002234:	90026ea4 	.word	0x90026ea4
90002238:	90026e70 	.word	0x90026e70
9000223c:	90026e3c 	.word	0x90026e3c
90002240:	90026e08 	.word	0x90026e08

90002244 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
90002244:	b510      	push	{r4, lr}
class FrontendHeap : public FrontendHeapBase
90002246:	4c0b      	ldr	r4, [pc, #44]	; (90002274 <__tcf_0+0x30>)
90002248:	4b0b      	ldr	r3, [pc, #44]	; (90002278 <__tcf_0+0x34>)
9000224a:	4620      	mov	r0, r4
9000224c:	4a0b      	ldr	r2, [pc, #44]	; (9000227c <__tcf_0+0x38>)
9000224e:	f840 3fdc 	str.w	r3, [r0, #220]!
90002252:	6022      	str	r2, [r4, #0]
90002254:	f00e fe65 	bl	90010f22 <_ZN8touchgfx17AbstractPartitionD1Ev>
90002258:	4620      	mov	r0, r4
9000225a:	4b09      	ldr	r3, [pc, #36]	; (90002280 <__tcf_0+0x3c>)
9000225c:	f840 3f2c 	str.w	r3, [r0, #44]!
90002260:	f00e fe5f 	bl	90010f22 <_ZN8touchgfx17AbstractPartitionD1Ev>
90002264:	4620      	mov	r0, r4
90002266:	4b07      	ldr	r3, [pc, #28]	; (90002284 <__tcf_0+0x40>)
        static FrontendHeap instance;
90002268:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9000226c:	f840 3f14 	str.w	r3, [r0, #20]!
90002270:	f00e be57 	b.w	90010f22 <_ZN8touchgfx17AbstractPartitionD1Ev>
90002274:	24005d4c 	.word	0x24005d4c
90002278:	90026e70 	.word	0x90026e70
9000227c:	90026ea4 	.word	0x90026ea4
90002280:	90026e3c 	.word	0x90026e3c
90002284:	90026e08 	.word	0x90026e08

90002288 <_ZN12FrontendHeapD0Ev>:
class FrontendHeap : public FrontendHeapBase
90002288:	4a0d      	ldr	r2, [pc, #52]	; (900022c0 <_ZN12FrontendHeapD0Ev+0x38>)
9000228a:	4b0e      	ldr	r3, [pc, #56]	; (900022c4 <_ZN12FrontendHeapD0Ev+0x3c>)
9000228c:	b510      	push	{r4, lr}
9000228e:	4604      	mov	r4, r0
90002290:	6002      	str	r2, [r0, #0]
90002292:	f840 3fdc 	str.w	r3, [r0, #220]!
90002296:	f00e fe44 	bl	90010f22 <_ZN8touchgfx17AbstractPartitionD1Ev>
9000229a:	4620      	mov	r0, r4
9000229c:	4b0a      	ldr	r3, [pc, #40]	; (900022c8 <_ZN12FrontendHeapD0Ev+0x40>)
9000229e:	f840 3f2c 	str.w	r3, [r0, #44]!
900022a2:	f00e fe3e 	bl	90010f22 <_ZN8touchgfx17AbstractPartitionD1Ev>
900022a6:	4b09      	ldr	r3, [pc, #36]	; (900022cc <_ZN12FrontendHeapD0Ev+0x44>)
900022a8:	4620      	mov	r0, r4
900022aa:	f840 3f14 	str.w	r3, [r0, #20]!
900022ae:	f00e fe38 	bl	90010f22 <_ZN8touchgfx17AbstractPartitionD1Ev>
900022b2:	4620      	mov	r0, r4
900022b4:	f44f 7114 	mov.w	r1, #592	; 0x250
900022b8:	f021 facd 	bl	90023856 <_ZdlPvj>
900022bc:	4620      	mov	r0, r4
900022be:	bd10      	pop	{r4, pc}
900022c0:	90026ea4 	.word	0x90026ea4
900022c4:	90026e70 	.word	0x90026e70
900022c8:	90026e3c 	.word	0x90026e3c
900022cc:	90026e08 	.word	0x90026e08

900022d0 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 480, 272);

void touchgfx_init()
{
900022d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
900022d4:	b082      	sub	sp, #8
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
900022d6:	2400      	movs	r4, #0
900022d8:	f002 f94a 	bl	90004570 <_ZN14BitmapDatabase11getInstanceEv>
900022dc:	4605      	mov	r5, r0
900022de:	f002 f94b 	bl	90004578 <_ZN14BitmapDatabase15getInstanceSizeEv>
900022e2:	4623      	mov	r3, r4
900022e4:	4601      	mov	r1, r0
900022e6:	4622      	mov	r2, r4
900022e8:	4628      	mov	r0, r5
900022ea:	9400      	str	r4, [sp, #0]
900022ec:	f013 fd88 	bl	90015e00 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
    {
        texts = t;
900022f0:	4b28      	ldr	r3, [pc, #160]	; (90002394 <touchgfx_init+0xc4>)
900022f2:	4a29      	ldr	r2, [pc, #164]	; (90002398 <touchgfx_init+0xc8>)
    TypedText::registerTexts(&texts);
    Texts::setLanguage(0);
900022f4:	4620      	mov	r0, r4
        static FrontendHeap instance;
900022f6:	4c29      	ldr	r4, [pc, #164]	; (9000239c <touchgfx_init+0xcc>)
900022f8:	601a      	str	r2, [r3, #0]
900022fa:	f002 fd33 	bl	90004d64 <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
900022fe:	4828      	ldr	r0, [pc, #160]	; (900023a0 <touchgfx_init+0xd0>)
90002300:	f013 fce6 	bl	90015cd0 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>
90002304:	6823      	ldr	r3, [r4, #0]
90002306:	f3bf 8f5b 	dmb	ish
9000230a:	07db      	lsls	r3, r3, #31
9000230c:	d505      	bpl.n	9000231a <touchgfx_init+0x4a>
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
9000230e:	4825      	ldr	r0, [pc, #148]	; (900023a4 <touchgfx_init+0xd4>)
}
90002310:	b002      	add	sp, #8
90002312:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    hal.initialize();
90002316:	f7fe bbf9 	b.w	90000b0c <_ZN11TouchGFXHAL10initializeEv>
9000231a:	4620      	mov	r0, r4
9000231c:	f021 fa9d 	bl	9002385a <__cxa_guard_acquire>
90002320:	2800      	cmp	r0, #0
90002322:	d0f4      	beq.n	9000230e <touchgfx_init+0x3e>
     */
    MVPHeap(AbstractPartition& pres,
            AbstractPartition& scr,
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
90002324:	4d20      	ldr	r5, [pc, #128]	; (900023a8 <touchgfx_init+0xd8>)
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
                     app(model, *this)
90002326:	4b21      	ldr	r3, [pc, #132]	; (900023ac <touchgfx_init+0xdc>)
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
90002328:	f105 06f4 	add.w	r6, r5, #244	; 0xf4
        : presenterStorage(pres),
9000232c:	f105 0014 	add.w	r0, r5, #20
          screenStorage(scr),
90002330:	f105 082c 	add.w	r8, r5, #44	; 0x2c
          transitionStorage(tra),
90002334:	f105 07dc 	add.w	r7, r5, #220	; 0xdc
90002338:	602b      	str	r3, [r5, #0]
9000233a:	60ef      	str	r7, [r5, #12]
          frontendApplication(app)
9000233c:	612e      	str	r6, [r5, #16]
          screenStorage(scr),
9000233e:	e9c5 0801 	strd	r0, r8, [r5, #4]
90002342:	f00e fdef 	bl	90010f24 <_ZN8touchgfx17AbstractPartitionC1Ev>
90002346:	4b1a      	ldr	r3, [pc, #104]	; (900023b0 <touchgfx_init+0xe0>)
90002348:	4640      	mov	r0, r8
9000234a:	616b      	str	r3, [r5, #20]
9000234c:	f00e fdea 	bl	90010f24 <_ZN8touchgfx17AbstractPartitionC1Ev>
90002350:	4b18      	ldr	r3, [pc, #96]	; (900023b4 <touchgfx_init+0xe4>)
90002352:	4638      	mov	r0, r7
90002354:	62eb      	str	r3, [r5, #44]	; 0x2c
90002356:	f00e fde5 	bl	90010f24 <_ZN8touchgfx17AbstractPartitionC1Ev>
9000235a:	4b17      	ldr	r3, [pc, #92]	; (900023b8 <touchgfx_init+0xe8>)
9000235c:	f105 00f0 	add.w	r0, r5, #240	; 0xf0
90002360:	f8c5 30dc 	str.w	r3, [r5, #220]	; 0xdc
90002364:	f002 fd70 	bl	90004e48 <_ZN5ModelC1Ev>
90002368:	462a      	mov	r2, r5
9000236a:	f105 01f0 	add.w	r1, r5, #240	; 0xf0
9000236e:	4630      	mov	r0, r6
90002370:	f002 fd60 	bl	90004e34 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
90002374:	4630      	mov	r0, r6
90002376:	f002 fae5 	bl	90004944 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
        static FrontendHeap instance;
9000237a:	4810      	ldr	r0, [pc, #64]	; (900023bc <touchgfx_init+0xec>)
9000237c:	f021 fab8 	bl	900238f0 <atexit>
90002380:	4620      	mov	r0, r4
90002382:	f021 fa76 	bl	90023872 <__cxa_guard_release>
90002386:	4807      	ldr	r0, [pc, #28]	; (900023a4 <touchgfx_init+0xd4>)
}
90002388:	b002      	add	sp, #8
9000238a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    hal.initialize();
9000238e:	f7fe bbbd 	b.w	90000b0c <_ZN11TouchGFXHAL10initializeEv>
90002392:	bf00      	nop
90002394:	24021c70 	.word	0x24021c70
90002398:	24006dd0 	.word	0x24006dd0
9000239c:	24005d48 	.word	0x24005d48
900023a0:	2400002c 	.word	0x2400002c
900023a4:	24006d48 	.word	0x24006d48
900023a8:	24005d4c 	.word	0x24005d4c
900023ac:	90026ea4 	.word	0x90026ea4
900023b0:	90026e08 	.word	0x90026e08
900023b4:	90026e3c 	.word	0x90026e3c
900023b8:	90026e70 	.word	0x90026e70
900023bc:	90002245 	.word	0x90002245

900023c0 <touchgfx_components_init>:

void touchgfx_components_init()
{
}
900023c0:	4770      	bx	lr
900023c2:	bf00      	nop

900023c4 <touchgfx_taskEntry>:
     * this function from your GUI task.
     *
     * Note This function never returns
     */
	//HAL::initialize();
	hal.initialize();
900023c4:	4804      	ldr	r0, [pc, #16]	; (900023d8 <touchgfx_taskEntry+0x14>)
{
900023c6:	b508      	push	{r3, lr}
	hal.initialize();
900023c8:	f7fe fba0 	bl	90000b0c <_ZN11TouchGFXHAL10initializeEv>
    hal.taskEntry();
900023cc:	4802      	ldr	r0, [pc, #8]	; (900023d8 <touchgfx_taskEntry+0x14>)
}
900023ce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    hal.taskEntry();
900023d2:	f7fe bbe9 	b.w	90000ba8 <_ZN11TouchGFXHAL9taskEntryEv>
900023d6:	bf00      	nop
900023d8:	24006d48 	.word	0x24006d48

900023dc <_GLOBAL__sub_I_touchgfx_init>:
}
900023dc:	b570      	push	{r4, r5, r6, lr}
{
public:

    STM32TouchController() {}
900023de:	4b25      	ldr	r3, [pc, #148]	; (90002474 <_GLOBAL__sub_I_touchgfx_init+0x98>)
900023e0:	4c25      	ldr	r4, [pc, #148]	; (90002478 <_GLOBAL__sub_I_touchgfx_init+0x9c>)
static STM32DMA dma;
900023e2:	4e26      	ldr	r6, [pc, #152]	; (9000247c <_GLOBAL__sub_I_touchgfx_init+0xa0>)
static LCD16bpp display;
900023e4:	4d26      	ldr	r5, [pc, #152]	; (90002480 <_GLOBAL__sub_I_touchgfx_init+0xa4>)
900023e6:	6023      	str	r3, [r4, #0]
static STM32DMA dma;
900023e8:	4630      	mov	r0, r6
900023ea:	f7ff fe6f 	bl	900020cc <_ZN8STM32DMAC1Ev>
static LCD16bpp display;
900023ee:	4628      	mov	r0, r5
900023f0:	f017 ffde 	bl	9001a3b0 <_ZN8touchgfx8LCD16bppC1Ev>
        : dma(dmaInterface),
900023f4:	4b23      	ldr	r3, [pc, #140]	; (90002484 <_GLOBAL__sub_I_touchgfx_init+0xa8>)
          mcuInstrumentation(0),
900023f6:	2200      	movs	r2, #0
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
900023f8:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
900023fc:	f44f 7188 	mov.w	r1, #272	; 0x110
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
        : drag(), listener(0), dragThresholdValue(0)
90002400:	62da      	str	r2, [r3, #44]	; 0x2c
90002402:	861a      	strh	r2, [r3, #48]	; 0x30
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
        : x(0), y(0), width(0), height(0)
90002404:	655a      	str	r2, [r3, #84]	; 0x54
          useAuxiliaryLCD(false),
90002406:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
          lastY(0),
9000240a:	665a      	str	r2, [r3, #100]	; 0x64
          vSyncCompensationEnabled(false),
9000240c:	66da      	str	r2, [r3, #108]	; 0x6c
          updateMCULoad(0),
9000240e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          mcuInstrumentation(0),
90002412:	e9c3 4203 	strd	r4, r2, [r3, #12]
          touchSampleRate(1),
90002416:	4c1c      	ldr	r4, [pc, #112]	; (90002488 <_GLOBAL__sub_I_touchgfx_init+0xac>)
90002418:	669c      	str	r4, [r3, #104]	; 0x68
        instance = this;
9000241a:	4c1c      	ldr	r4, [pc, #112]	; (9000248c <_GLOBAL__sub_I_touchgfx_init+0xb0>)
9000241c:	6023      	str	r3, [r4, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
9000241e:	4c1c      	ldr	r4, [pc, #112]	; (90002490 <_GLOBAL__sub_I_touchgfx_init+0xb4>)
90002420:	8020      	strh	r0, [r4, #0]
90002422:	4c1c      	ldr	r4, [pc, #112]	; (90002494 <_GLOBAL__sub_I_touchgfx_init+0xb8>)
90002424:	8020      	strh	r0, [r4, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
90002426:	4c1c      	ldr	r4, [pc, #112]	; (90002498 <_GLOBAL__sub_I_touchgfx_init+0xbc>)
90002428:	481c      	ldr	r0, [pc, #112]	; (9000249c <_GLOBAL__sub_I_touchgfx_init+0xc0>)
9000242a:	8021      	strh	r1, [r4, #0]
9000242c:	8001      	strh	r1, [r0, #0]
        DISPLAY_ROTATION = rotate0;
9000242e:	4c1c      	ldr	r4, [pc, #112]	; (900024a0 <_GLOBAL__sub_I_touchgfx_init+0xc4>)
     * @param [in,out] display Reference to LCD interface.
     * @param [in,out] tc      Reference to Touch Controller driver.
     * @param width            Width of the display.
     * @param height           Height of the display.
     */
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
90002430:	491c      	ldr	r1, [pc, #112]	; (900024a4 <_GLOBAL__sub_I_touchgfx_init+0xc8>)
          requestedOrientation(ORIENTATION_LANDSCAPE),
90002432:	481d      	ldr	r0, [pc, #116]	; (900024a8 <_GLOBAL__sub_I_touchgfx_init+0xcc>)
          lcdRef(display),
90002434:	e9c3 6501 	strd	r6, r5, [r3, #4]
          refreshStrategy(REFRESH_STRATEGY_DEFAULT),
90002438:	f44f 7580 	mov.w	r5, #256	; 0x100
          frameBufferAllocator(0),
9000243c:	e9c3 2205 	strd	r2, r2, [r3, #20]
          refreshStrategy(REFRESH_STRATEGY_DEFAULT),
90002440:	649d      	str	r5, [r3, #72]	; 0x48
            : startX(0),
90002442:	e9c3 2207 	strd	r2, r2, [r3, #28]
        : drag(), listener(0), dragThresholdValue(0)
90002446:	e9c3 2209 	strd	r2, r2, [r3, #36]	; 0x24
          frameBuffer0(0),
9000244a:	e9c3 220e 	strd	r2, r2, [r3, #56]	; 0x38
          frameBuffer2(0),
9000244e:	e9c3 2210 	strd	r2, r2, [r3, #64]	; 0x40
90002452:	e9c3 2213 	strd	r2, r2, [r3, #76]	; 0x4c
          lastX(0),
90002456:	e9c3 2217 	strd	r2, r2, [r3, #92]	; 0x5c
        DISPLAY_ROTATION = rotate0;
9000245a:	7022      	strb	r2, [r4, #0]
9000245c:	6019      	str	r1, [r3, #0]
9000245e:	4913      	ldr	r1, [pc, #76]	; (900024ac <_GLOBAL__sub_I_touchgfx_init+0xd0>)
        : cc_consumed(0),
90002460:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
90002464:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          cc_in(0)
90002468:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
9000246c:	67d9      	str	r1, [r3, #124]	; 0x7c
          requestedOrientation(ORIENTATION_LANDSCAPE),
9000246e:	e9c3 201d 	strd	r2, r0, [r3, #116]	; 0x74
}
90002472:	bd70      	pop	{r4, r5, r6, pc}
90002474:	90026618 	.word	0x90026618
90002478:	24005f9c 	.word	0x24005f9c
9000247c:	24005fa0 	.word	0x24005fa0
90002480:	24006dd4 	.word	0x24006dd4
90002484:	24006d48 	.word	0x24006d48
90002488:	01000001 	.word	0x01000001
9000248c:	24021c14 	.word	0x24021c14
90002490:	24021c08 	.word	0x24021c08
90002494:	24021c0e 	.word	0x24021c0e
90002498:	24021c0a 	.word	0x24021c0a
9000249c:	24021c10 	.word	0x24021c10
900024a0:	24021c0c 	.word	0x24021c0c
900024a4:	900267a8 	.word	0x900267a8
900024a8:	01010000 	.word	0x01010000
900024ac:	900265f0 	.word	0x900265f0

900024b0 <_GLOBAL__sub_D_touchgfx_init>:
static STM32DMA dma;
900024b0:	4801      	ldr	r0, [pc, #4]	; (900024b8 <_GLOBAL__sub_D_touchgfx_init+0x8>)
900024b2:	f7ff bb8f 	b.w	90001bd4 <_ZN8STM32DMAD1Ev>
900024b6:	bf00      	nop
900024b8:	24005fa0 	.word	0x24005fa0

900024bc <_ZNK8touchgfx8Drawable17invalidateContentEv>:
     * drawn by the widget.
     */
    virtual void invalidateContent() const
    {
        // Consider checking if *this is in the draw chain
        if (visible)
900024bc:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
900024c0:	b112      	cbz	r2, 900024c8 <_ZNK8touchgfx8Drawable17invalidateContentEv+0xc>
        {
            invalidate();
900024c2:	6803      	ldr	r3, [r0, #0]
900024c4:	695b      	ldr	r3, [r3, #20]
900024c6:	4718      	bx	r3
        }
    }
900024c8:	4770      	bx	lr
900024ca:	bf00      	nop

900024cc <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
    {
        return 0;
    }
900024cc:	2000      	movs	r0, #0
900024ce:	4770      	bx	lr

900024d0 <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
    {
        rect.x = x;
900024d0:	8081      	strh	r1, [r0, #4]
    }
900024d2:	4770      	bx	lr

900024d4 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
    {
        rect.y = y;
900024d4:	80c1      	strh	r1, [r0, #6]
    }
900024d6:	4770      	bx	lr

900024d8 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
    {
        rect.width = width;
900024d8:	8101      	strh	r1, [r0, #8]
    }
900024da:	4770      	bx	lr

900024dc <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
    {
        rect.height = height;
900024dc:	8141      	strh	r1, [r0, #10]
    }
900024de:	4770      	bx	lr

900024e0 <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
    {
    }
900024e0:	4770      	bx	lr
900024e2:	bf00      	nop

900024e4 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
    {
        (void)event; // Unused variable
    }
900024e4:	4770      	bx	lr
900024e6:	bf00      	nop

900024e8 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
    {
        (void)event; // Unused variable
    }
900024e8:	4770      	bx	lr
900024ea:	bf00      	nop

900024ec <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
    {
        (void)event; // Unused variable
    }
900024ec:	4770      	bx	lr
900024ee:	bf00      	nop

900024f0 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
    {
    }
900024f0:	4770      	bx	lr
900024f2:	bf00      	nop

900024f4 <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
    {
        moveRelative(x - rect.x, y - rect.y);
900024f4:	f8b0 c006 	ldrh.w	ip, [r0, #6]
900024f8:	6803      	ldr	r3, [r0, #0]
900024fa:	eba2 020c 	sub.w	r2, r2, ip
900024fe:	f8b0 c004 	ldrh.w	ip, [r0, #4]
90002502:	6d5b      	ldr	r3, [r3, #84]	; 0x54
90002504:	eba1 010c 	sub.w	r1, r1, ip
90002508:	b212      	sxth	r2, r2
9000250a:	b209      	sxth	r1, r1
9000250c:	4718      	bx	r3
9000250e:	bf00      	nop

90002510 <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
    {
        (void)invalidatedArea; // Unused variable
        resetDrawChainCache();
        nextDrawChainElement = *nextPreviousElement;
90002510:	6813      	ldr	r3, [r2, #0]
        cachedVisibleRect.x = UNCACHED_INDICATOR;
90002512:	f64f 7cff 	movw	ip, #65535	; 0xffff
        cachedAbsX = UNCACHED_INDICATOR;
90002516:	f04f 31ff 	mov.w	r1, #4294967295
        cachedVisibleRect.x = UNCACHED_INDICATOR;
9000251a:	f8a0 c00c 	strh.w	ip, [r0, #12]
        nextDrawChainElement = *nextPreviousElement;
9000251e:	e9c0 3107 	strd	r3, r1, [r0, #28]
        *nextPreviousElement = this;
90002522:	6010      	str	r0, [r2, #0]
    }
90002524:	4770      	bx	lr
90002526:	bf00      	nop

90002528 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t /*x*/, int16_t /*y*/, Drawable** last)
    {
        if (isVisible() && isTouchable())
90002528:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
9000252c:	b11a      	cbz	r2, 90002536 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
9000252e:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
90002532:	b102      	cbz	r2, 90002536 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
        {
            *last = this;
90002534:	6018      	str	r0, [r3, #0]
        }
    }
90002536:	4770      	bx	lr

90002538 <_ZNK8touchgfx8LCD16bpp17framebufferFormatEv>:
    }

    virtual Bitmap::BitmapFormat framebufferFormat() const
    {
        return Bitmap::RGB565;
    }
90002538:	2000      	movs	r0, #0
9000253a:	4770      	bx	lr

9000253c <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
9000253c:	4b03      	ldr	r3, [pc, #12]	; (9000254c <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv+0x10>)
9000253e:	2290      	movs	r2, #144	; 0x90
90002540:	f883 235a 	strb.w	r2, [r3, #858]	; 0x35a
90002544:	f883 2358 	strb.w	r2, [r3, #856]	; 0x358

void TouchGFXGeneratedHAL::configureInterrupts()
{
    NVIC_SetPriority(DMA2D_IRQn, 9);
    NVIC_SetPriority(LTDC_IRQn, 9);
}
90002548:	4770      	bx	lr
9000254a:	bf00      	nop
9000254c:	e000e100 	.word	0xe000e100

90002550 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:
    NVIC_DisableIRQ(LTDC_IRQn);
}

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
90002550:	4a09      	ldr	r2, [pc, #36]	; (90002578 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x28>)
90002552:	490a      	ldr	r1, [pc, #40]	; (9000257c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x2c>)
90002554:	68d3      	ldr	r3, [r2, #12]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
90002556:	480a      	ldr	r0, [pc, #40]	; (90002580 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x30>)
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
90002558:	f3c3 030a 	ubfx	r3, r3, #0, #11
9000255c:	3b01      	subs	r3, #1
9000255e:	b29b      	uxth	r3, r3
90002560:	800b      	strh	r3, [r1, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
90002562:	6911      	ldr	r1, [r2, #16]
90002564:	f3c1 010a 	ubfx	r1, r1, #0, #11
90002568:	3901      	subs	r1, #1
9000256a:	8001      	strh	r1, [r0, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
9000256c:	6413      	str	r3, [r2, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
9000256e:	6b53      	ldr	r3, [r2, #52]	; 0x34
90002570:	f043 0301 	orr.w	r3, r3, #1
90002574:	6353      	str	r3, [r2, #52]	; 0x34
}
90002576:	4770      	bx	lr
90002578:	50001000 	.word	0x50001000
9000257c:	24006e5a 	.word	0x24006e5a
90002580:	24006e58 	.word	0x24006e58

90002584 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:
    dma.start();
}

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
    return (uint16_t*)LTDC_Layer1->CFBAR;
90002584:	4b01      	ldr	r3, [pc, #4]	; (9000258c <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x8>)
90002586:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
}
9000258a:	4770      	bx	lr
9000258c:	50001000 	.word	0x50001000

90002590 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
    LTDC_Layer1->CFBAR = (uint32_t)adr;
90002590:	4b02      	ldr	r3, [pc, #8]	; (9000259c <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0xc>)

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
90002592:	2201      	movs	r2, #1
    LTDC_Layer1->CFBAR = (uint32_t)adr;
90002594:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
90002598:	625a      	str	r2, [r3, #36]	; 0x24
}
9000259a:	4770      	bx	lr
9000259c:	50001000 	.word	0x50001000

900025a0 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setRGBBufferEPhj>:

    virtual void setRGBBuffer(uint8_t* buffer, size_t sizeOfBuffer)
    {
        // Running in UI thread / main

        bufferRGB = buffer;
900025a0:	e9c0 120c 	strd	r1, r2, [r0, #48]	; 0x30
        topBufferRGB = bufferRGB;
900025a4:	6381      	str	r1, [r0, #56]	; 0x38
        sizeBufferRGB = sizeOfBuffer;
    }
900025a6:	4770      	bx	lr

900025a8 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EED1Ev>:
class DedicatedBufferController : public touchgfx::VideoController
900025a8:	4770      	bx	lr
900025aa:	bf00      	nop

900025ac <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmRNS0_15VideoDataReaderE>:
        mjpegDecoders[handle]->setVideoData(reader);
900025ac:	eb00 0081 	add.w	r0, r0, r1, lsl #2
900025b0:	4611      	mov	r1, r2
900025b2:	6840      	ldr	r0, [r0, #4]
900025b4:	6803      	ldr	r3, [r0, #0]
900025b6:	68db      	ldr	r3, [r3, #12]
900025b8:	4718      	bx	r3
900025ba:	bf00      	nop

900025bc <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EED0Ev>:
class DedicatedBufferController : public touchgfx::VideoController
900025bc:	b510      	push	{r4, lr}
900025be:	4604      	mov	r4, r0
900025c0:	2148      	movs	r1, #72	; 0x48
900025c2:	f021 f948 	bl	90023856 <_ZdlPvj>
900025c6:	4620      	mov	r0, r4
900025c8:	bd10      	pop	{r4, pc}
900025ca:	bf00      	nop

900025cc <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm>:
        mjpegDecoders[handle]->getVideoInfo(data);
    }

    virtual bool getIsPlaying(const Handle handle)
    {
        assert(handle < no_streams);
900025cc:	b911      	cbnz	r1, 900025d4 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm+0x8>
        Stream& stream = streams[handle];
        return stream.isPlaying;
    }
900025ce:	f890 0029 	ldrb.w	r0, [r0, #41]	; 0x29
900025d2:	4770      	bx	lr
    virtual bool getIsPlaying(const Handle handle)
900025d4:	b508      	push	{r3, lr}
        assert(handle < no_streams);
900025d6:	4a03      	ldr	r2, [pc, #12]	; (900025e4 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm+0x18>)
900025d8:	f44f 71b8 	mov.w	r1, #368	; 0x170
900025dc:	4b02      	ldr	r3, [pc, #8]	; (900025e8 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm+0x1c>)
900025de:	4803      	ldr	r0, [pc, #12]	; (900025ec <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm+0x20>)
900025e0:	f021 f968 	bl	900238b4 <__assert_func>
900025e4:	90026ec4 	.word	0x90026ec4
900025e8:	90026eb0 	.word	0x90026eb0
900025ec:	90027050 	.word	0x90027050

900025f0 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE>:
        assert(handle < no_streams);
900025f0:	b921      	cbnz	r1, 900025fc <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE+0xc>
        mjpegDecoders[handle]->getVideoInfo(data);
900025f2:	6840      	ldr	r0, [r0, #4]
900025f4:	4611      	mov	r1, r2
900025f6:	6803      	ldr	r3, [r0, #0]
900025f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
900025fa:	4718      	bx	r3
        assert(handle < no_streams);
900025fc:	4b03      	ldr	r3, [pc, #12]	; (9000260c <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE+0x1c>)
900025fe:	f44f 71b5 	mov.w	r1, #362	; 0x16a
90002602:	4a03      	ldr	r2, [pc, #12]	; (90002610 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE+0x20>)
90002604:	4803      	ldr	r0, [pc, #12]	; (90002614 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE+0x24>)
    virtual void getVideoInformation(const Handle handle, touchgfx::VideoInformation* data)
90002606:	b510      	push	{r4, lr}
        assert(handle < no_streams);
90002608:	f021 f954 	bl	900238b4 <__assert_func>
9000260c:	90026eb0 	.word	0x90026eb0
90002610:	90027094 	.word	0x90027094
90002614:	90027050 	.word	0x90027050

90002618 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm>:
        assert(handle < no_streams);
90002618:	b909      	cbnz	r1, 9000261e <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm+0x6>
    }
9000261a:	68c0      	ldr	r0, [r0, #12]
9000261c:	4770      	bx	lr
    virtual uint32_t getCurrentFrameNumber(const Handle handle)
9000261e:	b508      	push	{r3, lr}
        assert(handle < no_streams);
90002620:	4a02      	ldr	r2, [pc, #8]	; (9000262c <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm+0x14>)
90002622:	2179      	movs	r1, #121	; 0x79
90002624:	4b02      	ldr	r3, [pc, #8]	; (90002630 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm+0x18>)
90002626:	4803      	ldr	r0, [pc, #12]	; (90002634 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm+0x1c>)
90002628:	f021 f944 	bl	900238b4 <__assert_func>
9000262c:	90027244 	.word	0x90027244
90002630:	90026eb0 	.word	0x90026eb0
90002634:	90027050 	.word	0x90027050

90002638 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmPKhm>:
    virtual void setVideoData(const Handle handle, const uint8_t* movie, const uint32_t length)
90002638:	b510      	push	{r4, lr}
        assert(handle < no_streams);
9000263a:	460c      	mov	r4, r1
9000263c:	b949      	cbnz	r1, 90002652 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmPKhm+0x1a>
9000263e:	4611      	mov	r1, r2
90002640:	461a      	mov	r2, r3
        mjpegDecoders[handle]->setVideoData(movie, length);
90002642:	6843      	ldr	r3, [r0, #4]
        stream.frameNumber = 0;
90002644:	60c4      	str	r4, [r0, #12]
        mjpegDecoders[handle]->setVideoData(movie, length);
90002646:	681c      	ldr	r4, [r3, #0]
90002648:	4618      	mov	r0, r3
9000264a:	68a3      	ldr	r3, [r4, #8]
    }
9000264c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        mjpegDecoders[handle]->setVideoData(movie, length);
90002650:	4718      	bx	r3
        assert(handle < no_streams);
90002652:	4b03      	ldr	r3, [pc, #12]	; (90002660 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmPKhm+0x28>)
90002654:	2190      	movs	r1, #144	; 0x90
90002656:	4a03      	ldr	r2, [pc, #12]	; (90002664 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmPKhm+0x2c>)
90002658:	4803      	ldr	r0, [pc, #12]	; (90002668 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmPKhm+0x30>)
9000265a:	f021 f92b 	bl	900238b4 <__assert_func>
9000265e:	bf00      	nop
90002660:	90026eb0 	.word	0x90026eb0
90002664:	900273f8 	.word	0x900273f8
90002668:	90027050 	.word	0x90027050

9000266c <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm>:
        assert(handle < no_streams);
9000266c:	b921      	cbnz	r1, 90002678 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm+0xc>
        stream.tickCount = 0;
9000266e:	e9c0 1104 	strd	r1, r1, [r0, #16]
        stream.frame_rate_video = video_frames;
90002672:	e9c0 3206 	strd	r3, r2, [r0, #24]
90002676:	4770      	bx	lr
    virtual void setFrameRate(const Handle handle, uint32_t ui_frames, uint32_t video_frames)
90002678:	b508      	push	{r3, lr}
        assert(handle < no_streams);
9000267a:	4a03      	ldr	r2, [pc, #12]	; (90002688 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm+0x1c>)
9000267c:	2182      	movs	r1, #130	; 0x82
9000267e:	4b03      	ldr	r3, [pc, #12]	; (9000268c <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm+0x20>)
90002680:	4803      	ldr	r0, [pc, #12]	; (90002690 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm+0x24>)
90002682:	f021 f917 	bl	900238b4 <__assert_func>
90002686:	bf00      	nop
90002688:	900275d4 	.word	0x900275d4
9000268c:	90026eb0 	.word	0x90026eb0
90002690:	90027050 	.word	0x90027050

90002694 <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:
    return HAL::beginFrame();
90002694:	f00e bf2a 	b.w	900114ec <_ZN8touchgfx3HAL10beginFrameEv>

90002698 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE4drawEmRKNS0_4RectERKNS0_11VideoWidgetE>:
        if (firstDrawThisFrame)
90002698:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
9000269c:	b903      	cbnz	r3, 900026a0 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE4drawEmRKNS0_4RectERKNS0_11VideoWidgetE+0x8>
9000269e:	4770      	bx	lr
    virtual void draw(const Handle handle, const touchgfx::Rect& invalidatedArea, const touchgfx::VideoWidget& widget)
900026a0:	b510      	push	{r4, lr}
            MUTEX_LOCK(mutexBuffers);
900026a2:	f04f 31ff 	mov.w	r1, #4294967295
900026a6:	4604      	mov	r4, r0
900026a8:	6c40      	ldr	r0, [r0, #68]	; 0x44
900026aa:	f00b fa5d 	bl	9000db68 <osMutexAcquire>
            firstDrawThisFrame = false;
900026ae:	f44f 7380 	mov.w	r3, #256	; 0x100
900026b2:	f8a4 303d 	strh.w	r3, [r4, #61]	; 0x3d
    }
900026b6:	bd10      	pop	{r4, pc}

900026b8 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE21unregisterVideoWidgetEm>:
    virtual void unregisterVideoWidget(const Handle handle)
900026b8:	b538      	push	{r3, r4, r5, lr}
900026ba:	460c      	mov	r4, r1
900026bc:	4605      	mov	r5, r0
        MUTEX_LOCK(mutexBuffers);
900026be:	f04f 31ff 	mov.w	r1, #4294967295
900026c2:	6c40      	ldr	r0, [r0, #68]	; 0x44
        streams[handle].isActive = false;
900026c4:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
        MUTEX_LOCK(mutexBuffers);
900026c8:	f00b fa4e 	bl	9000db68 <osMutexAcquire>
        MUTEX_UNLOCK(mutexBuffers);
900026cc:	6c68      	ldr	r0, [r5, #68]	; 0x44
900026ce:	f00b fa6f 	bl	9000dbb0 <osMutexRelease>
        streams[handle].isActive = false;
900026d2:	2300      	movs	r3, #0
900026d4:	eb05 0484 	add.w	r4, r5, r4, lsl #2
900026d8:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
        if (oneIsActive == false)
900026dc:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
900026e0:	b90b      	cbnz	r3, 900026e6 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE21unregisterVideoWidgetEm+0x2e>
            topBufferRGB = bufferRGB;
900026e2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
900026e4:	63ab      	str	r3, [r5, #56]	; 0x38
    }
900026e6:	bd38      	pop	{r3, r4, r5, pc}

900026e8 <_ZN20TouchGFXGeneratedHAL8endFrameEv>:
{
900026e8:	b570      	push	{r4, r5, r6, lr}
            if (stream.isPlaying || stream.isShowingOneFrame)
900026ea:	4c1c      	ldr	r4, [pc, #112]	; (9000275c <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x74>)
900026ec:	4605      	mov	r5, r0
    HAL::endFrame();
900026ee:	f00e ff09 	bl	90011504 <_ZN8touchgfx3HAL8endFrameEv>
900026f2:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
900026f6:	b98b      	cbnz	r3, 9000271c <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x34>
900026f8:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
900026fc:	b973      	cbnz	r3, 9000271c <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x34>
        firstDrawThisFrame = true;
900026fe:	2301      	movs	r3, #1
        SEM_POST(semDecode);
90002700:	6c20      	ldr	r0, [r4, #64]	; 0x40
        firstDrawThisFrame = true;
90002702:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        SEM_POST(semDecode);
90002706:	f00b faf9 	bl	9000dcfc <osSemaphoreRelease>
        if (uiHasMutex)
9000270a:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
9000270e:	b9f3      	cbnz	r3, 9000274e <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x66>
    dma.start();
90002710:	6868      	ldr	r0, [r5, #4]
90002712:	6803      	ldr	r3, [r0, #0]
}
90002714:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    dma.start();
90002718:	691b      	ldr	r3, [r3, #16]
9000271a:	4718      	bx	r3
    bool decodeForNextTick(Stream& stream)
    {
        // Running in UI thread

        // Compare tickCount/frameCount to frame_rate_ticks/frame_rate_video
        if ((stream.tickCount * stream.frame_rate_video) >= (stream.frame_rate_ticks * stream.frameCount))
9000271c:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
90002720:	69e1      	ldr	r1, [r4, #28]
90002722:	6922      	ldr	r2, [r4, #16]
90002724:	fb00 f303 	mul.w	r3, r0, r3
90002728:	fb01 f202 	mul.w	r2, r1, r2
9000272c:	4293      	cmp	r3, r2
9000272e:	d3e6      	bcc.n	900026fe <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x16>
        {
            if (allowSkipFrames)
90002730:	f894 003c 	ldrb.w	r0, [r4, #60]	; 0x3c
90002734:	b138      	cbz	r0, 90002746 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x5e>
            {
                stream.skip_frames = (stream.tickCount * stream.frame_rate_video - stream.frame_rate_ticks * stream.frameCount) / stream.frame_rate_ticks;
90002736:	1a9b      	subs	r3, r3, r2
90002738:	fbb3 f2f1 	udiv	r2, r3, r1
                if (stream.skip_frames > 0)
9000273c:	4299      	cmp	r1, r3
                {
                    stream.skip_frames--;
9000273e:	bf98      	it	ls
90002740:	f102 32ff 	addls.w	r2, r2, #4294967295
90002744:	6262      	str	r2, [r4, #36]	; 0x24
                    stream.doDecode = true;
90002746:	2301      	movs	r3, #1
90002748:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
        for (uint32_t i = 0; i < no_streams; i++)
9000274c:	e7d7      	b.n	900026fe <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x16>
            MUTEX_UNLOCK(mutexBuffers);
9000274e:	6c60      	ldr	r0, [r4, #68]	; 0x44
90002750:	f00b fa2e 	bl	9000dbb0 <osMutexRelease>
            uiHasMutex = false;
90002754:	2300      	movs	r3, #0
90002756:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
9000275a:	e7d9      	b.n	90002710 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x28>
9000275c:	24006ea4 	.word	0x24006ea4

90002760 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
    HAL::flushFrameBuffer(rect);
90002760:	f00e be8e 	b.w	90011480 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>

90002764 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:
}

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
    return HAL::blockCopy(dest, src, numBytes);
90002764:	f00e bfef 	b.w	90011746 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>

90002768 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:
{
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
90002768:	4814      	ldr	r0, [pc, #80]	; (900027bc <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x54>)
9000276a:	6943      	ldr	r3, [r0, #20]
9000276c:	03d9      	lsls	r1, r3, #15
9000276e:	d523      	bpl.n	900027b8 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x50>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
90002770:	2300      	movs	r3, #0
{
90002772:	b510      	push	{r4, lr}
90002774:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
90002778:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
9000277c:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
90002780:	f643 74e0 	movw	r4, #16352	; 0x3fe0
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
90002784:	f3c3 3c4e 	ubfx	ip, r3, #13, #15
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
90002788:	f3c3 0ec9 	ubfx	lr, r3, #3, #10
9000278c:	ea4f 1c4c 	mov.w	ip, ip, lsl #5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
90002790:	ea0c 0104 	and.w	r1, ip, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
90002794:	4673      	mov	r3, lr
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
90002796:	ea41 7283 	orr.w	r2, r1, r3, lsl #30
      } while (ways-- != 0U);
9000279a:	3b01      	subs	r3, #1
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
9000279c:	f8c0 2274 	str.w	r2, [r0, #628]	; 0x274
      } while (ways-- != 0U);
900027a0:	1c5a      	adds	r2, r3, #1
900027a2:	d1f8      	bne.n	90002796 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x2e>
    } while(sets-- != 0U);
900027a4:	f1ac 0c20 	sub.w	ip, ip, #32
900027a8:	f11c 0f20 	cmn.w	ip, #32
900027ac:	d1f0      	bne.n	90002790 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x28>
900027ae:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
900027b2:	f3bf 8f6f 	isb	sy
    {
        SCB_CleanInvalidateDCache();
    }
}
900027b6:	bd10      	pop	{r4, pc}
900027b8:	4770      	bx	lr
900027ba:	bf00      	nop
900027bc:	e000ed00 	.word	0xe000ed00

900027c0 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm>:
    virtual void setCommand(const Handle handle, Command cmd, uint32_t param)
900027c0:	b510      	push	{r4, lr}
        assert(handle < no_streams);
900027c2:	2900      	cmp	r1, #0
900027c4:	d133      	bne.n	9000282e <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x6e>
900027c6:	4604      	mov	r4, r0
        switch (cmd)
900027c8:	2a05      	cmp	r2, #5
900027ca:	d809      	bhi.n	900027e0 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x20>
900027cc:	e8df f002 	tbb	[pc, r2]
900027d0:	27221e0f 	.word	0x27221e0f
900027d4:	0903      	.short	0x0903
            stream.isPlaying = false;
900027d6:	2200      	movs	r2, #0
            stream.seek_to_frame = 1;
900027d8:	2301      	movs	r3, #1
            stream.isPlaying = false;
900027da:	f880 2029 	strb.w	r2, [r0, #41]	; 0x29
            stream.seek_to_frame = 1;
900027de:	6203      	str	r3, [r0, #32]
    }
900027e0:	bd10      	pop	{r4, pc}
            stream.repeat = (param > 0);
900027e2:	3b00      	subs	r3, #0
900027e4:	bf18      	it	ne
900027e6:	2301      	movne	r3, #1
900027e8:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
    }
900027ec:	bd10      	pop	{r4, pc}
            if (mjpegDecoders[handle]->hasVideo())
900027ee:	6840      	ldr	r0, [r0, #4]
900027f0:	6803      	ldr	r3, [r0, #0]
900027f2:	691b      	ldr	r3, [r3, #16]
900027f4:	4798      	blx	r3
900027f6:	2800      	cmp	r0, #0
900027f8:	d0f2      	beq.n	900027e0 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x20>
                stream.isPlaying = true;
900027fa:	2201      	movs	r2, #1
                stream.frameCount = 0;
900027fc:	2300      	movs	r3, #0
                stream.isPlaying = true;
900027fe:	f884 2029 	strb.w	r2, [r4, #41]	; 0x29
                stream.hasMoreFrames = true; // Assume more frames, lowered on end
90002802:	f884 202c 	strb.w	r2, [r4, #44]	; 0x2c
                stream.tickCount = 0;
90002806:	e9c4 3304 	strd	r3, r3, [r4, #16]
    }
9000280a:	bd10      	pop	{r4, pc}
            stream.isPlaying = false;
9000280c:	2300      	movs	r3, #0
9000280e:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
    }
90002812:	bd10      	pop	{r4, pc}
            stream.frameCount = 0;
90002814:	2200      	movs	r2, #0
            stream.seek_to_frame = param;
90002816:	6203      	str	r3, [r0, #32]
            stream.tickCount = 0;
90002818:	e9c0 2204 	strd	r2, r2, [r0, #16]
    }
9000281c:	bd10      	pop	{r4, pc}
            stream.frameCount = 0;
9000281e:	2200      	movs	r2, #0
            stream.isShowingOneFrame = true;
90002820:	2101      	movs	r1, #1
            stream.seek_to_frame = param;
90002822:	6203      	str	r3, [r0, #32]
            stream.isShowingOneFrame = true;
90002824:	f880 102a 	strb.w	r1, [r0, #42]	; 0x2a
            stream.tickCount = 0;
90002828:	e9c0 2204 	strd	r2, r2, [r0, #16]
    }
9000282c:	bd10      	pop	{r4, pc}
        assert(handle < no_streams);
9000282e:	4b03      	ldr	r3, [pc, #12]	; (9000283c <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x7c>)
90002830:	21a2      	movs	r1, #162	; 0xa2
90002832:	4a03      	ldr	r2, [pc, #12]	; (90002840 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x80>)
90002834:	4803      	ldr	r0, [pc, #12]	; (90002844 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x84>)
90002836:	f021 f83d 	bl	900238b4 <__assert_func>
9000283a:	bf00      	nop
9000283c:	90026eb0 	.word	0x90026eb0
90002840:	90027790 	.word	0x90027790
90002844:	90027050 	.word	0x90027050

90002848 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE>:
    virtual bool updateFrame(const Handle handle, touchgfx::VideoWidget& widget)
90002848:	b510      	push	{r4, lr}
        assert(handle < no_streams);
9000284a:	bb39      	cbnz	r1, 9000289c <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x54>
        if (stream.isPlaying)
9000284c:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
90002850:	4604      	mov	r4, r0
90002852:	b923      	cbnz	r3, 9000285e <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x16>
        if (stream.doInvalidateOnNextTick)
90002854:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
90002858:	b963      	cbnz	r3, 90002874 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x2c>
        return true;
9000285a:	2001      	movs	r0, #1
    }
9000285c:	bd10      	pop	{r4, pc}
        return vSyncForFrame;
9000285e:	4912      	ldr	r1, [pc, #72]	; (900028a8 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x60>)
            stream.tickCount += HAL::getInstance()->getLCDRefreshCount();
90002860:	6943      	ldr	r3, [r0, #20]
90002862:	6809      	ldr	r1, [r1, #0]
90002864:	f891 106b 	ldrb.w	r1, [r1, #107]	; 0x6b
90002868:	440b      	add	r3, r1
9000286a:	6143      	str	r3, [r0, #20]
        if (stream.doInvalidateOnNextTick)
9000286c:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
90002870:	2b00      	cmp	r3, #0
90002872:	d0f2      	beq.n	9000285a <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x12>
     *
     * @param [in] videoBuffer Video buffer.
     */
    void setVideoBuffer(uint8_t* const videoBuffer)
    {
        buffer = videoBuffer;
90002874:	68a1      	ldr	r1, [r4, #8]
            widget.invalidate();
90002876:	4610      	mov	r0, r2
90002878:	6813      	ldr	r3, [r2, #0]
9000287a:	695b      	ldr	r3, [r3, #20]
9000287c:	6311      	str	r1, [r2, #48]	; 0x30
9000287e:	4798      	blx	r3
            stream.doInvalidateOnNextTick = false;
90002880:	2300      	movs	r3, #0
            if (!stream.hasMoreFrames && !stream.repeat)
90002882:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
            stream.doInvalidateOnNextTick = false;
90002886:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
            if (!stream.hasMoreFrames && !stream.repeat)
9000288a:	2800      	cmp	r0, #0
9000288c:	d1e5      	bne.n	9000285a <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x12>
9000288e:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
90002892:	2b00      	cmp	r3, #0
90002894:	d1e2      	bne.n	9000285c <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x14>
                stream.isPlaying = false;
90002896:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
    }
9000289a:	bd10      	pop	{r4, pc}
        assert(handle < no_streams);
9000289c:	4b03      	ldr	r3, [pc, #12]	; (900028ac <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x64>)
9000289e:	21d0      	movs	r1, #208	; 0xd0
900028a0:	4a03      	ldr	r2, [pc, #12]	; (900028b0 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x68>)
900028a2:	4804      	ldr	r0, [pc, #16]	; (900028b4 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x6c>)
900028a4:	f021 f806 	bl	900238b4 <__assert_func>
900028a8:	24021c14 	.word	0x24021c14
900028ac:	90026eb0 	.word	0x90026eb0
900028b0:	90027964 	.word	0x90027964
900028b4:	90027050 	.word	0x90027050

900028b8 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE>:
    {
        // Running in UI thread

        for (uint32_t i = 0; i < no_streams; i++)
        {
            if (streams[i].isActive == false)
900028b8:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
    virtual Handle registerVideoWidget(touchgfx::VideoWidget& widget)
900028bc:	b570      	push	{r4, r5, r6, lr}
            if (streams[i].isActive == false)
900028be:	b9fb      	cbnz	r3, 90002900 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x48>
            {
                // Reset stream parameters
                streams[i] = Stream();
900028c0:	2201      	movs	r2, #1
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
900028c2:	6b85      	ldr	r5, [r0, #56]	; 0x38
                streams[i] = Stream();
900028c4:	60c3      	str	r3, [r0, #12]
900028c6:	f8a0 202d 	strh.w	r2, [r0, #45]	; 0x2d
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
900028ca:	f505 2487 	add.w	r4, r5, #276480	; 0x43800
        streams[handle].isActive = true;
900028ce:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
                streams[i] = Stream();
900028d2:	6103      	str	r3, [r0, #16]
900028d4:	6143      	str	r3, [r0, #20]
900028d6:	6183      	str	r3, [r0, #24]
900028d8:	61c3      	str	r3, [r0, #28]
900028da:	6203      	str	r3, [r0, #32]
900028dc:	6243      	str	r3, [r0, #36]	; 0x24
900028de:	f8c0 3029 	str.w	r3, [r0, #41]	; 0x29
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
900028e2:	e9d0 260c 	ldrd	r2, r6, [r0, #48]	; 0x30
900028e6:	4432      	add	r2, r6
900028e8:	4294      	cmp	r4, r2
900028ea:	d810      	bhi.n	9000290e <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x56>
     * @param height Height of the videoBuffer in pixels
     */
    void setVideoBufferFormat(Bitmap::BitmapFormat bufferFormat, int16_t width, int16_t height)
    {
        format = bufferFormat;
        bufferWidth = width;
900028ec:	4a0b      	ldr	r2, [pc, #44]	; (9000291c <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x64>)
        decodeBuffers[handle] = (uint32_t*)topBufferRGB;
900028ee:	6085      	str	r5, [r0, #8]
        topBufferRGB += sizeOfOneDecodeBuffer;
900028f0:	6384      	str	r4, [r0, #56]	; 0x38
    }
900028f2:	4618      	mov	r0, r3
        format = bufferFormat;
900028f4:	f881 3034 	strb.w	r3, [r1, #52]	; 0x34
        bufferWidth = width;
900028f8:	f8c1 2036 	str.w	r2, [r1, #54]	; 0x36
        buffer = videoBuffer;
900028fc:	630b      	str	r3, [r1, #48]	; 0x30
900028fe:	bd70      	pop	{r4, r5, r6, pc}

                return static_cast<VideoController::Handle>(i);
            }
        }

        assert(0 && "Unable to find free video stream handle!");
90002900:	4b07      	ldr	r3, [pc, #28]	; (90002920 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x68>)
90002902:	f240 11c5 	movw	r1, #453	; 0x1c5
90002906:	4a07      	ldr	r2, [pc, #28]	; (90002924 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x6c>)
90002908:	4807      	ldr	r0, [pc, #28]	; (90002928 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x70>)
9000290a:	f020 ffd3 	bl	900238b4 <__assert_func>
            assert(0 && "registerVideoWidget: Unable to allocate RGB buffer!");
9000290e:	4b07      	ldr	r3, [pc, #28]	; (9000292c <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x74>)
90002910:	2152      	movs	r1, #82	; 0x52
90002912:	4a07      	ldr	r2, [pc, #28]	; (90002930 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x78>)
90002914:	4804      	ldr	r0, [pc, #16]	; (90002928 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x70>)
90002916:	f020 ffcd 	bl	900238b4 <__assert_func>
9000291a:	bf00      	nop
9000291c:	012001e0 	.word	0x012001e0
90002920:	90027b04 	.word	0x90027b04
90002924:	90027b34 	.word	0x90027b34
90002928:	90027050 	.word	0x90027050
9000292c:	90027cbc 	.word	0x90027cbc
90002930:	90027cf8 	.word	0x90027cf8

90002934 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
90002934:	4b08      	ldr	r3, [pc, #32]	; (90002958 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv+0x24>)
90002936:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
9000293a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
9000293e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
90002942:	f3bf 8f6f 	isb	sy
90002946:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
9000294a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
9000294e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
90002952:	f3bf 8f6f 	isb	sy
}
90002956:	4770      	bx	lr
90002958:	e000e100 	.word	0xe000e100

9000295c <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
9000295c:	4b03      	ldr	r3, [pc, #12]	; (9000296c <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv+0x10>)
9000295e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
90002962:	609a      	str	r2, [r3, #8]
90002964:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
90002968:	609a      	str	r2, [r3, #8]
}
9000296a:	4770      	bx	lr
9000296c:	e000e100 	.word	0xe000e100

90002970 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
{
90002970:	b538      	push	{r3, r4, r5, lr}
90002972:	4604      	mov	r4, r0
    HAL::initialize();
90002974:	f00e fdd3 	bl	9001151e <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
90002978:	6823      	ldr	r3, [r4, #0]
9000297a:	6e5d      	ldr	r5, [r3, #100]	; 0x64
9000297c:	f010 fdd2 	bl	90013524 <_ZN8touchgfx11Application11getInstanceEv>
90002980:	4601      	mov	r1, r0
90002982:	4620      	mov	r0, r4
90002984:	47a8      	blx	r5
    setFrameBufferStartAddresses((void*)frameBuf, (void*)(frameBuf + sizeof(frameBuf) / (sizeof(uint32_t) * 2)), (void*)0);
90002986:	6823      	ldr	r3, [r4, #0]
90002988:	4a16      	ldr	r2, [pc, #88]	; (900029e4 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x74>)
9000298a:	f8d3 5088 	ldr.w	r5, [r3, #136]	; 0x88
9000298e:	4295      	cmp	r5, r2
90002990:	d11c      	bne.n	900029cc <_ZN20TouchGFXGeneratedHAL10initializeEv+0x5c>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
90002992:	4a15      	ldr	r2, [pc, #84]	; (900029e8 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x78>)
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
90002994:	2501      	movs	r5, #1
        setAnimationStorage(animationStorage);
90002996:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
9000299a:	f502 317f 	add.w	r1, r2, #261120	; 0x3fc00
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
9000299e:	4813      	ldr	r0, [pc, #76]	; (900029ec <_ZN20TouchGFXGeneratedHAL10initializeEv+0x7c>)
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
900029a0:	e9c4 210f 	strd	r2, r1, [r4, #60]	; 0x3c
        setAnimationStorage(animationStorage);
900029a4:	4a12      	ldr	r2, [pc, #72]	; (900029f0 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x80>)
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
900029a6:	7005      	strb	r5, [r0, #0]
900029a8:	4293      	cmp	r3, r2
900029aa:	d116      	bne.n	900029da <_ZN20TouchGFXGeneratedHAL10initializeEv+0x6a>
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
900029ac:	2300      	movs	r3, #0
        USE_ANIMATION_STORAGE = animationStorage != 0;
900029ae:	4a11      	ldr	r2, [pc, #68]	; (900029f4 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x84>)
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
900029b0:	6463      	str	r3, [r4, #68]	; 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
900029b2:	7013      	strb	r3, [r2, #0]
    void addDMA(touchgfx::DMA_Interface& dma)
    {
        this->dma = &dma;
900029b4:	6864      	ldr	r4, [r4, #4]
        sizeBufferRGB = sizeOfBuffer;
900029b6:	f44f 2087 	mov.w	r0, #276480	; 0x43800
        mjpegDecoders[index] = &decoder;
900029ba:	4b0f      	ldr	r3, [pc, #60]	; (900029f8 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x88>)
900029bc:	490f      	ldr	r1, [pc, #60]	; (900029fc <_ZN20TouchGFXGeneratedHAL10initializeEv+0x8c>)
        bufferRGB = buffer;
900029be:	4a10      	ldr	r2, [pc, #64]	; (90002a00 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x90>)
900029c0:	644c      	str	r4, [r1, #68]	; 0x44
        mjpegDecoders[index] = &decoder;
900029c2:	6059      	str	r1, [r3, #4]
        bufferRGB = buffer;
900029c4:	631a      	str	r2, [r3, #48]	; 0x30
        sizeBufferRGB = sizeOfBuffer;
900029c6:	e9c3 020d 	strd	r0, r2, [r3, #52]	; 0x34
}
900029ca:	bd38      	pop	{r3, r4, r5, pc}
    setFrameBufferStartAddresses((void*)frameBuf, (void*)(frameBuf + sizeof(frameBuf) / (sizeof(uint32_t) * 2)), (void*)0);
900029cc:	4a0d      	ldr	r2, [pc, #52]	; (90002a04 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x94>)
900029ce:	2300      	movs	r3, #0
900029d0:	4620      	mov	r0, r4
900029d2:	f5a2 317f 	sub.w	r1, r2, #261120	; 0x3fc00
900029d6:	47a8      	blx	r5
900029d8:	e7ec      	b.n	900029b4 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x44>
        setAnimationStorage(animationStorage);
900029da:	2100      	movs	r1, #0
900029dc:	4620      	mov	r0, r4
900029de:	4798      	blx	r3
900029e0:	e7e8      	b.n	900029b4 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x44>
900029e2:	bf00      	nop
900029e4:	90000b51 	.word	0x90000b51
900029e8:	d003fc00 	.word	0xd003fc00
900029ec:	24021c12 	.word	0x24021c12
900029f0:	9000097d 	.word	0x9000097d
900029f4:	24021c13 	.word	0x24021c13
900029f8:	24006ea4 	.word	0x24006ea4
900029fc:	24006e5c 	.word	0x24006e5c
90002a00:	d00bf400 	.word	0xd00bf400
90002a04:	d007f800 	.word	0xd007f800

90002a08 <HAL_LTDC_LineEventCallback>:
}

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef* hltdc)
    {
90002a08:	b510      	push	{r4, lr}
        return instance;
90002a0a:	4c14      	ldr	r4, [pc, #80]	; (90002a5c <HAL_LTDC_LineEventCallback+0x54>)
        if (!HAL::getInstance())
90002a0c:	6823      	ldr	r3, [r4, #0]
90002a0e:	b323      	cbz	r3, 90002a5a <HAL_LTDC_LineEventCallback+0x52>
        {
            return;
        }

        if (LTDC->LIPCR == lcd_int_active_line)
90002a10:	4b13      	ldr	r3, [pc, #76]	; (90002a60 <HAL_LTDC_LineEventCallback+0x58>)
90002a12:	4a14      	ldr	r2, [pc, #80]	; (90002a64 <HAL_LTDC_LineEventCallback+0x5c>)
90002a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90002a16:	8811      	ldrh	r1, [r2, #0]
90002a18:	428b      	cmp	r3, r1
90002a1a:	d00a      	beq.n	90002a32 <HAL_LTDC_LineEventCallback+0x2a>
            GPIO::set(GPIO::VSYNC_FREQ);
        }
        else
        {
            //exiting active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
90002a1c:	f006 ffd8 	bl	900099d0 <HAL_LTDC_ProgramLineEvent>
90002a20:	6820      	ldr	r0, [r4, #0]
        allowDMATransfers();
90002a22:	6803      	ldr	r3, [r0, #0]
90002a24:	6a1b      	ldr	r3, [r3, #32]
90002a26:	4798      	blx	r3

            // Signal to the framework that display update has finished.
            HAL::getInstance()->frontPorchEntered();
            GPIO::clear(GPIO::VSYNC_FREQ);
90002a28:	2000      	movs	r0, #0
        }
    }
90002a2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            GPIO::clear(GPIO::VSYNC_FREQ);
90002a2e:	f7fd bf49 	b.w	900008c4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
90002a32:	4b0d      	ldr	r3, [pc, #52]	; (90002a68 <HAL_LTDC_LineEventCallback+0x60>)
90002a34:	8819      	ldrh	r1, [r3, #0]
90002a36:	f006 ffcb 	bl	900099d0 <HAL_LTDC_ProgramLineEvent>
        return instance;
90002a3a:	6822      	ldr	r2, [r4, #0]
        vSyncCnt++;
90002a3c:	f892 306a 	ldrb.w	r3, [r2, #106]	; 0x6a
90002a40:	3301      	adds	r3, #1
90002a42:	f882 306a 	strb.w	r3, [r2, #106]	; 0x6a
            OSWrappers::signalVSync();
90002a46:	f7ff f89f 	bl	90001b88 <_ZN8touchgfx10OSWrappers11signalVSyncEv>
            HAL::getInstance()->swapFrameBuffers();
90002a4a:	6820      	ldr	r0, [r4, #0]
90002a4c:	f00f fac0 	bl	90011fd0 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
90002a50:	2000      	movs	r0, #0
    }
90002a52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            GPIO::set(GPIO::VSYNC_FREQ);
90002a56:	f7fd bf01 	b.w	9000085c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
    }
90002a5a:	bd10      	pop	{r4, pc}
90002a5c:	24021c14 	.word	0x24021c14
90002a60:	50001000 	.word	0x50001000
90002a64:	24006e5a 	.word	0x24006e5a
90002a68:	24006e58 	.word	0x24006e58

90002a6c <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv>:
    void decoderTaskEntry()
90002a6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
90002a70:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 90002b2c <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0xc0>
90002a74:	b083      	sub	sp, #12
                    stream.doInvalidateOnNextTick = true;
90002a76:	2601      	movs	r6, #1
                    stream.hasMoreFrames = decoder->decodeNextFrame((uint8_t*)decodeBuffers[i], width, height, stride);
90002a78:	f44f 7770 	mov.w	r7, #960	; 0x3c0
    void decoderTaskEntry()
90002a7c:	4604      	mov	r4, r0
90002a7e:	e024      	b.n	90002aca <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x5e>
                        decoder->gotoFrame(stream.seek_to_frame);
90002a80:	682b      	ldr	r3, [r5, #0]
90002a82:	4628      	mov	r0, r5
90002a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90002a86:	4798      	blx	r3
                        stream.seek_to_frame = 0;
90002a88:	2300      	movs	r3, #0
90002a8a:	6223      	str	r3, [r4, #32]
                    stream.hasMoreFrames = decoder->decodeNextFrame((uint8_t*)decodeBuffers[i], width, height, stride);
90002a8c:	6829      	ldr	r1, [r5, #0]
90002a8e:	f44f 7390 	mov.w	r3, #288	; 0x120
90002a92:	9700      	str	r7, [sp, #0]
90002a94:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
90002a98:	f8d1 9014 	ldr.w	r9, [r1, #20]
90002a9c:	4628      	mov	r0, r5
90002a9e:	68a1      	ldr	r1, [r4, #8]
90002aa0:	47c8      	blx	r9
                    stream.frameCount++;
90002aa2:	6923      	ldr	r3, [r4, #16]
                    stream.hasMoreFrames = decoder->decodeNextFrame((uint8_t*)decodeBuffers[i], width, height, stride);
90002aa4:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
                    stream.frameCount++;
90002aa8:	3301      	adds	r3, #1
90002aaa:	6123      	str	r3, [r4, #16]
                    if (stream.hasMoreFrames)
90002aac:	2800      	cmp	r0, #0
90002aae:	d033      	beq.n	90002b18 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0xac>
                        stream.frameNumber = decoder->getCurrentFrameNumber() - 1; // Points to frame after this
90002ab0:	682b      	ldr	r3, [r5, #0]
90002ab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90002ab4:	4543      	cmp	r3, r8
90002ab6:	d131      	bne.n	90002b1c <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0xb0>
        return frameNumber;
90002ab8:	6968      	ldr	r0, [r5, #20]
90002aba:	3801      	subs	r0, #1
                    stream.doDecode = false;
90002abc:	2200      	movs	r2, #0
                        stream.frameNumber = decoder->getCurrentFrameNumber() - 1; // Points to frame after this
90002abe:	60e0      	str	r0, [r4, #12]
                    stream.doDecode = false;
90002ac0:	f884 202e 	strb.w	r2, [r4, #46]	; 0x2e
            MUTEX_UNLOCK(mutexBuffers);
90002ac4:	6c60      	ldr	r0, [r4, #68]	; 0x44
90002ac6:	f00b f873 	bl	9000dbb0 <osMutexRelease>
            SEM_WAIT(semDecode);
90002aca:	f04f 31ff 	mov.w	r1, #4294967295
90002ace:	6c20      	ldr	r0, [r4, #64]	; 0x40
90002ad0:	f00b f8e0 	bl	9000dc94 <osSemaphoreAcquire>
            MUTEX_LOCK(mutexBuffers);
90002ad4:	f04f 31ff 	mov.w	r1, #4294967295
90002ad8:	6c60      	ldr	r0, [r4, #68]	; 0x44
90002ada:	f00b f845 	bl	9000db68 <osMutexAcquire>
                if (stream.doDecode)
90002ade:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
90002ae2:	2b00      	cmp	r3, #0
90002ae4:	d0ee      	beq.n	90002ac4 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x58>
                    if (stream.seek_to_frame > 0)
90002ae6:	6a21      	ldr	r1, [r4, #32]
                    MJPEGDecoder* const decoder = mjpegDecoders[i];
90002ae8:	6865      	ldr	r5, [r4, #4]
                    stream.doInvalidateOnNextTick = true;
90002aea:	f884 602b 	strb.w	r6, [r4, #43]	; 0x2b
                    if (stream.seek_to_frame > 0)
90002aee:	2900      	cmp	r1, #0
90002af0:	d1c6      	bne.n	90002a80 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x14>
                        if (stream.skip_frames > 0)
90002af2:	6a63      	ldr	r3, [r4, #36]	; 0x24
90002af4:	2b00      	cmp	r3, #0
90002af6:	d0c9      	beq.n	90002a8c <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x20>
                            decoder->gotoFrame(decoder->getCurrentFrameNumber() + stream.skip_frames);
90002af8:	682a      	ldr	r2, [r5, #0]
90002afa:	e9d2 9109 	ldrd	r9, r1, [r2, #36]	; 0x24
90002afe:	4541      	cmp	r1, r8
90002b00:	d10f      	bne.n	90002b22 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0xb6>
90002b02:	6968      	ldr	r0, [r5, #20]
90002b04:	18c1      	adds	r1, r0, r3
90002b06:	4628      	mov	r0, r5
90002b08:	47c8      	blx	r9
                            stream.frameCount += stream.skip_frames;
90002b0a:	6923      	ldr	r3, [r4, #16]
90002b0c:	6a61      	ldr	r1, [r4, #36]	; 0x24
                            stream.skip_frames = 0;
90002b0e:	2200      	movs	r2, #0
                            stream.frameCount += stream.skip_frames;
90002b10:	440b      	add	r3, r1
                            stream.skip_frames = 0;
90002b12:	6262      	str	r2, [r4, #36]	; 0x24
                            stream.frameCount += stream.skip_frames;
90002b14:	6123      	str	r3, [r4, #16]
90002b16:	e7b9      	b.n	90002a8c <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x20>
90002b18:	2001      	movs	r0, #1
90002b1a:	e7cf      	b.n	90002abc <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x50>
                        stream.frameNumber = decoder->getCurrentFrameNumber() - 1; // Points to frame after this
90002b1c:	4628      	mov	r0, r5
90002b1e:	4798      	blx	r3
90002b20:	e7cb      	b.n	90002aba <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x4e>
                            decoder->gotoFrame(decoder->getCurrentFrameNumber() + stream.skip_frames);
90002b22:	4628      	mov	r0, r5
90002b24:	4788      	blx	r1
90002b26:	6a63      	ldr	r3, [r4, #36]	; 0x24
90002b28:	e7ec      	b.n	90002b04 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x98>
90002b2a:	bf00      	nop
90002b2c:	90000c41 	.word	0x90000c41

90002b30 <videoTaskFunc>:
    videoController.decoderTaskEntry();
90002b30:	4801      	ldr	r0, [pc, #4]	; (90002b38 <videoTaskFunc+0x8>)
{
90002b32:	b508      	push	{r3, lr}
    videoController.decoderTaskEntry();
90002b34:	f7ff ff9a 	bl	90002a6c <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv>
90002b38:	24006ea4 	.word	0x24006ea4

90002b3c <_GLOBAL__sub_I_mjpegdecoder1>:
}
90002b3c:	b538      	push	{r3, r4, r5, lr}
HardwareMJPEGDecoder mjpegdecoder1;
90002b3e:	4815      	ldr	r0, [pc, #84]	; (90002b94 <_GLOBAL__sub_I_mjpegdecoder1+0x58>)
        Stream() : frameNumber(0), frameCount(0), tickCount(0), frame_rate_video(0), frame_rate_ticks(0),
90002b40:	2500      	movs	r5, #0
90002b42:	f7fe fc25 	bl	90001390 <_ZN20HardwareMJPEGDecoderC1Ev>
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
90002b46:	4c14      	ldr	r4, [pc, #80]	; (90002b98 <_GLOBAL__sub_I_mjpegdecoder1+0x5c>)
90002b48:	4914      	ldr	r1, [pc, #80]	; (90002b9c <_GLOBAL__sub_I_mjpegdecoder1+0x60>)
            doInvalidateOnNextTick(false), hasMoreFrames(false), repeat(true), doDecode(false) {}
90002b4a:	f44f 7380 	mov.w	r3, #256	; 0x100
        semDecode = SEM_CREATE(); // Binary semaphore
90002b4e:	462a      	mov	r2, r5
90002b50:	2001      	movs	r0, #1
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
90002b52:	6021      	str	r1, [r4, #0]
        semDecode = SEM_CREATE(); // Binary semaphore
90002b54:	4629      	mov	r1, r5
            doInvalidateOnNextTick(false), hasMoreFrames(false), repeat(true), doDecode(false) {}
90002b56:	85a3      	strh	r3, [r4, #44]	; 0x2c
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
90002b58:	87a3      	strh	r3, [r4, #60]	; 0x3c
        Stream() : frameNumber(0), frameCount(0), tickCount(0), frame_rate_video(0), frame_rate_ticks(0),
90002b5a:	60e5      	str	r5, [r4, #12]
            isActive(false), isPlaying(false), isShowingOneFrame(false),
90002b5c:	62a5      	str	r5, [r4, #40]	; 0x28
            doInvalidateOnNextTick(false), hasMoreFrames(false), repeat(true), doDecode(false) {}
90002b5e:	f884 502e 	strb.w	r5, [r4, #46]	; 0x2e
        : VideoController(), bufferRGB(0), sizeBufferRGB(0), topBufferRGB(0),
90002b62:	63a5      	str	r5, [r4, #56]	; 0x38
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
90002b64:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
        Stream() : frameNumber(0), frameCount(0), tickCount(0), frame_rate_video(0), frame_rate_ticks(0),
90002b68:	e9c4 5504 	strd	r5, r5, [r4, #16]
90002b6c:	e9c4 5506 	strd	r5, r5, [r4, #24]
            seek_to_frame(0), skip_frames(0),
90002b70:	e9c4 5508 	strd	r5, r5, [r4, #32]
        : VideoController(), bufferRGB(0), sizeBufferRGB(0), topBufferRGB(0),
90002b74:	e9c4 550c 	strd	r5, r5, [r4, #48]	; 0x30
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
90002b78:	e9c4 5510 	strd	r5, r5, [r4, #64]	; 0x40
90002b7c:	e9c4 5501 	strd	r5, r5, [r4, #4]
        semDecode = SEM_CREATE(); // Binary semaphore
90002b80:	f00b f838 	bl	9000dbf4 <osSemaphoreNew>
90002b84:	4603      	mov	r3, r0
        mutexBuffers = MUTEX_CREATE();
90002b86:	4628      	mov	r0, r5
        semDecode = SEM_CREATE(); // Binary semaphore
90002b88:	6423      	str	r3, [r4, #64]	; 0x40
        mutexBuffers = MUTEX_CREATE();
90002b8a:	f00a ffad 	bl	9000dae8 <osMutexNew>
90002b8e:	6460      	str	r0, [r4, #68]	; 0x44
}
90002b90:	bd38      	pop	{r3, r4, r5, pc}
90002b92:	bf00      	nop
90002b94:	24006e5c 	.word	0x24006e5c
90002b98:	24006ea4 	.word	0x24006ea4
90002b9c:	90027ea4 	.word	0x90027ea4

90002ba0 <vApplicationIdleHook>:
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
  
  vTaskSetApplicationTaskTag(NULL, IdleTaskHook);
90002ba0:	4901      	ldr	r1, [pc, #4]	; (90002ba8 <vApplicationIdleHook+0x8>)
90002ba2:	2000      	movs	r0, #0
90002ba4:	f00d bbd8 	b.w	90010358 <vTaskSetApplicationTaskTag>
90002ba8:	90000c1d 	.word	0x90000c1d

90002bac <StartDefaultTask>:
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  // Restart MCU if error occurs
	  osEventFlagsWait(eventESPResponseHandle, EVENT_FLAG_ESP_ERROR, 0, osWaitForever);
90002bac:	480a      	ldr	r0, [pc, #40]	; (90002bd8 <StartDefaultTask+0x2c>)
90002bae:	2200      	movs	r2, #0
90002bb0:	2101      	movs	r1, #1
90002bb2:	6800      	ldr	r0, [r0, #0]
{
90002bb4:	b508      	push	{r3, lr}
	  osEventFlagsWait(eventESPResponseHandle, EVENT_FLAG_ESP_ERROR, 0, osWaitForever);
90002bb6:	f04f 33ff 	mov.w	r3, #4294967295
90002bba:	f00a ff55 	bl	9000da68 <osEventFlagsWait>
  __ASM volatile ("dsb 0xF":::"memory");
90002bbe:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
90002bc2:	4906      	ldr	r1, [pc, #24]	; (90002bdc <StartDefaultTask+0x30>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
90002bc4:	4b06      	ldr	r3, [pc, #24]	; (90002be0 <StartDefaultTask+0x34>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
90002bc6:	68ca      	ldr	r2, [r1, #12]
90002bc8:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
90002bcc:	4313      	orrs	r3, r2
90002bce:	60cb      	str	r3, [r1, #12]
90002bd0:	f3bf 8f4f 	dsb	sy
    __NOP();
90002bd4:	bf00      	nop
  for(;;)                                                           /* wait until reset */
90002bd6:	e7fd      	b.n	90002bd4 <StartDefaultTask+0x28>
90002bd8:	24006f24 	.word	0x24006f24
90002bdc:	e000ed00 	.word	0xe000ed00
90002be0:	05fa0004 	.word	0x05fa0004

90002be4 <prvTaskReadTempAndHumidity>:
void prvTaskReadTempAndHumidity(void *argument)
{
  /* USER CODE BEGIN prvTaskReadTempAndHumidity */
  /* Infinite loop */
	// Wait for ESP setup to finish
	osEventFlagsWait(eventESPSetUpFinishedHandle, EVENT_FLAG1,  osFlagsWaitAny, osWaitForever);
90002be4:	4a12      	ldr	r2, [pc, #72]	; (90002c30 <prvTaskReadTempAndHumidity+0x4c>)
90002be6:	f04f 33ff 	mov.w	r3, #4294967295
90002bea:	2101      	movs	r1, #1
90002bec:	4c11      	ldr	r4, [pc, #68]	; (90002c34 <prvTaskReadTempAndHumidity+0x50>)
90002bee:	6810      	ldr	r0, [r2, #0]
90002bf0:	2200      	movs	r2, #0
	float temperature;
	float humidity;
  for(;;)
  {	// Read sensor data every 1 second

	 if(sht3x_read_temperature_and_humidity(&sht31, &temperature, &humidity))	{
90002bf2:	4d11      	ldr	r5, [pc, #68]	; (90002c38 <prvTaskReadTempAndHumidity+0x54>)
{
90002bf4:	b500      	push	{lr}
90002bf6:	b083      	sub	sp, #12
	osEventFlagsWait(eventESPSetUpFinishedHandle, EVENT_FLAG1,  osFlagsWaitAny, osWaitForever);
90002bf8:	f00a ff36 	bl	9000da68 <osEventFlagsWait>
	 if(sht3x_read_temperature_and_humidity(&sht31, &temperature, &humidity))	{
90002bfc:	aa01      	add	r2, sp, #4
90002bfe:	4669      	mov	r1, sp
90002c00:	4628      	mov	r0, r5
90002c02:	f000 ff39 	bl	90003a78 <sht3x_read_temperature_and_humidity>
		 osMessageQueuePut(queueTempAndHumidHandle, &temperature, 0, osWaitForever);
90002c06:	4669      	mov	r1, sp
90002c08:	f04f 33ff 	mov.w	r3, #4294967295
90002c0c:	2200      	movs	r2, #0
	 if(sht3x_read_temperature_and_humidity(&sht31, &temperature, &humidity))	{
90002c0e:	b148      	cbz	r0, 90002c24 <prvTaskReadTempAndHumidity+0x40>
		 osMessageQueuePut(queueTempAndHumidHandle, &temperature, 0, osWaitForever);
90002c10:	6820      	ldr	r0, [r4, #0]
90002c12:	f00b f8dd 	bl	9000ddd0 <osMessageQueuePut>
		 osMessageQueuePut(queueTempAndHumidHandle, &humidity, 0, osWaitForever);
90002c16:	f04f 33ff 	mov.w	r3, #4294967295
90002c1a:	2200      	movs	r2, #0
90002c1c:	a901      	add	r1, sp, #4
90002c1e:	6820      	ldr	r0, [r4, #0]
90002c20:	f00b f8d6 	bl	9000ddd0 <osMessageQueuePut>
	 }

	 // Delay for 1 second
	 osDelay(1000);
90002c24:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
90002c28:	f00a fec4 	bl	9000d9b4 <osDelay>
	 if(sht3x_read_temperature_and_humidity(&sht31, &temperature, &humidity))	{
90002c2c:	e7e6      	b.n	90002bfc <prvTaskReadTempAndHumidity+0x18>
90002c2e:	bf00      	nop
90002c30:	24006f2c 	.word	0x24006f2c
90002c34:	240072f4 	.word	0x240072f4
90002c38:	24000030 	.word	0x24000030

90002c3c <prvTaskReadESP>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_prvTaskReadESP */
void prvTaskReadESP(void *argument)
{
90002c3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  /* USER CODE BEGIN prvTaskReadESP */
  /* Infinite loop */
	uint8_t rxChar = '\0';
90002c40:	2300      	movs	r3, #0
{
90002c42:	b083      	sub	sp, #12
90002c44:	f8df 9094 	ldr.w	r9, [pc, #148]	; 90002cdc <prvTaskReadESP+0xa0>
90002c48:	4c21      	ldr	r4, [pc, #132]	; (90002cd0 <prvTaskReadESP+0x94>)
	uint16_t received_message_index = 0;
90002c4a:	461d      	mov	r5, r3
90002c4c:	4f21      	ldr	r7, [pc, #132]	; (90002cd4 <prvTaskReadESP+0x98>)
90002c4e:	f8df a090 	ldr.w	sl, [pc, #144]	; 90002ce0 <prvTaskReadESP+0xa4>
90002c52:	f8df b090 	ldr.w	fp, [pc, #144]	; 90002ce4 <prvTaskReadESP+0xa8>
	  received_message[received_message_index++] = rxChar; // Append the character

	  // Check if got expected response
	  osSemaphoreAcquire(semaphoreHaltUntilStringHandle, osWaitForever);
	  // If message is valid, signal and clear message
	  if(strstr((char*)received_message, (char*)expectedESPResponse) != NULL){
90002c56:	f8df 8090 	ldr.w	r8, [pc, #144]	; 90002ce8 <prvTaskReadESP+0xac>
	uint8_t rxChar = '\0';
90002c5a:	f88d 3007 	strb.w	r3, [sp, #7]
	uint16_t received_message_index = 0;
90002c5e:	e00e      	b.n	90002c7e <prvTaskReadESP+0x42>
		  osEventFlagsSet(eventESPResponseValidHandle, EVENT_FLAG1);
90002c60:	f8da 0000 	ldr.w	r0, [sl]
90002c64:	f00a fec8 	bl	9000d9f8 <osEventFlagsSet>
		  memset(received_message, '\0', strlen((char*)received_message));
90002c68:	4620      	mov	r0, r4
90002c6a:	f7fd fb89 	bl	90000380 <strlen>
90002c6e:	4629      	mov	r1, r5
90002c70:	4602      	mov	r2, r0
90002c72:	4620      	mov	r0, r4
90002c74:	f021 fd14 	bl	900246a0 <memset>
		  // Signal if "ERROR" is recieved
		  if(strstr((char*)received_message, "ERROR\r\n") != NULL){
		  		  osEventFlagsSet(eventESPResponseHandle, EVENT_FLAG_ESP_ERROR);
		  	  }
	  }
	  osSemaphoreRelease(semaphoreHaltUntilStringHandle);
90002c78:	6838      	ldr	r0, [r7, #0]
90002c7a:	f00b f83f 	bl	9000dcfc <osSemaphoreRelease>
	  osMessageQueueGet(queueRxDataCharHandle, &rxChar, 0, osWaitForever);
90002c7e:	2200      	movs	r2, #0
90002c80:	f04f 33ff 	mov.w	r3, #4294967295
90002c84:	f10d 0107 	add.w	r1, sp, #7
90002c88:	f8d9 0000 	ldr.w	r0, [r9]
90002c8c:	f00b f8e2 	bl	9000de54 <osMessageQueueGet>
	  received_message[received_message_index++] = rxChar; // Append the character
90002c90:	f89d 3007 	ldrb.w	r3, [sp, #7]
90002c94:	1c6e      	adds	r6, r5, #1
	  osSemaphoreAcquire(semaphoreHaltUntilStringHandle, osWaitForever);
90002c96:	f04f 31ff 	mov.w	r1, #4294967295
90002c9a:	6838      	ldr	r0, [r7, #0]
	  received_message[received_message_index++] = rxChar; // Append the character
90002c9c:	5563      	strb	r3, [r4, r5]
	  osSemaphoreAcquire(semaphoreHaltUntilStringHandle, osWaitForever);
90002c9e:	f00a fff9 	bl	9000dc94 <osSemaphoreAcquire>
	  if(strstr((char*)received_message, (char*)expectedESPResponse) != NULL){
90002ca2:	4641      	mov	r1, r8
90002ca4:	4620      	mov	r0, r4
90002ca6:	f021 fd15 	bl	900246d4 <strstr>
		  received_message_index = 0;
90002caa:	2500      	movs	r5, #0
	  received_message[received_message_index++] = rxChar; // Append the character
90002cac:	b2b6      	uxth	r6, r6
		  osEventFlagsSet(eventESPResponseValidHandle, EVENT_FLAG1);
90002cae:	2101      	movs	r1, #1
	  if(strstr((char*)received_message, (char*)expectedESPResponse) != NULL){
90002cb0:	2800      	cmp	r0, #0
90002cb2:	d1d5      	bne.n	90002c60 <prvTaskReadESP+0x24>
		  if(strstr((char*)received_message, "ERROR\r\n") != NULL){
90002cb4:	4908      	ldr	r1, [pc, #32]	; (90002cd8 <prvTaskReadESP+0x9c>)
90002cb6:	4620      	mov	r0, r4
90002cb8:	f021 fd0c 	bl	900246d4 <strstr>
	  received_message[received_message_index++] = rxChar; // Append the character
90002cbc:	4635      	mov	r5, r6
		  		  osEventFlagsSet(eventESPResponseHandle, EVENT_FLAG_ESP_ERROR);
90002cbe:	2101      	movs	r1, #1
		  if(strstr((char*)received_message, "ERROR\r\n") != NULL){
90002cc0:	2800      	cmp	r0, #0
90002cc2:	d0d9      	beq.n	90002c78 <prvTaskReadESP+0x3c>
		  		  osEventFlagsSet(eventESPResponseHandle, EVENT_FLAG_ESP_ERROR);
90002cc4:	f8db 0000 	ldr.w	r0, [fp]
90002cc8:	f00a fe96 	bl	9000d9f8 <osEventFlagsSet>
90002ccc:	e7d4      	b.n	90002c78 <prvTaskReadESP+0x3c>
90002cce:	bf00      	nop
90002cd0:	240072f8 	.word	0x240072f8
90002cd4:	240074fc 	.word	0x240074fc
90002cd8:	90027edc 	.word	0x90027edc
90002cdc:	240072f0 	.word	0x240072f0
90002ce0:	24006f28 	.word	0x24006f28
90002ce4:	24006f24 	.word	0x24006f24
90002ce8:	24006f30 	.word	0x24006f30

90002cec <prvTaskSetUpESP>:
{
90002cec:	e92d 4888 	stmdb	sp!, {r3, r7, fp, lr}
90002cf0:	4f9a      	ldr	r7, [pc, #616]	; (90002f5c <prvTaskSetUpESP+0x270>)
90002cf2:	4c9b      	ldr	r4, [pc, #620]	; (90002f60 <prvTaskSetUpESP+0x274>)
90002cf4:	f8df 9284 	ldr.w	r9, [pc, #644]	; 90002f7c <prvTaskSetUpESP+0x290>
90002cf8:	f107 0a04 	add.w	sl, r7, #4
90002cfc:	4d99      	ldr	r5, [pc, #612]	; (90002f64 <prvTaskSetUpESP+0x278>)
90002cfe:	4e9a      	ldr	r6, [pc, #616]	; (90002f68 <prvTaskSetUpESP+0x27c>)
    HAL_UART_Transmit(&huart2, (uint8_t*) send, strlen(send), HAL_MAX_DELAY);
90002d00:	f8df 827c 	ldr.w	r8, [pc, #636]	; 90002f80 <prvTaskSetUpESP+0x294>
90002d04:	e009      	b.n	90002d1a <prvTaskSetUpESP+0x2e>
    	if(!(osEventFlagsGet(eventESPResponseHandle) & EVENT_FLAG_ESP_RESPONSE_TIMEOUT)){
90002d06:	6828      	ldr	r0, [r5, #0]
90002d08:	f00a fea4 	bl	9000da54 <osEventFlagsGet>
90002d0c:	06c0      	lsls	r0, r0, #27
90002d0e:	f100 8110 	bmi.w	90002f32 <prvTaskSetUpESP+0x246>
        	osEventFlagsSet(eventESPResponseHandle, EVENT_FLAG_ESP_RESPONSE_TIMEOUT);
90002d12:	2110      	movs	r1, #16
90002d14:	6828      	ldr	r0, [r5, #0]
90002d16:	f00a fe6f 	bl	9000d9f8 <osEventFlagsSet>
    HAL_UART_Transmit(&huart2, (uint8_t*) send, strlen(send), HAL_MAX_DELAY);
90002d1a:	2208      	movs	r2, #8
90002d1c:	f04f 33ff 	mov.w	r3, #4294967295
90002d20:	4992      	ldr	r1, [pc, #584]	; (90002f6c <prvTaskSetUpESP+0x280>)
90002d22:	4640      	mov	r0, r8
90002d24:	f009 f99a 	bl	9000c05c <HAL_UART_Transmit>
    osSemaphoreAcquire(semaphoreHaltUntilStringHandle, osWaitForever);
90002d28:	f04f 31ff 	mov.w	r1, #4294967295
90002d2c:	6820      	ldr	r0, [r4, #0]
90002d2e:	f00a ffb1 	bl	9000dc94 <osSemaphoreAcquire>
    strcpy((char*) expectedESPResponse, recieve);
90002d32:	4b8f      	ldr	r3, [pc, #572]	; (90002f70 <prvTaskSetUpESP+0x284>)
90002d34:	e893 0003 	ldmia.w	r3, {r0, r1}
90002d38:	e887 0003 	stmia.w	r7, {r0, r1}
    osSemaphoreRelease(semaphoreHaltUntilStringHandle);
90002d3c:	6820      	ldr	r0, [r4, #0]
90002d3e:	f00a ffdd 	bl	9000dcfc <osSemaphoreRelease>
    uint32_t flags = osEventFlagsWait(eventESPResponseValidHandle, EVENT_FLAG1,  osFlagsWaitAny, EVENT_FLAG_WAIT);
90002d42:	f241 3388 	movw	r3, #5000	; 0x1388
90002d46:	2200      	movs	r2, #0
90002d48:	2101      	movs	r1, #1
90002d4a:	f8d9 0000 	ldr.w	r0, [r9]
90002d4e:	f00a fe8b 	bl	9000da68 <osEventFlagsWait>
    if (flags & EVENT_FLAG1) {
90002d52:	07c3      	lsls	r3, r0, #31
90002d54:	d5d7      	bpl.n	90002d06 <prvTaskSetUpESP+0x1a>
    HAL_UART_Transmit(&huart2, (uint8_t*) send, strlen(send), HAL_MAX_DELAY);
90002d56:	f8df b22c 	ldr.w	fp, [pc, #556]	; 90002f84 <prvTaskSetUpESP+0x298>
90002d5a:	e00a      	b.n	90002d72 <prvTaskSetUpESP+0x86>
    	if(!(osEventFlagsGet(eventESPResponseHandle) & EVENT_FLAG_ESP_RESPONSE_TIMEOUT)){
90002d5c:	6828      	ldr	r0, [r5, #0]
90002d5e:	f00a fe79 	bl	9000da54 <osEventFlagsGet>
90002d62:	06c2      	lsls	r2, r0, #27
        	osEventFlagsSet(eventESPResponseHandle, EVENT_FLAG_ESP_RESPONSE_TIMEOUT);
90002d64:	f04f 0110 	mov.w	r1, #16
    	if(!(osEventFlagsGet(eventESPResponseHandle) & EVENT_FLAG_ESP_RESPONSE_TIMEOUT)){
90002d68:	f100 80e8 	bmi.w	90002f3c <prvTaskSetUpESP+0x250>
        	osEventFlagsSet(eventESPResponseHandle, EVENT_FLAG_ESP_RESPONSE_TIMEOUT);
90002d6c:	6828      	ldr	r0, [r5, #0]
90002d6e:	f00a fe43 	bl	9000d9f8 <osEventFlagsSet>
    HAL_UART_Transmit(&huart2, (uint8_t*) send, strlen(send), HAL_MAX_DELAY);
90002d72:	f04f 33ff 	mov.w	r3, #4294967295
90002d76:	2206      	movs	r2, #6
90002d78:	4659      	mov	r1, fp
90002d7a:	4640      	mov	r0, r8
90002d7c:	f009 f96e 	bl	9000c05c <HAL_UART_Transmit>
    osSemaphoreAcquire(semaphoreHaltUntilStringHandle, osWaitForever);
90002d80:	f04f 31ff 	mov.w	r1, #4294967295
90002d84:	6820      	ldr	r0, [r4, #0]
90002d86:	f00a ff85 	bl	9000dc94 <osSemaphoreAcquire>
    strcpy((char*) expectedESPResponse, recieve);
90002d8a:	e896 0003 	ldmia.w	r6, {r0, r1}
90002d8e:	6038      	str	r0, [r7, #0]
90002d90:	f88a 1000 	strb.w	r1, [sl]
    osSemaphoreRelease(semaphoreHaltUntilStringHandle);
90002d94:	6820      	ldr	r0, [r4, #0]
90002d96:	f00a ffb1 	bl	9000dcfc <osSemaphoreRelease>
    uint32_t flags = osEventFlagsWait(eventESPResponseValidHandle, EVENT_FLAG1,  osFlagsWaitAny, EVENT_FLAG_WAIT);
90002d9a:	2101      	movs	r1, #1
90002d9c:	f241 3388 	movw	r3, #5000	; 0x1388
90002da0:	2200      	movs	r2, #0
90002da2:	f8d9 0000 	ldr.w	r0, [r9]
90002da6:	f00a fe5f 	bl	9000da68 <osEventFlagsWait>
    if (flags & EVENT_FLAG1) {
90002daa:	07c1      	lsls	r1, r0, #31
90002dac:	d5d6      	bpl.n	90002d5c <prvTaskSetUpESP+0x70>
    HAL_UART_Transmit(&huart2, (uint8_t*) send, strlen(send), HAL_MAX_DELAY);
90002dae:	f8df b1d8 	ldr.w	fp, [pc, #472]	; 90002f88 <prvTaskSetUpESP+0x29c>
90002db2:	e00a      	b.n	90002dca <prvTaskSetUpESP+0xde>
    	if(!(osEventFlagsGet(eventESPResponseHandle) & EVENT_FLAG_ESP_RESPONSE_TIMEOUT)){
90002db4:	6828      	ldr	r0, [r5, #0]
90002db6:	f00a fe4d 	bl	9000da54 <osEventFlagsGet>
90002dba:	06c0      	lsls	r0, r0, #27
        	osEventFlagsSet(eventESPResponseHandle, EVENT_FLAG_ESP_RESPONSE_TIMEOUT);
90002dbc:	f04f 0110 	mov.w	r1, #16
    	if(!(osEventFlagsGet(eventESPResponseHandle) & EVENT_FLAG_ESP_RESPONSE_TIMEOUT)){
90002dc0:	f100 80c1 	bmi.w	90002f46 <prvTaskSetUpESP+0x25a>
        	osEventFlagsSet(eventESPResponseHandle, EVENT_FLAG_ESP_RESPONSE_TIMEOUT);
90002dc4:	6828      	ldr	r0, [r5, #0]
90002dc6:	f00a fe17 	bl	9000d9f8 <osEventFlagsSet>
    HAL_UART_Transmit(&huart2, (uint8_t*) send, strlen(send), HAL_MAX_DELAY);
90002dca:	f04f 33ff 	mov.w	r3, #4294967295
90002dce:	220e      	movs	r2, #14
90002dd0:	4659      	mov	r1, fp
90002dd2:	4640      	mov	r0, r8
90002dd4:	f009 f942 	bl	9000c05c <HAL_UART_Transmit>
    osSemaphoreAcquire(semaphoreHaltUntilStringHandle, osWaitForever);
90002dd8:	f04f 31ff 	mov.w	r1, #4294967295
90002ddc:	6820      	ldr	r0, [r4, #0]
90002dde:	f00a ff59 	bl	9000dc94 <osSemaphoreAcquire>
    strcpy((char*) expectedESPResponse, recieve);
90002de2:	e896 0003 	ldmia.w	r6, {r0, r1}
90002de6:	6038      	str	r0, [r7, #0]
90002de8:	f88a 1000 	strb.w	r1, [sl]
    osSemaphoreRelease(semaphoreHaltUntilStringHandle);
90002dec:	6820      	ldr	r0, [r4, #0]
90002dee:	f00a ff85 	bl	9000dcfc <osSemaphoreRelease>
    uint32_t flags = osEventFlagsWait(eventESPResponseValidHandle, EVENT_FLAG1,  osFlagsWaitAny, EVENT_FLAG_WAIT);
90002df2:	f241 3388 	movw	r3, #5000	; 0x1388
90002df6:	2200      	movs	r2, #0
90002df8:	2101      	movs	r1, #1
90002dfa:	f8d9 0000 	ldr.w	r0, [r9]
90002dfe:	f00a fe33 	bl	9000da68 <osEventFlagsWait>
    if (flags & EVENT_FLAG1) {
90002e02:	07c3      	lsls	r3, r0, #31
90002e04:	d5d6      	bpl.n	90002db4 <prvTaskSetUpESP+0xc8>
    HAL_UART_Transmit(&huart2, (uint8_t*) send, strlen(send), HAL_MAX_DELAY);
90002e06:	f8df b184 	ldr.w	fp, [pc, #388]	; 90002f8c <prvTaskSetUpESP+0x2a0>
90002e0a:	e00a      	b.n	90002e22 <prvTaskSetUpESP+0x136>
    	if(!(osEventFlagsGet(eventESPResponseHandle) & EVENT_FLAG_ESP_RESPONSE_TIMEOUT)){
90002e0c:	6828      	ldr	r0, [r5, #0]
90002e0e:	f00a fe21 	bl	9000da54 <osEventFlagsGet>
90002e12:	06c2      	lsls	r2, r0, #27
        	osEventFlagsSet(eventESPResponseHandle, EVENT_FLAG_ESP_RESPONSE_TIMEOUT);
90002e14:	f04f 0110 	mov.w	r1, #16
    	if(!(osEventFlagsGet(eventESPResponseHandle) & EVENT_FLAG_ESP_RESPONSE_TIMEOUT)){
90002e18:	f100 809a 	bmi.w	90002f50 <prvTaskSetUpESP+0x264>
        	osEventFlagsSet(eventESPResponseHandle, EVENT_FLAG_ESP_RESPONSE_TIMEOUT);
90002e1c:	6828      	ldr	r0, [r5, #0]
90002e1e:	f00a fdeb 	bl	9000d9f8 <osEventFlagsSet>
    HAL_UART_Transmit(&huart2, (uint8_t*) send, strlen(send), HAL_MAX_DELAY);
90002e22:	f04f 33ff 	mov.w	r3, #4294967295
90002e26:	220d      	movs	r2, #13
90002e28:	4659      	mov	r1, fp
90002e2a:	4640      	mov	r0, r8
90002e2c:	f009 f916 	bl	9000c05c <HAL_UART_Transmit>
    osSemaphoreAcquire(semaphoreHaltUntilStringHandle, osWaitForever);
90002e30:	f04f 31ff 	mov.w	r1, #4294967295
90002e34:	6820      	ldr	r0, [r4, #0]
90002e36:	f00a ff2d 	bl	9000dc94 <osSemaphoreAcquire>
    strcpy((char*) expectedESPResponse, recieve);
90002e3a:	e896 0003 	ldmia.w	r6, {r0, r1}
90002e3e:	6038      	str	r0, [r7, #0]
90002e40:	f88a 1000 	strb.w	r1, [sl]
    osSemaphoreRelease(semaphoreHaltUntilStringHandle);
90002e44:	6820      	ldr	r0, [r4, #0]
90002e46:	f00a ff59 	bl	9000dcfc <osSemaphoreRelease>
    uint32_t flags = osEventFlagsWait(eventESPResponseValidHandle, EVENT_FLAG1,  osFlagsWaitAny, EVENT_FLAG_WAIT);
90002e4a:	2101      	movs	r1, #1
90002e4c:	f241 3388 	movw	r3, #5000	; 0x1388
90002e50:	2200      	movs	r2, #0
90002e52:	f8d9 0000 	ldr.w	r0, [r9]
90002e56:	f00a fe07 	bl	9000da68 <osEventFlagsWait>
    if (flags & EVENT_FLAG1) {
90002e5a:	07c1      	lsls	r1, r0, #31
90002e5c:	d5d6      	bpl.n	90002e0c <prvTaskSetUpESP+0x120>
    HAL_UART_Transmit(&huart2, (uint8_t*) send, strlen(send), HAL_MAX_DELAY);
90002e5e:	f8df b130 	ldr.w	fp, [pc, #304]	; 90002f90 <prvTaskSetUpESP+0x2a4>
90002e62:	e009      	b.n	90002e78 <prvTaskSetUpESP+0x18c>
    	if(!(osEventFlagsGet(eventESPResponseHandle) & EVENT_FLAG_ESP_RESPONSE_TIMEOUT)){
90002e64:	6828      	ldr	r0, [r5, #0]
90002e66:	f00a fdf5 	bl	9000da54 <osEventFlagsGet>
90002e6a:	06c0      	lsls	r0, r0, #27
        	osEventFlagsSet(eventESPResponseHandle, EVENT_FLAG_ESP_RESPONSE_TIMEOUT);
90002e6c:	f04f 0110 	mov.w	r1, #16
    	if(!(osEventFlagsGet(eventESPResponseHandle) & EVENT_FLAG_ESP_RESPONSE_TIMEOUT)){
90002e70:	d45a      	bmi.n	90002f28 <prvTaskSetUpESP+0x23c>
        	osEventFlagsSet(eventESPResponseHandle, EVENT_FLAG_ESP_RESPONSE_TIMEOUT);
90002e72:	6828      	ldr	r0, [r5, #0]
90002e74:	f00a fdc0 	bl	9000d9f8 <osEventFlagsSet>
    HAL_UART_Transmit(&huart2, (uint8_t*) send, strlen(send), HAL_MAX_DELAY);
90002e78:	f04f 33ff 	mov.w	r3, #4294967295
90002e7c:	222e      	movs	r2, #46	; 0x2e
90002e7e:	4659      	mov	r1, fp
90002e80:	4640      	mov	r0, r8
90002e82:	f009 f8eb 	bl	9000c05c <HAL_UART_Transmit>
    osSemaphoreAcquire(semaphoreHaltUntilStringHandle, osWaitForever);
90002e86:	f04f 31ff 	mov.w	r1, #4294967295
90002e8a:	6820      	ldr	r0, [r4, #0]
90002e8c:	f00a ff02 	bl	9000dc94 <osSemaphoreAcquire>
    strcpy((char*) expectedESPResponse, recieve);
90002e90:	e896 0003 	ldmia.w	r6, {r0, r1}
90002e94:	6038      	str	r0, [r7, #0]
90002e96:	f88a 1000 	strb.w	r1, [sl]
    osSemaphoreRelease(semaphoreHaltUntilStringHandle);
90002e9a:	6820      	ldr	r0, [r4, #0]
90002e9c:	f00a ff2e 	bl	9000dcfc <osSemaphoreRelease>
    uint32_t flags = osEventFlagsWait(eventESPResponseValidHandle, EVENT_FLAG1,  osFlagsWaitAny, EVENT_FLAG_WAIT);
90002ea0:	f241 3388 	movw	r3, #5000	; 0x1388
90002ea4:	2200      	movs	r2, #0
90002ea6:	2101      	movs	r1, #1
90002ea8:	f8d9 0000 	ldr.w	r0, [r9]
90002eac:	f00a fddc 	bl	9000da68 <osEventFlagsWait>
    if (flags & EVENT_FLAG1) {
90002eb0:	07c3      	lsls	r3, r0, #31
90002eb2:	d5d7      	bpl.n	90002e64 <prvTaskSetUpESP+0x178>
    HAL_UART_Transmit(&huart2, (uint8_t*) send, strlen(send), HAL_MAX_DELAY);
90002eb4:	f8df b0dc 	ldr.w	fp, [pc, #220]	; 90002f94 <prvTaskSetUpESP+0x2a8>
90002eb8:	e009      	b.n	90002ece <prvTaskSetUpESP+0x1e2>
    	if(!(osEventFlagsGet(eventESPResponseHandle) & EVENT_FLAG_ESP_RESPONSE_TIMEOUT)){
90002eba:	6828      	ldr	r0, [r5, #0]
90002ebc:	f00a fdca 	bl	9000da54 <osEventFlagsGet>
90002ec0:	06c3      	lsls	r3, r0, #27
        	osEventFlagsSet(eventESPResponseHandle, EVENT_FLAG_ESP_RESPONSE_TIMEOUT);
90002ec2:	f04f 0110 	mov.w	r1, #16
    	if(!(osEventFlagsGet(eventESPResponseHandle) & EVENT_FLAG_ESP_RESPONSE_TIMEOUT)){
90002ec6:	d42a      	bmi.n	90002f1e <prvTaskSetUpESP+0x232>
        	osEventFlagsSet(eventESPResponseHandle, EVENT_FLAG_ESP_RESPONSE_TIMEOUT);
90002ec8:	6828      	ldr	r0, [r5, #0]
90002eca:	f00a fd95 	bl	9000d9f8 <osEventFlagsSet>
    HAL_UART_Transmit(&huart2, (uint8_t*) send, strlen(send), HAL_MAX_DELAY);
90002ece:	f04f 33ff 	mov.w	r3, #4294967295
90002ed2:	2228      	movs	r2, #40	; 0x28
90002ed4:	4659      	mov	r1, fp
90002ed6:	4640      	mov	r0, r8
90002ed8:	f009 f8c0 	bl	9000c05c <HAL_UART_Transmit>
    osSemaphoreAcquire(semaphoreHaltUntilStringHandle, osWaitForever);
90002edc:	f04f 31ff 	mov.w	r1, #4294967295
90002ee0:	6820      	ldr	r0, [r4, #0]
90002ee2:	f00a fed7 	bl	9000dc94 <osSemaphoreAcquire>
    strcpy((char*) expectedESPResponse, recieve);
90002ee6:	e896 0003 	ldmia.w	r6, {r0, r1}
90002eea:	6038      	str	r0, [r7, #0]
90002eec:	f88a 1000 	strb.w	r1, [sl]
    osSemaphoreRelease(semaphoreHaltUntilStringHandle);
90002ef0:	6820      	ldr	r0, [r4, #0]
90002ef2:	f00a ff03 	bl	9000dcfc <osSemaphoreRelease>
    uint32_t flags = osEventFlagsWait(eventESPResponseValidHandle, EVENT_FLAG1,  osFlagsWaitAny, EVENT_FLAG_WAIT);
90002ef6:	2200      	movs	r2, #0
90002ef8:	f241 3388 	movw	r3, #5000	; 0x1388
90002efc:	2101      	movs	r1, #1
90002efe:	f8d9 0000 	ldr.w	r0, [r9]
90002f02:	f00a fdb1 	bl	9000da68 <osEventFlagsWait>
    if (flags & EVENT_FLAG1) {
90002f06:	07c2      	lsls	r2, r0, #31
90002f08:	d5d7      	bpl.n	90002eba <prvTaskSetUpESP+0x1ce>
	  		osEventFlagsSet(eventESPSetUpFinishedHandle, EVENT_FLAG1);
90002f0a:	4b1a      	ldr	r3, [pc, #104]	; (90002f74 <prvTaskSetUpESP+0x288>)
90002f0c:	2101      	movs	r1, #1
90002f0e:	6818      	ldr	r0, [r3, #0]
90002f10:	f00a fd72 	bl	9000d9f8 <osEventFlagsSet>
	  		osThreadSuspend(SetUpESPHandle);
90002f14:	4b18      	ldr	r3, [pc, #96]	; (90002f78 <prvTaskSetUpESP+0x28c>)
90002f16:	6818      	ldr	r0, [r3, #0]
90002f18:	f00a fd3c 	bl	9000d994 <osThreadSuspend>
	  	    if(!send_and_recieve("AT+RST\r\n", "ready\r\n"))
90002f1c:	e6fd      	b.n	90002d1a <prvTaskSetUpESP+0x2e>
	  	    	osEventFlagsSet(eventESPResponseHandle, EVENT_FLAG_ESP_ERROR);
90002f1e:	2101      	movs	r1, #1
90002f20:	6828      	ldr	r0, [r5, #0]
90002f22:	f00a fd69 	bl	9000d9f8 <osEventFlagsSet>
90002f26:	e7f0      	b.n	90002f0a <prvTaskSetUpESP+0x21e>
	  	    	osEventFlagsSet(eventESPResponseHandle, EVENT_FLAG_ESP_ERROR);
90002f28:	2101      	movs	r1, #1
90002f2a:	6828      	ldr	r0, [r5, #0]
90002f2c:	f00a fd64 	bl	9000d9f8 <osEventFlagsSet>
90002f30:	e7c0      	b.n	90002eb4 <prvTaskSetUpESP+0x1c8>
	  	    	osEventFlagsSet(eventESPResponseHandle, EVENT_FLAG_ESP_ERROR);
90002f32:	2101      	movs	r1, #1
90002f34:	6828      	ldr	r0, [r5, #0]
90002f36:	f00a fd5f 	bl	9000d9f8 <osEventFlagsSet>
90002f3a:	e70c      	b.n	90002d56 <prvTaskSetUpESP+0x6a>
	  	    	osEventFlagsSet(eventESPResponseHandle, EVENT_FLAG_ESP_ERROR);
90002f3c:	2101      	movs	r1, #1
90002f3e:	6828      	ldr	r0, [r5, #0]
90002f40:	f00a fd5a 	bl	9000d9f8 <osEventFlagsSet>
90002f44:	e733      	b.n	90002dae <prvTaskSetUpESP+0xc2>
	  	    	osEventFlagsSet(eventESPResponseHandle, EVENT_FLAG_ESP_ERROR);
90002f46:	2101      	movs	r1, #1
90002f48:	6828      	ldr	r0, [r5, #0]
90002f4a:	f00a fd55 	bl	9000d9f8 <osEventFlagsSet>
90002f4e:	e75a      	b.n	90002e06 <prvTaskSetUpESP+0x11a>
	  	    	osEventFlagsSet(eventESPResponseHandle, EVENT_FLAG_ESP_ERROR);
90002f50:	2101      	movs	r1, #1
90002f52:	6828      	ldr	r0, [r5, #0]
90002f54:	f00a fd50 	bl	9000d9f8 <osEventFlagsSet>
90002f58:	e781      	b.n	90002e5e <prvTaskSetUpESP+0x172>
90002f5a:	bf00      	nop
90002f5c:	24006f30 	.word	0x24006f30
90002f60:	240074fc 	.word	0x240074fc
90002f64:	24006f24 	.word	0x24006f24
90002f68:	90027f00 	.word	0x90027f00
90002f6c:	90027ee4 	.word	0x90027ee4
90002f70:	90027ef0 	.word	0x90027ef0
90002f74:	24006f2c 	.word	0x24006f2c
90002f78:	24006efc 	.word	0x24006efc
90002f7c:	24006f28 	.word	0x24006f28
90002f80:	2400725c 	.word	0x2400725c
90002f84:	90027ef8 	.word	0x90027ef8
90002f88:	90027f08 	.word	0x90027f08
90002f8c:	90027f18 	.word	0x90027f18
90002f90:	90027f28 	.word	0x90027f28
90002f94:	90027f58 	.word	0x90027f58

90002f98 <prvTaskSendDataWithESP>:
	osEventFlagsWait(eventESPSetUpFinishedHandle, EVENT_FLAG1,  osFlagsWaitAny, osWaitForever);
90002f98:	4ac3      	ldr	r2, [pc, #780]	; (900032a8 <prvTaskSendDataWithESP+0x310>)
90002f9a:	f04f 33ff 	mov.w	r3, #4294967295
90002f9e:	f8df 9338 	ldr.w	r9, [pc, #824]	; 900032d8 <prvTaskSendDataWithESP+0x340>
90002fa2:	2101      	movs	r1, #1
90002fa4:	6810      	ldr	r0, [r2, #0]
90002fa6:	2200      	movs	r2, #0
90002fa8:	f8df a330 	ldr.w	sl, [pc, #816]	; 900032dc <prvTaskSendDataWithESP+0x344>
90002fac:	f109 0804 	add.w	r8, r9, #4
    uint16_t temperature = (int)(roundf(temp * 100));
90002fb0:	ed9f 8abe 	vldr	s16, [pc, #760]	; 900032ac <prvTaskSendDataWithESP+0x314>
90002fb4:	4ebe      	ldr	r6, [pc, #760]	; (900032b0 <prvTaskSendDataWithESP+0x318>)
{
90002fb6:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
90002fba:	b093      	sub	sp, #76	; 0x4c
90002fbc:	f8df b320 	ldr.w	fp, [pc, #800]	; 900032e0 <prvTaskSendDataWithESP+0x348>
90002fc0:	4fbc      	ldr	r7, [pc, #752]	; (900032b4 <prvTaskSendDataWithESP+0x31c>)
	osEventFlagsWait(eventESPSetUpFinishedHandle, EVENT_FLAG1,  osFlagsWaitAny, osWaitForever);
90002fc2:	f00a fd51 	bl	9000da68 <osEventFlagsWait>
	    snprintf((char*)cipsendString, 16, "AT+CIPSEND=%d\r\n", (int)strlen((char*)dataString));
90002fc6:	4cbc      	ldr	r4, [pc, #752]	; (900032b8 <prvTaskSendDataWithESP+0x320>)
    HAL_UART_Transmit(&huart2, (uint8_t*) send, strlen(send), HAL_MAX_DELAY);
90002fc8:	4dbc      	ldr	r5, [pc, #752]	; (900032bc <prvTaskSendDataWithESP+0x324>)
	    osMessageQueueGet(queueTempAndHumidHandle, &temperature, 0, osWaitForever);
90002fca:	48bd      	ldr	r0, [pc, #756]	; (900032c0 <prvTaskSendDataWithESP+0x328>)
90002fcc:	f04f 33ff 	mov.w	r3, #4294967295
90002fd0:	2200      	movs	r2, #0
90002fd2:	a910      	add	r1, sp, #64	; 0x40
90002fd4:	6800      	ldr	r0, [r0, #0]
90002fd6:	f00a ff3d 	bl	9000de54 <osMessageQueueGet>
	    osMessageQueueGet(queueTempAndHumidHandle, &humidity, 0, osWaitForever);
90002fda:	48b9      	ldr	r0, [pc, #740]	; (900032c0 <prvTaskSendDataWithESP+0x328>)
90002fdc:	f04f 33ff 	mov.w	r3, #4294967295
90002fe0:	2200      	movs	r2, #0
90002fe2:	a911      	add	r1, sp, #68	; 0x44
90002fe4:	6800      	ldr	r0, [r0, #0]
90002fe6:	f00a ff35 	bl	9000de54 <osMessageQueueGet>
	    my_snprintf(temperature, humidity, (char*)dataString);
90002fea:	ed9d 6a10 	vldr	s12, [sp, #64]	; 0x40
90002fee:	eddd 6a11 	vldr	s13, [sp, #68]	; 0x44
    uint8_t temperatureDecimal = temperature % 100;
90002ff2:	2064      	movs	r0, #100	; 0x64
    temp = (temp < 0) ? (-temp) : temp;
90002ff4:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
    uint8_t temperatureInteger = temperature / 100;
90002ff8:	49b2      	ldr	r1, [pc, #712]	; (900032c4 <prvTaskSendDataWithESP+0x32c>)
    temp = (temp < 0) ? (-temp) : temp;
90002ffa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    humid = (humid < 0) ? (-humid) : humid;
90002ffe:	eef5 6ac0 	vcmpe.f32	s13, #0.0
    temp = (temp < 0) ? (-temp) : temp;
90003002:	bf4c      	ite	mi
90003004:	eeb1 7a46 	vnegmi.f32	s14, s12
90003008:	eeb0 7a46 	vmovpl.f32	s14, s12
    humid = (humid < 0) ? (-humid) : humid;
9000300c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    if(tempSign)
90003010:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
    uint16_t temperature = (int)(roundf(temp * 100));
90003014:	ee27 7a08 	vmul.f32	s14, s14, s16
    humid = (humid < 0) ? (-humid) : humid;
90003018:	bf4c      	ite	mi
9000301a:	eef1 7a66 	vnegmi.f32	s15, s13
9000301e:	eef0 7a66 	vmovpl.f32	s15, s13
    uint16_t temperature = (int)(roundf(temp * 100));
90003022:	feb8 7a47 	vrinta.f32	s14, s14
90003026:	eebd 7ac7 	vcvt.s32.f32	s14, s14
    if(tempSign)
9000302a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    uint16_t humidityValue = (int)(roundf(humid * 100));
9000302e:	ee67 7a88 	vmul.f32	s15, s15, s16
    uint16_t temperature = (int)(roundf(temp * 100));
90003032:	ee17 3a10 	vmov	r3, s14
    uint16_t humidityValue = (int)(roundf(humid * 100));
90003036:	fef8 7a67 	vrinta.f32	s15, s15
9000303a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    uint16_t temperature = (int)(roundf(temp * 100));
9000303e:	b29a      	uxth	r2, r3
    uint16_t humidityValue = (int)(roundf(humid * 100));
90003040:	ee17 3a90 	vmov	r3, s15
    uint8_t temperatureInteger = temperature / 100;
90003044:	fba1 1c02 	umull	r1, ip, r1, r2
    uint8_t humidityInteger = humidityValue / 100;
90003048:	499e      	ldr	r1, [pc, #632]	; (900032c4 <prvTaskSendDataWithESP+0x32c>)
    uint16_t humidityValue = (int)(roundf(humid * 100));
9000304a:	b29b      	uxth	r3, r3
    uint8_t humidityInteger = humidityValue / 100;
9000304c:	fba1 e103 	umull	lr, r1, r1, r3
    uint8_t temperatureInteger = temperature / 100;
90003050:	ea4f 1e5c 	mov.w	lr, ip, lsr #5
90003054:	f3cc 1c47 	ubfx	ip, ip, #5, #8
    uint8_t temperatureDecimal = temperature % 100;
90003058:	fb00 221e 	mls	r2, r0, lr, r2
9000305c:	fa5f fe82 	uxtb.w	lr, r2
    uint8_t humidityInteger = humidityValue / 100;
90003060:	ea4f 1251 	mov.w	r2, r1, lsr #5
    uint8_t humidityDecimal = humidityValue % 100;
90003064:	fb00 3312 	mls	r3, r0, r2, r3
    uint8_t humidityInteger = humidityValue / 100;
90003068:	f3c1 1247 	ubfx	r2, r1, #5, #8
    uint8_t humidityDecimal = humidityValue % 100;
9000306c:	b2db      	uxtb	r3, r3
    uint8_t humidityInteger = humidityValue / 100;
9000306e:	9209      	str	r2, [sp, #36]	; 0x24
    uint8_t humidityDecimal = humidityValue % 100;
90003070:	9301      	str	r3, [sp, #4]
    if(tempSign)
90003072:	f100 80f9 	bmi.w	90003268 <prvTaskSendDataWithESP+0x2d0>
90003076:	230d      	movs	r3, #13
90003078:	210c      	movs	r1, #12
9000307a:	200a      	movs	r0, #10
9000307c:	2208      	movs	r2, #8
9000307e:	930f      	str	r3, [sp, #60]	; 0x3c
90003080:	230b      	movs	r3, #11
90003082:	e9cd 3107 	strd	r3, r1, [sp, #28]
90003086:	2309      	movs	r3, #9
90003088:	e9cd 3005 	strd	r3, r0, [sp, #20]
9000308c:	2307      	movs	r3, #7
9000308e:	2005      	movs	r0, #5
90003090:	e9cd 3203 	strd	r3, r2, [sp, #12]
90003094:	2306      	movs	r3, #6
90003096:	2203      	movs	r2, #3
90003098:	9302      	str	r3, [sp, #8]
9000309a:	2304      	movs	r3, #4
9000309c:	e9cd 300d 	strd	r3, r0, [sp, #52]	; 0x34
900030a0:	2302      	movs	r3, #2
900030a2:	4650      	mov	r0, sl
900030a4:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
900030a8:	2301      	movs	r3, #1
900030aa:	930a      	str	r3, [sp, #40]	; 0x28
    result[++i] = (temperatureInteger / 10) + '0';
900030ac:	4986      	ldr	r1, [pc, #536]	; (900032c8 <prvTaskSendDataWithESP+0x330>)
    if(humidSign)
900030ae:	eef5 6ac0 	vcmpe.f32	s13, #0.0
    result[++i] = (temperatureInteger / 10) + '0';
900030b2:	fba1 320c 	umull	r3, r2, r1, ip
    result[++i] = (temperatureDecimal / 10) + '0';
900030b6:	fba1 130e 	umull	r1, r3, r1, lr
    if(humidSign)
900030ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    result[++i] = (temperatureInteger / 10) + '0';
900030be:	ea4f 02d2 	mov.w	r2, r2, lsr #3
    result[++i] = (temperatureDecimal / 10) + '0';
900030c2:	ea4f 03d3 	mov.w	r3, r3, lsr #3
    result[++i] = (temperatureInteger % 10) + '0';
900030c6:	eb02 0182 	add.w	r1, r2, r2, lsl #2
    result[++i] = (temperatureInteger / 10) + '0';
900030ca:	f102 0230 	add.w	r2, r2, #48	; 0x30
    result[++i] = (temperatureInteger % 10) + '0';
900030ce:	ebac 0141 	sub.w	r1, ip, r1, lsl #1
    result[++i] = (temperatureInteger / 10) + '0';
900030d2:	7002      	strb	r2, [r0, #0]
    result[++i] = (temperatureInteger % 10) + '0';
900030d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
900030d6:	f101 0130 	add.w	r1, r1, #48	; 0x30
    result[++i] = '.';
900030da:	980b      	ldr	r0, [sp, #44]	; 0x2c
    result[++i] = (temperatureInteger % 10) + '0';
900030dc:	f80a 1002 	strb.w	r1, [sl, r2]
    result[++i] = (temperatureDecimal % 10) + '0';
900030e0:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    result[++i] = '.';
900030e4:	f04f 012e 	mov.w	r1, #46	; 0x2e
    result[++i] = (temperatureDecimal / 10) + '0';
900030e8:	f103 0330 	add.w	r3, r3, #48	; 0x30
    result[++i] = (temperatureDecimal % 10) + '0';
900030ec:	ebae 0242 	sub.w	r2, lr, r2, lsl #1
    result[++i] = '.';
900030f0:	f80a 1000 	strb.w	r1, [sl, r0]
    result[++i] = (temperatureDecimal / 10) + '0';
900030f4:	990c      	ldr	r1, [sp, #48]	; 0x30
    result[++i] = (temperatureDecimal % 10) + '0';
900030f6:	f102 0230 	add.w	r2, r2, #48	; 0x30
    result[++i] = (temperatureDecimal / 10) + '0';
900030fa:	f80a 3001 	strb.w	r3, [sl, r1]
    result[++i] = (temperatureDecimal % 10) + '0';
900030fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
90003100:	f80a 2003 	strb.w	r2, [sl, r3]
    result[++i] = ' ';
90003104:	f04f 0320 	mov.w	r3, #32
90003108:	9a0e      	ldr	r2, [sp, #56]	; 0x38
9000310a:	f80a 3002 	strb.w	r3, [sl, r2]
    if(humidSign)
9000310e:	d511      	bpl.n	90003134 <prvTaskSendDataWithESP+0x19c>
        result[++i] = '-';
90003110:	232d      	movs	r3, #45	; 0x2d
90003112:	9a02      	ldr	r2, [sp, #8]
90003114:	f80a 3002 	strb.w	r3, [sl, r2]
90003118:	9b03      	ldr	r3, [sp, #12]
9000311a:	9302      	str	r3, [sp, #8]
9000311c:	9b04      	ldr	r3, [sp, #16]
9000311e:	9303      	str	r3, [sp, #12]
90003120:	9b05      	ldr	r3, [sp, #20]
90003122:	9304      	str	r3, [sp, #16]
90003124:	9b06      	ldr	r3, [sp, #24]
90003126:	9305      	str	r3, [sp, #20]
90003128:	9b07      	ldr	r3, [sp, #28]
9000312a:	9306      	str	r3, [sp, #24]
9000312c:	9b08      	ldr	r3, [sp, #32]
9000312e:	9307      	str	r3, [sp, #28]
90003130:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
90003132:	9308      	str	r3, [sp, #32]
    result[++i] = (humidityInteger / 10) + '0';
90003134:	9809      	ldr	r0, [sp, #36]	; 0x24
90003136:	4964      	ldr	r1, [pc, #400]	; (900032c8 <prvTaskSendDataWithESP+0x330>)
90003138:	4603      	mov	r3, r0
9000313a:	fba1 3203 	umull	r3, r2, r1, r3
    result[++i] = (humidityDecimal / 10) + '0';
9000313e:	9b01      	ldr	r3, [sp, #4]
    result[++i] = (humidityInteger / 10) + '0';
90003140:	08d2      	lsrs	r2, r2, #3
    result[++i] = (humidityDecimal / 10) + '0';
90003142:	fba1 1303 	umull	r1, r3, r1, r3
    result[++i] = (humidityInteger % 10) + '0';
90003146:	eb02 0182 	add.w	r1, r2, r2, lsl #2
    result[++i] = (humidityInteger / 10) + '0';
9000314a:	3230      	adds	r2, #48	; 0x30
    result[++i] = (humidityDecimal / 10) + '0';
9000314c:	08db      	lsrs	r3, r3, #3
    result[++i] = (humidityInteger % 10) + '0';
9000314e:	eba0 0141 	sub.w	r1, r0, r1, lsl #1
    result[++i] = (humidityInteger / 10) + '0';
90003152:	9802      	ldr	r0, [sp, #8]
    result[++i] = (humidityInteger % 10) + '0';
90003154:	3130      	adds	r1, #48	; 0x30
    result[++i] = (humidityInteger / 10) + '0';
90003156:	f80a 2000 	strb.w	r2, [sl, r0]
    result[++i] = (humidityInteger % 10) + '0';
9000315a:	9a03      	ldr	r2, [sp, #12]
    result[++i] = '.';
9000315c:	9804      	ldr	r0, [sp, #16]
    result[++i] = (humidityInteger % 10) + '0';
9000315e:	f80a 1002 	strb.w	r1, [sl, r2]
    result[++i] = (humidityDecimal % 10) + '0';
90003162:	eb03 0283 	add.w	r2, r3, r3, lsl #2
90003166:	9901      	ldr	r1, [sp, #4]
    result[++i] = (humidityDecimal / 10) + '0';
90003168:	3330      	adds	r3, #48	; 0x30
    result[++i] = (humidityDecimal % 10) + '0';
9000316a:	eba1 0242 	sub.w	r2, r1, r2, lsl #1
    result[++i] = '.';
9000316e:	212e      	movs	r1, #46	; 0x2e
90003170:	f80a 1000 	strb.w	r1, [sl, r0]
    result[++i] = (humidityDecimal % 10) + '0';
90003174:	3230      	adds	r2, #48	; 0x30
    result[++i] = (humidityDecimal / 10) + '0';
90003176:	9905      	ldr	r1, [sp, #20]
	    snprintf((char*)cipsendString, 16, "AT+CIPSEND=%d\r\n", (int)strlen((char*)dataString));
90003178:	4650      	mov	r0, sl
    result[++i] = (humidityDecimal / 10) + '0';
9000317a:	f80a 3001 	strb.w	r3, [sl, r1]
    result[++i] = (humidityDecimal % 10) + '0';
9000317e:	9b06      	ldr	r3, [sp, #24]
90003180:	f80a 2003 	strb.w	r2, [sl, r3]
    result[++i] = 'q';
90003184:	2371      	movs	r3, #113	; 0x71
90003186:	9a07      	ldr	r2, [sp, #28]
90003188:	f80a 3002 	strb.w	r3, [sl, r2]
    result[++i] = '\0';
9000318c:	f04f 0200 	mov.w	r2, #0
90003190:	9b08      	ldr	r3, [sp, #32]
90003192:	f80a 2003 	strb.w	r2, [sl, r3]
	    snprintf((char*)cipsendString, 16, "AT+CIPSEND=%d\r\n", (int)strlen((char*)dataString));
90003196:	f7fd f8f3 	bl	90000380 <strlen>
9000319a:	4a4c      	ldr	r2, [pc, #304]	; (900032cc <prvTaskSendDataWithESP+0x334>)
9000319c:	4603      	mov	r3, r0
9000319e:	2110      	movs	r1, #16
900031a0:	4620      	mov	r0, r4
900031a2:	f021 f971 	bl	90024488 <sniprintf>
bool send_and_recieve(char* send, char* recieve){
900031a6:	e009      	b.n	900031bc <prvTaskSendDataWithESP+0x224>
    	if(!(osEventFlagsGet(eventESPResponseHandle) & EVENT_FLAG_ESP_RESPONSE_TIMEOUT)){
900031a8:	6838      	ldr	r0, [r7, #0]
900031aa:	f00a fc53 	bl	9000da54 <osEventFlagsGet>
900031ae:	06c0      	lsls	r0, r0, #27
        	osEventFlagsSet(eventESPResponseHandle, EVENT_FLAG_ESP_RESPONSE_TIMEOUT);
900031b0:	f04f 0110 	mov.w	r1, #16
    	if(!(osEventFlagsGet(eventESPResponseHandle) & EVENT_FLAG_ESP_RESPONSE_TIMEOUT)){
900031b4:	d425      	bmi.n	90003202 <prvTaskSendDataWithESP+0x26a>
        	osEventFlagsSet(eventESPResponseHandle, EVENT_FLAG_ESP_RESPONSE_TIMEOUT);
900031b6:	6838      	ldr	r0, [r7, #0]
900031b8:	f00a fc1e 	bl	9000d9f8 <osEventFlagsSet>
    HAL_UART_Transmit(&huart2, (uint8_t*) send, strlen(send), HAL_MAX_DELAY);
900031bc:	4620      	mov	r0, r4
900031be:	f7fd f8df 	bl	90000380 <strlen>
900031c2:	f04f 33ff 	mov.w	r3, #4294967295
900031c6:	b282      	uxth	r2, r0
900031c8:	4621      	mov	r1, r4
900031ca:	4628      	mov	r0, r5
900031cc:	f008 ff46 	bl	9000c05c <HAL_UART_Transmit>
    osSemaphoreAcquire(semaphoreHaltUntilStringHandle, osWaitForever);
900031d0:	f04f 31ff 	mov.w	r1, #4294967295
900031d4:	6830      	ldr	r0, [r6, #0]
900031d6:	f00a fd5d 	bl	9000dc94 <osSemaphoreAcquire>
    strcpy((char*) expectedESPResponse, recieve);
900031da:	e89b 0003 	ldmia.w	fp, {r0, r1}
900031de:	f8c9 0000 	str.w	r0, [r9]
900031e2:	f888 1000 	strb.w	r1, [r8]
    osSemaphoreRelease(semaphoreHaltUntilStringHandle);
900031e6:	6830      	ldr	r0, [r6, #0]
900031e8:	f00a fd88 	bl	9000dcfc <osSemaphoreRelease>
    uint32_t flags = osEventFlagsWait(eventESPResponseValidHandle, EVENT_FLAG1,  osFlagsWaitAny, EVENT_FLAG_WAIT);
900031ec:	4838      	ldr	r0, [pc, #224]	; (900032d0 <prvTaskSendDataWithESP+0x338>)
900031ee:	f241 3388 	movw	r3, #5000	; 0x1388
900031f2:	2200      	movs	r2, #0
900031f4:	2101      	movs	r1, #1
900031f6:	6800      	ldr	r0, [r0, #0]
900031f8:	f00a fc36 	bl	9000da68 <osEventFlagsWait>
    if (flags & EVENT_FLAG1) {
900031fc:	07c3      	lsls	r3, r0, #31
900031fe:	d404      	bmi.n	9000320a <prvTaskSendDataWithESP+0x272>
90003200:	e7d2      	b.n	900031a8 <prvTaskSendDataWithESP+0x210>
	    	osEventFlagsSet(eventESPResponseHandle, EVENT_FLAG_ESP_ERROR);
90003202:	2101      	movs	r1, #1
90003204:	6838      	ldr	r0, [r7, #0]
90003206:	f00a fbf7 	bl	9000d9f8 <osEventFlagsSet>
    HAL_UART_Transmit(&huart2, (uint8_t*) send, strlen(send), HAL_MAX_DELAY);
9000320a:	4650      	mov	r0, sl
9000320c:	f7fd f8b8 	bl	90000380 <strlen>
90003210:	f04f 33ff 	mov.w	r3, #4294967295
90003214:	b282      	uxth	r2, r0
90003216:	4651      	mov	r1, sl
90003218:	4628      	mov	r0, r5
9000321a:	f008 ff1f 	bl	9000c05c <HAL_UART_Transmit>
    osSemaphoreAcquire(semaphoreHaltUntilStringHandle, osWaitForever);
9000321e:	f04f 31ff 	mov.w	r1, #4294967295
90003222:	6830      	ldr	r0, [r6, #0]
90003224:	f00a fd36 	bl	9000dc94 <osSemaphoreAcquire>
    strcpy((char*) expectedESPResponse, recieve);
90003228:	e89b 0003 	ldmia.w	fp, {r0, r1}
9000322c:	f8c9 0000 	str.w	r0, [r9]
90003230:	f888 1000 	strb.w	r1, [r8]
    osSemaphoreRelease(semaphoreHaltUntilStringHandle);
90003234:	6830      	ldr	r0, [r6, #0]
90003236:	f00a fd61 	bl	9000dcfc <osSemaphoreRelease>
    uint32_t flags = osEventFlagsWait(eventESPResponseValidHandle, EVENT_FLAG1,  osFlagsWaitAny, EVENT_FLAG_WAIT);
9000323a:	4825      	ldr	r0, [pc, #148]	; (900032d0 <prvTaskSendDataWithESP+0x338>)
9000323c:	2200      	movs	r2, #0
9000323e:	f241 3388 	movw	r3, #5000	; 0x1388
90003242:	2101      	movs	r1, #1
90003244:	6800      	ldr	r0, [r0, #0]
90003246:	f00a fc0f 	bl	9000da68 <osEventFlagsWait>
    if (flags & EVENT_FLAG1) {
9000324a:	07c2      	lsls	r2, r0, #31
9000324c:	f53f aebd 	bmi.w	90002fca <prvTaskSendDataWithESP+0x32>
    	if(!(osEventFlagsGet(eventESPResponseHandle) & EVENT_FLAG_ESP_RESPONSE_TIMEOUT)){
90003250:	6838      	ldr	r0, [r7, #0]
90003252:	f00a fbff 	bl	9000da54 <osEventFlagsGet>
90003256:	06c3      	lsls	r3, r0, #27
        	osEventFlagsSet(eventESPResponseHandle, EVENT_FLAG_ESP_RESPONSE_TIMEOUT);
90003258:	f04f 0110 	mov.w	r1, #16
    	if(!(osEventFlagsGet(eventESPResponseHandle) & EVENT_FLAG_ESP_RESPONSE_TIMEOUT)){
9000325c:	d5d2      	bpl.n	90003204 <prvTaskSendDataWithESP+0x26c>
	    	osEventFlagsSet(eventESPResponseHandle, EVENT_FLAG_ESP_ERROR);
9000325e:	2101      	movs	r1, #1
90003260:	6838      	ldr	r0, [r7, #0]
90003262:	f00a fbc9 	bl	9000d9f8 <osEventFlagsSet>
90003266:	e6ae      	b.n	90002fc6 <prvTaskSendDataWithESP+0x2e>
        result[++i] = '-';
90003268:	232d      	movs	r3, #45	; 0x2d
9000326a:	200d      	movs	r0, #13
9000326c:	220b      	movs	r2, #11
9000326e:	2109      	movs	r1, #9
90003270:	f88a 3000 	strb.w	r3, [sl]
90003274:	230e      	movs	r3, #14
90003276:	930f      	str	r3, [sp, #60]	; 0x3c
90003278:	230c      	movs	r3, #12
9000327a:	e9cd 3007 	strd	r3, r0, [sp, #28]
9000327e:	230a      	movs	r3, #10
90003280:	e9cd 3205 	strd	r3, r2, [sp, #20]
90003284:	2308      	movs	r3, #8
90003286:	2206      	movs	r2, #6
90003288:	e9cd 3103 	strd	r3, r1, [sp, #12]
9000328c:	2307      	movs	r3, #7
9000328e:	2104      	movs	r1, #4
90003290:	9302      	str	r3, [sp, #8]
90003292:	2305      	movs	r3, #5
90003294:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
90003298:	2303      	movs	r3, #3
9000329a:	e9cd 310b 	strd	r3, r1, [sp, #44]	; 0x2c
9000329e:	2302      	movs	r3, #2
900032a0:	930a      	str	r3, [sp, #40]	; 0x28
900032a2:	4b0c      	ldr	r3, [pc, #48]	; (900032d4 <prvTaskSendDataWithESP+0x33c>)
900032a4:	4618      	mov	r0, r3
900032a6:	e701      	b.n	900030ac <prvTaskSendDataWithESP+0x114>
900032a8:	24006f2c 	.word	0x24006f2c
900032ac:	42c80000 	.word	0x42c80000
900032b0:	240074fc 	.word	0x240074fc
900032b4:	24006f24 	.word	0x24006f24
900032b8:	24006f00 	.word	0x24006f00
900032bc:	2400725c 	.word	0x2400725c
900032c0:	240072f4 	.word	0x240072f4
900032c4:	51eb851f 	.word	0x51eb851f
900032c8:	cccccccd 	.word	0xcccccccd
900032cc:	90027f84 	.word	0x90027f84
900032d0:	24006f28 	.word	0x24006f28
900032d4:	24006f11 	.word	0x24006f11
900032d8:	24006f30 	.word	0x24006f30
900032dc:	24006f10 	.word	0x24006f10
900032e0:	90027f00 	.word	0x90027f00

900032e4 <SystemClock_Config>:
{
900032e4:	b570      	push	{r4, r5, r6, lr}
900032e6:	b09e      	sub	sp, #120	; 0x78
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
900032e8:	224c      	movs	r2, #76	; 0x4c
900032ea:	2100      	movs	r1, #0
900032ec:	a80a      	add	r0, sp, #40	; 0x28
900032ee:	f021 f9d7 	bl	900246a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
900032f2:	2220      	movs	r2, #32
900032f4:	2100      	movs	r1, #0
900032f6:	a802      	add	r0, sp, #8
900032f8:	f021 f9d2 	bl	900246a0 <memset>
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
900032fc:	2002      	movs	r0, #2
900032fe:	f006 fda5 	bl	90009e4c <HAL_PWREx_ConfigSupply>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
90003302:	4b22      	ldr	r3, [pc, #136]	; (9000338c <SystemClock_Config+0xa8>)
90003304:	2100      	movs	r1, #0
90003306:	4a22      	ldr	r2, [pc, #136]	; (90003390 <SystemClock_Config+0xac>)
90003308:	9101      	str	r1, [sp, #4]
9000330a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
9000330c:	f021 0101 	bic.w	r1, r1, #1
90003310:	62d9      	str	r1, [r3, #44]	; 0x2c
90003312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90003314:	f003 0301 	and.w	r3, r3, #1
90003318:	9301      	str	r3, [sp, #4]
9000331a:	6993      	ldr	r3, [r2, #24]
9000331c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
90003320:	6193      	str	r3, [r2, #24]
90003322:	6993      	ldr	r3, [r2, #24]
90003324:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
90003328:	9301      	str	r3, [sp, #4]
9000332a:	9b01      	ldr	r3, [sp, #4]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
9000332c:	6993      	ldr	r3, [r2, #24]
9000332e:	0499      	lsls	r1, r3, #18
90003330:	d5fc      	bpl.n	9000332c <SystemClock_Config+0x48>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
90003332:	2201      	movs	r2, #1
90003334:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
90003338:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
9000333a:	2608      	movs	r6, #8
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
9000333c:	2500      	movs	r5, #0
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
9000333e:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.PLL.PLLP = 2;
90003340:	9417      	str	r4, [sp, #92]	; 0x5c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
90003342:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLN = 160;
90003346:	2205      	movs	r2, #5
90003348:	23a0      	movs	r3, #160	; 0xa0
9000334a:	e9cd 2315 	strd	r2, r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = 4;
9000334e:	2304      	movs	r3, #4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
90003350:	e9cd 4413 	strd	r4, r4, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = 4;
90003354:	9318      	str	r3, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
90003356:	e9cd 4619 	strd	r4, r6, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
9000335a:	e9cd 551b 	strd	r5, r5, [sp, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
9000335e:	f006 fe1d 	bl	90009f9c <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
90003362:	2340      	movs	r3, #64	; 0x40
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
90003364:	223f      	movs	r2, #63	; 0x3f
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
90003366:	4621      	mov	r1, r4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
90003368:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
9000336a:	eb0d 0006 	add.w	r0, sp, r6
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
9000336e:	9202      	str	r2, [sp, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
90003370:	2203      	movs	r2, #3
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
90003372:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
90003374:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
90003376:	9203      	str	r2, [sp, #12]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
90003378:	e9cd 6305 	strd	r6, r3, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
9000337c:	f44f 6380 	mov.w	r3, #1024	; 0x400
90003380:	9308      	str	r3, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
90003382:	f007 f99f 	bl	9000a6c4 <HAL_RCC_ClockConfig>
}
90003386:	b01e      	add	sp, #120	; 0x78
90003388:	bd70      	pop	{r4, r5, r6, pc}
9000338a:	bf00      	nop
9000338c:	58000400 	.word	0x58000400
90003390:	58024800 	.word	0x58024800

90003394 <main>:
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
90003394:	4ad4      	ldr	r2, [pc, #848]	; (900036e8 <main+0x354>)
90003396:	6953      	ldr	r3, [r2, #20]
90003398:	f413 3300 	ands.w	r3, r3, #131072	; 0x20000
{
9000339c:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
900033a0:	b099      	sub	sp, #100	; 0x64
900033a2:	d111      	bne.n	900033c8 <main+0x34>
900033a4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
900033a8:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
900033ac:	f8c2 3250 	str.w	r3, [r2, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
900033b0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
900033b4:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
900033b8:	6953      	ldr	r3, [r2, #20]
900033ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
900033be:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
900033c0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
900033c4:	f3bf 8f6f 	isb	sy
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
900033c8:	48c7      	ldr	r0, [pc, #796]	; (900036e8 <main+0x354>)
900033ca:	6943      	ldr	r3, [r0, #20]
900033cc:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
900033d0:	d124      	bne.n	9000341c <main+0x88>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
900033d2:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
900033d6:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
900033da:	f8d0 5080 	ldr.w	r5, [r0, #128]	; 0x80
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
900033de:	f643 76e0 	movw	r6, #16352	; 0x3fe0
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
900033e2:	f3c5 344e 	ubfx	r4, r5, #13, #15
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
900033e6:	f3c5 05c9 	ubfx	r5, r5, #3, #10
900033ea:	0164      	lsls	r4, r4, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
900033ec:	ea04 0106 	and.w	r1, r4, r6
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
900033f0:	462b      	mov	r3, r5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
900033f2:	ea41 7283 	orr.w	r2, r1, r3, lsl #30
      } while (ways-- != 0U);
900033f6:	3b01      	subs	r3, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
900033f8:	f8c0 2260 	str.w	r2, [r0, #608]	; 0x260
      } while (ways-- != 0U);
900033fc:	1c5a      	adds	r2, r3, #1
900033fe:	d1f8      	bne.n	900033f2 <main+0x5e>
    } while(sets-- != 0U);
90003400:	3c20      	subs	r4, #32
90003402:	f114 0f20 	cmn.w	r4, #32
90003406:	d1f1      	bne.n	900033ec <main+0x58>
90003408:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
9000340c:	6943      	ldr	r3, [r0, #20]
9000340e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
90003412:	6143      	str	r3, [r0, #20]
90003414:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
90003418:	f3bf 8f6f 	isb	sy

/* MPU Configuration */

void MPU_Config(void)
{
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
9000341c:	2400      	movs	r4, #0
  HAL_Init();
9000341e:	f002 fe91 	bl	90006144 <HAL_Init>
  /* Disables the MPU */
  HAL_MPU_Disable();

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
90003422:	2601      	movs	r6, #1

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
  MPU_InitStruct.BaseAddress = 0x90000000;
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
90003424:	251b      	movs	r5, #27

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
  MPU_InitStruct.Size = MPU_REGION_SIZE_128MB;
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
90003426:	f04f 0903 	mov.w	r9, #3
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
9000342a:	f04f 0802 	mov.w	r8, #2

  HAL_MPU_ConfigRegion(&MPU_InitStruct);

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
9000342e:	2704      	movs	r7, #4
  MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
90003430:	f04f 0b18 	mov.w	fp, #24
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
90003434:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
90003438:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
  HAL_MPU_Disable();
9000343c:	f002 ff4c 	bl	900062d8 <HAL_MPU_Disable>
  MPU_InitStruct.BaseAddress = 0x24000000;
90003440:	f04f 5210 	mov.w	r2, #603979776	; 0x24000000
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
90003444:	4ba9      	ldr	r3, [pc, #676]	; (900036ec <main+0x358>)
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
90003446:	a80b      	add	r0, sp, #44	; 0x2c
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
90003448:	f8ad 602c 	strh.w	r6, [sp, #44]	; 0x2c
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
9000344c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
90003450:	4ba7      	ldr	r3, [pc, #668]	; (900036f0 <main+0x35c>)
90003452:	930e      	str	r3, [sp, #56]	; 0x38
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
90003454:	f002 ff5e 	bl	90006314 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.BaseAddress = 0x90000000;
90003458:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
9000345c:	a80b      	add	r0, sp, #44	; 0x2c
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
9000345e:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
  MPU_InitStruct.BaseAddress = 0x90000000;
90003462:	930c      	str	r3, [sp, #48]	; 0x30
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
90003464:	f88d 4037 	strb.w	r4, [sp, #55]	; 0x37
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
90003468:	f88d 5034 	strb.w	r5, [sp, #52]	; 0x34
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
9000346c:	f8ad 403a 	strh.w	r4, [sp, #58]	; 0x3a
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
90003470:	f002 ff50 	bl	90006314 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Size = MPU_REGION_SIZE_128MB;
90003474:	231a      	movs	r3, #26
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
90003476:	a80b      	add	r0, sp, #44	; 0x2c
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
90003478:	f88d 802d 	strb.w	r8, [sp, #45]	; 0x2d
  MPU_InitStruct.Size = MPU_REGION_SIZE_128MB;
9000347c:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
90003480:	f240 1301 	movw	r3, #257	; 0x101
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
90003484:	f8ad 9037 	strh.w	r9, [sp, #55]	; 0x37
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
90003488:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
9000348c:	f002 ff42 	bl	90006314 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.BaseAddress = 0xD0000000;
90003490:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
90003494:	a80b      	add	r0, sp, #44	; 0x2c
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
90003496:	f88d 5034 	strb.w	r5, [sp, #52]	; 0x34
  MPU_InitStruct.BaseAddress = 0xD0000000;
9000349a:	930c      	str	r3, [sp, #48]	; 0x30
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
9000349c:	f44f 7380 	mov.w	r3, #256	; 0x100
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
900034a0:	f88d 902d 	strb.w	r9, [sp, #45]	; 0x2d
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
900034a4:	f8ad 3037 	strh.w	r3, [sp, #55]	; 0x37
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
900034a8:	f8ad 403a 	strh.w	r4, [sp, #58]	; 0x3a
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
900034ac:	f002 ff32 	bl	90006314 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
900034b0:	a80b      	add	r0, sp, #44	; 0x2c
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
900034b2:	f88d 9037 	strb.w	r9, [sp, #55]	; 0x37
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
900034b6:	f88d 603a 	strb.w	r6, [sp, #58]	; 0x3a
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
900034ba:	f88d 702d 	strb.w	r7, [sp, #45]	; 0x2d
  MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
900034be:	f88d b034 	strb.w	fp, [sp, #52]	; 0x34
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
900034c2:	f002 ff27 	bl	90006314 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
900034c6:	4638      	mov	r0, r7
900034c8:	f002 ff14 	bl	900062f4 <HAL_MPU_Enable>
  SystemClock_Config();
900034cc:	f7ff ff0a 	bl	900032e4 <SystemClock_Config>
  __ASM volatile ("cpsie i" : : : "memory");
900034d0:	b662      	cpsie	i
  __HAL_RCC_GPIOK_CLK_ENABLE();
900034d2:	4d88      	ldr	r5, [pc, #544]	; (900036f4 <main+0x360>)
  HAL_GPIO_WritePin(GPIOB, FRAME_RATE_Pin|RENDER_TIME_Pin, GPIO_PIN_RESET);
900034d4:	21c0      	movs	r1, #192	; 0xc0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
900034d6:	940f      	str	r4, [sp, #60]	; 0x3c
  HAL_GPIO_WritePin(GPIOB, FRAME_RATE_Pin|RENDER_TIME_Pin, GPIO_PIN_RESET);
900034d8:	4622      	mov	r2, r4
900034da:	4887      	ldr	r0, [pc, #540]	; (900036f8 <main+0x364>)
  GPIO_InitStruct.Pin = VSYNC_FREQ_Pin;
900034dc:	f04f 0a08 	mov.w	sl, #8
  GPIO_InitTypeDef GPIO_InitStruct = {0};
900034e0:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
900034e4:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
  __HAL_RCC_GPIOK_CLK_ENABLE();
900034e8:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
900034ec:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
900034f0:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
900034f4:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
900034f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
900034fc:	9301      	str	r3, [sp, #4]
900034fe:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
90003500:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
90003504:	f043 0340 	orr.w	r3, r3, #64	; 0x40
90003508:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
9000350c:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
90003510:	f003 0340 	and.w	r3, r3, #64	; 0x40
90003514:	9302      	str	r3, [sp, #8]
90003516:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
90003518:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
9000351c:	f043 0308 	orr.w	r3, r3, #8
90003520:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
90003524:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
90003528:	f003 0308 	and.w	r3, r3, #8
9000352c:	9303      	str	r3, [sp, #12]
9000352e:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
90003530:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
90003534:	f443 7380 	orr.w	r3, r3, #256	; 0x100
90003538:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
9000353c:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
90003540:	f403 7380 	and.w	r3, r3, #256	; 0x100
90003544:	9304      	str	r3, [sp, #16]
90003546:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
90003548:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
9000354c:	f043 0310 	orr.w	r3, r3, #16
90003550:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
90003554:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
90003558:	f003 0310 	and.w	r3, r3, #16
9000355c:	9305      	str	r3, [sp, #20]
9000355e:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
90003560:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
90003564:	ea43 0308 	orr.w	r3, r3, r8
90003568:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
9000356c:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
90003570:	ea03 0308 	and.w	r3, r3, r8
90003574:	9306      	str	r3, [sp, #24]
90003576:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
90003578:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
9000357c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
90003580:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
90003584:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
90003588:	f403 7300 	and.w	r3, r3, #512	; 0x200
9000358c:	9307      	str	r3, [sp, #28]
9000358e:	9b07      	ldr	r3, [sp, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
90003590:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
90003594:	f043 0320 	orr.w	r3, r3, #32
90003598:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
9000359c:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
900035a0:	f003 0320 	and.w	r3, r3, #32
900035a4:	9308      	str	r3, [sp, #32]
900035a6:	9b08      	ldr	r3, [sp, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
900035a8:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
900035ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
900035b0:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
900035b4:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
900035b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
900035bc:	9309      	str	r3, [sp, #36]	; 0x24
900035be:	9b09      	ldr	r3, [sp, #36]	; 0x24
  __HAL_RCC_GPIOA_CLK_ENABLE();
900035c0:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
900035c4:	4333      	orrs	r3, r6
900035c6:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
900035ca:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
900035ce:	4033      	ands	r3, r6
900035d0:	930a      	str	r3, [sp, #40]	; 0x28
900035d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  HAL_GPIO_WritePin(GPIOB, FRAME_RATE_Pin|RENDER_TIME_Pin, GPIO_PIN_RESET);
900035d4:	f003 fcd0 	bl	90006f78 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DE_GPIO_Port, LCD_DE_Pin, GPIO_PIN_RESET);
900035d8:	4622      	mov	r2, r4
900035da:	2180      	movs	r1, #128	; 0x80
900035dc:	4847      	ldr	r0, [pc, #284]	; (900036fc <main+0x368>)
900035de:	f003 fccb 	bl	90006f78 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, GPIO_PIN_RESET);
900035e2:	4622      	mov	r2, r4
900035e4:	4846      	ldr	r0, [pc, #280]	; (90003700 <main+0x36c>)
900035e6:	2108      	movs	r1, #8
900035e8:	f003 fcc6 	bl	90006f78 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
900035ec:	4632      	mov	r2, r6
900035ee:	4631      	mov	r1, r6
900035f0:	4844      	ldr	r0, [pc, #272]	; (90003704 <main+0x370>)
900035f2:	f003 fcc1 	bl	90006f78 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, LCD_RESET_Pin|MCU_ACTIVE_Pin, GPIO_PIN_RESET);
900035f6:	4622      	mov	r2, r4
900035f8:	2144      	movs	r1, #68	; 0x44
900035fa:	4843      	ldr	r0, [pc, #268]	; (90003708 <main+0x374>)
900035fc:	f003 fcbc 	bl	90006f78 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOH, RST_Pin|GP0_Pin, GPIO_PIN_SET);
90003600:	4632      	mov	r2, r6
90003602:	4842      	ldr	r0, [pc, #264]	; (9000370c <main+0x378>)
90003604:	f44f 51a0 	mov.w	r1, #5120	; 0x1400
90003608:	f003 fcb6 	bl	90006f78 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GP2_Pin|CHE_Pin, GPIO_PIN_SET);
9000360c:	4632      	mov	r2, r6
9000360e:	4659      	mov	r1, fp
90003610:	483d      	ldr	r0, [pc, #244]	; (90003708 <main+0x374>)
90003612:	f003 fcb1 	bl	90006f78 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = FRAME_RATE_Pin|RENDER_TIME_Pin;
90003616:	23c0      	movs	r3, #192	; 0xc0
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
90003618:	a90b      	add	r1, sp, #44	; 0x2c
9000361a:	4837      	ldr	r0, [pc, #220]	; (900036f8 <main+0x364>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
9000361c:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
  GPIO_InitStruct.Pin = FRAME_RATE_Pin|RENDER_TIME_Pin;
90003620:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90003622:	e9cd 640c 	strd	r6, r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
90003626:	f003 faa7 	bl	90006b78 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_DE_Pin;
9000362a:	2380      	movs	r3, #128	; 0x80
  HAL_GPIO_Init(LCD_DE_GPIO_Port, &GPIO_InitStruct);
9000362c:	a90b      	add	r1, sp, #44	; 0x2c
9000362e:	4833      	ldr	r0, [pc, #204]	; (900036fc <main+0x368>)
  GPIO_InitStruct.Pin = LCD_DE_Pin;
90003630:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
90003632:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90003634:	e9cd 640c 	strd	r6, r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(LCD_DE_GPIO_Port, &GPIO_InitStruct);
90003638:	f003 fa9e 	bl	90006b78 <HAL_GPIO_Init>
  HAL_GPIO_Init(VSYNC_FREQ_GPIO_Port, &GPIO_InitStruct);
9000363c:	a90b      	add	r1, sp, #44	; 0x2c
9000363e:	4830      	ldr	r0, [pc, #192]	; (90003700 <main+0x36c>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
90003640:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
  GPIO_InitStruct.Pin = VSYNC_FREQ_Pin;
90003644:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90003648:	e9cd 640c 	strd	r6, r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(VSYNC_FREQ_GPIO_Port, &GPIO_InitStruct);
9000364c:	f003 fa94 	bl	90006b78 <HAL_GPIO_Init>
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
90003650:	a90b      	add	r1, sp, #44	; 0x2c
90003652:	482c      	ldr	r0, [pc, #176]	; (90003704 <main+0x370>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
90003654:	e9cd 660b 	strd	r6, r6, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
90003658:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
9000365c:	f003 fa8c 	bl	90006b78 <HAL_GPIO_Init>
  HAL_GPIO_Init(LCD_RESET_GPIO_Port, &GPIO_InitStruct);
90003660:	a90b      	add	r1, sp, #44	; 0x2c
90003662:	4829      	ldr	r0, [pc, #164]	; (90003708 <main+0x374>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
90003664:	e9cd 760b 	strd	r7, r6, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
90003668:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(LCD_RESET_GPIO_Port, &GPIO_InitStruct);
9000366c:	f003 fa84 	bl	90006b78 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RST_Pin|GP0_Pin;
90003670:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
90003674:	a90b      	add	r1, sp, #44	; 0x2c
90003676:	4825      	ldr	r0, [pc, #148]	; (9000370c <main+0x378>)
  GPIO_InitStruct.Pin = RST_Pin|GP0_Pin;
90003678:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
9000367a:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_PULLUP;
9000367c:	e9cd 660c 	strd	r6, r6, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
90003680:	f003 fa7a 	bl	90006b78 <HAL_GPIO_Init>
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
90003684:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
  GPIO_InitStruct.Pin = MCU_ACTIVE_Pin;
90003688:	f04f 0940 	mov.w	r9, #64	; 0x40
  HAL_GPIO_Init(MCU_ACTIVE_GPIO_Port, &GPIO_InitStruct);
9000368c:	a90b      	add	r1, sp, #44	; 0x2c
9000368e:	481e      	ldr	r0, [pc, #120]	; (90003708 <main+0x374>)
  GPIO_InitStruct.Pin = MCU_ACTIVE_Pin;
90003690:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90003694:	e9cd 640c 	strd	r6, r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(MCU_ACTIVE_GPIO_Port, &GPIO_InitStruct);
90003698:	f003 fa6e 	bl	90006b78 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
9000369c:	a90b      	add	r1, sp, #44	; 0x2c
9000369e:	481a      	ldr	r0, [pc, #104]	; (90003708 <main+0x374>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
900036a0:	e9cd b60b 	strd	fp, r6, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
900036a4:	e9cd 640d 	strd	r6, r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
900036a8:	f003 fa66 	bl	90006b78 <HAL_GPIO_Init>
  __HAL_RCC_MDMA_CLK_ENABLE();
900036ac:	f8d5 30d4 	ldr.w	r3, [r5, #212]	; 0xd4
  HAL_NVIC_SetPriority(MDMA_IRQn, 5, 0);
900036b0:	4622      	mov	r2, r4
900036b2:	2105      	movs	r1, #5
  __HAL_RCC_MDMA_CLK_ENABLE();
900036b4:	4333      	orrs	r3, r6
  HAL_NVIC_SetPriority(MDMA_IRQn, 5, 0);
900036b6:	207a      	movs	r0, #122	; 0x7a
  __HAL_RCC_MDMA_CLK_ENABLE();
900036b8:	f8c5 30d4 	str.w	r3, [r5, #212]	; 0xd4
900036bc:	f8d5 30d4 	ldr.w	r3, [r5, #212]	; 0xd4
  hltdc.Instance = LTDC;
900036c0:	4d13      	ldr	r5, [pc, #76]	; (90003710 <main+0x37c>)
  __HAL_RCC_MDMA_CLK_ENABLE();
900036c2:	4033      	ands	r3, r6
900036c4:	9300      	str	r3, [sp, #0]
900036c6:	9b00      	ldr	r3, [sp, #0]
  HAL_NVIC_SetPriority(MDMA_IRQn, 5, 0);
900036c8:	f002 fda8 	bl	9000621c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(MDMA_IRQn);
900036cc:	207a      	movs	r0, #122	; 0x7a
900036ce:	f002 fde3 	bl	90006298 <HAL_NVIC_EnableIRQ>
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
900036d2:	2234      	movs	r2, #52	; 0x34
900036d4:	4621      	mov	r1, r4
900036d6:	a80b      	add	r0, sp, #44	; 0x2c
900036d8:	f020 ffe2 	bl	900246a0 <memset>
  hltdc.Instance = LTDC;
900036dc:	4b0d      	ldr	r3, [pc, #52]	; (90003714 <main+0x380>)
  hltdc.Init.AccumulatedVBP = 11;
900036de:	202a      	movs	r0, #42	; 0x2a
  hltdc.Init.AccumulatedActiveH = 283;
900036e0:	f240 2c0a 	movw	ip, #522	; 0x20a
900036e4:	e018      	b.n	90003718 <main+0x384>
900036e6:	bf00      	nop
900036e8:	e000ed00 	.word	0xe000ed00
900036ec:	03000012 	.word	0x03000012
900036f0:	01010001 	.word	0x01010001
900036f4:	58024400 	.word	0x58024400
900036f8:	58020400 	.word	0x58020400
900036fc:	58020c00 	.word	0x58020c00
90003700:	58021800 	.word	0x58021800
90003704:	58022800 	.word	0x58022800
90003708:	58020000 	.word	0x58020000
9000370c:	58021c00 	.word	0x58021c00
90003710:	240070a8 	.word	0x240070a8
90003714:	50001000 	.word	0x50001000
  hltdc.Instance = LTDC;
90003718:	602b      	str	r3, [r5, #0]
  hltdc.Init.HorizontalSync = 39;
9000371a:	2327      	movs	r3, #39	; 0x27
  hltdc.Init.TotalHeigh = 285;
9000371c:	f44f 7e04 	mov.w	lr, #528	; 0x210
  hltdc.Init.Backcolor.Blue = 0;
90003720:	86ac      	strh	r4, [r5, #52]	; 0x34
  hltdc.Init.HorizontalSync = 39;
90003722:	616b      	str	r3, [r5, #20]
  hltdc.Init.AccumulatedVBP = 11;
90003724:	230b      	movs	r3, #11
  hltdc.Init.VerticalSync = 8;
90003726:	f8c5 a018 	str.w	sl, [r5, #24]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
9000372a:	f04f 0a05 	mov.w	sl, #5
  hltdc.Init.Backcolor.Red = 0;
9000372e:	f885 4036 	strb.w	r4, [r5, #54]	; 0x36
  hltdc.Init.AccumulatedVBP = 11;
90003732:	e9c5 0307 	strd	r0, r3, [r5, #28]
  hltdc.Init.AccumulatedActiveH = 283;
90003736:	f240 131b 	movw	r3, #283	; 0x11b
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
9000373a:	4628      	mov	r0, r5
  hltdc.Init.AccumulatedActiveH = 283;
9000373c:	e9c5 c309 	strd	ip, r3, [r5, #36]	; 0x24
  hltdc.Init.TotalHeigh = 285;
90003740:	f240 131d 	movw	r3, #285	; 0x11d
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
90003744:	e9c5 4401 	strd	r4, r4, [r5, #4]
  hltdc.Init.TotalHeigh = 285;
90003748:	e9c5 e30b 	strd	lr, r3, [r5, #44]	; 0x2c
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
9000374c:	e9c5 4403 	strd	r4, r4, [r5, #12]
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
90003750:	f005 ff98 	bl	90009684 <HAL_LTDC_Init>
  pLayerCfg.WindowX1 = 480;
90003754:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
90003758:	4622      	mov	r2, r4
9000375a:	a90b      	add	r1, sp, #44	; 0x2c
  pLayerCfg.WindowX1 = 480;
9000375c:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
9000375e:	4628      	mov	r0, r5
  pLayerCfg.ImageWidth = 480;
90003760:	9315      	str	r3, [sp, #84]	; 0x54
  pLayerCfg.WindowY1 = 272;
90003762:	f44f 7388 	mov.w	r3, #272	; 0x110
  hdma2d.Instance = DMA2D;
90003766:	4d82      	ldr	r5, [pc, #520]	; (90003970 <main+0x5dc>)
  pLayerCfg.WindowY1 = 272;
90003768:	930e      	str	r3, [sp, #56]	; 0x38
  pLayerCfg.ImageHeight = 272;
9000376a:	9316      	str	r3, [sp, #88]	; 0x58
  pLayerCfg.Alpha = 255;
9000376c:	23ff      	movs	r3, #255	; 0xff
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
9000376e:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  pLayerCfg.Alpha = 255;
90003772:	9310      	str	r3, [sp, #64]	; 0x40
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
90003774:	f44f 6380 	mov.w	r3, #1024	; 0x400
  pLayerCfg.WindowX0 = 0;
90003778:	940b      	str	r4, [sp, #44]	; 0x2c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
9000377a:	9312      	str	r3, [sp, #72]	; 0x48
  pLayerCfg.WindowY0 = 0;
9000377c:	940d      	str	r4, [sp, #52]	; 0x34
  pLayerCfg.Alpha0 = 0;
9000377e:	9411      	str	r4, [sp, #68]	; 0x44
  pLayerCfg.FBStartAdress = 0;
90003780:	9414      	str	r4, [sp, #80]	; 0x50
  pLayerCfg.Backcolor.Blue = 0;
90003782:	f8ad 405c 	strh.w	r4, [sp, #92]	; 0x5c
  pLayerCfg.Backcolor.Red = 0;
90003786:	f88d 405e 	strb.w	r4, [sp, #94]	; 0x5e
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
9000378a:	f8cd a04c 	str.w	sl, [sp, #76]	; 0x4c
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
9000378e:	f006 f84d 	bl	9000982c <HAL_LTDC_ConfigLayer>
  hdma2d.Instance = DMA2D;
90003792:	4b78      	ldr	r3, [pc, #480]	; (90003974 <main+0x5e0>)
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
90003794:	4628      	mov	r0, r5
  hdma2d.LayerCfg[1].ChromaSubSampling = DMA2D_NO_CSS;
90003796:	65ec      	str	r4, [r5, #92]	; 0x5c
  hdma2d.Instance = DMA2D;
90003798:	602b      	str	r3, [r5, #0]
  hdma2d.Init.OutputOffset = 0;
9000379a:	60ec      	str	r4, [r5, #12]
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
9000379c:	e9c5 4811 	strd	r4, r8, [r5, #68]	; 0x44
  hdma2d.LayerCfg[1].InputAlpha = 0;
900037a0:	e9c5 4413 	strd	r4, r4, [r5, #76]	; 0x4c
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
900037a4:	e9c5 4415 	strd	r4, r4, [r5, #84]	; 0x54
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
900037a8:	e9c5 4801 	strd	r4, r8, [r5, #4]
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
900037ac:	f003 f89c 	bl	900068e8 <HAL_DMA2D_Init>
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
900037b0:	4631      	mov	r1, r6
900037b2:	4628      	mov	r0, r5
  hi2c4.Instance = I2C4;
900037b4:	4d70      	ldr	r5, [pc, #448]	; (90003978 <main+0x5e4>)
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
900037b6:	f003 f96f 	bl	90006a98 <HAL_DMA2D_ConfigLayer>
  SdramTiming.ExitSelfRefreshDelay = 7;
900037ba:	2307      	movs	r3, #7
  hsdram2.Instance = FMC_SDRAM_DEVICE;
900037bc:	486f      	ldr	r0, [pc, #444]	; (9000397c <main+0x5e8>)
  hsdram2.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
900037be:	f44f 6c00 	mov.w	ip, #2048	; 0x800
  SdramTiming.ExitSelfRefreshDelay = 7;
900037c2:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_SDRAM_Init(&hsdram2, &SdramTiming) != HAL_OK)
900037c4:	a90b      	add	r1, sp, #44	; 0x2c
  SdramTiming.RowCycleDelay = 7;
900037c6:	930e      	str	r3, [sp, #56]	; 0x38
  hsdram2.Instance = FMC_SDRAM_DEVICE;
900037c8:	4b6d      	ldr	r3, [pc, #436]	; (90003980 <main+0x5ec>)
  SdramTiming.LoadToActiveDelay = 2;
900037ca:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
  hsdram2.Instance = FMC_SDRAM_DEVICE;
900037ce:	6003      	str	r3, [r0, #0]
  hsdram2.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
900037d0:	f44f 73c0 	mov.w	r3, #384	; 0x180
  hsdram2.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
900037d4:	f8c0 9014 	str.w	r9, [r0, #20]
  hsdram2.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
900037d8:	6183      	str	r3, [r0, #24]
  hsdram2.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
900037da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  SdramTiming.WriteRecoveryTime = 5;
900037de:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
  SdramTiming.SelfRefreshTime = 4;
900037e2:	970d      	str	r7, [sp, #52]	; 0x34
  hsdram2.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
900037e4:	60c7      	str	r7, [r0, #12]
  hsdram2.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
900037e6:	61c4      	str	r4, [r0, #28]
  hsdram2.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
900037e8:	6284      	str	r4, [r0, #40]	; 0x28
  huart2.Init.BaudRate = 115200;
900037ea:	f8df 9238 	ldr.w	r9, [pc, #568]	; 90003a24 <main+0x690>
  SdramTiming.RCDDelay = 2;
900037ee:	e9cd 8810 	strd	r8, r8, [sp, #64]	; 0x40
  hsdram2.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
900037f2:	f04f 0810 	mov.w	r8, #16
  hsdram2.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
900037f6:	e9c0 c308 	strd	ip, r3, [r0, #32]
  hsdram2.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
900037fa:	e9c0 6401 	strd	r6, r4, [r0, #4]
  hsdram2.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
900037fe:	f8c0 8010 	str.w	r8, [r0, #16]
  if (HAL_SDRAM_Init(&hsdram2, &SdramTiming) != HAL_OK)
90003802:	f008 f9e1 	bl	9000bbc8 <HAL_SDRAM_Init>
  BSP_SDRAM_DeInit(0);
90003806:	4620      	mov	r0, r4
90003808:	f002 fa2e 	bl	90005c68 <BSP_SDRAM_DeInit>
  if(BSP_SDRAM_Init(0) != BSP_ERROR_NONE)
9000380c:	4620      	mov	r0, r4
9000380e:	f002 fa75 	bl	90005cfc <BSP_SDRAM_Init>
  MX_LIBJPEG_Init();
90003812:	f7fc ff65 	bl	900006e0 <MX_LIBJPEG_Init>
  hjpeg.Instance = JPEG;
90003816:	4b5b      	ldr	r3, [pc, #364]	; (90003984 <main+0x5f0>)
90003818:	485b      	ldr	r0, [pc, #364]	; (90003988 <main+0x5f4>)
9000381a:	6003      	str	r3, [r0, #0]
  if (HAL_JPEG_Init(&hjpeg) != HAL_OK)
9000381c:	f004 ff06 	bl	9000862c <HAL_JPEG_Init>
  hcrc.Instance = CRC;
90003820:	485a      	ldr	r0, [pc, #360]	; (9000398c <main+0x5f8>)
90003822:	4b5b      	ldr	r3, [pc, #364]	; (90003990 <main+0x5fc>)
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
90003824:	8084      	strh	r4, [r0, #4]
  hcrc.Instance = CRC;
90003826:	6003      	str	r3, [r0, #0]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
90003828:	6206      	str	r6, [r0, #32]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
9000382a:	e9c0 4405 	strd	r4, r4, [r0, #20]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
9000382e:	f002 fda3 	bl	90006378 <HAL_CRC_Init>
  hi2c4.Init.Timing = 0x10C0ECFF;
90003832:	f8df e1f4 	ldr.w	lr, [pc, #500]	; 90003a28 <main+0x694>
90003836:	4b57      	ldr	r3, [pc, #348]	; (90003994 <main+0x600>)
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
90003838:	4628      	mov	r0, r5
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
9000383a:	622c      	str	r4, [r5, #32]
  hi2c4.Init.Timing = 0x10C0ECFF;
9000383c:	e9c5 e300 	strd	lr, r3, [r5]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
90003840:	e9c5 4602 	strd	r4, r6, [r5, #8]
  hi2c4.Init.OwnAddress2 = 0;
90003844:	e9c5 4404 	strd	r4, r4, [r5, #16]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
90003848:	e9c5 4406 	strd	r4, r4, [r5, #24]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
9000384c:	f003 fdf2 	bl	90007434 <HAL_I2C_Init>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
90003850:	4621      	mov	r1, r4
90003852:	4628      	mov	r0, r5
90003854:	f004 fb88 	bl	90007f68 <HAL_I2CEx_ConfigAnalogFilter>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
90003858:	4621      	mov	r1, r4
9000385a:	4628      	mov	r0, r5
  huart2.Instance = USART2;
9000385c:	4d4e      	ldr	r5, [pc, #312]	; (90003998 <main+0x604>)
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
9000385e:	f004 fbad 	bl	90007fbc <HAL_I2CEx_ConfigDigitalFilter>
  huart2.Init.BaudRate = 115200;
90003862:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  if (HAL_UART_Init(&huart2) != HAL_OK)
90003866:	4628      	mov	r0, r5
  huart2.Init.Parity = UART_PARITY_NONE;
90003868:	612c      	str	r4, [r5, #16]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
9000386a:	62ac      	str	r4, [r5, #40]	; 0x28
  huart2.Init.BaudRate = 115200;
9000386c:	e9c5 9300 	strd	r9, r3, [r5]
  huart2.Init.Mode = UART_MODE_TX_RX;
90003870:	230c      	movs	r3, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
90003872:	e9c5 4402 	strd	r4, r4, [r5, #8]
  huart2.Init.Mode = UART_MODE_TX_RX;
90003876:	616b      	str	r3, [r5, #20]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
90003878:	e9c5 4406 	strd	r4, r4, [r5, #24]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
9000387c:	e9c5 4408 	strd	r4, r4, [r5, #32]
  if (HAL_UART_Init(&huart2) != HAL_OK)
90003880:	f009 fe60 	bl	9000d544 <HAL_UART_Init>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
90003884:	4621      	mov	r1, r4
90003886:	4628      	mov	r0, r5
90003888:	f009 feb4 	bl	9000d5f4 <HAL_UARTEx_SetTxFifoThreshold>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
9000388c:	4621      	mov	r1, r4
9000388e:	4628      	mov	r0, r5
90003890:	f009 fef2 	bl	9000d678 <HAL_UARTEx_SetRxFifoThreshold>
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
90003894:	4628      	mov	r0, r5
90003896:	f009 fe8f 	bl	9000d5b8 <HAL_UARTEx_DisableFifoMode>
  osKernelInitialize();
9000389a:	f00a f803 	bl	9000d8a4 <osKernelInitialize>
  semaphoreHaltUntilStringHandle = osSemaphoreNew(1, 1, &semaphoreHaltUntilString_attributes);
9000389e:	4a3f      	ldr	r2, [pc, #252]	; (9000399c <main+0x608>)
900038a0:	4631      	mov	r1, r6
900038a2:	4630      	mov	r0, r6
900038a4:	f00a f9a6 	bl	9000dbf4 <osSemaphoreNew>
900038a8:	4b3d      	ldr	r3, [pc, #244]	; (900039a0 <main+0x60c>)
900038aa:	4602      	mov	r2, r0
  queueTempAndHumidHandle = osMessageQueueNew (16, sizeof(float), &queueTempAndHumid_attributes);
900038ac:	4639      	mov	r1, r7
900038ae:	4640      	mov	r0, r8
  semaphoreHaltUntilStringHandle = osSemaphoreNew(1, 1, &semaphoreHaltUntilString_attributes);
900038b0:	601a      	str	r2, [r3, #0]
  queueTempAndHumidHandle = osMessageQueueNew (16, sizeof(float), &queueTempAndHumid_attributes);
900038b2:	4a3c      	ldr	r2, [pc, #240]	; (900039a4 <main+0x610>)
900038b4:	f00a fa4e 	bl	9000dd54 <osMessageQueueNew>
900038b8:	4b3b      	ldr	r3, [pc, #236]	; (900039a8 <main+0x614>)
  queueRxDataCharHandle = osMessageQueueNew (512, sizeof(uint8_t), &queueRxDataChar_attributes);
900038ba:	4a3c      	ldr	r2, [pc, #240]	; (900039ac <main+0x618>)
900038bc:	4631      	mov	r1, r6
  queueTempAndHumidHandle = osMessageQueueNew (16, sizeof(float), &queueTempAndHumid_attributes);
900038be:	6018      	str	r0, [r3, #0]
  queueRxDataCharHandle = osMessageQueueNew (512, sizeof(uint8_t), &queueRxDataChar_attributes);
900038c0:	f44f 7000 	mov.w	r0, #512	; 0x200
900038c4:	f00a fa46 	bl	9000dd54 <osMessageQueueNew>
900038c8:	4b39      	ldr	r3, [pc, #228]	; (900039b0 <main+0x61c>)
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
900038ca:	4a3a      	ldr	r2, [pc, #232]	; (900039b4 <main+0x620>)
900038cc:	4621      	mov	r1, r4
  queueRxDataCharHandle = osMessageQueueNew (512, sizeof(uint8_t), &queueRxDataChar_attributes);
900038ce:	6018      	str	r0, [r3, #0]
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
900038d0:	4839      	ldr	r0, [pc, #228]	; (900039b8 <main+0x624>)
900038d2:	f00a f813 	bl	9000d8fc <osThreadNew>
900038d6:	4b39      	ldr	r3, [pc, #228]	; (900039bc <main+0x628>)
  GUITaskHandle = osThreadNew(TouchGFX_Task, NULL, &GUITask_attributes);
900038d8:	4a39      	ldr	r2, [pc, #228]	; (900039c0 <main+0x62c>)
900038da:	4621      	mov	r1, r4
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
900038dc:	6018      	str	r0, [r3, #0]
  GUITaskHandle = osThreadNew(TouchGFX_Task, NULL, &GUITask_attributes);
900038de:	4839      	ldr	r0, [pc, #228]	; (900039c4 <main+0x630>)
900038e0:	f00a f80c 	bl	9000d8fc <osThreadNew>
900038e4:	4b38      	ldr	r3, [pc, #224]	; (900039c8 <main+0x634>)
  videoTaskHandle = osThreadNew(videoTaskFunc, NULL, &videoTask_attributes);
900038e6:	4a39      	ldr	r2, [pc, #228]	; (900039cc <main+0x638>)
900038e8:	4621      	mov	r1, r4
  GUITaskHandle = osThreadNew(TouchGFX_Task, NULL, &GUITask_attributes);
900038ea:	6018      	str	r0, [r3, #0]
  videoTaskHandle = osThreadNew(videoTaskFunc, NULL, &videoTask_attributes);
900038ec:	4838      	ldr	r0, [pc, #224]	; (900039d0 <main+0x63c>)
900038ee:	f00a f805 	bl	9000d8fc <osThreadNew>
900038f2:	4b38      	ldr	r3, [pc, #224]	; (900039d4 <main+0x640>)
  SendDataWithESPHandle = osThreadNew(prvTaskSendDataWithESP, NULL, &SendDataWithESP_attributes);
900038f4:	4a38      	ldr	r2, [pc, #224]	; (900039d8 <main+0x644>)
900038f6:	4621      	mov	r1, r4
  videoTaskHandle = osThreadNew(videoTaskFunc, NULL, &videoTask_attributes);
900038f8:	6018      	str	r0, [r3, #0]
  SendDataWithESPHandle = osThreadNew(prvTaskSendDataWithESP, NULL, &SendDataWithESP_attributes);
900038fa:	4838      	ldr	r0, [pc, #224]	; (900039dc <main+0x648>)
900038fc:	f009 fffe 	bl	9000d8fc <osThreadNew>
90003900:	4b37      	ldr	r3, [pc, #220]	; (900039e0 <main+0x64c>)
  SetUpESPHandle = osThreadNew(prvTaskSetUpESP, NULL, &SetUpESP_attributes);
90003902:	4a38      	ldr	r2, [pc, #224]	; (900039e4 <main+0x650>)
90003904:	4621      	mov	r1, r4
  SendDataWithESPHandle = osThreadNew(prvTaskSendDataWithESP, NULL, &SendDataWithESP_attributes);
90003906:	6018      	str	r0, [r3, #0]
  SetUpESPHandle = osThreadNew(prvTaskSetUpESP, NULL, &SetUpESP_attributes);
90003908:	4837      	ldr	r0, [pc, #220]	; (900039e8 <main+0x654>)
9000390a:	f009 fff7 	bl	9000d8fc <osThreadNew>
9000390e:	4b37      	ldr	r3, [pc, #220]	; (900039ec <main+0x658>)
  ReadSensorDataHandle = osThreadNew(prvTaskReadTempAndHumidity, NULL, &ReadSensorData_attributes);
90003910:	4a37      	ldr	r2, [pc, #220]	; (900039f0 <main+0x65c>)
90003912:	4621      	mov	r1, r4
  SetUpESPHandle = osThreadNew(prvTaskSetUpESP, NULL, &SetUpESP_attributes);
90003914:	6018      	str	r0, [r3, #0]
  ReadSensorDataHandle = osThreadNew(prvTaskReadTempAndHumidity, NULL, &ReadSensorData_attributes);
90003916:	4837      	ldr	r0, [pc, #220]	; (900039f4 <main+0x660>)
90003918:	f009 fff0 	bl	9000d8fc <osThreadNew>
9000391c:	4b36      	ldr	r3, [pc, #216]	; (900039f8 <main+0x664>)
  ReadESPHandle = osThreadNew(prvTaskReadESP, NULL, &ReadESP_attributes);
9000391e:	4621      	mov	r1, r4
90003920:	4a36      	ldr	r2, [pc, #216]	; (900039fc <main+0x668>)
  ReadSensorDataHandle = osThreadNew(prvTaskReadTempAndHumidity, NULL, &ReadSensorData_attributes);
90003922:	6018      	str	r0, [r3, #0]
  ReadESPHandle = osThreadNew(prvTaskReadESP, NULL, &ReadESP_attributes);
90003924:	4836      	ldr	r0, [pc, #216]	; (90003a00 <main+0x66c>)
90003926:	f009 ffe9 	bl	9000d8fc <osThreadNew>
9000392a:	4b36      	ldr	r3, [pc, #216]	; (90003a04 <main+0x670>)
9000392c:	4602      	mov	r2, r0
  eventESPSetUpFinishedHandle = osEventFlagsNew(&eventESPSetUpFinished_attributes);
9000392e:	4836      	ldr	r0, [pc, #216]	; (90003a08 <main+0x674>)
  ReadESPHandle = osThreadNew(prvTaskReadESP, NULL, &ReadESP_attributes);
90003930:	601a      	str	r2, [r3, #0]
  eventESPSetUpFinishedHandle = osEventFlagsNew(&eventESPSetUpFinished_attributes);
90003932:	f00a f84d 	bl	9000d9d0 <osEventFlagsNew>
90003936:	4b35      	ldr	r3, [pc, #212]	; (90003a0c <main+0x678>)
90003938:	4602      	mov	r2, r0
  eventESPResponseValidHandle = osEventFlagsNew(&eventESPResponseValid_attributes);
9000393a:	4835      	ldr	r0, [pc, #212]	; (90003a10 <main+0x67c>)
  eventESPSetUpFinishedHandle = osEventFlagsNew(&eventESPSetUpFinished_attributes);
9000393c:	601a      	str	r2, [r3, #0]
  eventESPResponseValidHandle = osEventFlagsNew(&eventESPResponseValid_attributes);
9000393e:	f00a f847 	bl	9000d9d0 <osEventFlagsNew>
90003942:	4b34      	ldr	r3, [pc, #208]	; (90003a14 <main+0x680>)
90003944:	4602      	mov	r2, r0
  eventESPResponseHandle = osEventFlagsNew(&eventESPResponse_attributes);
90003946:	4834      	ldr	r0, [pc, #208]	; (90003a18 <main+0x684>)
  eventESPResponseValidHandle = osEventFlagsNew(&eventESPResponseValid_attributes);
90003948:	601a      	str	r2, [r3, #0]
  eventESPResponseHandle = osEventFlagsNew(&eventESPResponse_attributes);
9000394a:	f00a f841 	bl	9000d9d0 <osEventFlagsNew>
9000394e:	4b33      	ldr	r3, [pc, #204]	; (90003a1c <main+0x688>)
  HAL_UART_Receive_IT(&huart2, &rx_buffer, 1);
90003950:	4632      	mov	r2, r6
90003952:	4933      	ldr	r1, [pc, #204]	; (90003a20 <main+0x68c>)
  eventESPResponseHandle = osEventFlagsNew(&eventESPResponse_attributes);
90003954:	6018      	str	r0, [r3, #0]
  HAL_UART_Receive_IT(&huart2, &rx_buffer, 1);
90003956:	4628      	mov	r0, r5
90003958:	f008 fcbe 	bl	9000c2d8 <HAL_UART_Receive_IT>
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
9000395c:	682a      	ldr	r2, [r5, #0]
9000395e:	6813      	ldr	r3, [r2, #0]
90003960:	f043 0320 	orr.w	r3, r3, #32
90003964:	6013      	str	r3, [r2, #0]
  MX_TouchGFX_Init();
90003966:	f7fc febd 	bl	900006e4 <MX_TouchGFX_Init>
  osKernelStart();
9000396a:	f009 ffad 	bl	9000d8c8 <osKernelStart>
  while (1)
9000396e:	e7fe      	b.n	9000396e <main+0x5da>
90003970:	24006f94 	.word	0x24006f94
90003974:	52001000 	.word	0x52001000
90003978:	24006ffc 	.word	0x24006ffc
9000397c:	24007228 	.word	0x24007228
90003980:	52004140 	.word	0x52004140
90003984:	52003000 	.word	0x52003000
90003988:	24007050 	.word	0x24007050
9000398c:	24006f70 	.word	0x24006f70
90003990:	58024c00 	.word	0x58024c00
90003994:	10c0ecff 	.word	0x10c0ecff
90003998:	2400725c 	.word	0x2400725c
9000399c:	900281a4 	.word	0x900281a4
900039a0:	240074fc 	.word	0x240074fc
900039a4:	9002818c 	.word	0x9002818c
900039a8:	240072f4 	.word	0x240072f4
900039ac:	90028174 	.word	0x90028174
900039b0:	240072f0 	.word	0x240072f0
900039b4:	90028120 	.word	0x90028120
900039b8:	90002bad 	.word	0x90002bad
900039bc:	24006f20 	.word	0x24006f20
900039c0:	9002806c 	.word	0x9002806c
900039c4:	900006f5 	.word	0x900006f5
900039c8:	24006eec 	.word	0x24006eec
900039cc:	900281b4 	.word	0x900281b4
900039d0:	90002b31 	.word	0x90002b31
900039d4:	24007500 	.word	0x24007500
900039d8:	900280d8 	.word	0x900280d8
900039dc:	90002f99 	.word	0x90002f99
900039e0:	24006ef8 	.word	0x24006ef8
900039e4:	900280fc 	.word	0x900280fc
900039e8:	90002ced 	.word	0x90002ced
900039ec:	24006efc 	.word	0x24006efc
900039f0:	900280b4 	.word	0x900280b4
900039f4:	90002be5 	.word	0x90002be5
900039f8:	24006ef4 	.word	0x24006ef4
900039fc:	90028090 	.word	0x90028090
90003a00:	90002c3d 	.word	0x90002c3d
90003a04:	24006ef0 	.word	0x24006ef0
90003a08:	90028164 	.word	0x90028164
90003a0c:	24006f2c 	.word	0x24006f2c
90003a10:	90028144 	.word	0x90028144
90003a14:	24006f28 	.word	0x24006f28
90003a18:	90028154 	.word	0x90028154
90003a1c:	24006f24 	.word	0x24006f24
90003a20:	240074f8 	.word	0x240074f8
90003a24:	40004400 	.word	0x40004400
90003a28:	58001c00 	.word	0x58001c00

90003a2c <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
90003a2c:	b508      	push	{r3, lr}
	if(rx_buffer == '\0')
90003a2e:	4b09      	ldr	r3, [pc, #36]	; (90003a54 <HAL_UART_RxCpltCallback+0x28>)
90003a30:	781a      	ldrb	r2, [r3, #0]
90003a32:	b90a      	cbnz	r2, 90003a38 <HAL_UART_RxCpltCallback+0xc>
		rx_buffer = '0';
90003a34:	2230      	movs	r2, #48	; 0x30
90003a36:	701a      	strb	r2, [r3, #0]
	osMessageQueuePut(queueRxDataCharHandle, &rx_buffer, 0, 0);
90003a38:	2300      	movs	r3, #0
90003a3a:	4807      	ldr	r0, [pc, #28]	; (90003a58 <HAL_UART_RxCpltCallback+0x2c>)
90003a3c:	4905      	ldr	r1, [pc, #20]	; (90003a54 <HAL_UART_RxCpltCallback+0x28>)
90003a3e:	461a      	mov	r2, r3
90003a40:	6800      	ldr	r0, [r0, #0]
90003a42:	f00a f9c5 	bl	9000ddd0 <osMessageQueuePut>
	HAL_UART_Receive_IT(&huart2, &rx_buffer,  1);
90003a46:	2201      	movs	r2, #1
90003a48:	4902      	ldr	r1, [pc, #8]	; (90003a54 <HAL_UART_RxCpltCallback+0x28>)
90003a4a:	4804      	ldr	r0, [pc, #16]	; (90003a5c <HAL_UART_RxCpltCallback+0x30>)
}
90003a4c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_UART_Receive_IT(&huart2, &rx_buffer,  1);
90003a50:	f008 bc42 	b.w	9000c2d8 <HAL_UART_Receive_IT>
90003a54:	240074f8 	.word	0x240074f8
90003a58:	240072f0 	.word	0x240072f0
90003a5c:	2400725c 	.word	0x2400725c

90003a60 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
90003a60:	4b03      	ldr	r3, [pc, #12]	; (90003a70 <HAL_TIM_PeriodElapsedCallback+0x10>)
90003a62:	6802      	ldr	r2, [r0, #0]
90003a64:	429a      	cmp	r2, r3
90003a66:	d000      	beq.n	90003a6a <HAL_TIM_PeriodElapsedCallback+0xa>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
90003a68:	4770      	bx	lr
    HAL_IncTick();
90003a6a:	f002 bb9b 	b.w	900061a4 <HAL_IncTick>
90003a6e:	bf00      	nop
90003a70:	40001000 	.word	0x40001000

90003a74 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
90003a74:	4770      	bx	lr
90003a76:	bf00      	nop

90003a78 <sht3x_read_temperature_and_humidity>:

	return true;
}

bool sht3x_read_temperature_and_humidity(sht3x_handle_t *handle, float *temperature, float *humidity)
{
90003a78:	b5f0      	push	{r4, r5, r6, r7, lr}
90003a7a:	460d      	mov	r5, r1
90003a7c:	8881      	ldrh	r1, [r0, #4]
90003a7e:	b085      	sub	sp, #20
	uint8_t command_buffer[2] = {(command & 0xff00u) >> 8u, command & 0xffu};
90003a80:	f240 632c 	movw	r3, #1580	; 0x62c
	if (HAL_I2C_Master_Transmit(handle->i2c_handle, handle->device_address << 1u, command_buffer, sizeof(command_buffer),
90003a84:	271e      	movs	r7, #30
90003a86:	0049      	lsls	r1, r1, #1
{
90003a88:	4606      	mov	r6, r0
	uint8_t command_buffer[2] = {(command & 0xff00u) >> 8u, command & 0xffu};
90003a8a:	f8ad 3008 	strh.w	r3, [sp, #8]
	if (HAL_I2C_Master_Transmit(handle->i2c_handle, handle->device_address << 1u, command_buffer, sizeof(command_buffer),
90003a8e:	b289      	uxth	r1, r1
90003a90:	2302      	movs	r3, #2
90003a92:	9700      	str	r7, [sp, #0]
{
90003a94:	4614      	mov	r4, r2
	if (HAL_I2C_Master_Transmit(handle->i2c_handle, handle->device_address << 1u, command_buffer, sizeof(command_buffer),
90003a96:	6800      	ldr	r0, [r0, #0]
90003a98:	aa02      	add	r2, sp, #8
90003a9a:	f003 fd3b 	bl	90007514 <HAL_I2C_Master_Transmit>
	sht3x_send_command(handle, SHT3X_COMMAND_MEASURE_HIGHREP_STRETCH);

	HAL_Delay(1);
90003a9e:	2001      	movs	r0, #1
90003aa0:	f002 fb92 	bl	900061c8 <HAL_Delay>

	uint8_t buffer[6];
	if (HAL_I2C_Master_Receive(handle->i2c_handle, handle->device_address << 1u, buffer, sizeof(buffer), SHT3X_I2C_TIMEOUT) != HAL_OK) {
90003aa4:	9700      	str	r7, [sp, #0]
90003aa6:	88b1      	ldrh	r1, [r6, #4]
90003aa8:	2306      	movs	r3, #6
90003aaa:	aa02      	add	r2, sp, #8
90003aac:	6830      	ldr	r0, [r6, #0]
90003aae:	0049      	lsls	r1, r1, #1
90003ab0:	b289      	uxth	r1, r1
90003ab2:	f003 fecf 	bl	90007854 <HAL_I2C_Master_Receive>
90003ab6:	2800      	cmp	r0, #0
90003ab8:	f040 810e 	bne.w	90003cd8 <sht3x_read_temperature_and_humidity+0x260>
		crc ^= data[i];
90003abc:	f89d 2008 	ldrb.w	r2, [sp, #8]
90003ac0:	f89d 100b 	ldrb.w	r1, [sp, #11]
90003ac4:	43d2      	mvns	r2, r2
90003ac6:	43c9      	mvns	r1, r1
90003ac8:	b2d3      	uxtb	r3, r2
			if ((crc & 0x80u) != 0) {
90003aca:	0617      	lsls	r7, r2, #24
		crc ^= data[i];
90003acc:	f89d 2009 	ldrb.w	r2, [sp, #9]
				crc = (uint8_t)((uint8_t)(crc << 1u) ^ 0x31u);
90003ad0:	ea4f 0343 	mov.w	r3, r3, lsl #1
90003ad4:	b2db      	uxtb	r3, r3
90003ad6:	bf48      	it	mi
90003ad8:	f083 0331 	eormi.w	r3, r3, #49	; 0x31
			if ((crc & 0x80u) != 0) {
90003adc:	f013 0f80 	tst.w	r3, #128	; 0x80
				crc = (uint8_t)((uint8_t)(crc << 1u) ^ 0x31u);
90003ae0:	ea4f 0343 	mov.w	r3, r3, lsl #1
90003ae4:	b2db      	uxtb	r3, r3
90003ae6:	bf18      	it	ne
90003ae8:	f083 0331 	eorne.w	r3, r3, #49	; 0x31
			if ((crc & 0x80u) != 0) {
90003aec:	f013 0f80 	tst.w	r3, #128	; 0x80
				crc = (uint8_t)((uint8_t)(crc << 1u) ^ 0x31u);
90003af0:	ea4f 0343 	mov.w	r3, r3, lsl #1
90003af4:	b2db      	uxtb	r3, r3
90003af6:	bf18      	it	ne
90003af8:	f083 0331 	eorne.w	r3, r3, #49	; 0x31
			if ((crc & 0x80u) != 0) {
90003afc:	f013 0f80 	tst.w	r3, #128	; 0x80
				crc = (uint8_t)((uint8_t)(crc << 1u) ^ 0x31u);
90003b00:	ea4f 0343 	mov.w	r3, r3, lsl #1
90003b04:	b2db      	uxtb	r3, r3
90003b06:	bf18      	it	ne
90003b08:	f083 0331 	eorne.w	r3, r3, #49	; 0x31
			if ((crc & 0x80u) != 0) {
90003b0c:	f013 0f80 	tst.w	r3, #128	; 0x80
				crc = (uint8_t)((uint8_t)(crc << 1u) ^ 0x31u);
90003b10:	ea4f 0343 	mov.w	r3, r3, lsl #1
90003b14:	b2db      	uxtb	r3, r3
90003b16:	bf18      	it	ne
90003b18:	f083 0331 	eorne.w	r3, r3, #49	; 0x31
			if ((crc & 0x80u) != 0) {
90003b1c:	f013 0f80 	tst.w	r3, #128	; 0x80
				crc = (uint8_t)((uint8_t)(crc << 1u) ^ 0x31u);
90003b20:	ea4f 0343 	mov.w	r3, r3, lsl #1
90003b24:	b2db      	uxtb	r3, r3
90003b26:	bf18      	it	ne
90003b28:	f083 0331 	eorne.w	r3, r3, #49	; 0x31
			if ((crc & 0x80u) != 0) {
90003b2c:	f013 0f80 	tst.w	r3, #128	; 0x80
				crc = (uint8_t)((uint8_t)(crc << 1u) ^ 0x31u);
90003b30:	ea4f 0343 	mov.w	r3, r3, lsl #1
90003b34:	b2db      	uxtb	r3, r3
90003b36:	bf18      	it	ne
90003b38:	f083 0331 	eorne.w	r3, r3, #49	; 0x31
			if ((crc & 0x80u) != 0) {
90003b3c:	f013 0f80 	tst.w	r3, #128	; 0x80
				crc = (uint8_t)((uint8_t)(crc << 1u) ^ 0x31u);
90003b40:	ea4f 0343 	mov.w	r3, r3, lsl #1
90003b44:	b2db      	uxtb	r3, r3
90003b46:	bf18      	it	ne
90003b48:	f083 0331 	eorne.w	r3, r3, #49	; 0x31
		crc ^= data[i];
90003b4c:	4053      	eors	r3, r2
90003b4e:	b2ca      	uxtb	r2, r1
			if ((crc & 0x80u) != 0) {
90003b50:	f013 0f80 	tst.w	r3, #128	; 0x80
				crc = (uint8_t)((uint8_t)(crc << 1u) ^ 0x31u);
90003b54:	ea4f 0343 	mov.w	r3, r3, lsl #1
90003b58:	ea4f 0242 	mov.w	r2, r2, lsl #1
90003b5c:	b2db      	uxtb	r3, r3
90003b5e:	b2d2      	uxtb	r2, r2
90003b60:	bf18      	it	ne
90003b62:	f083 0331 	eorne.w	r3, r3, #49	; 0x31
			if ((crc & 0x80u) != 0) {
90003b66:	f013 0f80 	tst.w	r3, #128	; 0x80
				crc = (uint8_t)((uint8_t)(crc << 1u) ^ 0x31u);
90003b6a:	ea4f 0343 	mov.w	r3, r3, lsl #1
90003b6e:	b2db      	uxtb	r3, r3
90003b70:	bf18      	it	ne
90003b72:	f083 0331 	eorne.w	r3, r3, #49	; 0x31
			if ((crc & 0x80u) != 0) {
90003b76:	f013 0f80 	tst.w	r3, #128	; 0x80
				crc = (uint8_t)((uint8_t)(crc << 1u) ^ 0x31u);
90003b7a:	ea4f 0343 	mov.w	r3, r3, lsl #1
90003b7e:	b2db      	uxtb	r3, r3
90003b80:	bf18      	it	ne
90003b82:	f083 0331 	eorne.w	r3, r3, #49	; 0x31
			if ((crc & 0x80u) != 0) {
90003b86:	f013 0f80 	tst.w	r3, #128	; 0x80
				crc = (uint8_t)((uint8_t)(crc << 1u) ^ 0x31u);
90003b8a:	ea4f 0343 	mov.w	r3, r3, lsl #1
90003b8e:	b2db      	uxtb	r3, r3
90003b90:	bf18      	it	ne
90003b92:	f083 0331 	eorne.w	r3, r3, #49	; 0x31
			if ((crc & 0x80u) != 0) {
90003b96:	f013 0f80 	tst.w	r3, #128	; 0x80
				crc = (uint8_t)((uint8_t)(crc << 1u) ^ 0x31u);
90003b9a:	ea4f 0343 	mov.w	r3, r3, lsl #1
90003b9e:	b2db      	uxtb	r3, r3
90003ba0:	bf18      	it	ne
90003ba2:	f083 0331 	eorne.w	r3, r3, #49	; 0x31
			if ((crc & 0x80u) != 0) {
90003ba6:	f013 0f80 	tst.w	r3, #128	; 0x80
				crc = (uint8_t)((uint8_t)(crc << 1u) ^ 0x31u);
90003baa:	ea4f 0343 	mov.w	r3, r3, lsl #1
90003bae:	b2db      	uxtb	r3, r3
90003bb0:	bf18      	it	ne
90003bb2:	f083 0331 	eorne.w	r3, r3, #49	; 0x31
			if ((crc & 0x80u) != 0) {
90003bb6:	f013 0f80 	tst.w	r3, #128	; 0x80
				crc = (uint8_t)((uint8_t)(crc << 1u) ^ 0x31u);
90003bba:	ea4f 0343 	mov.w	r3, r3, lsl #1
90003bbe:	b2db      	uxtb	r3, r3
90003bc0:	bf18      	it	ne
90003bc2:	f083 0331 	eorne.w	r3, r3, #49	; 0x31
			if ((crc & 0x80u) != 0) {
90003bc6:	f013 0f80 	tst.w	r3, #128	; 0x80
				crc = (uint8_t)((uint8_t)(crc << 1u) ^ 0x31u);
90003bca:	ea4f 0343 	mov.w	r3, r3, lsl #1
90003bce:	b2db      	uxtb	r3, r3
90003bd0:	bf18      	it	ne
90003bd2:	f083 0331 	eorne.w	r3, r3, #49	; 0x31
			if ((crc & 0x80u) != 0) {
90003bd6:	060e      	lsls	r6, r1, #24
		crc ^= data[i];
90003bd8:	f89d 100c 	ldrb.w	r1, [sp, #12]
				crc = (uint8_t)((uint8_t)(crc << 1u) ^ 0x31u);
90003bdc:	bf48      	it	mi
90003bde:	f082 0231 	eormi.w	r2, r2, #49	; 0x31
			if ((crc & 0x80u) != 0) {
90003be2:	f012 0f80 	tst.w	r2, #128	; 0x80
				crc = (uint8_t)((uint8_t)(crc << 1u) ^ 0x31u);
90003be6:	ea4f 0242 	mov.w	r2, r2, lsl #1
90003bea:	b2d2      	uxtb	r2, r2
90003bec:	bf18      	it	ne
90003bee:	f082 0231 	eorne.w	r2, r2, #49	; 0x31
			if ((crc & 0x80u) != 0) {
90003bf2:	f012 0f80 	tst.w	r2, #128	; 0x80
				crc = (uint8_t)((uint8_t)(crc << 1u) ^ 0x31u);
90003bf6:	ea4f 0242 	mov.w	r2, r2, lsl #1
90003bfa:	b2d2      	uxtb	r2, r2
90003bfc:	bf18      	it	ne
90003bfe:	f082 0231 	eorne.w	r2, r2, #49	; 0x31
			if ((crc & 0x80u) != 0) {
90003c02:	f012 0f80 	tst.w	r2, #128	; 0x80
				crc = (uint8_t)((uint8_t)(crc << 1u) ^ 0x31u);
90003c06:	ea4f 0242 	mov.w	r2, r2, lsl #1
90003c0a:	b2d2      	uxtb	r2, r2
90003c0c:	bf18      	it	ne
90003c0e:	f082 0231 	eorne.w	r2, r2, #49	; 0x31
			if ((crc & 0x80u) != 0) {
90003c12:	f012 0f80 	tst.w	r2, #128	; 0x80
				crc = (uint8_t)((uint8_t)(crc << 1u) ^ 0x31u);
90003c16:	ea4f 0242 	mov.w	r2, r2, lsl #1
90003c1a:	b2d2      	uxtb	r2, r2
90003c1c:	bf18      	it	ne
90003c1e:	f082 0231 	eorne.w	r2, r2, #49	; 0x31
			if ((crc & 0x80u) != 0) {
90003c22:	f012 0f80 	tst.w	r2, #128	; 0x80
				crc = (uint8_t)((uint8_t)(crc << 1u) ^ 0x31u);
90003c26:	ea4f 0242 	mov.w	r2, r2, lsl #1
90003c2a:	b2d2      	uxtb	r2, r2
90003c2c:	bf18      	it	ne
90003c2e:	f082 0231 	eorne.w	r2, r2, #49	; 0x31
			if ((crc & 0x80u) != 0) {
90003c32:	f012 0f80 	tst.w	r2, #128	; 0x80
				crc = (uint8_t)((uint8_t)(crc << 1u) ^ 0x31u);
90003c36:	ea4f 0242 	mov.w	r2, r2, lsl #1
90003c3a:	b2d2      	uxtb	r2, r2
90003c3c:	bf18      	it	ne
90003c3e:	f082 0231 	eorne.w	r2, r2, #49	; 0x31
			if ((crc & 0x80u) != 0) {
90003c42:	f012 0f80 	tst.w	r2, #128	; 0x80
				crc = (uint8_t)((uint8_t)(crc << 1u) ^ 0x31u);
90003c46:	ea4f 0242 	mov.w	r2, r2, lsl #1
90003c4a:	b2d2      	uxtb	r2, r2
90003c4c:	bf18      	it	ne
90003c4e:	f082 0231 	eorne.w	r2, r2, #49	; 0x31
		crc ^= data[i];
90003c52:	404a      	eors	r2, r1
			if ((crc & 0x80u) != 0) {
90003c54:	f012 0f80 	tst.w	r2, #128	; 0x80
				crc = (uint8_t)((uint8_t)(crc << 1u) ^ 0x31u);
90003c58:	ea4f 0242 	mov.w	r2, r2, lsl #1
90003c5c:	b2d2      	uxtb	r2, r2
90003c5e:	bf18      	it	ne
90003c60:	f082 0231 	eorne.w	r2, r2, #49	; 0x31
			if ((crc & 0x80u) != 0) {
90003c64:	f012 0f80 	tst.w	r2, #128	; 0x80
				crc = (uint8_t)((uint8_t)(crc << 1u) ^ 0x31u);
90003c68:	ea4f 0242 	mov.w	r2, r2, lsl #1
90003c6c:	b2d2      	uxtb	r2, r2
90003c6e:	bf18      	it	ne
90003c70:	f082 0231 	eorne.w	r2, r2, #49	; 0x31
			if ((crc & 0x80u) != 0) {
90003c74:	0610      	lsls	r0, r2, #24
90003c76:	d432      	bmi.n	90003cde <sht3x_read_temperature_and_humidity+0x266>
				crc <<= 1u;
90003c78:	0052      	lsls	r2, r2, #1
90003c7a:	b2d0      	uxtb	r0, r2
			if ((crc & 0x80u) != 0) {
90003c7c:	f010 0f80 	tst.w	r0, #128	; 0x80
				crc = (uint8_t)((uint8_t)(crc << 1u) ^ 0x31u);
90003c80:	ea4f 0040 	mov.w	r0, r0, lsl #1
90003c84:	b2c0      	uxtb	r0, r0
90003c86:	bf18      	it	ne
90003c88:	f080 0031 	eorne.w	r0, r0, #49	; 0x31
			if ((crc & 0x80u) != 0) {
90003c8c:	f010 0f80 	tst.w	r0, #128	; 0x80
				crc = (uint8_t)((uint8_t)(crc << 1u) ^ 0x31u);
90003c90:	ea4f 0040 	mov.w	r0, r0, lsl #1
90003c94:	b2c0      	uxtb	r0, r0
90003c96:	bf18      	it	ne
90003c98:	f080 0031 	eorne.w	r0, r0, #49	; 0x31
			if ((crc & 0x80u) != 0) {
90003c9c:	f010 0f80 	tst.w	r0, #128	; 0x80
				crc = (uint8_t)((uint8_t)(crc << 1u) ^ 0x31u);
90003ca0:	ea4f 0040 	mov.w	r0, r0, lsl #1
90003ca4:	b2c0      	uxtb	r0, r0
90003ca6:	bf18      	it	ne
90003ca8:	f080 0031 	eorne.w	r0, r0, #49	; 0x31
			if ((crc & 0x80u) != 0) {
90003cac:	f010 0f80 	tst.w	r0, #128	; 0x80
				crc = (uint8_t)((uint8_t)(crc << 1u) ^ 0x31u);
90003cb0:	ea4f 0040 	mov.w	r0, r0, lsl #1
90003cb4:	b2c0      	uxtb	r0, r0
90003cb6:	bf18      	it	ne
90003cb8:	f080 0031 	eorne.w	r0, r0, #49	; 0x31
90003cbc:	0042      	lsls	r2, r0, #1
			if ((crc & 0x80u) != 0) {
90003cbe:	0601      	lsls	r1, r0, #24
		return false;
	}

	uint8_t temperature_crc = calculate_crc(buffer, 2);
	uint8_t humidity_crc = calculate_crc(buffer + 3, 2);
	if (temperature_crc != buffer[2] || humidity_crc != buffer[5]) {
90003cc0:	f89d 100a 	ldrb.w	r1, [sp, #10]
				crc = (uint8_t)((uint8_t)(crc << 1u) ^ 0x31u);
90003cc4:	b2d2      	uxtb	r2, r2
90003cc6:	bf48      	it	mi
90003cc8:	f082 0231 	eormi.w	r2, r2, #49	; 0x31
	if (temperature_crc != buffer[2] || humidity_crc != buffer[5]) {
90003ccc:	4299      	cmp	r1, r3
90003cce:	d103      	bne.n	90003cd8 <sht3x_read_temperature_and_humidity+0x260>
90003cd0:	f89d 300d 	ldrb.w	r3, [sp, #13]
90003cd4:	4293      	cmp	r3, r2
90003cd6:	d007      	beq.n	90003ce8 <sht3x_read_temperature_and_humidity+0x270>
		return false;
90003cd8:	2000      	movs	r0, #0

	*temperature = -45.0f + 175.0f * (float)temperature_raw / 65535.0f;
	*humidity = 100.0f * (float)humidity_raw / 65535.0f;

	return true;
}
90003cda:	b005      	add	sp, #20
90003cdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
				crc = (uint8_t)((uint8_t)(crc << 1u) ^ 0x31u);
90003cde:	0050      	lsls	r0, r2, #1
90003ce0:	b2c0      	uxtb	r0, r0
90003ce2:	f080 0031 	eor.w	r0, r0, #49	; 0x31
90003ce6:	e7c9      	b.n	90003c7c <sht3x_read_temperature_and_humidity+0x204>
	int16_t temperature_raw = (int16_t)uint8_to_uint16(buffer[0], buffer[1]);
90003ce8:	f8bd 2008 	ldrh.w	r2, [sp, #8]
	return true;
90003cec:	2001      	movs	r0, #1
90003cee:	f8bd 300b 	ldrh.w	r3, [sp, #11]
	*temperature = -45.0f + 175.0f * (float)temperature_raw / 65535.0f;
90003cf2:	bad2      	revsh	r2, r2
90003cf4:	ed9f 5a10 	vldr	s10, [pc, #64]	; 90003d38 <sht3x_read_temperature_and_humidity+0x2c0>
90003cf8:	ba5b      	rev16	r3, r3
90003cfa:	ed9f 6a10 	vldr	s12, [pc, #64]	; 90003d3c <sht3x_read_temperature_and_humidity+0x2c4>
90003cfe:	ee07 2a10 	vmov	s14, r2
	*humidity = 100.0f * (float)humidity_raw / 65535.0f;
90003d02:	eddf 6a0f 	vldr	s13, [pc, #60]	; 90003d40 <sht3x_read_temperature_and_humidity+0x2c8>
90003d06:	b29b      	uxth	r3, r3
	*temperature = -45.0f + 175.0f * (float)temperature_raw / 65535.0f;
90003d08:	eddf 5a0e 	vldr	s11, [pc, #56]	; 90003d44 <sht3x_read_temperature_and_humidity+0x2cc>
90003d0c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
90003d10:	ee07 3a90 	vmov	s15, r3
90003d14:	ee27 7a05 	vmul.f32	s14, s14, s10
	*humidity = 100.0f * (float)humidity_raw / 65535.0f;
90003d18:	eef8 7a67 	vcvt.f32.u32	s15, s15
90003d1c:	ee67 7aa6 	vmul.f32	s15, s15, s13
	*temperature = -45.0f + 175.0f * (float)temperature_raw / 65535.0f;
90003d20:	eec7 6a06 	vdiv.f32	s13, s14, s12
	*humidity = 100.0f * (float)humidity_raw / 65535.0f;
90003d24:	ee87 7a86 	vdiv.f32	s14, s15, s12
	*temperature = -45.0f + 175.0f * (float)temperature_raw / 65535.0f;
90003d28:	ee76 7ae5 	vsub.f32	s15, s13, s11
90003d2c:	edc5 7a00 	vstr	s15, [r5]
	*humidity = 100.0f * (float)humidity_raw / 65535.0f;
90003d30:	ed84 7a00 	vstr	s14, [r4]
}
90003d34:	b005      	add	sp, #20
90003d36:	bdf0      	pop	{r4, r5, r6, r7, pc}
90003d38:	432f0000 	.word	0x432f0000
90003d3c:	477fff00 	.word	0x477fff00
90003d40:	42c80000 	.word	0x42c80000
90003d44:	42340000 	.word	0x42340000

90003d48 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
90003d48:	4b0b      	ldr	r3, [pc, #44]	; (90003d78 <HAL_MspInit+0x30>)

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
90003d4a:	2200      	movs	r2, #0
90003d4c:	210f      	movs	r1, #15
90003d4e:	f06f 0001 	mvn.w	r0, #1
{
90003d52:	b410      	push	{r4}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
90003d54:	f8d3 40f4 	ldr.w	r4, [r3, #244]	; 0xf4
{
90003d58:	b083      	sub	sp, #12
  __HAL_RCC_SYSCFG_CLK_ENABLE();
90003d5a:	f044 0402 	orr.w	r4, r4, #2
90003d5e:	f8c3 40f4 	str.w	r4, [r3, #244]	; 0xf4
90003d62:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
90003d66:	f003 0302 	and.w	r3, r3, #2
90003d6a:	9301      	str	r3, [sp, #4]
90003d6c:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
90003d6e:	b003      	add	sp, #12
90003d70:	f85d 4b04 	ldr.w	r4, [sp], #4
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
90003d74:	f002 ba52 	b.w	9000621c <HAL_NVIC_SetPriority>
90003d78:	58024400 	.word	0x58024400

90003d7c <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
90003d7c:	4b0a      	ldr	r3, [pc, #40]	; (90003da8 <HAL_CRC_MspInit+0x2c>)
90003d7e:	6802      	ldr	r2, [r0, #0]
90003d80:	429a      	cmp	r2, r3
90003d82:	d000      	beq.n	90003d86 <HAL_CRC_MspInit+0xa>
90003d84:	4770      	bx	lr
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
90003d86:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
{
90003d8a:	b082      	sub	sp, #8
    __HAL_RCC_CRC_CLK_ENABLE();
90003d8c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
90003d90:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
90003d94:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
90003d98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90003d9c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
90003da0:	9301      	str	r3, [sp, #4]
90003da2:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
90003da4:	b002      	add	sp, #8
90003da6:	4770      	bx	lr
90003da8:	58024c00 	.word	0x58024c00

90003dac <HAL_DMA2D_MspInit>:
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
  if(hdma2d->Instance==DMA2D)
90003dac:	4b0f      	ldr	r3, [pc, #60]	; (90003dec <HAL_DMA2D_MspInit+0x40>)
90003dae:	6802      	ldr	r2, [r0, #0]
90003db0:	429a      	cmp	r2, r3
90003db2:	d000      	beq.n	90003db6 <HAL_DMA2D_MspInit+0xa>
90003db4:	4770      	bx	lr
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
90003db6:	4b0e      	ldr	r3, [pc, #56]	; (90003df0 <HAL_DMA2D_MspInit+0x44>)
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
90003db8:	205a      	movs	r0, #90	; 0x5a
90003dba:	2200      	movs	r2, #0
90003dbc:	2105      	movs	r1, #5
{
90003dbe:	b510      	push	{r4, lr}
    __HAL_RCC_DMA2D_CLK_ENABLE();
90003dc0:	f8d3 40d4 	ldr.w	r4, [r3, #212]	; 0xd4
{
90003dc4:	b082      	sub	sp, #8
    __HAL_RCC_DMA2D_CLK_ENABLE();
90003dc6:	f044 0410 	orr.w	r4, r4, #16
90003dca:	f8c3 40d4 	str.w	r4, [r3, #212]	; 0xd4
90003dce:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
90003dd2:	f003 0310 	and.w	r3, r3, #16
90003dd6:	9301      	str	r3, [sp, #4]
90003dd8:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
90003dda:	f002 fa1f 	bl	9000621c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
90003dde:	205a      	movs	r0, #90	; 0x5a
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
90003de0:	b002      	add	sp, #8
90003de2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
90003de6:	f002 ba57 	b.w	90006298 <HAL_NVIC_EnableIRQ>
90003dea:	bf00      	nop
90003dec:	52001000 	.word	0x52001000
90003df0:	58024400 	.word	0x58024400
90003df4:	00000000 	.word	0x00000000

90003df8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
90003df8:	b510      	push	{r4, lr}
90003dfa:	b0b8      	sub	sp, #224	; 0xe0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
90003dfc:	2100      	movs	r1, #0
{
90003dfe:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
90003e00:	22c0      	movs	r2, #192	; 0xc0
90003e02:	a808      	add	r0, sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
90003e04:	9106      	str	r1, [sp, #24]
90003e06:	e9cd 1102 	strd	r1, r1, [sp, #8]
90003e0a:	e9cd 1104 	strd	r1, r1, [sp, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
90003e0e:	f020 fc47 	bl	900246a0 <memset>
  if(hi2c->Instance==I2C4)
90003e12:	4b1f      	ldr	r3, [pc, #124]	; (90003e90 <HAL_I2C_MspInit+0x98>)
90003e14:	6822      	ldr	r2, [r4, #0]
90003e16:	429a      	cmp	r2, r3
90003e18:	d001      	beq.n	90003e1e <HAL_I2C_MspInit+0x26>
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
90003e1a:	b038      	add	sp, #224	; 0xe0
90003e1c:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
90003e1e:	2210      	movs	r2, #16
90003e20:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
90003e22:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
90003e24:	e9cd 2308 	strd	r2, r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
90003e28:	f006 ff64 	bl	9000acf4 <HAL_RCCEx_PeriphCLKConfig>
90003e2c:	bb40      	cbnz	r0, 90003e80 <HAL_I2C_MspInit+0x88>
    __HAL_RCC_GPIOD_CLK_ENABLE();
90003e2e:	4c19      	ldr	r4, [pc, #100]	; (90003e94 <HAL_I2C_MspInit+0x9c>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
90003e30:	2204      	movs	r2, #4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
90003e32:	a902      	add	r1, sp, #8
90003e34:	4818      	ldr	r0, [pc, #96]	; (90003e98 <HAL_I2C_MspInit+0xa0>)
    __HAL_RCC_GPIOD_CLK_ENABLE();
90003e36:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
90003e3a:	f043 0308 	orr.w	r3, r3, #8
90003e3e:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
90003e42:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
90003e46:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Pin = I2C_Clock_Pin|I2C_Data_Pin;
90003e48:	2200      	movs	r2, #0
    __HAL_RCC_GPIOD_CLK_ENABLE();
90003e4a:	f003 0308 	and.w	r3, r3, #8
    GPIO_InitStruct.Pin = I2C_Clock_Pin|I2C_Data_Pin;
90003e4e:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 90003e88 <HAL_I2C_MspInit+0x90>
    __HAL_RCC_GPIOD_CLK_ENABLE();
90003e52:	9300      	str	r3, [sp, #0]
90003e54:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = I2C_Clock_Pin|I2C_Data_Pin;
90003e56:	2300      	movs	r3, #0
90003e58:	ed8d 7b02 	vstr	d7, [sp, #8]
90003e5c:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
90003e60:	f002 fe8a 	bl	90006b78 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
90003e64:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
90003e68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
90003e6c:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
90003e70:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
90003e74:	f003 0380 	and.w	r3, r3, #128	; 0x80
90003e78:	9301      	str	r3, [sp, #4]
90003e7a:	9b01      	ldr	r3, [sp, #4]
}
90003e7c:	b038      	add	sp, #224	; 0xe0
90003e7e:	bd10      	pop	{r4, pc}
      Error_Handler();
90003e80:	f7ff fdf8 	bl	90003a74 <Error_Handler>
90003e84:	e7d3      	b.n	90003e2e <HAL_I2C_MspInit+0x36>
90003e86:	bf00      	nop
90003e88:	00003000 	.word	0x00003000
90003e8c:	00000012 	.word	0x00000012
90003e90:	58001c00 	.word	0x58001c00
90003e94:	58024400 	.word	0x58024400
90003e98:	58020c00 	.word	0x58020c00

90003e9c <HAL_I2C_MspDeInit>:
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
  if(hi2c->Instance==I2C4)
90003e9c:	6802      	ldr	r2, [r0, #0]
{
90003e9e:	b508      	push	{r3, lr}
  if(hi2c->Instance==I2C4)
90003ea0:	4b0b      	ldr	r3, [pc, #44]	; (90003ed0 <HAL_I2C_MspDeInit+0x34>)
90003ea2:	429a      	cmp	r2, r3
90003ea4:	d000      	beq.n	90003ea8 <HAL_I2C_MspDeInit+0xc>
  /* USER CODE BEGIN I2C4_MspDeInit 1 */

  /* USER CODE END I2C4_MspDeInit 1 */
  }

}
90003ea6:	bd08      	pop	{r3, pc}
    __HAL_RCC_I2C4_CLK_DISABLE();
90003ea8:	4a0a      	ldr	r2, [pc, #40]	; (90003ed4 <HAL_I2C_MspDeInit+0x38>)
    HAL_GPIO_DeInit(I2C_Clock_GPIO_Port, I2C_Clock_Pin);
90003eaa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
90003eae:	480a      	ldr	r0, [pc, #40]	; (90003ed8 <HAL_I2C_MspDeInit+0x3c>)
    __HAL_RCC_I2C4_CLK_DISABLE();
90003eb0:	f8d2 30f4 	ldr.w	r3, [r2, #244]	; 0xf4
90003eb4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
90003eb8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
    HAL_GPIO_DeInit(I2C_Clock_GPIO_Port, I2C_Clock_Pin);
90003ebc:	f002 ff8e 	bl	90006ddc <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(I2C_Data_GPIO_Port, I2C_Data_Pin);
90003ec0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
90003ec4:	4804      	ldr	r0, [pc, #16]	; (90003ed8 <HAL_I2C_MspDeInit+0x3c>)
}
90003ec6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_GPIO_DeInit(I2C_Data_GPIO_Port, I2C_Data_Pin);
90003eca:	f002 bf87 	b.w	90006ddc <HAL_GPIO_DeInit>
90003ece:	bf00      	nop
90003ed0:	58001c00 	.word	0x58001c00
90003ed4:	58024400 	.word	0x58024400
90003ed8:	58020c00 	.word	0x58020c00

90003edc <HAL_JPEG_MspInit>:
* @param hjpeg: JPEG handle pointer
* @retval None
*/
void HAL_JPEG_MspInit(JPEG_HandleTypeDef* hjpeg)
{
  if(hjpeg->Instance==JPEG)
90003edc:	4b3f      	ldr	r3, [pc, #252]	; (90003fdc <HAL_JPEG_MspInit+0x100>)
90003ede:	6802      	ldr	r2, [r0, #0]
90003ee0:	429a      	cmp	r2, r3
90003ee2:	d000      	beq.n	90003ee6 <HAL_JPEG_MspInit+0xa>
90003ee4:	4770      	bx	lr
{
90003ee6:	b570      	push	{r4, r5, r6, lr}
  /* USER CODE BEGIN JPEG_MspInit 0 */
	 hmdma_jpeg_infifo_th.Init.Request = MDMA_REQUEST_JPEG_INFIFO_TH;
	 hmdma_jpeg_outfifo_th.Init.Request = MDMA_REQUEST_JPEG_OUTFIFO_TH;
  /* USER CODE END JPEG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_JPEG_CLK_ENABLE();
90003ee8:	4b3d      	ldr	r3, [pc, #244]	; (90003fe0 <HAL_JPEG_MspInit+0x104>)
	 hmdma_jpeg_infifo_th.Init.Request = MDMA_REQUEST_JPEG_INFIFO_TH;
90003eea:	2211      	movs	r2, #17
90003eec:	4e3d      	ldr	r6, [pc, #244]	; (90003fe4 <HAL_JPEG_MspInit+0x108>)
{
90003eee:	b082      	sub	sp, #8
	 hmdma_jpeg_outfifo_th.Init.Request = MDMA_REQUEST_JPEG_OUTFIFO_TH;
90003ef0:	4d3d      	ldr	r5, [pc, #244]	; (90003fe8 <HAL_JPEG_MspInit+0x10c>)
90003ef2:	4604      	mov	r4, r0
	 hmdma_jpeg_infifo_th.Init.Request = MDMA_REQUEST_JPEG_INFIFO_TH;
90003ef4:	6072      	str	r2, [r6, #4]
    hmdma_jpeg_infifo_th.Init.BufferTransferLength = 32;
    hmdma_jpeg_infifo_th.Init.SourceBurst = MDMA_SOURCE_BURST_32BEATS;
    hmdma_jpeg_infifo_th.Init.DestBurst = MDMA_DEST_BURST_16BEATS;
    hmdma_jpeg_infifo_th.Init.SourceBlockAddressOffset = 0;
    hmdma_jpeg_infifo_th.Init.DestBlockAddressOffset = 0;
    if (HAL_MDMA_Init(&hmdma_jpeg_infifo_th) != HAL_OK)
90003ef6:	4630      	mov	r0, r6
    __HAL_RCC_JPEG_CLK_ENABLE();
90003ef8:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
    hmdma_jpeg_infifo_th.Instance = MDMA_Channel7;
90003efc:	493b      	ldr	r1, [pc, #236]	; (90003fec <HAL_JPEG_MspInit+0x110>)
    __HAL_RCC_JPEG_CLK_ENABLE();
90003efe:	f042 0220 	orr.w	r2, r2, #32
90003f02:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
    hmdma_jpeg_infifo_th.Init.Priority = MDMA_PRIORITY_HIGH;
90003f06:	2280      	movs	r2, #128	; 0x80
    __HAL_RCC_JPEG_CLK_ENABLE();
90003f08:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
    hmdma_jpeg_infifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;
90003f0c:	6232      	str	r2, [r6, #32]
    __HAL_RCC_JPEG_CLK_ENABLE();
90003f0e:	f003 0320 	and.w	r3, r3, #32
    hmdma_jpeg_infifo_th.Instance = MDMA_Channel7;
90003f12:	6031      	str	r1, [r6, #0]
    __HAL_RCC_JPEG_CLK_ENABLE();
90003f14:	9301      	str	r3, [sp, #4]
    hmdma_jpeg_infifo_th.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
90003f16:	2300      	movs	r3, #0
    __HAL_RCC_JPEG_CLK_ENABLE();
90003f18:	9901      	ldr	r1, [sp, #4]
    hmdma_jpeg_infifo_th.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
90003f1a:	6133      	str	r3, [r6, #16]
    hmdma_jpeg_infifo_th.Init.Priority = MDMA_PRIORITY_HIGH;
90003f1c:	e9c6 3202 	strd	r3, r2, [r6, #8]
    hmdma_jpeg_infifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
90003f20:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
90003f24:	6272      	str	r2, [r6, #36]	; 0x24
    hmdma_jpeg_infifo_th.Init.BufferTransferLength = 32;
90003f26:	2220      	movs	r2, #32
    hmdma_jpeg_infifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_BYTE;
90003f28:	e9c6 3306 	strd	r3, r3, [r6, #24]
    hmdma_jpeg_infifo_th.Init.DestBlockAddressOffset = 0;
90003f2c:	e9c6 330d 	strd	r3, r3, [r6, #52]	; 0x34
    hmdma_jpeg_infifo_th.Init.BufferTransferLength = 32;
90003f30:	62b2      	str	r2, [r6, #40]	; 0x28
    hmdma_jpeg_infifo_th.Init.DestBurst = MDMA_DEST_BURST_16BEATS;
90003f32:	f44f 3300 	mov.w	r3, #131072	; 0x20000
90003f36:	f44f 42a0 	mov.w	r2, #20480	; 0x5000
90003f3a:	e9c6 230b 	strd	r2, r3, [r6, #44]	; 0x2c
	 hmdma_jpeg_outfifo_th.Init.Request = MDMA_REQUEST_JPEG_OUTFIFO_TH;
90003f3e:	2313      	movs	r3, #19
90003f40:	606b      	str	r3, [r5, #4]
    hmdma_jpeg_infifo_th.Init.SourceInc = MDMA_SRC_INC_BYTE;
90003f42:	2302      	movs	r3, #2
90003f44:	6173      	str	r3, [r6, #20]
    if (HAL_MDMA_Init(&hmdma_jpeg_infifo_th) != HAL_OK)
90003f46:	f005 fd65 	bl	90009a14 <HAL_MDMA_Init>
90003f4a:	2800      	cmp	r0, #0
90003f4c:	d13a      	bne.n	90003fc4 <HAL_JPEG_MspInit+0xe8>
    {
      Error_Handler();
    }

    if (HAL_MDMA_ConfigPostRequestMask(&hmdma_jpeg_infifo_th, 0, 0) != HAL_OK)
90003f4e:	2200      	movs	r2, #0
90003f50:	4824      	ldr	r0, [pc, #144]	; (90003fe4 <HAL_JPEG_MspInit+0x108>)
90003f52:	4611      	mov	r1, r2
90003f54:	f005 fdfc 	bl	90009b50 <HAL_MDMA_ConfigPostRequestMask>
90003f58:	2800      	cmp	r0, #0
90003f5a:	d13c      	bne.n	90003fd6 <HAL_JPEG_MspInit+0xfa>
    hmdma_jpeg_outfifo_th.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
    hmdma_jpeg_outfifo_th.Init.Priority = MDMA_PRIORITY_VERY_HIGH;
    hmdma_jpeg_outfifo_th.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
    hmdma_jpeg_outfifo_th.Init.SourceInc = MDMA_SRC_INC_DISABLE;
    hmdma_jpeg_outfifo_th.Init.DestinationInc = MDMA_DEST_INC_BYTE;
    hmdma_jpeg_outfifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
90003f5c:	2220      	movs	r2, #32
    hmdma_jpeg_outfifo_th.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
90003f5e:	2300      	movs	r3, #0
    __HAL_LINKDMA(hjpeg,hdmain,hmdma_jpeg_infifo_th);
90003f60:	6326      	str	r6, [r4, #48]	; 0x30
    hmdma_jpeg_outfifo_th.Init.Request = MDMA_REQUEST_JPEG_OUTFIFO_TH;
90003f62:	2013      	movs	r0, #19
    hmdma_jpeg_outfifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
90003f64:	61ea      	str	r2, [r5, #28]
    hmdma_jpeg_outfifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_BYTE;
    hmdma_jpeg_outfifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
    hmdma_jpeg_outfifo_th.Init.BufferTransferLength = 32;
90003f66:	62aa      	str	r2, [r5, #40]	; 0x28
    hmdma_jpeg_outfifo_th.Init.SourceBurst = MDMA_SOURCE_BURST_32BEATS;
    hmdma_jpeg_outfifo_th.Init.DestBurst = MDMA_DEST_BURST_32BEATS;
90003f68:	f44f 3220 	mov.w	r2, #163840	; 0x28000
    hmdma_jpeg_outfifo_th.Instance = MDMA_Channel6;
90003f6c:	4920      	ldr	r1, [pc, #128]	; (90003ff0 <HAL_JPEG_MspInit+0x114>)
    hmdma_jpeg_outfifo_th.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
90003f6e:	60ab      	str	r3, [r5, #8]
    hmdma_jpeg_outfifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_BYTE;
90003f70:	622b      	str	r3, [r5, #32]
    hmdma_jpeg_outfifo_th.Init.SourceBlockAddressOffset = 0;
    hmdma_jpeg_outfifo_th.Init.DestBlockAddressOffset = 0;
90003f72:	63ab      	str	r3, [r5, #56]	; 0x38
    __HAL_LINKDMA(hjpeg,hdmain,hmdma_jpeg_infifo_th);
90003f74:	6434      	str	r4, [r6, #64]	; 0x40
    hmdma_jpeg_outfifo_th.Init.DestBurst = MDMA_DEST_BURST_32BEATS;
90003f76:	e9c5 230c 	strd	r2, r3, [r5, #48]	; 0x30
    hmdma_jpeg_outfifo_th.Init.SourceInc = MDMA_SRC_INC_DISABLE;
90003f7a:	e9c5 3304 	strd	r3, r3, [r5, #16]
    hmdma_jpeg_outfifo_th.Init.DestinationInc = MDMA_DEST_INC_BYTE;
90003f7e:	2308      	movs	r3, #8
    hmdma_jpeg_outfifo_th.Init.Priority = MDMA_PRIORITY_VERY_HIGH;
90003f80:	22c0      	movs	r2, #192	; 0xc0
    hmdma_jpeg_outfifo_th.Instance = MDMA_Channel6;
90003f82:	e9c5 1000 	strd	r1, r0, [r5]
    hmdma_jpeg_outfifo_th.Init.DestinationInc = MDMA_DEST_INC_BYTE;
90003f86:	61ab      	str	r3, [r5, #24]
    hmdma_jpeg_outfifo_th.Init.SourceBurst = MDMA_SOURCE_BURST_32BEATS;
90003f88:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
    hmdma_jpeg_outfifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
90003f8c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
    if (HAL_MDMA_Init(&hmdma_jpeg_outfifo_th) != HAL_OK)
90003f90:	4815      	ldr	r0, [pc, #84]	; (90003fe8 <HAL_JPEG_MspInit+0x10c>)
    hmdma_jpeg_outfifo_th.Init.SourceBurst = MDMA_SOURCE_BURST_32BEATS;
90003f92:	62e9      	str	r1, [r5, #44]	; 0x2c
    hmdma_jpeg_outfifo_th.Init.Priority = MDMA_PRIORITY_VERY_HIGH;
90003f94:	60ea      	str	r2, [r5, #12]
    hmdma_jpeg_outfifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
90003f96:	626b      	str	r3, [r5, #36]	; 0x24
    if (HAL_MDMA_Init(&hmdma_jpeg_outfifo_th) != HAL_OK)
90003f98:	f005 fd3c 	bl	90009a14 <HAL_MDMA_Init>
90003f9c:	b9c0      	cbnz	r0, 90003fd0 <HAL_JPEG_MspInit+0xf4>
    {
      Error_Handler();
    }

    if (HAL_MDMA_ConfigPostRequestMask(&hmdma_jpeg_outfifo_th, 0, 0) != HAL_OK)
90003f9e:	2200      	movs	r2, #0
90003fa0:	4811      	ldr	r0, [pc, #68]	; (90003fe8 <HAL_JPEG_MspInit+0x10c>)
90003fa2:	4611      	mov	r1, r2
90003fa4:	f005 fdd4 	bl	90009b50 <HAL_MDMA_ConfigPostRequestMask>
90003fa8:	b978      	cbnz	r0, 90003fca <HAL_JPEG_MspInit+0xee>
    {
      Error_Handler();
    }

    __HAL_LINKDMA(hjpeg,hdmaout,hmdma_jpeg_outfifo_th);
90003faa:	6365      	str	r5, [r4, #52]	; 0x34

    /* JPEG interrupt Init */
    HAL_NVIC_SetPriority(JPEG_IRQn, 5, 0);
90003fac:	2079      	movs	r0, #121	; 0x79
90003fae:	2200      	movs	r2, #0
90003fb0:	2105      	movs	r1, #5
    __HAL_LINKDMA(hjpeg,hdmaout,hmdma_jpeg_outfifo_th);
90003fb2:	642c      	str	r4, [r5, #64]	; 0x40
    HAL_NVIC_SetPriority(JPEG_IRQn, 5, 0);
90003fb4:	f002 f932 	bl	9000621c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(JPEG_IRQn);
90003fb8:	2079      	movs	r0, #121	; 0x79
  /* USER CODE BEGIN JPEG_MspInit 1 */

  /* USER CODE END JPEG_MspInit 1 */
  }

}
90003fba:	b002      	add	sp, #8
90003fbc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_NVIC_EnableIRQ(JPEG_IRQn);
90003fc0:	f002 b96a 	b.w	90006298 <HAL_NVIC_EnableIRQ>
      Error_Handler();
90003fc4:	f7ff fd56 	bl	90003a74 <Error_Handler>
90003fc8:	e7c1      	b.n	90003f4e <HAL_JPEG_MspInit+0x72>
      Error_Handler();
90003fca:	f7ff fd53 	bl	90003a74 <Error_Handler>
90003fce:	e7ec      	b.n	90003faa <HAL_JPEG_MspInit+0xce>
      Error_Handler();
90003fd0:	f7ff fd50 	bl	90003a74 <Error_Handler>
90003fd4:	e7e3      	b.n	90003f9e <HAL_JPEG_MspInit+0xc2>
      Error_Handler();
90003fd6:	f7ff fd4d 	bl	90003a74 <Error_Handler>
90003fda:	e7bf      	b.n	90003f5c <HAL_JPEG_MspInit+0x80>
90003fdc:	52003000 	.word	0x52003000
90003fe0:	58024400 	.word	0x58024400
90003fe4:	24007150 	.word	0x24007150
90003fe8:	240071bc 	.word	0x240071bc
90003fec:	52000200 	.word	0x52000200
90003ff0:	520001c0 	.word	0x520001c0

90003ff4 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
90003ff4:	b570      	push	{r4, r5, r6, lr}
90003ff6:	b0ba      	sub	sp, #232	; 0xe8
  GPIO_InitTypeDef GPIO_InitStruct = {0};
90003ff8:	2100      	movs	r1, #0
{
90003ffa:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
90003ffc:	22c0      	movs	r2, #192	; 0xc0
90003ffe:	a80a      	add	r0, sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
90004000:	9109      	str	r1, [sp, #36]	; 0x24
90004002:	e9cd 1105 	strd	r1, r1, [sp, #20]
90004006:	e9cd 1107 	strd	r1, r1, [sp, #28]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
9000400a:	f020 fb49 	bl	900246a0 <memset>
  if(hltdc->Instance==LTDC)
9000400e:	4b4a      	ldr	r3, [pc, #296]	; (90004138 <HAL_LTDC_MspInit+0x144>)
90004010:	6822      	ldr	r2, [r4, #0]
90004012:	429a      	cmp	r2, r3
90004014:	d001      	beq.n	9000401a <HAL_LTDC_MspInit+0x26>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
90004016:	b03a      	add	sp, #232	; 0xe8
90004018:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInitStruct.PLL3.PLL3P = 2;
9000401a:	2302      	movs	r3, #2
    PeriphClkInitStruct.PLL3.PLL3M = 5;
9000401c:	2205      	movs	r2, #5
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
9000401e:	f04f 5400 	mov.w	r4, #536870912	; 0x20000000
90004022:	2500      	movs	r5, #0
    PeriphClkInitStruct.PLL3.PLL3N = 160;
90004024:	21a0      	movs	r1, #160	; 0xa0
    PeriphClkInitStruct.PLL3.PLL3P = 2;
90004026:	9316      	str	r3, [sp, #88]	; 0x58
    PeriphClkInitStruct.PLL3.PLL3M = 5;
90004028:	9214      	str	r2, [sp, #80]	; 0x50
    PeriphClkInitStruct.PLL3.PLL3R = 93;
9000402a:	225d      	movs	r2, #93	; 0x5d
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
9000402c:	9317      	str	r3, [sp, #92]	; 0x5c
    PeriphClkInitStruct.PLL3.PLL3R = 93;
9000402e:	f44f 6300 	mov.w	r3, #2048	; 0x800
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
90004032:	a80a      	add	r0, sp, #40	; 0x28
    PeriphClkInitStruct.PLL3.PLL3N = 160;
90004034:	9115      	str	r1, [sp, #84]	; 0x54
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
90004036:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
    PeriphClkInitStruct.PLL3.PLL3R = 93;
9000403a:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
9000403e:	f006 fe59 	bl	9000acf4 <HAL_RCCEx_PeriphCLKConfig>
90004042:	2800      	cmp	r0, #0
90004044:	d174      	bne.n	90004130 <HAL_LTDC_MspInit+0x13c>
    __HAL_RCC_LTDC_CLK_ENABLE();
90004046:	4b3d      	ldr	r3, [pc, #244]	; (9000413c <HAL_LTDC_MspInit+0x148>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90004048:	2402      	movs	r4, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
9000404a:	2500      	movs	r5, #0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
9000404c:	260e      	movs	r6, #14
    __HAL_RCC_LTDC_CLK_ENABLE();
9000404e:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
90004052:	a905      	add	r1, sp, #20
90004054:	483a      	ldr	r0, [pc, #232]	; (90004140 <HAL_LTDC_MspInit+0x14c>)
    __HAL_RCC_LTDC_CLK_ENABLE();
90004056:	f042 0208 	orr.w	r2, r2, #8
9000405a:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
9000405e:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
90004062:	f002 0208 	and.w	r2, r2, #8
90004066:	9200      	str	r2, [sp, #0]
90004068:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOK_CLK_ENABLE();
9000406a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
9000406e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
90004072:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
90004076:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
9000407a:	f402 6280 	and.w	r2, r2, #1024	; 0x400
9000407e:	9201      	str	r2, [sp, #4]
90004080:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOI_CLK_ENABLE();
90004082:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
90004086:	f442 7280 	orr.w	r2, r2, #256	; 0x100
9000408a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
9000408e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
90004092:	f402 7280 	and.w	r2, r2, #256	; 0x100
90004096:	9202      	str	r2, [sp, #8]
90004098:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
9000409a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
9000409e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
900040a2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
900040a6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
900040aa:	f402 7200 	and.w	r2, r2, #512	; 0x200
900040ae:	9203      	str	r2, [sp, #12]
900040b0:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOH_CLK_ENABLE();
900040b2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
900040b6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
900040ba:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
900040be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
900040c2:	9408      	str	r4, [sp, #32]
    __HAL_RCC_GPIOH_CLK_ENABLE();
900040c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
900040c8:	9609      	str	r6, [sp, #36]	; 0x24
    __HAL_RCC_GPIOH_CLK_ENABLE();
900040ca:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_3
900040cc:	23fc      	movs	r3, #252	; 0xfc
    __HAL_RCC_GPIOH_CLK_ENABLE();
900040ce:	9a04      	ldr	r2, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_3
900040d0:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
900040d2:	e9cd 4506 	strd	r4, r5, [sp, #24]
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
900040d6:	f002 fd4f 	bl	90006b78 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_9|GPIO_PIN_12
900040da:	f24d 2303 	movw	r3, #53763	; 0xd203
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
900040de:	a905      	add	r1, sp, #20
900040e0:	4818      	ldr	r0, [pc, #96]	; (90004144 <HAL_LTDC_MspInit+0x150>)
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_9|GPIO_PIN_12
900040e2:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
900040e4:	e9cd 4506 	strd	r4, r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
900040e8:	e9cd 4608 	strd	r4, r6, [sp, #32]
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
900040ec:	f002 fd44 	bl	90006b78 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_12|GPIO_PIN_13
900040f0:	f64f 73fb 	movw	r3, #65531	; 0xfffb
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
900040f4:	a905      	add	r1, sp, #20
900040f6:	4814      	ldr	r0, [pc, #80]	; (90004148 <HAL_LTDC_MspInit+0x154>)
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_12|GPIO_PIN_13
900040f8:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
900040fa:	e9cd 4506 	strd	r4, r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
900040fe:	e9cd 4608 	strd	r4, r6, [sp, #32]
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
90004102:	f002 fd39 	bl	90006b78 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
90004106:	f44f 7300 	mov.w	r3, #512	; 0x200
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
9000410a:	a905      	add	r1, sp, #20
9000410c:	480f      	ldr	r0, [pc, #60]	; (9000414c <HAL_LTDC_MspInit+0x158>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
9000410e:	9609      	str	r6, [sp, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_9;
90004110:	e9cd 3405 	strd	r3, r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
90004114:	e9cd 5407 	strd	r5, r4, [sp, #28]
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
90004118:	f002 fd2e 	bl	90006b78 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
9000411c:	462a      	mov	r2, r5
9000411e:	2105      	movs	r1, #5
90004120:	2058      	movs	r0, #88	; 0x58
90004122:	f002 f87b 	bl	9000621c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
90004126:	2058      	movs	r0, #88	; 0x58
90004128:	f002 f8b6 	bl	90006298 <HAL_NVIC_EnableIRQ>
}
9000412c:	b03a      	add	sp, #232	; 0xe8
9000412e:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
90004130:	f7ff fca0 	bl	90003a74 <Error_Handler>
90004134:	e787      	b.n	90004046 <HAL_LTDC_MspInit+0x52>
90004136:	bf00      	nop
90004138:	50001000 	.word	0x50001000
9000413c:	58024400 	.word	0x58024400
90004140:	58022800 	.word	0x58022800
90004144:	58022000 	.word	0x58022000
90004148:	58022400 	.word	0x58022400
9000414c:	58021c00 	.word	0x58021c00

90004150 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
90004150:	b510      	push	{r4, lr}
90004152:	b0b8      	sub	sp, #224	; 0xe0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
90004154:	2100      	movs	r1, #0
{
90004156:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
90004158:	22c0      	movs	r2, #192	; 0xc0
9000415a:	a808      	add	r0, sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
9000415c:	9106      	str	r1, [sp, #24]
9000415e:	e9cd 1102 	strd	r1, r1, [sp, #8]
90004162:	e9cd 1104 	strd	r1, r1, [sp, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
90004166:	f020 fa9b 	bl	900246a0 <memset>
  if(huart->Instance==USART2)
9000416a:	4b25      	ldr	r3, [pc, #148]	; (90004200 <HAL_UART_MspInit+0xb0>)
9000416c:	6822      	ldr	r2, [r4, #0]
9000416e:	429a      	cmp	r2, r3
90004170:	d001      	beq.n	90004176 <HAL_UART_MspInit+0x26>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
90004172:	b038      	add	sp, #224	; 0xe0
90004174:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
90004176:	2202      	movs	r2, #2
90004178:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
9000417a:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
9000417c:	e9cd 2308 	strd	r2, r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
90004180:	f006 fdb8 	bl	9000acf4 <HAL_RCCEx_PeriphCLKConfig>
90004184:	bb80      	cbnz	r0, 900041e8 <HAL_UART_MspInit+0x98>
    __HAL_RCC_USART2_CLK_ENABLE();
90004186:	4b1f      	ldr	r3, [pc, #124]	; (90004204 <HAL_UART_MspInit+0xb4>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
90004188:	2407      	movs	r4, #7
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
9000418a:	a902      	add	r1, sp, #8
9000418c:	481e      	ldr	r0, [pc, #120]	; (90004208 <HAL_UART_MspInit+0xb8>)
    __HAL_RCC_USART2_CLK_ENABLE();
9000418e:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
90004192:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
90004196:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
9000419a:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
9000419e:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
900041a2:	9200      	str	r2, [sp, #0]
900041a4:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
900041a6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
900041aa:	f042 0208 	orr.w	r2, r2, #8
    GPIO_InitStruct.Pin = USRT_TX_Pin|USRT_RX_Pin;
900041ae:	ed9f 7b10 	vldr	d7, [pc, #64]	; 900041f0 <HAL_UART_MspInit+0xa0>
    __HAL_RCC_GPIOD_CLK_ENABLE();
900041b2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
900041b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
900041ba:	9406      	str	r4, [sp, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
900041bc:	f003 0308 	and.w	r3, r3, #8
    GPIO_InitStruct.Pin = USRT_TX_Pin|USRT_RX_Pin;
900041c0:	ed8d 7b02 	vstr	d7, [sp, #8]
900041c4:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 900041f8 <HAL_UART_MspInit+0xa8>
    __HAL_RCC_GPIOD_CLK_ENABLE();
900041c8:	9301      	str	r3, [sp, #4]
900041ca:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = USRT_TX_Pin|USRT_RX_Pin;
900041cc:	ed8d 7b04 	vstr	d7, [sp, #16]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
900041d0:	f002 fcd2 	bl	90006b78 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
900041d4:	2200      	movs	r2, #0
900041d6:	2105      	movs	r1, #5
900041d8:	2026      	movs	r0, #38	; 0x26
900041da:	f002 f81f 	bl	9000621c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
900041de:	2026      	movs	r0, #38	; 0x26
900041e0:	f002 f85a 	bl	90006298 <HAL_NVIC_EnableIRQ>
}
900041e4:	b038      	add	sp, #224	; 0xe0
900041e6:	bd10      	pop	{r4, pc}
      Error_Handler();
900041e8:	f7ff fc44 	bl	90003a74 <Error_Handler>
900041ec:	e7cb      	b.n	90004186 <HAL_UART_MspInit+0x36>
900041ee:	bf00      	nop
900041f0:	00000060 	.word	0x00000060
900041f4:	00000002 	.word	0x00000002
900041f8:	00000001 	.word	0x00000001
900041fc:	00000000 	.word	0x00000000
90004200:	40004400 	.word	0x40004400
90004204:	58024400 	.word	0x58024400
90004208:	58020c00 	.word	0x58020c00

9000420c <HAL_SDRAM_MspInit>:
static void HAL_FMC_MspInit(void){
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
  if (FMC_Initialized) {
9000420c:	4836      	ldr	r0, [pc, #216]	; (900042e8 <HAL_SDRAM_MspInit+0xdc>)
  GPIO_InitTypeDef GPIO_InitStruct ={0};
9000420e:	2300      	movs	r3, #0
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
90004210:	b5d0      	push	{r4, r6, r7, lr}
  if (FMC_Initialized) {
90004212:	6801      	ldr	r1, [r0, #0]
void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
90004214:	b0b8      	sub	sp, #224	; 0xe0
  GPIO_InitTypeDef GPIO_InitStruct ={0};
90004216:	e9cd 3302 	strd	r3, r3, [sp, #8]
9000421a:	e9cd 3304 	strd	r3, r3, [sp, #16]
9000421e:	9306      	str	r3, [sp, #24]
  if (FMC_Initialized) {
90004220:	b109      	cbz	r1, 90004226 <HAL_SDRAM_MspInit+0x1a>
  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
90004222:	b038      	add	sp, #224	; 0xe0
90004224:	bdd0      	pop	{r4, r6, r7, pc}
  FMC_Initialized = 1;
90004226:	2301      	movs	r3, #1
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
90004228:	22b8      	movs	r2, #184	; 0xb8
  FMC_Initialized = 1;
9000422a:	6003      	str	r3, [r0, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
9000422c:	a80a      	add	r0, sp, #40	; 0x28
9000422e:	f020 fa37 	bl	900246a0 <memset>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
90004232:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
90004236:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
90004238:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
9000423a:	e9cd 2308 	strd	r2, r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
9000423e:	f006 fd59 	bl	9000acf4 <HAL_RCCEx_PeriphCLKConfig>
90004242:	2800      	cmp	r0, #0
90004244:	d14c      	bne.n	900042e0 <HAL_SDRAM_MspInit+0xd4>
  __HAL_RCC_FMC_CLK_ENABLE();
90004246:	4b29      	ldr	r3, [pc, #164]	; (900042ec <HAL_SDRAM_MspInit+0xe0>)
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
90004248:	f64f 7083 	movw	r0, #65411	; 0xff83
9000424c:	2102      	movs	r1, #2
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
9000424e:	240c      	movs	r4, #12
  __HAL_RCC_FMC_CLK_ENABLE();
90004250:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
90004254:	2600      	movs	r6, #0
90004256:	2703      	movs	r7, #3
  __HAL_RCC_FMC_CLK_ENABLE();
90004258:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
9000425c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
90004260:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
90004264:	9406      	str	r4, [sp, #24]
  __HAL_RCC_FMC_CLK_ENABLE();
90004266:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
9000426a:	e9cd 0102 	strd	r0, r1, [sp, #8]
  __HAL_RCC_FMC_CLK_ENABLE();
9000426e:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
90004270:	a902      	add	r1, sp, #8
90004272:	481f      	ldr	r0, [pc, #124]	; (900042f0 <HAL_SDRAM_MspInit+0xe4>)
  __HAL_RCC_FMC_CLK_ENABLE();
90004274:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
90004276:	e9cd 6704 	strd	r6, r7, [sp, #16]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
9000427a:	f002 fc7d 	bl	90006b78 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
9000427e:	f248 1233 	movw	r2, #33075	; 0x8133
90004282:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
90004284:	a902      	add	r1, sp, #8
90004286:	481b      	ldr	r0, [pc, #108]	; (900042f4 <HAL_SDRAM_MspInit+0xe8>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
90004288:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
9000428a:	e9cd 2302 	strd	r2, r3, [sp, #8]
9000428e:	e9cd 6704 	strd	r6, r7, [sp, #16]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
90004292:	f002 fc71 	bl	90006b78 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
90004296:	f24c 7203 	movw	r2, #50947	; 0xc703
9000429a:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
9000429c:	a902      	add	r1, sp, #8
9000429e:	4816      	ldr	r0, [pc, #88]	; (900042f8 <HAL_SDRAM_MspInit+0xec>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
900042a0:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
900042a2:	e9cd 2302 	strd	r2, r3, [sp, #8]
900042a6:	e9cd 6704 	strd	r6, r7, [sp, #16]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
900042aa:	f002 fc65 	bl	90006b78 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
900042ae:	f64f 023f 	movw	r2, #63551	; 0xf83f
900042b2:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
900042b4:	a902      	add	r1, sp, #8
900042b6:	4811      	ldr	r0, [pc, #68]	; (900042fc <HAL_SDRAM_MspInit+0xf0>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
900042b8:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
900042ba:	e9cd 2302 	strd	r2, r3, [sp, #8]
900042be:	e9cd 6704 	strd	r6, r7, [sp, #16]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
900042c2:	f002 fc59 	bl	90006b78 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
900042c6:	22e0      	movs	r2, #224	; 0xe0
900042c8:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
900042ca:	a902      	add	r1, sp, #8
900042cc:	480c      	ldr	r0, [pc, #48]	; (90004300 <HAL_SDRAM_MspInit+0xf4>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
900042ce:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
900042d0:	e9cd 6704 	strd	r6, r7, [sp, #16]
900042d4:	e9cd 2302 	strd	r2, r3, [sp, #8]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
900042d8:	f002 fc4e 	bl	90006b78 <HAL_GPIO_Init>
}
900042dc:	b038      	add	sp, #224	; 0xe0
900042de:	bdd0      	pop	{r4, r6, r7, pc}
      Error_Handler();
900042e0:	f7ff fbc8 	bl	90003a74 <Error_Handler>
900042e4:	e7af      	b.n	90004246 <HAL_SDRAM_MspInit+0x3a>
900042e6:	bf00      	nop
900042e8:	24007508 	.word	0x24007508
900042ec:	58024400 	.word	0x58024400
900042f0:	58021000 	.word	0x58021000
900042f4:	58021800 	.word	0x58021800
900042f8:	58020c00 	.word	0x58020c00
900042fc:	58021400 	.word	0x58021400
90004300:	58021c00 	.word	0x58021c00

90004304 <HAL_SDRAM_MspDeInit>:

static void HAL_FMC_MspDeInit(void){
  /* USER CODE BEGIN FMC_MspDeInit 0 */

  /* USER CODE END FMC_MspDeInit 0 */
  if (FMC_DeInitialized) {
90004304:	4b13      	ldr	r3, [pc, #76]	; (90004354 <HAL_SDRAM_MspDeInit+0x50>)
90004306:	681a      	ldr	r2, [r3, #0]
90004308:	b102      	cbz	r2, 9000430c <HAL_SDRAM_MspDeInit+0x8>
9000430a:	4770      	bx	lr
  /* USER CODE BEGIN FMC_MspDeInit 1 */

  /* USER CODE END FMC_MspDeInit 1 */
}

void HAL_SDRAM_MspDeInit(SDRAM_HandleTypeDef* hsdram){
9000430c:	b510      	push	{r4, lr}
  __HAL_RCC_FMC_CLK_DISABLE();
9000430e:	4a12      	ldr	r2, [pc, #72]	; (90004358 <HAL_SDRAM_MspDeInit+0x54>)
  FMC_DeInitialized = 1;
90004310:	2401      	movs	r4, #1
  HAL_GPIO_DeInit(GPIOE, GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
90004312:	f64f 7183 	movw	r1, #65411	; 0xff83
90004316:	4811      	ldr	r0, [pc, #68]	; (9000435c <HAL_SDRAM_MspDeInit+0x58>)
  FMC_DeInitialized = 1;
90004318:	601c      	str	r4, [r3, #0]
  __HAL_RCC_FMC_CLK_DISABLE();
9000431a:	f8d2 30d4 	ldr.w	r3, [r2, #212]	; 0xd4
9000431e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
90004322:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
  HAL_GPIO_DeInit(GPIOE, GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
90004326:	f002 fd59 	bl	90006ddc <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOG, GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
9000432a:	f248 1133 	movw	r1, #33075	; 0x8133
9000432e:	480c      	ldr	r0, [pc, #48]	; (90004360 <HAL_SDRAM_MspDeInit+0x5c>)
90004330:	f002 fd54 	bl	90006ddc <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOD, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
90004334:	f24c 7103 	movw	r1, #50947	; 0xc703
90004338:	480a      	ldr	r0, [pc, #40]	; (90004364 <HAL_SDRAM_MspDeInit+0x60>)
9000433a:	f002 fd4f 	bl	90006ddc <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOF, GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
9000433e:	f64f 013f 	movw	r1, #63551	; 0xf83f
90004342:	4809      	ldr	r0, [pc, #36]	; (90004368 <HAL_SDRAM_MspDeInit+0x64>)
90004344:	f002 fd4a 	bl	90006ddc <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOH, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7);
90004348:	21e0      	movs	r1, #224	; 0xe0
9000434a:	4808      	ldr	r0, [pc, #32]	; (9000436c <HAL_SDRAM_MspDeInit+0x68>)
  /* USER CODE END SDRAM_MspDeInit 0 */
  HAL_FMC_MspDeInit();
  /* USER CODE BEGIN SDRAM_MspDeInit 1 */

  /* USER CODE END SDRAM_MspDeInit 1 */
}
9000434c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_GPIO_DeInit(GPIOH, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7);
90004350:	f002 bd44 	b.w	90006ddc <HAL_GPIO_DeInit>
90004354:	24007504 	.word	0x24007504
90004358:	58024400 	.word	0x58024400
9000435c:	58021000 	.word	0x58021000
90004360:	58021800 	.word	0x58021800
90004364:	58020c00 	.word	0x58020c00
90004368:	58021400 	.word	0x58021400
9000436c:	58021c00 	.word	0x58021c00

90004370 <HAL_InitTick>:
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
90004370:	280f      	cmp	r0, #15
90004372:	d901      	bls.n	90004378 <HAL_InitTick+0x8>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
    uwTickPrio = TickPriority;
    }
  else
  {
    return HAL_ERROR;
90004374:	2001      	movs	r0, #1
    return HAL_TIM_Base_Start_IT(&htim6);
  }

  /* Return function status */
  return HAL_ERROR;
}
90004376:	4770      	bx	lr
{
90004378:	b530      	push	{r4, r5, lr}
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
9000437a:	4601      	mov	r1, r0
{
9000437c:	b08b      	sub	sp, #44	; 0x2c
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
9000437e:	2200      	movs	r2, #0
90004380:	4604      	mov	r4, r0
90004382:	2036      	movs	r0, #54	; 0x36
90004384:	f001 ff4a 	bl	9000621c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
90004388:	2036      	movs	r0, #54	; 0x36
9000438a:	f001 ff85 	bl	90006298 <HAL_NVIC_EnableIRQ>
  __HAL_RCC_TIM6_CLK_ENABLE();
9000438e:	4b1a      	ldr	r3, [pc, #104]	; (900043f8 <HAL_InitTick+0x88>)
    uwTickPrio = TickPriority;
90004390:	4a1a      	ldr	r2, [pc, #104]	; (900043fc <HAL_InitTick+0x8c>)
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
90004392:	4669      	mov	r1, sp
90004394:	a802      	add	r0, sp, #8
    uwTickPrio = TickPriority;
90004396:	6014      	str	r4, [r2, #0]
  __HAL_RCC_TIM6_CLK_ENABLE();
90004398:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
9000439c:	f042 0210 	orr.w	r2, r2, #16
900043a0:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
900043a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
900043a8:	f003 0310 	and.w	r3, r3, #16
900043ac:	9301      	str	r3, [sp, #4]
900043ae:	9b01      	ldr	r3, [sp, #4]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
900043b0:	f006 fb80 	bl	9000aab4 <HAL_RCC_GetClockConfig>
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
900043b4:	9b07      	ldr	r3, [sp, #28]
900043b6:	b9bb      	cbnz	r3, 900043e8 <HAL_InitTick+0x78>
    uwTimclock = HAL_RCC_GetPCLK1Freq();
900043b8:	f006 faec 	bl	9000a994 <HAL_RCC_GetPCLK1Freq>
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
900043bc:	4b10      	ldr	r3, [pc, #64]	; (90004400 <HAL_InitTick+0x90>)
  htim6.Init.ClockDivision = 0;
900043be:	2200      	movs	r2, #0
  htim6.Instance = TIM6;
900043c0:	4c10      	ldr	r4, [pc, #64]	; (90004404 <HAL_InitTick+0x94>)
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
900043c2:	fba3 1300 	umull	r1, r3, r3, r0
  htim6.Instance = TIM6;
900043c6:	4d10      	ldr	r5, [pc, #64]	; (90004408 <HAL_InitTick+0x98>)
  htim6.Init.Period = (1000000U / 1000U) - 1U;
900043c8:	f240 31e7 	movw	r1, #999	; 0x3e7
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
900043cc:	4620      	mov	r0, r4
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
900043ce:	0c9b      	lsrs	r3, r3, #18
  htim6.Instance = TIM6;
900043d0:	6025      	str	r5, [r4, #0]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
900043d2:	60a2      	str	r2, [r4, #8]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
900043d4:	3b01      	subs	r3, #1
  htim6.Init.Period = (1000000U / 1000U) - 1U;
900043d6:	e9c4 1203 	strd	r1, r2, [r4, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
900043da:	6063      	str	r3, [r4, #4]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
900043dc:	f007 fc66 	bl	9000bcac <HAL_TIM_Base_Init>
900043e0:	b130      	cbz	r0, 900043f0 <HAL_InitTick+0x80>
    return HAL_ERROR;
900043e2:	2001      	movs	r0, #1
}
900043e4:	b00b      	add	sp, #44	; 0x2c
900043e6:	bd30      	pop	{r4, r5, pc}
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
900043e8:	f006 fad4 	bl	9000a994 <HAL_RCC_GetPCLK1Freq>
900043ec:	0040      	lsls	r0, r0, #1
900043ee:	e7e5      	b.n	900043bc <HAL_InitTick+0x4c>
    return HAL_TIM_Base_Start_IT(&htim6);
900043f0:	4620      	mov	r0, r4
900043f2:	f007 fd11 	bl	9000be18 <HAL_TIM_Base_Start_IT>
900043f6:	e7f5      	b.n	900043e4 <HAL_InitTick+0x74>
900043f8:	58024400 	.word	0x58024400
900043fc:	24000074 	.word	0x24000074
90004400:	431bde83 	.word	0x431bde83
90004404:	2400750c 	.word	0x2400750c
90004408:	40001000 	.word	0x40001000

9000440c <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
9000440c:	4770      	bx	lr
9000440e:	bf00      	nop

90004410 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
90004410:	e7fe      	b.n	90004410 <HardFault_Handler>
90004412:	bf00      	nop

90004414 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
90004414:	e7fe      	b.n	90004414 <MemManage_Handler>
90004416:	bf00      	nop

90004418 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
90004418:	e7fe      	b.n	90004418 <BusFault_Handler>
9000441a:	bf00      	nop

9000441c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
9000441c:	e7fe      	b.n	9000441c <UsageFault_Handler>
9000441e:	bf00      	nop

90004420 <DebugMon_Handler>:
90004420:	4770      	bx	lr
90004422:	bf00      	nop

90004424 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
90004424:	4801      	ldr	r0, [pc, #4]	; (9000442c <USART2_IRQHandler+0x8>)
90004426:	f008 b82d 	b.w	9000c484 <HAL_UART_IRQHandler>
9000442a:	bf00      	nop
9000442c:	2400725c 	.word	0x2400725c

90004430 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
90004430:	4801      	ldr	r0, [pc, #4]	; (90004438 <TIM6_DAC_IRQHandler+0x8>)
90004432:	f007 bd55 	b.w	9000bee0 <HAL_TIM_IRQHandler>
90004436:	bf00      	nop
90004438:	2400750c 	.word	0x2400750c

9000443c <LTDC_IRQHandler>:
void LTDC_IRQHandler(void)
{
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
9000443c:	4801      	ldr	r0, [pc, #4]	; (90004444 <LTDC_IRQHandler+0x8>)
9000443e:	f005 b993 	b.w	90009768 <HAL_LTDC_IRQHandler>
90004442:	bf00      	nop
90004444:	240070a8 	.word	0x240070a8

90004448 <DMA2D_IRQHandler>:
void DMA2D_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
90004448:	4801      	ldr	r0, [pc, #4]	; (90004450 <DMA2D_IRQHandler+0x8>)
9000444a:	f002 ba91 	b.w	90006970 <HAL_DMA2D_IRQHandler>
9000444e:	bf00      	nop
90004450:	24006f94 	.word	0x24006f94

90004454 <JPEG_IRQHandler>:
void JPEG_IRQHandler(void)
{
  /* USER CODE BEGIN JPEG_IRQn 0 */

  /* USER CODE END JPEG_IRQn 0 */
  HAL_JPEG_IRQHandler(&hjpeg);
90004454:	4801      	ldr	r0, [pc, #4]	; (9000445c <JPEG_IRQHandler+0x8>)
90004456:	f005 b873 	b.w	90009540 <HAL_JPEG_IRQHandler>
9000445a:	bf00      	nop
9000445c:	24007050 	.word	0x24007050

90004460 <MDMA_IRQHandler>:
void MDMA_IRQHandler(void)
{
  /* USER CODE BEGIN MDMA_IRQn 0 */

  /* USER CODE END MDMA_IRQn 0 */
  HAL_MDMA_IRQHandler(&hmdma_jpeg_outfifo_th);
90004460:	4804      	ldr	r0, [pc, #16]	; (90004474 <MDMA_IRQHandler+0x14>)
{
90004462:	b508      	push	{r3, lr}
  HAL_MDMA_IRQHandler(&hmdma_jpeg_outfifo_th);
90004464:	f005 fc34 	bl	90009cd0 <HAL_MDMA_IRQHandler>
  HAL_MDMA_IRQHandler(&hmdma_jpeg_infifo_th);
90004468:	4803      	ldr	r0, [pc, #12]	; (90004478 <MDMA_IRQHandler+0x18>)
  /* USER CODE BEGIN MDMA_IRQn 1 */

  /* USER CODE END MDMA_IRQn 1 */
}
9000446a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_MDMA_IRQHandler(&hmdma_jpeg_infifo_th);
9000446e:	f005 bc2f 	b.w	90009cd0 <HAL_MDMA_IRQHandler>
90004472:	bf00      	nop
90004474:	240071bc 	.word	0x240071bc
90004478:	24007150 	.word	0x24007150

9000447c <_getpid>:
}

int _getpid(void)
{
	return 1;
}
9000447c:	2001      	movs	r0, #1
9000447e:	4770      	bx	lr

90004480 <_kill>:

int _kill(int pid, int sig)
{
90004480:	b508      	push	{r3, lr}
	errno = EINVAL;
90004482:	f020 f9db 	bl	9002483c <__errno>
90004486:	2216      	movs	r2, #22
90004488:	4603      	mov	r3, r0
	return -1;
}
9000448a:	f04f 30ff 	mov.w	r0, #4294967295
	errno = EINVAL;
9000448e:	601a      	str	r2, [r3, #0]
}
90004490:	bd08      	pop	{r3, pc}
90004492:	bf00      	nop

90004494 <_exit>:

void _exit (int status)
{
90004494:	b508      	push	{r3, lr}
	errno = EINVAL;
90004496:	f020 f9d1 	bl	9002483c <__errno>
9000449a:	2316      	movs	r3, #22
9000449c:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
9000449e:	e7fe      	b.n	9000449e <_exit+0xa>

900044a0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
900044a0:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
900044a2:	1e16      	subs	r6, r2, #0
900044a4:	dd07      	ble.n	900044b6 <_read+0x16>
900044a6:	460c      	mov	r4, r1
900044a8:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
900044aa:	f3af 8000 	nop.w
900044ae:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
900044b2:	42a5      	cmp	r5, r4
900044b4:	d1f9      	bne.n	900044aa <_read+0xa>
	}

return len;
}
900044b6:	4630      	mov	r0, r6
900044b8:	bd70      	pop	{r4, r5, r6, pc}
900044ba:	bf00      	nop

900044bc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
900044bc:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
900044be:	1e16      	subs	r6, r2, #0
900044c0:	dd07      	ble.n	900044d2 <_write+0x16>
900044c2:	460c      	mov	r4, r1
900044c4:	198d      	adds	r5, r1, r6
	{
		__io_putchar(*ptr++);
900044c6:	f814 0b01 	ldrb.w	r0, [r4], #1
900044ca:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
900044ce:	42ac      	cmp	r4, r5
900044d0:	d1f9      	bne.n	900044c6 <_write+0xa>
	}
	return len;
}
900044d2:	4630      	mov	r0, r6
900044d4:	bd70      	pop	{r4, r5, r6, pc}
900044d6:	bf00      	nop

900044d8 <_close>:

int _close(int file)
{
	return -1;
}
900044d8:	f04f 30ff 	mov.w	r0, #4294967295
900044dc:	4770      	bx	lr
900044de:	bf00      	nop

900044e0 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
900044e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
900044e4:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
900044e6:	604b      	str	r3, [r1, #4]
}
900044e8:	4770      	bx	lr
900044ea:	bf00      	nop

900044ec <_isatty>:

int _isatty(int file)
{
	return 1;
}
900044ec:	2001      	movs	r0, #1
900044ee:	4770      	bx	lr

900044f0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
900044f0:	2000      	movs	r0, #0
900044f2:	4770      	bx	lr

900044f4 <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
900044f4:	490d      	ldr	r1, [pc, #52]	; (9000452c <_sbrk+0x38>)
900044f6:	680a      	ldr	r2, [r1, #0]
{
900044f8:	b508      	push	{r3, lr}
900044fa:	4603      	mov	r3, r0
	if (heap_end == 0)
900044fc:	b132      	cbz	r2, 9000450c <_sbrk+0x18>
		heap_end = &end;

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
900044fe:	4413      	add	r3, r2
90004500:	4668      	mov	r0, sp
90004502:	4283      	cmp	r3, r0
90004504:	d809      	bhi.n	9000451a <_sbrk+0x26>
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
90004506:	4610      	mov	r0, r2
	heap_end += incr;
90004508:	600b      	str	r3, [r1, #0]
}
9000450a:	bd08      	pop	{r3, pc}
		heap_end = &end;
9000450c:	4808      	ldr	r0, [pc, #32]	; (90004530 <_sbrk+0x3c>)
9000450e:	4602      	mov	r2, r0
90004510:	6008      	str	r0, [r1, #0]
	if (heap_end + incr > stack_ptr)
90004512:	4668      	mov	r0, sp
90004514:	4413      	add	r3, r2
90004516:	4283      	cmp	r3, r0
90004518:	d9f5      	bls.n	90004506 <_sbrk+0x12>
		errno = ENOMEM;
9000451a:	f020 f98f 	bl	9002483c <__errno>
9000451e:	230c      	movs	r3, #12
		return (caddr_t) -1;
90004520:	f04f 32ff 	mov.w	r2, #4294967295
		errno = ENOMEM;
90004524:	6003      	str	r3, [r0, #0]
}
90004526:	4610      	mov	r0, r2
90004528:	bd08      	pop	{r3, pc}
9000452a:	bf00      	nop
9000452c:	24007558 	.word	0x24007558
90004530:	24022848 	.word	0x24022848

90004534 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId LARGE = 1;   // verdana_40_4bpp
    static const touchgfx::FontId SMALL = 2;   // verdana_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 3;
};

class ApplicationFontProvider : public touchgfx::FontProvider
90004534:	4770      	bx	lr
90004536:	bf00      	nop

90004538 <_ZN23ApplicationFontProviderD0Ev>:
90004538:	b510      	push	{r4, lr}
9000453a:	4604      	mov	r4, r0
9000453c:	2104      	movs	r1, #4
9000453e:	f01f f98a 	bl	90023856 <_ZdlPvj>
90004542:	4620      	mov	r0, r4
90004544:	bd10      	pop	{r4, pc}
90004546:	bf00      	nop

90004548 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
    switch (typography)
90004548:	2901      	cmp	r1, #1
{
9000454a:	b508      	push	{r3, lr}
    switch (typography)
9000454c:	d004      	beq.n	90004558 <_ZN23ApplicationFontProvider7getFontEt+0x10>
9000454e:	2902      	cmp	r1, #2
90004550:	d00a      	beq.n	90004568 <_ZN23ApplicationFontProvider7getFontEt+0x20>
90004552:	b129      	cbz	r1, 90004560 <_ZN23ApplicationFontProvider7getFontEt+0x18>
90004554:	2000      	movs	r0, #0
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
    default:
        return 0;
    }
}
90004556:	bd08      	pop	{r3, pc}
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
90004558:	f000 fc44 	bl	90004de4 <_ZN17TypedTextDatabase8getFontsEv>
9000455c:	6840      	ldr	r0, [r0, #4]
}
9000455e:	bd08      	pop	{r3, pc}
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
90004560:	f000 fc40 	bl	90004de4 <_ZN17TypedTextDatabase8getFontsEv>
90004564:	6800      	ldr	r0, [r0, #0]
}
90004566:	bd08      	pop	{r3, pc}
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
90004568:	f000 fc3c 	bl	90004de4 <_ZN17TypedTextDatabase8getFontsEv>
9000456c:	6880      	ldr	r0, [r0, #8]
}
9000456e:	bd08      	pop	{r3, pc}

90004570 <_ZN14BitmapDatabase11getInstanceEv>:
namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
    return bitmap_database;
}
90004570:	4800      	ldr	r0, [pc, #0]	; (90004574 <_ZN14BitmapDatabase11getInstanceEv+0x4>)
90004572:	4770      	bx	lr
90004574:	900281ec 	.word	0x900281ec

90004578 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
}
90004578:	2003      	movs	r0, #3
9000457a:	4770      	bx	lr

9000457c <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
    {
        if (unicode == 0)
9000457c:	b169      	cbz	r1, 9000459a <_ZNK8touchgfx4Font8getGlyphEt+0x1e>
        {
            return 0;
        }
        const uint8_t* dummyPixelDataPointer = 0;
        uint8_t bitsPerPixelDummy = 0;
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
9000457e:	6802      	ldr	r2, [r0, #0]
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
90004580:	b530      	push	{r4, r5, lr}
90004582:	b083      	sub	sp, #12
        const uint8_t* dummyPixelDataPointer = 0;
90004584:	2400      	movs	r4, #0
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
90004586:	6895      	ldr	r5, [r2, #8]
90004588:	f10d 0303 	add.w	r3, sp, #3
9000458c:	aa01      	add	r2, sp, #4
        const uint8_t* dummyPixelDataPointer = 0;
9000458e:	9401      	str	r4, [sp, #4]
        uint8_t bitsPerPixelDummy = 0;
90004590:	f88d 4003 	strb.w	r4, [sp, #3]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
90004594:	47a8      	blx	r5
        return glyph;
    }
90004596:	b003      	add	sp, #12
90004598:	bd30      	pop	{r4, r5, pc}
            return 0;
9000459a:	4608      	mov	r0, r1
    }
9000459c:	4770      	bx	lr
9000459e:	bf00      	nop

900045a0 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
    {
        return fallbackCharacter;
    }
900045a0:	89c0      	ldrh	r0, [r0, #14]
900045a2:	4770      	bx	lr

900045a4 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
    {
        return ellipsisCharacter;
    }
900045a4:	8a00      	ldrh	r0, [r0, #16]
900045a6:	4770      	bx	lr

900045a8 <_ZNK8touchgfx4Font11getBaselineEv>:
     *       getHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getBaseline() const
    {
        return baselineHeight;
    }
900045a8:	88c0      	ldrh	r0, [r0, #6]
900045aa:	4770      	bx	lr

900045ac <_ZNK8touchgfx4Font9getHeightEv>:
     * @return The font height.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getHeight() const
    {
        return fontHeight;
    }
900045ac:	8880      	ldrh	r0, [r0, #4]
900045ae:	4770      	bx	lr

900045b0 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
    {
        return bPerPixel;
900045b0:	7a80      	ldrb	r0, [r0, #10]
    }
900045b2:	f000 007f 	and.w	r0, r0, #127	; 0x7f
900045b6:	4770      	bx	lr

900045b8 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
    {
        return bAlignRow;
900045b8:	7a80      	ldrb	r0, [r0, #10]
    }
900045ba:	09c0      	lsrs	r0, r0, #7
900045bc:	4770      	bx	lr
900045be:	bf00      	nop

900045c0 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
    {
        (void)screenId; // Unused variable
    }
900045c0:	4770      	bx	lr
900045c2:	bf00      	nop

900045c4 <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
    {
        redraw = rect;
900045c4:	f500 7398 	add.w	r3, r0, #304	; 0x130
900045c8:	6808      	ldr	r0, [r1, #0]
900045ca:	6849      	ldr	r1, [r1, #4]
900045cc:	c303      	stmia	r3!, {r0, r1}
    }
900045ce:	4770      	bx	lr

900045d0 <_ZN8touchgfx10Transition8tearDownEv>:
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
    {
    }
900045d0:	4770      	bx	lr
900045d2:	bf00      	nop

900045d4 <_ZN8touchgfx10Transition4initEv>:
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
    {
    }
900045d4:	4770      	bx	lr
900045d6:	bf00      	nop

900045d8 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
    {
        screenContainer = &cont;
900045d8:	6041      	str	r1, [r0, #4]
    }
900045da:	4770      	bx	lr

900045dc <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
900045dc:	4770      	bx	lr
900045de:	bf00      	nop

900045e0 <_ZN23FrontendApplicationBase19changeToStartScreenEv>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
900045e0:	4905      	ldr	r1, [pc, #20]	; (900045f8 <_ZN23FrontendApplicationBase19changeToStartScreenEv+0x18>)
900045e2:	2200      	movs	r2, #0
// Screen1

void FrontendApplicationBase::gotoScreen1ScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
900045e4:	f500 73a2 	add.w	r3, r0, #324	; 0x144
900045e8:	f8c0 2150 	str.w	r2, [r0, #336]	; 0x150
900045ec:	f8c0 3140 	str.w	r3, [r0, #320]	; 0x140
900045f0:	e9c0 0152 	strd	r0, r1, [r0, #328]	; 0x148

    virtual void changeToStartScreen()
    {
        gotoScreen1ScreenNoTransition();
    }
900045f4:	4770      	bx	lr
900045f6:	bf00      	nop
900045f8:	90004685 	.word	0x90004685

900045fc <_ZN8touchgfx12NoTransition15handleTickEventEv>:
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
    {
        done = true;
900045fc:	2301      	movs	r3, #1
900045fe:	7203      	strb	r3, [r0, #8]
    }
90004600:	4770      	bx	lr
90004602:	bf00      	nop

90004604 <_ZN8touchgfx12NoTransitionD1Ev>:
class NoTransition : public Transition
90004604:	4770      	bx	lr
90004606:	bf00      	nop

90004608 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
90004608:	4770      	bx	lr
9000460a:	bf00      	nop

9000460c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
    {
        (pobject->*pmemfun)();
9000460c:	68c2      	ldr	r2, [r0, #12]
    virtual void execute()
9000460e:	4603      	mov	r3, r0
        (pobject->*pmemfun)();
90004610:	6841      	ldr	r1, [r0, #4]
90004612:	ea4f 0c62 	mov.w	ip, r2, asr #1
90004616:	eb01 0062 	add.w	r0, r1, r2, asr #1
9000461a:	07d2      	lsls	r2, r2, #31
9000461c:	d401      	bmi.n	90004622 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x16>
9000461e:	689b      	ldr	r3, [r3, #8]
90004620:	4718      	bx	r3
90004622:	f851 200c 	ldr.w	r2, [r1, ip]
90004626:	689b      	ldr	r3, [r3, #8]
90004628:	58d3      	ldr	r3, [r2, r3]
9000462a:	4718      	bx	r3

9000462c <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
    {
        return (pobject != 0) && (pmemfun != 0);
9000462c:	6843      	ldr	r3, [r0, #4]
9000462e:	b13b      	cbz	r3, 90004640 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x14>
90004630:	6883      	ldr	r3, [r0, #8]
90004632:	b10b      	cbz	r3, 90004638 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0xc>
90004634:	2001      	movs	r0, #1
    }
90004636:	4770      	bx	lr
        return (pobject != 0) && (pmemfun != 0);
90004638:	68c0      	ldr	r0, [r0, #12]
9000463a:	f000 0001 	and.w	r0, r0, #1
9000463e:	4770      	bx	lr
90004640:	4618      	mov	r0, r3
90004642:	4770      	bx	lr

90004644 <_ZN8touchgfx12NoTransitionD0Ev>:
90004644:	b510      	push	{r4, lr}
90004646:	4604      	mov	r4, r0
90004648:	210c      	movs	r1, #12
9000464a:	f01f f904 	bl	90023856 <_ZdlPvj>
9000464e:	4620      	mov	r0, r4
90004650:	bd10      	pop	{r4, pc}
90004652:	bf00      	nop

90004654 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
90004654:	b510      	push	{r4, lr}
90004656:	4604      	mov	r4, r0
90004658:	2110      	movs	r1, #16
9000465a:	f01f f8fc 	bl	90023856 <_ZdlPvj>
9000465e:	4620      	mov	r0, r4
90004660:	bd10      	pop	{r4, pc}
90004662:	bf00      	nop

90004664 <_ZN23FrontendApplicationBaseD0Ev>:
    virtual ~FrontendApplicationBase() { }
90004664:	b510      	push	{r4, lr}
90004666:	4604      	mov	r4, r0
90004668:	f44f 71ae 	mov.w	r1, #348	; 0x15c
9000466c:	f01f f8f3 	bl	90023856 <_ZdlPvj>
90004670:	4620      	mov	r0, r4
90004672:	bd10      	pop	{r4, pc}

90004674 <_ZN8touchgfx10Transition10invalidateEv>:
    virtual void invalidate()
90004674:	b510      	push	{r4, lr}
        Application::getInstance()->invalidate();
90004676:	f00e ff55 	bl	90013524 <_ZN8touchgfx11Application11getInstanceEv>
9000467a:	6803      	ldr	r3, [r0, #0]
    }
9000467c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Application::getInstance()->invalidate();
90004680:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
90004682:	4718      	bx	r3

90004684 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv>:
}

void FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl()
{
90004684:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
90004688:	e9d0 4a55 	ldrd	r4, sl, [r0, #340]	; 0x154
{
9000468c:	4607      	mov	r7, r0
9000468e:	b081      	sub	sp, #4
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
90004690:	68a0      	ldr	r0, [r4, #8]
90004692:	6803      	ldr	r3, [r0, #0]
90004694:	6a1b      	ldr	r3, [r3, #32]
90004696:	4798      	blx	r3
90004698:	28a7      	cmp	r0, #167	; 0xa7
9000469a:	f240 80aa 	bls.w	900047f2 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x16e>
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
9000469e:	6860      	ldr	r0, [r4, #4]
900046a0:	6803      	ldr	r3, [r0, #0]
900046a2:	6a1b      	ldr	r3, [r3, #32]
900046a4:	4798      	blx	r3
900046a6:	280f      	cmp	r0, #15
900046a8:	f240 809d 	bls.w	900047e6 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x162>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
900046ac:	68e0      	ldr	r0, [r4, #12]
900046ae:	6803      	ldr	r3, [r0, #0]
900046b0:	6a1b      	ldr	r3, [r3, #32]
900046b2:	4798      	blx	r3
900046b4:	280b      	cmp	r0, #11
900046b6:	f240 80a2 	bls.w	900047fe <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x17a>
    if (*currentTrans)
900046ba:	f8df 9174 	ldr.w	r9, [pc, #372]	; 90004830 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x1ac>
    Application::getInstance()->clearAllTimerWidgets();
900046be:	f00e ff31 	bl	90013524 <_ZN8touchgfx11Application11getInstanceEv>

    /** Clears all currently registered timer widgets. */

    void clearAllTimerWidgets()
    {
        timerWidgets.clear();
900046c2:	3004      	adds	r0, #4
900046c4:	f00e ff53 	bl	9001356e <_ZN8touchgfx11Application12TimerWidgets5clearEv>
    if (*currentTrans)
900046c8:	f8d9 0000 	ldr.w	r0, [r9]
900046cc:	b130      	cbz	r0, 900046dc <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x58>
        (*currentTrans)->tearDown();
900046ce:	6803      	ldr	r3, [r0, #0]
900046d0:	494e      	ldr	r1, [pc, #312]	; (9000480c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x188>)
900046d2:	68da      	ldr	r2, [r3, #12]
900046d4:	428a      	cmp	r2, r1
900046d6:	d17e      	bne.n	900047d6 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x152>
        (*currentTrans)->~Transition();
900046d8:	681b      	ldr	r3, [r3, #0]
900046da:	4798      	blx	r3
    if (*currentScreen)
900046dc:	f8df 8154 	ldr.w	r8, [pc, #340]	; 90004834 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x1b0>
900046e0:	f8d8 0000 	ldr.w	r0, [r8]
900046e4:	2800      	cmp	r0, #0
900046e6:	d063      	beq.n	900047b0 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x12c>
        (*currentScreen)->tearDownScreen();
900046e8:	6803      	ldr	r3, [r0, #0]
900046ea:	695b      	ldr	r3, [r3, #20]
900046ec:	4798      	blx	r3
    if (*currentPresenter)
900046ee:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
900046f2:	2800      	cmp	r0, #0
900046f4:	d057      	beq.n	900047a6 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x122>
        (*currentPresenter)->deactivate();
900046f6:	6803      	ldr	r3, [r0, #0]
900046f8:	685b      	ldr	r3, [r3, #4]
900046fa:	4798      	blx	r3
    if (*currentScreen)
900046fc:	f8d8 0000 	ldr.w	r0, [r8]
90004700:	b110      	cbz	r0, 90004708 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x84>
        (*currentScreen)->~Screen();
90004702:	6803      	ldr	r3, [r0, #0]
90004704:	681b      	ldr	r3, [r3, #0]
90004706:	4798      	blx	r3
    if (*currentPresenter)
90004708:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
9000470c:	b110      	cbz	r0, 90004714 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x90>
        (*currentPresenter)->~Presenter();
9000470e:	6803      	ldr	r3, [r0, #0]
90004710:	689b      	ldr	r3, [r3, #8]
90004712:	4798      	blx	r3

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
90004714:	68e0      	ldr	r0, [r4, #12]
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
    {
        return *static_cast<T*>(element(index));
90004716:	2100      	movs	r1, #0
90004718:	6803      	ldr	r3, [r0, #0]
        : screenContainer(0), done(false)
9000471a:	468b      	mov	fp, r1
9000471c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9000471e:	4798      	blx	r3
90004720:	4b3b      	ldr	r3, [pc, #236]	; (90004810 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x18c>)
90004722:	4605      	mov	r5, r0
90004724:	f8c0 b004 	str.w	fp, [r0, #4]
90004728:	f880 b008 	strb.w	fp, [r0, #8]
9000472c:	4659      	mov	r1, fp
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
9000472e:	68a0      	ldr	r0, [r4, #8]
90004730:	602b      	str	r3, [r5, #0]
90004732:	6803      	ldr	r3, [r0, #0]
90004734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90004736:	4798      	blx	r3
90004738:	4606      	mov	r6, r0
9000473a:	f000 fbcf 	bl	90004edc <_ZN11Screen1ViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
9000473e:	6860      	ldr	r0, [r4, #4]
90004740:	4659      	mov	r1, fp
90004742:	6803      	ldr	r3, [r0, #0]
90004744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90004746:	4798      	blx	r3
90004748:	4604      	mov	r4, r0
9000474a:	4631      	mov	r1, r6
9000474c:	f000 fb9c 	bl	90004e88 <_ZN16Screen1PresenterC1ER11Screen1View>
    *currentTrans = newTransition;
90004750:	f8c9 5000 	str.w	r5, [r9]
    *currentPresenter = newPresenter;
90004754:	f8c7 413c 	str.w	r4, [r7, #316]	; 0x13c
    *currentScreen = newScreen;
90004758:	f8c8 6000 	str.w	r6, [r8]
    model->bind(newPresenter);
9000475c:	2c00      	cmp	r4, #0
9000475e:	d02c      	beq.n	900047ba <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x136>
90004760:	1d23      	adds	r3, r4, #4
public:
    Model();

    void bind(ModelListener* listener)
    {
        modelListener = listener;
90004762:	f8ca 3000 	str.w	r3, [sl]
    newScreen->setupScreen();
90004766:	4630      	mov	r0, r6
90004768:	6833      	ldr	r3, [r6, #0]
    
    virtual ~ModelListener() {}

    void bind(Model* m)
    {
        model = m;
9000476a:	f8c4 a008 	str.w	sl, [r4, #8]
9000476e:	68db      	ldr	r3, [r3, #12]
     *
     * @param [in] newPresenter The specific Presenter to be associated with the View.
     */
    void bind(T& newPresenter)
    {
        presenter = &newPresenter;
90004770:	63f4      	str	r4, [r6, #60]	; 0x3c
90004772:	4798      	blx	r3
    newPresenter->activate();
90004774:	6823      	ldr	r3, [r4, #0]
90004776:	4620      	mov	r0, r4
90004778:	681b      	ldr	r3, [r3, #0]
9000477a:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
9000477c:	4629      	mov	r1, r5
9000477e:	4630      	mov	r0, r6
90004780:	f010 fb9e 	bl	90014ec0 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
90004784:	682b      	ldr	r3, [r5, #0]
90004786:	4923      	ldr	r1, [pc, #140]	; (90004814 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x190>)
90004788:	691a      	ldr	r2, [r3, #16]
9000478a:	428a      	cmp	r2, r1
9000478c:	d117      	bne.n	900047be <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x13a>
    newTransition->invalidate();
9000478e:	695b      	ldr	r3, [r3, #20]
90004790:	4a21      	ldr	r2, [pc, #132]	; (90004818 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x194>)
90004792:	4293      	cmp	r3, r2
90004794:	d11a      	bne.n	900047cc <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x148>
        Application::getInstance()->invalidate();
90004796:	f00e fec5 	bl	90013524 <_ZN8touchgfx11Application11getInstanceEv>
9000479a:	6803      	ldr	r3, [r0, #0]
9000479c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
9000479e:	b001      	add	sp, #4
900047a0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900047a4:	4718      	bx	r3
    if (*currentScreen)
900047a6:	f8d8 0000 	ldr.w	r0, [r8]
900047aa:	2800      	cmp	r0, #0
900047ac:	d1a9      	bne.n	90004702 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x7e>
900047ae:	e7b1      	b.n	90004714 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x90>
    if (*currentPresenter)
900047b0:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
900047b4:	2800      	cmp	r0, #0
900047b6:	d19e      	bne.n	900046f6 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x72>
900047b8:	e7ac      	b.n	90004714 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x90>
    model->bind(newPresenter);
900047ba:	4623      	mov	r3, r4
900047bc:	e7d1      	b.n	90004762 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0xde>
    newTransition->init();
900047be:	4628      	mov	r0, r5
900047c0:	4790      	blx	r2
    newTransition->invalidate();
900047c2:	682b      	ldr	r3, [r5, #0]
900047c4:	4a14      	ldr	r2, [pc, #80]	; (90004818 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x194>)
900047c6:	695b      	ldr	r3, [r3, #20]
900047c8:	4293      	cmp	r3, r2
900047ca:	d0e4      	beq.n	90004796 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x112>
900047cc:	4628      	mov	r0, r5
900047ce:	b001      	add	sp, #4
900047d0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900047d4:	4718      	bx	r3
        (*currentTrans)->tearDown();
900047d6:	4790      	blx	r2
    if (*currentTrans)
900047d8:	f8d9 0000 	ldr.w	r0, [r9]
900047dc:	2800      	cmp	r0, #0
900047de:	f43f af7d 	beq.w	900046dc <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x58>
        (*currentTrans)->~Transition();
900047e2:	6803      	ldr	r3, [r0, #0]
900047e4:	e778      	b.n	900046d8 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x54>
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
900047e6:	4b0d      	ldr	r3, [pc, #52]	; (9000481c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x198>)
900047e8:	21a4      	movs	r1, #164	; 0xa4
900047ea:	4a0d      	ldr	r2, [pc, #52]	; (90004820 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x19c>)
900047ec:	480d      	ldr	r0, [pc, #52]	; (90004824 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x1a0>)
900047ee:	f01f f861 	bl	900238b4 <__assert_func>
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
900047f2:	4b0d      	ldr	r3, [pc, #52]	; (90004828 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x1a4>)
900047f4:	21a3      	movs	r1, #163	; 0xa3
900047f6:	4a0a      	ldr	r2, [pc, #40]	; (90004820 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x19c>)
900047f8:	480a      	ldr	r0, [pc, #40]	; (90004824 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x1a0>)
900047fa:	f01f f85b 	bl	900238b4 <__assert_func>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
900047fe:	4b0b      	ldr	r3, [pc, #44]	; (9000482c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x1a8>)
90004800:	21a5      	movs	r1, #165	; 0xa5
90004802:	4a07      	ldr	r2, [pc, #28]	; (90004820 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x19c>)
90004804:	4807      	ldr	r0, [pc, #28]	; (90004824 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x1a0>)
90004806:	f01f f855 	bl	900238b4 <__assert_func>
9000480a:	bf00      	nop
9000480c:	900045d1 	.word	0x900045d1
90004810:	900285c0 	.word	0x900285c0
90004814:	900045d5 	.word	0x900045d5
90004818:	90004675 	.word	0x90004675
9000481c:	90028404 	.word	0x90028404
90004820:	900282b8 	.word	0x900282b8
90004824:	900283bc 	.word	0x900283bc
90004828:	90028228 	.word	0x90028228
9000482c:	900284a8 	.word	0x900284a8
90004830:	24021c54 	.word	0x24021c54
90004834:	24021c50 	.word	0x24021c50

90004838 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
90004838:	f8d0 3140 	ldr.w	r3, [r0, #320]	; 0x140
9000483c:	b1d3      	cbz	r3, 90004874 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x3c>
9000483e:	681a      	ldr	r2, [r3, #0]
    virtual void handlePendingScreenTransition()
90004840:	b570      	push	{r4, r5, r6, lr}
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
90004842:	68d1      	ldr	r1, [r2, #12]
90004844:	4604      	mov	r4, r0
90004846:	4818      	ldr	r0, [pc, #96]	; (900048a8 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x70>)
90004848:	4281      	cmp	r1, r0
9000484a:	d118      	bne.n	9000487e <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x46>
        return (pobject != 0) && (pmemfun != 0);
9000484c:	6858      	ldr	r0, [r3, #4]
9000484e:	b180      	cbz	r0, 90004872 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x3a>
90004850:	6899      	ldr	r1, [r3, #8]
90004852:	b1e1      	cbz	r1, 9000488e <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x56>
            pendingScreenTransitionCallback->execute();
90004854:	6892      	ldr	r2, [r2, #8]
90004856:	4915      	ldr	r1, [pc, #84]	; (900048ac <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x74>)
90004858:	428a      	cmp	r2, r1
9000485a:	d122      	bne.n	900048a2 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x6a>
        (pobject->*pmemfun)();
9000485c:	68da      	ldr	r2, [r3, #12]
9000485e:	6858      	ldr	r0, [r3, #4]
90004860:	eb00 0062 	add.w	r0, r0, r2, asr #1
90004864:	07d2      	lsls	r2, r2, #31
90004866:	d406      	bmi.n	90004876 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x3e>
90004868:	689b      	ldr	r3, [r3, #8]
9000486a:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
9000486c:	2300      	movs	r3, #0
9000486e:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
    }
90004872:	bd70      	pop	{r4, r5, r6, pc}
90004874:	4770      	bx	lr
90004876:	6899      	ldr	r1, [r3, #8]
90004878:	6803      	ldr	r3, [r0, #0]
9000487a:	585b      	ldr	r3, [r3, r1]
9000487c:	e7f5      	b.n	9000486a <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x32>
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
9000487e:	4618      	mov	r0, r3
90004880:	4788      	blx	r1
90004882:	2800      	cmp	r0, #0
90004884:	d0f5      	beq.n	90004872 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x3a>
            pendingScreenTransitionCallback->execute();
90004886:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
9000488a:	681a      	ldr	r2, [r3, #0]
9000488c:	e7e2      	b.n	90004854 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x1c>
        return (pobject != 0) && (pmemfun != 0);
9000488e:	68dd      	ldr	r5, [r3, #12]
90004890:	07ee      	lsls	r6, r5, #31
90004892:	d5ee      	bpl.n	90004872 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x3a>
90004894:	6892      	ldr	r2, [r2, #8]
90004896:	4e05      	ldr	r6, [pc, #20]	; (900048ac <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x74>)
90004898:	42b2      	cmp	r2, r6
9000489a:	d102      	bne.n	900048a2 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x6a>
        (pobject->*pmemfun)();
9000489c:	eb00 0065 	add.w	r0, r0, r5, asr #1
900048a0:	e7ea      	b.n	90004878 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x40>
900048a2:	4618      	mov	r0, r3
900048a4:	4790      	blx	r2
900048a6:	e7e1      	b.n	9000486c <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x34>
900048a8:	9000462d 	.word	0x9000462d
900048ac:	9000460d 	.word	0x9000460d

900048b0 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
900048b0:	b570      	push	{r4, r5, r6, lr}
900048b2:	4604      	mov	r4, r0
900048b4:	460d      	mov	r5, r1
900048b6:	4616      	mov	r6, r2
          pendingScreenTransitionCallback(0)
900048b8:	f00e fefa 	bl	900136b0 <_ZN8touchgfx11ApplicationC1Ev>
        instance = this;
900048bc:	4a1c      	ldr	r2, [pc, #112]	; (90004930 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x80>)
        : currentPresenter(0),
900048be:	2300      	movs	r3, #0
      frontendHeap(heap),
900048c0:	f8c4 6154 	str.w	r6, [r4, #340]	; 0x154
        instance = this;
900048c4:	6014      	str	r4, [r2, #0]
      model(m)
900048c6:	4a1b      	ldr	r2, [pc, #108]	; (90004934 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x84>)
        return instance;
900048c8:	4e1b      	ldr	r6, [pc, #108]	; (90004938 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x88>)
900048ca:	6022      	str	r2, [r4, #0]
        : pobject(0), pmemfun(0)
900048cc:	4a1b      	ldr	r2, [pc, #108]	; (9000493c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x8c>)
900048ce:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
900048d2:	f8c4 2144 	str.w	r2, [r4, #324]	; 0x144
900048d6:	6832      	ldr	r2, [r6, #0]
900048d8:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
900048dc:	e9c4 3353 	strd	r3, r3, [r4, #332]	; 0x14c
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
900048e0:	6811      	ldr	r1, [r2, #0]
900048e2:	688d      	ldr	r5, [r1, #8]
900048e4:	4916      	ldr	r1, [pc, #88]	; (90004940 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x90>)
900048e6:	428d      	cmp	r5, r1
          pendingScreenTransitionCallback(0)
900048e8:	e9c4 334f 	strd	r3, r3, [r4, #316]	; 0x13c
900048ec:	d11b      	bne.n	90004926 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x76>
        requestedOrientation = orientation;
900048ee:	f44f 7380 	mov.w	r3, #256	; 0x100
900048f2:	f8a2 3078 	strh.w	r3, [r2, #120]	; 0x78
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
900048f6:	f892 3058 	ldrb.w	r3, [r2, #88]	; 0x58
900048fa:	b193      	cbz	r3, 90004922 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x72>
900048fc:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
900048fe:	b180      	cbz	r0, 90004922 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x72>
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
90004900:	f017 fb85 	bl	9001c00e <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>
90004904:	6833      	ldr	r3, [r6, #0]
90004906:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
9000490a:	b12a      	cbz	r2, 90004918 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x68>
9000490c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
9000490e:	b118      	cbz	r0, 90004918 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x68>
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableDecompressorL8_All();
90004910:	f017 fbf8 	bl	9001c104 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_AllEv>
}
90004914:	4620      	mov	r0, r4
90004916:	bd70      	pop	{r4, r5, r6, pc}
        return instance->lcdRef;
90004918:	6898      	ldr	r0, [r3, #8]
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableDecompressorL8_All();
9000491a:	f017 fbf3 	bl	9001c104 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_AllEv>
}
9000491e:	4620      	mov	r0, r4
90004920:	bd70      	pop	{r4, r5, r6, pc}
90004922:	6890      	ldr	r0, [r2, #8]
90004924:	e7ec      	b.n	90004900 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x50>
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
90004926:	4610      	mov	r0, r2
90004928:	4619      	mov	r1, r3
9000492a:	47a8      	blx	r5
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
9000492c:	6832      	ldr	r2, [r6, #0]
9000492e:	e7e2      	b.n	900048f6 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x46>
90004930:	24021c60 	.word	0x24021c60
90004934:	9002856c 	.word	0x9002856c
90004938:	24021c14 	.word	0x24021c14
9000493c:	90028554 	.word	0x90028554
90004940:	9000096d 	.word	0x9000096d

90004944 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
90004944:	4905      	ldr	r1, [pc, #20]	; (9000495c <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv+0x18>)
90004946:	2200      	movs	r2, #0
    pendingScreenTransitionCallback = &transitionCallback;
90004948:	f500 73a2 	add.w	r3, r0, #324	; 0x144
9000494c:	f8c0 2150 	str.w	r2, [r0, #336]	; 0x150
90004950:	f8c0 3140 	str.w	r3, [r0, #320]	; 0x140
90004954:	e9c0 0152 	strd	r0, r1, [r0, #328]	; 0x148
}
90004958:	4770      	bx	lr
9000495a:	bf00      	nop
9000495c:	90004685 	.word	0x90004685

90004960 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
    {
        return gsubTable;
    }
90004960:	6a40      	ldr	r0, [r0, #36]	; 0x24
90004962:	4770      	bx	lr

90004964 <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return arabicTable;
    }
90004964:	6a80      	ldr	r0, [r0, #40]	; 0x28
90004966:	4770      	bx	lr

90004968 <_ZN8touchgfx13GeneratedFontD1Ev>:
class GeneratedFont : public ConstFont
90004968:	4770      	bx	lr
9000496a:	bf00      	nop

9000496c <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:
}

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
9000496c:	888b      	ldrh	r3, [r1, #4]
9000496e:	69c0      	ldr	r0, [r0, #28]
90004970:	0adb      	lsrs	r3, r3, #11
90004972:	680a      	ldr	r2, [r1, #0]
90004974:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
}
90004978:	4410      	add	r0, r2
9000497a:	4770      	bx	lr

9000497c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
    if (!glyph || glyph->kerningTableSize == 0)
9000497c:	b1da      	cbz	r2, 900049b6 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x3a>
{
9000497e:	b510      	push	{r4, lr}
    if (!glyph || glyph->kerningTableSize == 0)
90004980:	7b14      	ldrb	r4, [r2, #12]
90004982:	b1b4      	cbz	r4, 900049b2 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
90004984:	f892 c00d 	ldrb.w	ip, [r2, #13]
90004988:	f892 e00b 	ldrb.w	lr, [r2, #11]
9000498c:	ea4f 220c 	mov.w	r2, ip, lsl #8
    {
        return 0;
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
90004990:	6a03      	ldr	r3, [r0, #32]
90004992:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
90004996:	ea4e 0202 	orr.w	r2, lr, r2
9000499a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
9000499e:	eb03 0084 	add.w	r0, r3, r4, lsl #2
    {
        if (prevChar == kerndata->unicodePrevChar)
900049a2:	881a      	ldrh	r2, [r3, #0]
900049a4:	428a      	cmp	r2, r1
900049a6:	d008      	beq.n	900049ba <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x3e>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
900049a8:	f103 0304 	add.w	r3, r3, #4
        {
            return kerndata->distance;
        }
        if (prevChar < kerndata->unicodePrevChar)
900049ac:	d801      	bhi.n	900049b2 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
900049ae:	4283      	cmp	r3, r0
900049b0:	d1f7      	bne.n	900049a2 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>
        return 0;
900049b2:	2000      	movs	r0, #0
        {
            break;
        }
    }
    return 0;
}
900049b4:	bd10      	pop	{r4, pc}
        return 0;
900049b6:	4610      	mov	r0, r2
}
900049b8:	4770      	bx	lr
            return kerndata->distance;
900049ba:	f993 0002 	ldrsb.w	r0, [r3, #2]
}
900049be:	bd10      	pop	{r4, pc}

900049c0 <_ZN8touchgfx13GeneratedFontD0Ev>:
900049c0:	b510      	push	{r4, lr}
900049c2:	4604      	mov	r4, r0
900049c4:	212c      	movs	r1, #44	; 0x2c
900049c6:	f01e ff46 	bl	90023856 <_ZdlPvj>
900049ca:	4620      	mov	r0, r4
900049cc:	bd10      	pop	{r4, pc}
900049ce:	bf00      	nop

900049d0 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
900049d0:	b530      	push	{r4, r5, lr}
900049d2:	b08b      	sub	sp, #44	; 0x2c
900049d4:	4604      	mov	r4, r0
900049d6:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
      arabicTable(formsTable)
900049da:	9500      	str	r5, [sp, #0]
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
900049dc:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
      arabicTable(formsTable)
900049e0:	9501      	str	r5, [sp, #4]
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
900049e2:	f89d 5040 	ldrb.w	r5, [sp, #64]	; 0x40
      arabicTable(formsTable)
900049e6:	9502      	str	r5, [sp, #8]
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
900049e8:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
      arabicTable(formsTable)
900049ec:	9503      	str	r5, [sp, #12]
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
900049ee:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
      arabicTable(formsTable)
900049f2:	9504      	str	r5, [sp, #16]
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
900049f4:	f89d 504c 	ldrb.w	r5, [sp, #76]	; 0x4c
      arabicTable(formsTable)
900049f8:	9505      	str	r5, [sp, #20]
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
900049fa:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
      arabicTable(formsTable)
900049fe:	9506      	str	r5, [sp, #24]
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
90004a00:	f8bd 505c 	ldrh.w	r5, [sp, #92]	; 0x5c
      arabicTable(formsTable)
90004a04:	9507      	str	r5, [sp, #28]
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
90004a06:	f8bd 5060 	ldrh.w	r5, [sp, #96]	; 0x60
      arabicTable(formsTable)
90004a0a:	9508      	str	r5, [sp, #32]
90004a0c:	f00f feb0 	bl	90014770 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>
      glyphData(glyphDataInternalFlash),
90004a10:	9b15      	ldr	r3, [sp, #84]	; 0x54
}
90004a12:	4620      	mov	r0, r4
      glyphData(glyphDataInternalFlash),
90004a14:	61e3      	str	r3, [r4, #28]
      kerningData(kerningList),
90004a16:	9b16      	ldr	r3, [sp, #88]	; 0x58
90004a18:	6223      	str	r3, [r4, #32]
      gsubTable(gsubData),
90004a1a:	9b19      	ldr	r3, [sp, #100]	; 0x64
90004a1c:	6263      	str	r3, [r4, #36]	; 0x24
      arabicTable(formsTable)
90004a1e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
90004a20:	62a3      	str	r3, [r4, #40]	; 0x28
90004a22:	4b02      	ldr	r3, [pc, #8]	; (90004a2c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x5c>)
90004a24:	6023      	str	r3, [r4, #0]
}
90004a26:	b00b      	add	sp, #44	; 0x2c
90004a28:	bd30      	pop	{r4, r5, pc}
90004a2a:	bf00      	nop
90004a2c:	900285e4 	.word	0x900285e4

90004a30 <_ZN8touchgfx6Screen15afterTransitionEv>:
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
    {
    }
90004a30:	4770      	bx	lr
90004a32:	bf00      	nop

90004a34 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
    {
    }
90004a34:	4770      	bx	lr
90004a36:	bf00      	nop

90004a38 <_ZN8touchgfx6Screen15handleTickEventEv>:
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
    {
    }
90004a38:	4770      	bx	lr
90004a3a:	bf00      	nop

90004a3c <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
    {
        (void)key; // Unused variable
    }
90004a3c:	4770      	bx	lr
90004a3e:	bf00      	nop

90004a40 <_ZN15Screen1ViewBaseD1Ev>:
}

Screen1ViewBase::~Screen1ViewBase()
{

}
90004a40:	4770      	bx	lr
90004a42:	bf00      	nop

90004a44 <_ZN15Screen1ViewBase11setupScreenEv>:

void Screen1ViewBase::setupScreen()
{

}
90004a44:	4770      	bx	lr
90004a46:	bf00      	nop

90004a48 <_ZN15Screen1ViewBaseD0Ev>:
Screen1ViewBase::~Screen1ViewBase()
90004a48:	b510      	push	{r4, lr}
90004a4a:	4604      	mov	r4, r0
}
90004a4c:	21a8      	movs	r1, #168	; 0xa8
90004a4e:	f01e ff02 	bl	90023856 <_ZdlPvj>
90004a52:	4620      	mov	r0, r4
90004a54:	bd10      	pop	{r4, pc}
90004a56:	bf00      	nop

90004a58 <_ZN15Screen1ViewBaseC1Ev>:
Screen1ViewBase::Screen1ViewBase()
90004a58:	b5f0      	push	{r4, r5, r6, r7, lr}
90004a5a:	b087      	sub	sp, #28
90004a5c:	4604      	mov	r4, r0
        : presenter(0)
90004a5e:	f010 f883 	bl	90014b68 <_ZN8touchgfx6ScreenC1Ev>
          touchable(false),
90004a62:	f44f 7380 	mov.w	r3, #256	; 0x100
90004a66:	2500      	movs	r5, #0
90004a68:	4a20      	ldr	r2, [pc, #128]	; (90004aec <_ZN15Screen1ViewBaseC1Ev+0x94>)
90004a6a:	f104 066c 	add.w	r6, r4, #108	; 0x6c
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
        : Widget(), alpha(255), color(0)
90004a6e:	4920      	ldr	r1, [pc, #128]	; (90004af0 <_ZN15Screen1ViewBaseC1Ev+0x98>)
90004a70:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
90004a74:	23ff      	movs	r3, #255	; 0xff
90004a76:	6022      	str	r2, [r4, #0]
90004a78:	4630      	mov	r0, r6
90004a7a:	f884 3066 	strb.w	r3, [r4, #102]	; 0x66
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
    {
        container.add(d);
90004a7e:	1d27      	adds	r7, r4, #4
        : color(col)
90004a80:	66a5      	str	r5, [r4, #104]	; 0x68
90004a82:	e9c4 510f 	strd	r5, r1, [r4, #60]	; 0x3c
        : x(0), y(0), width(0), height(0)
90004a86:	e9c4 5511 	strd	r5, r5, [r4, #68]	; 0x44
90004a8a:	e9c4 5513 	strd	r5, r5, [r4, #76]	; 0x4c
          nextSibling(0),
90004a8e:	e9c4 5515 	strd	r5, r5, [r4, #84]	; 0x54
          cachedAbsX(0),
90004a92:	e9c4 5517 	strd	r5, r5, [r4, #92]	; 0x5c
90004a96:	f00d fce5 	bl	90012464 <_ZN8touchgfx14ButtonWithIconC1Ev>
        rect.x = x;
90004a9a:	4b16      	ldr	r3, [pc, #88]	; (90004af4 <_ZN15Screen1ViewBaseC1Ev+0x9c>)
90004a9c:	f104 0140 	add.w	r1, r4, #64	; 0x40
90004aa0:	4638      	mov	r0, r7
90004aa2:	e9c4 5311 	strd	r5, r3, [r4, #68]	; 0x44
     *
     * @see getColor, Color::getColorFromRGB
     */
    void setColor(colortype newColor)
    {
        color = newColor;
90004aa6:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
90004aaa:	66a3      	str	r3, [r4, #104]	; 0x68
90004aac:	f00c fa4e 	bl	90010f4c <_ZN8touchgfx9Container3addERNS_8DrawableE>
90004ab0:	4a11      	ldr	r2, [pc, #68]	; (90004af8 <_ZN15Screen1ViewBaseC1Ev+0xa0>)
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    Bitmap(const BitmapId id = BITMAP_INVALID)
        : bitmapId(id)
90004ab2:	2301      	movs	r3, #1
    buttonWithIcon1.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_50_MEDIUM_ROUNDED_NORMAL_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_50_MEDIUM_ROUNDED_PRESSED_ID), touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_ACTION_DONE_50_50_E8F6FB_SVG_ID), touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_ACTION_DONE_50_50_E8F6FB_SVG_ID));
90004ab4:	a902      	add	r1, sp, #8
90004ab6:	6722      	str	r2, [r4, #112]	; 0x70
90004ab8:	2202      	movs	r2, #2
90004aba:	f8ad 300c 	strh.w	r3, [sp, #12]
90004abe:	ab05      	add	r3, sp, #20
90004ac0:	4630      	mov	r0, r6
90004ac2:	f8ad 2010 	strh.w	r2, [sp, #16]
90004ac6:	9300      	str	r3, [sp, #0]
90004ac8:	ab04      	add	r3, sp, #16
90004aca:	f8ad 2014 	strh.w	r2, [sp, #20]
90004ace:	aa03      	add	r2, sp, #12
90004ad0:	f8ad 5008 	strh.w	r5, [sp, #8]
90004ad4:	f00d fc21 	bl	9001231a <_ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_S3_S3_>
     * @note The user code must call invalidate() in order to update the button on the display.
     * @note The value set is overwritten on a subsequent call to setBitmaps.
     */
    void setIconX(int16_t x)
    {
        iconX = x;
90004ad8:	2361      	movs	r3, #97	; 0x61
90004ada:	4638      	mov	r0, r7
90004adc:	4631      	mov	r1, r6
90004ade:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
90004ae2:	f00c fa33 	bl	90010f4c <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
90004ae6:	4620      	mov	r0, r4
90004ae8:	b007      	add	sp, #28
90004aea:	bdf0      	pop	{r4, r5, r6, r7, pc}
90004aec:	90028644 	.word	0x90028644
90004af0:	90028d04 	.word	0x90028d04
90004af4:	011001e0 	.word	0x011001e0
90004af8:	006f0078 	.word	0x006f0078

90004afc <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
90004afc:	4770      	bx	lr
90004afe:	bf00      	nop

90004b00 <_Z23getFont_verdana_10_4bppv>:
{
90004b00:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
90004b02:	4d18      	ldr	r5, [pc, #96]	; (90004b64 <_Z23getFont_verdana_10_4bppv+0x64>)
{
90004b04:	b08f      	sub	sp, #60	; 0x3c
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
90004b06:	682c      	ldr	r4, [r5, #0]
90004b08:	f3bf 8f5b 	dmb	ish
90004b0c:	f014 0401 	ands.w	r4, r4, #1
90004b10:	d002      	beq.n	90004b18 <_Z23getFont_verdana_10_4bppv+0x18>
    return verdana_10_4bpp;
}
90004b12:	4815      	ldr	r0, [pc, #84]	; (90004b68 <_Z23getFont_verdana_10_4bppv+0x68>)
90004b14:	b00f      	add	sp, #60	; 0x3c
90004b16:	bd30      	pop	{r4, r5, pc}
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
90004b18:	4628      	mov	r0, r5
90004b1a:	f01e fe9e 	bl	9002385a <__cxa_guard_acquire>
90004b1e:	2800      	cmp	r0, #0
90004b20:	d0f7      	beq.n	90004b12 <_Z23getFont_verdana_10_4bppv+0x12>
90004b22:	213f      	movs	r1, #63	; 0x3f
90004b24:	2201      	movs	r2, #1
90004b26:	230a      	movs	r3, #10
90004b28:	2004      	movs	r0, #4
90004b2a:	9204      	str	r2, [sp, #16]
90004b2c:	9300      	str	r3, [sp, #0]
90004b2e:	9003      	str	r0, [sp, #12]
90004b30:	480d      	ldr	r0, [pc, #52]	; (90004b68 <_Z23getFont_verdana_10_4bppv+0x68>)
90004b32:	e9cd 1409 	strd	r1, r4, [sp, #36]	; 0x24
90004b36:	490d      	ldr	r1, [pc, #52]	; (90004b6c <_Z23getFont_verdana_10_4bppv+0x6c>)
90004b38:	9108      	str	r1, [sp, #32]
90004b3a:	490d      	ldr	r1, [pc, #52]	; (90004b70 <_Z23getFont_verdana_10_4bppv+0x70>)
90004b3c:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
90004b40:	9107      	str	r1, [sp, #28]
90004b42:	490c      	ldr	r1, [pc, #48]	; (90004b74 <_Z23getFont_verdana_10_4bppv+0x74>)
90004b44:	e9cd 4405 	strd	r4, r4, [sp, #20]
90004b48:	e9cd 4401 	strd	r4, r4, [sp, #4]
90004b4c:	f7ff ff40 	bl	900049d0 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
90004b50:	4809      	ldr	r0, [pc, #36]	; (90004b78 <_Z23getFont_verdana_10_4bppv+0x78>)
90004b52:	f01e fecd 	bl	900238f0 <atexit>
90004b56:	4628      	mov	r0, r5
90004b58:	f01e fe8b 	bl	90023872 <__cxa_guard_release>
}
90004b5c:	4802      	ldr	r0, [pc, #8]	; (90004b68 <_Z23getFont_verdana_10_4bppv+0x68>)
90004b5e:	b00f      	add	sp, #60	; 0x3c
90004b60:	bd30      	pop	{r4, r5, pc}
90004b62:	bf00      	nop
90004b64:	2400755c 	.word	0x2400755c
90004b68:	24007560 	.word	0x24007560
90004b6c:	90029554 	.word	0x90029554
90004b70:	90029560 	.word	0x90029560
90004b74:	90200178 	.word	0x90200178
90004b78:	90004afd 	.word	0x90004afd

90004b7c <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
90004b7c:	4770      	bx	lr
90004b7e:	bf00      	nop

90004b80 <_Z23getFont_verdana_20_4bppv>:
{
90004b80:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
90004b82:	4d18      	ldr	r5, [pc, #96]	; (90004be4 <_Z23getFont_verdana_20_4bppv+0x64>)
{
90004b84:	b08f      	sub	sp, #60	; 0x3c
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
90004b86:	682c      	ldr	r4, [r5, #0]
90004b88:	f3bf 8f5b 	dmb	ish
90004b8c:	f014 0401 	ands.w	r4, r4, #1
90004b90:	d002      	beq.n	90004b98 <_Z23getFont_verdana_20_4bppv+0x18>
    return verdana_20_4bpp;
}
90004b92:	4815      	ldr	r0, [pc, #84]	; (90004be8 <_Z23getFont_verdana_20_4bppv+0x68>)
90004b94:	b00f      	add	sp, #60	; 0x3c
90004b96:	bd30      	pop	{r4, r5, pc}
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
90004b98:	4628      	mov	r0, r5
90004b9a:	f01e fe5e 	bl	9002385a <__cxa_guard_acquire>
90004b9e:	2800      	cmp	r0, #0
90004ba0:	d0f7      	beq.n	90004b92 <_Z23getFont_verdana_20_4bppv+0x12>
90004ba2:	213f      	movs	r1, #63	; 0x3f
90004ba4:	2201      	movs	r2, #1
90004ba6:	2314      	movs	r3, #20
90004ba8:	2004      	movs	r0, #4
90004baa:	9204      	str	r2, [sp, #16]
90004bac:	9300      	str	r3, [sp, #0]
90004bae:	9003      	str	r0, [sp, #12]
90004bb0:	480d      	ldr	r0, [pc, #52]	; (90004be8 <_Z23getFont_verdana_20_4bppv+0x68>)
90004bb2:	e9cd 1409 	strd	r1, r4, [sp, #36]	; 0x24
90004bb6:	490d      	ldr	r1, [pc, #52]	; (90004bec <_Z23getFont_verdana_20_4bppv+0x6c>)
90004bb8:	9108      	str	r1, [sp, #32]
90004bba:	490d      	ldr	r1, [pc, #52]	; (90004bf0 <_Z23getFont_verdana_20_4bppv+0x70>)
90004bbc:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
90004bc0:	9107      	str	r1, [sp, #28]
90004bc2:	490c      	ldr	r1, [pc, #48]	; (90004bf4 <_Z23getFont_verdana_20_4bppv+0x74>)
90004bc4:	e9cd 4405 	strd	r4, r4, [sp, #20]
90004bc8:	e9cd 4401 	strd	r4, r4, [sp, #4]
90004bcc:	f7ff ff00 	bl	900049d0 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
90004bd0:	4809      	ldr	r0, [pc, #36]	; (90004bf8 <_Z23getFont_verdana_20_4bppv+0x78>)
90004bd2:	f01e fe8d 	bl	900238f0 <atexit>
90004bd6:	4628      	mov	r0, r5
90004bd8:	f01e fe4b 	bl	90023872 <__cxa_guard_release>
}
90004bdc:	4802      	ldr	r0, [pc, #8]	; (90004be8 <_Z23getFont_verdana_20_4bppv+0x68>)
90004bde:	b00f      	add	sp, #60	; 0x3c
90004be0:	bd30      	pop	{r4, r5, pc}
90004be2:	bf00      	nop
90004be4:	2400758c 	.word	0x2400758c
90004be8:	24007590 	.word	0x24007590
90004bec:	90029558 	.word	0x90029558
90004bf0:	90029564 	.word	0x90029564
90004bf4:	90200188 	.word	0x90200188
90004bf8:	90004b7d 	.word	0x90004b7d

90004bfc <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
90004bfc:	4770      	bx	lr
90004bfe:	bf00      	nop

90004c00 <_Z23getFont_verdana_40_4bppv>:
{
90004c00:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
90004c02:	4d18      	ldr	r5, [pc, #96]	; (90004c64 <_Z23getFont_verdana_40_4bppv+0x64>)
{
90004c04:	b08f      	sub	sp, #60	; 0x3c
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
90004c06:	682c      	ldr	r4, [r5, #0]
90004c08:	f3bf 8f5b 	dmb	ish
90004c0c:	f014 0401 	ands.w	r4, r4, #1
90004c10:	d002      	beq.n	90004c18 <_Z23getFont_verdana_40_4bppv+0x18>
    return verdana_40_4bpp;
}
90004c12:	4815      	ldr	r0, [pc, #84]	; (90004c68 <_Z23getFont_verdana_40_4bppv+0x68>)
90004c14:	b00f      	add	sp, #60	; 0x3c
90004c16:	bd30      	pop	{r4, r5, pc}
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
90004c18:	4628      	mov	r0, r5
90004c1a:	f01e fe1e 	bl	9002385a <__cxa_guard_acquire>
90004c1e:	2800      	cmp	r0, #0
90004c20:	d0f7      	beq.n	90004c12 <_Z23getFont_verdana_40_4bppv+0x12>
90004c22:	213f      	movs	r1, #63	; 0x3f
90004c24:	2201      	movs	r2, #1
90004c26:	2328      	movs	r3, #40	; 0x28
90004c28:	2004      	movs	r0, #4
90004c2a:	9204      	str	r2, [sp, #16]
90004c2c:	9300      	str	r3, [sp, #0]
90004c2e:	9003      	str	r0, [sp, #12]
90004c30:	480d      	ldr	r0, [pc, #52]	; (90004c68 <_Z23getFont_verdana_40_4bppv+0x68>)
90004c32:	e9cd 1409 	strd	r1, r4, [sp, #36]	; 0x24
90004c36:	490d      	ldr	r1, [pc, #52]	; (90004c6c <_Z23getFont_verdana_40_4bppv+0x6c>)
90004c38:	9108      	str	r1, [sp, #32]
90004c3a:	490d      	ldr	r1, [pc, #52]	; (90004c70 <_Z23getFont_verdana_40_4bppv+0x70>)
90004c3c:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
90004c40:	9107      	str	r1, [sp, #28]
90004c42:	490c      	ldr	r1, [pc, #48]	; (90004c74 <_Z23getFont_verdana_40_4bppv+0x74>)
90004c44:	e9cd 4405 	strd	r4, r4, [sp, #20]
90004c48:	e9cd 4401 	strd	r4, r4, [sp, #4]
90004c4c:	f7ff fec0 	bl	900049d0 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
90004c50:	4809      	ldr	r0, [pc, #36]	; (90004c78 <_Z23getFont_verdana_40_4bppv+0x78>)
90004c52:	f01e fe4d 	bl	900238f0 <atexit>
90004c56:	4628      	mov	r0, r5
90004c58:	f01e fe0b 	bl	90023872 <__cxa_guard_release>
}
90004c5c:	4802      	ldr	r0, [pc, #8]	; (90004c68 <_Z23getFont_verdana_40_4bppv+0x68>)
90004c5e:	b00f      	add	sp, #60	; 0x3c
90004c60:	bd30      	pop	{r4, r5, pc}
90004c62:	bf00      	nop
90004c64:	240075bc 	.word	0x240075bc
90004c68:	240075c0 	.word	0x240075c0
90004c6c:	9002955c 	.word	0x9002955c
90004c70:	90029568 	.word	0x90029568
90004c74:	90200198 	.word	0x90200198
90004c78:	90004bfd 	.word	0x90004bfd

90004c7c <_ZNK8touchgfx4Font12getGSUBTableEv>:
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
    {
        return 0;
    }
90004c7c:	2000      	movs	r0, #0
90004c7e:	4770      	bx	lr

90004c80 <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return 0;
    }
90004c80:	2000      	movs	r0, #0
90004c82:	4770      	bx	lr

90004c84 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
90004c84:	b40e      	push	{r1, r2, r3}
90004c86:	b500      	push	{lr}
90004c88:	b082      	sub	sp, #8
    va_list pArg;
    va_start(pArg, text);
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
90004c8a:	2100      	movs	r1, #0
{
90004c8c:	ab03      	add	r3, sp, #12
90004c8e:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(pArg, text);
90004c92:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
90004c94:	f00f fb94 	bl	900143c0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
90004c98:	b002      	add	sp, #8
90004c9a:	f85d eb04 	ldr.w	lr, [sp], #4
90004c9e:	b003      	add	sp, #12
90004ca0:	4770      	bx	lr
90004ca2:	bf00      	nop

90004ca4 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
90004ca4:	b40c      	push	{r2, r3}
90004ca6:	b500      	push	{lr}
90004ca8:	b083      	sub	sp, #12
90004caa:	ab04      	add	r3, sp, #16
90004cac:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list pArg;
    va_start(pArg, text);
90004cb0:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
90004cb2:	f00f fb85 	bl	900143c0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
90004cb6:	b003      	add	sp, #12
90004cb8:	f85d eb04 	ldr.w	lr, [sp], #4
90004cbc:	b002      	add	sp, #8
90004cbe:	4770      	bx	lr

90004cc0 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
    if (fontGsubTable && nextCharacters.peekChar())
90004cc0:	6c43      	ldr	r3, [r0, #68]	; 0x44
{
90004cc2:	b510      	push	{r4, lr}
90004cc4:	4604      	mov	r4, r0
    if (fontGsubTable && nextCharacters.peekChar())
90004cc6:	b133      	cbz	r3, 90004cd6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x16>
            return used == size;
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
90004cc8:	8f03      	ldrh	r3, [r0, #56]	; 0x38
90004cca:	b39b      	cbz	r3, 90004d34 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x74>
            return buffer[pos];
90004ccc:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
90004cce:	eb00 0343 	add.w	r3, r0, r3, lsl #1
90004cd2:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
90004cd4:	b923      	cbnz	r3, 90004ce0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x20>
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
            nextCharacters.replaceAt0(0x093F);
        }
    }
    return getNextChar();
90004cd6:	4620      	mov	r0, r4
}
90004cd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return getNextChar();
90004cdc:	f010 bcbe 	b.w	9001565c <_ZN8touchgfx12TextProvider11getNextCharEv>
        substituteGlyphs();
90004ce0:	f010 fdba 	bl	90015858 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
90004ce4:	8f23      	ldrh	r3, [r4, #56]	; 0x38
90004ce6:	2b01      	cmp	r3, #1
90004ce8:	d92a      	bls.n	90004d40 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x80>
            const uint16_t index = pos + offset;
90004cea:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
90004cec:	1c53      	adds	r3, r2, #1
90004cee:	b29b      	uxth	r3, r3
            return buffer[index < size ? index : index - size];
90004cf0:	2b09      	cmp	r3, #9
90004cf2:	d812      	bhi.n	90004d1a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x5a>
90004cf4:	eb04 0143 	add.w	r1, r4, r3, lsl #1
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
90004cf8:	f640 103f 	movw	r0, #2367	; 0x93f
90004cfc:	8c49      	ldrh	r1, [r1, #34]	; 0x22
90004cfe:	4281      	cmp	r1, r0
90004d00:	d1e9      	bne.n	90004cd6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x16>
            return buffer[pos];
90004d02:	eb04 0142 	add.w	r1, r4, r2, lsl #1
90004d06:	0052      	lsls	r2, r2, #1
90004d08:	8c49      	ldrh	r1, [r1, #34]	; 0x22

        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
            const uint16_t index = pos + 1;
            buffer[index < size ? index : 0] = newChar;
90004d0a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
            buffer[pos] = newChar;
90004d0e:	4422      	add	r2, r4
90004d10:	f640 103f 	movw	r0, #2367	; 0x93f
            buffer[index < size ? index : 0] = newChar;
90004d14:	8459      	strh	r1, [r3, #34]	; 0x22
            buffer[pos] = newChar;
90004d16:	8450      	strh	r0, [r2, #34]	; 0x22
        }
90004d18:	e7dd      	b.n	90004cd6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x16>
            return buffer[index < size ? index : index - size];
90004d1a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
90004d1e:	f640 113f 	movw	r1, #2367	; 0x93f
90004d22:	89db      	ldrh	r3, [r3, #14]
90004d24:	428b      	cmp	r3, r1
90004d26:	d1d6      	bne.n	90004cd6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x16>
            return buffer[pos];
90004d28:	eb04 0142 	add.w	r1, r4, r2, lsl #1
90004d2c:	2300      	movs	r3, #0
90004d2e:	0052      	lsls	r2, r2, #1
90004d30:	8c49      	ldrh	r1, [r1, #34]	; 0x22
        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
90004d32:	e7ea      	b.n	90004d0a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x4a>
            assert(used > 0);
90004d34:	4b05      	ldr	r3, [pc, #20]	; (90004d4c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x8c>)
90004d36:	21c5      	movs	r1, #197	; 0xc5
90004d38:	4a05      	ldr	r2, [pc, #20]	; (90004d50 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x90>)
90004d3a:	4806      	ldr	r0, [pc, #24]	; (90004d54 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x94>)
90004d3c:	f01e fdba 	bl	900238b4 <__assert_func>
            assert(offset < used);
90004d40:	4b05      	ldr	r3, [pc, #20]	; (90004d58 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x98>)
90004d42:	21cb      	movs	r1, #203	; 0xcb
90004d44:	4a05      	ldr	r2, [pc, #20]	; (90004d5c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x9c>)
90004d46:	4803      	ldr	r0, [pc, #12]	; (90004d54 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x94>)
90004d48:	f01e fdb4 	bl	900238b4 <__assert_func>
90004d4c:	90028670 	.word	0x90028670
90004d50:	9002867c 	.word	0x9002867c
90004d54:	90028728 	.word	0x90028728
90004d58:	90028774 	.word	0x90028774
90004d5c:	90028784 	.word	0x90028784

90004d60 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
    fillInputBuffer();
90004d60:	f010 bc45 	b.w	900155ee <_ZN8touchgfx12TextProvider15fillInputBufferEv>

90004d64 <_ZN8touchgfx5Texts11setLanguageEt>:
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
    if (id < 1)
90004d64:	b9e0      	cbnz	r0, 90004da0 <_ZN8touchgfx5Texts11setLanguageEt+0x3c>
{
90004d66:	b538      	push	{r3, r4, r5, lr}
    {
        if (languagesArray[id] != 0)
90004d68:	4b13      	ldr	r3, [pc, #76]	; (90004db8 <_ZN8touchgfx5Texts11setLanguageEt+0x54>)
90004d6a:	681b      	ldr	r3, [r3, #0]
90004d6c:	b1cb      	cbz	r3, 90004da2 <_ZN8touchgfx5Texts11setLanguageEt+0x3e>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
90004d6e:	4c13      	ldr	r4, [pc, #76]	; (90004dbc <_ZN8touchgfx5Texts11setLanguageEt+0x58>)
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
90004d70:	4813      	ldr	r0, [pc, #76]	; (90004dc0 <_ZN8touchgfx5Texts11setLanguageEt+0x5c>)
90004d72:	e9d3 1200 	ldrd	r1, r2, [r3]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
90004d76:	4419      	add	r1, r3
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
90004d78:	441a      	add	r2, r3
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
90004d7a:	6021      	str	r1, [r4, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
90004d7c:	6899      	ldr	r1, [r3, #8]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
90004d7e:	6002      	str	r2, [r0, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
90004d80:	185c      	adds	r4, r3, r1
        }
    }

    if (currentLanguageTypedText)
    {
        currentLanguage = id;
90004d82:	4b10      	ldr	r3, [pc, #64]	; (90004dc4 <_ZN8touchgfx5Texts11setLanguageEt+0x60>)
90004d84:	2200      	movs	r2, #0
90004d86:	801a      	strh	r2, [r3, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
90004d88:	f000 f82c 	bl	90004de4 <_ZN17TypedTextDatabase8getFontsEv>
90004d8c:	4605      	mov	r5, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
90004d8e:	f000 f827 	bl	90004de0 <_ZN17TypedTextDatabase15getInstanceSizeEv>
        typedTexts = data;
90004d92:	4b0d      	ldr	r3, [pc, #52]	; (90004dc8 <_ZN8touchgfx5Texts11setLanguageEt+0x64>)
        fonts = f;
90004d94:	4a0d      	ldr	r2, [pc, #52]	; (90004dcc <_ZN8touchgfx5Texts11setLanguageEt+0x68>)
        typedTexts = data;
90004d96:	601c      	str	r4, [r3, #0]
        numberOfTypedTexts = n;
90004d98:	4b0d      	ldr	r3, [pc, #52]	; (90004dd0 <_ZN8touchgfx5Texts11setLanguageEt+0x6c>)
        fonts = f;
90004d9a:	6015      	str	r5, [r2, #0]
        numberOfTypedTexts = n;
90004d9c:	8018      	strh	r0, [r3, #0]
    }
}
90004d9e:	bd38      	pop	{r3, r4, r5, pc}
90004da0:	4770      	bx	lr
            currentLanguageTypedText = typedTextDatabaseArray[id];
90004da2:	4c0c      	ldr	r4, [pc, #48]	; (90004dd4 <_ZN8touchgfx5Texts11setLanguageEt+0x70>)
            currentLanguagePtr = texts_all_languages;
90004da4:	4905      	ldr	r1, [pc, #20]	; (90004dbc <_ZN8touchgfx5Texts11setLanguageEt+0x58>)
            currentLanguageTypedText = typedTextDatabaseArray[id];
90004da6:	6824      	ldr	r4, [r4, #0]
            currentLanguagePtr = texts_all_languages;
90004da8:	480b      	ldr	r0, [pc, #44]	; (90004dd8 <_ZN8touchgfx5Texts11setLanguageEt+0x74>)
            currentLanguageIndices = staticLanguageIndices[id];
90004daa:	4b05      	ldr	r3, [pc, #20]	; (90004dc0 <_ZN8touchgfx5Texts11setLanguageEt+0x5c>)
90004dac:	4a0b      	ldr	r2, [pc, #44]	; (90004ddc <_ZN8touchgfx5Texts11setLanguageEt+0x78>)
            currentLanguagePtr = texts_all_languages;
90004dae:	6008      	str	r0, [r1, #0]
            currentLanguageIndices = staticLanguageIndices[id];
90004db0:	601a      	str	r2, [r3, #0]
    if (currentLanguageTypedText)
90004db2:	2c00      	cmp	r4, #0
90004db4:	d1e5      	bne.n	90004d82 <_ZN8touchgfx5Texts11setLanguageEt+0x1e>
}
90004db6:	bd38      	pop	{r3, r4, r5, pc}
90004db8:	240075ec 	.word	0x240075ec
90004dbc:	240075f0 	.word	0x240075f0
90004dc0:	240075f4 	.word	0x240075f4
90004dc4:	240075f8 	.word	0x240075f8
90004dc8:	24021c64 	.word	0x24021c64
90004dcc:	24021c6c 	.word	0x24021c6c
90004dd0:	24021c68 	.word	0x24021c68
90004dd4:	902001b4 	.word	0x902001b4
90004dd8:	902001ac 	.word	0x902001ac
90004ddc:	902001a8 	.word	0x902001a8

90004de0 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
}

uint16_t getInstanceSize()
{
    return 0;
}
90004de0:	2000      	movs	r0, #0
90004de2:	4770      	bx	lr

90004de4 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
    return touchgfx_fonts;
}
90004de4:	4800      	ldr	r0, [pc, #0]	; (90004de8 <_ZN17TypedTextDatabase8getFontsEv+0x4>)
90004de6:	4770      	bx	lr
90004de8:	240075fc 	.word	0x240075fc

90004dec <_GLOBAL__sub_I_touchgfx_fonts>:
    case 2:
        touchgfx_fonts[2] = &(getFont_verdana_10_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
90004dec:	b510      	push	{r4, lr}
};
90004dee:	4c05      	ldr	r4, [pc, #20]	; (90004e04 <_GLOBAL__sub_I_touchgfx_fonts+0x18>)
    &(getFont_verdana_20_4bpp()),
90004df0:	f7ff fec6 	bl	90004b80 <_Z23getFont_verdana_20_4bppv>
};
90004df4:	6020      	str	r0, [r4, #0]
    &(getFont_verdana_40_4bpp()),
90004df6:	f7ff ff03 	bl	90004c00 <_Z23getFont_verdana_40_4bppv>
};
90004dfa:	6060      	str	r0, [r4, #4]
    &(getFont_verdana_10_4bpp())
90004dfc:	f7ff fe80 	bl	90004b00 <_Z23getFont_verdana_10_4bppv>
};
90004e00:	60a0      	str	r0, [r4, #8]
} // namespace TypedTextDatabase
90004e02:	bd10      	pop	{r4, pc}
90004e04:	240075fc 	.word	0x240075fc

90004e08 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
90004e08:	4770      	bx	lr
90004e0a:	bf00      	nop

90004e0c <_ZN19FrontendApplicationD0Ev>:
90004e0c:	b510      	push	{r4, lr}
90004e0e:	4604      	mov	r4, r0
90004e10:	f44f 71ae 	mov.w	r1, #348	; 0x15c
90004e14:	f01e fd1f 	bl	90023856 <_ZdlPvj>
90004e18:	4620      	mov	r0, r4
90004e1a:	bd10      	pop	{r4, pc}

90004e1c <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
90004e1c:	b510      	push	{r4, lr}
90004e1e:	4604      	mov	r4, r0
    {
        model.tick();
90004e20:	f8d0 0158 	ldr.w	r0, [r0, #344]	; 0x158
90004e24:	f000 f814 	bl	90004e50 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
90004e28:	4620      	mov	r0, r4
    }
90004e2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        FrontendApplicationBase::handleTickEvent();
90004e2e:	f00e bbfb 	b.w	90013628 <_ZN8touchgfx11Application15handleTickEventEv>
90004e32:	bf00      	nop

90004e34 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
90004e34:	b510      	push	{r4, lr}
90004e36:	4604      	mov	r4, r0
    : FrontendApplicationBase(m, heap)
90004e38:	f7ff fd3a 	bl	900048b0 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
90004e3c:	4b01      	ldr	r3, [pc, #4]	; (90004e44 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x10>)
{

}
90004e3e:	4620      	mov	r0, r4
    : FrontendApplicationBase(m, heap)
90004e40:	6023      	str	r3, [r4, #0]
}
90004e42:	bd10      	pop	{r4, pc}
90004e44:	90028860 	.word	0x90028860

90004e48 <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
90004e48:	2200      	movs	r2, #0
90004e4a:	6002      	str	r2, [r0, #0]
{

}
90004e4c:	4770      	bx	lr
90004e4e:	bf00      	nop

90004e50 <_ZN5Model4tickEv>:

void Model::tick()
{

}
90004e50:	4770      	bx	lr
90004e52:	bf00      	nop

90004e54 <_ZN16Screen1PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen1Presenter() {}
90004e54:	4770      	bx	lr
90004e56:	bf00      	nop

90004e58 <_ZThn4_N16Screen1PresenterD1Ev>:
90004e58:	3804      	subs	r0, #4
90004e5a:	4770      	bx	lr

90004e5c <_ZN16Screen1Presenter10deactivateEv>:
}

void Screen1Presenter::activate()
{

}
90004e5c:	4770      	bx	lr
90004e5e:	bf00      	nop

90004e60 <_ZN16Screen1PresenterD0Ev>:
90004e60:	b510      	push	{r4, lr}
90004e62:	4604      	mov	r4, r0
90004e64:	2110      	movs	r1, #16
90004e66:	f01e fcf6 	bl	90023856 <_ZdlPvj>
90004e6a:	4620      	mov	r0, r4
90004e6c:	bd10      	pop	{r4, pc}
90004e6e:	bf00      	nop

90004e70 <_ZThn4_N16Screen1PresenterD0Ev>:
90004e70:	b500      	push	{lr}
90004e72:	3804      	subs	r0, #4
90004e74:	b083      	sub	sp, #12
90004e76:	2110      	movs	r1, #16
90004e78:	9001      	str	r0, [sp, #4]
90004e7a:	f01e fcec 	bl	90023856 <_ZdlPvj>
90004e7e:	9801      	ldr	r0, [sp, #4]
90004e80:	b003      	add	sp, #12
90004e82:	f85d fb04 	ldr.w	pc, [sp], #4
90004e86:	bf00      	nop

90004e88 <_ZN16Screen1PresenterC1ER11Screen1View>:
    : view(v)
90004e88:	4a06      	ldr	r2, [pc, #24]	; (90004ea4 <_ZN16Screen1PresenterC1ER11Screen1View+0x1c>)
90004e8a:	60c1      	str	r1, [r0, #12]
Screen1Presenter::Screen1Presenter(Screen1View& v)
90004e8c:	b410      	push	{r4}
    ModelListener() : model(0) {}
90004e8e:	2400      	movs	r4, #0
90004e90:	6084      	str	r4, [r0, #8]
    : view(v)
90004e92:	f102 0408 	add.w	r4, r2, #8
90004e96:	3220      	adds	r2, #32
90004e98:	e9c0 4200 	strd	r4, r2, [r0]
}
90004e9c:	f85d 4b04 	ldr.w	r4, [sp], #4
90004ea0:	4770      	bx	lr
90004ea2:	bf00      	nop
90004ea4:	900288ac 	.word	0x900288ac

90004ea8 <_ZN11Screen1View14tearDownScreenEv>:
}

void Screen1View::tearDownScreen()
{
    Screen1ViewBase::tearDownScreen();
}
90004ea8:	4770      	bx	lr
90004eaa:	bf00      	nop

90004eac <_ZN11Screen1ViewD1Ev>:

class Screen1View : public Screen1ViewBase
{
public:
    Screen1View();
    virtual ~Screen1View() {}
90004eac:	4b03      	ldr	r3, [pc, #12]	; (90004ebc <_ZN11Screen1ViewD1Ev+0x10>)
90004eae:	b510      	push	{r4, lr}
90004eb0:	4604      	mov	r4, r0
90004eb2:	6003      	str	r3, [r0, #0]
90004eb4:	f7ff fdc4 	bl	90004a40 <_ZN15Screen1ViewBaseD1Ev>
90004eb8:	4620      	mov	r0, r4
90004eba:	bd10      	pop	{r4, pc}
90004ebc:	900288dc 	.word	0x900288dc

90004ec0 <_ZN11Screen1ViewD0Ev>:
90004ec0:	4b05      	ldr	r3, [pc, #20]	; (90004ed8 <_ZN11Screen1ViewD0Ev+0x18>)
90004ec2:	b510      	push	{r4, lr}
90004ec4:	4604      	mov	r4, r0
90004ec6:	6003      	str	r3, [r0, #0]
90004ec8:	f7ff fdba 	bl	90004a40 <_ZN15Screen1ViewBaseD1Ev>
90004ecc:	21a8      	movs	r1, #168	; 0xa8
90004ece:	4620      	mov	r0, r4
90004ed0:	f01e fcc1 	bl	90023856 <_ZdlPvj>
90004ed4:	4620      	mov	r0, r4
90004ed6:	bd10      	pop	{r4, pc}
90004ed8:	900288dc 	.word	0x900288dc

90004edc <_ZN11Screen1ViewC1Ev>:
Screen1View::Screen1View()
90004edc:	b510      	push	{r4, lr}
90004ede:	4604      	mov	r4, r0
90004ee0:	f7ff fdba 	bl	90004a58 <_ZN15Screen1ViewBaseC1Ev>
90004ee4:	4b01      	ldr	r3, [pc, #4]	; (90004eec <_ZN11Screen1ViewC1Ev+0x10>)
}
90004ee6:	4620      	mov	r0, r4
Screen1View::Screen1View()
90004ee8:	6023      	str	r3, [r4, #0]
}
90004eea:	bd10      	pop	{r4, pc}
90004eec:	900288dc 	.word	0x900288dc

90004ef0 <_ZN11Screen1View11setupScreenEv>:
    Screen1ViewBase::setupScreen();
90004ef0:	f7ff bda8 	b.w	90004a44 <_ZN15Screen1ViewBase11setupScreenEv>

90004ef4 <FT5336_GetCapabilities>:
{
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Store component's capabilities */
  Capabilities->MultiTouch = 1;
90004ef4:	f240 1c01 	movw	ip, #257	; 0x101
  Capabilities->Gesture    = 1;
  Capabilities->MaxTouch   = FT5336_MAX_NB_TOUCH;
90004ef8:	2005      	movs	r0, #5
  Capabilities->MaxXl      = FT5336_MAX_X_LENGTH;
90004efa:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
  Capabilities->MaxYl      = FT5336_MAX_Y_LENGTH;
90004efe:	f44f 7388 	mov.w	r3, #272	; 0x110
  Capabilities->MaxTouch   = FT5336_MAX_NB_TOUCH;
90004f02:	7088      	strb	r0, [r1, #2]

  return FT5336_OK;
}
90004f04:	2000      	movs	r0, #0
  Capabilities->MultiTouch = 1;
90004f06:	f8a1 c000 	strh.w	ip, [r1]
  Capabilities->MaxYl      = FT5336_MAX_Y_LENGTH;
90004f0a:	e9c1 2301 	strd	r2, r3, [r1, #4]
}
90004f0e:	4770      	bx	lr

90004f10 <FT5336_DeInit>:
  */
int32_t FT5336_DeInit(FT5336_Object_t *pObj)
{
  int32_t ret = FT5336_OK;

  if(pObj->IsInitialized == 1U)
90004f10:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
90004f14:	2b01      	cmp	r3, #1
90004f16:	d102      	bne.n	90004f1e <FT5336_DeInit+0xe>
  {
    pObj->IsInitialized = 0;
90004f18:	2300      	movs	r3, #0
90004f1a:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  }

  return ret;
}
90004f1e:	2000      	movs	r0, #0
90004f20:	4770      	bx	lr
90004f22:	bf00      	nop

90004f24 <FT5336_ITStatus>:
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return FT5336_OK as feature not applicable to FT5336 */
  return FT5336_OK;
}
90004f24:	2000      	movs	r0, #0
90004f26:	4770      	bx	lr

90004f28 <ReadRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t ReadRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
90004f28:	b410      	push	{r4}
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
90004f2a:	6904      	ldr	r4, [r0, #16]
90004f2c:	8900      	ldrh	r0, [r0, #8]
90004f2e:	46a4      	mov	ip, r4
}
90004f30:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
90004f34:	4760      	bx	ip
90004f36:	bf00      	nop

90004f38 <WriteRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t WriteRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
90004f38:	b410      	push	{r4}
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
90004f3a:	68c4      	ldr	r4, [r0, #12]
90004f3c:	8900      	ldrh	r0, [r0, #8]
90004f3e:	46a4      	mov	ip, r4
}
90004f40:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
90004f44:	4760      	bx	ip
90004f46:	bf00      	nop

90004f48 <FT5336_GestureConfig>:
{
90004f48:	b570      	push	{r4, r5, r6, lr}
  ret = ft5336_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
90004f4a:	f100 0518 	add.w	r5, r0, #24
{
90004f4e:	460e      	mov	r6, r1
  ret = ft5336_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
90004f50:	7809      	ldrb	r1, [r1, #0]
90004f52:	4628      	mov	r0, r5
90004f54:	f000 f96c 	bl	90005230 <ft5336_radian_value>
90004f58:	4604      	mov	r4, r0
  ret += ft5336_offset_left_right(&pObj->Ctx, (uint8_t)GestureInit->OffsetLeftRight);
90004f5a:	7931      	ldrb	r1, [r6, #4]
90004f5c:	4628      	mov	r0, r5
90004f5e:	f000 f975 	bl	9000524c <ft5336_offset_left_right>
90004f62:	4404      	add	r4, r0
  ret += ft5336_offset_up_down(&pObj->Ctx, (uint8_t)GestureInit->OffsetUpDown);
90004f64:	7a31      	ldrb	r1, [r6, #8]
90004f66:	4628      	mov	r0, r5
90004f68:	f000 f97e 	bl	90005268 <ft5336_offset_up_down>
90004f6c:	4404      	add	r4, r0
  ret += ft5336_disatnce_left_right(&pObj->Ctx, (uint8_t)GestureInit->DistanceLeftRight);
90004f6e:	7b31      	ldrb	r1, [r6, #12]
90004f70:	4628      	mov	r0, r5
90004f72:	f000 f987 	bl	90005284 <ft5336_disatnce_left_right>
  ret += ft5336_distance_up_down(&pObj->Ctx, (uint8_t)GestureInit->DistanceUpDown);
90004f76:	7c31      	ldrb	r1, [r6, #16]
  ret += ft5336_disatnce_left_right(&pObj->Ctx, (uint8_t)GestureInit->DistanceLeftRight);
90004f78:	4404      	add	r4, r0
  ret += ft5336_distance_up_down(&pObj->Ctx, (uint8_t)GestureInit->DistanceUpDown);
90004f7a:	4628      	mov	r0, r5
90004f7c:	f000 f990 	bl	900052a0 <ft5336_distance_up_down>
90004f80:	4603      	mov	r3, r0
  ret += ft5336_distance_zoom(&pObj->Ctx, (uint8_t)GestureInit->DistanceZoom);
90004f82:	7d31      	ldrb	r1, [r6, #20]
90004f84:	4628      	mov	r0, r5
  ret += ft5336_distance_up_down(&pObj->Ctx, (uint8_t)GestureInit->DistanceUpDown);
90004f86:	441c      	add	r4, r3
  ret += ft5336_distance_zoom(&pObj->Ctx, (uint8_t)GestureInit->DistanceZoom);
90004f88:	f000 f998 	bl	900052bc <ft5336_distance_zoom>
  if(ret != FT5336_OK)
90004f8c:	42c4      	cmn	r4, r0
}
90004f8e:	bf14      	ite	ne
90004f90:	f04f 30ff 	movne.w	r0, #4294967295
90004f94:	2000      	moveq	r0, #0
90004f96:	bd70      	pop	{r4, r5, r6, pc}

90004f98 <FT5336_ReadID>:
  return ft5336_chip_id(&pObj->Ctx, (uint8_t *)Id);
90004f98:	3018      	adds	r0, #24
90004f9a:	f000 b9ab 	b.w	900052f4 <ft5336_chip_id>
90004f9e:	bf00      	nop

90004fa0 <FT5336_GetState>:
{
90004fa0:	b530      	push	{r4, r5, lr}
  if(ft5336_td_status(&pObj->Ctx, &nb_touch) != FT5336_OK)
90004fa2:	f100 0518 	add.w	r5, r0, #24
{
90004fa6:	b083      	sub	sp, #12
90004fa8:	460c      	mov	r4, r1
  if(ft5336_td_status(&pObj->Ctx, &nb_touch) != FT5336_OK)
90004faa:	4628      	mov	r0, r5
90004fac:	a901      	add	r1, sp, #4
90004fae:	f000 f931 	bl	90005214 <ft5336_td_status>
90004fb2:	bb10      	cbnz	r0, 90004ffa <FT5336_GetState+0x5a>
    if(nb_touch > FT5336_MAX_NB_TOUCH)
90004fb4:	f89d 3004 	ldrb.w	r3, [sp, #4]
  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
90004fb8:	2b05      	cmp	r3, #5
90004fba:	bf94      	ite	ls
90004fbc:	4619      	movls	r1, r3
90004fbe:	2100      	movhi	r1, #0
  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
90004fc0:	2304      	movs	r3, #4
  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
90004fc2:	6021      	str	r1, [r4, #0]
  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
90004fc4:	4628      	mov	r0, r5
90004fc6:	2103      	movs	r1, #3
90004fc8:	eb0d 0203 	add.w	r2, sp, r3
90004fcc:	f000 f910 	bl	900051f0 <ft5336_read_reg>
90004fd0:	b9b0      	cbnz	r0, 90005000 <FT5336_GetState+0x60>
    State->TouchX = (((uint32_t)data[0] & FT5336_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT5336_P1_XL_TP_BIT_MASK);
90004fd2:	f89d 2004 	ldrb.w	r2, [sp, #4]
    State->TouchY = (((uint32_t)data[2] & FT5336_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT5336_P1_YL_TP_BIT_MASK);
90004fd6:	f89d 3006 	ldrb.w	r3, [sp, #6]
    State->TouchX = (((uint32_t)data[0] & FT5336_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT5336_P1_XL_TP_BIT_MASK);
90004fda:	0212      	lsls	r2, r2, #8
90004fdc:	f89d 1005 	ldrb.w	r1, [sp, #5]
    State->TouchY = (((uint32_t)data[2] & FT5336_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT5336_P1_YL_TP_BIT_MASK);
90004fe0:	021b      	lsls	r3, r3, #8
    State->TouchX = (((uint32_t)data[0] & FT5336_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT5336_P1_XL_TP_BIT_MASK);
90004fe2:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
    State->TouchY = (((uint32_t)data[2] & FT5336_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT5336_P1_YL_TP_BIT_MASK);
90004fe6:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    State->TouchX = (((uint32_t)data[0] & FT5336_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT5336_P1_XL_TP_BIT_MASK);
90004fea:	430a      	orrs	r2, r1
    State->TouchY = (((uint32_t)data[2] & FT5336_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT5336_P1_YL_TP_BIT_MASK);
90004fec:	f89d 1007 	ldrb.w	r1, [sp, #7]
90004ff0:	430b      	orrs	r3, r1
90004ff2:	e9c4 2301 	strd	r2, r3, [r4, #4]
}
90004ff6:	b003      	add	sp, #12
90004ff8:	bd30      	pop	{r4, r5, pc}
90004ffa:	f04f 31ff 	mov.w	r1, #4294967295
90004ffe:	e7df      	b.n	90004fc0 <FT5336_GetState+0x20>
    ret = FT5336_ERROR;
90005000:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
90005004:	e7f7      	b.n	90004ff6 <FT5336_GetState+0x56>
90005006:	bf00      	nop

90005008 <FT5336_GetMultiTouchState>:
{
90005008:	b570      	push	{r4, r5, r6, lr}
  if(ft5336_td_status(&pObj->Ctx, &nb_touch) != FT5336_OK)
9000500a:	f100 0518 	add.w	r5, r0, #24
{
9000500e:	b088      	sub	sp, #32
90005010:	460c      	mov	r4, r1
  if(ft5336_td_status(&pObj->Ctx, &nb_touch) != FT5336_OK)
90005012:	4628      	mov	r0, r5
90005014:	4669      	mov	r1, sp
90005016:	f000 f8fd 	bl	90005214 <ft5336_td_status>
9000501a:	2800      	cmp	r0, #0
9000501c:	f040 809a 	bne.w	90005154 <FT5336_GetMultiTouchState+0x14c>
    if(nb_touch > FT5336_MAX_NB_TOUCH)
90005020:	f89d 3000 	ldrb.w	r3, [sp]
  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
90005024:	2b05      	cmp	r3, #5
90005026:	bf94      	ite	ls
90005028:	4619      	movls	r1, r3
9000502a:	2100      	movhi	r1, #0
9000502c:	6021      	str	r1, [r4, #0]
  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
9000502e:	231e      	movs	r3, #30
90005030:	466a      	mov	r2, sp
90005032:	4628      	mov	r0, r5
90005034:	2103      	movs	r1, #3
90005036:	f000 f8db 	bl	900051f0 <ft5336_read_reg>
9000503a:	2800      	cmp	r0, #0
9000503c:	f040 808d 	bne.w	9000515a <FT5336_GetMultiTouchState+0x152>
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90005040:	f89d 1000 	ldrb.w	r1, [sp]
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
90005044:	f89d 3002 	ldrb.w	r3, [sp, #2]
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90005048:	020a      	lsls	r2, r1, #8
9000504a:	f89d 5001 	ldrb.w	r5, [sp, #1]
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
9000504e:	021b      	lsls	r3, r3, #8
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90005050:	f89d c007 	ldrb.w	ip, [sp, #7]
90005054:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
90005058:	0989      	lsrs	r1, r1, #6
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
9000505a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
9000505e:	f89d 6011 	ldrb.w	r6, [sp, #17]
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90005062:	432a      	orrs	r2, r5
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
90005064:	f89d 5003 	ldrb.w	r5, [sp, #3]
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
90005068:	6421      	str	r1, [r4, #64]	; 0x40
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
9000506a:	0936      	lsrs	r6, r6, #4
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
9000506c:	432b      	orrs	r3, r5
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
9000506e:	6062      	str	r2, [r4, #4]
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
90005070:	f89d 2004 	ldrb.w	r2, [sp, #4]
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
90005074:	61a3      	str	r3, [r4, #24]
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
90005076:	f89d 3005 	ldrb.w	r3, [sp, #5]
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
9000507a:	f89d 1006 	ldrb.w	r1, [sp, #6]
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
9000507e:	091b      	lsrs	r3, r3, #4
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
90005080:	62e2      	str	r2, [r4, #44]	; 0x2c
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
90005082:	f89d 200b 	ldrb.w	r2, [sp, #11]
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90005086:	020d      	lsls	r5, r1, #8
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
90005088:	6563      	str	r3, [r4, #84]	; 0x54
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
9000508a:	0989      	lsrs	r1, r1, #6
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
9000508c:	f89d 300c 	ldrb.w	r3, [sp, #12]
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
90005090:	0912      	lsrs	r2, r2, #4
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
90005092:	6461      	str	r1, [r4, #68]	; 0x44
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90005094:	f405 6570 	and.w	r5, r5, #3840	; 0xf00
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
90005098:	f89d 100a 	ldrb.w	r1, [sp, #10]
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
9000509c:	65a2      	str	r2, [r4, #88]	; 0x58
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
9000509e:	021a      	lsls	r2, r3, #8
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
900050a0:	6321      	str	r1, [r4, #48]	; 0x30
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
900050a2:	ea45 050c 	orr.w	r5, r5, ip
900050a6:	f402 6170 	and.w	r1, r2, #3840	; 0xf00
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
900050aa:	f89d 2008 	ldrb.w	r2, [sp, #8]
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
900050ae:	099b      	lsrs	r3, r3, #6
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
900050b0:	60a5      	str	r5, [r4, #8]
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
900050b2:	0212      	lsls	r2, r2, #8
900050b4:	f89d 5009 	ldrb.w	r5, [sp, #9]
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
900050b8:	64a3      	str	r3, [r4, #72]	; 0x48
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
900050ba:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
900050be:	f89d 3010 	ldrb.w	r3, [sp, #16]
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
900050c2:	432a      	orrs	r2, r5
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
900050c4:	6363      	str	r3, [r4, #52]	; 0x34
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
900050c6:	f89d 300e 	ldrb.w	r3, [sp, #14]
900050ca:	61e2      	str	r2, [r4, #28]
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
900050cc:	f89d 200d 	ldrb.w	r2, [sp, #13]
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
900050d0:	021b      	lsls	r3, r3, #8
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
900050d2:	430a      	orrs	r2, r1
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
900050d4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
900050d8:	60e2      	str	r2, [r4, #12]
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
900050da:	f89d 200f 	ldrb.w	r2, [sp, #15]
900050de:	4313      	orrs	r3, r2
900050e0:	6223      	str	r3, [r4, #32]
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
900050e2:	65e6      	str	r6, [r4, #92]	; 0x5c
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
900050e4:	f89d 1012 	ldrb.w	r1, [sp, #18]
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
900050e8:	f89d 3014 	ldrb.w	r3, [sp, #20]
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
900050ec:	020a      	lsls	r2, r1, #8
900050ee:	f89d 5013 	ldrb.w	r5, [sp, #19]
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
900050f2:	021b      	lsls	r3, r3, #8
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
900050f4:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
900050f8:	0989      	lsrs	r1, r1, #6
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
900050fa:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
900050fe:	432a      	orrs	r2, r5
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
90005100:	f89d 5015 	ldrb.w	r5, [sp, #21]
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
90005104:	64e1      	str	r1, [r4, #76]	; 0x4c
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
90005106:	432b      	orrs	r3, r5
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90005108:	f89d 1018 	ldrb.w	r1, [sp, #24]
9000510c:	6122      	str	r2, [r4, #16]
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
9000510e:	6263      	str	r3, [r4, #36]	; 0x24
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90005110:	020b      	lsls	r3, r1, #8
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
90005112:	f89d 2016 	ldrb.w	r2, [sp, #22]
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
90005116:	0989      	lsrs	r1, r1, #6
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
90005118:	f89d 5017 	ldrb.w	r5, [sp, #23]
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
9000511c:	63a2      	str	r2, [r4, #56]	; 0x38
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
9000511e:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
90005122:	f89d 301d 	ldrb.w	r3, [sp, #29]
90005126:	092d      	lsrs	r5, r5, #4
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
90005128:	6521      	str	r1, [r4, #80]	; 0x50
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
9000512a:	091b      	lsrs	r3, r3, #4
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
9000512c:	f89d 101c 	ldrb.w	r1, [sp, #28]
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
90005130:	6625      	str	r5, [r4, #96]	; 0x60
90005132:	6663      	str	r3, [r4, #100]	; 0x64
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
90005134:	f89d 301a 	ldrb.w	r3, [sp, #26]
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
90005138:	63e1      	str	r1, [r4, #60]	; 0x3c
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
9000513a:	021b      	lsls	r3, r3, #8
9000513c:	f89d 101b 	ldrb.w	r1, [sp, #27]
90005140:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
90005144:	430b      	orrs	r3, r1
90005146:	62a3      	str	r3, [r4, #40]	; 0x28
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90005148:	f89d 3019 	ldrb.w	r3, [sp, #25]
9000514c:	4313      	orrs	r3, r2
9000514e:	6163      	str	r3, [r4, #20]
}
90005150:	b008      	add	sp, #32
90005152:	bd70      	pop	{r4, r5, r6, pc}
90005154:	f04f 31ff 	mov.w	r1, #4294967295
90005158:	e768      	b.n	9000502c <FT5336_GetMultiTouchState+0x24>
    ret = FT5336_ERROR;
9000515a:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
9000515e:	e7f7      	b.n	90005150 <FT5336_GetMultiTouchState+0x148>

90005160 <FT5336_GetGesture>:
  return ft5336_gest_id(&pObj->Ctx, GestureId);
90005160:	3018      	adds	r0, #24
90005162:	f000 b84d 	b.w	90005200 <ft5336_gest_id>
90005166:	bf00      	nop

90005168 <FT5336_EnableIT>:
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_TRIGGER);
90005168:	2101      	movs	r1, #1
9000516a:	3018      	adds	r0, #24
9000516c:	f000 b8b4 	b.w	900052d8 <ft5336_g_mode>

90005170 <FT5336_DisableIT>:
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_POLLING);
90005170:	2100      	movs	r1, #0
90005172:	3018      	adds	r0, #24
90005174:	f000 b8b0 	b.w	900052d8 <ft5336_g_mode>

90005178 <FT5336_Init>:
{
90005178:	b570      	push	{r4, r5, r6, lr}
  if(pObj->IsInitialized == 0U)
9000517a:	f890 5024 	ldrb.w	r5, [r0, #36]	; 0x24
9000517e:	b98d      	cbnz	r5, 900051a4 <FT5336_Init+0x2c>
    pObj->IO.Init();
90005180:	4606      	mov	r6, r0
90005182:	4604      	mov	r4, r0
90005184:	f856 3b18 	ldr.w	r3, [r6], #24
90005188:	4798      	blx	r3
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_POLLING);
9000518a:	4629      	mov	r1, r5
9000518c:	4630      	mov	r0, r6
9000518e:	f000 f8a3 	bl	900052d8 <ft5336_g_mode>
  if(ret != FT5336_OK)
90005192:	3800      	subs	r0, #0
    pObj->IsInitialized = 1;
90005194:	f04f 0301 	mov.w	r3, #1
  if(ret != FT5336_OK)
90005198:	bf18      	it	ne
9000519a:	2001      	movne	r0, #1
    pObj->IsInitialized = 1;
9000519c:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  if(ret != FT5336_OK)
900051a0:	4240      	negs	r0, r0
}
900051a2:	bd70      	pop	{r4, r5, r6, pc}
  int32_t ret = FT5336_OK;
900051a4:	2000      	movs	r0, #0
}
900051a6:	bd70      	pop	{r4, r5, r6, pc}

900051a8 <FT5336_ClearIT>:
900051a8:	2000      	movs	r0, #0
900051aa:	4770      	bx	lr

900051ac <FT5336_RegisterBusIO>:
  if (pObj == NULL)
900051ac:	b1c0      	cbz	r0, 900051e0 <FT5336_RegisterBusIO+0x34>
    pObj->IO.Address   = pIO->Address;
900051ae:	890a      	ldrh	r2, [r1, #8]
{
900051b0:	b430      	push	{r4, r5}
    pObj->IO.DeInit    = pIO->DeInit;
900051b2:	e9d1 3400 	ldrd	r3, r4, [r1]
    pObj->IO.Address   = pIO->Address;
900051b6:	8102      	strh	r2, [r0, #8]
    pObj->IO.DeInit    = pIO->DeInit;
900051b8:	e9c0 3400 	strd	r3, r4, [r0]
    pObj->IO.WriteReg  = pIO->WriteReg;
900051bc:	694a      	ldr	r2, [r1, #20]
900051be:	e9d1 5403 	ldrd	r5, r4, [r1, #12]
    pObj->Ctx.ReadReg  = ReadRegWrap;
900051c2:	4909      	ldr	r1, [pc, #36]	; (900051e8 <FT5336_RegisterBusIO+0x3c>)
    pObj->IO.WriteReg  = pIO->WriteReg;
900051c4:	60c5      	str	r5, [r0, #12]
900051c6:	e9c0 4204 	strd	r4, r2, [r0, #16]
    pObj->Ctx.WriteReg = WriteRegWrap;
900051ca:	4a08      	ldr	r2, [pc, #32]	; (900051ec <FT5336_RegisterBusIO+0x40>)
    pObj->Ctx.handle   = pObj;
900051cc:	e9c0 1007 	strd	r1, r0, [r0, #28]
    pObj->Ctx.WriteReg = WriteRegWrap;
900051d0:	6182      	str	r2, [r0, #24]
    if(pObj->IO.Init != NULL)
900051d2:	b10b      	cbz	r3, 900051d8 <FT5336_RegisterBusIO+0x2c>
}
900051d4:	bc30      	pop	{r4, r5}
      ret = pObj->IO.Init();
900051d6:	4718      	bx	r3
}
900051d8:	f04f 30ff 	mov.w	r0, #4294967295
900051dc:	bc30      	pop	{r4, r5}
900051de:	4770      	bx	lr
900051e0:	f04f 30ff 	mov.w	r0, #4294967295
900051e4:	4770      	bx	lr
900051e6:	bf00      	nop
900051e8:	90004f29 	.word	0x90004f29
900051ec:	90004f39 	.word	0x90004f39

900051f0 <ft5336_read_reg>:
  * @param  pdata pointer to data to be read
  * @param  length Length of data to read   
  * @retval Component status
  */
int32_t ft5336_read_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t* pdata, uint16_t length)
{
900051f0:	b410      	push	{r4}
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
900051f2:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
900051f6:	46a4      	mov	ip, r4
}
900051f8:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
900051fc:	4760      	bx	ip
900051fe:	bf00      	nop

90005200 <ft5336_gest_id>:
  * @param  ctx Component context 
  * @param  value pointer to the value of FT5336_GEST_ID_REG register
  * @retval Component status
  */
int32_t  ft5336_gest_id(ft5336_ctx_t *ctx, uint8_t *value)
{
90005200:	b410      	push	{r4}
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
90005202:	2301      	movs	r3, #1
{
90005204:	460a      	mov	r2, r1
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
90005206:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
9000520a:	4619      	mov	r1, r3
9000520c:	46a4      	mov	ip, r4
  return ft5336_read_reg(ctx, FT5336_GEST_ID_REG, (uint8_t *)value, 1);
}
9000520e:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
90005212:	4760      	bx	ip

90005214 <ft5336_td_status>:
  * @param  ctx Component context 
  * @param  value pointer to the value of Touch Data Status register
  * @retval Component status
  */
int32_t  ft5336_td_status(ft5336_ctx_t *ctx, uint8_t *value)
{
90005214:	b538      	push	{r3, r4, r5, lr}
90005216:	460c      	mov	r4, r1
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
90005218:	2301      	movs	r3, #1
9000521a:	2102      	movs	r1, #2
9000521c:	4622      	mov	r2, r4
9000521e:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
90005222:	47a8      	blx	r5
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_TD_STAT_REG, (uint8_t *)value, 1);
  
  if(ret == 0)
90005224:	b918      	cbnz	r0, 9000522e <ft5336_td_status+0x1a>
  {
    *value &= FT5336_TD_STATUS_BIT_MASK; 
90005226:	7823      	ldrb	r3, [r4, #0]
90005228:	f003 030f 	and.w	r3, r3, #15
9000522c:	7023      	strb	r3, [r4, #0]
    *value = *value >> FT5336_TD_STATUS_BIT_POSITION; 
  }
  
  return ret;
}
9000522e:	bd38      	pop	{r3, r4, r5, pc}

90005230 <ft5336_radian_value>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_RADIAN_VALUE_REG register
  * @retval Component status
  */
int32_t  ft5336_radian_value(ft5336_ctx_t *ctx, uint8_t value)
{
90005230:	b510      	push	{r4, lr}
90005232:	460c      	mov	r4, r1
90005234:	b082      	sub	sp, #8
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
90005236:	2301      	movs	r3, #1
90005238:	2191      	movs	r1, #145	; 0x91
{
9000523a:	f88d 4007 	strb.w	r4, [sp, #7]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
9000523e:	f10d 0207 	add.w	r2, sp, #7
90005242:	6804      	ldr	r4, [r0, #0]
90005244:	6880      	ldr	r0, [r0, #8]
90005246:	47a0      	blx	r4
  return ft5336_write_reg(ctx, FT5336_RADIAN_VALUE_REG, &value, 1);
}
90005248:	b002      	add	sp, #8
9000524a:	bd10      	pop	{r4, pc}

9000524c <ft5336_offset_left_right>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_OFFSET_LR_REG register
  * @retval Component status
  */
int32_t  ft5336_offset_left_right(ft5336_ctx_t *ctx, uint8_t value)
{
9000524c:	b510      	push	{r4, lr}
9000524e:	460c      	mov	r4, r1
90005250:	b082      	sub	sp, #8
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
90005252:	2301      	movs	r3, #1
90005254:	2192      	movs	r1, #146	; 0x92
{
90005256:	f88d 4007 	strb.w	r4, [sp, #7]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
9000525a:	f10d 0207 	add.w	r2, sp, #7
9000525e:	6804      	ldr	r4, [r0, #0]
90005260:	6880      	ldr	r0, [r0, #8]
90005262:	47a0      	blx	r4
  return ft5336_write_reg(ctx, FT5336_OFFSET_LR_REG, &value, 1);
}
90005264:	b002      	add	sp, #8
90005266:	bd10      	pop	{r4, pc}

90005268 <ft5336_offset_up_down>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_OFFSET_UD_REG register
  * @retval Component status
  */
int32_t  ft5336_offset_up_down(ft5336_ctx_t *ctx, uint8_t value)
{
90005268:	b510      	push	{r4, lr}
9000526a:	460c      	mov	r4, r1
9000526c:	b082      	sub	sp, #8
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
9000526e:	2301      	movs	r3, #1
90005270:	2193      	movs	r1, #147	; 0x93
{
90005272:	f88d 4007 	strb.w	r4, [sp, #7]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
90005276:	f10d 0207 	add.w	r2, sp, #7
9000527a:	6804      	ldr	r4, [r0, #0]
9000527c:	6880      	ldr	r0, [r0, #8]
9000527e:	47a0      	blx	r4
  return ft5336_write_reg(ctx, FT5336_OFFSET_UD_REG, &value, 1);
}
90005280:	b002      	add	sp, #8
90005282:	bd10      	pop	{r4, pc}

90005284 <ft5336_disatnce_left_right>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_LR_REG register
  * @retval Component status
  */
int32_t  ft5336_disatnce_left_right(ft5336_ctx_t *ctx, uint8_t value)
{
90005284:	b510      	push	{r4, lr}
90005286:	460c      	mov	r4, r1
90005288:	b082      	sub	sp, #8
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
9000528a:	2301      	movs	r3, #1
9000528c:	2194      	movs	r1, #148	; 0x94
{
9000528e:	f88d 4007 	strb.w	r4, [sp, #7]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
90005292:	f10d 0207 	add.w	r2, sp, #7
90005296:	6804      	ldr	r4, [r0, #0]
90005298:	6880      	ldr	r0, [r0, #8]
9000529a:	47a0      	blx	r4
  return ft5336_write_reg(ctx, FT5336_DISTANCE_LR_REG, &value, 1);
}
9000529c:	b002      	add	sp, #8
9000529e:	bd10      	pop	{r4, pc}

900052a0 <ft5336_distance_up_down>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_UD_REG register
  * @retval Component status
  */
int32_t  ft5336_distance_up_down(ft5336_ctx_t *ctx, uint8_t value)
{
900052a0:	b510      	push	{r4, lr}
900052a2:	460c      	mov	r4, r1
900052a4:	b082      	sub	sp, #8
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
900052a6:	2301      	movs	r3, #1
900052a8:	2195      	movs	r1, #149	; 0x95
{
900052aa:	f88d 4007 	strb.w	r4, [sp, #7]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
900052ae:	f10d 0207 	add.w	r2, sp, #7
900052b2:	6804      	ldr	r4, [r0, #0]
900052b4:	6880      	ldr	r0, [r0, #8]
900052b6:	47a0      	blx	r4
  return ft5336_write_reg(ctx, FT5336_DISTANCE_UD_REG, &value, 1);
}
900052b8:	b002      	add	sp, #8
900052ba:	bd10      	pop	{r4, pc}

900052bc <ft5336_distance_zoom>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_ZOOM_REG register
  * @retval Component status
  */
int32_t  ft5336_distance_zoom(ft5336_ctx_t *ctx, uint8_t value)
{
900052bc:	b510      	push	{r4, lr}
900052be:	460c      	mov	r4, r1
900052c0:	b082      	sub	sp, #8
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
900052c2:	2301      	movs	r3, #1
900052c4:	2196      	movs	r1, #150	; 0x96
{
900052c6:	f88d 4007 	strb.w	r4, [sp, #7]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
900052ca:	f10d 0207 	add.w	r2, sp, #7
900052ce:	6804      	ldr	r4, [r0, #0]
900052d0:	6880      	ldr	r0, [r0, #8]
900052d2:	47a0      	blx	r4
  return ft5336_write_reg(ctx, FT5336_DISTANCE_ZOOM_REG, &value, 1);
}
900052d4:	b002      	add	sp, #8
900052d6:	bd10      	pop	{r4, pc}

900052d8 <ft5336_g_mode>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_GMODE_REG register
  * @retval Component status
  */
int32_t  ft5336_g_mode(ft5336_ctx_t *ctx, uint8_t value)
{
900052d8:	b510      	push	{r4, lr}
900052da:	460c      	mov	r4, r1
900052dc:	b082      	sub	sp, #8
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
900052de:	2301      	movs	r3, #1
900052e0:	21a4      	movs	r1, #164	; 0xa4
{
900052e2:	f88d 4007 	strb.w	r4, [sp, #7]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
900052e6:	f10d 0207 	add.w	r2, sp, #7
900052ea:	6804      	ldr	r4, [r0, #0]
900052ec:	6880      	ldr	r0, [r0, #8]
900052ee:	47a0      	blx	r4
  return ft5336_write_reg(ctx, FT5336_GMODE_REG, &value, 1);
}
900052f0:	b002      	add	sp, #8
900052f2:	bd10      	pop	{r4, pc}

900052f4 <ft5336_chip_id>:
  * @param  ctx Component context 
  * @param  value Pointer to FT5336_CHIP_ID_REG register value
  * @retval Component status
  */
int32_t  ft5336_chip_id(ft5336_ctx_t *ctx, uint8_t *value)
{
900052f4:	b410      	push	{r4}
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
900052f6:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
{
900052fa:	460a      	mov	r2, r1
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
900052fc:	2301      	movs	r3, #1
900052fe:	46a4      	mov	ip, r4
90005300:	21a8      	movs	r1, #168	; 0xa8
    *value &= FT5336_CHIP_ID_BIT_MASK; 
    *value = *value >> FT5336_CHIP_ID_BIT_POSITION; 
  }
  
  return ret;
}
90005302:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
90005306:	4760      	bx	ip

90005308 <MT48LC4M32B2_Init>:
  * @param  Ctx : Component object pointer
  * @param  pRegMode : Pointer to Register Mode stucture
  * @retval error status
  */
int32_t MT48LC4M32B2_Init(SDRAM_HandleTypeDef *Ctx, MT48LC4M32B2_Context_t *pRegMode) 
{
90005308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  int32_t ret = MT48LC4M32B2_ERROR;
  
  /* Step 1: Configure a clock configuration enable command */
  if(MT48LC4M32B2_ClockEnable(Ctx, pRegMode->TargetBank) == MT48LC4M32B2_OK)
9000530a:	680b      	ldr	r3, [r1, #0]
{
9000530c:	460d      	mov	r5, r1
  * @param  Interface : Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t MT48LC4M32B2_ClockEnable(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
  Command.CommandMode            = MT48LC4M32B2_CLK_ENABLE_CMD;
9000530e:	4c2a      	ldr	r4, [pc, #168]	; (900053b8 <MT48LC4M32B2_Init+0xb0>)
  Command.CommandTarget          = Interface;
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
90005310:	f64f 72ff 	movw	r2, #65535	; 0xffff
{
90005314:	4607      	mov	r7, r0
  Command.CommandTarget          = Interface;
90005316:	6063      	str	r3, [r4, #4]
  Command.ModeRegisterDefinition = 0;
90005318:	2300      	movs	r3, #0
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
9000531a:	4621      	mov	r1, r4
  Command.ModeRegisterDefinition = 0;
9000531c:	60e3      	str	r3, [r4, #12]
  Command.CommandMode            = MT48LC4M32B2_CLK_ENABLE_CMD;
9000531e:	2301      	movs	r3, #1
90005320:	6023      	str	r3, [r4, #0]
  Command.AutoRefreshNumber      = 1;
90005322:	60a3      	str	r3, [r4, #8]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
90005324:	f006 fc88 	bl	9000bc38 <HAL_SDRAM_SendCommand>
90005328:	2800      	cmp	r0, #0
9000532a:	d142      	bne.n	900053b2 <MT48LC4M32B2_Init+0xaa>
  * @retval MT48LC4M32B2_OK
  */
static int32_t MT48LC4M32B2_Delay(uint32_t Delay)
{  
  uint32_t tickstart;
  tickstart = HAL_GetTick();
9000532c:	f000 ff46 	bl	900061bc <HAL_GetTick>
90005330:	4606      	mov	r6, r0
  while((HAL_GetTick() - tickstart) < Delay)
90005332:	f000 ff43 	bl	900061bc <HAL_GetTick>
90005336:	4286      	cmp	r6, r0
90005338:	d0fb      	beq.n	90005332 <MT48LC4M32B2_Init+0x2a>
  Command.CommandMode            = MT48LC4M32B2_PALL_CMD;
9000533a:	2302      	movs	r3, #2
    if(MT48LC4M32B2_Precharge(Ctx, pRegMode->TargetBank) == MT48LC4M32B2_OK)
9000533c:	682a      	ldr	r2, [r5, #0]
  Command.AutoRefreshNumber      = 1;
9000533e:	2601      	movs	r6, #1
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
90005340:	491d      	ldr	r1, [pc, #116]	; (900053b8 <MT48LC4M32B2_Init+0xb0>)
  Command.CommandMode            = MT48LC4M32B2_PALL_CMD;
90005342:	6023      	str	r3, [r4, #0]
  Command.ModeRegisterDefinition = 0;
90005344:	2300      	movs	r3, #0
  Command.CommandTarget          = Interface;
90005346:	6062      	str	r2, [r4, #4]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
90005348:	4638      	mov	r0, r7
9000534a:	f64f 72ff 	movw	r2, #65535	; 0xffff
  Command.AutoRefreshNumber      = 1;
9000534e:	60a6      	str	r6, [r4, #8]
  Command.ModeRegisterDefinition = 0;
90005350:	60e3      	str	r3, [r4, #12]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
90005352:	f006 fc71 	bl	9000bc38 <HAL_SDRAM_SendCommand>
90005356:	bb60      	cbnz	r0, 900053b2 <MT48LC4M32B2_Init+0xaa>
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
90005358:	4917      	ldr	r1, [pc, #92]	; (900053b8 <MT48LC4M32B2_Init+0xb0>)
  Command.CommandMode            = RefreshMode;
9000535a:	e9d5 3200 	ldrd	r3, r2, [r5]
  Command.ModeRegisterDefinition = 0;
9000535e:	60e0      	str	r0, [r4, #12]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
90005360:	4638      	mov	r0, r7
  Command.CommandMode            = RefreshMode;
90005362:	e9c4 2300 	strd	r2, r3, [r4]
  Command.AutoRefreshNumber      = 8;
90005366:	2308      	movs	r3, #8
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
90005368:	f64f 72ff 	movw	r2, #65535	; 0xffff
  Command.AutoRefreshNumber      = 8;
9000536c:	60a3      	str	r3, [r4, #8]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
9000536e:	f006 fc63 	bl	9000bc38 <HAL_SDRAM_SendCommand>
90005372:	b9f0      	cbnz	r0, 900053b2 <MT48LC4M32B2_Init+0xaa>
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
90005374:	4910      	ldr	r1, [pc, #64]	; (900053b8 <MT48LC4M32B2_Init+0xb0>)
90005376:	4638      	mov	r0, r7
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
90005378:	e9d5 3203 	ldrd	r3, r2, [r5, #12]
9000537c:	4313      	orrs	r3, r2
                     pRegMode->BurstType     |\
9000537e:	696a      	ldr	r2, [r5, #20]
90005380:	4313      	orrs	r3, r2
                     pRegMode->CASLatency    |\
90005382:	69aa      	ldr	r2, [r5, #24]
90005384:	4313      	orrs	r3, r2
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
90005386:	69ea      	ldr	r2, [r5, #28]
90005388:	4313      	orrs	r3, r2
  Command.CommandTarget          = pRegMode->TargetBank;
9000538a:	682a      	ldr	r2, [r5, #0]
  Command.ModeRegisterDefinition = tmpmrd;
9000538c:	60e3      	str	r3, [r4, #12]
  Command.CommandMode            = MT48LC4M32B2_LOAD_MODE_CMD;
9000538e:	2304      	movs	r3, #4
  Command.CommandTarget          = pRegMode->TargetBank;
90005390:	e9c4 2601 	strd	r2, r6, [r4, #4]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
90005394:	f64f 72ff 	movw	r2, #65535	; 0xffff
  Command.CommandMode            = MT48LC4M32B2_LOAD_MODE_CMD;
90005398:	6023      	str	r3, [r4, #0]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
9000539a:	f006 fc4d 	bl	9000bc38 <HAL_SDRAM_SendCommand>
9000539e:	b940      	cbnz	r0, 900053b2 <MT48LC4M32B2_Init+0xaa>
  if(HAL_SDRAM_ProgramRefreshRate(Ctx, RefreshCount) != HAL_OK)
900053a0:	68a9      	ldr	r1, [r5, #8]
900053a2:	4638      	mov	r0, r7
900053a4:	f006 fc68 	bl	9000bc78 <HAL_SDRAM_ProgramRefreshRate>
900053a8:	3800      	subs	r0, #0
900053aa:	bf18      	it	ne
900053ac:	2001      	movne	r0, #1
900053ae:	4240      	negs	r0, r0
}
900053b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  int32_t ret = MT48LC4M32B2_ERROR;
900053b2:	f04f 30ff 	mov.w	r0, #4294967295
}
900053b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
900053b8:	24007608 	.word	0x24007608

900053bc <BSP_I2C4_DeInit>:
  */
int32_t BSP_I2C4_DeInit(void)
{
  int32_t ret  = BSP_ERROR_NONE;

  I2c4InitCounter--;
900053bc:	4a10      	ldr	r2, [pc, #64]	; (90005400 <BSP_I2C4_DeInit+0x44>)
{
900053be:	b508      	push	{r3, lr}
  I2c4InitCounter--;
900053c0:	6813      	ldr	r3, [r2, #0]
900053c2:	3b01      	subs	r3, #1
900053c4:	6013      	str	r3, [r2, #0]

  if (I2c4InitCounter == 0U)
900053c6:	b10b      	cbz	r3, 900053cc <BSP_I2C4_DeInit+0x10>
  int32_t ret  = BSP_ERROR_NONE;
900053c8:	2000      	movs	r0, #0
      ret = BSP_ERROR_BUS_FAILURE;
    }
  }

  return ret;
}
900053ca:	bd08      	pop	{r3, pc}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C4_SCL_PIN;
  HAL_GPIO_DeInit(BUS_I2C4_SCL_GPIO_PORT, gpio_init_structure.Pin );
900053cc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
900053d0:	480c      	ldr	r0, [pc, #48]	; (90005404 <BSP_I2C4_DeInit+0x48>)
900053d2:	f001 fd03 	bl	90006ddc <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C4_SDA_PIN;
  HAL_GPIO_DeInit(BUS_I2C4_SDA_GPIO_PORT, gpio_init_structure.Pin);
900053d6:	480b      	ldr	r0, [pc, #44]	; (90005404 <BSP_I2C4_DeInit+0x48>)
900053d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
900053dc:	f001 fcfe 	bl	90006ddc <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C4_CLK_DISABLE();
900053e0:	4a09      	ldr	r2, [pc, #36]	; (90005408 <BSP_I2C4_DeInit+0x4c>)
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
900053e2:	480a      	ldr	r0, [pc, #40]	; (9000540c <BSP_I2C4_DeInit+0x50>)
  BUS_I2C4_CLK_DISABLE();
900053e4:	f8d2 30f4 	ldr.w	r3, [r2, #244]	; 0xf4
900053e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
900053ec:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
900053f0:	f002 f876 	bl	900074e0 <HAL_I2C_DeInit>
900053f4:	2800      	cmp	r0, #0
900053f6:	d0e7      	beq.n	900053c8 <BSP_I2C4_DeInit+0xc>
      ret = BSP_ERROR_BUS_FAILURE;
900053f8:	f06f 0007 	mvn.w	r0, #7
}
900053fc:	bd08      	pop	{r3, pc}
900053fe:	bf00      	nop
90005400:	24007618 	.word	0x24007618
90005404:	58020c00 	.word	0x58020c00
90005408:	58024400 	.word	0x58024400
9000540c:	24008020 	.word	0x24008020

90005410 <MX_I2C4_Init>:
  hI2c->Init.OwnAddress1      = 0;
90005410:	2300      	movs	r3, #0
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
90005412:	2201      	movs	r2, #1
{
90005414:	b510      	push	{r4, lr}
  hI2c->Init.OwnAddress1      = 0;
90005416:	e9c0 1301 	strd	r1, r3, [r0, #4]
  hI2c->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
9000541a:	e9c0 2303 	strd	r2, r3, [r0, #12]
  hI2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
9000541e:	e9c0 3305 	strd	r3, r3, [r0, #20]
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
90005422:	e9c0 3307 	strd	r3, r3, [r0, #28]
{
90005426:	4604      	mov	r4, r0
  if (HAL_I2C_Init(hI2c) != HAL_OK)
90005428:	f002 f804 	bl	90007434 <HAL_I2C_Init>
9000542c:	b108      	cbz	r0, 90005432 <MX_I2C4_Init+0x22>
    status = HAL_ERROR;
9000542e:	2001      	movs	r0, #1
}
90005430:	bd10      	pop	{r4, pc}
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
90005432:	4601      	mov	r1, r0
90005434:	4620      	mov	r0, r4
90005436:	f002 fd97 	bl	90007f68 <HAL_I2CEx_ConfigAnalogFilter>
9000543a:	2800      	cmp	r0, #0
9000543c:	d1f7      	bne.n	9000542e <MX_I2C4_Init+0x1e>
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
9000543e:	4601      	mov	r1, r0
90005440:	4620      	mov	r0, r4
90005442:	f002 fdbb 	bl	90007fbc <HAL_I2CEx_ConfigDigitalFilter>
    status = HAL_ERROR;
90005446:	3800      	subs	r0, #0
90005448:	bf18      	it	ne
9000544a:	2001      	movne	r0, #1
}
9000544c:	bd10      	pop	{r4, pc}
9000544e:	bf00      	nop

90005450 <BSP_I2C4_Init>:
  if (I2c4InitCounter == 0U)
90005450:	4b99      	ldr	r3, [pc, #612]	; (900056b8 <BSP_I2C4_Init+0x268>)
  hbus_i2c4.Instance = BUS_I2C4;
90005452:	489a      	ldr	r0, [pc, #616]	; (900056bc <BSP_I2C4_Init+0x26c>)
90005454:	4a9a      	ldr	r2, [pc, #616]	; (900056c0 <BSP_I2C4_Init+0x270>)
  if (I2c4InitCounter == 0U)
90005456:	6819      	ldr	r1, [r3, #0]
{
90005458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9000545c:	b09f      	sub	sp, #124	; 0x7c
  hbus_i2c4.Instance = BUS_I2C4;
9000545e:	6002      	str	r2, [r0, #0]
  if (I2c4InitCounter == 0U)
90005460:	9103      	str	r1, [sp, #12]
90005462:	b119      	cbz	r1, 9000546c <BSP_I2C4_Init+0x1c>
  int32_t ret = BSP_ERROR_NONE;
90005464:	2000      	movs	r0, #0
}
90005466:	b01f      	add	sp, #124	; 0x7c
90005468:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    I2c4InitCounter++;
9000546c:	2201      	movs	r2, #1
9000546e:	601a      	str	r2, [r3, #0]
    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
90005470:	f002 fd74 	bl	90007f5c <HAL_I2C_GetState>
90005474:	2800      	cmp	r0, #0
90005476:	d1f5      	bne.n	90005464 <BSP_I2C4_Init+0x14>
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
90005478:	4c92      	ldr	r4, [pc, #584]	; (900056c4 <BSP_I2C4_Init+0x274>)
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
9000547a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
9000547e:	2112      	movs	r1, #18
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
90005480:	2504      	movs	r5, #4
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
90005482:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
90005486:	2600      	movs	r6, #0
90005488:	2702      	movs	r7, #2
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
9000548a:	f043 0308 	orr.w	r3, r3, #8
9000548e:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
90005492:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
90005496:	f003 0308 	and.w	r3, r3, #8
9000549a:	9315      	str	r3, [sp, #84]	; 0x54
9000549c:	9b15      	ldr	r3, [sp, #84]	; 0x54
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
9000549e:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
900054a2:	f043 0308 	orr.w	r3, r3, #8
900054a6:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
900054aa:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
900054ae:	951c      	str	r5, [sp, #112]	; 0x70
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
900054b0:	f003 0308 	and.w	r3, r3, #8
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
900054b4:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
900054b8:	9316      	str	r3, [sp, #88]	; 0x58
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
900054ba:	a918      	add	r1, sp, #96	; 0x60
900054bc:	4882      	ldr	r0, [pc, #520]	; (900056c8 <BSP_I2C4_Init+0x278>)
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
900054be:	9b16      	ldr	r3, [sp, #88]	; 0x58
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
900054c0:	e9cd 671a 	strd	r6, r7, [sp, #104]	; 0x68
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
900054c4:	f001 fb58 	bl	90006b78 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
900054c8:	2312      	movs	r3, #18
900054ca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
900054ce:	a918      	add	r1, sp, #96	; 0x60
900054d0:	487d      	ldr	r0, [pc, #500]	; (900056c8 <BSP_I2C4_Init+0x278>)
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
900054d2:	951c      	str	r5, [sp, #112]	; 0x70
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
900054d4:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
900054d8:	e9cd 671a 	strd	r6, r7, [sp, #104]	; 0x68
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
900054dc:	f001 fb4c 	bl	90006b78 <HAL_GPIO_Init>
  BUS_I2C4_CLK_ENABLE();
900054e0:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
900054e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
900054e8:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
900054ec:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
900054f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
900054f4:	9317      	str	r3, [sp, #92]	; 0x5c
900054f6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  BUS_I2C4_FORCE_RESET();
900054f8:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
900054fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
90005500:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
  BUS_I2C4_RELEASE_RESET();
90005504:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
90005508:	f023 0380 	bic.w	r3, r3, #128	; 0x80
9000550c:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
90005510:	f005 fa88 	bl	9000aa24 <HAL_RCC_GetPCLK2Freq>
  if((clock_src_freq != 0U) && (i2c_freq != 0U))
90005514:	2800      	cmp	r0, #0
90005516:	f000 81f6 	beq.w	90005906 <BSP_I2C4_Init+0x4b6>
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
9000551a:	4b6c      	ldr	r3, [pc, #432]	; (900056cc <BSP_I2C4_Init+0x27c>)
  uint32_t prev_presc = I2C_PRESC_MAX;
9000551c:	f04f 0b10 	mov.w	fp, #16
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
90005520:	9e03      	ldr	r6, [sp, #12]
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
90005522:	eb03 0350 	add.w	r3, r3, r0, lsr #1
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90005526:	f8df a1ac 	ldr.w	sl, [pc, #428]	; 900056d4 <BSP_I2C4_Init+0x284>
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
9000552a:	4635      	mov	r5, r6
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
9000552c:	fbb3 f7f0 	udiv	r7, r3, r0
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
90005530:	00bb      	lsls	r3, r7, #2
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
90005532:	9702      	str	r7, [sp, #8]
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
90005534:	eb07 0247 	add.w	r2, r7, r7, lsl #1
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
90005538:	f5c3 7cc3 	rsb	ip, r3, #390	; 0x186
9000553c:	4b64      	ldr	r3, [pc, #400]	; (900056d0 <BSP_I2C4_Init+0x280>)
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
9000553e:	f1c2 0432 	rsb	r4, r2, #50	; 0x32
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
90005542:	0079      	lsls	r1, r7, #1
90005544:	681b      	ldr	r3, [r3, #0]
90005546:	ea2c 7cec 	bic.w	ip, ip, ip, asr #31
9000554a:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
9000554e:	9113      	str	r1, [sp, #76]	; 0x4c
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
90005550:	4699      	mov	r9, r3
90005552:	930a      	str	r3, [sp, #40]	; 0x28
          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
90005554:	ebb4 0f47 	cmp.w	r4, r7, lsl #1
90005558:	46b8      	mov	r8, r7
9000555a:	eb07 0347 	add.w	r3, r7, r7, lsl #1
9000555e:	bf94      	ite	ls
90005560:	2101      	movls	r1, #1
90005562:	2100      	movhi	r1, #0
90005564:	ebbc 0f47 	cmp.w	ip, r7, lsl #1
90005568:	f001 0101 	and.w	r1, r1, #1
9000556c:	eb07 0287 	add.w	r2, r7, r7, lsl #2
90005570:	bf38      	it	cc
90005572:	2100      	movcc	r1, #0
90005574:	429c      	cmp	r4, r3
90005576:	ebc7 00c7 	rsb	r0, r7, r7, lsl #3
9000557a:	9105      	str	r1, [sp, #20]
9000557c:	bf8c      	ite	hi
9000557e:	2100      	movhi	r1, #0
90005580:	2101      	movls	r1, #1
90005582:	459c      	cmp	ip, r3
90005584:	bf38      	it	cc
90005586:	2100      	movcc	r1, #0
90005588:	ebb4 0f87 	cmp.w	r4, r7, lsl #2
9000558c:	9106      	str	r1, [sp, #24]
9000558e:	eb07 0142 	add.w	r1, r7, r2, lsl #1
90005592:	9104      	str	r1, [sp, #16]
90005594:	eb07 0183 	add.w	r1, r7, r3, lsl #2
90005598:	9111      	str	r1, [sp, #68]	; 0x44
9000559a:	bf94      	ite	ls
9000559c:	2101      	movls	r1, #1
9000559e:	2100      	movhi	r1, #0
900055a0:	ebbc 0f87 	cmp.w	ip, r7, lsl #2
900055a4:	f001 0e01 	and.w	lr, r1, #1
900055a8:	bf38      	it	cc
900055aa:	f04f 0e00 	movcc.w	lr, #0
900055ae:	4294      	cmp	r4, r2
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
900055b0:	f04f 0100 	mov.w	r1, #0
          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
900055b4:	f8cd e01c 	str.w	lr, [sp, #28]
900055b8:	bf8c      	ite	hi
900055ba:	f04f 0e00 	movhi.w	lr, #0
900055be:	f04f 0e01 	movls.w	lr, #1
900055c2:	4594      	cmp	ip, r2
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
900055c4:	9101      	str	r1, [sp, #4]
          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
900055c6:	bf38      	it	cc
900055c8:	f04f 0e00 	movcc.w	lr, #0
900055cc:	ebb4 0f43 	cmp.w	r4, r3, lsl #1
900055d0:	bf98      	it	ls
900055d2:	2101      	movls	r1, #1
900055d4:	ebbc 0f43 	cmp.w	ip, r3, lsl #1
900055d8:	f8cd e020 	str.w	lr, [sp, #32]
900055dc:	f001 0101 	and.w	r1, r1, #1
900055e0:	bf38      	it	cc
900055e2:	2100      	movcc	r1, #0
900055e4:	4284      	cmp	r4, r0
900055e6:	9109      	str	r1, [sp, #36]	; 0x24
900055e8:	4601      	mov	r1, r0
900055ea:	bf8c      	ite	hi
900055ec:	2000      	movhi	r0, #0
900055ee:	2001      	movls	r0, #1
900055f0:	458c      	cmp	ip, r1
900055f2:	bf38      	it	cc
900055f4:	2000      	movcc	r0, #0
900055f6:	ebb4 0fc7 	cmp.w	r4, r7, lsl #3
900055fa:	900b      	str	r0, [sp, #44]	; 0x2c
900055fc:	bf94      	ite	ls
900055fe:	2001      	movls	r0, #1
90005600:	2000      	movhi	r0, #0
90005602:	ebbc 0fc7 	cmp.w	ip, r7, lsl #3
90005606:	f000 0001 	and.w	r0, r0, #1
9000560a:	bf38      	it	cc
9000560c:	2000      	movcc	r0, #0
9000560e:	900c      	str	r0, [sp, #48]	; 0x30
90005610:	eb07 00c7 	add.w	r0, r7, r7, lsl #3
90005614:	4284      	cmp	r4, r0
90005616:	bf8c      	ite	hi
90005618:	f04f 0e00 	movhi.w	lr, #0
9000561c:	f04f 0e01 	movls.w	lr, #1
90005620:	4584      	cmp	ip, r0
90005622:	bf38      	it	cc
90005624:	f04f 0e00 	movcc.w	lr, #0
90005628:	ebb4 0f42 	cmp.w	r4, r2, lsl #1
9000562c:	4670      	mov	r0, lr
9000562e:	bf94      	ite	ls
90005630:	2001      	movls	r0, #1
90005632:	2000      	movhi	r0, #0
90005634:	ebbc 0f42 	cmp.w	ip, r2, lsl #1
90005638:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
9000563c:	f04f 0e00 	mov.w	lr, #0
90005640:	f000 0001 	and.w	r0, r0, #1
90005644:	bf38      	it	cc
90005646:	2000      	movcc	r0, #0
90005648:	900e      	str	r0, [sp, #56]	; 0x38
9000564a:	9804      	ldr	r0, [sp, #16]
9000564c:	4284      	cmp	r4, r0
9000564e:	4602      	mov	r2, r0
90005650:	bf8c      	ite	hi
90005652:	2200      	movhi	r2, #0
90005654:	2201      	movls	r2, #1
90005656:	4584      	cmp	ip, r0
90005658:	bf38      	it	cc
9000565a:	2200      	movcc	r2, #0
9000565c:	ebb4 0f83 	cmp.w	r4, r3, lsl #2
90005660:	920f      	str	r2, [sp, #60]	; 0x3c
90005662:	bf94      	ite	ls
90005664:	2201      	movls	r2, #1
90005666:	2200      	movhi	r2, #0
90005668:	ebbc 0f83 	cmp.w	ip, r3, lsl #2
9000566c:	f002 0201 	and.w	r2, r2, #1
90005670:	bf38      	it	cc
90005672:	2200      	movcc	r2, #0
90005674:	9210      	str	r2, [sp, #64]	; 0x40
90005676:	9a11      	ldr	r2, [sp, #68]	; 0x44
90005678:	4294      	cmp	r4, r2
9000567a:	4613      	mov	r3, r2
9000567c:	bf8c      	ite	hi
9000567e:	2300      	movhi	r3, #0
90005680:	2301      	movls	r3, #1
90005682:	4594      	cmp	ip, r2
90005684:	bf38      	it	cc
90005686:	2300      	movcc	r3, #0
90005688:	ebb4 0f41 	cmp.w	r4, r1, lsl #1
9000568c:	9311      	str	r3, [sp, #68]	; 0x44
9000568e:	bf94      	ite	ls
90005690:	2301      	movls	r3, #1
90005692:	2300      	movhi	r3, #0
90005694:	ebbc 0f41 	cmp.w	ip, r1, lsl #1
90005698:	f003 0301 	and.w	r3, r3, #1
9000569c:	bf38      	it	cc
9000569e:	2300      	movcc	r3, #0
900056a0:	9312      	str	r3, [sp, #72]	; 0x48
900056a2:	ebc7 1307 	rsb	r3, r7, r7, lsl #4
900056a6:	429c      	cmp	r4, r3
900056a8:	bf8c      	ite	hi
900056aa:	2200      	movhi	r2, #0
900056ac:	2201      	movls	r2, #1
900056ae:	459c      	cmp	ip, r3
900056b0:	bf38      	it	cc
900056b2:	2200      	movcc	r2, #0
900056b4:	9204      	str	r2, [sp, #16]
900056b6:	e014      	b.n	900056e2 <BSP_I2C4_Init+0x292>
900056b8:	24007618 	.word	0x24007618
900056bc:	24008020 	.word	0x24008020
900056c0:	58001c00 	.word	0x58001c00
900056c4:	58024400 	.word	0x58024400
900056c8:	58020c00 	.word	0x58020c00
900056cc:	3b9aca00 	.word	0x3b9aca00
900056d0:	2400801c 	.word	0x2400801c
900056d4:	2400761c 	.word	0x2400761c
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
900056d8:	f1be 0f10 	cmp.w	lr, #16
900056dc:	44b8      	add	r8, r7
900056de:	f000 826c 	beq.w	90005bba <BSP_I2C4_Init+0x76a>
      if (tscldel >= (uint32_t)tscldel_min)
900056e2:	f5b8 7faf 	cmp.w	r8, #350	; 0x15e
900056e6:	4673      	mov	r3, lr
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
900056e8:	f10e 0e01 	add.w	lr, lr, #1
      if (tscldel >= (uint32_t)tscldel_min)
900056ec:	d3f4      	bcc.n	900056d8 <BSP_I2C4_Init+0x288>
            if(presc != prev_presc)
900056ee:	ebbb 0205 	subs.w	r2, fp, r5
900056f2:	bf18      	it	ne
900056f4:	2201      	movne	r2, #1
900056f6:	2c00      	cmp	r4, #0
900056f8:	bf18      	it	ne
900056fa:	2200      	movne	r2, #0
900056fc:	2a00      	cmp	r2, #0
900056fe:	f040 824a 	bne.w	90005b96 <BSP_I2C4_Init+0x746>
          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
90005702:	45bc      	cmp	ip, r7
90005704:	bf34      	ite	cc
90005706:	2200      	movcc	r2, #0
90005708:	2201      	movcs	r2, #1
9000570a:	42bc      	cmp	r4, r7
9000570c:	bf88      	it	hi
9000570e:	2200      	movhi	r2, #0
            if(presc != prev_presc)
90005710:	45ab      	cmp	fp, r5
90005712:	bf0c      	ite	eq
90005714:	2200      	moveq	r2, #0
90005716:	f002 0201 	andne.w	r2, r2, #1
9000571a:	2a00      	cmp	r2, #0
9000571c:	f000 80fd 	beq.w	9000591a <BSP_I2C4_Init+0x4ca>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90005720:	eb09 0189 	add.w	r1, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
90005724:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90005728:	2001      	movs	r0, #1
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
9000572a:	f84a 5021 	str.w	r5, [sl, r1, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
9000572e:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90005732:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90005736:	6088      	str	r0, [r1, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90005738:	4650      	mov	r0, sl
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
9000573a:	604b      	str	r3, [r1, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
9000573c:	f200 81a5 	bhi.w	90005a8a <BSP_I2C4_Init+0x63a>
90005740:	46ab      	mov	fp, r5
            if(presc != prev_presc)
90005742:	9906      	ldr	r1, [sp, #24]
90005744:	45ab      	cmp	fp, r5
90005746:	bf0c      	ite	eq
90005748:	2100      	moveq	r1, #0
9000574a:	f001 0101 	andne.w	r1, r1, #1
9000574e:	2900      	cmp	r1, #0
90005750:	f000 80ff 	beq.w	90005952 <BSP_I2C4_Init+0x502>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90005754:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
90005758:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
9000575c:	2003      	movs	r0, #3
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
9000575e:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90005762:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90005766:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
9000576a:	6090      	str	r0, [r2, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
9000576c:	4650      	mov	r0, sl
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
9000576e:	6053      	str	r3, [r2, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90005770:	f200 818b 	bhi.w	90005a8a <BSP_I2C4_Init+0x63a>
90005774:	460a      	mov	r2, r1
90005776:	46ab      	mov	fp, r5
            if(presc != prev_presc)
90005778:	9908      	ldr	r1, [sp, #32]
9000577a:	45ab      	cmp	fp, r5
9000577c:	bf0c      	ite	eq
9000577e:	2100      	moveq	r1, #0
90005780:	f001 0101 	andne.w	r1, r1, #1
90005784:	2900      	cmp	r1, #0
90005786:	f000 80ff 	beq.w	90005988 <BSP_I2C4_Init+0x538>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
9000578a:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
9000578e:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90005792:	2005      	movs	r0, #5
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90005794:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90005798:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
9000579c:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
900057a0:	6090      	str	r0, [r2, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900057a2:	4650      	mov	r0, sl
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
900057a4:	6053      	str	r3, [r2, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
900057a6:	f200 8170 	bhi.w	90005a8a <BSP_I2C4_Init+0x63a>
900057aa:	460a      	mov	r2, r1
900057ac:	46ab      	mov	fp, r5
            if(presc != prev_presc)
900057ae:	990b      	ldr	r1, [sp, #44]	; 0x2c
900057b0:	45ab      	cmp	fp, r5
900057b2:	bf0c      	ite	eq
900057b4:	2100      	moveq	r1, #0
900057b6:	f001 0101 	andne.w	r1, r1, #1
900057ba:	2900      	cmp	r1, #0
900057bc:	f000 80fe 	beq.w	900059bc <BSP_I2C4_Init+0x56c>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900057c0:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
900057c4:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
900057c8:	2007      	movs	r0, #7
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900057ca:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
900057ce:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900057d2:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
900057d6:	6090      	str	r0, [r2, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900057d8:	4650      	mov	r0, sl
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
900057da:	6053      	str	r3, [r2, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
900057dc:	f200 8155 	bhi.w	90005a8a <BSP_I2C4_Init+0x63a>
900057e0:	460a      	mov	r2, r1
900057e2:	46ab      	mov	fp, r5
            if(presc != prev_presc)
900057e4:	990d      	ldr	r1, [sp, #52]	; 0x34
900057e6:	45ab      	cmp	fp, r5
900057e8:	bf0c      	ite	eq
900057ea:	2100      	moveq	r1, #0
900057ec:	f001 0101 	andne.w	r1, r1, #1
900057f0:	2900      	cmp	r1, #0
900057f2:	f000 80fd 	beq.w	900059f0 <BSP_I2C4_Init+0x5a0>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900057f6:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
900057fa:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
900057fe:	2009      	movs	r0, #9
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90005800:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90005804:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90005808:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
9000580c:	6090      	str	r0, [r2, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
9000580e:	4650      	mov	r0, sl
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
90005810:	6053      	str	r3, [r2, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90005812:	f200 813a 	bhi.w	90005a8a <BSP_I2C4_Init+0x63a>
90005816:	460a      	mov	r2, r1
90005818:	46ab      	mov	fp, r5
            if(presc != prev_presc)
9000581a:	990f      	ldr	r1, [sp, #60]	; 0x3c
9000581c:	45ab      	cmp	fp, r5
9000581e:	bf0c      	ite	eq
90005820:	2100      	moveq	r1, #0
90005822:	f001 0101 	andne.w	r1, r1, #1
90005826:	2900      	cmp	r1, #0
90005828:	f000 80fc 	beq.w	90005a24 <BSP_I2C4_Init+0x5d4>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
9000582c:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
90005830:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90005834:	200b      	movs	r0, #11
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90005836:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
9000583a:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
9000583e:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90005842:	6090      	str	r0, [r2, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90005844:	4650      	mov	r0, sl
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
90005846:	6053      	str	r3, [r2, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90005848:	f200 811f 	bhi.w	90005a8a <BSP_I2C4_Init+0x63a>
9000584c:	46ab      	mov	fp, r5
            if(presc != prev_presc)
9000584e:	9e11      	ldr	r6, [sp, #68]	; 0x44
90005850:	455d      	cmp	r5, fp
90005852:	bf0c      	ite	eq
90005854:	2600      	moveq	r6, #0
90005856:	f006 0601 	andne.w	r6, r6, #1
9000585a:	2e00      	cmp	r6, #0
9000585c:	f000 80fb 	beq.w	90005a56 <BSP_I2C4_Init+0x606>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90005860:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
90005864:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90005868:	210d      	movs	r1, #13
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
9000586a:	4650      	mov	r0, sl
9000586c:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90005870:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90005874:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
90005878:	6053      	str	r3, [r2, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
9000587a:	6091      	str	r1, [r2, #8]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
9000587c:	f200 8105 	bhi.w	90005a8a <BSP_I2C4_Init+0x63a>
90005880:	4631      	mov	r1, r6
90005882:	46ab      	mov	fp, r5
            if(presc != prev_presc)
90005884:	9e04      	ldr	r6, [sp, #16]
90005886:	455d      	cmp	r5, fp
90005888:	bf0c      	ite	eq
9000588a:	2600      	moveq	r6, #0
9000588c:	f006 0601 	andne.w	r6, r6, #1
90005890:	2e00      	cmp	r6, #0
90005892:	f000 817c 	beq.w	90005b8e <BSP_I2C4_Init+0x73e>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90005896:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
9000589a:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
9000589e:	4650      	mov	r0, sl
900058a0:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
900058a4:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
900058a8:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
900058ac:	6053      	str	r3, [r2, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
900058ae:	f04f 030f 	mov.w	r3, #15
900058b2:	6093      	str	r3, [r2, #8]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
900058b4:	f200 80e9 	bhi.w	90005a8a <BSP_I2C4_Init+0x63a>
900058b8:	46ab      	mov	fp, r5
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
900058ba:	e70d      	b.n	900056d8 <BSP_I2C4_Init+0x288>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
900058bc:	9a07      	ldr	r2, [sp, #28]
900058be:	9b08      	ldr	r3, [sp, #32]
900058c0:	3214      	adds	r2, #20
900058c2:	3301      	adds	r3, #1
900058c4:	9207      	str	r2, [sp, #28]
900058c6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
900058c8:	9308      	str	r3, [sp, #32]
900058ca:	4293      	cmp	r3, r2
900058cc:	f040 80ff 	bne.w	90005ace <BSP_I2C4_Init+0x67e>
        if (idx < I2C_VALID_TIMING_NBR)
900058d0:	297f      	cmp	r1, #127	; 0x7f
900058d2:	d818      	bhi.n	90005906 <BSP_I2C4_Init+0x4b6>
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
900058d4:	eb01 0381 	add.w	r3, r1, r1, lsl #2
900058d8:	990b      	ldr	r1, [sp, #44]	; 0x2c
900058da:	eb01 0283 	add.w	r2, r1, r3, lsl #2
900058de:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
900058e2:	6850      	ldr	r0, [r2, #4]
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
900058e4:	7c13      	ldrb	r3, [r2, #16]
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
900058e6:	0500      	lsls	r0, r0, #20
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
900058e8:	ea43 7304 	orr.w	r3, r3, r4, lsl #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
900058ec:	f400 0070 	and.w	r0, r0, #15728640	; 0xf00000
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
900058f0:	e9d2 1202 	ldrd	r1, r2, [r2, #8]
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
900058f4:	4303      	orrs	r3, r0
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
900058f6:	0409      	lsls	r1, r1, #16
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
900058f8:	0212      	lsls	r2, r2, #8
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
900058fa:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
900058fe:	b292      	uxth	r2, r2
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
90005900:	430b      	orrs	r3, r1
90005902:	4313      	orrs	r3, r2
90005904:	9303      	str	r3, [sp, #12]
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
90005906:	9903      	ldr	r1, [sp, #12]
90005908:	48b5      	ldr	r0, [pc, #724]	; (90005be0 <BSP_I2C4_Init+0x790>)
9000590a:	f7ff fd81 	bl	90005410 <MX_I2C4_Init>
9000590e:	2800      	cmp	r0, #0
90005910:	f43f ada8 	beq.w	90005464 <BSP_I2C4_Init+0x14>
          ret = BSP_ERROR_BUS_FAILURE;
90005914:	f06f 0007 	mvn.w	r0, #7
  return ret;
90005918:	e5a5      	b.n	90005466 <BSP_I2C4_Init+0x16>
            if(presc != prev_presc)
9000591a:	4632      	mov	r2, r6
9000591c:	9905      	ldr	r1, [sp, #20]
9000591e:	45ab      	cmp	fp, r5
90005920:	bf0c      	ite	eq
90005922:	2100      	moveq	r1, #0
90005924:	f001 0101 	andne.w	r1, r1, #1
90005928:	2900      	cmp	r1, #0
9000592a:	f43f af0a 	beq.w	90005742 <BSP_I2C4_Init+0x2f2>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
9000592e:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
90005932:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90005936:	2002      	movs	r0, #2
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90005938:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
9000593c:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90005940:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90005944:	6090      	str	r0, [r2, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90005946:	4650      	mov	r0, sl
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
90005948:	6053      	str	r3, [r2, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
9000594a:	f200 809e 	bhi.w	90005a8a <BSP_I2C4_Init+0x63a>
9000594e:	460a      	mov	r2, r1
90005950:	46ab      	mov	fp, r5
            if(presc != prev_presc)
90005952:	9907      	ldr	r1, [sp, #28]
90005954:	45ab      	cmp	fp, r5
90005956:	bf0c      	ite	eq
90005958:	2100      	moveq	r1, #0
9000595a:	f001 0101 	andne.w	r1, r1, #1
9000595e:	2900      	cmp	r1, #0
90005960:	f43f af0a 	beq.w	90005778 <BSP_I2C4_Init+0x328>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90005964:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
90005968:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
9000596c:	2004      	movs	r0, #4
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
9000596e:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90005972:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90005976:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
9000597a:	6090      	str	r0, [r2, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
9000597c:	4650      	mov	r0, sl
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
9000597e:	6053      	str	r3, [r2, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90005980:	f200 8083 	bhi.w	90005a8a <BSP_I2C4_Init+0x63a>
90005984:	460a      	mov	r2, r1
90005986:	46ab      	mov	fp, r5
            if(presc != prev_presc)
90005988:	9909      	ldr	r1, [sp, #36]	; 0x24
9000598a:	45ab      	cmp	fp, r5
9000598c:	bf0c      	ite	eq
9000598e:	2100      	moveq	r1, #0
90005990:	f001 0101 	andne.w	r1, r1, #1
90005994:	2900      	cmp	r1, #0
90005996:	f43f af0a 	beq.w	900057ae <BSP_I2C4_Init+0x35e>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
9000599a:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
9000599e:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
900059a2:	2006      	movs	r0, #6
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900059a4:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
900059a8:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900059ac:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
900059b0:	6090      	str	r0, [r2, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900059b2:	4650      	mov	r0, sl
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
900059b4:	6053      	str	r3, [r2, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
900059b6:	d868      	bhi.n	90005a8a <BSP_I2C4_Init+0x63a>
900059b8:	460a      	mov	r2, r1
900059ba:	46ab      	mov	fp, r5
            if(presc != prev_presc)
900059bc:	990c      	ldr	r1, [sp, #48]	; 0x30
900059be:	45ab      	cmp	fp, r5
900059c0:	bf0c      	ite	eq
900059c2:	2100      	moveq	r1, #0
900059c4:	f001 0101 	andne.w	r1, r1, #1
900059c8:	2900      	cmp	r1, #0
900059ca:	f43f af0b 	beq.w	900057e4 <BSP_I2C4_Init+0x394>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900059ce:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
900059d2:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
900059d6:	2008      	movs	r0, #8
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900059d8:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
900059dc:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900059e0:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
900059e4:	6090      	str	r0, [r2, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900059e6:	4650      	mov	r0, sl
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
900059e8:	6053      	str	r3, [r2, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
900059ea:	d84e      	bhi.n	90005a8a <BSP_I2C4_Init+0x63a>
900059ec:	460a      	mov	r2, r1
900059ee:	46ab      	mov	fp, r5
            if(presc != prev_presc)
900059f0:	990e      	ldr	r1, [sp, #56]	; 0x38
900059f2:	45ab      	cmp	fp, r5
900059f4:	bf0c      	ite	eq
900059f6:	2100      	moveq	r1, #0
900059f8:	f001 0101 	andne.w	r1, r1, #1
900059fc:	2900      	cmp	r1, #0
900059fe:	f43f af0c 	beq.w	9000581a <BSP_I2C4_Init+0x3ca>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90005a02:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
90005a06:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90005a0a:	200a      	movs	r0, #10
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90005a0c:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90005a10:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90005a14:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90005a18:	6090      	str	r0, [r2, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90005a1a:	4650      	mov	r0, sl
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
90005a1c:	6053      	str	r3, [r2, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90005a1e:	d834      	bhi.n	90005a8a <BSP_I2C4_Init+0x63a>
90005a20:	460a      	mov	r2, r1
90005a22:	46ab      	mov	fp, r5
            if(presc != prev_presc)
90005a24:	9910      	ldr	r1, [sp, #64]	; 0x40
90005a26:	45ab      	cmp	fp, r5
90005a28:	bf0c      	ite	eq
90005a2a:	2100      	moveq	r1, #0
90005a2c:	f001 0101 	andne.w	r1, r1, #1
90005a30:	2900      	cmp	r1, #0
90005a32:	f000 80ae 	beq.w	90005b92 <BSP_I2C4_Init+0x742>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90005a36:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
90005a3a:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90005a3e:	200c      	movs	r0, #12
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90005a40:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90005a44:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90005a48:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90005a4c:	6090      	str	r0, [r2, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90005a4e:	4650      	mov	r0, sl
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
90005a50:	6053      	str	r3, [r2, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90005a52:	d81a      	bhi.n	90005a8a <BSP_I2C4_Init+0x63a>
90005a54:	46ab      	mov	fp, r5
            if(presc != prev_presc)
90005a56:	9e12      	ldr	r6, [sp, #72]	; 0x48
90005a58:	455d      	cmp	r5, fp
90005a5a:	bf0c      	ite	eq
90005a5c:	2600      	moveq	r6, #0
90005a5e:	f006 0601 	andne.w	r6, r6, #1
90005a62:	2e00      	cmp	r6, #0
90005a64:	f43f af0e 	beq.w	90005884 <BSP_I2C4_Init+0x434>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90005a68:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
90005a6c:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90005a70:	4650      	mov	r0, sl
90005a72:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
90005a76:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90005a7a:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
90005a7e:	6053      	str	r3, [r2, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90005a80:	f04f 030e 	mov.w	r3, #14
90005a84:	6093      	str	r3, [r2, #8]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90005a86:	f67f af17 	bls.w	900058b8 <BSP_I2C4_Init+0x468>
90005a8a:	4b56      	ldr	r3, [pc, #344]	; (90005be4 <BSP_I2C4_Init+0x794>)
90005a8c:	900b      	str	r0, [sp, #44]	; 0x2c
90005a8e:	f8c3 9000 	str.w	r9, [r3]
              I2c_valid_timing_nbr ++;
90005a92:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
90005a96:	9b13      	ldr	r3, [sp, #76]	; 0x4c
90005a98:	f240 4201 	movw	r2, #1025	; 0x401
90005a9c:	f240 2657 	movw	r6, #599	; 0x257
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
90005aa0:	f640 1ac4 	movw	sl, #2500	; 0x9c4
90005aa4:	1ad2      	subs	r2, r2, r3
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
90005aa6:	f240 4b12 	movw	fp, #1042	; 0x412
90005aaa:	920d      	str	r2, [sp, #52]	; 0x34
90005aac:	9a02      	ldr	r2, [sp, #8]
90005aae:	4296      	cmp	r6, r2
90005ab0:	bf38      	it	cc
90005ab2:	4616      	movcc	r6, r2
90005ab4:	4a4c      	ldr	r2, [pc, #304]	; (90005be8 <BSP_I2C4_Init+0x798>)
90005ab6:	9207      	str	r2, [sp, #28]
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
90005ab8:	2200      	movs	r2, #0
90005aba:	9208      	str	r2, [sp, #32]
90005abc:	f04f 32ff 	mov.w	r2, #4294967295
90005ac0:	4611      	mov	r1, r2
90005ac2:	f103 0232 	add.w	r2, r3, #50	; 0x32
90005ac6:	f6a3 0334 	subw	r3, r3, #2100	; 0x834
90005aca:	920c      	str	r2, [sp, #48]	; 0x30
90005acc:	930e      	str	r3, [sp, #56]	; 0x38
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
90005ace:	9b07      	ldr	r3, [sp, #28]
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
90005ad0:	f04f 0800 	mov.w	r8, #0
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
90005ad4:	6818      	ldr	r0, [r3, #0]
90005ad6:	9b02      	ldr	r3, [sp, #8]
90005ad8:	fb00 3003 	mla	r0, r0, r3, r3
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
90005adc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
90005ade:	1a1b      	subs	r3, r3, r0
90005ae0:	ea4f 0943 	mov.w	r9, r3, lsl #1
90005ae4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
90005ae6:	eb03 0e00 	add.w	lr, r3, r0
90005aea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
90005aec:	4403      	add	r3, r0
90005aee:	9309      	str	r3, [sp, #36]	; 0x24
90005af0:	e006      	b.n	90005b00 <BSP_I2C4_Init+0x6b0>
90005af2:	f5b8 7f80 	cmp.w	r8, #256	; 0x100
90005af6:	4486      	add	lr, r0
90005af8:	eba9 0900 	sub.w	r9, r9, r0
90005afc:	f43f aede 	beq.w	900058bc <BSP_I2C4_Init+0x46c>
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
90005b00:	f240 5214 	movw	r2, #1300	; 0x514
90005b04:	f8cd 8004 	str.w	r8, [sp, #4]
90005b08:	f1ae 0332 	sub.w	r3, lr, #50	; 0x32
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
90005b0c:	f108 0801 	add.w	r8, r8, #1
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
90005b10:	4596      	cmp	lr, r2
90005b12:	d9ee      	bls.n	90005af2 <BSP_I2C4_Init+0x6a2>
90005b14:	9a02      	ldr	r2, [sp, #8]
90005b16:	ebb2 0f93 	cmp.w	r2, r3, lsr #2
90005b1a:	d2ea      	bcs.n	90005af2 <BSP_I2C4_Init+0x6a2>
90005b1c:	f640 0c34 	movw	ip, #2100	; 0x834
90005b20:	464c      	mov	r4, r9
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
90005b22:	f8cd 9018 	str.w	r9, [sp, #24]
90005b26:	2200      	movs	r2, #0
90005b28:	ebac 0c03 	sub.w	ip, ip, r3
90005b2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
90005b2e:	4689      	mov	r9, r1
90005b30:	4473      	add	r3, lr
90005b32:	e9cd e804 	strd	lr, r8, [sp, #16]
90005b36:	f8dd 8020 	ldr.w	r8, [sp, #32]
90005b3a:	f8dd e01c 	ldr.w	lr, [sp, #28]
90005b3e:	e005      	b.n	90005b4c <BSP_I2C4_Init+0x6fc>
90005b40:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
90005b44:	4403      	add	r3, r0
90005b46:	eba4 0400 	sub.w	r4, r4, r0
90005b4a:	d01a      	beq.n	90005b82 <BSP_I2C4_Init+0x732>
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
90005b4c:	eb0c 0103 	add.w	r1, ip, r3
90005b50:	4617      	mov	r7, r2
90005b52:	f203 15a1 	addw	r5, r3, #417	; 0x1a1
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
90005b56:	3201      	adds	r2, #1
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
90005b58:	42b1      	cmp	r1, r6
90005b5a:	d9f1      	bls.n	90005b40 <BSP_I2C4_Init+0x6f0>
90005b5c:	455d      	cmp	r5, fp
90005b5e:	d8ef      	bhi.n	90005b40 <BSP_I2C4_Init+0x6f0>
            if (error < 0)
90005b60:	ea33 0123 	bics.w	r1, r3, r3, asr #32
90005b64:	bf28      	it	cs
90005b66:	4621      	movcs	r1, r4
            if ((uint32_t)error < prev_error)
90005b68:	458a      	cmp	sl, r1
90005b6a:	d9e9      	bls.n	90005b40 <BSP_I2C4_Init+0x6f0>
              I2c_valid_timing[count].sclh = sclh;
90005b6c:	468a      	mov	sl, r1
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
90005b6e:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
              I2c_valid_timing[count].scll = scll;
90005b72:	9901      	ldr	r1, [sp, #4]
              I2c_valid_timing[count].sclh = sclh;
90005b74:	46c1      	mov	r9, r8
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
90005b76:	4403      	add	r3, r0
90005b78:	eba4 0400 	sub.w	r4, r4, r0
              I2c_valid_timing[count].sclh = sclh;
90005b7c:	e9ce 7103 	strd	r7, r1, [lr, #12]
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
90005b80:	d1e4      	bne.n	90005b4c <BSP_I2C4_Init+0x6fc>
90005b82:	4649      	mov	r1, r9
90005b84:	f8dd 9018 	ldr.w	r9, [sp, #24]
90005b88:	e9dd e804 	ldrd	lr, r8, [sp, #16]
90005b8c:	e7b1      	b.n	90005af2 <BSP_I2C4_Init+0x6a2>
90005b8e:	460e      	mov	r6, r1
90005b90:	e5a2      	b.n	900056d8 <BSP_I2C4_Init+0x288>
            if(presc != prev_presc)
90005b92:	4611      	mov	r1, r2
90005b94:	e65b      	b.n	9000584e <BSP_I2C4_Init+0x3fe>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90005b96:	eb09 0189 	add.w	r1, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
90005b9a:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90005b9e:	2000      	movs	r0, #0
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90005ba0:	f84a 5021 	str.w	r5, [sl, r1, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90005ba4:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90005ba8:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90005bac:	6088      	str	r0, [r1, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90005bae:	4650      	mov	r0, sl
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
90005bb0:	604b      	str	r3, [r1, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90005bb2:	f63f af6a 	bhi.w	90005a8a <BSP_I2C4_Init+0x63a>
90005bb6:	46ab      	mov	fp, r5
90005bb8:	e6b0      	b.n	9000591c <BSP_I2C4_Init+0x4cc>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
90005bba:	3501      	adds	r5, #1
90005bbc:	9b02      	ldr	r3, [sp, #8]
90005bbe:	2d10      	cmp	r5, #16
90005bc0:	441f      	add	r7, r3
90005bc2:	f47f acc7 	bne.w	90005554 <BSP_I2C4_Init+0x104>
90005bc6:	b126      	cbz	r6, 90005bd2 <BSP_I2C4_Init+0x782>
90005bc8:	4b06      	ldr	r3, [pc, #24]	; (90005be4 <BSP_I2C4_Init+0x794>)
90005bca:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
90005bce:	f8c3 9000 	str.w	r9, [r3]
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
90005bd2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
90005bd4:	2b00      	cmp	r3, #0
90005bd6:	f43f ae96 	beq.w	90005906 <BSP_I2C4_Init+0x4b6>
90005bda:	4b03      	ldr	r3, [pc, #12]	; (90005be8 <BSP_I2C4_Init+0x798>)
90005bdc:	930b      	str	r3, [sp, #44]	; 0x2c
90005bde:	e75a      	b.n	90005a96 <BSP_I2C4_Init+0x646>
90005be0:	24008020 	.word	0x24008020
90005be4:	2400801c 	.word	0x2400801c
90005be8:	2400761c 	.word	0x2400761c

90005bec <BSP_I2C4_WriteReg>:
{
90005bec:	b530      	push	{r4, r5, lr}
90005bee:	4614      	mov	r4, r2
90005bf0:	b085      	sub	sp, #20
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
  if(HAL_I2C_Mem_Write(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
90005bf2:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
90005bf6:	460a      	mov	r2, r1
90005bf8:	9301      	str	r3, [sp, #4]
90005bfa:	4601      	mov	r1, r0
90005bfc:	2301      	movs	r3, #1
90005bfe:	4809      	ldr	r0, [pc, #36]	; (90005c24 <BSP_I2C4_WriteReg+0x38>)
90005c00:	9502      	str	r5, [sp, #8]
90005c02:	9400      	str	r4, [sp, #0]
90005c04:	f001 ff0c 	bl	90007a20 <HAL_I2C_Mem_Write>
90005c08:	b908      	cbnz	r0, 90005c0e <BSP_I2C4_WriteReg+0x22>
}
90005c0a:	b005      	add	sp, #20
90005c0c:	bd30      	pop	{r4, r5, pc}
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
90005c0e:	4805      	ldr	r0, [pc, #20]	; (90005c24 <BSP_I2C4_WriteReg+0x38>)
90005c10:	f002 f9a8 	bl	90007f64 <HAL_I2C_GetError>
      ret =  BSP_ERROR_PERIPH_FAILURE;
90005c14:	2804      	cmp	r0, #4
90005c16:	bf0c      	ite	eq
90005c18:	f06f 0065 	mvneq.w	r0, #101	; 0x65
90005c1c:	f06f 0003 	mvnne.w	r0, #3
90005c20:	e7f3      	b.n	90005c0a <BSP_I2C4_WriteReg+0x1e>
90005c22:	bf00      	nop
90005c24:	24008020 	.word	0x24008020

90005c28 <BSP_I2C4_ReadReg>:
{
90005c28:	b530      	push	{r4, r5, lr}
90005c2a:	4614      	mov	r4, r2
90005c2c:	b085      	sub	sp, #20
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
90005c2e:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
90005c32:	460a      	mov	r2, r1
90005c34:	9301      	str	r3, [sp, #4]
90005c36:	4601      	mov	r1, r0
90005c38:	2301      	movs	r3, #1
90005c3a:	4809      	ldr	r0, [pc, #36]	; (90005c60 <BSP_I2C4_ReadReg+0x38>)
90005c3c:	9502      	str	r5, [sp, #8]
90005c3e:	9400      	str	r4, [sp, #0]
90005c40:	f002 f822 	bl	90007c88 <HAL_I2C_Mem_Read>
90005c44:	b908      	cbnz	r0, 90005c4a <BSP_I2C4_ReadReg+0x22>
}
90005c46:	b005      	add	sp, #20
90005c48:	bd30      	pop	{r4, r5, pc}
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
90005c4a:	4805      	ldr	r0, [pc, #20]	; (90005c60 <BSP_I2C4_ReadReg+0x38>)
90005c4c:	f002 f98a 	bl	90007f64 <HAL_I2C_GetError>
      ret =  BSP_ERROR_PERIPH_FAILURE;
90005c50:	2804      	cmp	r0, #4
90005c52:	bf0c      	ite	eq
90005c54:	f06f 0065 	mvneq.w	r0, #101	; 0x65
90005c58:	f06f 0003 	mvnne.w	r0, #3
90005c5c:	e7f3      	b.n	90005c46 <BSP_I2C4_ReadReg+0x1e>
90005c5e:	bf00      	nop
90005c60:	24008020 	.word	0x24008020

90005c64 <BSP_GetTick>:
  return (int32_t)HAL_GetTick();
90005c64:	f000 baaa 	b.w	900061bc <HAL_GetTick>

90005c68 <BSP_SDRAM_DeInit>:
  */
int32_t BSP_SDRAM_DeInit(uint32_t Instance)
{
  int32_t ret = BSP_ERROR_NONE;

  if(Instance >= SDRAM_INSTANCES_NBR)
90005c68:	b970      	cbnz	r0, 90005c88 <BSP_SDRAM_DeInit+0x20>
{
90005c6a:	b510      	push	{r4, lr}
90005c6c:	4604      	mov	r4, r0
  {
    ret =  BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    (void)HAL_SDRAM_DeInit(&hsdram[Instance]);
90005c6e:	4808      	ldr	r0, [pc, #32]	; (90005c90 <BSP_SDRAM_DeInit+0x28>)
90005c70:	f005 ffd4 	bl	9000bc1c <HAL_SDRAM_DeInit>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(hSdram);

  /* Disable NVIC configuration for DMA interrupt */
  HAL_NVIC_DisableIRQ(SDRAM_MDMAx_IRQn);
90005c74:	207a      	movs	r0, #122	; 0x7a
90005c76:	f000 fb1d 	bl	900062b4 <HAL_NVIC_DisableIRQ>

  /* Deinitialize the stream for new transfer */
  mdma_handle.Instance = SDRAM_MDMAx_CHANNEL;
90005c7a:	4b06      	ldr	r3, [pc, #24]	; (90005c94 <BSP_SDRAM_DeInit+0x2c>)
90005c7c:	4806      	ldr	r0, [pc, #24]	; (90005c98 <BSP_SDRAM_DeInit+0x30>)
90005c7e:	6003      	str	r3, [r0, #0]
  (void)HAL_MDMA_DeInit(&mdma_handle);
90005c80:	f003 ff42 	bl	90009b08 <HAL_MDMA_DeInit>
  int32_t ret = BSP_ERROR_NONE;
90005c84:	4620      	mov	r0, r4
}
90005c86:	bd10      	pop	{r4, pc}
    ret =  BSP_ERROR_WRONG_PARAM;
90005c88:	f06f 0001 	mvn.w	r0, #1
}
90005c8c:	4770      	bx	lr
90005c8e:	bf00      	nop
90005c90:	24008074 	.word	0x24008074
90005c94:	52000040 	.word	0x52000040
90005c98:	240080a8 	.word	0x240080a8

90005c9c <MX_SDRAM_BANK2_Init>:
{
90005c9c:	b530      	push	{r4, r5, lr}
  hSdram->Init.MemoryDataWidth    = MemoryDataWidth;
90005c9e:	6102      	str	r2, [r0, #16]
  hSdram->Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
90005ca0:	2200      	movs	r2, #0
{
90005ca2:	b089      	sub	sp, #36	; 0x24
  hsdram->Instance = FMC_SDRAM_DEVICE;
90005ca4:	4c13      	ldr	r4, [pc, #76]	; (90005cf4 <MX_SDRAM_BANK2_Init+0x58>)
  hSdram->Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
90005ca6:	6082      	str	r2, [r0, #8]
  hsdram->Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
90005ca8:	2540      	movs	r5, #64	; 0x40
  hSdram->Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
90005caa:	61c2      	str	r2, [r0, #28]
  sdram_timing.ExitSelfRefreshDelay = 7;
90005cac:	2307      	movs	r3, #7
  hSdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
90005cae:	6282      	str	r2, [r0, #40]	; 0x28
  sdram_timing.LoadToActiveDelay    = 2;
90005cb0:	2202      	movs	r2, #2
  hSdram->Init.RowBitsNumber      = RowBitsNumber;
90005cb2:	60c1      	str	r1, [r0, #12]
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
90005cb4:	f44f 71c0 	mov.w	r1, #384	; 0x180
  sdram_timing.LoadToActiveDelay    = 2;
90005cb8:	9200      	str	r2, [sp, #0]
  sdram_timing.RCDDelay             = 2;
90005cba:	9206      	str	r2, [sp, #24]
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
90005cbc:	2201      	movs	r2, #1
  sdram_timing.ExitSelfRefreshDelay = 7;
90005cbe:	9301      	str	r3, [sp, #4]
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
90005cc0:	6042      	str	r2, [r0, #4]
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
90005cc2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  hsdram->Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
90005cc6:	6165      	str	r5, [r4, #20]
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
90005cc8:	f44f 6500 	mov.w	r5, #2048	; 0x800
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
90005ccc:	6181      	str	r1, [r0, #24]
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
90005cce:	4669      	mov	r1, sp
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
90005cd0:	e9c0 5208 	strd	r5, r2, [r0, #32]
  sdram_timing.SelfRefreshTime      = 4;
90005cd4:	2204      	movs	r2, #4
90005cd6:	e9cd 2302 	strd	r2, r3, [sp, #8]
  sdram_timing.WriteRecoveryTime    = 2;
90005cda:	2202      	movs	r2, #2
90005cdc:	2302      	movs	r3, #2
90005cde:	e9cd 2304 	strd	r2, r3, [sp, #16]
  hsdram->Instance = FMC_SDRAM_DEVICE;
90005ce2:	4b05      	ldr	r3, [pc, #20]	; (90005cf8 <MX_SDRAM_BANK2_Init+0x5c>)
90005ce4:	6023      	str	r3, [r4, #0]
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
90005ce6:	f005 ff6f 	bl	9000bbc8 <HAL_SDRAM_Init>
}
90005cea:	3800      	subs	r0, #0
90005cec:	bf18      	it	ne
90005cee:	2001      	movne	r0, #1
90005cf0:	b009      	add	sp, #36	; 0x24
90005cf2:	bd30      	pop	{r4, r5, pc}
90005cf4:	24008074 	.word	0x24008074
90005cf8:	52004140 	.word	0x52004140

90005cfc <BSP_SDRAM_Init>:
  if(Instance >=SDRAM_INSTANCES_NBR)
90005cfc:	2800      	cmp	r0, #0
90005cfe:	f040 80d2 	bne.w	90005ea6 <BSP_SDRAM_Init+0x1aa>
  __HAL_RCC_FMC_CLK_ENABLE();
90005d02:	4b6c      	ldr	r3, [pc, #432]	; (90005eb4 <BSP_SDRAM_Init+0x1b8>)
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
90005d04:	210c      	movs	r1, #12
  __HAL_RCC_FMC_CLK_ENABLE();
90005d06:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
90005d0a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
{
90005d0e:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_FMC_CLK_ENABLE();
90005d10:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
{
90005d14:	b08e      	sub	sp, #56	; 0x38
  __HAL_RCC_FMC_CLK_ENABLE();
90005d16:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
90005d1a:	4605      	mov	r5, r0
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
90005d1c:	f24c 7003 	movw	r0, #50947	; 0xc703
  mdma_handle.Init.Request = MDMA_REQUEST_SW;
90005d20:	4c65      	ldr	r4, [pc, #404]	; (90005eb8 <BSP_SDRAM_Init+0x1bc>)
  __HAL_RCC_FMC_CLK_ENABLE();
90005d22:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
90005d26:	4e65      	ldr	r6, [pc, #404]	; (90005ebc <BSP_SDRAM_Init+0x1c0>)
  __HAL_RCC_FMC_CLK_ENABLE();
90005d28:	9201      	str	r2, [sp, #4]
90005d2a:	9a01      	ldr	r2, [sp, #4]
  SDRAM_MDMAx_CLK_ENABLE();
90005d2c:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
90005d30:	f042 0201 	orr.w	r2, r2, #1
90005d34:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
90005d38:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
90005d3c:	f002 0201 	and.w	r2, r2, #1
90005d40:	9202      	str	r2, [sp, #8]
90005d42:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
90005d44:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
90005d48:	f042 0208 	orr.w	r2, r2, #8
90005d4c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
90005d50:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
90005d54:	f002 0208 	and.w	r2, r2, #8
90005d58:	9203      	str	r2, [sp, #12]
90005d5a:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
90005d5c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
90005d60:	f042 0210 	orr.w	r2, r2, #16
90005d64:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
90005d68:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
90005d6c:	f002 0210 	and.w	r2, r2, #16
90005d70:	9204      	str	r2, [sp, #16]
90005d72:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
90005d74:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
90005d78:	f042 0220 	orr.w	r2, r2, #32
90005d7c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
90005d80:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
90005d84:	f002 0220 	and.w	r2, r2, #32
90005d88:	9205      	str	r2, [sp, #20]
90005d8a:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
90005d8c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
90005d90:	f042 0240 	orr.w	r2, r2, #64	; 0x40
90005d94:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
90005d98:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
90005d9c:	f002 0240 	and.w	r2, r2, #64	; 0x40
90005da0:	9206      	str	r2, [sp, #24]
90005da2:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
90005da4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
90005da8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
90005dac:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
90005db0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
90005db4:	910c      	str	r1, [sp, #48]	; 0x30
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
90005db6:	2102      	movs	r1, #2
  __HAL_RCC_GPIOH_CLK_ENABLE();
90005db8:	f003 0380 	and.w	r3, r3, #128	; 0x80
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
90005dbc:	e9cd 0108 	strd	r0, r1, [sp, #32]
90005dc0:	2001      	movs	r0, #1
90005dc2:	2103      	movs	r1, #3
  __HAL_RCC_GPIOH_CLK_ENABLE();
90005dc4:	9307      	str	r3, [sp, #28]
90005dc6:	9b07      	ldr	r3, [sp, #28]
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
90005dc8:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
90005dcc:	a908      	add	r1, sp, #32
90005dce:	483c      	ldr	r0, [pc, #240]	; (90005ec0 <BSP_SDRAM_Init+0x1c4>)
90005dd0:	f000 fed2 	bl	90006b78 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
90005dd4:	f64f 7383 	movw	r3, #65411	; 0xff83
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
90005dd8:	a908      	add	r1, sp, #32
90005dda:	483a      	ldr	r0, [pc, #232]	; (90005ec4 <BSP_SDRAM_Init+0x1c8>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
90005ddc:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
90005dde:	f000 fecb 	bl	90006b78 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
90005de2:	f64f 033f 	movw	r3, #63551	; 0xf83f
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
90005de6:	a908      	add	r1, sp, #32
90005de8:	4837      	ldr	r0, [pc, #220]	; (90005ec8 <BSP_SDRAM_Init+0x1cc>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
90005dea:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
90005dec:	f000 fec4 	bl	90006b78 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
90005df0:	f248 1333 	movw	r3, #33075	; 0x8133
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
90005df4:	a908      	add	r1, sp, #32
90005df6:	4835      	ldr	r0, [pc, #212]	; (90005ecc <BSP_SDRAM_Init+0x1d0>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
90005df8:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
90005dfa:	f000 febd 	bl	90006b78 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 ;
90005dfe:	23e0      	movs	r3, #224	; 0xe0
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
90005e00:	a908      	add	r1, sp, #32
90005e02:	4833      	ldr	r0, [pc, #204]	; (90005ed0 <BSP_SDRAM_Init+0x1d4>)
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 ;
90005e04:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
90005e06:	f000 feb7 	bl	90006b78 <HAL_GPIO_Init>
  mdma_handle.Init.Priority = MDMA_PRIORITY_HIGH;
90005e0a:	2380      	movs	r3, #128	; 0x80
  mdma_handle.Init.Request = MDMA_REQUEST_SW;
90005e0c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  mdma_handle.Init.SourceInc = MDMA_SRC_INC_WORD;
90005e10:	f240 2102 	movw	r1, #514	; 0x202
  HAL_MDMA_DeInit(&mdma_handle);
90005e14:	4620      	mov	r0, r4
  mdma_handle.Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;
90005e16:	6223      	str	r3, [r4, #32]
  mdma_handle.Init.BufferTransferLength = 128;
90005e18:	62a3      	str	r3, [r4, #40]	; 0x28
  mdma_handle.Init.Request = MDMA_REQUEST_SW;
90005e1a:	6062      	str	r2, [r4, #4]
  mdma_handle.Init.TransferTriggerMode = MDMA_BLOCK_TRANSFER;
90005e1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  mdma_handle.Init.SourceInc = MDMA_SRC_INC_WORD;
90005e20:	6161      	str	r1, [r4, #20]
  mdma_handle.Init.TransferTriggerMode = MDMA_BLOCK_TRANSFER;
90005e22:	60a2      	str	r2, [r4, #8]
  mdma_handle.Instance = SDRAM_MDMAx_CHANNEL;
90005e24:	4a2b      	ldr	r2, [pc, #172]	; (90005ed4 <BSP_SDRAM_Init+0x1d8>)
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
90005e26:	6334      	str	r4, [r6, #48]	; 0x30
  mdma_handle.Instance = SDRAM_MDMAx_CHANNEL;
90005e28:	6022      	str	r2, [r4, #0]
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
90005e2a:	6426      	str	r6, [r4, #64]	; 0x40
  mdma_handle.Init.Priority = MDMA_PRIORITY_HIGH;
90005e2c:	e9c4 3503 	strd	r3, r5, [r4, #12]
  mdma_handle.Init.DestinationInc = MDMA_DEST_INC_WORD;
90005e30:	f640 0308 	movw	r3, #2056	; 0x808
90005e34:	61a3      	str	r3, [r4, #24]
  mdma_handle.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
90005e36:	2320      	movs	r3, #32
90005e38:	61e3      	str	r3, [r4, #28]
  mdma_handle.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
90005e3a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
  mdma_handle.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
90005e3e:	e9c4 550b 	strd	r5, r5, [r4, #44]	; 0x2c
  mdma_handle.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
90005e42:	6263      	str	r3, [r4, #36]	; 0x24
  mdma_handle.Init.DestBlockAddressOffset = 0;
90005e44:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
  HAL_MDMA_DeInit(&mdma_handle);
90005e48:	f003 fe5e 	bl	90009b08 <HAL_MDMA_DeInit>
  HAL_MDMA_Init(&mdma_handle);
90005e4c:	4620      	mov	r0, r4
90005e4e:	f003 fde1 	bl	90009a14 <HAL_MDMA_Init>
  HAL_NVIC_SetPriority(SDRAM_MDMAx_IRQn, 0x0F, 0);
90005e52:	462a      	mov	r2, r5
90005e54:	210f      	movs	r1, #15
90005e56:	207a      	movs	r0, #122	; 0x7a
90005e58:	f000 f9e0 	bl	9000621c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_MDMAx_IRQn);
90005e5c:	207a      	movs	r0, #122	; 0x7a
90005e5e:	f000 fa1b 	bl	90006298 <HAL_NVIC_EnableIRQ>
    if(MX_SDRAM_BANK2_Init(&hsdram[Instance],FMC_SDRAM_ROW_BITS_NUM_12, FMC_SDRAM_MEM_BUS_WIDTH_16) != HAL_OK)
90005e62:	2210      	movs	r2, #16
90005e64:	2104      	movs	r1, #4
90005e66:	4630      	mov	r0, r6
90005e68:	f7ff ff18 	bl	90005c9c <MX_SDRAM_BANK2_Init>
90005e6c:	b9f0      	cbnz	r0, 90005eac <BSP_SDRAM_Init+0x1b0>
      pRegMode.TargetBank      = FMC_SDRAM_CMD_TARGET_BANK2;
90005e6e:	491a      	ldr	r1, [pc, #104]	; (90005ed8 <BSP_SDRAM_Init+0x1dc>)
90005e70:	2208      	movs	r2, #8
90005e72:	2303      	movs	r3, #3
      if(MT48LC4M32B2_Init(&hsdram[Instance], &pRegMode) != MT48LC4M32B2_OK)
90005e74:	4630      	mov	r0, r6
      pRegMode.TargetBank      = FMC_SDRAM_CMD_TARGET_BANK2;
90005e76:	e9c1 2300 	strd	r2, r3, [r1]
90005e7a:	f240 6203 	movw	r2, #1539	; 0x603
90005e7e:	2300      	movs	r3, #0
90005e80:	e9c1 2302 	strd	r2, r3, [r1, #8]
90005e84:	2200      	movs	r2, #0
90005e86:	2330      	movs	r3, #48	; 0x30
90005e88:	e9c1 2304 	strd	r2, r3, [r1, #16]
90005e8c:	2200      	movs	r2, #0
90005e8e:	f44f 7300 	mov.w	r3, #512	; 0x200
90005e92:	e9c1 2306 	strd	r2, r3, [r1, #24]
      if(MT48LC4M32B2_Init(&hsdram[Instance], &pRegMode) != MT48LC4M32B2_OK)
90005e96:	f7ff fa37 	bl	90005308 <MT48LC4M32B2_Init>
        ret =  BSP_ERROR_COMPONENT_FAILURE;
90005e9a:	2800      	cmp	r0, #0
90005e9c:	bf18      	it	ne
90005e9e:	f06f 0004 	mvnne.w	r0, #4
}
90005ea2:	b00e      	add	sp, #56	; 0x38
90005ea4:	bd70      	pop	{r4, r5, r6, pc}
    ret =  BSP_ERROR_WRONG_PARAM;
90005ea6:	f06f 0001 	mvn.w	r0, #1
}
90005eaa:	4770      	bx	lr
      ret = BSP_ERROR_NO_INIT;
90005eac:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
90005eb0:	e7f7      	b.n	90005ea2 <BSP_SDRAM_Init+0x1a6>
90005eb2:	bf00      	nop
90005eb4:	58024400 	.word	0x58024400
90005eb8:	24008114 	.word	0x24008114
90005ebc:	24008074 	.word	0x24008074
90005ec0:	58020c00 	.word	0x58020c00
90005ec4:	58021000 	.word	0x58021000
90005ec8:	58021400 	.word	0x58021400
90005ecc:	58021800 	.word	0x58021800
90005ed0:	58021c00 	.word	0x58021c00
90005ed4:	52000040 	.word	0x52000040
90005ed8:	24008180 	.word	0x24008180

90005edc <BSP_TS_Init>:
  * @param  Instance TS instance. Could be only 0.
  * @param  TS_Init  TS Init structure
  * @retval BSP status
  */
int32_t BSP_TS_Init(uint32_t Instance, TS_Init_t *TS_Init)
{
90005edc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90005ee0:	b088      	sub	sp, #32
  int32_t ret = BSP_ERROR_NONE;

  if((Instance >=TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
90005ee2:	2800      	cmp	r0, #0
90005ee4:	d16b      	bne.n	90005fbe <BSP_TS_Init+0xe2>
90005ee6:	680b      	ldr	r3, [r1, #0]
90005ee8:	460c      	mov	r4, r1
90005eea:	1e5a      	subs	r2, r3, #1
90005eec:	f5b2 7ff0 	cmp.w	r2, #480	; 0x1e0
90005ef0:	d265      	bcs.n	90005fbe <BSP_TS_Init+0xe2>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
90005ef2:	684a      	ldr	r2, [r1, #4]
90005ef4:	1e51      	subs	r1, r2, #1
90005ef6:	f5b1 7f88 	cmp.w	r1, #272	; 0x110
90005efa:	d260      	bcs.n	90005fbe <BSP_TS_Init+0xe2>
                         (TS_Init->Accuracy > TS_MIN((TS_Init->Width), (TS_Init->Height))))
90005efc:	4293      	cmp	r3, r2
90005efe:	bf28      	it	cs
90005f00:	4613      	movcs	r3, r2
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
90005f02:	68e2      	ldr	r2, [r4, #12]
90005f04:	429a      	cmp	r2, r3
90005f06:	d85a      	bhi.n	90005fbe <BSP_TS_Init+0xe2>
  FT5336_IO_t              IOCtx;
  static FT5336_Object_t   FT5336Obj;
  uint32_t ft5336_id       = 0;

  /* Configure the touch screen driver */
  IOCtx.Address     = TS_I2C_ADDRESS;
90005f08:	2270      	movs	r2, #112	; 0x70
  IOCtx.Init        = BSP_I2C4_Init;
90005f0a:	4b31      	ldr	r3, [pc, #196]	; (90005fd0 <BSP_TS_Init+0xf4>)
  IOCtx.DeInit      = BSP_I2C4_DeInit;
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
  IOCtx.GetTick     = BSP_GetTick;

  if(FT5336_RegisterBusIO (&FT5336Obj, &IOCtx) != FT5336_OK)
90005f0c:	4d31      	ldr	r5, [pc, #196]	; (90005fd4 <BSP_TS_Init+0xf8>)
90005f0e:	a902      	add	r1, sp, #8
  IOCtx.Address     = TS_I2C_ADDRESS;
90005f10:	f8ad 2010 	strh.w	r2, [sp, #16]
  IOCtx.Init        = BSP_I2C4_Init;
90005f14:	9302      	str	r3, [sp, #8]
  IOCtx.DeInit      = BSP_I2C4_DeInit;
90005f16:	4a30      	ldr	r2, [pc, #192]	; (90005fd8 <BSP_TS_Init+0xfc>)
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
90005f18:	4b30      	ldr	r3, [pc, #192]	; (90005fdc <BSP_TS_Init+0x100>)
  IOCtx.DeInit      = BSP_I2C4_DeInit;
90005f1a:	9203      	str	r2, [sp, #12]
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
90005f1c:	9306      	str	r3, [sp, #24]
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
90005f1e:	4a30      	ldr	r2, [pc, #192]	; (90005fe0 <BSP_TS_Init+0x104>)
  IOCtx.GetTick     = BSP_GetTick;
90005f20:	4b30      	ldr	r3, [pc, #192]	; (90005fe4 <BSP_TS_Init+0x108>)
  uint32_t ft5336_id       = 0;
90005f22:	9001      	str	r0, [sp, #4]
  if(FT5336_RegisterBusIO (&FT5336Obj, &IOCtx) != FT5336_OK)
90005f24:	4628      	mov	r0, r5
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
90005f26:	9205      	str	r2, [sp, #20]
  IOCtx.GetTick     = BSP_GetTick;
90005f28:	9307      	str	r3, [sp, #28]
  if(FT5336_RegisterBusIO (&FT5336Obj, &IOCtx) != FT5336_OK)
90005f2a:	f7ff f93f 	bl	900051ac <FT5336_RegisterBusIO>
90005f2e:	2800      	cmp	r0, #0
90005f30:	d14b      	bne.n	90005fca <BSP_TS_Init+0xee>
  {
    ret = BSP_ERROR_BUS_FAILURE;
  }
  else if(FT5336_ReadID(&FT5336Obj, &ft5336_id) != FT5336_OK)
90005f32:	a901      	add	r1, sp, #4
90005f34:	4628      	mov	r0, r5
90005f36:	f7ff f82f 	bl	90004f98 <FT5336_ReadID>
90005f3a:	2800      	cmp	r0, #0
90005f3c:	d145      	bne.n	90005fca <BSP_TS_Init+0xee>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else if(ft5336_id != FT5336_ID)
90005f3e:	9b01      	ldr	r3, [sp, #4]
90005f40:	2b51      	cmp	r3, #81	; 0x51
90005f42:	d142      	bne.n	90005fca <BSP_TS_Init+0xee>
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else
  {
    Ts_CompObj[Instance] = &FT5336Obj;
    Ts_Drv = (TS_Drv_t *) &FT5336_TS_Driver;
90005f44:	4b28      	ldr	r3, [pc, #160]	; (90005fe8 <BSP_TS_Init+0x10c>)

    if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT5336_OK)
90005f46:	4628      	mov	r0, r5
    Ts_CompObj[Instance] = &FT5336Obj;
90005f48:	4f28      	ldr	r7, [pc, #160]	; (90005fec <BSP_TS_Init+0x110>)
    Ts_Drv = (TS_Drv_t *) &FT5336_TS_Driver;
90005f4a:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 90005ff4 <BSP_TS_Init+0x118>
    Ts_CompObj[Instance] = &FT5336Obj;
90005f4e:	603d      	str	r5, [r7, #0]
    Ts_Drv = (TS_Drv_t *) &FT5336_TS_Driver;
90005f50:	f8c8 3000 	str.w	r3, [r8]
    if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT5336_OK)
90005f54:	681b      	ldr	r3, [r3, #0]
90005f56:	4798      	blx	r3
90005f58:	4606      	mov	r6, r0
90005f5a:	2800      	cmp	r0, #0
90005f5c:	d135      	bne.n	90005fca <BSP_TS_Init+0xee>
      Ts_Ctx[Instance].Width             = TS_Init->Width;
90005f5e:	4d24      	ldr	r5, [pc, #144]	; (90005ff0 <BSP_TS_Init+0x114>)
        if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
90005f60:	a902      	add	r1, sp, #8
90005f62:	6838      	ldr	r0, [r7, #0]
90005f64:	f8d8 3000 	ldr.w	r3, [r8]
      Ts_Ctx[Instance].Width             = TS_Init->Width;
90005f68:	e9d4 7200 	ldrd	r7, r2, [r4]
        if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
90005f6c:	69db      	ldr	r3, [r3, #28]
      Ts_Ctx[Instance].Width             = TS_Init->Width;
90005f6e:	e9c5 7200 	strd	r7, r2, [r5]
90005f72:	68a2      	ldr	r2, [r4, #8]
90005f74:	60aa      	str	r2, [r5, #8]
90005f76:	68e2      	ldr	r2, [r4, #12]
90005f78:	60ea      	str	r2, [r5, #12]
        if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
90005f7a:	4798      	blx	r3
90005f7c:	2800      	cmp	r0, #0
90005f7e:	db18      	blt.n	90005fb2 <BSP_TS_Init+0xd6>
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
90005f80:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
90005f84:	e9c5 3204 	strd	r3, r2, [r5, #16]
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
90005f88:	68e3      	ldr	r3, [r4, #12]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
90005f8a:	e9d4 2100 	ldrd	r2, r1, [r4]
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
90005f8e:	441a      	add	r2, r3
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
90005f90:	440b      	add	r3, r1
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
90005f92:	3201      	adds	r2, #1
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
90005f94:	3301      	adds	r3, #1
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
90005f96:	e9c5 2206 	strd	r2, r2, [r5, #24]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
90005f9a:	e9c5 330b 	strd	r3, r3, [r5, #44]	; 0x2c
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
90005f9e:	622a      	str	r2, [r5, #32]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
90005fa0:	636b      	str	r3, [r5, #52]	; 0x34
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
90005fa2:	626a      	str	r2, [r5, #36]	; 0x24
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
90005fa4:	63ab      	str	r3, [r5, #56]	; 0x38
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
90005fa6:	62aa      	str	r2, [r5, #40]	; 0x28
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
90005fa8:	63eb      	str	r3, [r5, #60]	; 0x3c
}
90005faa:	4630      	mov	r0, r6
90005fac:	b008      	add	sp, #32
90005fae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ret = BSP_ERROR_COMPONENT_FAILURE;
90005fb2:	f06f 0604 	mvn.w	r6, #4
}
90005fb6:	4630      	mov	r0, r6
90005fb8:	b008      	add	sp, #32
90005fba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = BSP_ERROR_WRONG_PARAM;
90005fbe:	f06f 0601 	mvn.w	r6, #1
}
90005fc2:	4630      	mov	r0, r6
90005fc4:	b008      	add	sp, #32
90005fc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      ret = BSP_ERROR_NO_INIT;
90005fca:	f04f 36ff 	mov.w	r6, #4294967295
90005fce:	e7ec      	b.n	90005faa <BSP_TS_Init+0xce>
90005fd0:	90005451 	.word	0x90005451
90005fd4:	240081a0 	.word	0x240081a0
90005fd8:	900053bd 	.word	0x900053bd
90005fdc:	90005c29 	.word	0x90005c29
90005fe0:	90005bed 	.word	0x90005bed
90005fe4:	90005c65 	.word	0x90005c65
90005fe8:	24000038 	.word	0x24000038
90005fec:	240081c8 	.word	0x240081c8
90005ff0:	240081cc 	.word	0x240081cc
90005ff4:	2400820c 	.word	0x2400820c

90005ff8 <BSP_TS_GetState>:
  if(Instance >= TS_INSTANCES_NBR)
90005ff8:	2800      	cmp	r0, #0
90005ffa:	d157      	bne.n	900060ac <BSP_TS_GetState+0xb4>
    if(Ts_Drv->GetState(Ts_CompObj[Instance], &state) < 0)
90005ffc:	4b2d      	ldr	r3, [pc, #180]	; (900060b4 <BSP_TS_GetState+0xbc>)
90005ffe:	4a2e      	ldr	r2, [pc, #184]	; (900060b8 <BSP_TS_GetState+0xc0>)
90006000:	681b      	ldr	r3, [r3, #0]
90006002:	6810      	ldr	r0, [r2, #0]
90006004:	691b      	ldr	r3, [r3, #16]
{
90006006:	b5f0      	push	{r4, r5, r6, r7, lr}
90006008:	b085      	sub	sp, #20
9000600a:	460c      	mov	r4, r1
    if(Ts_Drv->GetState(Ts_CompObj[Instance], &state) < 0)
9000600c:	a901      	add	r1, sp, #4
9000600e:	4798      	blx	r3
90006010:	2800      	cmp	r0, #0
90006012:	db41      	blt.n	90006098 <BSP_TS_GetState+0xa0>
    else if(state.TouchDetected != 0U)
90006014:	9d01      	ldr	r5, [sp, #4]
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
90006016:	4b29      	ldr	r3, [pc, #164]	; (900060bc <BSP_TS_GetState+0xc4>)
    else if(state.TouchDetected != 0U)
90006018:	b93d      	cbnz	r5, 9000602a <BSP_TS_GetState+0x32>
      TS_State->TouchX = Ts_Ctx[Instance].PreviousX[0];
9000601a:	699a      	ldr	r2, [r3, #24]
  int32_t ret = BSP_ERROR_NONE;
9000601c:	4628      	mov	r0, r5
      TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
9000601e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      TS_State->TouchDetected = 0U;
90006020:	6025      	str	r5, [r4, #0]
      TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
90006022:	e9c4 2301 	strd	r2, r3, [r4, #4]
}
90006026:	b005      	add	sp, #20
90006028:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
9000602a:	6898      	ldr	r0, [r3, #8]
9000602c:	0702      	lsls	r2, r0, #28
      y_oriented = state.TouchY;
9000602e:	e9dd c702 	ldrd	ip, r7, [sp, #8]
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
90006032:	d435      	bmi.n	900060a0 <BSP_TS_GetState+0xa8>
      y_oriented = state.TouchY;
90006034:	4639      	mov	r1, r7
      x_oriented = state.TouchX;
90006036:	4662      	mov	r2, ip
        x_oriented = Ts_Ctx[Instance].MaxX - state.TouchX - 1UL;
90006038:	691e      	ldr	r6, [r3, #16]
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_X) == TS_SWAP_X)
9000603a:	f010 0f02 	tst.w	r0, #2
        x_oriented = Ts_Ctx[Instance].MaxX - state.TouchX - 1UL;
9000603e:	bf1c      	itt	ne
90006040:	f106 32ff 	addne.w	r2, r6, #4294967295
90006044:	eba2 020c 	subne.w	r2, r2, ip
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_Y) == TS_SWAP_Y)
90006048:	f010 0f04 	tst.w	r0, #4
        y_oriented = Ts_Ctx[Instance].MaxY - state.TouchY;
9000604c:	6958      	ldr	r0, [r3, #20]
9000604e:	bf18      	it	ne
90006050:	1bc1      	subne	r1, r0, r7
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
90006052:	681f      	ldr	r7, [r3, #0]
90006054:	fb07 f202 	mul.w	r2, r7, r2
90006058:	fbb2 f2f6 	udiv	r2, r2, r6
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
9000605c:	685e      	ldr	r6, [r3, #4]
      TS_State->TouchDetected = state.TouchDetected;
9000605e:	6025      	str	r5, [r4, #0]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
90006060:	fb06 f101 	mul.w	r1, r6, r1
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
90006064:	699e      	ldr	r6, [r3, #24]
        y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0])?
90006066:	6add      	ldr	r5, [r3, #44]	; 0x2c
        (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
90006068:	42b2      	cmp	r2, r6
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
9000606a:	6062      	str	r2, [r4, #4]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
9000606c:	fbb1 f1f0 	udiv	r1, r1, r0
        (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
90006070:	bf8c      	ite	hi
90006072:	1b90      	subhi	r0, r2, r6
90006074:	1ab0      	subls	r0, r6, r2
          (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
90006076:	42a9      	cmp	r1, r5
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
90006078:	60a1      	str	r1, [r4, #8]
          (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
9000607a:	bf8c      	ite	hi
9000607c:	1b4f      	subhi	r7, r1, r5
9000607e:	1a6f      	subls	r7, r5, r1
          if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
90006080:	42b8      	cmp	r0, r7
90006082:	bf38      	it	cc
90006084:	4638      	movcc	r0, r7
90006086:	68df      	ldr	r7, [r3, #12]
90006088:	4287      	cmp	r7, r0
  int32_t ret = BSP_ERROR_NONE;
9000608a:	f04f 0000 	mov.w	r0, #0
          if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
9000608e:	d20a      	bcs.n	900060a6 <BSP_TS_GetState+0xae>
            Ts_Ctx[Instance].PreviousX[0] = TS_State->TouchX;
90006090:	619a      	str	r2, [r3, #24]
            Ts_Ctx[Instance].PreviousY[0] = TS_State->TouchY;
90006092:	62d9      	str	r1, [r3, #44]	; 0x2c
}
90006094:	b005      	add	sp, #20
90006096:	bdf0      	pop	{r4, r5, r6, r7, pc}
      ret = BSP_ERROR_COMPONENT_FAILURE;
90006098:	f06f 0004 	mvn.w	r0, #4
}
9000609c:	b005      	add	sp, #20
9000609e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        y_oriented = state.TouchX;
900060a0:	4661      	mov	r1, ip
        x_oriented = state.TouchY;
900060a2:	463a      	mov	r2, r7
900060a4:	e7c8      	b.n	90006038 <BSP_TS_GetState+0x40>
            TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
900060a6:	e9c4 6501 	strd	r6, r5, [r4, #4]
900060aa:	e7bc      	b.n	90006026 <BSP_TS_GetState+0x2e>
    ret = BSP_ERROR_WRONG_PARAM;
900060ac:	f06f 0001 	mvn.w	r0, #1
}
900060b0:	4770      	bx	lr
900060b2:	bf00      	nop
900060b4:	2400820c 	.word	0x2400820c
900060b8:	240081c8 	.word	0x240081c8
900060bc:	240081cc 	.word	0x240081cc

900060c0 <SystemInit>:
#endif

extern unsigned int VECTOR_TABLE_LOCATION;

void SystemInit (void)
{
900060c0:	b410      	push	{r4}
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
900060c2:	4c19      	ldr	r4, [pc, #100]	; (90006128 <SystemInit+0x68>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
900060c4:	2200      	movs	r2, #0
  RCC->CR |= RCC_CR_HSION;
900060c6:	4b19      	ldr	r3, [pc, #100]	; (9000612c <SystemInit+0x6c>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
900060c8:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
900060cc:	4818      	ldr	r0, [pc, #96]	; (90006130 <SystemInit+0x70>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
900060ce:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
900060d2:	f8c4 1088 	str.w	r1, [r4, #136]	; 0x88
  RCC->CR |= RCC_CR_HSION;
900060d6:	6819      	ldr	r1, [r3, #0]
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif /* VECT_TAB_SRAM */

#else
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
900060d8:	4c16      	ldr	r4, [pc, #88]	; (90006134 <SystemInit+0x74>)
  RCC->CR |= RCC_CR_HSION;
900060da:	f041 0101 	orr.w	r1, r1, #1
900060de:	6019      	str	r1, [r3, #0]
  RCC->CFGR = 0x00000000;
900060e0:	611a      	str	r2, [r3, #16]
  RCC->CR &= 0xEAF6ED7FU;
900060e2:	6819      	ldr	r1, [r3, #0]
900060e4:	4008      	ands	r0, r1
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
900060e6:	4914      	ldr	r1, [pc, #80]	; (90006138 <SystemInit+0x78>)
  RCC->CR &= 0xEAF6ED7FU;
900060e8:	6018      	str	r0, [r3, #0]
  RCC->D1CFGR = 0x00000000;
900060ea:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
900060ec:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
900060ee:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x00000000;
900060f0:	629a      	str	r2, [r3, #40]	; 0x28
  RCC->PLLCFGR = 0x00000000;
900060f2:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC->PLL1DIVR = 0x00000000;
900060f4:	631a      	str	r2, [r3, #48]	; 0x30
  RCC->PLL1FRACR = 0x00000000;
900060f6:	635a      	str	r2, [r3, #52]	; 0x34
  RCC->PLL2DIVR = 0x00000000;
900060f8:	639a      	str	r2, [r3, #56]	; 0x38
  RCC->PLL2FRACR = 0x00000000;
900060fa:	63da      	str	r2, [r3, #60]	; 0x3c
  RCC->PLL3DIVR = 0x00000000;
900060fc:	641a      	str	r2, [r3, #64]	; 0x40
  RCC->PLL3FRACR = 0x00000000;
900060fe:	645a      	str	r2, [r3, #68]	; 0x44
  RCC->CR &= 0xFFFBFFFFU;
90006100:	6818      	ldr	r0, [r3, #0]
90006102:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
90006106:	6018      	str	r0, [r3, #0]
  RCC->CIER = 0x00000000;
90006108:	661a      	str	r2, [r3, #96]	; 0x60
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
9000610a:	6823      	ldr	r3, [r4, #0]
9000610c:	4019      	ands	r1, r3
9000610e:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
90006112:	d203      	bcs.n	9000611c <SystemInit+0x5c>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
90006114:	4b09      	ldr	r3, [pc, #36]	; (9000613c <SystemInit+0x7c>)
90006116:	2201      	movs	r2, #1
90006118:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#elif defined(VECT_TAB_QSPI)
  SCB->VTOR = (unsigned int)&VECTOR_TABLE_LOCATION; /* Vector Table Relocation in External FLASH */
9000611c:	4a08      	ldr	r2, [pc, #32]	; (90006140 <SystemInit+0x80>)
9000611e:	4b02      	ldr	r3, [pc, #8]	; (90006128 <SystemInit+0x68>)
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
90006120:	f85d 4b04 	ldr.w	r4, [sp], #4
  SCB->VTOR = (unsigned int)&VECTOR_TABLE_LOCATION; /* Vector Table Relocation in External FLASH */
90006124:	609a      	str	r2, [r3, #8]
}
90006126:	4770      	bx	lr
90006128:	e000ed00 	.word	0xe000ed00
9000612c:	58024400 	.word	0x58024400
90006130:	eaf6ed7f 	.word	0xeaf6ed7f
90006134:	5c001000 	.word	0x5c001000
90006138:	ffff0000 	.word	0xffff0000
9000613c:	51008000 	.word	0x51008000
90006140:	90000000 	.word	0x90000000

90006144 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
90006144:	b510      	push	{r4, lr}
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
90006146:	2003      	movs	r0, #3
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
90006148:	4c12      	ldr	r4, [pc, #72]	; (90006194 <HAL_Init+0x50>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
9000614a:	f000 f855 	bl	900061f8 <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
9000614e:	f004 fa19 	bl	9000a584 <HAL_RCC_GetSysClockFreq>
90006152:	4b11      	ldr	r3, [pc, #68]	; (90006198 <HAL_Init+0x54>)
90006154:	4911      	ldr	r1, [pc, #68]	; (9000619c <HAL_Init+0x58>)
90006156:	699a      	ldr	r2, [r3, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
90006158:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
9000615a:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000615e:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
90006162:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
90006164:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
90006166:	f002 021f 	and.w	r2, r2, #31
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
9000616a:	490d      	ldr	r1, [pc, #52]	; (900061a0 <HAL_Init+0x5c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000616c:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
90006170:	40d0      	lsrs	r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
90006172:	fa20 f303 	lsr.w	r3, r0, r3
  SystemCoreClock = common_system_clock;
90006176:	6008      	str	r0, [r1, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
90006178:	2000      	movs	r0, #0
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000617a:	6023      	str	r3, [r4, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
9000617c:	f7fe f8f8 	bl	90004370 <HAL_InitTick>
90006180:	b110      	cbz	r0, 90006188 <HAL_Init+0x44>
  {
    return HAL_ERROR;
90006182:	2401      	movs	r4, #1
  /* Init the low level hardware */
  HAL_MspInit();

  /* Return function status */
  return HAL_OK;
}
90006184:	4620      	mov	r0, r4
90006186:	bd10      	pop	{r4, pc}
90006188:	4604      	mov	r4, r0
  HAL_MspInit();
9000618a:	f7fd fddd 	bl	90003d48 <HAL_MspInit>
}
9000618e:	4620      	mov	r0, r4
90006190:	bd10      	pop	{r4, pc}
90006192:	bf00      	nop
90006194:	2400006c 	.word	0x2400006c
90006198:	58024400 	.word	0x58024400
9000619c:	90028908 	.word	0x90028908
900061a0:	24000068 	.word	0x24000068

900061a4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
900061a4:	4a03      	ldr	r2, [pc, #12]	; (900061b4 <HAL_IncTick+0x10>)
900061a6:	4b04      	ldr	r3, [pc, #16]	; (900061b8 <HAL_IncTick+0x14>)
900061a8:	6811      	ldr	r1, [r2, #0]
900061aa:	781b      	ldrb	r3, [r3, #0]
900061ac:	440b      	add	r3, r1
900061ae:	6013      	str	r3, [r2, #0]
}
900061b0:	4770      	bx	lr
900061b2:	bf00      	nop
900061b4:	24008210 	.word	0x24008210
900061b8:	24000070 	.word	0x24000070

900061bc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
900061bc:	4b01      	ldr	r3, [pc, #4]	; (900061c4 <HAL_GetTick+0x8>)
900061be:	6818      	ldr	r0, [r3, #0]
}
900061c0:	4770      	bx	lr
900061c2:	bf00      	nop
900061c4:	24008210 	.word	0x24008210

900061c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
900061c8:	b538      	push	{r3, r4, r5, lr}
900061ca:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
900061cc:	f7ff fff6 	bl	900061bc <HAL_GetTick>
900061d0:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
900061d2:	1c63      	adds	r3, r4, #1
900061d4:	d002      	beq.n	900061dc <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
900061d6:	4b04      	ldr	r3, [pc, #16]	; (900061e8 <HAL_Delay+0x20>)
900061d8:	781b      	ldrb	r3, [r3, #0]
900061da:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
900061dc:	f7ff ffee 	bl	900061bc <HAL_GetTick>
900061e0:	1b43      	subs	r3, r0, r5
900061e2:	42a3      	cmp	r3, r4
900061e4:	d3fa      	bcc.n	900061dc <HAL_Delay+0x14>
  {
  }
}
900061e6:	bd38      	pop	{r3, r4, r5, pc}
900061e8:	24000070 	.word	0x24000070

900061ec <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
900061ec:	4b01      	ldr	r3, [pc, #4]	; (900061f4 <HAL_GetREVID+0x8>)
900061ee:	6818      	ldr	r0, [r3, #0]
}
900061f0:	0c00      	lsrs	r0, r0, #16
900061f2:	4770      	bx	lr
900061f4:	5c001000 	.word	0x5c001000

900061f8 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
900061f8:	4906      	ldr	r1, [pc, #24]	; (90006214 <HAL_NVIC_SetPriorityGrouping+0x1c>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
900061fa:	f64f 0cff 	movw	ip, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
900061fe:	0200      	lsls	r0, r0, #8
  reg_value  =  (reg_value                                   |
90006200:	4b05      	ldr	r3, [pc, #20]	; (90006218 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
90006202:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
90006204:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
90006208:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
9000620c:	4310      	orrs	r0, r2
  reg_value  =  (reg_value                                   |
9000620e:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
90006210:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
90006212:	4770      	bx	lr
90006214:	e000ed00 	.word	0xe000ed00
90006218:	05fa0000 	.word	0x05fa0000

9000621c <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
9000621c:	4b1b      	ldr	r3, [pc, #108]	; (9000628c <HAL_NVIC_SetPriority+0x70>)
9000621e:	68db      	ldr	r3, [r3, #12]
90006220:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
90006224:	b500      	push	{lr}
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
90006226:	f1c3 0e07 	rsb	lr, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
9000622a:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
9000622e:	f1be 0f04 	cmp.w	lr, #4
90006232:	bf28      	it	cs
90006234:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
90006238:	f1bc 0f06 	cmp.w	ip, #6
9000623c:	d91a      	bls.n	90006274 <HAL_NVIC_SetPriority+0x58>
9000623e:	3b03      	subs	r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
90006240:	f04f 3cff 	mov.w	ip, #4294967295
90006244:	fa0c fc03 	lsl.w	ip, ip, r3
90006248:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
9000624c:	f04f 3cff 	mov.w	ip, #4294967295
  if ((int32_t)(IRQn) >= 0)
90006250:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
90006252:	fa0c fc0e 	lsl.w	ip, ip, lr
90006256:	ea21 010c 	bic.w	r1, r1, ip
9000625a:	fa01 f103 	lsl.w	r1, r1, r3
9000625e:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
90006262:	db0a      	blt.n	9000627a <HAL_NVIC_SetPriority+0x5e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
90006264:	0109      	lsls	r1, r1, #4
90006266:	4b0a      	ldr	r3, [pc, #40]	; (90006290 <HAL_NVIC_SetPriority+0x74>)
90006268:	b2c9      	uxtb	r1, r1
9000626a:	4403      	add	r3, r0
9000626c:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
90006270:	f85d fb04 	ldr.w	pc, [sp], #4
90006274:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
90006276:	4613      	mov	r3, r2
90006278:	e7e8      	b.n	9000624c <HAL_NVIC_SetPriority+0x30>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
9000627a:	f000 000f 	and.w	r0, r0, #15
9000627e:	0109      	lsls	r1, r1, #4
90006280:	4b04      	ldr	r3, [pc, #16]	; (90006294 <HAL_NVIC_SetPriority+0x78>)
90006282:	b2c9      	uxtb	r1, r1
90006284:	4403      	add	r3, r0
90006286:	7619      	strb	r1, [r3, #24]
90006288:	f85d fb04 	ldr.w	pc, [sp], #4
9000628c:	e000ed00 	.word	0xe000ed00
90006290:	e000e100 	.word	0xe000e100
90006294:	e000ecfc 	.word	0xe000ecfc

90006298 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
90006298:	2800      	cmp	r0, #0
9000629a:	db07      	blt.n	900062ac <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
9000629c:	2301      	movs	r3, #1
9000629e:	f000 011f 	and.w	r1, r0, #31
900062a2:	4a03      	ldr	r2, [pc, #12]	; (900062b0 <HAL_NVIC_EnableIRQ+0x18>)
900062a4:	0940      	lsrs	r0, r0, #5
900062a6:	408b      	lsls	r3, r1
900062a8:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
900062ac:	4770      	bx	lr
900062ae:	bf00      	nop
900062b0:	e000e100 	.word	0xe000e100

900062b4 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
900062b4:	2800      	cmp	r0, #0
900062b6:	db0c      	blt.n	900062d2 <HAL_NVIC_DisableIRQ+0x1e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
900062b8:	0943      	lsrs	r3, r0, #5
900062ba:	2201      	movs	r2, #1
900062bc:	f000 001f 	and.w	r0, r0, #31
900062c0:	4904      	ldr	r1, [pc, #16]	; (900062d4 <HAL_NVIC_DisableIRQ+0x20>)
900062c2:	3320      	adds	r3, #32
900062c4:	4082      	lsls	r2, r0
900062c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
900062ca:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
900062ce:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
900062d2:	4770      	bx	lr
900062d4:	e000e100 	.word	0xe000e100

900062d8 <HAL_MPU_Disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
900062d8:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
900062dc:	4b04      	ldr	r3, [pc, #16]	; (900062f0 <HAL_MPU_Disable+0x18>)

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
900062de:	2100      	movs	r1, #0
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
900062e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
900062e2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
900062e6:	625a      	str	r2, [r3, #36]	; 0x24
  MPU->CTRL = 0;
900062e8:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
}
900062ec:	4770      	bx	lr
900062ee:	bf00      	nop
900062f0:	e000ed00 	.word	0xe000ed00

900062f4 <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
900062f4:	4b06      	ldr	r3, [pc, #24]	; (90006310 <HAL_MPU_Enable+0x1c>)
900062f6:	f040 0001 	orr.w	r0, r0, #1
900062fa:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
900062fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
90006300:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
90006304:	625a      	str	r2, [r3, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
90006306:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
9000630a:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
9000630e:	4770      	bx	lr
90006310:	e000ed00 	.word	0xe000ed00

90006314 <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
90006314:	4a17      	ldr	r2, [pc, #92]	; (90006374 <HAL_MPU_ConfigRegion+0x60>)
90006316:	7843      	ldrb	r3, [r0, #1]
90006318:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  if ((MPU_Init->Enable) != 0UL)
9000631c:	7801      	ldrb	r1, [r0, #0]
9000631e:	b321      	cbz	r1, 9000636a <HAL_MPU_ConfigRegion+0x56>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
90006320:	6843      	ldr	r3, [r0, #4]
{
90006322:	b500      	push	{lr}
    MPU->RBAR = MPU_Init->BaseAddress;
90006324:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
90006328:	7ac3      	ldrb	r3, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
9000632a:	f890 c00c 	ldrb.w	ip, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
9000632e:	061b      	lsls	r3, r3, #24
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
90006330:	f890 e00f 	ldrb.w	lr, [r0, #15]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
90006334:	ea43 730c 	orr.w	r3, r3, ip, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
90006338:	f890 c00a 	ldrb.w	ip, [r0, #10]
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
9000633c:	430b      	orrs	r3, r1
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
9000633e:	7b81      	ldrb	r1, [r0, #14]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
90006340:	ea43 43cc 	orr.w	r3, r3, ip, lsl #19
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
90006344:	f890 c00d 	ldrb.w	ip, [r0, #13]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
90006348:	ea43 438c 	orr.w	r3, r3, ip, lsl #18
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
9000634c:	f890 c009 	ldrb.w	ip, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
90006350:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
90006354:	7a01      	ldrb	r1, [r0, #8]
90006356:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
9000635a:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
9000635e:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
90006362:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
90006366:	f85d fb04 	ldr.w	pc, [sp], #4
    MPU->RBAR = 0x00;
9000636a:	f8c2 109c 	str.w	r1, [r2, #156]	; 0x9c
    MPU->RASR = 0x00;
9000636e:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
90006372:	4770      	bx	lr
90006374:	e000ed00 	.word	0xe000ed00

90006378 <HAL_CRC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
90006378:	2800      	cmp	r0, #0
9000637a:	d036      	beq.n	900063ea <HAL_CRC_Init+0x72>
{
9000637c:	b510      	push	{r4, lr}
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
9000637e:	7f43      	ldrb	r3, [r0, #29]
90006380:	4604      	mov	r4, r0
90006382:	f003 02ff 	and.w	r2, r3, #255	; 0xff
90006386:	b363      	cbz	r3, 900063e2 <HAL_CRC_Init+0x6a>
    hcrc->Lock = HAL_UNLOCKED;
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
90006388:	2202      	movs	r2, #2

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
9000638a:	7923      	ldrb	r3, [r4, #4]
  hcrc->State = HAL_CRC_STATE_BUSY;
9000638c:	7762      	strb	r2, [r4, #29]
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
9000638e:	b9f3      	cbnz	r3, 900063ce <HAL_CRC_Init+0x56>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
90006390:	6823      	ldr	r3, [r4, #0]
90006392:	4a17      	ldr	r2, [pc, #92]	; (900063f0 <HAL_CRC_Init+0x78>)
90006394:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
90006396:	689a      	ldr	r2, [r3, #8]
90006398:	f022 0218 	bic.w	r2, r2, #24
9000639c:	609a      	str	r2, [r3, #8]
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
9000639e:	7962      	ldrb	r2, [r4, #5]
900063a0:	b18a      	cbz	r2, 900063c6 <HAL_CRC_Init+0x4e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
900063a2:	6922      	ldr	r2, [r4, #16]
900063a4:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
900063a6:	689a      	ldr	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
900063a8:	e9d4 0105 	ldrd	r0, r1, [r4, #20]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
900063ac:	f022 0260 	bic.w	r2, r2, #96	; 0x60
900063b0:	4302      	orrs	r2, r0

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;

  /* Return function status */
  return HAL_OK;
900063b2:	2000      	movs	r0, #0
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
900063b4:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
900063b6:	689a      	ldr	r2, [r3, #8]
900063b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
900063bc:	430a      	orrs	r2, r1
  hcrc->State = HAL_CRC_STATE_READY;
900063be:	2101      	movs	r1, #1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
900063c0:	609a      	str	r2, [r3, #8]
  hcrc->State = HAL_CRC_STATE_READY;
900063c2:	7761      	strb	r1, [r4, #29]
}
900063c4:	bd10      	pop	{r4, pc}
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
900063c6:	f04f 32ff 	mov.w	r2, #4294967295
900063ca:	611a      	str	r2, [r3, #16]
900063cc:	e7eb      	b.n	900063a6 <HAL_CRC_Init+0x2e>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
900063ce:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
900063d2:	4620      	mov	r0, r4
900063d4:	f000 f80e 	bl	900063f4 <HAL_CRCEx_Polynomial_Set>
900063d8:	b908      	cbnz	r0, 900063de <HAL_CRC_Init+0x66>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
900063da:	6823      	ldr	r3, [r4, #0]
900063dc:	e7df      	b.n	9000639e <HAL_CRC_Init+0x26>
    return HAL_ERROR;
900063de:	2001      	movs	r0, #1
}
900063e0:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
900063e2:	7702      	strb	r2, [r0, #28]
    HAL_CRC_MspInit(hcrc);
900063e4:	f7fd fcca 	bl	90003d7c <HAL_CRC_MspInit>
900063e8:	e7ce      	b.n	90006388 <HAL_CRC_Init+0x10>
    return HAL_ERROR;
900063ea:	2001      	movs	r0, #1
}
900063ec:	4770      	bx	lr
900063ee:	bf00      	nop
900063f0:	04c11db7 	.word	0x04c11db7

900063f4 <HAL_CRCEx_Polynomial_Set>:

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */ 
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
900063f4:	07cb      	lsls	r3, r1, #31
900063f6:	d51a      	bpl.n	9000642e <HAL_CRCEx_Polynomial_Set+0x3a>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
900063f8:	231e      	movs	r3, #30
{
900063fa:	b410      	push	{r4}
900063fc:	e001      	b.n	90006402 <HAL_CRCEx_Polynomial_Set+0xe>
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
900063fe:	3b01      	subs	r3, #1
90006400:	d317      	bcc.n	90006432 <HAL_CRCEx_Polynomial_Set+0x3e>
90006402:	fa21 fc03 	lsr.w	ip, r1, r3
90006406:	f01c 0f01 	tst.w	ip, #1
9000640a:	d0f8      	beq.n	900063fe <HAL_CRCEx_Polynomial_Set+0xa>
    {
    }

    switch (PolyLength)
9000640c:	2a18      	cmp	r2, #24
9000640e:	d811      	bhi.n	90006434 <HAL_CRCEx_Polynomial_Set+0x40>
90006410:	e8df f002 	tbb	[pc, r2]
90006414:	10101016 	.word	0x10101016
90006418:	10101010 	.word	0x10101010
9000641c:	10101024 	.word	0x10101024
90006420:	10101010 	.word	0x10101010
90006424:	10101021 	.word	0x10101021
90006428:	10101010 	.word	0x10101010
9000642c:	14          	.byte	0x14
9000642d:	00          	.byte	0x00
    status =  HAL_ERROR;
9000642e:	2001      	movs	r0, #1
    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
  }
  /* Return function status */
  return status;
}
90006430:	4770      	bx	lr
    switch (PolyLength)
90006432:	b12a      	cbz	r2, 90006440 <HAL_CRCEx_Polynomial_Set+0x4c>
        status =  HAL_ERROR;
90006434:	2001      	movs	r0, #1
}
90006436:	f85d 4b04 	ldr.w	r4, [sp], #4
9000643a:	4770      	bx	lr
        if (msb >= HAL_CRC_LENGTH_7B)
9000643c:	2b06      	cmp	r3, #6
9000643e:	d8f9      	bhi.n	90006434 <HAL_CRCEx_Polynomial_Set+0x40>
    WRITE_REG(hcrc->Instance->POL, Pol);
90006440:	6804      	ldr	r4, [r0, #0]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
90006442:	2000      	movs	r0, #0
    WRITE_REG(hcrc->Instance->POL, Pol);
90006444:	6161      	str	r1, [r4, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
90006446:	68a3      	ldr	r3, [r4, #8]
90006448:	f023 0318 	bic.w	r3, r3, #24
9000644c:	4313      	orrs	r3, r2
9000644e:	60a3      	str	r3, [r4, #8]
}
90006450:	f85d 4b04 	ldr.w	r4, [sp], #4
90006454:	4770      	bx	lr
        if (msb >= HAL_CRC_LENGTH_8B)
90006456:	2b07      	cmp	r3, #7
90006458:	d9f2      	bls.n	90006440 <HAL_CRCEx_Polynomial_Set+0x4c>
9000645a:	e7eb      	b.n	90006434 <HAL_CRCEx_Polynomial_Set+0x40>
        if (msb >= HAL_CRC_LENGTH_16B)
9000645c:	2b0f      	cmp	r3, #15
9000645e:	d9ef      	bls.n	90006440 <HAL_CRCEx_Polynomial_Set+0x4c>
90006460:	e7e8      	b.n	90006434 <HAL_CRCEx_Polynomial_Set+0x40>
90006462:	bf00      	nop

90006464 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
90006464:	b570      	push	{r4, r5, r6, lr}
90006466:	4605      	mov	r5, r0
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
90006468:	f7ff fea8 	bl	900061bc <HAL_GetTick>

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
9000646c:	2d00      	cmp	r5, #0
9000646e:	f000 8124 	beq.w	900066ba <HAL_DMA_Abort+0x256>
  {
    return HAL_ERROR;
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
90006472:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
90006476:	2b02      	cmp	r3, #2
90006478:	f040 80dd 	bne.w	90006636 <HAL_DMA_Abort+0x1d2>
    return HAL_ERROR;
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
9000647c:	682c      	ldr	r4, [r5, #0]
9000647e:	4606      	mov	r6, r0
90006480:	4b8f      	ldr	r3, [pc, #572]	; (900066c0 <HAL_DMA_Abort+0x25c>)
90006482:	4890      	ldr	r0, [pc, #576]	; (900066c4 <HAL_DMA_Abort+0x260>)
90006484:	4a90      	ldr	r2, [pc, #576]	; (900066c8 <HAL_DMA_Abort+0x264>)
90006486:	4284      	cmp	r4, r0
90006488:	bf18      	it	ne
9000648a:	429c      	cmpne	r4, r3
9000648c:	f100 0030 	add.w	r0, r0, #48	; 0x30
90006490:	498e      	ldr	r1, [pc, #568]	; (900066cc <HAL_DMA_Abort+0x268>)
90006492:	bf0c      	ite	eq
90006494:	2301      	moveq	r3, #1
90006496:	2300      	movne	r3, #0
90006498:	4284      	cmp	r4, r0
9000649a:	bf08      	it	eq
9000649c:	f043 0301 	orreq.w	r3, r3, #1
900064a0:	3018      	adds	r0, #24
900064a2:	4284      	cmp	r4, r0
900064a4:	bf08      	it	eq
900064a6:	f043 0301 	orreq.w	r3, r3, #1
900064aa:	3018      	adds	r0, #24
900064ac:	4284      	cmp	r4, r0
900064ae:	bf08      	it	eq
900064b0:	f043 0301 	orreq.w	r3, r3, #1
900064b4:	3018      	adds	r0, #24
900064b6:	4284      	cmp	r4, r0
900064b8:	bf08      	it	eq
900064ba:	f043 0301 	orreq.w	r3, r3, #1
900064be:	f500 7056 	add.w	r0, r0, #856	; 0x358
900064c2:	4284      	cmp	r4, r0
900064c4:	bf08      	it	eq
900064c6:	f043 0301 	orreq.w	r3, r3, #1
900064ca:	3018      	adds	r0, #24
900064cc:	4284      	cmp	r4, r0
900064ce:	bf08      	it	eq
900064d0:	f043 0301 	orreq.w	r3, r3, #1
900064d4:	3018      	adds	r0, #24
900064d6:	4284      	cmp	r4, r0
900064d8:	bf08      	it	eq
900064da:	f043 0301 	orreq.w	r3, r3, #1
900064de:	3018      	adds	r0, #24
900064e0:	4284      	cmp	r4, r0
900064e2:	bf08      	it	eq
900064e4:	f043 0301 	orreq.w	r3, r3, #1
900064e8:	3018      	adds	r0, #24
900064ea:	4284      	cmp	r4, r0
900064ec:	bf08      	it	eq
900064ee:	f043 0301 	orreq.w	r3, r3, #1
900064f2:	3018      	adds	r0, #24
900064f4:	4284      	cmp	r4, r0
900064f6:	bf08      	it	eq
900064f8:	f043 0301 	orreq.w	r3, r3, #1
900064fc:	3018      	adds	r0, #24
900064fe:	4284      	cmp	r4, r0
90006500:	bf08      	it	eq
90006502:	f043 0301 	orreq.w	r3, r3, #1
90006506:	3018      	adds	r0, #24
90006508:	4284      	cmp	r4, r0
9000650a:	bf08      	it	eq
9000650c:	f043 0301 	orreq.w	r3, r3, #1
90006510:	428c      	cmp	r4, r1
90006512:	bf18      	it	ne
90006514:	4294      	cmpne	r4, r2
90006516:	bf0c      	ite	eq
90006518:	2201      	moveq	r2, #1
9000651a:	2200      	movne	r2, #0
9000651c:	d002      	beq.n	90006524 <HAL_DMA_Abort+0xc0>
9000651e:	2b00      	cmp	r3, #0
90006520:	f000 8090 	beq.w	90006644 <HAL_DMA_Abort+0x1e0>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
90006524:	6821      	ldr	r1, [r4, #0]
90006526:	f021 011e 	bic.w	r1, r1, #30
9000652a:	6021      	str	r1, [r4, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
9000652c:	6961      	ldr	r1, [r4, #20]
9000652e:	f021 0180 	bic.w	r1, r1, #128	; 0x80
90006532:	6161      	str	r1, [r4, #20]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
90006534:	2a00      	cmp	r2, #0
90006536:	f000 80b0 	beq.w	9000669a <HAL_DMA_Abort+0x236>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
9000653a:	6e2a      	ldr	r2, [r5, #96]	; 0x60
9000653c:	6813      	ldr	r3, [r2, #0]
9000653e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
90006542:	6013      	str	r3, [r2, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
90006544:	6823      	ldr	r3, [r4, #0]
90006546:	f023 0301 	bic.w	r3, r3, #1
9000654a:	6023      	str	r3, [r4, #0]
9000654c:	e005      	b.n	9000655a <HAL_DMA_Abort+0xf6>

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
9000654e:	f7ff fe35 	bl	900061bc <HAL_GetTick>
90006552:	1b83      	subs	r3, r0, r6
90006554:	2b05      	cmp	r3, #5
90006556:	f200 80a6 	bhi.w	900066a6 <HAL_DMA_Abort+0x242>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
9000655a:	6823      	ldr	r3, [r4, #0]
9000655c:	07db      	lsls	r3, r3, #31
9000655e:	d4f6      	bmi.n	9000654e <HAL_DMA_Abort+0xea>
        return HAL_ERROR;
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
90006560:	682a      	ldr	r2, [r5, #0]
90006562:	4b57      	ldr	r3, [pc, #348]	; (900066c0 <HAL_DMA_Abort+0x25c>)
90006564:	4857      	ldr	r0, [pc, #348]	; (900066c4 <HAL_DMA_Abort+0x260>)
90006566:	495a      	ldr	r1, [pc, #360]	; (900066d0 <HAL_DMA_Abort+0x26c>)
90006568:	4282      	cmp	r2, r0
9000656a:	bf18      	it	ne
9000656c:	429a      	cmpne	r2, r3
9000656e:	f100 0048 	add.w	r0, r0, #72	; 0x48
90006572:	bf0c      	ite	eq
90006574:	2301      	moveq	r3, #1
90006576:	2300      	movne	r3, #0
90006578:	428a      	cmp	r2, r1
9000657a:	bf08      	it	eq
9000657c:	f043 0301 	orreq.w	r3, r3, #1
90006580:	3130      	adds	r1, #48	; 0x30
90006582:	4282      	cmp	r2, r0
90006584:	bf08      	it	eq
90006586:	f043 0301 	orreq.w	r3, r3, #1
9000658a:	3030      	adds	r0, #48	; 0x30
9000658c:	428a      	cmp	r2, r1
9000658e:	bf08      	it	eq
90006590:	f043 0301 	orreq.w	r3, r3, #1
90006594:	f501 715c 	add.w	r1, r1, #880	; 0x370
90006598:	4282      	cmp	r2, r0
9000659a:	bf08      	it	eq
9000659c:	f043 0301 	orreq.w	r3, r3, #1
900065a0:	f500 705c 	add.w	r0, r0, #880	; 0x370
900065a4:	428a      	cmp	r2, r1
900065a6:	bf08      	it	eq
900065a8:	f043 0301 	orreq.w	r3, r3, #1
900065ac:	3130      	adds	r1, #48	; 0x30
900065ae:	4282      	cmp	r2, r0
900065b0:	bf08      	it	eq
900065b2:	f043 0301 	orreq.w	r3, r3, #1
900065b6:	3030      	adds	r0, #48	; 0x30
900065b8:	428a      	cmp	r2, r1
900065ba:	bf08      	it	eq
900065bc:	f043 0301 	orreq.w	r3, r3, #1
900065c0:	3130      	adds	r1, #48	; 0x30
900065c2:	4282      	cmp	r2, r0
900065c4:	bf08      	it	eq
900065c6:	f043 0301 	orreq.w	r3, r3, #1
900065ca:	3030      	adds	r0, #48	; 0x30
900065cc:	428a      	cmp	r2, r1
900065ce:	bf08      	it	eq
900065d0:	f043 0301 	orreq.w	r3, r3, #1
900065d4:	3130      	adds	r1, #48	; 0x30
900065d6:	4282      	cmp	r2, r0
900065d8:	bf08      	it	eq
900065da:	f043 0301 	orreq.w	r3, r3, #1
900065de:	428a      	cmp	r2, r1
900065e0:	bf08      	it	eq
900065e2:	f043 0301 	orreq.w	r3, r3, #1
900065e6:	3118      	adds	r1, #24
900065e8:	428a      	cmp	r2, r1
900065ea:	bf08      	it	eq
900065ec:	f043 0301 	orreq.w	r3, r3, #1
900065f0:	b933      	cbnz	r3, 90006600 <HAL_DMA_Abort+0x19c>
900065f2:	f5a1 6195 	sub.w	r1, r1, #1192	; 0x4a8
900065f6:	4b35      	ldr	r3, [pc, #212]	; (900066cc <HAL_DMA_Abort+0x268>)
900065f8:	429a      	cmp	r2, r3
900065fa:	bf18      	it	ne
900065fc:	428a      	cmpne	r2, r1
900065fe:	d16f      	bne.n	900066e0 <HAL_DMA_Abort+0x27c>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
90006600:	6dea      	ldr	r2, [r5, #92]	; 0x5c
90006602:	233f      	movs	r3, #63	; 0x3f
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
90006604:	6da9      	ldr	r1, [r5, #88]	; 0x58
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
90006606:	f002 021f 	and.w	r2, r2, #31
9000660a:	4093      	lsls	r3, r2
9000660c:	608b      	str	r3, [r1, #8]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;

      if(hdma->DMAmuxRequestGen != 0U)
9000660e:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
90006610:	e9d5 2119 	ldrd	r2, r1, [r5, #100]	; 0x64
90006614:	6051      	str	r1, [r2, #4]
      if(hdma->DMAmuxRequestGen != 0U)
90006616:	b133      	cbz	r3, 90006626 <HAL_DMA_Abort+0x1c2>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
90006618:	681a      	ldr	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
9000661a:	e9d5 101c 	ldrd	r1, r0, [r5, #112]	; 0x70
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
9000661e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
90006622:	601a      	str	r2, [r3, #0]
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
90006624:	6048      	str	r0, [r1, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
90006626:	2300      	movs	r3, #0
    hdma->State = HAL_DMA_STATE_READY;
90006628:	2201      	movs	r2, #1
  }

  return HAL_OK;
9000662a:	4618      	mov	r0, r3
    hdma->State = HAL_DMA_STATE_READY;
9000662c:	f885 2035 	strb.w	r2, [r5, #53]	; 0x35
    __HAL_UNLOCK(hdma);
90006630:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
}
90006634:	bd70      	pop	{r4, r5, r6, pc}
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
90006636:	2280      	movs	r2, #128	; 0x80
    __HAL_UNLOCK(hdma);
90006638:	2300      	movs	r3, #0
    return HAL_ERROR;
9000663a:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
9000663c:	656a      	str	r2, [r5, #84]	; 0x54
    __HAL_UNLOCK(hdma);
9000663e:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
}
90006642:	bd70      	pop	{r4, r5, r6, pc}
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
90006644:	6822      	ldr	r2, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
90006646:	4923      	ldr	r1, [pc, #140]	; (900066d4 <HAL_DMA_Abort+0x270>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
90006648:	f022 020e 	bic.w	r2, r2, #14
9000664c:	6022      	str	r2, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
9000664e:	4a22      	ldr	r2, [pc, #136]	; (900066d8 <HAL_DMA_Abort+0x274>)
90006650:	428c      	cmp	r4, r1
90006652:	bf18      	it	ne
90006654:	4294      	cmpne	r4, r2
90006656:	f101 0128 	add.w	r1, r1, #40	; 0x28
9000665a:	bf0c      	ite	eq
9000665c:	2201      	moveq	r2, #1
9000665e:	2200      	movne	r2, #0
90006660:	428c      	cmp	r4, r1
90006662:	bf08      	it	eq
90006664:	f042 0201 	orreq.w	r2, r2, #1
90006668:	3114      	adds	r1, #20
9000666a:	428c      	cmp	r4, r1
9000666c:	bf08      	it	eq
9000666e:	f042 0201 	orreq.w	r2, r2, #1
90006672:	3114      	adds	r1, #20
90006674:	428c      	cmp	r4, r1
90006676:	bf08      	it	eq
90006678:	f042 0201 	orreq.w	r2, r2, #1
9000667c:	3114      	adds	r1, #20
9000667e:	428c      	cmp	r4, r1
90006680:	bf08      	it	eq
90006682:	f042 0201 	orreq.w	r2, r2, #1
90006686:	3114      	adds	r1, #20
90006688:	428c      	cmp	r4, r1
9000668a:	bf08      	it	eq
9000668c:	f042 0201 	orreq.w	r2, r2, #1
90006690:	b91a      	cbnz	r2, 9000669a <HAL_DMA_Abort+0x236>
90006692:	4a12      	ldr	r2, [pc, #72]	; (900066dc <HAL_DMA_Abort+0x278>)
90006694:	4294      	cmp	r4, r2
90006696:	f47f af55 	bne.w	90006544 <HAL_DMA_Abort+0xe0>
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
9000669a:	6e29      	ldr	r1, [r5, #96]	; 0x60
9000669c:	680a      	ldr	r2, [r1, #0]
9000669e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
900066a2:	600a      	str	r2, [r1, #0]
    __HAL_DMA_DISABLE(hdma);
900066a4:	e74e      	b.n	90006544 <HAL_DMA_Abort+0xe0>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
900066a6:	2120      	movs	r1, #32
        hdma->State = HAL_DMA_STATE_ERROR;
900066a8:	2203      	movs	r2, #3
        __HAL_UNLOCK(hdma);
900066aa:	2300      	movs	r3, #0
        return HAL_ERROR;
900066ac:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
900066ae:	6569      	str	r1, [r5, #84]	; 0x54
        __HAL_UNLOCK(hdma);
900066b0:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_ERROR;
900066b4:	f885 2035 	strb.w	r2, [r5, #53]	; 0x35
}
900066b8:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
900066ba:	2001      	movs	r0, #1
}
900066bc:	bd70      	pop	{r4, r5, r6, pc}
900066be:	bf00      	nop
900066c0:	40020058 	.word	0x40020058
900066c4:	40020040 	.word	0x40020040
900066c8:	40020010 	.word	0x40020010
900066cc:	40020028 	.word	0x40020028
900066d0:	40020070 	.word	0x40020070
900066d4:	58025408 	.word	0x58025408
900066d8:	5802541c 	.word	0x5802541c
900066dc:	58025494 	.word	0x58025494
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
900066e0:	6de8      	ldr	r0, [r5, #92]	; 0x5c
900066e2:	2101      	movs	r1, #1
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
900066e4:	4b16      	ldr	r3, [pc, #88]	; (90006740 <HAL_DMA_Abort+0x2dc>)
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
900066e6:	f000 001f 	and.w	r0, r0, #31
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
900066ea:	4c16      	ldr	r4, [pc, #88]	; (90006744 <HAL_DMA_Abort+0x2e0>)
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
900066ec:	4081      	lsls	r1, r0
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
900066ee:	42a2      	cmp	r2, r4
900066f0:	bf18      	it	ne
900066f2:	429a      	cmpne	r2, r3
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
900066f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
900066f6:	bf0c      	ite	eq
900066f8:	2301      	moveq	r3, #1
900066fa:	2300      	movne	r3, #0
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
900066fc:	6041      	str	r1, [r0, #4]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
900066fe:	4812      	ldr	r0, [pc, #72]	; (90006748 <HAL_DMA_Abort+0x2e4>)
90006700:	4912      	ldr	r1, [pc, #72]	; (9000674c <HAL_DMA_Abort+0x2e8>)
90006702:	4282      	cmp	r2, r0
90006704:	bf08      	it	eq
90006706:	f043 0301 	orreq.w	r3, r3, #1
9000670a:	3028      	adds	r0, #40	; 0x28
9000670c:	428a      	cmp	r2, r1
9000670e:	bf08      	it	eq
90006710:	f043 0301 	orreq.w	r3, r3, #1
90006714:	3128      	adds	r1, #40	; 0x28
90006716:	4282      	cmp	r2, r0
90006718:	bf08      	it	eq
9000671a:	f043 0301 	orreq.w	r3, r3, #1
9000671e:	428a      	cmp	r2, r1
90006720:	bf08      	it	eq
90006722:	f043 0301 	orreq.w	r3, r3, #1
90006726:	3114      	adds	r1, #20
90006728:	428a      	cmp	r2, r1
9000672a:	bf08      	it	eq
9000672c:	f043 0301 	orreq.w	r3, r3, #1
90006730:	2b00      	cmp	r3, #0
90006732:	f47f af6c 	bne.w	9000660e <HAL_DMA_Abort+0x1aa>
90006736:	4b06      	ldr	r3, [pc, #24]	; (90006750 <HAL_DMA_Abort+0x2ec>)
90006738:	429a      	cmp	r2, r3
9000673a:	f43f af68 	beq.w	9000660e <HAL_DMA_Abort+0x1aa>
9000673e:	e772      	b.n	90006626 <HAL_DMA_Abort+0x1c2>
90006740:	5802541c 	.word	0x5802541c
90006744:	58025408 	.word	0x58025408
90006748:	58025430 	.word	0x58025430
9000674c:	58025444 	.word	0x58025444
90006750:	58025494 	.word	0x58025494

90006754 <HAL_DMA_Abort_IT>:
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
90006754:	2800      	cmp	r0, #0
90006756:	d05f      	beq.n	90006818 <HAL_DMA_Abort_IT+0xc4>
{
90006758:	b538      	push	{r3, r4, r5, lr}
  {
    return HAL_ERROR;
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
9000675a:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
9000675e:	4603      	mov	r3, r0
90006760:	2a02      	cmp	r2, #2
90006762:	d155      	bne.n	90006810 <HAL_DMA_Abort_IT+0xbc>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
    return HAL_ERROR;
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
90006764:	6801      	ldr	r1, [r0, #0]
90006766:	4a57      	ldr	r2, [pc, #348]	; (900068c4 <HAL_DMA_Abort_IT+0x170>)
90006768:	4291      	cmp	r1, r2
9000676a:	d048      	beq.n	900067fe <HAL_DMA_Abort_IT+0xaa>
9000676c:	3218      	adds	r2, #24
9000676e:	4291      	cmp	r1, r2
90006770:	d045      	beq.n	900067fe <HAL_DMA_Abort_IT+0xaa>
90006772:	3230      	adds	r2, #48	; 0x30
90006774:	4c54      	ldr	r4, [pc, #336]	; (900068c8 <HAL_DMA_Abort_IT+0x174>)
90006776:	4855      	ldr	r0, [pc, #340]	; (900068cc <HAL_DMA_Abort_IT+0x178>)
90006778:	42a1      	cmp	r1, r4
9000677a:	bf18      	it	ne
9000677c:	4291      	cmpne	r1, r2
9000677e:	f104 0448 	add.w	r4, r4, #72	; 0x48
90006782:	bf0c      	ite	eq
90006784:	2201      	moveq	r2, #1
90006786:	2200      	movne	r2, #0
90006788:	4281      	cmp	r1, r0
9000678a:	bf08      	it	eq
9000678c:	f042 0201 	orreq.w	r2, r2, #1
90006790:	3030      	adds	r0, #48	; 0x30
90006792:	42a1      	cmp	r1, r4
90006794:	bf08      	it	eq
90006796:	f042 0201 	orreq.w	r2, r2, #1
9000679a:	3430      	adds	r4, #48	; 0x30
9000679c:	4281      	cmp	r1, r0
9000679e:	bf08      	it	eq
900067a0:	f042 0201 	orreq.w	r2, r2, #1
900067a4:	f500 705c 	add.w	r0, r0, #880	; 0x370
900067a8:	42a1      	cmp	r1, r4
900067aa:	bf08      	it	eq
900067ac:	f042 0201 	orreq.w	r2, r2, #1
900067b0:	f504 745c 	add.w	r4, r4, #880	; 0x370
900067b4:	4281      	cmp	r1, r0
900067b6:	bf08      	it	eq
900067b8:	f042 0201 	orreq.w	r2, r2, #1
900067bc:	3030      	adds	r0, #48	; 0x30
900067be:	42a1      	cmp	r1, r4
900067c0:	bf08      	it	eq
900067c2:	f042 0201 	orreq.w	r2, r2, #1
900067c6:	3430      	adds	r4, #48	; 0x30
900067c8:	4281      	cmp	r1, r0
900067ca:	bf08      	it	eq
900067cc:	f042 0201 	orreq.w	r2, r2, #1
900067d0:	3030      	adds	r0, #48	; 0x30
900067d2:	42a1      	cmp	r1, r4
900067d4:	bf08      	it	eq
900067d6:	f042 0201 	orreq.w	r2, r2, #1
900067da:	3430      	adds	r4, #48	; 0x30
900067dc:	4281      	cmp	r1, r0
900067de:	bf08      	it	eq
900067e0:	f042 0201 	orreq.w	r2, r2, #1
900067e4:	3030      	adds	r0, #48	; 0x30
900067e6:	42a1      	cmp	r1, r4
900067e8:	bf08      	it	eq
900067ea:	f042 0201 	orreq.w	r2, r2, #1
900067ee:	4281      	cmp	r1, r0
900067f0:	bf08      	it	eq
900067f2:	f042 0201 	orreq.w	r2, r2, #1
900067f6:	b912      	cbnz	r2, 900067fe <HAL_DMA_Abort_IT+0xaa>
900067f8:	4a35      	ldr	r2, [pc, #212]	; (900068d0 <HAL_DMA_Abort_IT+0x17c>)
900067fa:	4291      	cmp	r1, r2
900067fc:	d10e      	bne.n	9000681c <HAL_DMA_Abort_IT+0xc8>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
900067fe:	2204      	movs	r2, #4
        hdma->XferAbortCallback(hdma);
      }
    }
  }

  return HAL_OK;
90006800:	2000      	movs	r0, #0
      hdma->State = HAL_DMA_STATE_ABORT;
90006802:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
90006806:	680b      	ldr	r3, [r1, #0]
90006808:	f023 0301 	bic.w	r3, r3, #1
9000680c:	600b      	str	r3, [r1, #0]
}
9000680e:	bd38      	pop	{r3, r4, r5, pc}
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
90006810:	2280      	movs	r2, #128	; 0x80
    return HAL_ERROR;
90006812:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
90006814:	655a      	str	r2, [r3, #84]	; 0x54
}
90006816:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
90006818:	2001      	movs	r0, #1
}
9000681a:	4770      	bx	lr
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
9000681c:	4a2d      	ldr	r2, [pc, #180]	; (900068d4 <HAL_DMA_Abort_IT+0x180>)
9000681e:	4d2e      	ldr	r5, [pc, #184]	; (900068d8 <HAL_DMA_Abort_IT+0x184>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
90006820:	6808      	ldr	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
90006822:	42a9      	cmp	r1, r5
90006824:	bf18      	it	ne
90006826:	4291      	cmpne	r1, r2
90006828:	4c2c      	ldr	r4, [pc, #176]	; (900068dc <HAL_DMA_Abort_IT+0x188>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
9000682a:	f020 000e 	bic.w	r0, r0, #14
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
9000682e:	f105 053c 	add.w	r5, r5, #60	; 0x3c
90006832:	bf0c      	ite	eq
90006834:	2201      	moveq	r2, #1
90006836:	2200      	movne	r2, #0
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
90006838:	6008      	str	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
9000683a:	42a1      	cmp	r1, r4
9000683c:	bf08      	it	eq
9000683e:	f042 0201 	orreq.w	r2, r2, #1
      __HAL_DMA_DISABLE(hdma);
90006842:	6808      	ldr	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
90006844:	3428      	adds	r4, #40	; 0x28
90006846:	42a9      	cmp	r1, r5
90006848:	bf08      	it	eq
9000684a:	f042 0201 	orreq.w	r2, r2, #1
      __HAL_DMA_DISABLE(hdma);
9000684e:	f020 0001 	bic.w	r0, r0, #1
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
90006852:	42a1      	cmp	r1, r4
90006854:	bf08      	it	eq
90006856:	f042 0201 	orreq.w	r2, r2, #1
9000685a:	3414      	adds	r4, #20
      __HAL_DMA_DISABLE(hdma);
9000685c:	6008      	str	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
9000685e:	42a1      	cmp	r1, r4
90006860:	bf08      	it	eq
90006862:	f042 0201 	orreq.w	r2, r2, #1
90006866:	481e      	ldr	r0, [pc, #120]	; (900068e0 <HAL_DMA_Abort_IT+0x18c>)
90006868:	4281      	cmp	r1, r0
9000686a:	bf08      	it	eq
9000686c:	f042 0201 	orreq.w	r2, r2, #1
90006870:	b912      	cbnz	r2, 90006878 <HAL_DMA_Abort_IT+0x124>
90006872:	4a1c      	ldr	r2, [pc, #112]	; (900068e4 <HAL_DMA_Abort_IT+0x190>)
90006874:	4291      	cmp	r1, r2
90006876:	d117      	bne.n	900068a8 <HAL_DMA_Abort_IT+0x154>
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
90006878:	2201      	movs	r2, #1
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
9000687a:	6d9d      	ldr	r5, [r3, #88]	; 0x58
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
9000687c:	e9d3 0417 	ldrd	r0, r4, [r3, #92]	; 0x5c
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
90006880:	6821      	ldr	r1, [r4, #0]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
90006882:	f000 001f 	and.w	r0, r0, #31
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
90006886:	f421 7180 	bic.w	r1, r1, #256	; 0x100
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
9000688a:	4082      	lsls	r2, r0
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
9000688c:	6021      	str	r1, [r4, #0]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
9000688e:	606a      	str	r2, [r5, #4]
        if(hdma->DMAmuxRequestGen != 0U)
90006890:	6eda      	ldr	r2, [r3, #108]	; 0x6c
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
90006892:	e9d3 1019 	ldrd	r1, r0, [r3, #100]	; 0x64
90006896:	6048      	str	r0, [r1, #4]
        if(hdma->DMAmuxRequestGen != 0U)
90006898:	b132      	cbz	r2, 900068a8 <HAL_DMA_Abort_IT+0x154>
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
9000689a:	6811      	ldr	r1, [r2, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
9000689c:	e9d3 041c 	ldrd	r0, r4, [r3, #112]	; 0x70
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
900068a0:	f421 7180 	bic.w	r1, r1, #256	; 0x100
900068a4:	6011      	str	r1, [r2, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
900068a6:	6044      	str	r4, [r0, #4]
      hdma->State = HAL_DMA_STATE_READY;
900068a8:	2101      	movs	r1, #1
      __HAL_UNLOCK(hdma);
900068aa:	2400      	movs	r4, #0
      if(hdma->XferAbortCallback != NULL)
900068ac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
      hdma->State = HAL_DMA_STATE_READY;
900068ae:	f883 1035 	strb.w	r1, [r3, #53]	; 0x35
      __HAL_UNLOCK(hdma);
900068b2:	f883 4034 	strb.w	r4, [r3, #52]	; 0x34
      if(hdma->XferAbortCallback != NULL)
900068b6:	b11a      	cbz	r2, 900068c0 <HAL_DMA_Abort_IT+0x16c>
        hdma->XferAbortCallback(hdma);
900068b8:	4618      	mov	r0, r3
900068ba:	4790      	blx	r2
  return HAL_OK;
900068bc:	4620      	mov	r0, r4
}
900068be:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
900068c0:	4610      	mov	r0, r2
}
900068c2:	bd38      	pop	{r3, r4, r5, pc}
900068c4:	40020010 	.word	0x40020010
900068c8:	40020040 	.word	0x40020040
900068cc:	40020070 	.word	0x40020070
900068d0:	400204b8 	.word	0x400204b8
900068d4:	5802541c 	.word	0x5802541c
900068d8:	58025408 	.word	0x58025408
900068dc:	58025430 	.word	0x58025430
900068e0:	58025480 	.word	0x58025480
900068e4:	58025494 	.word	0x58025494

900068e8 <HAL_DMA2D_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
900068e8:	2800      	cmp	r0, #0
900068ea:	d035      	beq.n	90006958 <HAL_DMA2D_Init+0x70>
{
900068ec:	b538      	push	{r3, r4, r5, lr}

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
900068ee:	f890 3061 	ldrb.w	r3, [r0, #97]	; 0x61
900068f2:	4604      	mov	r4, r0
900068f4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
900068f8:	b34b      	cbz	r3, 9000694e <HAL_DMA2D_Init+0x66>

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
900068fa:	6823      	ldr	r3, [r4, #0]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
900068fc:	2002      	movs	r0, #2
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
900068fe:	6862      	ldr	r2, [r4, #4]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
90006900:	f884 0061 	strb.w	r0, [r4, #97]	; 0x61
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
90006904:	69e1      	ldr	r1, [r4, #28]
90006906:	681d      	ldr	r5, [r3, #0]
90006908:	4814      	ldr	r0, [pc, #80]	; (9000695c <HAL_DMA2D_Init+0x74>)
9000690a:	4311      	orrs	r1, r2

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
9000690c:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
9000690e:	4028      	ands	r0, r5
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
90006910:	68e5      	ldr	r5, [r4, #12]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
90006912:	4301      	orrs	r1, r0
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
90006914:	69a0      	ldr	r0, [r4, #24]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
90006916:	6019      	str	r1, [r3, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
90006918:	4302      	orrs	r2, r0
9000691a:	6b59      	ldr	r1, [r3, #52]	; 0x34
9000691c:	4810      	ldr	r0, [pc, #64]	; (90006960 <HAL_DMA2D_Init+0x78>)
9000691e:	4008      	ands	r0, r1
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
90006920:	4910      	ldr	r1, [pc, #64]	; (90006964 <HAL_DMA2D_Init+0x7c>)
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
90006922:	4302      	orrs	r2, r0
90006924:	635a      	str	r2, [r3, #52]	; 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
90006926:	6c1a      	ldr	r2, [r3, #64]	; 0x40
90006928:	4011      	ands	r1, r2
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
9000692a:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
9000692e:	4329      	orrs	r1, r5
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
90006930:	0552      	lsls	r2, r2, #21
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
90006932:	6419      	str	r1, [r3, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
90006934:	6b59      	ldr	r1, [r3, #52]	; 0x34
90006936:	ea42 5200 	orr.w	r2, r2, r0, lsl #20
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
9000693a:	2000      	movs	r0, #0
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
9000693c:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
90006940:	430a      	orrs	r2, r1
90006942:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
90006944:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
90006946:	6660      	str	r0, [r4, #100]	; 0x64
  hdma2d->State  = HAL_DMA2D_STATE_READY;
90006948:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61

  return HAL_OK;
}
9000694c:	bd38      	pop	{r3, r4, r5, pc}
    hdma2d->Lock = HAL_UNLOCKED;
9000694e:	f880 2060 	strb.w	r2, [r0, #96]	; 0x60
    HAL_DMA2D_MspInit(hdma2d);
90006952:	f7fd fa2b 	bl	90003dac <HAL_DMA2D_MspInit>
90006956:	e7d0      	b.n	900068fa <HAL_DMA2D_Init+0x12>
    return HAL_ERROR;
90006958:	2001      	movs	r0, #1
}
9000695a:	4770      	bx	lr
9000695c:	fff8ffbf 	.word	0xfff8ffbf
90006960:	fffffef8 	.word	0xfffffef8
90006964:	ffff0000 	.word	0xffff0000

90006968 <HAL_DMA2D_LineEventCallback>:
90006968:	4770      	bx	lr
9000696a:	bf00      	nop

9000696c <HAL_DMA2D_CLUTLoadingCpltCallback>:
9000696c:	4770      	bx	lr
9000696e:	bf00      	nop

90006970 <HAL_DMA2D_IRQHandler>:
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
90006970:	6803      	ldr	r3, [r0, #0]
{
90006972:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
90006974:	685d      	ldr	r5, [r3, #4]
{
90006976:	4604      	mov	r4, r0
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
90006978:	681e      	ldr	r6, [r3, #0]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
9000697a:	07ea      	lsls	r2, r5, #31
9000697c:	d501      	bpl.n	90006982 <HAL_DMA2D_IRQHandler+0x12>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
9000697e:	05f1      	lsls	r1, r6, #23
90006980:	d456      	bmi.n	90006a30 <HAL_DMA2D_IRQHandler+0xc0>
        hdma2d->XferErrorCallback(hdma2d);
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
90006982:	06aa      	lsls	r2, r5, #26
90006984:	d501      	bpl.n	9000698a <HAL_DMA2D_IRQHandler+0x1a>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
90006986:	04b3      	lsls	r3, r6, #18
90006988:	d43b      	bmi.n	90006a02 <HAL_DMA2D_IRQHandler+0x92>
        hdma2d->XferErrorCallback(hdma2d);
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
9000698a:	0728      	lsls	r0, r5, #28
9000698c:	d501      	bpl.n	90006992 <HAL_DMA2D_IRQHandler+0x22>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
9000698e:	0531      	lsls	r1, r6, #20
90006990:	d421      	bmi.n	900069d6 <HAL_DMA2D_IRQHandler+0x66>
        hdma2d->XferErrorCallback(hdma2d);
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
90006992:	076a      	lsls	r2, r5, #29
90006994:	d501      	bpl.n	9000699a <HAL_DMA2D_IRQHandler+0x2a>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
90006996:	0573      	lsls	r3, r6, #21
90006998:	d472      	bmi.n	90006a80 <HAL_DMA2D_IRQHandler+0x110>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
9000699a:	07a8      	lsls	r0, r5, #30
9000699c:	d501      	bpl.n	900069a2 <HAL_DMA2D_IRQHandler+0x32>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
9000699e:	05b1      	lsls	r1, r6, #22
900069a0:	d404      	bmi.n	900069ac <HAL_DMA2D_IRQHandler+0x3c>
        hdma2d->XferCpltCallback(hdma2d);
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
900069a2:	06ea      	lsls	r2, r5, #27
900069a4:	d501      	bpl.n	900069aa <HAL_DMA2D_IRQHandler+0x3a>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
900069a6:	04f3      	lsls	r3, r6, #19
900069a8:	d457      	bmi.n	90006a5a <HAL_DMA2D_IRQHandler+0xea>
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
900069aa:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
900069ac:	6823      	ldr	r3, [r4, #0]
900069ae:	681a      	ldr	r2, [r3, #0]
900069b0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
900069b4:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
900069b6:	2202      	movs	r2, #2
900069b8:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_READY;
900069ba:	2201      	movs	r2, #1
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
900069bc:	6e63      	ldr	r3, [r4, #100]	; 0x64
900069be:	6663      	str	r3, [r4, #100]	; 0x64
      __HAL_UNLOCK(hdma2d);
900069c0:	2300      	movs	r3, #0
      hdma2d->State = HAL_DMA2D_STATE_READY;
900069c2:	f884 2061 	strb.w	r2, [r4, #97]	; 0x61
      __HAL_UNLOCK(hdma2d);
900069c6:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
      if (hdma2d->XferCpltCallback != NULL)
900069ca:	6a23      	ldr	r3, [r4, #32]
900069cc:	2b00      	cmp	r3, #0
900069ce:	d0e8      	beq.n	900069a2 <HAL_DMA2D_IRQHandler+0x32>
        hdma2d->XferCpltCallback(hdma2d);
900069d0:	4620      	mov	r0, r4
900069d2:	4798      	blx	r3
900069d4:	e7e5      	b.n	900069a2 <HAL_DMA2D_IRQHandler+0x32>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
900069d6:	6823      	ldr	r3, [r4, #0]
900069d8:	681a      	ldr	r2, [r3, #0]
900069da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
900069de:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
900069e0:	2208      	movs	r2, #8
900069e2:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
900069e4:	2204      	movs	r2, #4
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
900069e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
900069e8:	4313      	orrs	r3, r2
900069ea:	6663      	str	r3, [r4, #100]	; 0x64
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
900069ec:	f884 2061 	strb.w	r2, [r4, #97]	; 0x61
      __HAL_UNLOCK(hdma2d);
900069f0:	2200      	movs	r2, #0
      if (hdma2d->XferErrorCallback != NULL)
900069f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
      __HAL_UNLOCK(hdma2d);
900069f4:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
      if (hdma2d->XferErrorCallback != NULL)
900069f8:	2b00      	cmp	r3, #0
900069fa:	d0ca      	beq.n	90006992 <HAL_DMA2D_IRQHandler+0x22>
        hdma2d->XferErrorCallback(hdma2d);
900069fc:	4620      	mov	r0, r4
900069fe:	4798      	blx	r3
90006a00:	e7c7      	b.n	90006992 <HAL_DMA2D_IRQHandler+0x22>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
90006a02:	6823      	ldr	r3, [r4, #0]
90006a04:	681a      	ldr	r2, [r3, #0]
90006a06:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
90006a0a:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
90006a0c:	2220      	movs	r2, #32
90006a0e:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
90006a10:	2204      	movs	r2, #4
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
90006a12:	6e63      	ldr	r3, [r4, #100]	; 0x64
90006a14:	f043 0302 	orr.w	r3, r3, #2
90006a18:	6663      	str	r3, [r4, #100]	; 0x64
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
90006a1a:	f884 2061 	strb.w	r2, [r4, #97]	; 0x61
      __HAL_UNLOCK(hdma2d);
90006a1e:	2200      	movs	r2, #0
      if (hdma2d->XferErrorCallback != NULL)
90006a20:	6a63      	ldr	r3, [r4, #36]	; 0x24
      __HAL_UNLOCK(hdma2d);
90006a22:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
      if (hdma2d->XferErrorCallback != NULL)
90006a26:	2b00      	cmp	r3, #0
90006a28:	d0af      	beq.n	9000698a <HAL_DMA2D_IRQHandler+0x1a>
        hdma2d->XferErrorCallback(hdma2d);
90006a2a:	4620      	mov	r0, r4
90006a2c:	4798      	blx	r3
90006a2e:	e7ac      	b.n	9000698a <HAL_DMA2D_IRQHandler+0x1a>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
90006a30:	681a      	ldr	r2, [r3, #0]
90006a32:	f422 7280 	bic.w	r2, r2, #256	; 0x100
90006a36:	601a      	str	r2, [r3, #0]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
90006a38:	6e42      	ldr	r2, [r0, #100]	; 0x64
90006a3a:	f042 0201 	orr.w	r2, r2, #1
90006a3e:	6642      	str	r2, [r0, #100]	; 0x64
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
90006a40:	2201      	movs	r2, #1
90006a42:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
90006a44:	2304      	movs	r3, #4
90006a46:	f880 3061 	strb.w	r3, [r0, #97]	; 0x61
      __HAL_UNLOCK(hdma2d);
90006a4a:	2300      	movs	r3, #0
90006a4c:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
      if (hdma2d->XferErrorCallback != NULL)
90006a50:	6a43      	ldr	r3, [r0, #36]	; 0x24
90006a52:	2b00      	cmp	r3, #0
90006a54:	d095      	beq.n	90006982 <HAL_DMA2D_IRQHandler+0x12>
        hdma2d->XferErrorCallback(hdma2d);
90006a56:	4798      	blx	r3
90006a58:	e793      	b.n	90006982 <HAL_DMA2D_IRQHandler+0x12>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
90006a5a:	6823      	ldr	r3, [r4, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
90006a5c:	2010      	movs	r0, #16
      hdma2d->State = HAL_DMA2D_STATE_READY;
90006a5e:	2101      	movs	r1, #1
      __HAL_UNLOCK(hdma2d);
90006a60:	2500      	movs	r5, #0
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
90006a62:	681a      	ldr	r2, [r3, #0]
90006a64:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
90006a68:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
90006a6a:	6098      	str	r0, [r3, #8]
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
90006a6c:	4620      	mov	r0, r4
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
90006a6e:	6e63      	ldr	r3, [r4, #100]	; 0x64
      __HAL_UNLOCK(hdma2d);
90006a70:	f884 5060 	strb.w	r5, [r4, #96]	; 0x60
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
90006a74:	6663      	str	r3, [r4, #100]	; 0x64
      hdma2d->State = HAL_DMA2D_STATE_READY;
90006a76:	f884 1061 	strb.w	r1, [r4, #97]	; 0x61
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
90006a7a:	f7ff ff77 	bl	9000696c <HAL_DMA2D_CLUTLoadingCpltCallback>
}
90006a7e:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
90006a80:	6823      	ldr	r3, [r4, #0]
      HAL_DMA2D_LineEventCallback(hdma2d);
90006a82:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
90006a84:	681a      	ldr	r2, [r3, #0]
90006a86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
90006a8a:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
90006a8c:	2204      	movs	r2, #4
90006a8e:	609a      	str	r2, [r3, #8]
      HAL_DMA2D_LineEventCallback(hdma2d);
90006a90:	f7ff ff6a 	bl	90006968 <HAL_DMA2D_LineEventCallback>
90006a94:	e781      	b.n	9000699a <HAL_DMA2D_IRQHandler+0x2a>
90006a96:	bf00      	nop

90006a98 <HAL_DMA2D_ConfigLayer>:
  {
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
90006a98:	f890 2060 	ldrb.w	r2, [r0, #96]	; 0x60
90006a9c:	2a01      	cmp	r2, #1
90006a9e:	d065      	beq.n	90006b6c <HAL_DMA2D_ConfigLayer+0xd4>
90006aa0:	4603      	mov	r3, r0
  hdma2d->State = HAL_DMA2D_STATE_BUSY;

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
90006aa2:	ebc1 00c1 	rsb	r0, r1, r1, lsl #3
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
90006aa6:	2202      	movs	r2, #2
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
90006aa8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
{
90006aac:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(hdma2d);
90006aae:	2401      	movs	r4, #1
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
90006ab0:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  __HAL_LOCK(hdma2d);
90006ab4:	f883 4060 	strb.w	r4, [r3, #96]	; 0x60
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
90006ab8:	6b82      	ldr	r2, [r0, #56]	; 0x38
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
90006aba:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
90006abc:	6b05      	ldr	r5, [r0, #48]	; 0x30
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
90006abe:	0512      	lsls	r2, r2, #20
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
90006ac0:	f1a4 0c09 	sub.w	ip, r4, #9
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
90006ac4:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
90006ac8:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
90006aca:	f1bc 0f01 	cmp.w	ip, #1
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
90006ace:	ea42 0204 	orr.w	r2, r2, r4
90006ad2:	ea42 5245 	orr.w	r2, r2, r5, lsl #21
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
90006ad6:	d922      	bls.n	90006b1e <HAL_DMA2D_ConfigLayer+0x86>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
90006ad8:	6b45      	ldr	r5, [r0, #52]	; 0x34
90006ada:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
90006ade:	b981      	cbnz	r1, 90006b02 <HAL_DMA2D_ConfigLayer+0x6a>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
90006ae0:	6818      	ldr	r0, [r3, #0]
90006ae2:	4923      	ldr	r1, [pc, #140]	; (90006b70 <HAL_DMA2D_ConfigLayer+0xd8>)
90006ae4:	6a45      	ldr	r5, [r0, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
90006ae6:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
90006ae8:	4029      	ands	r1, r5
90006aea:	4311      	orrs	r1, r2
90006aec:	6241      	str	r1, [r0, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
90006aee:	6184      	str	r4, [r0, #24]
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
90006af0:	2200      	movs	r2, #0
  hdma2d->State = HAL_DMA2D_STATE_READY;
90006af2:	2101      	movs	r1, #1

  return HAL_OK;
90006af4:	4610      	mov	r0, r2
  hdma2d->State = HAL_DMA2D_STATE_READY;
90006af6:	f883 1061 	strb.w	r1, [r3, #97]	; 0x61
  __HAL_UNLOCK(hdma2d);
90006afa:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
}
90006afe:	bc70      	pop	{r4, r5, r6}
90006b00:	4770      	bx	lr
    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
90006b02:	2c0b      	cmp	r4, #11
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
90006b04:	681c      	ldr	r4, [r3, #0]
    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
90006b06:	d129      	bne.n	90006b5c <HAL_DMA2D_ConfigLayer+0xc4>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
90006b08:	69e5      	ldr	r5, [r4, #28]
90006b0a:	491a      	ldr	r1, [pc, #104]	; (90006b74 <HAL_DMA2D_ConfigLayer+0xdc>)
90006b0c:	4029      	ands	r1, r5
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
90006b0e:	6c05      	ldr	r5, [r0, #64]	; 0x40
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
90006b10:	6a80      	ldr	r0, [r0, #40]	; 0x28
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
90006b12:	ea41 4185 	orr.w	r1, r1, r5, lsl #18
90006b16:	4311      	orrs	r1, r2
90006b18:	61e1      	str	r1, [r4, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
90006b1a:	6120      	str	r0, [r4, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
90006b1c:	e7e8      	b.n	90006af0 <HAL_DMA2D_ConfigLayer+0x58>
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
90006b1e:	6b44      	ldr	r4, [r0, #52]	; 0x34
90006b20:	f004 447f 	and.w	r4, r4, #4278190080	; 0xff000000
90006b24:	4314      	orrs	r4, r2
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
90006b26:	b961      	cbnz	r1, 90006b42 <HAL_DMA2D_ConfigLayer+0xaa>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
90006b28:	6819      	ldr	r1, [r3, #0]
90006b2a:	4a11      	ldr	r2, [pc, #68]	; (90006b70 <HAL_DMA2D_ConfigLayer+0xd8>)
90006b2c:	6a4e      	ldr	r6, [r1, #36]	; 0x24
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
90006b2e:	6b58      	ldr	r0, [r3, #52]	; 0x34
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
90006b30:	4032      	ands	r2, r6
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
90006b32:	6a9d      	ldr	r5, [r3, #40]	; 0x28
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
90006b34:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
90006b38:	4322      	orrs	r2, r4
90006b3a:	624a      	str	r2, [r1, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
90006b3c:	618d      	str	r5, [r1, #24]
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
90006b3e:	6288      	str	r0, [r1, #40]	; 0x28
90006b40:	e7d6      	b.n	90006af0 <HAL_DMA2D_ConfigLayer+0x58>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
90006b42:	6819      	ldr	r1, [r3, #0]
90006b44:	4a0a      	ldr	r2, [pc, #40]	; (90006b70 <HAL_DMA2D_ConfigLayer+0xd8>)
90006b46:	69cd      	ldr	r5, [r1, #28]
90006b48:	402a      	ands	r2, r5
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
90006b4a:	6a85      	ldr	r5, [r0, #40]	; 0x28
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
90006b4c:	4322      	orrs	r2, r4
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
90006b4e:	6b44      	ldr	r4, [r0, #52]	; 0x34
90006b50:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
90006b54:	61ca      	str	r2, [r1, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
90006b56:	610d      	str	r5, [r1, #16]
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
90006b58:	620c      	str	r4, [r1, #32]
90006b5a:	e7c9      	b.n	90006af0 <HAL_DMA2D_ConfigLayer+0x58>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
90006b5c:	69e5      	ldr	r5, [r4, #28]
90006b5e:	4904      	ldr	r1, [pc, #16]	; (90006b70 <HAL_DMA2D_ConfigLayer+0xd8>)
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
90006b60:	6a80      	ldr	r0, [r0, #40]	; 0x28
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
90006b62:	4029      	ands	r1, r5
90006b64:	4311      	orrs	r1, r2
90006b66:	61e1      	str	r1, [r4, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
90006b68:	6120      	str	r0, [r4, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
90006b6a:	e7c1      	b.n	90006af0 <HAL_DMA2D_ConfigLayer+0x58>
  __HAL_LOCK(hdma2d);
90006b6c:	2002      	movs	r0, #2
}
90006b6e:	4770      	bx	lr
90006b70:	00ccfff0 	.word	0x00ccfff0
90006b74:	00c0fff0 	.word	0x00c0fff0

90006b78 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
90006b78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
90006b7c:	680c      	ldr	r4, [r1, #0]
{
90006b7e:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00U)
90006b80:	2c00      	cmp	r4, #0
90006b82:	f000 80a7 	beq.w	90006cd4 <HAL_GPIO_Init+0x15c>
90006b86:	f04f 0c00 	mov.w	ip, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
90006b8a:	4f8a      	ldr	r7, [pc, #552]	; (90006db4 <HAL_GPIO_Init+0x23c>)
  uint32_t position = 0x00U;
90006b8c:	4663      	mov	r3, ip
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
90006b8e:	2201      	movs	r2, #1
90006b90:	409a      	lsls	r2, r3
    if (iocurrent != 0x00U)
90006b92:	ea12 0e04 	ands.w	lr, r2, r4
90006b96:	f000 8096 	beq.w	90006cc6 <HAL_GPIO_Init+0x14e>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
90006b9a:	684d      	ldr	r5, [r1, #4]
90006b9c:	f005 0903 	and.w	r9, r5, #3
90006ba0:	f109 36ff 	add.w	r6, r9, #4294967295
90006ba4:	2e01      	cmp	r6, #1
90006ba6:	f240 8098 	bls.w	90006cda <HAL_GPIO_Init+0x162>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
90006baa:	f1b9 0f03 	cmp.w	r9, #3
90006bae:	f040 80d2 	bne.w	90006d56 <HAL_GPIO_Init+0x1de>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
90006bb2:	fa09 f20c 	lsl.w	r2, r9, ip
90006bb6:	ea6f 0802 	mvn.w	r8, r2
      temp = GPIOx->MODER;
90006bba:	6806      	ldr	r6, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
90006bbc:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
90006bc0:	ea06 0608 	and.w	r6, r6, r8
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
90006bc4:	ea42 0206 	orr.w	r2, r2, r6
      GPIOx->MODER = temp;
90006bc8:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
90006bca:	d07c      	beq.n	90006cc6 <HAL_GPIO_Init+0x14e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
90006bcc:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
90006bd0:	f023 0803 	bic.w	r8, r3, #3

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
90006bd4:	f003 0903 	and.w	r9, r3, #3
90006bd8:	260f      	movs	r6, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
90006bda:	f042 0202 	orr.w	r2, r2, #2
90006bde:	f108 48b0 	add.w	r8, r8, #1476395008	; 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
90006be2:	ea4f 0989 	mov.w	r9, r9, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
90006be6:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
90006bea:	f508 6880 	add.w	r8, r8, #1024	; 0x400
90006bee:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
90006bf2:	fa06 f609 	lsl.w	r6, r6, r9
        __HAL_RCC_SYSCFG_CLK_ENABLE();
90006bf6:	f002 0202 	and.w	r2, r2, #2
90006bfa:	9201      	str	r2, [sp, #4]
90006bfc:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
90006bfe:	f8d8 2008 	ldr.w	r2, [r8, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
90006c02:	ea22 0206 	bic.w	r2, r2, r6
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
90006c06:	4e6c      	ldr	r6, [pc, #432]	; (90006db8 <HAL_GPIO_Init+0x240>)
90006c08:	42b0      	cmp	r0, r6
90006c0a:	d028      	beq.n	90006c5e <HAL_GPIO_Init+0xe6>
90006c0c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
90006c10:	42b0      	cmp	r0, r6
90006c12:	f000 80ac 	beq.w	90006d6e <HAL_GPIO_Init+0x1f6>
90006c16:	4e69      	ldr	r6, [pc, #420]	; (90006dbc <HAL_GPIO_Init+0x244>)
90006c18:	42b0      	cmp	r0, r6
90006c1a:	f000 80ad 	beq.w	90006d78 <HAL_GPIO_Init+0x200>
90006c1e:	4e68      	ldr	r6, [pc, #416]	; (90006dc0 <HAL_GPIO_Init+0x248>)
90006c20:	42b0      	cmp	r0, r6
90006c22:	f000 809f 	beq.w	90006d64 <HAL_GPIO_Init+0x1ec>
90006c26:	4e67      	ldr	r6, [pc, #412]	; (90006dc4 <HAL_GPIO_Init+0x24c>)
90006c28:	42b0      	cmp	r0, r6
90006c2a:	f000 80af 	beq.w	90006d8c <HAL_GPIO_Init+0x214>
90006c2e:	4e66      	ldr	r6, [pc, #408]	; (90006dc8 <HAL_GPIO_Init+0x250>)
90006c30:	42b0      	cmp	r0, r6
90006c32:	f000 80b0 	beq.w	90006d96 <HAL_GPIO_Init+0x21e>
90006c36:	4e65      	ldr	r6, [pc, #404]	; (90006dcc <HAL_GPIO_Init+0x254>)
90006c38:	42b0      	cmp	r0, r6
90006c3a:	f000 80a2 	beq.w	90006d82 <HAL_GPIO_Init+0x20a>
90006c3e:	4e64      	ldr	r6, [pc, #400]	; (90006dd0 <HAL_GPIO_Init+0x258>)
90006c40:	42b0      	cmp	r0, r6
90006c42:	f000 80ad 	beq.w	90006da0 <HAL_GPIO_Init+0x228>
90006c46:	4e63      	ldr	r6, [pc, #396]	; (90006dd4 <HAL_GPIO_Init+0x25c>)
90006c48:	42b0      	cmp	r0, r6
90006c4a:	f000 80ae 	beq.w	90006daa <HAL_GPIO_Init+0x232>
90006c4e:	4e62      	ldr	r6, [pc, #392]	; (90006dd8 <HAL_GPIO_Init+0x260>)
90006c50:	42b0      	cmp	r0, r6
90006c52:	bf0c      	ite	eq
90006c54:	2609      	moveq	r6, #9
90006c56:	260a      	movne	r6, #10
90006c58:	fa06 f609 	lsl.w	r6, r6, r9
90006c5c:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2U] = temp;
90006c5e:	f8c8 2008 	str.w	r2, [r8, #8]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
90006c62:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
90006c66:	f415 1f80 	tst.w	r5, #1048576	; 0x100000
        temp &= ~(iocurrent);
90006c6a:	ea6f 060e 	mvn.w	r6, lr
        temp = EXTI->RTSR1;
90006c6e:	6812      	ldr	r2, [r2, #0]
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
90006c70:	f04f 48b0 	mov.w	r8, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
90006c74:	bf0c      	ite	eq
90006c76:	4032      	andeq	r2, r6
          temp |= iocurrent;
90006c78:	ea4e 0202 	orrne.w	r2, lr, r2

        temp = EXTI->FTSR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
90006c7c:	f415 1f00 	tst.w	r5, #2097152	; 0x200000
        EXTI->RTSR1 = temp;
90006c80:	f8c8 2000 	str.w	r2, [r8]
        temp = EXTI->FTSR1;
90006c84:	f8d8 2004 	ldr.w	r2, [r8, #4]
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
90006c88:	f04f 48b0 	mov.w	r8, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
90006c8c:	bf0c      	ite	eq
90006c8e:	4032      	andeq	r2, r6
          temp |= iocurrent;
90006c90:	ea4e 0202 	orrne.w	r2, lr, r2

        temp = EXTI_CurrentCPU->EMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
90006c94:	f415 3f00 	tst.w	r5, #131072	; 0x20000
        EXTI->FTSR1 = temp;
90006c98:	f8c8 2004 	str.w	r2, [r8, #4]
        temp = EXTI_CurrentCPU->EMR1;
90006c9c:	f8d8 2084 	ldr.w	r2, [r8, #132]	; 0x84
        {
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->EMR1 = temp;
90006ca0:	f04f 48b0 	mov.w	r8, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
90006ca4:	bf0c      	ite	eq
90006ca6:	4032      	andeq	r2, r6
          temp |= iocurrent;
90006ca8:	ea4e 0202 	orrne.w	r2, lr, r2

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
90006cac:	03ed      	lsls	r5, r5, #15
        {
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->IMR1 = temp;
90006cae:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
        EXTI_CurrentCPU->EMR1 = temp;
90006cb2:	f8c8 2084 	str.w	r2, [r8, #132]	; 0x84
        temp = EXTI_CurrentCPU->IMR1;
90006cb6:	f8d8 2080 	ldr.w	r2, [r8, #128]	; 0x80
        temp &= ~(iocurrent);
90006cba:	bf54      	ite	pl
90006cbc:	4032      	andpl	r2, r6
          temp |= iocurrent;
90006cbe:	ea4e 0202 	orrmi.w	r2, lr, r2
        EXTI_CurrentCPU->IMR1 = temp;
90006cc2:	f8c5 2080 	str.w	r2, [r5, #128]	; 0x80
      }
    }

    position++;
90006cc6:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
90006cc8:	f10c 0c02 	add.w	ip, ip, #2
90006ccc:	fa34 f203 	lsrs.w	r2, r4, r3
90006cd0:	f47f af5d 	bne.w	90006b8e <HAL_GPIO_Init+0x16>
  }
}
90006cd4:	b003      	add	sp, #12
90006cd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
90006cda:	f04f 0803 	mov.w	r8, #3
        temp = GPIOx->OSPEEDR;
90006cde:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
90006ce0:	fa08 f80c 	lsl.w	r8, r8, ip
90006ce4:	ea26 0a08 	bic.w	sl, r6, r8
        temp |= (GPIO_Init->Speed << (position * 2U));
90006ce8:	68ce      	ldr	r6, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
90006cea:	ea6f 0808 	mvn.w	r8, r8
        temp |= (GPIO_Init->Speed << (position * 2U));
90006cee:	fa06 f60c 	lsl.w	r6, r6, ip
90006cf2:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OSPEEDR = temp;
90006cf6:	6086      	str	r6, [r0, #8]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
90006cf8:	f3c5 1600 	ubfx	r6, r5, #4, #1
        temp = GPIOx->OTYPER;
90006cfc:	f8d0 a004 	ldr.w	sl, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
90006d00:	409e      	lsls	r6, r3
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
90006d02:	ea2a 0202 	bic.w	r2, sl, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
90006d06:	4332      	orrs	r2, r6
        GPIOx->OTYPER = temp;
90006d08:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
90006d0a:	68c2      	ldr	r2, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
90006d0c:	f1b9 0f02 	cmp.w	r9, #2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
90006d10:	688e      	ldr	r6, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
90006d12:	ea02 0208 	and.w	r2, r2, r8
      temp |= ((GPIO_Init->Pull) << (position * 2U));
90006d16:	fa06 f60c 	lsl.w	r6, r6, ip
90006d1a:	ea46 0602 	orr.w	r6, r6, r2
      GPIOx->PUPDR = temp;
90006d1e:	fa09 f20c 	lsl.w	r2, r9, ip
90006d22:	60c6      	str	r6, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
90006d24:	f47f af49 	bne.w	90006bba <HAL_GPIO_Init+0x42>
        temp = GPIOx->AFR[position >> 3U];
90006d28:	ea4f 09d3 	mov.w	r9, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
90006d2c:	f003 0b07 	and.w	fp, r3, #7
90006d30:	260f      	movs	r6, #15
90006d32:	eb00 0989 	add.w	r9, r0, r9, lsl #2
90006d36:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3U];
90006d3a:	f8d9 a020 	ldr.w	sl, [r9, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
90006d3e:	fa06 f60b 	lsl.w	r6, r6, fp
90006d42:	ea2a 0a06 	bic.w	sl, sl, r6
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
90006d46:	690e      	ldr	r6, [r1, #16]
90006d48:	fa06 f60b 	lsl.w	r6, r6, fp
90006d4c:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->AFR[position >> 3U] = temp;
90006d50:	f8c9 6020 	str.w	r6, [r9, #32]
90006d54:	e731      	b.n	90006bba <HAL_GPIO_Init+0x42>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
90006d56:	f04f 0803 	mov.w	r8, #3
90006d5a:	fa08 f80c 	lsl.w	r8, r8, ip
90006d5e:	ea6f 0808 	mvn.w	r8, r8
90006d62:	e7d2      	b.n	90006d0a <HAL_GPIO_Init+0x192>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
90006d64:	2603      	movs	r6, #3
90006d66:	fa06 f609 	lsl.w	r6, r6, r9
90006d6a:	4332      	orrs	r2, r6
90006d6c:	e777      	b.n	90006c5e <HAL_GPIO_Init+0xe6>
90006d6e:	2601      	movs	r6, #1
90006d70:	fa06 f609 	lsl.w	r6, r6, r9
90006d74:	4332      	orrs	r2, r6
90006d76:	e772      	b.n	90006c5e <HAL_GPIO_Init+0xe6>
90006d78:	2602      	movs	r6, #2
90006d7a:	fa06 f609 	lsl.w	r6, r6, r9
90006d7e:	4332      	orrs	r2, r6
90006d80:	e76d      	b.n	90006c5e <HAL_GPIO_Init+0xe6>
90006d82:	2606      	movs	r6, #6
90006d84:	fa06 f609 	lsl.w	r6, r6, r9
90006d88:	4332      	orrs	r2, r6
90006d8a:	e768      	b.n	90006c5e <HAL_GPIO_Init+0xe6>
90006d8c:	2604      	movs	r6, #4
90006d8e:	fa06 f609 	lsl.w	r6, r6, r9
90006d92:	4332      	orrs	r2, r6
90006d94:	e763      	b.n	90006c5e <HAL_GPIO_Init+0xe6>
90006d96:	2605      	movs	r6, #5
90006d98:	fa06 f609 	lsl.w	r6, r6, r9
90006d9c:	4332      	orrs	r2, r6
90006d9e:	e75e      	b.n	90006c5e <HAL_GPIO_Init+0xe6>
90006da0:	2607      	movs	r6, #7
90006da2:	fa06 f609 	lsl.w	r6, r6, r9
90006da6:	4332      	orrs	r2, r6
90006da8:	e759      	b.n	90006c5e <HAL_GPIO_Init+0xe6>
90006daa:	2608      	movs	r6, #8
90006dac:	fa06 f609 	lsl.w	r6, r6, r9
90006db0:	4332      	orrs	r2, r6
90006db2:	e754      	b.n	90006c5e <HAL_GPIO_Init+0xe6>
90006db4:	58024400 	.word	0x58024400
90006db8:	58020000 	.word	0x58020000
90006dbc:	58020800 	.word	0x58020800
90006dc0:	58020c00 	.word	0x58020c00
90006dc4:	58021000 	.word	0x58021000
90006dc8:	58021400 	.word	0x58021400
90006dcc:	58021800 	.word	0x58021800
90006dd0:	58021c00 	.word	0x58021c00
90006dd4:	58022000 	.word	0x58022000
90006dd8:	58022400 	.word	0x58022400

90006ddc <HAL_GPIO_DeInit>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
90006ddc:	2900      	cmp	r1, #0
90006dde:	f000 80a4 	beq.w	90006f2a <HAL_GPIO_DeInit+0x14e>
  uint32_t position = 0x00U;
90006de2:	2300      	movs	r3, #0
{
90006de4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90006de8:	f8df 9168 	ldr.w	r9, [pc, #360]	; 90006f54 <HAL_GPIO_DeInit+0x178>
90006dec:	b083      	sub	sp, #12
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
90006dee:	f8df 8168 	ldr.w	r8, [pc, #360]	; 90006f58 <HAL_GPIO_DeInit+0x17c>
90006df2:	f8df a168 	ldr.w	sl, [pc, #360]	; 90006f5c <HAL_GPIO_DeInit+0x180>
90006df6:	f8df b168 	ldr.w	fp, [pc, #360]	; 90006f60 <HAL_GPIO_DeInit+0x184>
    iocurrent = GPIO_Pin & (1UL << position) ;
90006dfa:	f04f 0e01 	mov.w	lr, #1
90006dfe:	fa0e f203 	lsl.w	r2, lr, r3
    if (iocurrent != 0x00U)
90006e02:	ea12 0c01 	ands.w	ip, r2, r1
90006e06:	d06b      	beq.n	90006ee0 <HAL_GPIO_DeInit+0x104>
      tmp = SYSCFG->EXTICR[position >> 2U];
90006e08:	f023 0503 	bic.w	r5, r3, #3
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
90006e0c:	f003 0403 	and.w	r4, r3, #3
90006e10:	260f      	movs	r6, #15
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
90006e12:	4540      	cmp	r0, r8
90006e14:	444d      	add	r5, r9
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
90006e16:	ea4f 0484 	mov.w	r4, r4, lsl #2
      tmp = SYSCFG->EXTICR[position >> 2U];
90006e1a:	68af      	ldr	r7, [r5, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
90006e1c:	fa06 f604 	lsl.w	r6, r6, r4
90006e20:	ea07 0706 	and.w	r7, r7, r6
90006e24:	9701      	str	r7, [sp, #4]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
90006e26:	d01f      	beq.n	90006e68 <HAL_GPIO_DeInit+0x8c>
90006e28:	4550      	cmp	r0, sl
90006e2a:	d01a      	beq.n	90006e62 <HAL_GPIO_DeInit+0x86>
90006e2c:	4558      	cmp	r0, fp
90006e2e:	d05e      	beq.n	90006eee <HAL_GPIO_DeInit+0x112>
90006e30:	4f43      	ldr	r7, [pc, #268]	; (90006f40 <HAL_GPIO_DeInit+0x164>)
90006e32:	42b8      	cmp	r0, r7
90006e34:	d065      	beq.n	90006f02 <HAL_GPIO_DeInit+0x126>
90006e36:	4f43      	ldr	r7, [pc, #268]	; (90006f44 <HAL_GPIO_DeInit+0x168>)
90006e38:	42b8      	cmp	r0, r7
90006e3a:	d067      	beq.n	90006f0c <HAL_GPIO_DeInit+0x130>
90006e3c:	4f42      	ldr	r7, [pc, #264]	; (90006f48 <HAL_GPIO_DeInit+0x16c>)
90006e3e:	42b8      	cmp	r0, r7
90006e40:	d05a      	beq.n	90006ef8 <HAL_GPIO_DeInit+0x11c>
90006e42:	4f42      	ldr	r7, [pc, #264]	; (90006f4c <HAL_GPIO_DeInit+0x170>)
90006e44:	42b8      	cmp	r0, r7
90006e46:	d06b      	beq.n	90006f20 <HAL_GPIO_DeInit+0x144>
90006e48:	4f41      	ldr	r7, [pc, #260]	; (90006f50 <HAL_GPIO_DeInit+0x174>)
90006e4a:	42b8      	cmp	r0, r7
90006e4c:	d06e      	beq.n	90006f2c <HAL_GPIO_DeInit+0x150>
90006e4e:	f8df e114 	ldr.w	lr, [pc, #276]	; 90006f64 <HAL_GPIO_DeInit+0x188>
90006e52:	4570      	cmp	r0, lr
90006e54:	d05f      	beq.n	90006f16 <HAL_GPIO_DeInit+0x13a>
90006e56:	f8df e110 	ldr.w	lr, [pc, #272]	; 90006f68 <HAL_GPIO_DeInit+0x18c>
90006e5a:	4570      	cmp	r0, lr
90006e5c:	d06b      	beq.n	90006f36 <HAL_GPIO_DeInit+0x15a>
90006e5e:	f04f 0e0a 	mov.w	lr, #10
90006e62:	fa0e f404 	lsl.w	r4, lr, r4
90006e66:	e000      	b.n	90006e6a <HAL_GPIO_DeInit+0x8e>
90006e68:	2400      	movs	r4, #0
90006e6a:	9f01      	ldr	r7, [sp, #4]
90006e6c:	42a7      	cmp	r7, r4
90006e6e:	d119      	bne.n	90006ea4 <HAL_GPIO_DeInit+0xc8>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
90006e70:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
90006e74:	f8d4 7080 	ldr.w	r7, [r4, #128]	; 0x80
90006e78:	ea27 070c 	bic.w	r7, r7, ip
90006e7c:	f8c4 7080 	str.w	r7, [r4, #128]	; 0x80
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
90006e80:	f8d4 7084 	ldr.w	r7, [r4, #132]	; 0x84
90006e84:	ea27 070c 	bic.w	r7, r7, ip
90006e88:	f8c4 7084 	str.w	r7, [r4, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
90006e8c:	6867      	ldr	r7, [r4, #4]
90006e8e:	ea27 070c 	bic.w	r7, r7, ip
90006e92:	6067      	str	r7, [r4, #4]
        EXTI->RTSR1 &= ~(iocurrent);
90006e94:	6827      	ldr	r7, [r4, #0]
90006e96:	ea27 070c 	bic.w	r7, r7, ip
90006e9a:	6027      	str	r7, [r4, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
90006e9c:	68ac      	ldr	r4, [r5, #8]
90006e9e:	ea24 0406 	bic.w	r4, r4, r6
90006ea2:	60ac      	str	r4, [r5, #8]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
90006ea4:	005d      	lsls	r5, r3, #1
90006ea6:	2403      	movs	r4, #3

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
90006ea8:	f003 0607 	and.w	r6, r3, #7
90006eac:	270f      	movs	r7, #15
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
90006eae:	40ac      	lsls	r4, r5
90006eb0:	6805      	ldr	r5, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
90006eb2:	00b6      	lsls	r6, r6, #2
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
90006eb4:	4325      	orrs	r5, r4
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
90006eb6:	40b7      	lsls	r7, r6
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
90006eb8:	6005      	str	r5, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
90006eba:	08dd      	lsrs	r5, r3, #3
90006ebc:	eb00 0585 	add.w	r5, r0, r5, lsl #2
90006ec0:	6a2e      	ldr	r6, [r5, #32]
90006ec2:	ea26 0607 	bic.w	r6, r6, r7
90006ec6:	622e      	str	r6, [r5, #32]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
90006ec8:	68c5      	ldr	r5, [r0, #12]
90006eca:	ea25 0504 	bic.w	r5, r5, r4
90006ece:	60c5      	str	r5, [r0, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
90006ed0:	6845      	ldr	r5, [r0, #4]
90006ed2:	ea25 0202 	bic.w	r2, r5, r2
90006ed6:	6042      	str	r2, [r0, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
90006ed8:	6882      	ldr	r2, [r0, #8]
90006eda:	ea22 0204 	bic.w	r2, r2, r4
90006ede:	6082      	str	r2, [r0, #8]
    }

    position++;
90006ee0:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != 0x00U)
90006ee2:	fa31 f203 	lsrs.w	r2, r1, r3
90006ee6:	d188      	bne.n	90006dfa <HAL_GPIO_DeInit+0x1e>
  }
}
90006ee8:	b003      	add	sp, #12
90006eea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
90006eee:	f04f 0e02 	mov.w	lr, #2
90006ef2:	fa0e f404 	lsl.w	r4, lr, r4
90006ef6:	e7b8      	b.n	90006e6a <HAL_GPIO_DeInit+0x8e>
90006ef8:	f04f 0e05 	mov.w	lr, #5
90006efc:	fa0e f404 	lsl.w	r4, lr, r4
90006f00:	e7b3      	b.n	90006e6a <HAL_GPIO_DeInit+0x8e>
90006f02:	f04f 0e03 	mov.w	lr, #3
90006f06:	fa0e f404 	lsl.w	r4, lr, r4
90006f0a:	e7ae      	b.n	90006e6a <HAL_GPIO_DeInit+0x8e>
90006f0c:	f04f 0e04 	mov.w	lr, #4
90006f10:	fa0e f404 	lsl.w	r4, lr, r4
90006f14:	e7a9      	b.n	90006e6a <HAL_GPIO_DeInit+0x8e>
90006f16:	f04f 0e08 	mov.w	lr, #8
90006f1a:	fa0e f404 	lsl.w	r4, lr, r4
90006f1e:	e7a4      	b.n	90006e6a <HAL_GPIO_DeInit+0x8e>
90006f20:	f04f 0e06 	mov.w	lr, #6
90006f24:	fa0e f404 	lsl.w	r4, lr, r4
90006f28:	e79f      	b.n	90006e6a <HAL_GPIO_DeInit+0x8e>
90006f2a:	4770      	bx	lr
90006f2c:	f04f 0e07 	mov.w	lr, #7
90006f30:	fa0e f404 	lsl.w	r4, lr, r4
90006f34:	e799      	b.n	90006e6a <HAL_GPIO_DeInit+0x8e>
90006f36:	f04f 0e09 	mov.w	lr, #9
90006f3a:	fa0e f404 	lsl.w	r4, lr, r4
90006f3e:	e794      	b.n	90006e6a <HAL_GPIO_DeInit+0x8e>
90006f40:	58020c00 	.word	0x58020c00
90006f44:	58021000 	.word	0x58021000
90006f48:	58021400 	.word	0x58021400
90006f4c:	58021800 	.word	0x58021800
90006f50:	58021c00 	.word	0x58021c00
90006f54:	58000400 	.word	0x58000400
90006f58:	58020000 	.word	0x58020000
90006f5c:	58020400 	.word	0x58020400
90006f60:	58020800 	.word	0x58020800
90006f64:	58022000 	.word	0x58022000
90006f68:	58022400 	.word	0x58022400

90006f6c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
90006f6c:	6903      	ldr	r3, [r0, #16]
90006f6e:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
90006f70:	bf14      	ite	ne
90006f72:	2001      	movne	r0, #1
90006f74:	2000      	moveq	r0, #0
90006f76:	4770      	bx	lr

90006f78 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
90006f78:	b902      	cbnz	r2, 90006f7c <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
90006f7a:	0409      	lsls	r1, r1, #16
90006f7c:	6181      	str	r1, [r0, #24]
  }
}
90006f7e:	4770      	bx	lr

90006f80 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
90006f80:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
90006f82:	ea01 0203 	and.w	r2, r1, r3
90006f86:	ea21 0103 	bic.w	r1, r1, r3
90006f8a:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
90006f8e:	6181      	str	r1, [r0, #24]
}
90006f90:	4770      	bx	lr
90006f92:	bf00      	nop

90006f94 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
90006f94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
90006f98:	4690      	mov	r8, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
90006f9a:	6802      	ldr	r2, [r0, #0]
{
90006f9c:	460f      	mov	r7, r1
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
90006f9e:	6991      	ldr	r1, [r2, #24]
90006fa0:	074c      	lsls	r4, r1, #29
90006fa2:	d46c      	bmi.n	9000707e <I2C_WaitOnRXNEFlagUntilTimeout+0xea>
90006fa4:	4606      	mov	r6, r0
90006fa6:	4613      	mov	r3, r2
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
90006fa8:	f04f 0910 	mov.w	r9, #16
  uint32_t itflag   = hi2c->Instance->ISR;
90006fac:	6994      	ldr	r4, [r2, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
90006fae:	f014 0410 	ands.w	r4, r4, #16
90006fb2:	d067      	beq.n	90007084 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>
  uint32_t error_code = 0;
90006fb4:	2500      	movs	r5, #0

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
90006fb6:	4613      	mov	r3, r2
  uint32_t tickstart = Tickstart;
90006fb8:	4644      	mov	r4, r8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
90006fba:	f8c2 901c 	str.w	r9, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
90006fbe:	46aa      	mov	sl, r5
90006fc0:	1c79      	adds	r1, r7, #1
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
90006fc2:	699a      	ldr	r2, [r3, #24]
90006fc4:	d160      	bne.n	90007088 <I2C_WaitOnRXNEFlagUntilTimeout+0xf4>
90006fc6:	0690      	lsls	r0, r2, #26
90006fc8:	f100 8086 	bmi.w	900070d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x144>
90006fcc:	f1ba 0f00 	cmp.w	sl, #0
90006fd0:	d104      	bne.n	90006fdc <I2C_WaitOnRXNEFlagUntilTimeout+0x48>
90006fd2:	699c      	ldr	r4, [r3, #24]
90006fd4:	06a1      	lsls	r1, r4, #26
90006fd6:	d5fc      	bpl.n	90006fd2 <I2C_WaitOnRXNEFlagUntilTimeout+0x3e>

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
90006fd8:	2220      	movs	r2, #32
90006fda:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
90006fdc:	f045 0404 	orr.w	r4, r5, #4

    status = HAL_ERROR;
90006fe0:	2101      	movs	r1, #1
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
90006fe2:	699a      	ldr	r2, [r3, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
90006fe4:	05d0      	lsls	r0, r2, #23
90006fe6:	d530      	bpl.n	9000704a <I2C_WaitOnRXNEFlagUntilTimeout+0xb6>
  {
    error_code |= HAL_I2C_ERROR_BERR;

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
90006fe8:	f44f 7180 	mov.w	r1, #256	; 0x100

    status = HAL_ERROR;
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
90006fec:	0555      	lsls	r5, r2, #21
    error_code |= HAL_I2C_ERROR_BERR;
90006fee:	f044 0401 	orr.w	r4, r4, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
90006ff2:	61d9      	str	r1, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
90006ff4:	d504      	bpl.n	90007000 <I2C_WaitOnRXNEFlagUntilTimeout+0x6c>
  {
    error_code |= HAL_I2C_ERROR_OVR;

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
90006ff6:	f44f 6180 	mov.w	r1, #1024	; 0x400
    error_code |= HAL_I2C_ERROR_OVR;
90006ffa:	f044 0408 	orr.w	r4, r4, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
90006ffe:	61d9      	str	r1, [r3, #28]

    status = HAL_ERROR;
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
90007000:	0591      	lsls	r1, r2, #22
90007002:	d504      	bpl.n	9000700e <I2C_WaitOnRXNEFlagUntilTimeout+0x7a>
  {
    error_code |= HAL_I2C_ERROR_ARLO;

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
90007004:	f44f 7200 	mov.w	r2, #512	; 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
90007008:	f044 0402 	orr.w	r4, r4, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
9000700c:	61da      	str	r2, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
9000700e:	699a      	ldr	r2, [r3, #24]
90007010:	0797      	lsls	r7, r2, #30
90007012:	d501      	bpl.n	90007018 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    hi2c->Instance->TXDR = 0x00U;
90007014:	2200      	movs	r2, #0
90007016:	629a      	str	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
90007018:	699a      	ldr	r2, [r3, #24]
9000701a:	07d5      	lsls	r5, r2, #31
9000701c:	d403      	bmi.n	90007026 <I2C_WaitOnRXNEFlagUntilTimeout+0x92>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
9000701e:	699a      	ldr	r2, [r3, #24]
90007020:	f042 0201 	orr.w	r2, r2, #1
90007024:	619a      	str	r2, [r3, #24]
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
90007026:	685a      	ldr	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
    hi2c->State = HAL_I2C_STATE_READY;
    hi2c->Mode = HAL_I2C_MODE_NONE;
90007028:	2100      	movs	r1, #0
    I2C_RESET_CR2(hi2c);
9000702a:	4848      	ldr	r0, [pc, #288]	; (9000714c <I2C_WaitOnRXNEFlagUntilTimeout+0x1b8>)
    hi2c->State = HAL_I2C_STATE_READY;
9000702c:	2520      	movs	r5, #32
    I2C_RESET_CR2(hi2c);
9000702e:	4002      	ands	r2, r0
      return HAL_ERROR;
90007030:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
90007032:	605a      	str	r2, [r3, #4]
    hi2c->ErrorCode |= error_code;
90007034:	6c73      	ldr	r3, [r6, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
90007036:	f886 1040 	strb.w	r1, [r6, #64]	; 0x40
    hi2c->ErrorCode |= error_code;
9000703a:	4323      	orrs	r3, r4
9000703c:	6473      	str	r3, [r6, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
9000703e:	f886 5041 	strb.w	r5, [r6, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
90007042:	f886 1042 	strb.w	r1, [r6, #66]	; 0x42
}
90007046:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
9000704a:	0550      	lsls	r0, r2, #21
9000704c:	d4d3      	bmi.n	90006ff6 <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
9000704e:	0592      	lsls	r2, r2, #22
90007050:	d4d8      	bmi.n	90007004 <I2C_WaitOnRXNEFlagUntilTimeout+0x70>
  if (status != HAL_OK)
90007052:	2900      	cmp	r1, #0
90007054:	d1db      	bne.n	9000700e <I2C_WaitOnRXNEFlagUntilTimeout+0x7a>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
90007056:	699a      	ldr	r2, [r3, #24]
90007058:	0694      	lsls	r4, r2, #26
9000705a:	d442      	bmi.n	900070e2 <I2C_WaitOnRXNEFlagUntilTimeout+0x14e>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
9000705c:	f7ff f8ae 	bl	900061bc <HAL_GetTick>
90007060:	eba0 0008 	sub.w	r0, r0, r8
90007064:	42b8      	cmp	r0, r7
90007066:	d801      	bhi.n	9000706c <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
90007068:	2f00      	cmp	r7, #0
9000706a:	d132      	bne.n	900070d2 <I2C_WaitOnRXNEFlagUntilTimeout+0x13e>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
9000706c:	6832      	ldr	r2, [r6, #0]
9000706e:	6991      	ldr	r1, [r2, #24]
90007070:	4613      	mov	r3, r2
90007072:	f011 0104 	ands.w	r1, r1, #4
90007076:	d05b      	beq.n	90007130 <I2C_WaitOnRXNEFlagUntilTimeout+0x19c>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
90007078:	6991      	ldr	r1, [r2, #24]
9000707a:	0749      	lsls	r1, r1, #29
9000707c:	d596      	bpl.n	90006fac <I2C_WaitOnRXNEFlagUntilTimeout+0x18>
  return HAL_OK;
9000707e:	2000      	movs	r0, #0
}
90007080:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  HAL_StatusTypeDef status = HAL_OK;
90007084:	4621      	mov	r1, r4
90007086:	e7ac      	b.n	90006fe2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
90007088:	0692      	lsls	r2, r2, #26
9000708a:	d425      	bmi.n	900070d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x144>
9000708c:	f1ba 0f00 	cmp.w	sl, #0
90007090:	d1a4      	bne.n	90006fdc <I2C_WaitOnRXNEFlagUntilTimeout+0x48>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
90007092:	f7ff f893 	bl	900061bc <HAL_GetTick>
90007096:	1b00      	subs	r0, r0, r4
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
90007098:	6833      	ldr	r3, [r6, #0]
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
9000709a:	4287      	cmp	r7, r0
9000709c:	d301      	bcc.n	900070a2 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
9000709e:	2f00      	cmp	r7, #0
900070a0:	d18e      	bne.n	90006fc0 <I2C_WaitOnRXNEFlagUntilTimeout+0x2c>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
900070a2:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
900070a4:	f896 2042 	ldrb.w	r2, [r6, #66]	; 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
900070a8:	6999      	ldr	r1, [r3, #24]
          tmp2 = hi2c->Mode;
900070aa:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
900070ac:	0409      	lsls	r1, r1, #16
900070ae:	d503      	bpl.n	900070b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x124>
              (tmp1 != I2C_CR2_STOP) && \
900070b0:	0441      	lsls	r1, r0, #17
900070b2:	d401      	bmi.n	900070b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x124>
900070b4:	2a20      	cmp	r2, #32
900070b6:	d132      	bne.n	9000711e <I2C_WaitOnRXNEFlagUntilTimeout+0x18a>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
900070b8:	699a      	ldr	r2, [r3, #24]
900070ba:	0690      	lsls	r0, r2, #26
900070bc:	d480      	bmi.n	90006fc0 <I2C_WaitOnRXNEFlagUntilTimeout+0x2c>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
900070be:	f7ff f87d 	bl	900061bc <HAL_GetTick>
900070c2:	1b00      	subs	r0, r0, r4
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
900070c4:	6833      	ldr	r3, [r6, #0]
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
900070c6:	2819      	cmp	r0, #25
900070c8:	d9f6      	bls.n	900070b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x124>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
900070ca:	2520      	movs	r5, #32
              status = HAL_ERROR;
900070cc:	f04f 0a01 	mov.w	sl, #1
900070d0:	e776      	b.n	90006fc0 <I2C_WaitOnRXNEFlagUntilTimeout+0x2c>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
900070d2:	6833      	ldr	r3, [r6, #0]
900070d4:	461a      	mov	r2, r3
900070d6:	e7cf      	b.n	90007078 <I2C_WaitOnRXNEFlagUntilTimeout+0xe4>
    if (status == HAL_OK)
900070d8:	f1ba 0f00 	cmp.w	sl, #0
900070dc:	f43f af7c 	beq.w	90006fd8 <I2C_WaitOnRXNEFlagUntilTimeout+0x44>
900070e0:	e77c      	b.n	90006fdc <I2C_WaitOnRXNEFlagUntilTimeout+0x48>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
900070e2:	699a      	ldr	r2, [r3, #24]
900070e4:	0750      	lsls	r0, r2, #29
900070e6:	d502      	bpl.n	900070ee <I2C_WaitOnRXNEFlagUntilTimeout+0x15a>
900070e8:	8d32      	ldrh	r2, [r6, #40]	; 0x28
900070ea:	2a00      	cmp	r2, #0
900070ec:	d1c7      	bne.n	9000707e <I2C_WaitOnRXNEFlagUntilTimeout+0xea>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
900070ee:	699a      	ldr	r2, [r3, #24]
900070f0:	f012 0210 	ands.w	r2, r2, #16
900070f4:	d027      	beq.n	90007146 <I2C_WaitOnRXNEFlagUntilTimeout+0x1b2>
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
900070f6:	2110      	movs	r1, #16
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
900070f8:	2204      	movs	r2, #4
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
900070fa:	61d9      	str	r1, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
900070fc:	6472      	str	r2, [r6, #68]	; 0x44
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
900070fe:	2420      	movs	r4, #32
        I2C_RESET_CR2(hi2c);
90007100:	4812      	ldr	r0, [pc, #72]	; (9000714c <I2C_WaitOnRXNEFlagUntilTimeout+0x1b8>)
        hi2c->Mode = HAL_I2C_MODE_NONE;
90007102:	2100      	movs	r1, #0
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
90007104:	61dc      	str	r4, [r3, #28]
        I2C_RESET_CR2(hi2c);
90007106:	685a      	ldr	r2, [r3, #4]
90007108:	4002      	ands	r2, r0
        return HAL_ERROR;
9000710a:	2001      	movs	r0, #1
        I2C_RESET_CR2(hi2c);
9000710c:	605a      	str	r2, [r3, #4]
        hi2c->State = HAL_I2C_STATE_READY;
9000710e:	f886 4041 	strb.w	r4, [r6, #65]	; 0x41
        __HAL_UNLOCK(hi2c);
90007112:	f886 1040 	strb.w	r1, [r6, #64]	; 0x40
        hi2c->Mode = HAL_I2C_MODE_NONE;
90007116:	f886 1042 	strb.w	r1, [r6, #66]	; 0x42
}
9000711a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
9000711e:	685a      	ldr	r2, [r3, #4]
90007120:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
90007124:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
90007126:	f7ff f849 	bl	900061bc <HAL_GetTick>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
9000712a:	6833      	ldr	r3, [r6, #0]
            tickstart = HAL_GetTick();
9000712c:	4604      	mov	r4, r0
9000712e:	e7c3      	b.n	900070b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x124>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
90007130:	6c73      	ldr	r3, [r6, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
90007132:	2220      	movs	r2, #32
        return HAL_ERROR;
90007134:	2001      	movs	r0, #1
        __HAL_UNLOCK(hi2c);
90007136:	f886 1040 	strb.w	r1, [r6, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
9000713a:	4313      	orrs	r3, r2
9000713c:	6473      	str	r3, [r6, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
9000713e:	f886 2041 	strb.w	r2, [r6, #65]	; 0x41
}
90007142:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
90007146:	6472      	str	r2, [r6, #68]	; 0x44
90007148:	e7d9      	b.n	900070fe <I2C_WaitOnRXNEFlagUntilTimeout+0x16a>
9000714a:	bf00      	nop
9000714c:	fe00e800 	.word	0xfe00e800

90007150 <I2C_WaitOnTXISFlagUntilTimeout>:
{
90007150:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
90007154:	6803      	ldr	r3, [r0, #0]
              error_code |= HAL_I2C_ERROR_TIMEOUT;
90007156:	f04f 0820 	mov.w	r8, #32
{
9000715a:	4605      	mov	r5, r0
9000715c:	460e      	mov	r6, r1
9000715e:	4617      	mov	r7, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
90007160:	6998      	ldr	r0, [r3, #24]
90007162:	f010 0902 	ands.w	r9, r0, #2
90007166:	f040 809e 	bne.w	900072a6 <I2C_WaitOnTXISFlagUntilTimeout+0x156>
  uint32_t itflag   = hi2c->Instance->ISR;
9000716a:	699c      	ldr	r4, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
9000716c:	f014 0410 	ands.w	r4, r4, #16
90007170:	d068      	beq.n	90007244 <I2C_WaitOnTXISFlagUntilTimeout+0xf4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
90007172:	2210      	movs	r2, #16
  uint32_t tickstart = Tickstart;
90007174:	463c      	mov	r4, r7
  HAL_StatusTypeDef status = HAL_OK;
90007176:	46ca      	mov	sl, r9
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
90007178:	61da      	str	r2, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
9000717a:	1c71      	adds	r1, r6, #1
9000717c:	699a      	ldr	r2, [r3, #24]
9000717e:	d163      	bne.n	90007248 <I2C_WaitOnTXISFlagUntilTimeout+0xf8>
90007180:	0690      	lsls	r0, r2, #26
90007182:	f100 8093 	bmi.w	900072ac <I2C_WaitOnTXISFlagUntilTimeout+0x15c>
90007186:	f1ba 0f00 	cmp.w	sl, #0
9000718a:	d104      	bne.n	90007196 <I2C_WaitOnTXISFlagUntilTimeout+0x46>
9000718c:	699c      	ldr	r4, [r3, #24]
9000718e:	06a1      	lsls	r1, r4, #26
90007190:	d5fc      	bpl.n	9000718c <I2C_WaitOnTXISFlagUntilTimeout+0x3c>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
90007192:	f8c3 801c 	str.w	r8, [r3, #28]
    error_code |= HAL_I2C_ERROR_AF;
90007196:	f049 0404 	orr.w	r4, r9, #4
    status = HAL_ERROR;
9000719a:	2101      	movs	r1, #1
  itflag = hi2c->Instance->ISR;
9000719c:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
9000719e:	05d0      	lsls	r0, r2, #23
900071a0:	d530      	bpl.n	90007204 <I2C_WaitOnTXISFlagUntilTimeout+0xb4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
900071a2:	f44f 7180 	mov.w	r1, #256	; 0x100
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
900071a6:	0556      	lsls	r6, r2, #21
    error_code |= HAL_I2C_ERROR_BERR;
900071a8:	f044 0401 	orr.w	r4, r4, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
900071ac:	61d9      	str	r1, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
900071ae:	d504      	bpl.n	900071ba <I2C_WaitOnTXISFlagUntilTimeout+0x6a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
900071b0:	f44f 6180 	mov.w	r1, #1024	; 0x400
    error_code |= HAL_I2C_ERROR_OVR;
900071b4:	f044 0408 	orr.w	r4, r4, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
900071b8:	61d9      	str	r1, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
900071ba:	0591      	lsls	r1, r2, #22
900071bc:	d504      	bpl.n	900071c8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
900071be:	f44f 7200 	mov.w	r2, #512	; 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
900071c2:	f044 0402 	orr.w	r4, r4, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
900071c6:	61da      	str	r2, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
900071c8:	699a      	ldr	r2, [r3, #24]
900071ca:	0790      	lsls	r0, r2, #30
900071cc:	d501      	bpl.n	900071d2 <I2C_WaitOnTXISFlagUntilTimeout+0x82>
    hi2c->Instance->TXDR = 0x00U;
900071ce:	2200      	movs	r2, #0
900071d0:	629a      	str	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
900071d2:	699a      	ldr	r2, [r3, #24]
900071d4:	07d1      	lsls	r1, r2, #31
900071d6:	d403      	bmi.n	900071e0 <I2C_WaitOnTXISFlagUntilTimeout+0x90>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
900071d8:	699a      	ldr	r2, [r3, #24]
900071da:	f042 0201 	orr.w	r2, r2, #1
900071de:	619a      	str	r2, [r3, #24]
    I2C_RESET_CR2(hi2c);
900071e0:	685a      	ldr	r2, [r3, #4]
    hi2c->Mode = HAL_I2C_MODE_NONE;
900071e2:	2100      	movs	r1, #0
    I2C_RESET_CR2(hi2c);
900071e4:	4834      	ldr	r0, [pc, #208]	; (900072b8 <I2C_WaitOnTXISFlagUntilTimeout+0x168>)
    hi2c->State = HAL_I2C_STATE_READY;
900071e6:	2620      	movs	r6, #32
    I2C_RESET_CR2(hi2c);
900071e8:	4002      	ands	r2, r0
      return HAL_ERROR;
900071ea:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
900071ec:	605a      	str	r2, [r3, #4]
    hi2c->ErrorCode |= error_code;
900071ee:	6c6b      	ldr	r3, [r5, #68]	; 0x44
    __HAL_UNLOCK(hi2c);
900071f0:	f885 1040 	strb.w	r1, [r5, #64]	; 0x40
    hi2c->ErrorCode |= error_code;
900071f4:	4323      	orrs	r3, r4
900071f6:	646b      	str	r3, [r5, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
900071f8:	f885 6041 	strb.w	r6, [r5, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
900071fc:	f885 1042 	strb.w	r1, [r5, #66]	; 0x42
}
90007200:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
90007204:	0550      	lsls	r0, r2, #21
90007206:	d4d3      	bmi.n	900071b0 <I2C_WaitOnTXISFlagUntilTimeout+0x60>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
90007208:	0592      	lsls	r2, r2, #22
9000720a:	d4d8      	bmi.n	900071be <I2C_WaitOnTXISFlagUntilTimeout+0x6e>
  if (status != HAL_OK)
9000720c:	2900      	cmp	r1, #0
9000720e:	d1db      	bne.n	900071c8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    if (Timeout != HAL_MAX_DELAY)
90007210:	1c72      	adds	r2, r6, #1
90007212:	d0a5      	beq.n	90007160 <I2C_WaitOnTXISFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
90007214:	f7fe ffd2 	bl	900061bc <HAL_GetTick>
90007218:	1bc0      	subs	r0, r0, r7
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
9000721a:	682b      	ldr	r3, [r5, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
9000721c:	42b0      	cmp	r0, r6
9000721e:	d801      	bhi.n	90007224 <I2C_WaitOnTXISFlagUntilTimeout+0xd4>
90007220:	2e00      	cmp	r6, #0
90007222:	d19d      	bne.n	90007160 <I2C_WaitOnTXISFlagUntilTimeout+0x10>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
90007224:	699a      	ldr	r2, [r3, #24]
90007226:	f012 0202 	ands.w	r2, r2, #2
9000722a:	d199      	bne.n	90007160 <I2C_WaitOnTXISFlagUntilTimeout+0x10>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
9000722c:	6c6b      	ldr	r3, [r5, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
9000722e:	2120      	movs	r1, #32
          __HAL_UNLOCK(hi2c);
90007230:	2001      	movs	r0, #1
90007232:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
90007236:	430b      	orrs	r3, r1
90007238:	646b      	str	r3, [r5, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
9000723a:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
9000723e:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
          return HAL_ERROR;
90007242:	e7dd      	b.n	90007200 <I2C_WaitOnTXISFlagUntilTimeout+0xb0>
  HAL_StatusTypeDef status = HAL_OK;
90007244:	4621      	mov	r1, r4
90007246:	e7a9      	b.n	9000719c <I2C_WaitOnTXISFlagUntilTimeout+0x4c>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
90007248:	0692      	lsls	r2, r2, #26
9000724a:	d42f      	bmi.n	900072ac <I2C_WaitOnTXISFlagUntilTimeout+0x15c>
9000724c:	f1ba 0f00 	cmp.w	sl, #0
90007250:	d1a1      	bne.n	90007196 <I2C_WaitOnTXISFlagUntilTimeout+0x46>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
90007252:	f7fe ffb3 	bl	900061bc <HAL_GetTick>
90007256:	1b00      	subs	r0, r0, r4
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
90007258:	682b      	ldr	r3, [r5, #0]
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
9000725a:	4286      	cmp	r6, r0
9000725c:	d301      	bcc.n	90007262 <I2C_WaitOnTXISFlagUntilTimeout+0x112>
9000725e:	2e00      	cmp	r6, #0
90007260:	d18b      	bne.n	9000717a <I2C_WaitOnTXISFlagUntilTimeout+0x2a>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
90007262:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
90007264:	f895 2042 	ldrb.w	r2, [r5, #66]	; 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
90007268:	6999      	ldr	r1, [r3, #24]
          tmp2 = hi2c->Mode;
9000726a:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
9000726c:	0409      	lsls	r1, r1, #16
9000726e:	d50b      	bpl.n	90007288 <I2C_WaitOnTXISFlagUntilTimeout+0x138>
              (tmp1 != I2C_CR2_STOP) && \
90007270:	0441      	lsls	r1, r0, #17
90007272:	d409      	bmi.n	90007288 <I2C_WaitOnTXISFlagUntilTimeout+0x138>
90007274:	2a20      	cmp	r2, #32
90007276:	d007      	beq.n	90007288 <I2C_WaitOnTXISFlagUntilTimeout+0x138>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
90007278:	685a      	ldr	r2, [r3, #4]
9000727a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
9000727e:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
90007280:	f7fe ff9c 	bl	900061bc <HAL_GetTick>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
90007284:	682b      	ldr	r3, [r5, #0]
            tickstart = HAL_GetTick();
90007286:	4604      	mov	r4, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
90007288:	699a      	ldr	r2, [r3, #24]
9000728a:	0690      	lsls	r0, r2, #26
9000728c:	f53f af75 	bmi.w	9000717a <I2C_WaitOnTXISFlagUntilTimeout+0x2a>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
90007290:	f7fe ff94 	bl	900061bc <HAL_GetTick>
90007294:	1b00      	subs	r0, r0, r4
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
90007296:	682b      	ldr	r3, [r5, #0]
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
90007298:	2819      	cmp	r0, #25
9000729a:	d9f5      	bls.n	90007288 <I2C_WaitOnTXISFlagUntilTimeout+0x138>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
9000729c:	f04f 0920 	mov.w	r9, #32
              status = HAL_ERROR;
900072a0:	f04f 0a01 	mov.w	sl, #1
900072a4:	e769      	b.n	9000717a <I2C_WaitOnTXISFlagUntilTimeout+0x2a>
  return HAL_OK;
900072a6:	2000      	movs	r0, #0
}
900072a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (status == HAL_OK)
900072ac:	f1ba 0f00 	cmp.w	sl, #0
900072b0:	f43f af6f 	beq.w	90007192 <I2C_WaitOnTXISFlagUntilTimeout+0x42>
900072b4:	e76f      	b.n	90007196 <I2C_WaitOnTXISFlagUntilTimeout+0x46>
900072b6:	bf00      	nop
900072b8:	fe00e800 	.word	0xfe00e800

900072bc <I2C_WaitOnSTOPFlagUntilTimeout>:
{
900072bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
900072c0:	4690      	mov	r8, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
900072c2:	6802      	ldr	r2, [r0, #0]
{
900072c4:	460f      	mov	r7, r1
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
900072c6:	6991      	ldr	r1, [r2, #24]
900072c8:	068c      	lsls	r4, r1, #26
900072ca:	d469      	bmi.n	900073a0 <I2C_WaitOnSTOPFlagUntilTimeout+0xe4>
900072cc:	4606      	mov	r6, r0
900072ce:	4613      	mov	r3, r2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
900072d0:	f04f 0910 	mov.w	r9, #16
  uint32_t itflag   = hi2c->Instance->ISR;
900072d4:	6994      	ldr	r4, [r2, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
900072d6:	f014 0410 	ands.w	r4, r4, #16
900072da:	d064      	beq.n	900073a6 <I2C_WaitOnSTOPFlagUntilTimeout+0xea>
  uint32_t error_code = 0;
900072dc:	2500      	movs	r5, #0
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
900072de:	4613      	mov	r3, r2
  uint32_t tickstart = Tickstart;
900072e0:	4644      	mov	r4, r8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
900072e2:	f8c2 901c 	str.w	r9, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
900072e6:	46aa      	mov	sl, r5
900072e8:	1c79      	adds	r1, r7, #1
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
900072ea:	699a      	ldr	r2, [r3, #24]
900072ec:	d15d      	bne.n	900073aa <I2C_WaitOnSTOPFlagUntilTimeout+0xee>
900072ee:	0690      	lsls	r0, r2, #26
900072f0:	f100 8083 	bmi.w	900073fa <I2C_WaitOnSTOPFlagUntilTimeout+0x13e>
900072f4:	f1ba 0f00 	cmp.w	sl, #0
900072f8:	d104      	bne.n	90007304 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
900072fa:	699c      	ldr	r4, [r3, #24]
900072fc:	06a1      	lsls	r1, r4, #26
900072fe:	d5fc      	bpl.n	900072fa <I2C_WaitOnSTOPFlagUntilTimeout+0x3e>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
90007300:	2220      	movs	r2, #32
90007302:	61da      	str	r2, [r3, #28]
    error_code |= HAL_I2C_ERROR_AF;
90007304:	f045 0404 	orr.w	r4, r5, #4
    status = HAL_ERROR;
90007308:	2101      	movs	r1, #1
  itflag = hi2c->Instance->ISR;
9000730a:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
9000730c:	05d0      	lsls	r0, r2, #23
9000730e:	d530      	bpl.n	90007372 <I2C_WaitOnSTOPFlagUntilTimeout+0xb6>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
90007310:	f44f 7180 	mov.w	r1, #256	; 0x100
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
90007314:	0555      	lsls	r5, r2, #21
    error_code |= HAL_I2C_ERROR_BERR;
90007316:	f044 0401 	orr.w	r4, r4, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
9000731a:	61d9      	str	r1, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
9000731c:	d504      	bpl.n	90007328 <I2C_WaitOnSTOPFlagUntilTimeout+0x6c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
9000731e:	f44f 6180 	mov.w	r1, #1024	; 0x400
    error_code |= HAL_I2C_ERROR_OVR;
90007322:	f044 0408 	orr.w	r4, r4, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
90007326:	61d9      	str	r1, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
90007328:	0591      	lsls	r1, r2, #22
9000732a:	d504      	bpl.n	90007336 <I2C_WaitOnSTOPFlagUntilTimeout+0x7a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
9000732c:	f44f 7200 	mov.w	r2, #512	; 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
90007330:	f044 0402 	orr.w	r4, r4, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
90007334:	61da      	str	r2, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
90007336:	699a      	ldr	r2, [r3, #24]
90007338:	0795      	lsls	r5, r2, #30
9000733a:	d501      	bpl.n	90007340 <I2C_WaitOnSTOPFlagUntilTimeout+0x84>
    hi2c->Instance->TXDR = 0x00U;
9000733c:	2200      	movs	r2, #0
9000733e:	629a      	str	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
90007340:	699a      	ldr	r2, [r3, #24]
90007342:	07d0      	lsls	r0, r2, #31
90007344:	d403      	bmi.n	9000734e <I2C_WaitOnSTOPFlagUntilTimeout+0x92>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
90007346:	699a      	ldr	r2, [r3, #24]
90007348:	f042 0201 	orr.w	r2, r2, #1
9000734c:	619a      	str	r2, [r3, #24]
    I2C_RESET_CR2(hi2c);
9000734e:	685a      	ldr	r2, [r3, #4]
    hi2c->Mode = HAL_I2C_MODE_NONE;
90007350:	2100      	movs	r1, #0
    I2C_RESET_CR2(hi2c);
90007352:	4837      	ldr	r0, [pc, #220]	; (90007430 <I2C_WaitOnSTOPFlagUntilTimeout+0x174>)
    hi2c->State = HAL_I2C_STATE_READY;
90007354:	2520      	movs	r5, #32
    I2C_RESET_CR2(hi2c);
90007356:	4002      	ands	r2, r0
      return HAL_ERROR;
90007358:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
9000735a:	605a      	str	r2, [r3, #4]
    hi2c->ErrorCode |= error_code;
9000735c:	6c73      	ldr	r3, [r6, #68]	; 0x44
    __HAL_UNLOCK(hi2c);
9000735e:	f886 1040 	strb.w	r1, [r6, #64]	; 0x40
    hi2c->ErrorCode |= error_code;
90007362:	4323      	orrs	r3, r4
90007364:	6473      	str	r3, [r6, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
90007366:	f886 5041 	strb.w	r5, [r6, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
9000736a:	f886 1042 	strb.w	r1, [r6, #66]	; 0x42
}
9000736e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
90007372:	0550      	lsls	r0, r2, #21
90007374:	d4d3      	bmi.n	9000731e <I2C_WaitOnSTOPFlagUntilTimeout+0x62>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
90007376:	0592      	lsls	r2, r2, #22
90007378:	d4d8      	bmi.n	9000732c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  if (status != HAL_OK)
9000737a:	2900      	cmp	r1, #0
9000737c:	d1db      	bne.n	90007336 <I2C_WaitOnSTOPFlagUntilTimeout+0x7a>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
9000737e:	f7fe ff1d 	bl	900061bc <HAL_GetTick>
90007382:	eba0 0008 	sub.w	r0, r0, r8
90007386:	42b8      	cmp	r0, r7
90007388:	d801      	bhi.n	9000738e <I2C_WaitOnSTOPFlagUntilTimeout+0xd2>
9000738a:	2f00      	cmp	r7, #0
9000738c:	d132      	bne.n	900073f4 <I2C_WaitOnSTOPFlagUntilTimeout+0x138>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
9000738e:	6832      	ldr	r2, [r6, #0]
90007390:	6991      	ldr	r1, [r2, #24]
90007392:	4613      	mov	r3, r2
90007394:	f011 0120 	ands.w	r1, r1, #32
90007398:	d034      	beq.n	90007404 <I2C_WaitOnSTOPFlagUntilTimeout+0x148>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
9000739a:	6991      	ldr	r1, [r2, #24]
9000739c:	0689      	lsls	r1, r1, #26
9000739e:	d599      	bpl.n	900072d4 <I2C_WaitOnSTOPFlagUntilTimeout+0x18>
  return HAL_OK;
900073a0:	2000      	movs	r0, #0
}
900073a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  HAL_StatusTypeDef status = HAL_OK;
900073a6:	4621      	mov	r1, r4
900073a8:	e7af      	b.n	9000730a <I2C_WaitOnSTOPFlagUntilTimeout+0x4e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
900073aa:	0692      	lsls	r2, r2, #26
900073ac:	d425      	bmi.n	900073fa <I2C_WaitOnSTOPFlagUntilTimeout+0x13e>
900073ae:	f1ba 0f00 	cmp.w	sl, #0
900073b2:	d1a7      	bne.n	90007304 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
900073b4:	f7fe ff02 	bl	900061bc <HAL_GetTick>
900073b8:	1b00      	subs	r0, r0, r4
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
900073ba:	6833      	ldr	r3, [r6, #0]
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
900073bc:	4287      	cmp	r7, r0
900073be:	d301      	bcc.n	900073c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x108>
900073c0:	2f00      	cmp	r7, #0
900073c2:	d191      	bne.n	900072e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x2c>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
900073c4:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
900073c6:	f896 2042 	ldrb.w	r2, [r6, #66]	; 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
900073ca:	6999      	ldr	r1, [r3, #24]
          tmp2 = hi2c->Mode;
900073cc:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
900073ce:	0409      	lsls	r1, r1, #16
900073d0:	d503      	bpl.n	900073da <I2C_WaitOnSTOPFlagUntilTimeout+0x11e>
              (tmp1 != I2C_CR2_STOP) && \
900073d2:	0441      	lsls	r1, r0, #17
900073d4:	d401      	bmi.n	900073da <I2C_WaitOnSTOPFlagUntilTimeout+0x11e>
900073d6:	2a20      	cmp	r2, #32
900073d8:	d121      	bne.n	9000741e <I2C_WaitOnSTOPFlagUntilTimeout+0x162>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
900073da:	699a      	ldr	r2, [r3, #24]
900073dc:	0690      	lsls	r0, r2, #26
900073de:	d483      	bmi.n	900072e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x2c>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
900073e0:	f7fe feec 	bl	900061bc <HAL_GetTick>
900073e4:	1b00      	subs	r0, r0, r4
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
900073e6:	6833      	ldr	r3, [r6, #0]
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
900073e8:	2819      	cmp	r0, #25
900073ea:	d9f6      	bls.n	900073da <I2C_WaitOnSTOPFlagUntilTimeout+0x11e>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
900073ec:	2520      	movs	r5, #32
              status = HAL_ERROR;
900073ee:	f04f 0a01 	mov.w	sl, #1
900073f2:	e779      	b.n	900072e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x2c>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
900073f4:	6833      	ldr	r3, [r6, #0]
900073f6:	461a      	mov	r2, r3
900073f8:	e7cf      	b.n	9000739a <I2C_WaitOnSTOPFlagUntilTimeout+0xde>
    if (status == HAL_OK)
900073fa:	f1ba 0f00 	cmp.w	sl, #0
900073fe:	f43f af7f 	beq.w	90007300 <I2C_WaitOnSTOPFlagUntilTimeout+0x44>
90007402:	e77f      	b.n	90007304 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
90007404:	6c73      	ldr	r3, [r6, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
90007406:	2220      	movs	r2, #32
          __HAL_UNLOCK(hi2c);
90007408:	2001      	movs	r0, #1
9000740a:	f886 1040 	strb.w	r1, [r6, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
9000740e:	4313      	orrs	r3, r2
90007410:	6473      	str	r3, [r6, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
90007412:	f886 2041 	strb.w	r2, [r6, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
90007416:	f886 1042 	strb.w	r1, [r6, #66]	; 0x42
}
9000741a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
9000741e:	685a      	ldr	r2, [r3, #4]
90007420:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
90007424:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
90007426:	f7fe fec9 	bl	900061bc <HAL_GetTick>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
9000742a:	6833      	ldr	r3, [r6, #0]
            tickstart = HAL_GetTick();
9000742c:	4604      	mov	r4, r0
9000742e:	e7d4      	b.n	900073da <I2C_WaitOnSTOPFlagUntilTimeout+0x11e>
90007430:	fe00e800 	.word	0xfe00e800

90007434 <HAL_I2C_Init>:
  if (hi2c == NULL)
90007434:	2800      	cmp	r0, #0
90007436:	d04e      	beq.n	900074d6 <HAL_I2C_Init+0xa2>
{
90007438:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_RESET)
9000743a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
9000743e:	4604      	mov	r4, r0
90007440:	f003 02ff 	and.w	r2, r3, #255	; 0xff
90007444:	2b00      	cmp	r3, #0
90007446:	d041      	beq.n	900074cc <HAL_I2C_Init+0x98>
  __HAL_I2C_DISABLE(hi2c);
90007448:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
9000744a:	2124      	movs	r1, #36	; 0x24
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
9000744c:	6862      	ldr	r2, [r4, #4]
  hi2c->State = HAL_I2C_STATE_BUSY;
9000744e:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
90007452:	6819      	ldr	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
90007454:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
90007458:	68e0      	ldr	r0, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
9000745a:	f021 0101 	bic.w	r1, r1, #1
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
9000745e:	2801      	cmp	r0, #1
  __HAL_I2C_DISABLE(hi2c);
90007460:	6019      	str	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
90007462:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
90007464:	689a      	ldr	r2, [r3, #8]
90007466:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
9000746a:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
9000746c:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
9000746e:	d029      	beq.n	900074c4 <HAL_I2C_Init+0x90>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
90007470:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
90007474:	2802      	cmp	r0, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
90007476:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
90007478:	d102      	bne.n	90007480 <HAL_I2C_Init+0x4c>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
9000747a:	f44f 6200 	mov.w	r2, #2048	; 0x800
9000747e:	605a      	str	r2, [r3, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
90007480:	6858      	ldr	r0, [r3, #4]
  hi2c->State = HAL_I2C_STATE_READY;
90007482:	f04f 0c20 	mov.w	ip, #32
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
90007486:	4915      	ldr	r1, [pc, #84]	; (900074dc <HAL_I2C_Init+0xa8>)
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
90007488:	6922      	ldr	r2, [r4, #16]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
9000748a:	4301      	orrs	r1, r0
9000748c:	6059      	str	r1, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
9000748e:	68d9      	ldr	r1, [r3, #12]
90007490:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
90007494:	60d9      	str	r1, [r3, #12]
                          (hi2c->Init.OwnAddress2Masks << 8));
90007496:	e9d4 0105 	ldrd	r0, r1, [r4, #20]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
9000749a:	4302      	orrs	r2, r0
9000749c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
900074a0:	e9d4 1007 	ldrd	r1, r0, [r4, #28]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
900074a4:	60da      	str	r2, [r3, #12]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
900074a6:	2200      	movs	r2, #0
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
900074a8:	4301      	orrs	r1, r0
  return HAL_OK;
900074aa:	4610      	mov	r0, r2
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
900074ac:	6019      	str	r1, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
900074ae:	6819      	ldr	r1, [r3, #0]
900074b0:	f041 0101 	orr.w	r1, r1, #1
900074b4:	6019      	str	r1, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
900074b6:	6462      	str	r2, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
900074b8:	f884 c041 	strb.w	ip, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
900074bc:	6322      	str	r2, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
900074be:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
900074c2:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
900074c4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
900074c8:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
900074ca:	e7d9      	b.n	90007480 <HAL_I2C_Init+0x4c>
    hi2c->Lock = HAL_UNLOCKED;
900074cc:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
900074d0:	f7fc fc92 	bl	90003df8 <HAL_I2C_MspInit>
900074d4:	e7b8      	b.n	90007448 <HAL_I2C_Init+0x14>
    return HAL_ERROR;
900074d6:	2001      	movs	r0, #1
}
900074d8:	4770      	bx	lr
900074da:	bf00      	nop
900074dc:	02008000 	.word	0x02008000

900074e0 <HAL_I2C_DeInit>:
  if (hi2c == NULL)
900074e0:	b1b0      	cbz	r0, 90007510 <HAL_I2C_DeInit+0x30>
  __HAL_I2C_DISABLE(hi2c);
900074e2:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
900074e4:	2324      	movs	r3, #36	; 0x24
{
900074e6:	b510      	push	{r4, lr}
  hi2c->State = HAL_I2C_STATE_BUSY;
900074e8:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
900074ec:	4604      	mov	r4, r0
  __HAL_I2C_DISABLE(hi2c);
900074ee:	6813      	ldr	r3, [r2, #0]
900074f0:	f023 0301 	bic.w	r3, r3, #1
900074f4:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
900074f6:	f7fc fcd1 	bl	90003e9c <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
900074fa:	2300      	movs	r3, #0
900074fc:	6463      	str	r3, [r4, #68]	; 0x44
  return HAL_OK;
900074fe:	4618      	mov	r0, r3
  hi2c->State = HAL_I2C_STATE_RESET;
90007500:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hi2c);
90007504:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  hi2c->PreviousState = I2C_STATE_NONE;
90007508:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
9000750a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
}
9000750e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
90007510:	2001      	movs	r0, #1
}
90007512:	4770      	bx	lr

90007514 <HAL_I2C_Master_Transmit>:
{
90007514:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
90007518:	461c      	mov	r4, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
9000751a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
9000751e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
90007520:	2b20      	cmp	r3, #32
90007522:	d12c      	bne.n	9000757e <HAL_I2C_Master_Transmit+0x6a>
    __HAL_LOCK(hi2c);
90007524:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
90007528:	4683      	mov	fp, r0
9000752a:	2b01      	cmp	r3, #1
9000752c:	d027      	beq.n	9000757e <HAL_I2C_Master_Transmit+0x6a>
9000752e:	2301      	movs	r3, #1
90007530:	468a      	mov	sl, r1
90007532:	4616      	mov	r6, r2
90007534:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
90007538:	f7fe fe40 	bl	900061bc <HAL_GetTick>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
9000753c:	f8db 3000 	ldr.w	r3, [fp]
    tickstart = HAL_GetTick();
90007540:	4680      	mov	r8, r0
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
90007542:	699a      	ldr	r2, [r3, #24]
90007544:	0417      	lsls	r7, r2, #16
90007546:	d51d      	bpl.n	90007584 <HAL_I2C_Master_Transmit+0x70>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
90007548:	f7fe fe38 	bl	900061bc <HAL_GetTick>
9000754c:	eba0 0008 	sub.w	r0, r0, r8
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
90007550:	f8db 3000 	ldr.w	r3, [fp]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
90007554:	2819      	cmp	r0, #25
90007556:	d9f4      	bls.n	90007542 <HAL_I2C_Master_Transmit+0x2e>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
90007558:	699a      	ldr	r2, [r3, #24]
9000755a:	0410      	lsls	r0, r2, #16
9000755c:	d5f1      	bpl.n	90007542 <HAL_I2C_Master_Transmit+0x2e>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
9000755e:	f8db 3044 	ldr.w	r3, [fp, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
90007562:	2120      	movs	r1, #32
          hi2c->Mode = HAL_I2C_MODE_NONE;
90007564:	2200      	movs	r2, #0
      return HAL_ERROR;
90007566:	2001      	movs	r0, #1
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
90007568:	430b      	orrs	r3, r1
          __HAL_UNLOCK(hi2c);
9000756a:	f88b 2040 	strb.w	r2, [fp, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
9000756e:	f8cb 3044 	str.w	r3, [fp, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
90007572:	f88b 1041 	strb.w	r1, [fp, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
90007576:	f88b 2042 	strb.w	r2, [fp, #66]	; 0x42
}
9000757a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return HAL_BUSY;
9000757e:	2002      	movs	r0, #2
}
90007580:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
90007584:	2121      	movs	r1, #33	; 0x21
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
90007586:	2200      	movs	r2, #0
    hi2c->pBuffPtr  = pData;
90007588:	f8cb 6024 	str.w	r6, [fp, #36]	; 0x24
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
9000758c:	f88b 1041 	strb.w	r1, [fp, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
90007590:	2110      	movs	r1, #16
    hi2c->XferISR   = NULL;
90007592:	f8cb 2034 	str.w	r2, [fp, #52]	; 0x34
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
90007596:	f88b 1042 	strb.w	r1, [fp, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
9000759a:	f8cb 2044 	str.w	r2, [fp, #68]	; 0x44
    hi2c->XferCount = Size;
9000759e:	f8ab 402a 	strh.w	r4, [fp, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
900075a2:	f8bb 202a 	ldrh.w	r2, [fp, #42]	; 0x2a
900075a6:	b292      	uxth	r2, r2
900075a8:	2aff      	cmp	r2, #255	; 0xff
900075aa:	d86c      	bhi.n	90007686 <HAL_I2C_Master_Transmit+0x172>
      hi2c->XferSize = hi2c->XferCount;
900075ac:	f8bb 202a 	ldrh.w	r2, [fp, #42]	; 0x2a
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
900075b0:	49a2      	ldr	r1, [pc, #648]	; (9000783c <HAL_I2C_Master_Transmit+0x328>)
900075b2:	6858      	ldr	r0, [r3, #4]
      hi2c->XferSize = hi2c->XferCount;
900075b4:	b292      	uxth	r2, r2
  MODIFY_REG(hi2c->Instance->CR2, \
900075b6:	4008      	ands	r0, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
900075b8:	f3ca 0109 	ubfx	r1, sl, #0, #10
      hi2c->XferSize = hi2c->XferCount;
900075bc:	f8ab 2028 	strh.w	r2, [fp, #40]	; 0x28
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
900075c0:	b2d2      	uxtb	r2, r2
  MODIFY_REG(hi2c->Instance->CR2, \
900075c2:	4301      	orrs	r1, r0
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
900075c4:	f3ca 0a09 	ubfx	sl, sl, #0, #10
  MODIFY_REG(hi2c->Instance->CR2, \
900075c8:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
900075cc:	499c      	ldr	r1, [pc, #624]	; (90007840 <HAL_I2C_Master_Transmit+0x32c>)
900075ce:	4311      	orrs	r1, r2
900075d0:	6059      	str	r1, [r3, #4]
              error_code |= HAL_I2C_ERROR_TIMEOUT;
900075d2:	f04f 0920 	mov.w	r9, #32
    while (hi2c->XferCount > 0U)
900075d6:	f8bb 202a 	ldrh.w	r2, [fp, #42]	; 0x2a
900075da:	b292      	uxth	r2, r2
900075dc:	2a00      	cmp	r2, #0
900075de:	f000 80ee 	beq.w	900077be <HAL_I2C_Master_Transmit+0x2aa>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
900075e2:	699c      	ldr	r4, [r3, #24]
900075e4:	f014 0402 	ands.w	r4, r4, #2
900075e8:	f040 80b2 	bne.w	90007750 <HAL_I2C_Master_Transmit+0x23c>
  uint32_t itflag   = hi2c->Instance->ISR;
900075ec:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
900075ee:	f012 0210 	ands.w	r2, r2, #16
900075f2:	d07b      	beq.n	900076ec <HAL_I2C_Master_Transmit+0x1d8>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
900075f4:	2210      	movs	r2, #16
  uint32_t tickstart = Tickstart;
900075f6:	4646      	mov	r6, r8
  HAL_StatusTypeDef status = HAL_OK;
900075f8:	4627      	mov	r7, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
900075fa:	61da      	str	r2, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
900075fc:	1c69      	adds	r1, r5, #1
900075fe:	699a      	ldr	r2, [r3, #24]
90007600:	d176      	bne.n	900076f0 <HAL_I2C_Master_Transmit+0x1dc>
90007602:	0690      	lsls	r0, r2, #26
90007604:	f100 80f1 	bmi.w	900077ea <HAL_I2C_Master_Transmit+0x2d6>
90007608:	b927      	cbnz	r7, 90007614 <HAL_I2C_Master_Transmit+0x100>
9000760a:	699a      	ldr	r2, [r3, #24]
9000760c:	0691      	lsls	r1, r2, #26
9000760e:	d5fc      	bpl.n	9000760a <HAL_I2C_Master_Transmit+0xf6>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
90007610:	f8c3 901c 	str.w	r9, [r3, #28]
    error_code |= HAL_I2C_ERROR_AF;
90007614:	f044 0204 	orr.w	r2, r4, #4
    status = HAL_ERROR;
90007618:	2001      	movs	r0, #1
  itflag = hi2c->Instance->ISR;
9000761a:	6999      	ldr	r1, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
9000761c:	05ce      	lsls	r6, r1, #23
9000761e:	d541      	bpl.n	900076a4 <HAL_I2C_Master_Transmit+0x190>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
90007620:	f44f 7080 	mov.w	r0, #256	; 0x100
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
90007624:	054d      	lsls	r5, r1, #21
    error_code |= HAL_I2C_ERROR_BERR;
90007626:	f042 0201 	orr.w	r2, r2, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
9000762a:	61d8      	str	r0, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
9000762c:	d504      	bpl.n	90007638 <HAL_I2C_Master_Transmit+0x124>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
9000762e:	f44f 6080 	mov.w	r0, #1024	; 0x400
    error_code |= HAL_I2C_ERROR_OVR;
90007632:	f042 0208 	orr.w	r2, r2, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
90007636:	61d8      	str	r0, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
90007638:	0589      	lsls	r1, r1, #22
9000763a:	d504      	bpl.n	90007646 <HAL_I2C_Master_Transmit+0x132>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
9000763c:	f44f 7100 	mov.w	r1, #512	; 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
90007640:	f042 0202 	orr.w	r2, r2, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
90007644:	61d9      	str	r1, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
90007646:	6999      	ldr	r1, [r3, #24]
90007648:	078e      	lsls	r6, r1, #30
9000764a:	d501      	bpl.n	90007650 <HAL_I2C_Master_Transmit+0x13c>
    hi2c->Instance->TXDR = 0x00U;
9000764c:	2100      	movs	r1, #0
9000764e:	6299      	str	r1, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
90007650:	6999      	ldr	r1, [r3, #24]
90007652:	07cd      	lsls	r5, r1, #31
90007654:	d403      	bmi.n	9000765e <HAL_I2C_Master_Transmit+0x14a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
90007656:	6999      	ldr	r1, [r3, #24]
90007658:	f041 0101 	orr.w	r1, r1, #1
9000765c:	6199      	str	r1, [r3, #24]
    I2C_RESET_CR2(hi2c);
9000765e:	6859      	ldr	r1, [r3, #4]
    hi2c->Mode = HAL_I2C_MODE_NONE;
90007660:	2400      	movs	r4, #0
    I2C_RESET_CR2(hi2c);
90007662:	4878      	ldr	r0, [pc, #480]	; (90007844 <HAL_I2C_Master_Transmit+0x330>)
    hi2c->State = HAL_I2C_STATE_READY;
90007664:	2520      	movs	r5, #32
    I2C_RESET_CR2(hi2c);
90007666:	4001      	ands	r1, r0
        return HAL_ERROR;
90007668:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
9000766a:	6059      	str	r1, [r3, #4]
    hi2c->ErrorCode |= error_code;
9000766c:	f8db 3044 	ldr.w	r3, [fp, #68]	; 0x44
    __HAL_UNLOCK(hi2c);
90007670:	f88b 4040 	strb.w	r4, [fp, #64]	; 0x40
    hi2c->ErrorCode |= error_code;
90007674:	4313      	orrs	r3, r2
90007676:	f8cb 3044 	str.w	r3, [fp, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
9000767a:	f88b 5041 	strb.w	r5, [fp, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
9000767e:	f88b 4042 	strb.w	r4, [fp, #66]	; 0x42
}
90007682:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  MODIFY_REG(hi2c->Instance->CR2, \
90007686:	685a      	ldr	r2, [r3, #4]
90007688:	496c      	ldr	r1, [pc, #432]	; (9000783c <HAL_I2C_Master_Transmit+0x328>)
9000768a:	400a      	ands	r2, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
9000768c:	f3ca 0109 	ubfx	r1, sl, #0, #10
90007690:	f3ca 0a09 	ubfx	sl, sl, #0, #10
  MODIFY_REG(hi2c->Instance->CR2, \
90007694:	4311      	orrs	r1, r2
90007696:	4a6c      	ldr	r2, [pc, #432]	; (90007848 <HAL_I2C_Master_Transmit+0x334>)
90007698:	430a      	orrs	r2, r1
      hi2c->XferSize = MAX_NBYTE_SIZE;
9000769a:	21ff      	movs	r1, #255	; 0xff
9000769c:	f8ab 1028 	strh.w	r1, [fp, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
900076a0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
900076a2:	e796      	b.n	900075d2 <HAL_I2C_Master_Transmit+0xbe>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
900076a4:	054c      	lsls	r4, r1, #21
900076a6:	d4c2      	bmi.n	9000762e <HAL_I2C_Master_Transmit+0x11a>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
900076a8:	058f      	lsls	r7, r1, #22
900076aa:	d4c7      	bmi.n	9000763c <HAL_I2C_Master_Transmit+0x128>
  if (status != HAL_OK)
900076ac:	2800      	cmp	r0, #0
900076ae:	d1ca      	bne.n	90007646 <HAL_I2C_Master_Transmit+0x132>
    if (Timeout != HAL_MAX_DELAY)
900076b0:	1c6c      	adds	r4, r5, #1
900076b2:	d096      	beq.n	900075e2 <HAL_I2C_Master_Transmit+0xce>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
900076b4:	f7fe fd82 	bl	900061bc <HAL_GetTick>
900076b8:	eba0 0008 	sub.w	r0, r0, r8
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
900076bc:	f8db 3000 	ldr.w	r3, [fp]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
900076c0:	4285      	cmp	r5, r0
900076c2:	d301      	bcc.n	900076c8 <HAL_I2C_Master_Transmit+0x1b4>
900076c4:	2d00      	cmp	r5, #0
900076c6:	d18c      	bne.n	900075e2 <HAL_I2C_Master_Transmit+0xce>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
900076c8:	699a      	ldr	r2, [r3, #24]
900076ca:	f012 0202 	ands.w	r2, r2, #2
900076ce:	d188      	bne.n	900075e2 <HAL_I2C_Master_Transmit+0xce>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
900076d0:	f8db 3044 	ldr.w	r3, [fp, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
900076d4:	2120      	movs	r1, #32
          return HAL_ERROR;
900076d6:	2001      	movs	r0, #1
          __HAL_UNLOCK(hi2c);
900076d8:	f88b 2040 	strb.w	r2, [fp, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
900076dc:	430b      	orrs	r3, r1
900076de:	f8cb 3044 	str.w	r3, [fp, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
900076e2:	f88b 1041 	strb.w	r1, [fp, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
900076e6:	f88b 2042 	strb.w	r2, [fp, #66]	; 0x42
          return HAL_ERROR;
900076ea:	e749      	b.n	90007580 <HAL_I2C_Master_Transmit+0x6c>
  HAL_StatusTypeDef status = HAL_OK;
900076ec:	4610      	mov	r0, r2
900076ee:	e794      	b.n	9000761a <HAL_I2C_Master_Transmit+0x106>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
900076f0:	0692      	lsls	r2, r2, #26
900076f2:	d47a      	bmi.n	900077ea <HAL_I2C_Master_Transmit+0x2d6>
900076f4:	2f00      	cmp	r7, #0
900076f6:	d18d      	bne.n	90007614 <HAL_I2C_Master_Transmit+0x100>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
900076f8:	f7fe fd60 	bl	900061bc <HAL_GetTick>
900076fc:	1b80      	subs	r0, r0, r6
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
900076fe:	f8db 3000 	ldr.w	r3, [fp]
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
90007702:	4285      	cmp	r5, r0
90007704:	d302      	bcc.n	9000770c <HAL_I2C_Master_Transmit+0x1f8>
90007706:	2d00      	cmp	r5, #0
90007708:	f47f af78 	bne.w	900075fc <HAL_I2C_Master_Transmit+0xe8>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
9000770c:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
9000770e:	f89b 2042 	ldrb.w	r2, [fp, #66]	; 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
90007712:	6999      	ldr	r1, [r3, #24]
          tmp2 = hi2c->Mode;
90007714:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
90007716:	0409      	lsls	r1, r1, #16
90007718:	d50c      	bpl.n	90007734 <HAL_I2C_Master_Transmit+0x220>
              (tmp1 != I2C_CR2_STOP) && \
9000771a:	0441      	lsls	r1, r0, #17
9000771c:	d40a      	bmi.n	90007734 <HAL_I2C_Master_Transmit+0x220>
9000771e:	2a20      	cmp	r2, #32
90007720:	d008      	beq.n	90007734 <HAL_I2C_Master_Transmit+0x220>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
90007722:	685a      	ldr	r2, [r3, #4]
90007724:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
90007728:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
9000772a:	f7fe fd47 	bl	900061bc <HAL_GetTick>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
9000772e:	f8db 3000 	ldr.w	r3, [fp]
            tickstart = HAL_GetTick();
90007732:	4606      	mov	r6, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
90007734:	699a      	ldr	r2, [r3, #24]
90007736:	0690      	lsls	r0, r2, #26
90007738:	f53f af60 	bmi.w	900075fc <HAL_I2C_Master_Transmit+0xe8>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
9000773c:	f7fe fd3e 	bl	900061bc <HAL_GetTick>
90007740:	1b80      	subs	r0, r0, r6
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
90007742:	f8db 3000 	ldr.w	r3, [fp]
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
90007746:	2819      	cmp	r0, #25
90007748:	d9f4      	bls.n	90007734 <HAL_I2C_Master_Transmit+0x220>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
9000774a:	2420      	movs	r4, #32
              status = HAL_ERROR;
9000774c:	2701      	movs	r7, #1
9000774e:	e755      	b.n	900075fc <HAL_I2C_Master_Transmit+0xe8>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
90007750:	f8db 0024 	ldr.w	r0, [fp, #36]	; 0x24
      hi2c->XferSize--;
90007754:	f8bb 2028 	ldrh.w	r2, [fp, #40]	; 0x28
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
90007758:	f810 1b01 	ldrb.w	r1, [r0], #1
      hi2c->XferSize--;
9000775c:	3a01      	subs	r2, #1
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
9000775e:	6299      	str	r1, [r3, #40]	; 0x28
      hi2c->XferCount--;
90007760:	f8bb 102a 	ldrh.w	r1, [fp, #42]	; 0x2a
      hi2c->XferSize--;
90007764:	b292      	uxth	r2, r2
      hi2c->pBuffPtr++;
90007766:	f8cb 0024 	str.w	r0, [fp, #36]	; 0x24
      hi2c->XferCount--;
9000776a:	3901      	subs	r1, #1
      hi2c->XferSize--;
9000776c:	f8ab 2028 	strh.w	r2, [fp, #40]	; 0x28
      hi2c->XferCount--;
90007770:	b289      	uxth	r1, r1
90007772:	f8ab 102a 	strh.w	r1, [fp, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
90007776:	f8bb 102a 	ldrh.w	r1, [fp, #42]	; 0x2a
9000777a:	b289      	uxth	r1, r1
9000777c:	2a00      	cmp	r2, #0
9000777e:	f47f af2a 	bne.w	900075d6 <HAL_I2C_Master_Transmit+0xc2>
90007782:	2900      	cmp	r1, #0
90007784:	f43f af27 	beq.w	900075d6 <HAL_I2C_Master_Transmit+0xc2>
90007788:	1c68      	adds	r0, r5, #1
9000778a:	d132      	bne.n	900077f2 <HAL_I2C_Master_Transmit+0x2de>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
9000778c:	699a      	ldr	r2, [r3, #24]
9000778e:	0611      	lsls	r1, r2, #24
90007790:	d5fc      	bpl.n	9000778c <HAL_I2C_Master_Transmit+0x278>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
90007792:	f8bb 202a 	ldrh.w	r2, [fp, #42]	; 0x2a
90007796:	b292      	uxth	r2, r2
90007798:	2aff      	cmp	r2, #255	; 0xff
9000779a:	d93c      	bls.n	90007816 <HAL_I2C_Master_Transmit+0x302>
  MODIFY_REG(hi2c->Instance->CR2, \
9000779c:	685a      	ldr	r2, [r3, #4]
9000779e:	492b      	ldr	r1, [pc, #172]	; (9000784c <HAL_I2C_Master_Transmit+0x338>)
900077a0:	400a      	ands	r2, r1
900077a2:	492b      	ldr	r1, [pc, #172]	; (90007850 <HAL_I2C_Master_Transmit+0x33c>)
900077a4:	ea4a 0202 	orr.w	r2, sl, r2
900077a8:	4311      	orrs	r1, r2
          hi2c->XferSize = MAX_NBYTE_SIZE;
900077aa:	22ff      	movs	r2, #255	; 0xff
900077ac:	f8ab 2028 	strh.w	r2, [fp, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
900077b0:	6059      	str	r1, [r3, #4]
    while (hi2c->XferCount > 0U)
900077b2:	f8bb 202a 	ldrh.w	r2, [fp, #42]	; 0x2a
900077b6:	b292      	uxth	r2, r2
900077b8:	2a00      	cmp	r2, #0
900077ba:	f47f af12 	bne.w	900075e2 <HAL_I2C_Master_Transmit+0xce>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
900077be:	4642      	mov	r2, r8
900077c0:	4629      	mov	r1, r5
900077c2:	4658      	mov	r0, fp
900077c4:	f7ff fd7a 	bl	900072bc <I2C_WaitOnSTOPFlagUntilTimeout>
900077c8:	2800      	cmp	r0, #0
900077ca:	d135      	bne.n	90007838 <HAL_I2C_Master_Transmit+0x324>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
900077cc:	f8db 3000 	ldr.w	r3, [fp]
900077d0:	2120      	movs	r1, #32
    I2C_RESET_CR2(hi2c);
900077d2:	4c1c      	ldr	r4, [pc, #112]	; (90007844 <HAL_I2C_Master_Transmit+0x330>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
900077d4:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
900077d6:	685a      	ldr	r2, [r3, #4]
900077d8:	4022      	ands	r2, r4
900077da:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
900077dc:	f88b 1041 	strb.w	r1, [fp, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
900077e0:	f88b 0040 	strb.w	r0, [fp, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
900077e4:	f88b 0042 	strb.w	r0, [fp, #66]	; 0x42
    return HAL_OK;
900077e8:	e6ca      	b.n	90007580 <HAL_I2C_Master_Transmit+0x6c>
    if (status == HAL_OK)
900077ea:	2f00      	cmp	r7, #0
900077ec:	f43f af10 	beq.w	90007610 <HAL_I2C_Master_Transmit+0xfc>
900077f0:	e710      	b.n	90007614 <HAL_I2C_Master_Transmit+0x100>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
900077f2:	699a      	ldr	r2, [r3, #24]
900077f4:	0612      	lsls	r2, r2, #24
900077f6:	d4cc      	bmi.n	90007792 <HAL_I2C_Master_Transmit+0x27e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
900077f8:	f7fe fce0 	bl	900061bc <HAL_GetTick>
900077fc:	eba0 0008 	sub.w	r0, r0, r8
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
90007800:	f8db 3000 	ldr.w	r3, [fp]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
90007804:	4285      	cmp	r5, r0
90007806:	d301      	bcc.n	9000780c <HAL_I2C_Master_Transmit+0x2f8>
90007808:	2d00      	cmp	r5, #0
9000780a:	d1bd      	bne.n	90007788 <HAL_I2C_Master_Transmit+0x274>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
9000780c:	699a      	ldr	r2, [r3, #24]
9000780e:	f012 0280 	ands.w	r2, r2, #128	; 0x80
90007812:	d1b9      	bne.n	90007788 <HAL_I2C_Master_Transmit+0x274>
90007814:	e75c      	b.n	900076d0 <HAL_I2C_Master_Transmit+0x1bc>
          hi2c->XferSize = hi2c->XferCount;
90007816:	f8bb 202a 	ldrh.w	r2, [fp, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
9000781a:	480c      	ldr	r0, [pc, #48]	; (9000784c <HAL_I2C_Master_Transmit+0x338>)
          hi2c->XferSize = hi2c->XferCount;
9000781c:	b292      	uxth	r2, r2
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
9000781e:	b2d1      	uxtb	r1, r2
          hi2c->XferSize = hi2c->XferCount;
90007820:	f8ab 2028 	strh.w	r2, [fp, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
90007824:	685a      	ldr	r2, [r3, #4]
90007826:	4002      	ands	r2, r0
90007828:	ea4a 0202 	orr.w	r2, sl, r2
9000782c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
90007830:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
90007834:	605a      	str	r2, [r3, #4]
}
90007836:	e6ce      	b.n	900075d6 <HAL_I2C_Master_Transmit+0xc2>
      return HAL_ERROR;
90007838:	2001      	movs	r0, #1
9000783a:	e6a1      	b.n	90007580 <HAL_I2C_Master_Transmit+0x6c>
9000783c:	fc009800 	.word	0xfc009800
90007840:	02002000 	.word	0x02002000
90007844:	fe00e800 	.word	0xfe00e800
90007848:	01ff2000 	.word	0x01ff2000
9000784c:	fc009c00 	.word	0xfc009c00
90007850:	01ff0000 	.word	0x01ff0000

90007854 <HAL_I2C_Master_Receive>:
{
90007854:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
90007858:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
9000785a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
9000785e:	9e08      	ldr	r6, [sp, #32]
  if (hi2c->State == HAL_I2C_STATE_READY)
90007860:	2b20      	cmp	r3, #32
90007862:	d127      	bne.n	900078b4 <HAL_I2C_Master_Receive+0x60>
    __HAL_LOCK(hi2c);
90007864:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
90007868:	4604      	mov	r4, r0
9000786a:	2b01      	cmp	r3, #1
9000786c:	d022      	beq.n	900078b4 <HAL_I2C_Master_Receive+0x60>
9000786e:	2301      	movs	r3, #1
90007870:	4689      	mov	r9, r1
90007872:	4617      	mov	r7, r2
90007874:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
90007878:	f7fe fca0 	bl	900061bc <HAL_GetTick>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
9000787c:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
9000787e:	4605      	mov	r5, r0
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
90007880:	699a      	ldr	r2, [r3, #24]
90007882:	0411      	lsls	r1, r2, #16
90007884:	d519      	bpl.n	900078ba <HAL_I2C_Master_Receive+0x66>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
90007886:	f7fe fc99 	bl	900061bc <HAL_GetTick>
9000788a:	1b40      	subs	r0, r0, r5
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
9000788c:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
9000788e:	2819      	cmp	r0, #25
90007890:	d9f6      	bls.n	90007880 <HAL_I2C_Master_Receive+0x2c>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
90007892:	699a      	ldr	r2, [r3, #24]
90007894:	0412      	lsls	r2, r2, #16
90007896:	d5f3      	bpl.n	90007880 <HAL_I2C_Master_Receive+0x2c>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
90007898:	6c63      	ldr	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
9000789a:	2120      	movs	r1, #32
          hi2c->Mode = HAL_I2C_MODE_NONE;
9000789c:	2200      	movs	r2, #0
      return HAL_ERROR;
9000789e:	2001      	movs	r0, #1
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
900078a0:	430b      	orrs	r3, r1
          __HAL_UNLOCK(hi2c);
900078a2:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
900078a6:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
900078a8:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
900078ac:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
900078b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return HAL_BUSY;
900078b4:	2002      	movs	r0, #2
}
900078b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
900078ba:	2122      	movs	r1, #34	; 0x22
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
900078bc:	2200      	movs	r2, #0
    hi2c->pBuffPtr  = pData;
900078be:	6267      	str	r7, [r4, #36]	; 0x24
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
900078c0:	f3c9 0709 	ubfx	r7, r9, #0, #10
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
900078c4:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
900078c8:	2110      	movs	r1, #16
    hi2c->XferISR   = NULL;
900078ca:	6362      	str	r2, [r4, #52]	; 0x34
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
900078cc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
900078d0:	6462      	str	r2, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
900078d2:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
900078d6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
900078d8:	b292      	uxth	r2, r2
900078da:	2aff      	cmp	r2, #255	; 0xff
900078dc:	d85e      	bhi.n	9000799c <HAL_I2C_Master_Receive+0x148>
      hi2c->XferSize = hi2c->XferCount;
900078de:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
900078e0:	4849      	ldr	r0, [pc, #292]	; (90007a08 <HAL_I2C_Master_Receive+0x1b4>)
      hi2c->XferSize = hi2c->XferCount;
900078e2:	b292      	uxth	r2, r2
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
900078e4:	b2d1      	uxtb	r1, r2
      hi2c->XferSize = hi2c->XferCount;
900078e6:	8522      	strh	r2, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
900078e8:	685a      	ldr	r2, [r3, #4]
900078ea:	4002      	ands	r2, r0
900078ec:	433a      	orrs	r2, r7
900078ee:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
900078f2:	4946      	ldr	r1, [pc, #280]	; (90007a0c <HAL_I2C_Master_Receive+0x1b8>)
900078f4:	4311      	orrs	r1, r2
900078f6:	6059      	str	r1, [r3, #4]
900078f8:	f8df 811c 	ldr.w	r8, [pc, #284]	; 90007a18 <HAL_I2C_Master_Receive+0x1c4>
          hi2c->XferSize = MAX_NBYTE_SIZE;
900078fc:	f04f 0aff 	mov.w	sl, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2, \
90007900:	f8df 9118 	ldr.w	r9, [pc, #280]	; 90007a1c <HAL_I2C_Master_Receive+0x1c8>
    while (hi2c->XferCount > 0U)
90007904:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
90007906:	462a      	mov	r2, r5
90007908:	4631      	mov	r1, r6
9000790a:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
9000790c:	b29b      	uxth	r3, r3
9000790e:	2b00      	cmp	r3, #0
90007910:	d032      	beq.n	90007978 <HAL_I2C_Master_Receive+0x124>
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
90007912:	f7ff fb3f 	bl	90006f94 <I2C_WaitOnRXNEFlagUntilTimeout>
90007916:	2800      	cmp	r0, #0
90007918:	d173      	bne.n	90007a02 <HAL_I2C_Master_Receive+0x1ae>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
9000791a:	6822      	ldr	r2, [r4, #0]
9000791c:	6a63      	ldr	r3, [r4, #36]	; 0x24
9000791e:	6a52      	ldr	r2, [r2, #36]	; 0x24
90007920:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
90007922:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
90007924:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
90007926:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
90007928:	6a61      	ldr	r1, [r4, #36]	; 0x24
      hi2c->XferSize--;
9000792a:	3b01      	subs	r3, #1
      hi2c->XferCount--;
9000792c:	b292      	uxth	r2, r2
      hi2c->pBuffPtr++;
9000792e:	3101      	adds	r1, #1
      hi2c->XferSize--;
90007930:	b29b      	uxth	r3, r3
      hi2c->XferCount--;
90007932:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
90007934:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
90007936:	6261      	str	r1, [r4, #36]	; 0x24
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
90007938:	b292      	uxth	r2, r2
      hi2c->XferSize--;
9000793a:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
9000793c:	2a00      	cmp	r2, #0
9000793e:	d0e1      	beq.n	90007904 <HAL_I2C_Master_Receive+0xb0>
90007940:	2b00      	cmp	r3, #0
90007942:	d1df      	bne.n	90007904 <HAL_I2C_Master_Receive+0xb0>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
90007944:	6822      	ldr	r2, [r4, #0]
90007946:	1c70      	adds	r0, r6, #1
90007948:	d132      	bne.n	900079b0 <HAL_I2C_Master_Receive+0x15c>
9000794a:	6993      	ldr	r3, [r2, #24]
9000794c:	0619      	lsls	r1, r3, #24
9000794e:	d5fc      	bpl.n	9000794a <HAL_I2C_Master_Receive+0xf6>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
90007950:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
90007952:	b29b      	uxth	r3, r3
90007954:	2bff      	cmp	r3, #255	; 0xff
90007956:	d946      	bls.n	900079e6 <HAL_I2C_Master_Receive+0x192>
  MODIFY_REG(hi2c->Instance->CR2, \
90007958:	6853      	ldr	r3, [r2, #4]
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
9000795a:	4631      	mov	r1, r6
          hi2c->XferSize = MAX_NBYTE_SIZE;
9000795c:	f8a4 a028 	strh.w	sl, [r4, #40]	; 0x28
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
90007960:	4620      	mov	r0, r4
  MODIFY_REG(hi2c->Instance->CR2, \
90007962:	ea03 0308 	and.w	r3, r3, r8
90007966:	433b      	orrs	r3, r7
90007968:	ea43 0309 	orr.w	r3, r3, r9
9000796c:	6053      	str	r3, [r2, #4]
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
9000796e:	462a      	mov	r2, r5
    while (hi2c->XferCount > 0U)
90007970:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
90007972:	b29b      	uxth	r3, r3
90007974:	2b00      	cmp	r3, #0
90007976:	d1cc      	bne.n	90007912 <HAL_I2C_Master_Receive+0xbe>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
90007978:	f7ff fca0 	bl	900072bc <I2C_WaitOnSTOPFlagUntilTimeout>
9000797c:	2800      	cmp	r0, #0
9000797e:	d140      	bne.n	90007a02 <HAL_I2C_Master_Receive+0x1ae>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
90007980:	6823      	ldr	r3, [r4, #0]
90007982:	2120      	movs	r1, #32
    I2C_RESET_CR2(hi2c);
90007984:	4d22      	ldr	r5, [pc, #136]	; (90007a10 <HAL_I2C_Master_Receive+0x1bc>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
90007986:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
90007988:	685a      	ldr	r2, [r3, #4]
9000798a:	402a      	ands	r2, r5
9000798c:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
9000798e:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
90007992:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
90007996:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
9000799a:	e78c      	b.n	900078b6 <HAL_I2C_Master_Receive+0x62>
  MODIFY_REG(hi2c->Instance->CR2, \
9000799c:	685a      	ldr	r2, [r3, #4]
9000799e:	491a      	ldr	r1, [pc, #104]	; (90007a08 <HAL_I2C_Master_Receive+0x1b4>)
900079a0:	400a      	ands	r2, r1
900079a2:	491c      	ldr	r1, [pc, #112]	; (90007a14 <HAL_I2C_Master_Receive+0x1c0>)
900079a4:	433a      	orrs	r2, r7
900079a6:	4311      	orrs	r1, r2
      hi2c->XferSize = MAX_NBYTE_SIZE;
900079a8:	22ff      	movs	r2, #255	; 0xff
900079aa:	8522      	strh	r2, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
900079ac:	6059      	str	r1, [r3, #4]
}
900079ae:	e7a3      	b.n	900078f8 <HAL_I2C_Master_Receive+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
900079b0:	6993      	ldr	r3, [r2, #24]
900079b2:	061b      	lsls	r3, r3, #24
900079b4:	d4cc      	bmi.n	90007950 <HAL_I2C_Master_Receive+0xfc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
900079b6:	f7fe fc01 	bl	900061bc <HAL_GetTick>
900079ba:	1b40      	subs	r0, r0, r5
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
900079bc:	6822      	ldr	r2, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
900079be:	4286      	cmp	r6, r0
900079c0:	d301      	bcc.n	900079c6 <HAL_I2C_Master_Receive+0x172>
900079c2:	2e00      	cmp	r6, #0
900079c4:	d1bf      	bne.n	90007946 <HAL_I2C_Master_Receive+0xf2>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
900079c6:	6993      	ldr	r3, [r2, #24]
900079c8:	f013 0380 	ands.w	r3, r3, #128	; 0x80
900079cc:	d1bb      	bne.n	90007946 <HAL_I2C_Master_Receive+0xf2>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
900079ce:	6c62      	ldr	r2, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
900079d0:	2120      	movs	r1, #32
          return HAL_ERROR;
900079d2:	2001      	movs	r0, #1
          __HAL_UNLOCK(hi2c);
900079d4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
900079d8:	430a      	orrs	r2, r1
900079da:	6462      	str	r2, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
900079dc:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
900079e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          return HAL_ERROR;
900079e4:	e767      	b.n	900078b6 <HAL_I2C_Master_Receive+0x62>
          hi2c->XferSize = hi2c->XferCount;
900079e6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
900079e8:	b29b      	uxth	r3, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
900079ea:	b2d9      	uxtb	r1, r3
          hi2c->XferSize = hi2c->XferCount;
900079ec:	8523      	strh	r3, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
900079ee:	6853      	ldr	r3, [r2, #4]
900079f0:	ea03 0308 	and.w	r3, r3, r8
900079f4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
900079f8:	433b      	orrs	r3, r7
900079fa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
900079fe:	6053      	str	r3, [r2, #4]
}
90007a00:	e780      	b.n	90007904 <HAL_I2C_Master_Receive+0xb0>
        return HAL_ERROR;
90007a02:	2001      	movs	r0, #1
}
90007a04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
90007a08:	fc009800 	.word	0xfc009800
90007a0c:	02002400 	.word	0x02002400
90007a10:	fe00e800 	.word	0xfe00e800
90007a14:	01ff2400 	.word	0x01ff2400
90007a18:	fc009c00 	.word	0xfc009c00
90007a1c:	01ff0000 	.word	0x01ff0000

90007a20 <HAL_I2C_Mem_Write>:
{
90007a20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
90007a24:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
90007a26:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
90007a2a:	f8bd a024 	ldrh.w	sl, [sp, #36]	; 0x24
  if (hi2c->State == HAL_I2C_STATE_READY)
90007a2e:	2b20      	cmp	r3, #32
{
90007a30:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
90007a32:	d132      	bne.n	90007a9a <HAL_I2C_Mem_Write+0x7a>
    if ((pData == NULL) || (Size == 0U))
90007a34:	9b08      	ldr	r3, [sp, #32]
90007a36:	4604      	mov	r4, r0
90007a38:	b34b      	cbz	r3, 90007a8e <HAL_I2C_Mem_Write+0x6e>
90007a3a:	f1ba 0f00 	cmp.w	sl, #0
90007a3e:	d026      	beq.n	90007a8e <HAL_I2C_Mem_Write+0x6e>
    __HAL_LOCK(hi2c);
90007a40:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
90007a44:	2b01      	cmp	r3, #1
90007a46:	d028      	beq.n	90007a9a <HAL_I2C_Mem_Write+0x7a>
90007a48:	2301      	movs	r3, #1
90007a4a:	460e      	mov	r6, r1
90007a4c:	4691      	mov	r9, r2
90007a4e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
90007a52:	f7fe fbb3 	bl	900061bc <HAL_GetTick>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
90007a56:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
90007a58:	4605      	mov	r5, r0
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
90007a5a:	699a      	ldr	r2, [r3, #24]
90007a5c:	0411      	lsls	r1, r2, #16
90007a5e:	d51f      	bpl.n	90007aa0 <HAL_I2C_Mem_Write+0x80>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
90007a60:	f7fe fbac 	bl	900061bc <HAL_GetTick>
90007a64:	1b40      	subs	r0, r0, r5
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
90007a66:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
90007a68:	2819      	cmp	r0, #25
90007a6a:	d9f6      	bls.n	90007a5a <HAL_I2C_Mem_Write+0x3a>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
90007a6c:	699a      	ldr	r2, [r3, #24]
90007a6e:	0412      	lsls	r2, r2, #16
90007a70:	d5f3      	bpl.n	90007a5a <HAL_I2C_Mem_Write+0x3a>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
90007a72:	6c63      	ldr	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
90007a74:	2120      	movs	r1, #32
          hi2c->Mode = HAL_I2C_MODE_NONE;
90007a76:	2200      	movs	r2, #0
      return HAL_ERROR;
90007a78:	2001      	movs	r0, #1
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
90007a7a:	430b      	orrs	r3, r1
          __HAL_UNLOCK(hi2c);
90007a7c:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
90007a80:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
90007a82:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
90007a86:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
90007a8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
90007a8e:	f44f 7300 	mov.w	r3, #512	; 0x200
      return  HAL_ERROR;
90007a92:	2001      	movs	r0, #1
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
90007a94:	6463      	str	r3, [r4, #68]	; 0x44
}
90007a96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return HAL_BUSY;
90007a9a:	2002      	movs	r0, #2
}
90007a9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hi2c->pBuffPtr  = pData;
90007aa0:	9a08      	ldr	r2, [sp, #32]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
90007aa2:	2121      	movs	r1, #33	; 0x21
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
90007aa4:	f3c6 0609 	ubfx	r6, r6, #0, #10
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
90007aa8:	4620      	mov	r0, r4
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
90007aaa:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
90007aae:	2140      	movs	r1, #64	; 0x40
    hi2c->pBuffPtr  = pData;
90007ab0:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
90007ab2:	2200      	movs	r2, #0
    hi2c->Mode      = HAL_I2C_MODE_MEM;
90007ab4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
    hi2c->XferISR   = NULL;
90007ab8:	6362      	str	r2, [r4, #52]	; 0x34
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
90007aba:	6462      	str	r2, [r4, #68]	; 0x44
  MODIFY_REG(hi2c->Instance->CR2, \
90007abc:	496d      	ldr	r1, [pc, #436]	; (90007c74 <HAL_I2C_Mem_Write+0x254>)
    hi2c->XferCount = Size;
90007abe:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
90007ac2:	685a      	ldr	r2, [r3, #4]
90007ac4:	400a      	ands	r2, r1
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
90007ac6:	fa5f f188 	uxtb.w	r1, r8
  MODIFY_REG(hi2c->Instance->CR2, \
90007aca:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
90007ace:	496a      	ldr	r1, [pc, #424]	; (90007c78 <HAL_I2C_Mem_Write+0x258>)
90007ad0:	4332      	orrs	r2, r6
90007ad2:	4311      	orrs	r1, r2
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
90007ad4:	462a      	mov	r2, r5
  MODIFY_REG(hi2c->Instance->CR2, \
90007ad6:	6059      	str	r1, [r3, #4]
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
90007ad8:	4639      	mov	r1, r7
90007ada:	f7ff fb39 	bl	90007150 <I2C_WaitOnTXISFlagUntilTimeout>
90007ade:	2800      	cmp	r0, #0
90007ae0:	d175      	bne.n	90007bce <HAL_I2C_Mem_Write+0x1ae>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
90007ae2:	f1b8 0f01 	cmp.w	r8, #1
90007ae6:	d00a      	beq.n	90007afe <HAL_I2C_Mem_Write+0xde>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
90007ae8:	ea4f 2219 	mov.w	r2, r9, lsr #8
90007aec:	6823      	ldr	r3, [r4, #0]
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
90007aee:	4639      	mov	r1, r7
90007af0:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
90007af2:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
90007af4:	462a      	mov	r2, r5
90007af6:	f7ff fb2b 	bl	90007150 <I2C_WaitOnTXISFlagUntilTimeout>
90007afa:	2800      	cmp	r0, #0
90007afc:	d167      	bne.n	90007bce <HAL_I2C_Mem_Write+0x1ae>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
90007afe:	fa5f f389 	uxtb.w	r3, r9
90007b02:	6822      	ldr	r2, [r4, #0]
90007b04:	6293      	str	r3, [r2, #40]	; 0x28
90007b06:	1c78      	adds	r0, r7, #1
90007b08:	d14a      	bne.n	90007ba0 <HAL_I2C_Mem_Write+0x180>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
90007b0a:	6993      	ldr	r3, [r2, #24]
90007b0c:	0619      	lsls	r1, r3, #24
90007b0e:	d5fc      	bpl.n	90007b0a <HAL_I2C_Mem_Write+0xea>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
90007b10:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
90007b12:	b29b      	uxth	r3, r3
90007b14:	2bff      	cmp	r3, #255	; 0xff
90007b16:	f240 808a 	bls.w	90007c2e <HAL_I2C_Mem_Write+0x20e>
  MODIFY_REG(hi2c->Instance->CR2, \
90007b1a:	6853      	ldr	r3, [r2, #4]
90007b1c:	4957      	ldr	r1, [pc, #348]	; (90007c7c <HAL_I2C_Mem_Write+0x25c>)
90007b1e:	400b      	ands	r3, r1
90007b20:	4957      	ldr	r1, [pc, #348]	; (90007c80 <HAL_I2C_Mem_Write+0x260>)
90007b22:	4333      	orrs	r3, r6
90007b24:	4319      	orrs	r1, r3
      hi2c->XferSize = MAX_NBYTE_SIZE;
90007b26:	23ff      	movs	r3, #255	; 0xff
90007b28:	8523      	strh	r3, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
90007b2a:	6051      	str	r1, [r2, #4]
90007b2c:	f8df 814c 	ldr.w	r8, [pc, #332]	; 90007c7c <HAL_I2C_Mem_Write+0x25c>
          hi2c->XferSize = MAX_NBYTE_SIZE;
90007b30:	f04f 0aff 	mov.w	sl, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2, \
90007b34:	f8df 9148 	ldr.w	r9, [pc, #328]	; 90007c80 <HAL_I2C_Mem_Write+0x260>
90007b38:	e004      	b.n	90007b44 <HAL_I2C_Mem_Write+0x124>
    } while (hi2c->XferCount > 0U);
90007b3a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
90007b3c:	b29b      	uxth	r3, r3
90007b3e:	2b00      	cmp	r3, #0
90007b40:	f000 8083 	beq.w	90007c4a <HAL_I2C_Mem_Write+0x22a>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
90007b44:	462a      	mov	r2, r5
90007b46:	4639      	mov	r1, r7
90007b48:	4620      	mov	r0, r4
90007b4a:	f7ff fb01 	bl	90007150 <I2C_WaitOnTXISFlagUntilTimeout>
90007b4e:	2800      	cmp	r0, #0
90007b50:	d16b      	bne.n	90007c2a <HAL_I2C_Mem_Write+0x20a>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
90007b52:	6a62      	ldr	r2, [r4, #36]	; 0x24
90007b54:	6821      	ldr	r1, [r4, #0]
90007b56:	f812 0b01 	ldrb.w	r0, [r2], #1
      hi2c->XferSize--;
90007b5a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
90007b5c:	6288      	str	r0, [r1, #40]	; 0x28
      hi2c->pBuffPtr++;
90007b5e:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferSize--;
90007b60:	3b01      	subs	r3, #1
      hi2c->XferCount--;
90007b62:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
90007b64:	b29b      	uxth	r3, r3
      hi2c->XferCount--;
90007b66:	3a01      	subs	r2, #1
      hi2c->XferSize--;
90007b68:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
90007b6a:	b292      	uxth	r2, r2
90007b6c:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
90007b6e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
90007b70:	b292      	uxth	r2, r2
90007b72:	2a00      	cmp	r2, #0
90007b74:	d0e1      	beq.n	90007b3a <HAL_I2C_Mem_Write+0x11a>
90007b76:	2b00      	cmp	r3, #0
90007b78:	d1df      	bne.n	90007b3a <HAL_I2C_Mem_Write+0x11a>
90007b7a:	1c78      	adds	r0, r7, #1
90007b7c:	d12c      	bne.n	90007bd8 <HAL_I2C_Mem_Write+0x1b8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
90007b7e:	698b      	ldr	r3, [r1, #24]
90007b80:	061a      	lsls	r2, r3, #24
90007b82:	d5fc      	bpl.n	90007b7e <HAL_I2C_Mem_Write+0x15e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
90007b84:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
90007b86:	b29b      	uxth	r3, r3
90007b88:	2bff      	cmp	r3, #255	; 0xff
90007b8a:	d940      	bls.n	90007c0e <HAL_I2C_Mem_Write+0x1ee>
  MODIFY_REG(hi2c->Instance->CR2, \
90007b8c:	684b      	ldr	r3, [r1, #4]
          hi2c->XferSize = MAX_NBYTE_SIZE;
90007b8e:	f8a4 a028 	strh.w	sl, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
90007b92:	ea03 0308 	and.w	r3, r3, r8
90007b96:	4333      	orrs	r3, r6
90007b98:	ea43 0309 	orr.w	r3, r3, r9
90007b9c:	604b      	str	r3, [r1, #4]
}
90007b9e:	e7cc      	b.n	90007b3a <HAL_I2C_Mem_Write+0x11a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
90007ba0:	6993      	ldr	r3, [r2, #24]
90007ba2:	061b      	lsls	r3, r3, #24
90007ba4:	d4b4      	bmi.n	90007b10 <HAL_I2C_Mem_Write+0xf0>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
90007ba6:	f7fe fb09 	bl	900061bc <HAL_GetTick>
90007baa:	1b40      	subs	r0, r0, r5
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
90007bac:	6822      	ldr	r2, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
90007bae:	4287      	cmp	r7, r0
90007bb0:	d301      	bcc.n	90007bb6 <HAL_I2C_Mem_Write+0x196>
90007bb2:	2f00      	cmp	r7, #0
90007bb4:	d1a7      	bne.n	90007b06 <HAL_I2C_Mem_Write+0xe6>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
90007bb6:	6993      	ldr	r3, [r2, #24]
90007bb8:	f013 0380 	ands.w	r3, r3, #128	; 0x80
90007bbc:	d1a3      	bne.n	90007b06 <HAL_I2C_Mem_Write+0xe6>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
90007bbe:	6c62      	ldr	r2, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
90007bc0:	2120      	movs	r1, #32
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
90007bc2:	430a      	orrs	r2, r1
90007bc4:	6462      	str	r2, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
90007bc6:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
90007bca:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
90007bce:	2300      	movs	r3, #0
      return HAL_ERROR;
90007bd0:	2001      	movs	r0, #1
      __HAL_UNLOCK(hi2c);
90007bd2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
90007bd6:	e75e      	b.n	90007a96 <HAL_I2C_Mem_Write+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
90007bd8:	698b      	ldr	r3, [r1, #24]
90007bda:	061b      	lsls	r3, r3, #24
90007bdc:	d4d2      	bmi.n	90007b84 <HAL_I2C_Mem_Write+0x164>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
90007bde:	f7fe faed 	bl	900061bc <HAL_GetTick>
90007be2:	1b40      	subs	r0, r0, r5
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
90007be4:	6821      	ldr	r1, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
90007be6:	4287      	cmp	r7, r0
90007be8:	d301      	bcc.n	90007bee <HAL_I2C_Mem_Write+0x1ce>
90007bea:	2f00      	cmp	r7, #0
90007bec:	d1c5      	bne.n	90007b7a <HAL_I2C_Mem_Write+0x15a>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
90007bee:	698b      	ldr	r3, [r1, #24]
90007bf0:	f013 0380 	ands.w	r3, r3, #128	; 0x80
90007bf4:	d1c1      	bne.n	90007b7a <HAL_I2C_Mem_Write+0x15a>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
90007bf6:	6c62      	ldr	r2, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
90007bf8:	2120      	movs	r1, #32
          return HAL_ERROR;
90007bfa:	2001      	movs	r0, #1
          __HAL_UNLOCK(hi2c);
90007bfc:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
90007c00:	430a      	orrs	r2, r1
90007c02:	6462      	str	r2, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
90007c04:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
90007c08:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          return HAL_ERROR;
90007c0c:	e743      	b.n	90007a96 <HAL_I2C_Mem_Write+0x76>
          hi2c->XferSize = hi2c->XferCount;
90007c0e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
90007c10:	b29b      	uxth	r3, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
90007c12:	b2da      	uxtb	r2, r3
          hi2c->XferSize = hi2c->XferCount;
90007c14:	8523      	strh	r3, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
90007c16:	684b      	ldr	r3, [r1, #4]
90007c18:	ea03 0308 	and.w	r3, r3, r8
90007c1c:	4333      	orrs	r3, r6
90007c1e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
90007c22:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
90007c26:	604b      	str	r3, [r1, #4]
}
90007c28:	e787      	b.n	90007b3a <HAL_I2C_Mem_Write+0x11a>
        return HAL_ERROR;
90007c2a:	2001      	movs	r0, #1
90007c2c:	e733      	b.n	90007a96 <HAL_I2C_Mem_Write+0x76>
      hi2c->XferSize = hi2c->XferCount;
90007c2e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
90007c30:	4812      	ldr	r0, [pc, #72]	; (90007c7c <HAL_I2C_Mem_Write+0x25c>)
      hi2c->XferSize = hi2c->XferCount;
90007c32:	b29b      	uxth	r3, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
90007c34:	b2d9      	uxtb	r1, r3
      hi2c->XferSize = hi2c->XferCount;
90007c36:	8523      	strh	r3, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
90007c38:	6853      	ldr	r3, [r2, #4]
90007c3a:	4003      	ands	r3, r0
90007c3c:	4333      	orrs	r3, r6
90007c3e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
90007c42:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
90007c46:	6053      	str	r3, [r2, #4]
}
90007c48:	e770      	b.n	90007b2c <HAL_I2C_Mem_Write+0x10c>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
90007c4a:	462a      	mov	r2, r5
90007c4c:	4639      	mov	r1, r7
90007c4e:	4620      	mov	r0, r4
90007c50:	f7ff fb34 	bl	900072bc <I2C_WaitOnSTOPFlagUntilTimeout>
90007c54:	2800      	cmp	r0, #0
90007c56:	d1e8      	bne.n	90007c2a <HAL_I2C_Mem_Write+0x20a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
90007c58:	6823      	ldr	r3, [r4, #0]
90007c5a:	2120      	movs	r1, #32
    I2C_RESET_CR2(hi2c);
90007c5c:	4d09      	ldr	r5, [pc, #36]	; (90007c84 <HAL_I2C_Mem_Write+0x264>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
90007c5e:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
90007c60:	685a      	ldr	r2, [r3, #4]
90007c62:	402a      	ands	r2, r5
90007c64:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
90007c66:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
90007c6a:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
90007c6e:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
90007c72:	e710      	b.n	90007a96 <HAL_I2C_Mem_Write+0x76>
90007c74:	fc009800 	.word	0xfc009800
90007c78:	01002000 	.word	0x01002000
90007c7c:	fc009c00 	.word	0xfc009c00
90007c80:	01ff0000 	.word	0x01ff0000
90007c84:	fe00e800 	.word	0xfe00e800

90007c88 <HAL_I2C_Mem_Read>:
{
90007c88:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
90007c8c:	461c      	mov	r4, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
90007c8e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
90007c92:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
  if (hi2c->State == HAL_I2C_STATE_READY)
90007c96:	2b20      	cmp	r3, #32
{
90007c98:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  if (hi2c->State == HAL_I2C_STATE_READY)
90007c9a:	d137      	bne.n	90007d0c <HAL_I2C_Mem_Read+0x84>
    if ((pData == NULL) || (Size == 0U))
90007c9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
90007c9e:	4683      	mov	fp, r0
90007ca0:	b36b      	cbz	r3, 90007cfe <HAL_I2C_Mem_Read+0x76>
90007ca2:	f1b9 0f00 	cmp.w	r9, #0
90007ca6:	d02a      	beq.n	90007cfe <HAL_I2C_Mem_Read+0x76>
    __HAL_LOCK(hi2c);
90007ca8:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
90007cac:	2b01      	cmp	r3, #1
90007cae:	d02d      	beq.n	90007d0c <HAL_I2C_Mem_Read+0x84>
90007cb0:	2301      	movs	r3, #1
90007cb2:	460f      	mov	r7, r1
90007cb4:	4690      	mov	r8, r2
90007cb6:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
90007cba:	f7fe fa7f 	bl	900061bc <HAL_GetTick>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
90007cbe:	f8db 3000 	ldr.w	r3, [fp]
    tickstart = HAL_GetTick();
90007cc2:	4606      	mov	r6, r0
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
90007cc4:	699a      	ldr	r2, [r3, #24]
90007cc6:	0410      	lsls	r0, r2, #16
90007cc8:	d523      	bpl.n	90007d12 <HAL_I2C_Mem_Read+0x8a>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
90007cca:	f7fe fa77 	bl	900061bc <HAL_GetTick>
90007cce:	1b80      	subs	r0, r0, r6
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
90007cd0:	f8db 3000 	ldr.w	r3, [fp]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
90007cd4:	2819      	cmp	r0, #25
90007cd6:	d9f5      	bls.n	90007cc4 <HAL_I2C_Mem_Read+0x3c>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
90007cd8:	699a      	ldr	r2, [r3, #24]
90007cda:	0411      	lsls	r1, r2, #16
90007cdc:	d5f2      	bpl.n	90007cc4 <HAL_I2C_Mem_Read+0x3c>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
90007cde:	f8db 3044 	ldr.w	r3, [fp, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
90007ce2:	2120      	movs	r1, #32
          hi2c->Mode = HAL_I2C_MODE_NONE;
90007ce4:	2200      	movs	r2, #0
      return HAL_ERROR;
90007ce6:	2001      	movs	r0, #1
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
90007ce8:	430b      	orrs	r3, r1
          __HAL_UNLOCK(hi2c);
90007cea:	f88b 2040 	strb.w	r2, [fp, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
90007cee:	f8cb 3044 	str.w	r3, [fp, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
90007cf2:	f88b 1041 	strb.w	r1, [fp, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
90007cf6:	f88b 2042 	strb.w	r2, [fp, #66]	; 0x42
}
90007cfa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
90007cfe:	f44f 7300 	mov.w	r3, #512	; 0x200
      return  HAL_ERROR;
90007d02:	2001      	movs	r0, #1
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
90007d04:	f8cb 3044 	str.w	r3, [fp, #68]	; 0x44
}
90007d08:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return HAL_BUSY;
90007d0c:	2002      	movs	r0, #2
}
90007d0e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hi2c->pBuffPtr  = pData;
90007d12:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
90007d14:	2122      	movs	r1, #34	; 0x22
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
90007d16:	f3c7 0709 	ubfx	r7, r7, #0, #10
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
90007d1a:	4658      	mov	r0, fp
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
90007d1c:	f88b 1041 	strb.w	r1, [fp, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
90007d20:	2140      	movs	r1, #64	; 0x40
    hi2c->pBuffPtr  = pData;
90007d22:	f8cb 2024 	str.w	r2, [fp, #36]	; 0x24
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
90007d26:	2200      	movs	r2, #0
    hi2c->Mode      = HAL_I2C_MODE_MEM;
90007d28:	f88b 1042 	strb.w	r1, [fp, #66]	; 0x42
    hi2c->XferISR   = NULL;
90007d2c:	f8cb 2034 	str.w	r2, [fp, #52]	; 0x34
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
90007d30:	f8cb 2044 	str.w	r2, [fp, #68]	; 0x44
  MODIFY_REG(hi2c->Instance->CR2, \
90007d34:	4983      	ldr	r1, [pc, #524]	; (90007f44 <HAL_I2C_Mem_Read+0x2bc>)
    hi2c->XferCount = Size;
90007d36:	f8ab 902a 	strh.w	r9, [fp, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
90007d3a:	685a      	ldr	r2, [r3, #4]
90007d3c:	400a      	ands	r2, r1
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
90007d3e:	b2e1      	uxtb	r1, r4
  MODIFY_REG(hi2c->Instance->CR2, \
90007d40:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
90007d44:	4629      	mov	r1, r5
  MODIFY_REG(hi2c->Instance->CR2, \
90007d46:	433a      	orrs	r2, r7
90007d48:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
90007d4c:	605a      	str	r2, [r3, #4]
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
90007d4e:	4632      	mov	r2, r6
90007d50:	f7ff f9fe 	bl	90007150 <I2C_WaitOnTXISFlagUntilTimeout>
90007d54:	2800      	cmp	r0, #0
90007d56:	f040 8091 	bne.w	90007e7c <HAL_I2C_Mem_Read+0x1f4>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
90007d5a:	2c01      	cmp	r4, #1
90007d5c:	d00c      	beq.n	90007d78 <HAL_I2C_Mem_Read+0xf0>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
90007d5e:	ea4f 2218 	mov.w	r2, r8, lsr #8
90007d62:	f8db 3000 	ldr.w	r3, [fp]
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
90007d66:	4629      	mov	r1, r5
90007d68:	4658      	mov	r0, fp
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
90007d6a:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
90007d6c:	4632      	mov	r2, r6
90007d6e:	f7ff f9ef 	bl	90007150 <I2C_WaitOnTXISFlagUntilTimeout>
90007d72:	2800      	cmp	r0, #0
90007d74:	f040 8082 	bne.w	90007e7c <HAL_I2C_Mem_Read+0x1f4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
90007d78:	fa5f f388 	uxtb.w	r3, r8
90007d7c:	f8db 4000 	ldr.w	r4, [fp]
90007d80:	62a3      	str	r3, [r4, #40]	; 0x28
90007d82:	1c6a      	adds	r2, r5, #1
90007d84:	d160      	bne.n	90007e48 <HAL_I2C_Mem_Read+0x1c0>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
90007d86:	69a3      	ldr	r3, [r4, #24]
90007d88:	065b      	lsls	r3, r3, #25
90007d8a:	d5fc      	bpl.n	90007d86 <HAL_I2C_Mem_Read+0xfe>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
90007d8c:	f8bb 302a 	ldrh.w	r3, [fp, #42]	; 0x2a
90007d90:	b29b      	uxth	r3, r3
90007d92:	2bff      	cmp	r3, #255	; 0xff
90007d94:	f240 80ae 	bls.w	90007ef4 <HAL_I2C_Mem_Read+0x26c>
  MODIFY_REG(hi2c->Instance->CR2, \
90007d98:	6863      	ldr	r3, [r4, #4]
90007d9a:	4a6a      	ldr	r2, [pc, #424]	; (90007f44 <HAL_I2C_Mem_Read+0x2bc>)
90007d9c:	4013      	ands	r3, r2
90007d9e:	4a6a      	ldr	r2, [pc, #424]	; (90007f48 <HAL_I2C_Mem_Read+0x2c0>)
90007da0:	433b      	orrs	r3, r7
90007da2:	431a      	orrs	r2, r3
      hi2c->XferSize = MAX_NBYTE_SIZE;
90007da4:	23ff      	movs	r3, #255	; 0xff
90007da6:	f8ab 3028 	strh.w	r3, [fp, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
90007daa:	6062      	str	r2, [r4, #4]
90007dac:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 90007f54 <HAL_I2C_Mem_Read+0x2cc>
          hi2c->XferSize = MAX_NBYTE_SIZE;
90007db0:	f04f 0aff 	mov.w	sl, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2, \
90007db4:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 90007f58 <HAL_I2C_Mem_Read+0x2d0>
90007db8:	1c69      	adds	r1, r5, #1
90007dba:	d127      	bne.n	90007e0c <HAL_I2C_Mem_Read+0x184>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
90007dbc:	69a3      	ldr	r3, [r4, #24]
90007dbe:	075a      	lsls	r2, r3, #29
90007dc0:	d5fc      	bpl.n	90007dbc <HAL_I2C_Mem_Read+0x134>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
90007dc2:	6a62      	ldr	r2, [r4, #36]	; 0x24
90007dc4:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
90007dc8:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
90007dca:	f8bb 202a 	ldrh.w	r2, [fp, #42]	; 0x2a
      hi2c->pBuffPtr++;
90007dce:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
      hi2c->XferCount--;
90007dd2:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
90007dd4:	3301      	adds	r3, #1
      hi2c->XferCount--;
90007dd6:	b292      	uxth	r2, r2
      hi2c->pBuffPtr++;
90007dd8:	f8cb 3024 	str.w	r3, [fp, #36]	; 0x24
      hi2c->XferSize--;
90007ddc:	f8bb 3028 	ldrh.w	r3, [fp, #40]	; 0x28
      hi2c->XferCount--;
90007de0:	f8ab 202a 	strh.w	r2, [fp, #42]	; 0x2a
      hi2c->XferSize--;
90007de4:	3b01      	subs	r3, #1
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
90007de6:	f8bb 202a 	ldrh.w	r2, [fp, #42]	; 0x2a
      hi2c->XferSize--;
90007dea:	b29b      	uxth	r3, r3
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
90007dec:	b292      	uxth	r2, r2
      hi2c->XferSize--;
90007dee:	f8ab 3028 	strh.w	r3, [fp, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
90007df2:	b10a      	cbz	r2, 90007df8 <HAL_I2C_Mem_Read+0x170>
90007df4:	2b00      	cmp	r3, #0
90007df6:	d046      	beq.n	90007e86 <HAL_I2C_Mem_Read+0x1fe>
    } while (hi2c->XferCount > 0U);
90007df8:	f8bb 302a 	ldrh.w	r3, [fp, #42]	; 0x2a
90007dfc:	b29b      	uxth	r3, r3
90007dfe:	2b00      	cmp	r3, #0
90007e00:	f000 8088 	beq.w	90007f14 <HAL_I2C_Mem_Read+0x28c>
90007e04:	1c69      	adds	r1, r5, #1
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
90007e06:	f8db 4000 	ldr.w	r4, [fp]
90007e0a:	d0d7      	beq.n	90007dbc <HAL_I2C_Mem_Read+0x134>
90007e0c:	69a3      	ldr	r3, [r4, #24]
90007e0e:	075b      	lsls	r3, r3, #29
90007e10:	d4d7      	bmi.n	90007dc2 <HAL_I2C_Mem_Read+0x13a>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
90007e12:	f7fe f9d3 	bl	900061bc <HAL_GetTick>
90007e16:	1b80      	subs	r0, r0, r6
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
90007e18:	f8db 4000 	ldr.w	r4, [fp]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
90007e1c:	4285      	cmp	r5, r0
90007e1e:	d301      	bcc.n	90007e24 <HAL_I2C_Mem_Read+0x19c>
90007e20:	2d00      	cmp	r5, #0
90007e22:	d1c9      	bne.n	90007db8 <HAL_I2C_Mem_Read+0x130>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
90007e24:	69a3      	ldr	r3, [r4, #24]
90007e26:	f013 0304 	ands.w	r3, r3, #4
90007e2a:	d1c5      	bne.n	90007db8 <HAL_I2C_Mem_Read+0x130>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
90007e2c:	f8db 2044 	ldr.w	r2, [fp, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
90007e30:	2120      	movs	r1, #32
          return HAL_ERROR;
90007e32:	2001      	movs	r0, #1
          __HAL_UNLOCK(hi2c);
90007e34:	f88b 3040 	strb.w	r3, [fp, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
90007e38:	430a      	orrs	r2, r1
90007e3a:	f8cb 2044 	str.w	r2, [fp, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
90007e3e:	f88b 1041 	strb.w	r1, [fp, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
90007e42:	f88b 3042 	strb.w	r3, [fp, #66]	; 0x42
          return HAL_ERROR;
90007e46:	e75f      	b.n	90007d08 <HAL_I2C_Mem_Read+0x80>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
90007e48:	69a3      	ldr	r3, [r4, #24]
90007e4a:	0658      	lsls	r0, r3, #25
90007e4c:	d49e      	bmi.n	90007d8c <HAL_I2C_Mem_Read+0x104>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
90007e4e:	f7fe f9b5 	bl	900061bc <HAL_GetTick>
90007e52:	1b80      	subs	r0, r0, r6
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
90007e54:	f8db 4000 	ldr.w	r4, [fp]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
90007e58:	4285      	cmp	r5, r0
90007e5a:	d301      	bcc.n	90007e60 <HAL_I2C_Mem_Read+0x1d8>
90007e5c:	2d00      	cmp	r5, #0
90007e5e:	d190      	bne.n	90007d82 <HAL_I2C_Mem_Read+0xfa>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
90007e60:	69a3      	ldr	r3, [r4, #24]
90007e62:	f013 0340 	ands.w	r3, r3, #64	; 0x40
90007e66:	d18c      	bne.n	90007d82 <HAL_I2C_Mem_Read+0xfa>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
90007e68:	f8db 2044 	ldr.w	r2, [fp, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
90007e6c:	2120      	movs	r1, #32
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
90007e6e:	430a      	orrs	r2, r1
90007e70:	f8cb 2044 	str.w	r2, [fp, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
90007e74:	f88b 1041 	strb.w	r1, [fp, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
90007e78:	f88b 3042 	strb.w	r3, [fp, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
90007e7c:	2300      	movs	r3, #0
      return HAL_ERROR;
90007e7e:	2001      	movs	r0, #1
      __HAL_UNLOCK(hi2c);
90007e80:	f88b 3040 	strb.w	r3, [fp, #64]	; 0x40
      return HAL_ERROR;
90007e84:	e740      	b.n	90007d08 <HAL_I2C_Mem_Read+0x80>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
90007e86:	f8db 2000 	ldr.w	r2, [fp]
90007e8a:	1c68      	adds	r0, r5, #1
90007e8c:	d111      	bne.n	90007eb2 <HAL_I2C_Mem_Read+0x22a>
90007e8e:	6993      	ldr	r3, [r2, #24]
90007e90:	0619      	lsls	r1, r3, #24
90007e92:	d5fc      	bpl.n	90007e8e <HAL_I2C_Mem_Read+0x206>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
90007e94:	f8bb 302a 	ldrh.w	r3, [fp, #42]	; 0x2a
90007e98:	b29b      	uxth	r3, r3
90007e9a:	2bff      	cmp	r3, #255	; 0xff
90007e9c:	d91a      	bls.n	90007ed4 <HAL_I2C_Mem_Read+0x24c>
  MODIFY_REG(hi2c->Instance->CR2, \
90007e9e:	6853      	ldr	r3, [r2, #4]
          hi2c->XferSize = MAX_NBYTE_SIZE;
90007ea0:	f8ab a028 	strh.w	sl, [fp, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
90007ea4:	ea03 0308 	and.w	r3, r3, r8
90007ea8:	433b      	orrs	r3, r7
90007eaa:	ea43 0309 	orr.w	r3, r3, r9
90007eae:	6053      	str	r3, [r2, #4]
}
90007eb0:	e7a2      	b.n	90007df8 <HAL_I2C_Mem_Read+0x170>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
90007eb2:	6993      	ldr	r3, [r2, #24]
90007eb4:	061b      	lsls	r3, r3, #24
90007eb6:	d4ed      	bmi.n	90007e94 <HAL_I2C_Mem_Read+0x20c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
90007eb8:	f7fe f980 	bl	900061bc <HAL_GetTick>
90007ebc:	1b80      	subs	r0, r0, r6
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
90007ebe:	f8db 2000 	ldr.w	r2, [fp]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
90007ec2:	4285      	cmp	r5, r0
90007ec4:	d301      	bcc.n	90007eca <HAL_I2C_Mem_Read+0x242>
90007ec6:	2d00      	cmp	r5, #0
90007ec8:	d1df      	bne.n	90007e8a <HAL_I2C_Mem_Read+0x202>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
90007eca:	6993      	ldr	r3, [r2, #24]
90007ecc:	f013 0380 	ands.w	r3, r3, #128	; 0x80
90007ed0:	d1db      	bne.n	90007e8a <HAL_I2C_Mem_Read+0x202>
90007ed2:	e7ab      	b.n	90007e2c <HAL_I2C_Mem_Read+0x1a4>
          hi2c->XferSize = hi2c->XferCount;
90007ed4:	f8bb 302a 	ldrh.w	r3, [fp, #42]	; 0x2a
90007ed8:	b29b      	uxth	r3, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
90007eda:	b2d9      	uxtb	r1, r3
          hi2c->XferSize = hi2c->XferCount;
90007edc:	f8ab 3028 	strh.w	r3, [fp, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
90007ee0:	6853      	ldr	r3, [r2, #4]
90007ee2:	ea03 0308 	and.w	r3, r3, r8
90007ee6:	433b      	orrs	r3, r7
90007ee8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
90007eec:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
90007ef0:	6053      	str	r3, [r2, #4]
}
90007ef2:	e781      	b.n	90007df8 <HAL_I2C_Mem_Read+0x170>
      hi2c->XferSize = hi2c->XferCount;
90007ef4:	f8bb 302a 	ldrh.w	r3, [fp, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
90007ef8:	4912      	ldr	r1, [pc, #72]	; (90007f44 <HAL_I2C_Mem_Read+0x2bc>)
      hi2c->XferSize = hi2c->XferCount;
90007efa:	b29b      	uxth	r3, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
90007efc:	b2da      	uxtb	r2, r3
      hi2c->XferSize = hi2c->XferCount;
90007efe:	f8ab 3028 	strh.w	r3, [fp, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
90007f02:	6863      	ldr	r3, [r4, #4]
90007f04:	400b      	ands	r3, r1
90007f06:	433b      	orrs	r3, r7
90007f08:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
90007f0c:	4a0f      	ldr	r2, [pc, #60]	; (90007f4c <HAL_I2C_Mem_Read+0x2c4>)
90007f0e:	431a      	orrs	r2, r3
90007f10:	6062      	str	r2, [r4, #4]
}
90007f12:	e74b      	b.n	90007dac <HAL_I2C_Mem_Read+0x124>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
90007f14:	4632      	mov	r2, r6
90007f16:	4629      	mov	r1, r5
90007f18:	4658      	mov	r0, fp
90007f1a:	f7ff f9cf 	bl	900072bc <I2C_WaitOnSTOPFlagUntilTimeout>
90007f1e:	b970      	cbnz	r0, 90007f3e <HAL_I2C_Mem_Read+0x2b6>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
90007f20:	f8db 3000 	ldr.w	r3, [fp]
90007f24:	2120      	movs	r1, #32
    I2C_RESET_CR2(hi2c);
90007f26:	4c0a      	ldr	r4, [pc, #40]	; (90007f50 <HAL_I2C_Mem_Read+0x2c8>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
90007f28:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
90007f2a:	685a      	ldr	r2, [r3, #4]
90007f2c:	4022      	ands	r2, r4
90007f2e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
90007f30:	f88b 1041 	strb.w	r1, [fp, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
90007f34:	f88b 0040 	strb.w	r0, [fp, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
90007f38:	f88b 0042 	strb.w	r0, [fp, #66]	; 0x42
    return HAL_OK;
90007f3c:	e6e4      	b.n	90007d08 <HAL_I2C_Mem_Read+0x80>
      return HAL_ERROR;
90007f3e:	2001      	movs	r0, #1
90007f40:	e6e2      	b.n	90007d08 <HAL_I2C_Mem_Read+0x80>
90007f42:	bf00      	nop
90007f44:	fc009800 	.word	0xfc009800
90007f48:	01ff2400 	.word	0x01ff2400
90007f4c:	02002400 	.word	0x02002400
90007f50:	fe00e800 	.word	0xfe00e800
90007f54:	fc009c00 	.word	0xfc009c00
90007f58:	01ff0000 	.word	0x01ff0000

90007f5c <HAL_I2C_GetState>:
  return hi2c->State;
90007f5c:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
}
90007f60:	4770      	bx	lr
90007f62:	bf00      	nop

90007f64 <HAL_I2C_GetError>:
  return hi2c->ErrorCode;
90007f64:	6c40      	ldr	r0, [r0, #68]	; 0x44
}
90007f66:	4770      	bx	lr

90007f68 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
90007f68:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
90007f6c:	2a20      	cmp	r2, #32
90007f6e:	d123      	bne.n	90007fb8 <HAL_I2CEx_ConfigAnalogFilter+0x50>
90007f70:	fa5f fc82 	uxtb.w	ip, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
90007f74:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
90007f78:	4603      	mov	r3, r0
90007f7a:	2a01      	cmp	r2, #1
90007f7c:	d01c      	beq.n	90007fb8 <HAL_I2CEx_ConfigAnalogFilter+0x50>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
90007f7e:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
90007f80:	2024      	movs	r0, #36	; 0x24
{
90007f82:	b500      	push	{lr}
    hi2c->State = HAL_I2C_STATE_BUSY;
90007f84:	f883 0041 	strb.w	r0, [r3, #65]	; 0x41
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
90007f88:	f04f 0e00 	mov.w	lr, #0
    __HAL_I2C_DISABLE(hi2c);
90007f8c:	6810      	ldr	r0, [r2, #0]
90007f8e:	f020 0001 	bic.w	r0, r0, #1
90007f92:	6010      	str	r0, [r2, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
90007f94:	6810      	ldr	r0, [r2, #0]
90007f96:	f420 5080 	bic.w	r0, r0, #4096	; 0x1000
90007f9a:	6010      	str	r0, [r2, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
90007f9c:	6810      	ldr	r0, [r2, #0]
90007f9e:	4301      	orrs	r1, r0

    return HAL_OK;
90007fa0:	4670      	mov	r0, lr
    hi2c->Instance->CR1 |= AnalogFilter;
90007fa2:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
90007fa4:	6811      	ldr	r1, [r2, #0]
90007fa6:	f041 0101 	orr.w	r1, r1, #1
90007faa:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
90007fac:	f883 c041 	strb.w	ip, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
90007fb0:	f883 e040 	strb.w	lr, [r3, #64]	; 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
90007fb4:	f85d fb04 	ldr.w	pc, [sp], #4
    return HAL_BUSY;
90007fb8:	2002      	movs	r0, #2
}
90007fba:	4770      	bx	lr

90007fbc <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
90007fbc:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
90007fc0:	2a20      	cmp	r2, #32
90007fc2:	d122      	bne.n	9000800a <HAL_I2CEx_ConfigDigitalFilter+0x4e>
90007fc4:	4603      	mov	r3, r0
{
90007fc6:	b500      	push	{lr}
90007fc8:	fa5f fe82 	uxtb.w	lr, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
90007fcc:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
90007fd0:	2a01      	cmp	r2, #1
90007fd2:	d01c      	beq.n	9000800e <HAL_I2CEx_ConfigDigitalFilter+0x52>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
90007fd4:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
90007fd6:	2024      	movs	r0, #36	; 0x24
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
90007fd8:	f04f 0c00 	mov.w	ip, #0
    hi2c->State = HAL_I2C_STATE_BUSY;
90007fdc:	f883 0041 	strb.w	r0, [r3, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
90007fe0:	6810      	ldr	r0, [r2, #0]
90007fe2:	f020 0001 	bic.w	r0, r0, #1
90007fe6:	6010      	str	r0, [r2, #0]
    tmpreg = hi2c->Instance->CR1;
90007fe8:	6810      	ldr	r0, [r2, #0]
    tmpreg &= ~(I2C_CR1_DNF);
90007fea:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
    tmpreg |= DigitalFilter << 8U;
90007fee:	ea40 2101 	orr.w	r1, r0, r1, lsl #8

    return HAL_OK;
90007ff2:	4660      	mov	r0, ip
    hi2c->Instance->CR1 = tmpreg;
90007ff4:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
90007ff6:	6811      	ldr	r1, [r2, #0]
90007ff8:	f041 0101 	orr.w	r1, r1, #1
90007ffc:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
90007ffe:	f883 e041 	strb.w	lr, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
90008002:	f883 c040 	strb.w	ip, [r3, #64]	; 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
90008006:	f85d fb04 	ldr.w	pc, [sp], #4
    return HAL_BUSY;
9000800a:	2002      	movs	r0, #2
}
9000800c:	4770      	bx	lr
    return HAL_BUSY;
9000800e:	2002      	movs	r0, #2
}
90008010:	f85d fb04 	ldr.w	pc, [sp], #4

90008014 <JPEG_Bits_To_SizeCodes>:
  * @param  Huffcode pointer to codes table
  * @param  LastK pointer to last Coeff (table dimension)
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Bits_To_SizeCodes(uint8_t *Bits, uint8_t *Huffsize, uint32_t *Huffcode, uint32_t *LastK)
{
90008014:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
90008018:	460d      	mov	r5, r1
9000801a:	4614      	mov	r4, r2
9000801c:	469a      	mov	sl, r3

  /* Figure C.1: Generation of table of Huffman code sizes */
  p = 0;
  for (l = 0; l < 16UL; l++)
  {
    i = (uint32_t)Bits[l];
9000801e:	7806      	ldrb	r6, [r0, #0]
    if ((p + i) > 256UL)
90008020:	4681      	mov	r9, r0
    i = (uint32_t)Bits[l];
90008022:	2701      	movs	r7, #1
  p = 0;
90008024:	f04f 0800 	mov.w	r8, #0
90008028:	e006      	b.n	90008038 <JPEG_Bits_To_SizeCodes+0x24>
    i = (uint32_t)Bits[l];
9000802a:	f819 6f01 	ldrb.w	r6, [r9, #1]!
    if ((p + i) > 256UL)
9000802e:	eb06 0308 	add.w	r3, r6, r8
90008032:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
90008036:	d837      	bhi.n	900080a8 <JPEG_Bits_To_SizeCodes+0x94>
      /* check for table overflow */
      return HAL_ERROR;
    }
    while (i != 0UL)
    {
      Huffsize[p] = (uint8_t) l + 1U;
90008038:	eb05 0008 	add.w	r0, r5, r8
9000803c:	4632      	mov	r2, r6
9000803e:	4639      	mov	r1, r7
    while (i != 0UL)
90008040:	b116      	cbz	r6, 90008048 <JPEG_Bits_To_SizeCodes+0x34>
      p++;
90008042:	44b0      	add	r8, r6
      Huffsize[p] = (uint8_t) l + 1U;
90008044:	f01c fb2c 	bl	900246a0 <memset>
  for (l = 0; l < 16UL; l++)
90008048:	2f10      	cmp	r7, #16
    if ((p + i) > 256UL)
9000804a:	f107 0701 	add.w	r7, r7, #1
  for (l = 0; l < 16UL; l++)
9000804e:	d1ec      	bne.n	9000802a <JPEG_Bits_To_SizeCodes+0x16>
      i--;
    }
  }
  Huffsize[p] = 0;
90008050:	2300      	movs	r3, #0
90008052:	f805 3008 	strb.w	r3, [r5, r8]
  *LastK = p;
90008056:	f8ca 8000 	str.w	r8, [sl]

  /* Figure C.2: Generation of table of Huffman codes */
  code = 0;
  si = Huffsize[0];
9000805a:	7828      	ldrb	r0, [r5, #0]
9000805c:	4601      	mov	r1, r0
  p = 0;
  while (Huffsize[p] != 0U)
9000805e:	b300      	cbz	r0, 900080a2 <JPEG_Bits_To_SizeCodes+0x8e>
90008060:	f06f 4840 	mvn.w	r8, #3221225472	; 0xc0000000
    /* code must fit in "size" bits (si), no code is allowed to be all ones*/
    if(si > 31UL)
    {
      return HAL_ERROR;
    }
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
90008064:	2701      	movs	r7, #1
  p = 0;
90008066:	461a      	mov	r2, r3
    while (((uint32_t) Huffsize[p]) == si)
90008068:	4288      	cmp	r0, r1
9000806a:	d10f      	bne.n	9000808c <JPEG_Bits_To_SizeCodes+0x78>
9000806c:	eb02 0008 	add.w	r0, r2, r8
90008070:	1c56      	adds	r6, r2, #1
90008072:	eb05 0c02 	add.w	ip, r5, r2
90008076:	eb04 0080 	add.w	r0, r4, r0, lsl #2
9000807a:	1af6      	subs	r6, r6, r3
      Huffcode[p] = code;
9000807c:	f840 3f04 	str.w	r3, [r0, #4]!
      p++;
90008080:	18f2      	adds	r2, r6, r3
    while (((uint32_t) Huffsize[p]) == si)
90008082:	f81c ef01 	ldrb.w	lr, [ip, #1]!
      code++;
90008086:	3301      	adds	r3, #1
    while (((uint32_t) Huffsize[p]) == si)
90008088:	458e      	cmp	lr, r1
9000808a:	d0f7      	beq.n	9000807c <JPEG_Bits_To_SizeCodes+0x68>
    if(si > 31UL)
9000808c:	291f      	cmp	r1, #31
9000808e:	d80b      	bhi.n	900080a8 <JPEG_Bits_To_SizeCodes+0x94>
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
90008090:	fa07 f001 	lsl.w	r0, r7, r1
90008094:	4298      	cmp	r0, r3
90008096:	d907      	bls.n	900080a8 <JPEG_Bits_To_SizeCodes+0x94>
  while (Huffsize[p] != 0U)
90008098:	5ca8      	ldrb	r0, [r5, r2]
    {
      return HAL_ERROR;
    }
    code <<= 1;
9000809a:	005b      	lsls	r3, r3, #1
    si++;
9000809c:	3101      	adds	r1, #1
  while (Huffsize[p] != 0U)
9000809e:	2800      	cmp	r0, #0
900080a0:	d1e2      	bne.n	90008068 <JPEG_Bits_To_SizeCodes+0x54>
  }
  /* Return function status */
  return HAL_OK;
900080a2:	2000      	movs	r0, #0
}
900080a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      return HAL_ERROR;
900080a8:	2001      	movs	r0, #1
}
900080aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
900080ae:	bf00      	nop

900080b0 <JPEG_DCHuff_BitsVals_To_SizeCodes>:
  * @param  DC_SizeCodesTable pointer to DC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_DCHuff_BitsVals_To_SizeCodes(JPEG_DCHuffTableTypeDef *DC_BitsValsTable,
                                                           JPEG_DC_HuffCodeTableTypeDef *DC_SizeCodesTable)
{
900080b0:	b5f0      	push	{r4, r5, r6, r7, lr}
900080b2:	f2ad 5d14 	subw	sp, sp, #1300	; 0x514
900080b6:	460d      	mov	r5, r1
900080b8:	4604      	mov	r4, r0
  uint32_t k;
  uint32_t l;
  uint32_t lastK;
  uint8_t huffsize[257];
  uint32_t huffcode[257];
  error = JPEG_Bits_To_SizeCodes(DC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
900080ba:	ab01      	add	r3, sp, #4
900080bc:	aa43      	add	r2, sp, #268	; 0x10c
900080be:	a902      	add	r1, sp, #8
900080c0:	f7ff ffa8 	bl	90008014 <JPEG_Bits_To_SizeCodes>
  if (error != HAL_OK)
900080c4:	b9d0      	cbnz	r0, 900080fc <JPEG_DCHuff_BitsVals_To_SizeCodes+0x4c>
    return  error;
  }
  /* Figure C.3: ordering procedure for encoding procedure code tables */
  k = 0;

  while (k < lastK)
900080c6:	9f01      	ldr	r7, [sp, #4]
900080c8:	b1c7      	cbz	r7, 900080fc <JPEG_DCHuff_BitsVals_To_SizeCodes+0x4c>
900080ca:	370f      	adds	r7, #15
900080cc:	f50d 7e86 	add.w	lr, sp, #268	; 0x10c
900080d0:	a902      	add	r1, sp, #8
900080d2:	f104 0c0f 	add.w	ip, r4, #15
900080d6:	4427      	add	r7, r4
900080d8:	e009      	b.n	900080ee <JPEG_DCHuff_BitsVals_To_SizeCodes+0x3e>
      return HAL_ERROR; /* Huffman Table overflow error*/
    }
    else
    {
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
      DC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
900080da:	f811 2b01 	ldrb.w	r2, [r1], #1
  while (k < lastK)
900080de:	45bc      	cmp	ip, r7
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
900080e0:	f85e 6b04 	ldr.w	r6, [lr], #4
      DC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
900080e4:	f102 32ff 	add.w	r2, r2, #4294967295
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
900080e8:	60e6      	str	r6, [r4, #12]
      DC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
900080ea:	54ea      	strb	r2, [r5, r3]
  while (k < lastK)
900080ec:	d006      	beq.n	900080fc <JPEG_DCHuff_BitsVals_To_SizeCodes+0x4c>
    l = DC_BitsValsTable->HuffVal[k];
900080ee:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
    if (l >= JPEG_DC_HUFF_TABLE_SIZE)
900080f2:	2b0b      	cmp	r3, #11
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
900080f4:	eb05 0483 	add.w	r4, r5, r3, lsl #2
    if (l >= JPEG_DC_HUFF_TABLE_SIZE)
900080f8:	d9ef      	bls.n	900080da <JPEG_DCHuff_BitsVals_To_SizeCodes+0x2a>
      return HAL_ERROR; /* Huffman Table overflow error*/
900080fa:	2001      	movs	r0, #1
    }
  }

  /* Return function status */
  return HAL_OK;
}
900080fc:	f20d 5d14 	addw	sp, sp, #1300	; 0x514
90008100:	bdf0      	pop	{r4, r5, r6, r7, pc}
90008102:	bf00      	nop

90008104 <JPEG_Set_HuffDC_Mem>:
  * @param  DCTableAddress Encoder DC huffman table address it could be HUFFENC_DC0 or HUFFENC_DC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffDC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_DCHuffTableTypeDef *HuffTableDC,
                                             const __IO uint32_t *DCTableAddress)
{
90008104:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t i;
  uint32_t lsb;
  uint32_t msb;
  __IO uint32_t *address, *addressDef;

  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
90008108:	6804      	ldr	r4, [r0, #0]
{
9000810a:	b093      	sub	sp, #76	; 0x4c
9000810c:	4608      	mov	r0, r1
  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
9000810e:	f504 63f8 	add.w	r3, r4, #1984	; 0x7c0
90008112:	429a      	cmp	r2, r3
90008114:	f000 809d 	beq.w	90008252 <JPEG_Set_HuffDC_Mem+0x14e>
  {
    address = (hjpeg->Instance->HUFFENC_DC0 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
  }
  else if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC1))
90008118:	f504 63fc 	add.w	r3, r4, #2016	; 0x7e0
9000811c:	429a      	cmp	r2, r3
9000811e:	d003      	beq.n	90008128 <JPEG_Set_HuffDC_Mem+0x24>
  {
    address = (hjpeg->Instance->HUFFENC_DC1 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
  }
  else
  {
    return HAL_ERROR;
90008120:	2001      	movs	r0, #1
    }
  }

  /* Return function status */
  return HAL_OK;
}
90008122:	b013      	add	sp, #76	; 0x4c
90008124:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    address = (hjpeg->Instance->HUFFENC_DC1 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
90008128:	f504 64ff 	add.w	r4, r4, #2040	; 0x7f8
    error = JPEG_DCHuff_BitsVals_To_SizeCodes(HuffTableDC, &dcSizeCodesTable);
9000812c:	a903      	add	r1, sp, #12
9000812e:	f7ff ffbf 	bl	900080b0 <JPEG_DCHuff_BitsVals_To_SizeCodes>
    if (error != HAL_OK)
90008132:	2800      	cmp	r0, #0
90008134:	d1f5      	bne.n	90008122 <JPEG_Set_HuffDC_Mem+0x1e>
    *addressDef = 0x0FFF0FFF;
90008136:	f06f 23f0 	mvn.w	r3, #4026593280	; 0xf000f000
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000813a:	f89d a017 	ldrb.w	sl, [sp, #23]
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000813e:	f89d e016 	ldrb.w	lr, [sp, #22]
    *addressDef = 0x0FFF0FFF;
90008142:	6023      	str	r3, [r4, #0]
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008144:	ea4f 2a0a 	mov.w	sl, sl, lsl #8
    *addressDef = 0x0FFF0FFF;
90008148:	6063      	str	r3, [r4, #4]
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000814a:	ea4f 2e0e 	mov.w	lr, lr, lsl #8
9000814e:	f89d 300e 	ldrb.w	r3, [sp, #14]
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008152:	f40a 6a70 	and.w	sl, sl, #3840	; 0xf00
90008156:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000815a:	f40e 6e70 	and.w	lr, lr, #3840	; 0xf00
9000815e:	021b      	lsls	r3, r3, #8
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008160:	f89d 9015 	ldrb.w	r9, [sp, #21]
90008164:	ea4a 0a02 	orr.w	sl, sl, r2
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008168:	f89d c014 	ldrb.w	ip, [sp, #20]
9000816c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008170:	ea4f 2909 	mov.w	r9, r9, lsl #8
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008174:	ea4f 2c0c 	mov.w	ip, ip, lsl #8
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008178:	f89d 8013 	ldrb.w	r8, [sp, #19]
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000817c:	9301      	str	r3, [sp, #4]
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000817e:	f409 6970 	and.w	r9, r9, #3840	; 0xf00
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008182:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
90008186:	f40c 6c70 	and.w	ip, ip, #3840	; 0xf00
9000818a:	f89d 1012 	ldrb.w	r1, [sp, #18]
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000818e:	ea4f 2808 	mov.w	r8, r8, lsl #8
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008192:	ea4e 0e03 	orr.w	lr, lr, r3
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008196:	f89d 7011 	ldrb.w	r7, [sp, #17]
9000819a:	f408 6870 	and.w	r8, r8, #3840	; 0xf00
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000819e:	0209      	lsls	r1, r1, #8
      *address = lsb | (msb << 16);
900081a0:	ea4e 4e0a 	orr.w	lr, lr, sl, lsl #16
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
900081a4:	f89d 2010 	ldrb.w	r2, [sp, #16]
900081a8:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
900081ac:	023f      	lsls	r7, r7, #8
      *address = lsb | (msb << 16);
900081ae:	f844 ec04 	str.w	lr, [r4, #-4]
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
900081b2:	0212      	lsls	r2, r2, #8
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
900081b4:	f89d e03c 	ldrb.w	lr, [sp, #60]	; 0x3c
900081b8:	f407 6770 	and.w	r7, r7, #3840	; 0xf00
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
900081bc:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
900081c0:	f89d 600f 	ldrb.w	r6, [sp, #15]
900081c4:	ea49 090e 	orr.w	r9, r9, lr
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
900081c8:	f89d e038 	ldrb.w	lr, [sp, #56]	; 0x38
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
900081cc:	0236      	lsls	r6, r6, #8
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
900081ce:	9b01      	ldr	r3, [sp, #4]
900081d0:	ea4c 0c0e 	orr.w	ip, ip, lr
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
900081d4:	f89d 500d 	ldrb.w	r5, [sp, #13]
900081d8:	f406 6670 	and.w	r6, r6, #3840	; 0xf00
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
900081dc:	f89d b00c 	ldrb.w	fp, [sp, #12]
      *address = lsb | (msb << 16);
900081e0:	ea4c 4c09 	orr.w	ip, ip, r9, lsl #16
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
900081e4:	022d      	lsls	r5, r5, #8
      *address = lsb | (msb << 16);
900081e6:	f844 cc08 	str.w	ip, [r4, #-8]
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
900081ea:	ea4f 2b0b 	mov.w	fp, fp, lsl #8
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
900081ee:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
900081f2:	f405 6570 	and.w	r5, r5, #3840	; 0xf00
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
900081f6:	f40b 6b70 	and.w	fp, fp, #3840	; 0xf00
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
900081fa:	ea48 080c 	orr.w	r8, r8, ip
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
900081fe:	f89d c030 	ldrb.w	ip, [sp, #48]	; 0x30
90008202:	ea41 010c 	orr.w	r1, r1, ip
      *address = lsb | (msb << 16);
90008206:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
9000820a:	f844 1c0c 	str.w	r1, [r4, #-12]
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000820e:	f89d 102c 	ldrb.w	r1, [sp, #44]	; 0x2c
90008212:	430f      	orrs	r7, r1
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008214:	f89d 1028 	ldrb.w	r1, [sp, #40]	; 0x28
90008218:	430a      	orrs	r2, r1
      *address = lsb | (msb << 16);
9000821a:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
9000821e:	f844 2c10 	str.w	r2, [r4, #-16]
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008222:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
90008226:	4316      	orrs	r6, r2
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008228:	f89d 2020 	ldrb.w	r2, [sp, #32]
9000822c:	4313      	orrs	r3, r2
      *address = lsb | (msb << 16);
9000822e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
90008232:	f844 3c14 	str.w	r3, [r4, #-20]
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008236:	f89d 301c 	ldrb.w	r3, [sp, #28]
9000823a:	431d      	orrs	r5, r3
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000823c:	f89d 3018 	ldrb.w	r3, [sp, #24]
90008240:	ea4b 0303 	orr.w	r3, fp, r3
      *address = lsb | (msb << 16);
90008244:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
90008248:	f844 3c18 	str.w	r3, [r4, #-24]
}
9000824c:	b013      	add	sp, #76	; 0x4c
9000824e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    address = (hjpeg->Instance->HUFFENC_DC0 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
90008252:	f504 64fb 	add.w	r4, r4, #2008	; 0x7d8
90008256:	e769      	b.n	9000812c <JPEG_Set_HuffDC_Mem+0x28>

90008258 <JPEG_Set_HuffAC_Mem>:
  * @param  ACTableAddress Encoder AC huffman table address it could be HUFFENC_AC0 or HUFFENC_AC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffAC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_ACHuffTableTypeDef *HuffTableAC,
                                             const __IO uint32_t *ACTableAddress)
{
90008258:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  HAL_StatusTypeDef error;
  JPEG_AC_HuffCodeTableTypeDef acSizeCodesTable;
  uint32_t i, lsb, msb;
  __IO uint32_t *address, *addressDef;

  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
9000825c:	6804      	ldr	r4, [r0, #0]
{
9000825e:	f6ad 0d3c 	subw	sp, sp, #2108	; 0x83c
90008262:	460d      	mov	r5, r1
  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
90008264:	f504 63a0 	add.w	r3, r4, #1280	; 0x500
90008268:	429a      	cmp	r2, r3
9000826a:	d042      	beq.n	900082f2 <JPEG_Set_HuffAC_Mem+0x9a>
  {
    address = (hjpeg->Instance->HUFFENC_AC0 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
  }
  else if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC1))
9000826c:	f504 63cc 	add.w	r3, r4, #1632	; 0x660
90008270:	429a      	cmp	r2, r3
90008272:	d004      	beq.n	9000827e <JPEG_Set_HuffAC_Mem+0x26>
      return HAL_ERROR; /* Huffman Table overflow error*/
90008274:	2001      	movs	r0, #1
    }
  }

  /* Return function status */
  return HAL_OK;
}
90008276:	f60d 0d3c 	addw	sp, sp, #2108	; 0x83c
9000827a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    address = (hjpeg->Instance->HUFFENC_AC1 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
9000827e:	f204 74a4 	addw	r4, r4, #1956	; 0x7a4
  error = JPEG_Bits_To_SizeCodes(AC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
90008282:	4628      	mov	r0, r5
90008284:	466b      	mov	r3, sp
90008286:	f20d 4234 	addw	r2, sp, #1076	; 0x434
9000828a:	a901      	add	r1, sp, #4
9000828c:	f7ff fec2 	bl	90008014 <JPEG_Bits_To_SizeCodes>
  if (error != HAL_OK)
90008290:	2800      	cmp	r0, #0
90008292:	d1f0      	bne.n	90008276 <JPEG_Set_HuffAC_Mem+0x1e>
  while (k < lastK)
90008294:	9b00      	ldr	r3, [sp, #0]
90008296:	b37b      	cbz	r3, 900082f8 <JPEG_Set_HuffAC_Mem+0xa0>
90008298:	330f      	adds	r3, #15
9000829a:	f20d 4734 	addw	r7, sp, #1076	; 0x434
9000829e:	f10d 0c04 	add.w	ip, sp, #4
900082a2:	f105 020f 	add.w	r2, r5, #15
900082a6:	eb05 0e03 	add.w	lr, r5, r3
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
900082aa:	ae42      	add	r6, sp, #264	; 0x108
900082ac:	e011      	b.n	900082d2 <JPEG_Set_HuffAC_Mem+0x7a>
      l = (msb * 10UL) + lsb - 1UL;
900082ae:	eb03 0345 	add.w	r3, r3, r5, lsl #1
    if (l >= JPEG_AC_HUFF_TABLE_SIZE)
900082b2:	2ba1      	cmp	r3, #161	; 0xa1
900082b4:	d8de      	bhi.n	90008274 <JPEG_Set_HuffAC_Mem+0x1c>
      AC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
900082b6:	f81c 5b01 	ldrb.w	r5, [ip], #1
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
900082ba:	eb06 0883 	add.w	r8, r6, r3, lsl #2
900082be:	f857 9b04 	ldr.w	r9, [r7], #4
  while (k < lastK)
900082c2:	4596      	cmp	lr, r2
      AC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
900082c4:	f105 35ff 	add.w	r5, r5, #4294967295
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
900082c8:	4631      	mov	r1, r6
900082ca:	f8c8 90a4 	str.w	r9, [r8, #164]	; 0xa4
      AC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
900082ce:	54f5      	strb	r5, [r6, r3]
  while (k < lastK)
900082d0:	d013      	beq.n	900082fa <JPEG_Set_HuffAC_Mem+0xa2>
    l = AC_BitsValsTable->HuffVal[k];
900082d2:	f812 1f01 	ldrb.w	r1, [r2, #1]!
      l = 160; /*l = 0x00 EOB code*/
900082d6:	23a0      	movs	r3, #160	; 0xa0
    if (l == 0UL)
900082d8:	2900      	cmp	r1, #0
900082da:	d0ec      	beq.n	900082b6 <JPEG_Set_HuffAC_Mem+0x5e>
      msb = (l & 0xF0UL) >> 4;
900082dc:	090d      	lsrs	r5, r1, #4
      lsb = (l & 0x0FUL);
900082de:	f001 030f 	and.w	r3, r1, #15
    else if (l == 0xF0UL) /* l = 0xF0 ZRL code*/
900082e2:	29f0      	cmp	r1, #240	; 0xf0
      l = (msb * 10UL) + lsb - 1UL;
900082e4:	eb05 0585 	add.w	r5, r5, r5, lsl #2
900082e8:	f103 33ff 	add.w	r3, r3, #4294967295
    else if (l == 0xF0UL) /* l = 0xF0 ZRL code*/
900082ec:	d1df      	bne.n	900082ae <JPEG_Set_HuffAC_Mem+0x56>
      l = 161;
900082ee:	23a1      	movs	r3, #161	; 0xa1
900082f0:	e7e1      	b.n	900082b6 <JPEG_Set_HuffAC_Mem+0x5e>
    address = (hjpeg->Instance->HUFFENC_AC0 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
900082f2:	f204 6444 	addw	r4, r4, #1604	; 0x644
900082f6:	e7c4      	b.n	90008282 <JPEG_Set_HuffAC_Mem+0x2a>
900082f8:	a942      	add	r1, sp, #264	; 0x108
      *addressDef = 0x0FFF0FFF;
900082fa:	f06f 23f0 	mvn.w	r3, #4026593280	; 0xf000f000
    *addressDef = 0x0FD10FD0;
900082fe:	4a1a      	ldr	r2, [pc, #104]	; (90008368 <JPEG_Set_HuffAC_Mem+0x110>)
90008300:	eba1 0c81 	sub.w	ip, r1, r1, lsl #2
90008304:	f10d 0566 	add.w	r5, sp, #102	; 0x66
      *addressDef = 0x0FFF0FFF;
90008308:	6023      	str	r3, [r4, #0]
9000830a:	6063      	str	r3, [r4, #4]
9000830c:	f50c 7e4a 	add.w	lr, ip, #808	; 0x328
90008310:	60a3      	str	r3, [r4, #8]
    *addressDef = 0x0FD30FD2;
90008312:	f103 33d3 	add.w	r3, r3, #3553874899	; 0xd3d3d3d3
    *addressDef = 0x0FD10FD0;
90008316:	60e2      	str	r2, [r4, #12]
    *addressDef = 0x0FD30FD2;
90008318:	f50c 7c49 	add.w	ip, ip, #804	; 0x324
9000831c:	f103 232c 	add.w	r3, r3, #738208768	; 0x2c002c00
90008320:	6123      	str	r3, [r4, #16]
    *addressDef = 0x0FD50FD4;
90008322:	f103 1302 	add.w	r3, r3, #131074	; 0x20002
90008326:	6163      	str	r3, [r4, #20]
    *addressDef = 0x0FD70FD6;
90008328:	f103 1302 	add.w	r3, r3, #131074	; 0x20002
9000832c:	61a3      	str	r3, [r4, #24]
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
9000832e:	f891 20a1 	ldrb.w	r2, [r1, #161]	; 0xa1
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
90008332:	f891 30a0 	ldrb.w	r3, [r1, #160]	; 0xa0
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
90008336:	0212      	lsls	r2, r2, #8
90008338:	f81e 7021 	ldrb.w	r7, [lr, r1, lsl #2]
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
9000833c:	021b      	lsls	r3, r3, #8
9000833e:	f81c 6021 	ldrb.w	r6, [ip, r1, lsl #2]
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
90008342:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
    while (i > 1UL)
90008346:	3902      	subs	r1, #2
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
90008348:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
9000834c:	433a      	orrs	r2, r7
    while (i > 1UL)
9000834e:	428d      	cmp	r5, r1
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
90008350:	ea43 0306 	orr.w	r3, r3, r6
      *address = lsb | (msb << 16);
90008354:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
90008358:	f844 3d04 	str.w	r3, [r4, #-4]!
    while (i > 1UL)
9000835c:	d1e7      	bne.n	9000832e <JPEG_Set_HuffAC_Mem+0xd6>
}
9000835e:	f60d 0d3c 	addw	sp, sp, #2108	; 0x83c
90008362:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
90008366:	bf00      	nop
90008368:	0fd10fd0 	.word	0x0fd10fd0

9000836c <JPEG_Init_Process>:
  * @retval None
  */
static void JPEG_Init_Process(JPEG_HandleTypeDef *hjpeg)
{
  /*Reset pause*/
  hjpeg->Context &= (~(JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT));
9000836c:	6d43      	ldr	r3, [r0, #84]	; 0x54
9000836e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
90008372:	6543      	str	r3, [r0, #84]	; 0x54

  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
90008374:	6d43      	ldr	r3, [r0, #84]	; 0x54
90008376:	f003 0303 	and.w	r3, r3, #3
9000837a:	2b02      	cmp	r3, #2
  {
    /*Set JPEG Codec to Decoding mode */
    hjpeg->Instance->CONFR1 |= JPEG_CONFR1_DE;
9000837c:	6803      	ldr	r3, [r0, #0]
9000837e:	685a      	ldr	r2, [r3, #4]
90008380:	bf0c      	ite	eq
90008382:	f042 0208 	orreq.w	r2, r2, #8
  }
  else /* JPEG_CONTEXT_ENCODE */
  {
    /*Set JPEG Codec to Encoding mode */
    hjpeg->Instance->CONFR1 &= ~JPEG_CONFR1_DE;
90008386:	f022 0208 	bicne.w	r2, r2, #8
9000838a:	605a      	str	r2, [r3, #4]
  }

  /*Stop JPEG processing */
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
9000838c:	681a      	ldr	r2, [r3, #0]
9000838e:	f022 0201 	bic.w	r2, r2, #1
90008392:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
90008394:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90008396:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
9000839a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
9000839c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
9000839e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
900083a2:	631a      	str	r2, [r3, #48]	; 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
900083a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
900083a6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
900083aa:	631a      	str	r2, [r3, #48]	; 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
900083ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
900083ae:	f042 0260 	orr.w	r2, r2, #96	; 0x60
900083b2:	639a      	str	r2, [r3, #56]	; 0x38

  /*Start Encoding/Decoding*/
  hjpeg->Instance->CONFR0 |=  JPEG_CONFR0_START;
900083b4:	681a      	ldr	r2, [r3, #0]
900083b6:	f042 0201 	orr.w	r2, r2, #1
900083ba:	601a      	str	r2, [r3, #0]

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
900083bc:	6d42      	ldr	r2, [r0, #84]	; 0x54
900083be:	f002 020c 	and.w	r2, r2, #12
900083c2:	2a08      	cmp	r2, #8
900083c4:	d00a      	beq.n	900083dc <JPEG_Init_Process+0x70>
  {
    /*Enable IN/OUT, end of Conversation, and end of header parsing interruptions*/
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_IFT | JPEG_IT_IFNF | JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC | JPEG_IT_HPD);
  }
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
900083c6:	6d42      	ldr	r2, [r0, #84]	; 0x54
900083c8:	f002 020c 	and.w	r2, r2, #12
900083cc:	2a0c      	cmp	r2, #12
900083ce:	d000      	beq.n	900083d2 <JPEG_Init_Process+0x66>
  }
  else
  {
    /* Nothing to do */
  }
}
900083d0:	4770      	bx	lr
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
900083d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
900083d4:	f042 0260 	orr.w	r2, r2, #96	; 0x60
900083d8:	631a      	str	r2, [r3, #48]	; 0x30
}
900083da:	4770      	bx	lr
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_IFT | JPEG_IT_IFNF | JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC | JPEG_IT_HPD);
900083dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
900083de:	f042 026e 	orr.w	r2, r2, #110	; 0x6e
900083e2:	631a      	str	r2, [r3, #48]	; 0x30
900083e4:	4770      	bx	lr
900083e6:	bf00      	nop

900083e8 <JPEG_DMA_StartProcess>:
  /*if the MDMA In is triggred with JPEG In FIFO Threshold flag
      then MDMA In buffer size is 32 bytes
    else (MDMA In is triggred with JPEG In FIFO not full flag)
      then MDMA In buffer size is 4 bytes
    */
  inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
900083e8:	6b01      	ldr	r1, [r0, #48]	; 0x30
    else (MDMA Out is triggred with JPEG Out FIFO not empty flag)
      then MDMA buffer size is 4 bytes
    */
  outXfrSize = hjpeg->hdmaout->Init.BufferTransferLength;

  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
900083ea:	6a82      	ldr	r2, [r0, #40]	; 0x28
{
900083ec:	b5f0      	push	{r4, r5, r6, r7, lr}
  inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
900083ee:	6a8d      	ldr	r5, [r1, #40]	; 0x28
{
900083f0:	b083      	sub	sp, #12
  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
900083f2:	42aa      	cmp	r2, r5
900083f4:	d32d      	bcc.n	90008452 <JPEG_DMA_StartProcess+0x6a>
900083f6:	4604      	mov	r4, r0
  outXfrSize = hjpeg->hdmaout->Init.BufferTransferLength;
900083f8:	6b40      	ldr	r0, [r0, #52]	; 0x34
  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
900083fa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  outXfrSize = hjpeg->hdmaout->Init.BufferTransferLength;
900083fc:	6a86      	ldr	r6, [r0, #40]	; 0x28
  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
900083fe:	42b3      	cmp	r3, r6
90008400:	d327      	bcc.n	90008452 <JPEG_DMA_StartProcess+0x6a>
    return HAL_ERROR;
  }
  /* Set the JPEG MDMA In transfer complete callback */
  hjpeg->hdmain->XferCpltCallback = JPEG_MDMAInCpltCallback;
  /* Set the MDMA In error callback */
  hjpeg->hdmain->XferErrorCallback = JPEG_MDMAErrorCallback;
90008402:	4f1b      	ldr	r7, [pc, #108]	; (90008470 <JPEG_DMA_StartProcess+0x88>)
  hjpeg->hdmain->XferCpltCallback = JPEG_MDMAInCpltCallback;
90008404:	f8df c074 	ldr.w	ip, [pc, #116]	; 9000847c <JPEG_DMA_StartProcess+0x94>
  hjpeg->hdmain->XferErrorCallback = JPEG_MDMAErrorCallback;
90008408:	654f      	str	r7, [r1, #84]	; 0x54
  hjpeg->hdmain->XferCpltCallback = JPEG_MDMAInCpltCallback;
9000840a:	f8c1 c044 	str.w	ip, [r1, #68]	; 0x44

  /* Set the JPEG MDMA Out transfer complete callback */
  hjpeg->hdmaout->XferCpltCallback = JPEG_MDMAOutCpltCallback;
9000840e:	4919      	ldr	r1, [pc, #100]	; (90008474 <JPEG_DMA_StartProcess+0x8c>)
  /* Set the MDMA In error callback */
  hjpeg->hdmaout->XferErrorCallback = JPEG_MDMAErrorCallback;
90008410:	6547      	str	r7, [r0, #84]	; 0x54
  hjpeg->hdmaout->XferCpltCallback = JPEG_MDMAOutCpltCallback;
90008412:	6441      	str	r1, [r0, #68]	; 0x44
  /* Set the MDMA Out Abort callback */
  hjpeg->hdmaout->XferAbortCallback = JPEG_MDMAOutAbortCallback;
90008414:	4918      	ldr	r1, [pc, #96]	; (90008478 <JPEG_DMA_StartProcess+0x90>)
90008416:	6581      	str	r1, [r0, #88]	; 0x58

  if ((inXfrSize == 0UL) || (outXfrSize == 0UL))
90008418:	b1a5      	cbz	r5, 90008444 <JPEG_DMA_StartProcess+0x5c>
9000841a:	b19e      	cbz	r6, 90008444 <JPEG_DMA_StartProcess+0x5c>
  {
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
    return HAL_ERROR;
  }
  /*MDMA transfer size (BNDTR) must be a multiple of MDMA buffer size (TLEN)*/
  hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
9000841c:	fbb2 f1f5 	udiv	r1, r2, r5
90008420:	fb05 2111 	mls	r1, r5, r1, r2
  /*MDMA transfer size (BNDTR) must be a multiple of MDMA buffer size (TLEN)*/
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % outXfrSize);


  /* Start MDMA FIFO Out transfer */
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
90008424:	2501      	movs	r5, #1
  hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
90008426:	1a52      	subs	r2, r2, r1
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
90008428:	6821      	ldr	r1, [r4, #0]
  hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
9000842a:	62a2      	str	r2, [r4, #40]	; 0x28
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
9000842c:	3144      	adds	r1, #68	; 0x44
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % outXfrSize);
9000842e:	fbb3 f2f6 	udiv	r2, r3, r6
90008432:	fb06 3212 	mls	r2, r6, r2, r3
90008436:	1a9b      	subs	r3, r3, r2
90008438:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
9000843a:	9500      	str	r5, [sp, #0]
9000843c:	69e2      	ldr	r2, [r4, #28]
9000843e:	f001 fbb5 	bl	90009bac <HAL_MDMA_Start_IT>
90008442:	b148      	cbz	r0, 90008458 <JPEG_DMA_StartProcess+0x70>
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
90008444:	6d23      	ldr	r3, [r4, #80]	; 0x50
    return HAL_ERROR;
90008446:	2001      	movs	r0, #1
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
90008448:	f043 0304 	orr.w	r3, r3, #4
9000844c:	6523      	str	r3, [r4, #80]	; 0x50
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
    return HAL_ERROR;
  }

  return HAL_OK;
}
9000844e:	b003      	add	sp, #12
90008450:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_ERROR;
90008452:	2001      	movs	r0, #1
}
90008454:	b003      	add	sp, #12
90008456:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
90008458:	6822      	ldr	r2, [r4, #0]
9000845a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
9000845c:	69a1      	ldr	r1, [r4, #24]
9000845e:	3240      	adds	r2, #64	; 0x40
90008460:	9500      	str	r5, [sp, #0]
90008462:	6b20      	ldr	r0, [r4, #48]	; 0x30
90008464:	f001 fba2 	bl	90009bac <HAL_MDMA_Start_IT>
90008468:	2800      	cmp	r0, #0
9000846a:	d0f3      	beq.n	90008454 <JPEG_DMA_StartProcess+0x6c>
9000846c:	e7ea      	b.n	90008444 <JPEG_DMA_StartProcess+0x5c>
9000846e:	bf00      	nop
90008470:	900089a1 	.word	0x900089a1
90008474:	90008c19 	.word	0x90008c19
90008478:	90008c99 	.word	0x90008c99
9000847c:	900089cd 	.word	0x900089cd

90008480 <HAL_JPEG_GetInfo.part.0>:
  if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF_1)
90008480:	6803      	ldr	r3, [r0, #0]
90008482:	685a      	ldr	r2, [r3, #4]
90008484:	f002 0203 	and.w	r2, r2, #3
90008488:	2a02      	cmp	r2, #2
HAL_StatusTypeDef HAL_JPEG_GetInfo(JPEG_HandleTypeDef *hjpeg, JPEG_ConfTypeDef *pInfo)
9000848a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
9000848e:	4689      	mov	r9, r1
  if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF_1)
90008490:	f000 8094 	beq.w	900085bc <HAL_JPEG_GetInfo.part.0+0x13c>
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == 0UL)
90008494:	685c      	ldr	r4, [r3, #4]
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
90008496:	685a      	ldr	r2, [r3, #4]
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == 0UL)
90008498:	f014 0403 	ands.w	r4, r4, #3
9000849c:	d172      	bne.n	90008584 <HAL_JPEG_GetInfo.part.0+0x104>
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
9000849e:	0c12      	lsrs	r2, r2, #16
    pInfo->ColorSpace = JPEG_YCBCR_COLORSPACE;
900084a0:	600c      	str	r4, [r1, #0]
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
900084a2:	608a      	str	r2, [r1, #8]
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
900084a4:	68da      	ldr	r2, [r3, #12]
900084a6:	0c12      	lsrs	r2, r2, #16
900084a8:	60ca      	str	r2, [r1, #12]
  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
900084aa:	4a5f      	ldr	r2, [pc, #380]	; (90008628 <HAL_JPEG_GetInfo.part.0+0x1a8>)
  */
static uint32_t JPEG_GetQuality(JPEG_HandleTypeDef *hjpeg)
{
  uint32_t quality = 0;
  uint32_t quantRow, quantVal, scale, i, j;
  __IO uint32_t *tableAddress = hjpeg->Instance->QMEM0;
900084ac:	f103 0c50 	add.w	ip, r3, #80	; 0x50
      pInfo->ChromaSubsampling = JPEG_422_SUBSAMPLING; /*16x8 block*/
900084b0:	f8c9 4004 	str.w	r4, [r9, #4]
  uint32_t quality = 0;
900084b4:	2600      	movs	r6, #0
900084b6:	f102 0540 	add.w	r5, r2, #64	; 0x40
        quality += 100UL;
      }
      else
      {
        /* Note that the quantization coefficients must be specified in the table in zigzag order */
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
900084ba:	f04f 0e64 	mov.w	lr, #100	; 0x64
        {
          quality += (200UL - scale) / 2UL;
        }
        else
        {
          quality += 5000UL / scale;
900084be:	f241 3488 	movw	r4, #5000	; 0x1388
900084c2:	e033      	b.n	9000852c <HAL_JPEG_GetInfo.part.0+0xac>
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
900084c4:	f892 8001 	ldrb.w	r8, [r2, #1]
900084c8:	fb0e f707 	mul.w	r7, lr, r7
900084cc:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
900084ce:	f811 8008 	ldrb.w	r8, [r1, r8]
900084d2:	fbb7 f7f8 	udiv	r7, r7, r8
        if (scale <= 100UL)
900084d6:	2f64      	cmp	r7, #100	; 0x64
900084d8:	d961      	bls.n	9000859e <HAL_JPEG_GetInfo.part.0+0x11e>
          quality += 5000UL / scale;
900084da:	fbb4 f7f7 	udiv	r7, r4, r7
900084de:	443e      	add	r6, r7
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
900084e0:	f3c3 4707 	ubfx	r7, r3, #16, #8
      if (quantVal == 1UL)
900084e4:	2f01      	cmp	r7, #1
900084e6:	d03d      	beq.n	90008564 <HAL_JPEG_GetInfo.part.0+0xe4>
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
900084e8:	f892 8002 	ldrb.w	r8, [r2, #2]
900084ec:	fb0e f707 	mul.w	r7, lr, r7
900084f0:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
900084f2:	f811 8008 	ldrb.w	r8, [r1, r8]
900084f6:	fbb7 f7f8 	udiv	r7, r7, r8
        if (scale <= 100UL)
900084fa:	2f64      	cmp	r7, #100	; 0x64
900084fc:	d94a      	bls.n	90008594 <HAL_JPEG_GetInfo.part.0+0x114>
          quality += 5000UL / scale;
900084fe:	fbb4 f7f7 	udiv	r7, r4, r7
90008502:	443e      	add	r6, r7
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
90008504:	0e1b      	lsrs	r3, r3, #24
      if (quantVal == 1UL)
90008506:	2b01      	cmp	r3, #1
90008508:	d030      	beq.n	9000856c <HAL_JPEG_GetInfo.part.0+0xec>
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
9000850a:	78d7      	ldrb	r7, [r2, #3]
9000850c:	fb0e f303 	mul.w	r3, lr, r3
90008510:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
90008512:	5dcf      	ldrb	r7, [r1, r7]
90008514:	fbb3 f3f7 	udiv	r3, r3, r7
        if (scale <= 100UL)
90008518:	2b64      	cmp	r3, #100	; 0x64
9000851a:	d94a      	bls.n	900085b2 <HAL_JPEG_GetInfo.part.0+0x132>
          quality += 5000UL / scale;
9000851c:	fbb4 f3f3 	udiv	r3, r4, r3
90008520:	441e      	add	r6, r3
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
90008522:	3204      	adds	r2, #4
        }
      }
    }

    i += 4UL;
    tableAddress ++;
90008524:	f10c 0c04 	add.w	ip, ip, #4
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
90008528:	4295      	cmp	r5, r2
9000852a:	d025      	beq.n	90008578 <HAL_JPEG_GetInfo.part.0+0xf8>
    quantRow = *tableAddress;
9000852c:	f8dc 3000 	ldr.w	r3, [ip]
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
90008530:	b2df      	uxtb	r7, r3
      if (quantVal == 1UL)
90008532:	2f01      	cmp	r7, #1
90008534:	d02c      	beq.n	90008590 <HAL_JPEG_GetInfo.part.0+0x110>
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
90008536:	f892 8000 	ldrb.w	r8, [r2]
9000853a:	fb0e f707 	mul.w	r7, lr, r7
9000853e:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
90008540:	f811 8008 	ldrb.w	r8, [r1, r8]
90008544:	fbb7 f7f8 	udiv	r7, r7, r8
        if (scale <= 100UL)
90008548:	2f64      	cmp	r7, #100	; 0x64
9000854a:	d92d      	bls.n	900085a8 <HAL_JPEG_GetInfo.part.0+0x128>
          quality += 5000UL / scale;
9000854c:	fbb4 f7f7 	udiv	r7, r4, r7
90008550:	443e      	add	r6, r7
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
90008552:	f3c3 2707 	ubfx	r7, r3, #8, #8
      if (quantVal == 1UL)
90008556:	2f01      	cmp	r7, #1
90008558:	d1b4      	bne.n	900084c4 <HAL_JPEG_GetInfo.part.0+0x44>
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
9000855a:	f3c3 4707 	ubfx	r7, r3, #16, #8
        quality += 100UL;
9000855e:	3664      	adds	r6, #100	; 0x64
      if (quantVal == 1UL)
90008560:	2f01      	cmp	r7, #1
90008562:	d1c1      	bne.n	900084e8 <HAL_JPEG_GetInfo.part.0+0x68>
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
90008564:	0e1b      	lsrs	r3, r3, #24
        quality += 100UL;
90008566:	3664      	adds	r6, #100	; 0x64
      if (quantVal == 1UL)
90008568:	2b01      	cmp	r3, #1
9000856a:	d1ce      	bne.n	9000850a <HAL_JPEG_GetInfo.part.0+0x8a>
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
9000856c:	3204      	adds	r2, #4
        quality += 100UL;
9000856e:	3664      	adds	r6, #100	; 0x64
    tableAddress ++;
90008570:	f10c 0c04 	add.w	ip, ip, #4
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
90008574:	4295      	cmp	r5, r2
90008576:	d1d9      	bne.n	9000852c <HAL_JPEG_GetInfo.part.0+0xac>
  }

  return (quality / 64UL);
90008578:	09b6      	lsrs	r6, r6, #6
  return HAL_OK;
9000857a:	2000      	movs	r0, #0
  pInfo->ImageQuality = JPEG_GetQuality(hjpeg);
9000857c:	f8c9 6010 	str.w	r6, [r9, #16]
}
90008580:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF)
90008584:	f002 0203 	and.w	r2, r2, #3
90008588:	2a03      	cmp	r2, #3
9000858a:	d14a      	bne.n	90008622 <HAL_JPEG_GetInfo.part.0+0x1a2>
9000858c:	2430      	movs	r4, #48	; 0x30
9000858e:	e016      	b.n	900085be <HAL_JPEG_GetInfo.part.0+0x13e>
        quality += 100UL;
90008590:	3664      	adds	r6, #100	; 0x64
90008592:	e7de      	b.n	90008552 <HAL_JPEG_GetInfo.part.0+0xd2>
          quality += (200UL - scale) / 2UL;
90008594:	f1c7 07c8 	rsb	r7, r7, #200	; 0xc8
90008598:	eb06 0657 	add.w	r6, r6, r7, lsr #1
9000859c:	e7b2      	b.n	90008504 <HAL_JPEG_GetInfo.part.0+0x84>
9000859e:	f1c7 07c8 	rsb	r7, r7, #200	; 0xc8
900085a2:	eb06 0657 	add.w	r6, r6, r7, lsr #1
900085a6:	e79b      	b.n	900084e0 <HAL_JPEG_GetInfo.part.0+0x60>
900085a8:	f1c7 07c8 	rsb	r7, r7, #200	; 0xc8
900085ac:	eb06 0657 	add.w	r6, r6, r7, lsr #1
900085b0:	e7cf      	b.n	90008552 <HAL_JPEG_GetInfo.part.0+0xd2>
900085b2:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
900085b6:	eb06 0653 	add.w	r6, r6, r3, lsr #1
900085ba:	e7b2      	b.n	90008522 <HAL_JPEG_GetInfo.part.0+0xa2>
900085bc:	2410      	movs	r4, #16
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
900085be:	685a      	ldr	r2, [r3, #4]
    pInfo->ColorSpace = JPEG_YCBCR_COLORSPACE;
900085c0:	f8c9 4000 	str.w	r4, [r9]
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
900085c4:	0c12      	lsrs	r2, r2, #16
900085c6:	f8c9 2008 	str.w	r2, [r9, #8]
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
900085ca:	68da      	ldr	r2, [r3, #12]
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
900085cc:	691d      	ldr	r5, [r3, #16]
    cBblockNb = (hjpeg->Instance->CONFR5 & JPEG_CONFR5_NB) >> 4;
900085ce:	695f      	ldr	r7, [r3, #20]
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
900085d0:	0c12      	lsrs	r2, r2, #16
    cRblockNb = (hjpeg->Instance->CONFR6 & JPEG_CONFR6_NB) >> 4;
900085d2:	699e      	ldr	r6, [r3, #24]
    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
900085d4:	f017 0ff0 	tst.w	r7, #240	; 0xf0
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
900085d8:	f8c9 200c 	str.w	r2, [r9, #12]
    cRblockNb = (hjpeg->Instance->CONFR6 & JPEG_CONFR6_NB) >> 4;
900085dc:	ea4f 1616 	mov.w	r6, r6, lsr #4
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
900085e0:	ea4f 1215 	mov.w	r2, r5, lsr #4
900085e4:	f3c5 1503 	ubfx	r5, r5, #4, #4
    cBblockNb = (hjpeg->Instance->CONFR5 & JPEG_CONFR5_NB) >> 4;
900085e8:	ea4f 1c17 	mov.w	ip, r7, lsr #4
    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
900085ec:	d108      	bne.n	90008600 <HAL_JPEG_GetInfo.part.0+0x180>
900085ee:	2d01      	cmp	r5, #1
900085f0:	d106      	bne.n	90008600 <HAL_JPEG_GetInfo.part.0+0x180>
900085f2:	f016 0f0f 	tst.w	r6, #15
900085f6:	bf0c      	ite	eq
900085f8:	2401      	moveq	r4, #1
900085fa:	2400      	movne	r4, #0
900085fc:	0064      	lsls	r4, r4, #1
900085fe:	e754      	b.n	900084aa <HAL_JPEG_GetInfo.part.0+0x2a>
    else if ((yblockNb == 0UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
90008600:	ea42 020c 	orr.w	r2, r2, ip
90008604:	f012 040f 	ands.w	r4, r2, #15
90008608:	f43f af4f 	beq.w	900084aa <HAL_JPEG_GetInfo.part.0+0x2a>
    else if ((yblockNb == 3UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
9000860c:	ea4c 0206 	orr.w	r2, ip, r6
90008610:	f3c2 0203 	ubfx	r2, r2, #0, #4
90008614:	2d03      	cmp	r5, #3
90008616:	bf08      	it	eq
90008618:	2a00      	cmpeq	r2, #0
9000861a:	bf0c      	ite	eq
9000861c:	2401      	moveq	r4, #1
9000861e:	2400      	movne	r4, #0
90008620:	e743      	b.n	900084aa <HAL_JPEG_GetInfo.part.0+0x2a>
    return HAL_ERROR;
90008622:	2001      	movs	r0, #1
}
90008624:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
90008628:	90028b38 	.word	0x90028b38

9000862c <HAL_JPEG_Init>:
  if (hjpeg == NULL)
9000862c:	2800      	cmp	r0, #0
9000862e:	f000 810b 	beq.w	90008848 <HAL_JPEG_Init+0x21c>
{
90008632:	b570      	push	{r4, r5, r6, lr}
  if (hjpeg->State == HAL_JPEG_STATE_RESET)
90008634:	f890 304d 	ldrb.w	r3, [r0, #77]	; 0x4d
90008638:	4604      	mov	r4, r0
9000863a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
9000863e:	2b00      	cmp	r3, #0
90008640:	f000 80fd 	beq.w	9000883e <HAL_JPEG_Init+0x212>
  __HAL_JPEG_ENABLE(hjpeg);
90008644:	6822      	ldr	r2, [r4, #0]
  hjpeg->State = HAL_JPEG_STATE_BUSY;
90008646:	2102      	movs	r1, #2
  hjpeg->QuantTable2 = NULL;
90008648:	2300      	movs	r3, #0
  hjpeg->QuantTable0 = (uint8_t *)((uint32_t)JPEG_LUM_QuantTable);
9000864a:	4880      	ldr	r0, [pc, #512]	; (9000884c <HAL_JPEG_Init+0x220>)
  hjpeg->State = HAL_JPEG_STATE_BUSY;
9000864c:	f884 104d 	strb.w	r1, [r4, #77]	; 0x4d
  __HAL_JPEG_ENABLE(hjpeg);
90008650:	6b11      	ldr	r1, [r2, #48]	; 0x30
90008652:	f041 0101 	orr.w	r1, r1, #1
90008656:	6311      	str	r1, [r2, #48]	; 0x30
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
90008658:	6811      	ldr	r1, [r2, #0]
9000865a:	f021 0101 	bic.w	r1, r1, #1
9000865e:	6011      	str	r1, [r2, #0]
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
90008660:	6b11      	ldr	r1, [r2, #48]	; 0x30
90008662:	f021 017e 	bic.w	r1, r1, #126	; 0x7e
90008666:	6311      	str	r1, [r2, #48]	; 0x30
  hjpeg->Instance->CR |= JPEG_CR_IFF;
90008668:	6b11      	ldr	r1, [r2, #48]	; 0x30
9000866a:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
9000866e:	6311      	str	r1, [r2, #48]	; 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
90008670:	6b11      	ldr	r1, [r2, #48]	; 0x30
90008672:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
90008676:	6311      	str	r1, [r2, #48]	; 0x30
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
90008678:	6b91      	ldr	r1, [r2, #56]	; 0x38
9000867a:	f041 0160 	orr.w	r1, r1, #96	; 0x60
9000867e:	6391      	str	r1, [r2, #56]	; 0x38
  hjpeg->QuantTable1 = (uint8_t *)((uint32_t)JPEG_CHROM_QuantTable);
90008680:	4973      	ldr	r1, [pc, #460]	; (90008850 <HAL_JPEG_Init+0x224>)
  hjpeg->QuantTable0 = (uint8_t *)((uint32_t)JPEG_LUM_QuantTable);
90008682:	63e0      	str	r0, [r4, #60]	; 0x3c
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
90008684:	2001      	movs	r0, #1
  hjpeg->QuantTable3 = NULL;
90008686:	64a3      	str	r3, [r4, #72]	; 0x48
  hjpeg->QuantTable1 = (uint8_t *)((uint32_t)JPEG_CHROM_QuantTable);
90008688:	e9c4 1310 	strd	r1, r3, [r4, #64]	; 0x40
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
9000868c:	f8c2 336c 	str.w	r3, [r2, #876]	; 0x36c
90008690:	f04f 3101 	mov.w	r1, #16843009	; 0x1010101
90008694:	4b6f      	ldr	r3, [pc, #444]	; (90008854 <HAL_JPEG_Init+0x228>)
90008696:	f8c2 0368 	str.w	r0, [r2, #872]	; 0x368
9000869a:	f8c2 1364 	str.w	r1, [r2, #868]	; 0x364
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
9000869e:	486e      	ldr	r0, [pc, #440]	; (90008858 <HAL_JPEG_Init+0x22c>)
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
900086a0:	f8c2 3360 	str.w	r3, [r2, #864]	; 0x360
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
900086a4:	4b6d      	ldr	r3, [pc, #436]	; (9000885c <HAL_JPEG_Init+0x230>)
900086a6:	f8c2 0378 	str.w	r0, [r2, #888]	; 0x378
900086aa:	496d      	ldr	r1, [pc, #436]	; (90008860 <HAL_JPEG_Init+0x234>)
900086ac:	f8c2 3374 	str.w	r3, [r2, #884]	; 0x374
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
900086b0:	4b6c      	ldr	r3, [pc, #432]	; (90008864 <HAL_JPEG_Init+0x238>)
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
900086b2:	f8c2 1370 	str.w	r1, [r2, #880]	; 0x370
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
900086b6:	486c      	ldr	r0, [pc, #432]	; (90008868 <HAL_JPEG_Init+0x23c>)
900086b8:	f8c2 3388 	str.w	r3, [r2, #904]	; 0x388
900086bc:	496b      	ldr	r1, [pc, #428]	; (9000886c <HAL_JPEG_Init+0x240>)
900086be:	4b6c      	ldr	r3, [pc, #432]	; (90008870 <HAL_JPEG_Init+0x244>)
900086c0:	f8c2 0384 	str.w	r0, [r2, #900]	; 0x384
900086c4:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
900086c8:	f8c2 337c 	str.w	r3, [r2, #892]	; 0x37c
  value = value | (((uint32_t)HuffTableAC0->HuffVal[161] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC0->HuffVal[160] & 0xFFUL);
900086cc:	f64f 23f9 	movw	r3, #64249	; 0xfaf9
  value = *address & 0xFFFF0000U;
900086d0:	f8d2 042c 	ldr.w	r0, [r2, #1068]	; 0x42c
900086d4:	4967      	ldr	r1, [pc, #412]	; (90008874 <HAL_JPEG_Init+0x248>)
900086d6:	4001      	ands	r1, r0
  address--; /* address = hjpeg->Instance->DHTMEM + 50*/
900086d8:	f502 6085 	add.w	r0, r2, #1064	; 0x428
  value = value | (((uint32_t)HuffTableAC0->HuffVal[161] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC0->HuffVal[160] & 0xFFUL);
900086dc:	430b      	orrs	r3, r1
  *address = value;
900086de:	4966      	ldr	r1, [pc, #408]	; (90008878 <HAL_JPEG_Init+0x24c>)
900086e0:	f1a1 06a0 	sub.w	r6, r1, #160	; 0xa0
900086e4:	f8c2 342c 	str.w	r3, [r2, #1068]	; 0x42c
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
900086e8:	f891 30ae 	ldrb.w	r3, [r1, #174]	; 0xae
  while (index > 3UL)
900086ec:	3904      	subs	r1, #4
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
900086ee:	f891 e0b3 	ldrb.w	lr, [r1, #179]	; 0xb3
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
900086f2:	041b      	lsls	r3, r3, #16
               ((uint32_t)HuffTableAC0->HuffVal[index - 4UL] & 0xFFUL);
900086f4:	f891 c0b0 	ldrb.w	ip, [r1, #176]	; 0xb0
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
900086f8:	f891 50b1 	ldrb.w	r5, [r1, #177]	; 0xb1
  while (index > 3UL)
900086fc:	42b1      	cmp	r1, r6
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
900086fe:	ea43 630e 	orr.w	r3, r3, lr, lsl #24
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
90008702:	ea43 030c 	orr.w	r3, r3, ip
90008706:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
9000870a:	f840 3904 	str.w	r3, [r0], #-4
  while (index > 3UL)
9000870e:	d1eb      	bne.n	900086e8 <HAL_JPEG_Init+0xbc>
  value = *address & 0x0000FFFFU;
90008710:	f8d2 342c 	ldr.w	r3, [r2, #1068]	; 0x42c
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
90008714:	f04f 3101 	mov.w	r1, #16843009	; 0x1010101
  value = *address & 0xFFFF0000U;
90008718:	4856      	ldr	r0, [pc, #344]	; (90008874 <HAL_JPEG_Init+0x248>)
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
9000871a:	2501      	movs	r5, #1
  value = *address & 0x0000FFFFU;
9000871c:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableDC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->Bits[0] & 0xFFUL) << 16);
9000871e:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
  *address = value;
90008722:	f8c2 342c 	str.w	r3, [r2, #1068]	; 0x42c
  value = *address & 0xFFFF0000U;
90008726:	f8d2 343c 	ldr.w	r3, [r2, #1084]	; 0x43c
9000872a:	4003      	ands	r3, r0
  *address = value;
9000872c:	f8c2 343c 	str.w	r3, [r2, #1084]	; 0x43c
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
90008730:	f8c2 5438 	str.w	r5, [r2, #1080]	; 0x438
90008734:	f8c2 1434 	str.w	r1, [r2, #1076]	; 0x434
90008738:	f8c2 1430 	str.w	r1, [r2, #1072]	; 0x430
  value = value | (((uint32_t)HuffTableDC1->HuffVal[11] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->HuffVal[10] & 0xFFUL);
9000873c:	f640 310a 	movw	r1, #2826	; 0xb0a
  value = *address & 0x0000FFFFUL;
90008740:	f8d2 343c 	ldr.w	r3, [r2, #1084]	; 0x43c
90008744:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableDC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->HuffVal[0] & 0xFFUL) <<
90008746:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  *address = value;
9000874a:	f8c2 343c 	str.w	r3, [r2, #1084]	; 0x43c
  value = *address & 0xFFFF0000UL;
9000874e:	f8d2 3448 	ldr.w	r3, [r2, #1096]	; 0x448
90008752:	4003      	ands	r3, r0
  value = value | (((uint32_t)HuffTableDC1->HuffVal[11] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->HuffVal[10] & 0xFFUL);
90008754:	4319      	orrs	r1, r3
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
90008756:	4b49      	ldr	r3, [pc, #292]	; (9000887c <HAL_JPEG_Init+0x250>)
  *address = value;
90008758:	f8c2 1448 	str.w	r1, [r2, #1096]	; 0x448
  value = value | (((uint32_t)HuffTableAC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC1->Bits[14] & 0xFFUL);
9000875c:	f247 7102 	movw	r1, #30466	; 0x7702
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
90008760:	f8c2 3444 	str.w	r3, [r2, #1092]	; 0x444
90008764:	f1a3 3304 	sub.w	r3, r3, #67372036	; 0x4040404
90008768:	f8c2 3440 	str.w	r3, [r2, #1088]	; 0x440
  value = *address & 0x0000FFFFU;
9000876c:	f8d2 3448 	ldr.w	r3, [r2, #1096]	; 0x448
90008770:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableAC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->Bits[0] & 0xFFUL) << 16);
90008772:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
  *address = value;
90008776:	f8c2 3448 	str.w	r3, [r2, #1096]	; 0x448
  value = *address & 0xFFFF0000U;
9000877a:	f8d2 3458 	ldr.w	r3, [r2, #1112]	; 0x458
9000877e:	4003      	ands	r3, r0
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
90008780:	483f      	ldr	r0, [pc, #252]	; (90008880 <HAL_JPEG_Init+0x254>)
  value = value | (((uint32_t)HuffTableAC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC1->Bits[14] & 0xFFUL);
90008782:	4319      	orrs	r1, r3
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
90008784:	4b3f      	ldr	r3, [pc, #252]	; (90008884 <HAL_JPEG_Init+0x258>)
  *address = value;
90008786:	f8c2 1458 	str.w	r1, [r2, #1112]	; 0x458
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
9000878a:	493f      	ldr	r1, [pc, #252]	; (90008888 <HAL_JPEG_Init+0x25c>)
9000878c:	f8c2 0454 	str.w	r0, [r2, #1108]	; 0x454
  address = (hjpeg->Instance->DHTMEM + 102);
90008790:	f502 609f 	add.w	r0, r2, #1272	; 0x4f8
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
90008794:	f8c2 1450 	str.w	r1, [r2, #1104]	; 0x450
90008798:	f8c2 344c 	str.w	r3, [r2, #1100]	; 0x44c
  value = *address & 0x0000FFFFUL;
9000879c:	f8d2 3458 	ldr.w	r3, [r2, #1112]	; 0x458
  value = value | (((uint32_t)HuffTableAC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->HuffVal[0] & 0xFFUL) <<
900087a0:	493a      	ldr	r1, [pc, #232]	; (9000888c <HAL_JPEG_Init+0x260>)
  value = *address & 0x0000FFFFUL;
900087a2:	b29b      	uxth	r3, r3
900087a4:	f1a1 06a0 	sub.w	r6, r1, #160	; 0xa0
  value = value | (((uint32_t)HuffTableAC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->HuffVal[0] & 0xFFUL) <<
900087a8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  *address = value;
900087ac:	f8c2 3458 	str.w	r3, [r2, #1112]	; 0x458
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
900087b0:	f891 30b0 	ldrb.w	r3, [r1, #176]	; 0xb0
  while (index > 3UL)
900087b4:	3904      	subs	r1, #4
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
900087b6:	f891 50b5 	ldrb.w	r5, [r1, #181]	; 0xb5
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
900087ba:	041b      	lsls	r3, r3, #16
               ((uint32_t)HuffTableAC1->HuffVal[index - 2UL] & 0xFFUL);
900087bc:	f891 e0b2 	ldrb.w	lr, [r1, #178]	; 0xb2
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
900087c0:	f891 c0b3 	ldrb.w	ip, [r1, #179]	; 0xb3
  while (index > 3UL)
900087c4:	42b1      	cmp	r1, r6
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
900087c6:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
900087ca:	ea43 030e 	orr.w	r3, r3, lr
900087ce:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
900087d2:	f840 3904 	str.w	r3, [r0], #-4
  while (index > 3UL)
900087d6:	d1eb      	bne.n	900087b0 <HAL_JPEG_Init+0x184>
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
900087d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
900087dc:	4926      	ldr	r1, [pc, #152]	; (90008878 <HAL_JPEG_Init+0x24c>)
900087de:	4620      	mov	r0, r4
900087e0:	f7ff fd3a 	bl	90008258 <JPEG_Set_HuffAC_Mem>
  if (error != HAL_OK)
900087e4:	b118      	cbz	r0, 900087ee <HAL_JPEG_Init+0x1c2>
    hjpeg->ErrorCode = HAL_JPEG_ERROR_HUFF_TABLE;
900087e6:	2301      	movs	r3, #1
    return HAL_ERROR;
900087e8:	4618      	mov	r0, r3
    hjpeg->ErrorCode = HAL_JPEG_ERROR_HUFF_TABLE;
900087ea:	6523      	str	r3, [r4, #80]	; 0x50
}
900087ec:	bd70      	pop	{r4, r5, r6, pc}
                              (hjpeg->Instance->HUFFENC_AC1));
900087ee:	6822      	ldr	r2, [r4, #0]
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
900087f0:	4620      	mov	r0, r4
900087f2:	4926      	ldr	r1, [pc, #152]	; (9000888c <HAL_JPEG_Init+0x260>)
900087f4:	f502 62cc 	add.w	r2, r2, #1632	; 0x660
900087f8:	f7ff fd2e 	bl	90008258 <JPEG_Set_HuffAC_Mem>
  if (error != HAL_OK)
900087fc:	2800      	cmp	r0, #0
900087fe:	d1f2      	bne.n	900087e6 <HAL_JPEG_Init+0x1ba>
                              hjpeg->Instance->HUFFENC_DC0);
90008800:	6822      	ldr	r2, [r4, #0]
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
90008802:	4620      	mov	r0, r4
90008804:	4922      	ldr	r1, [pc, #136]	; (90008890 <HAL_JPEG_Init+0x264>)
90008806:	f502 62f8 	add.w	r2, r2, #1984	; 0x7c0
9000880a:	f7ff fc7b 	bl	90008104 <JPEG_Set_HuffDC_Mem>
  if (error != HAL_OK)
9000880e:	2800      	cmp	r0, #0
90008810:	d1e9      	bne.n	900087e6 <HAL_JPEG_Init+0x1ba>
                              hjpeg->Instance->HUFFENC_DC1);
90008812:	6822      	ldr	r2, [r4, #0]
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
90008814:	4620      	mov	r0, r4
90008816:	491f      	ldr	r1, [pc, #124]	; (90008894 <HAL_JPEG_Init+0x268>)
90008818:	f502 62fc 	add.w	r2, r2, #2016	; 0x7e0
9000881c:	f7ff fc72 	bl	90008104 <JPEG_Set_HuffDC_Mem>
  if (JPEG_Set_HuffEnc_Mem(hjpeg) != HAL_OK)
90008820:	2800      	cmp	r0, #0
90008822:	d1e0      	bne.n	900087e6 <HAL_JPEG_Init+0x1ba>
  hjpeg->Instance->CONFR1 |= JPEG_CONFR1_HDR;
90008824:	6822      	ldr	r2, [r4, #0]
  hjpeg->State = HAL_JPEG_STATE_READY;
90008826:	2101      	movs	r1, #1
  hjpeg->Instance->CONFR1 |= JPEG_CONFR1_HDR;
90008828:	6853      	ldr	r3, [r2, #4]
9000882a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
9000882e:	6053      	str	r3, [r2, #4]
  hjpeg->JpegInCount = 0;
90008830:	6220      	str	r0, [r4, #32]
  hjpeg->JpegOutCount = 0;
90008832:	6260      	str	r0, [r4, #36]	; 0x24
  hjpeg->State = HAL_JPEG_STATE_READY;
90008834:	f884 104d 	strb.w	r1, [r4, #77]	; 0x4d
  hjpeg->ErrorCode = HAL_JPEG_ERROR_NONE;
90008838:	6520      	str	r0, [r4, #80]	; 0x50
  hjpeg->Context = 0;
9000883a:	6560      	str	r0, [r4, #84]	; 0x54
}
9000883c:	bd70      	pop	{r4, r5, r6, pc}
    hjpeg->Lock = HAL_UNLOCKED;
9000883e:	f880 204c 	strb.w	r2, [r0, #76]	; 0x4c
    HAL_JPEG_MspInit(hjpeg);
90008842:	f7fb fb4b 	bl	90003edc <HAL_JPEG_MspInit>
90008846:	e6fd      	b.n	90008644 <HAL_JPEG_Init+0x18>
    return HAL_ERROR;
90008848:	2001      	movs	r0, #1
}
9000884a:	4770      	bx	lr
9000884c:	90028af8 	.word	0x90028af8
90008850:	90028a80 	.word	0x90028a80
90008854:	01050100 	.word	0x01050100
90008858:	0b0a0908 	.word	0x0b0a0908
9000885c:	07060504 	.word	0x07060504
90008860:	03020100 	.word	0x03020100
90008864:	7d010000 	.word	0x7d010000
90008868:	04040505 	.word	0x04040505
9000886c:	03040203 	.word	0x03040203
90008870:	03010200 	.word	0x03010200
90008874:	ffff0000 	.word	0xffff0000
90008878:	900289cc 	.word	0x900289cc
9000887c:	09080706 	.word	0x09080706
90008880:	01000404 	.word	0x01000404
90008884:	04040201 	.word	0x04040201
90008888:	05070403 	.word	0x05070403
9000888c:	90028918 	.word	0x90028918
90008890:	90028adc 	.word	0x90028adc
90008894:	90028ac0 	.word	0x90028ac0

90008898 <HAL_JPEG_Decode_DMA>:
  if ((hjpeg == NULL) || (pDataIn == NULL) || (pDataOutMCU == NULL))
90008898:	2b00      	cmp	r3, #0
9000889a:	bf18      	it	ne
9000889c:	2900      	cmpne	r1, #0
9000889e:	d03b      	beq.n	90008918 <HAL_JPEG_Decode_DMA+0x80>
{
900088a0:	b570      	push	{r4, r5, r6, lr}
  if ((hjpeg == NULL) || (pDataIn == NULL) || (pDataOutMCU == NULL))
900088a2:	fab0 f580 	clz	r5, r0
900088a6:	4604      	mov	r4, r0
900088a8:	096d      	lsrs	r5, r5, #5
900088aa:	b330      	cbz	r0, 900088fa <HAL_JPEG_Decode_DMA+0x62>
  __HAL_LOCK(hjpeg);
900088ac:	f890 c04c 	ldrb.w	ip, [r0, #76]	; 0x4c
900088b0:	f1bc 0f01 	cmp.w	ip, #1
900088b4:	d02e      	beq.n	90008914 <HAL_JPEG_Decode_DMA+0x7c>
  if (hjpeg->State == HAL_JPEG_STATE_READY)
900088b6:	f890 c04d 	ldrb.w	ip, [r0, #77]	; 0x4d
  __HAL_LOCK(hjpeg);
900088ba:	f04f 0e01 	mov.w	lr, #1
  if (hjpeg->State == HAL_JPEG_STATE_READY)
900088be:	45f4      	cmp	ip, lr
900088c0:	fa5f f68c 	uxtb.w	r6, ip
  __HAL_LOCK(hjpeg);
900088c4:	f880 e04c 	strb.w	lr, [r0, #76]	; 0x4c
  if (hjpeg->State == HAL_JPEG_STATE_READY)
900088c8:	d119      	bne.n	900088fe <HAL_JPEG_Decode_DMA+0x66>
    hjpeg->InDataLength = InDataLength;
900088ca:	6282      	str	r2, [r0, #40]	; 0x28
    hjpeg->pJpegOutBuffPtr = pDataOutMCU;
900088cc:	e9c0 1306 	strd	r1, r3, [r0, #24]
    hjpeg->OutDataLength = OutDataLength;
900088d0:	9b04      	ldr	r3, [sp, #16]
900088d2:	62c3      	str	r3, [r0, #44]	; 0x2c
    hjpeg->State = HAL_JPEG_STATE_BUSY_DECODING;
900088d4:	2304      	movs	r3, #4
900088d6:	f880 304d 	strb.w	r3, [r0, #77]	; 0x4d
    hjpeg->Context &= ~(JPEG_CONTEXT_OPERATION_MASK | JPEG_CONTEXT_METHOD_MASK);
900088da:	6d43      	ldr	r3, [r0, #84]	; 0x54
900088dc:	f023 030f 	bic.w	r3, r3, #15
900088e0:	6543      	str	r3, [r0, #84]	; 0x54
    hjpeg->Context |= (JPEG_CONTEXT_DECODE | JPEG_CONTEXT_DMA);
900088e2:	6d43      	ldr	r3, [r0, #84]	; 0x54
900088e4:	f043 030e 	orr.w	r3, r3, #14
900088e8:	6543      	str	r3, [r0, #84]	; 0x54
    hjpeg->JpegInCount = 0;
900088ea:	6205      	str	r5, [r0, #32]
    hjpeg->JpegOutCount = 0;
900088ec:	6245      	str	r5, [r0, #36]	; 0x24
    JPEG_Init_Process(hjpeg);
900088ee:	f7ff fd3d 	bl	9000836c <JPEG_Init_Process>
    if (JPEG_DMA_StartProcess(hjpeg) != HAL_OK)
900088f2:	f7ff fd79 	bl	900083e8 <JPEG_DMA_StartProcess>
900088f6:	b930      	cbnz	r0, 90008906 <HAL_JPEG_Decode_DMA+0x6e>
}
900088f8:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
900088fa:	2001      	movs	r0, #1
}
900088fc:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
900088fe:	2002      	movs	r0, #2
    __HAL_UNLOCK(hjpeg);
90008900:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
}
90008904:	bd70      	pop	{r4, r5, r6, pc}
      hjpeg->State = HAL_JPEG_STATE_ERROR;
90008906:	2306      	movs	r3, #6
      return HAL_ERROR;
90008908:	4630      	mov	r0, r6
      __HAL_UNLOCK(hjpeg);
9000890a:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
      hjpeg->State = HAL_JPEG_STATE_ERROR;
9000890e:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
}
90008912:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hjpeg);
90008914:	2002      	movs	r0, #2
}
90008916:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
90008918:	2001      	movs	r0, #1
}
9000891a:	4770      	bx	lr

9000891c <HAL_JPEG_Pause>:
  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
9000891c:	6d43      	ldr	r3, [r0, #84]	; 0x54
9000891e:	f003 030c 	and.w	r3, r3, #12
90008922:	2b0c      	cmp	r3, #12
90008924:	d01a      	beq.n	9000895c <HAL_JPEG_Pause+0x40>
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
90008926:	6d43      	ldr	r3, [r0, #84]	; 0x54
90008928:	f003 030c 	and.w	r3, r3, #12
9000892c:	2b08      	cmp	r3, #8
9000892e:	d001      	beq.n	90008934 <HAL_JPEG_Pause+0x18>
}
90008930:	2000      	movs	r0, #0
90008932:	4770      	bx	lr
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
90008934:	07ca      	lsls	r2, r1, #31
90008936:	d41f      	bmi.n	90008978 <HAL_JPEG_Pause+0x5c>
90008938:	f04f 3cff 	mov.w	ip, #4294967295
9000893c:	f06f 0228 	mvn.w	r2, #40	; 0x28
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
90008940:	078b      	lsls	r3, r1, #30
90008942:	d504      	bpl.n	9000894e <HAL_JPEG_Pause+0x32>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
90008944:	6d43      	ldr	r3, [r0, #84]	; 0x54
90008946:	4694      	mov	ip, r2
90008948:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
9000894c:	6543      	str	r3, [r0, #84]	; 0x54
    __HAL_JPEG_DISABLE_IT(hjpeg, mask);
9000894e:	6802      	ldr	r2, [r0, #0]
}
90008950:	2000      	movs	r0, #0
    __HAL_JPEG_DISABLE_IT(hjpeg, mask);
90008952:	6b13      	ldr	r3, [r2, #48]	; 0x30
90008954:	ea03 030c 	and.w	r3, r3, ip
90008958:	6313      	str	r3, [r2, #48]	; 0x30
}
9000895a:	4770      	bx	lr
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
9000895c:	07cb      	lsls	r3, r1, #31
9000895e:	d503      	bpl.n	90008968 <HAL_JPEG_Pause+0x4c>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
90008960:	6d43      	ldr	r3, [r0, #84]	; 0x54
90008962:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
90008966:	6543      	str	r3, [r0, #84]	; 0x54
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
90008968:	0789      	lsls	r1, r1, #30
9000896a:	d5e1      	bpl.n	90008930 <HAL_JPEG_Pause+0x14>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
9000896c:	6d43      	ldr	r3, [r0, #84]	; 0x54
9000896e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
90008972:	6543      	str	r3, [r0, #84]	; 0x54
}
90008974:	2000      	movs	r0, #0
90008976:	4770      	bx	lr
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
90008978:	6d43      	ldr	r3, [r0, #84]	; 0x54
9000897a:	f06f 0c06 	mvn.w	ip, #6
9000897e:	f06f 022e 	mvn.w	r2, #46	; 0x2e
90008982:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
90008986:	6543      	str	r3, [r0, #84]	; 0x54
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
90008988:	e7da      	b.n	90008940 <HAL_JPEG_Pause+0x24>
9000898a:	bf00      	nop

9000898c <HAL_JPEG_ConfigInputBuffer>:
  hjpeg->pJpegInBuffPtr =  pNewInputBuffer;
9000898c:	6181      	str	r1, [r0, #24]
  hjpeg->InDataLength = InDataLength;
9000898e:	6282      	str	r2, [r0, #40]	; 0x28
}
90008990:	4770      	bx	lr
90008992:	bf00      	nop

90008994 <HAL_JPEG_ConfigOutputBuffer>:
  hjpeg->pJpegOutBuffPtr = pNewOutputBuffer;
90008994:	61c1      	str	r1, [r0, #28]
  hjpeg->OutDataLength = OutDataLength;
90008996:	62c2      	str	r2, [r0, #44]	; 0x2c
}
90008998:	4770      	bx	lr
9000899a:	bf00      	nop

9000899c <HAL_JPEG_EncodeCpltCallback>:
9000899c:	4770      	bx	lr
9000899e:	bf00      	nop

900089a0 <JPEG_MDMAErrorCallback>:
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
900089a0:	6c00      	ldr	r0, [r0, #64]	; 0x40
  hjpeg->State = HAL_JPEG_STATE_READY;
900089a2:	2101      	movs	r1, #1
{
900089a4:	b508      	push	{r3, lr}
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
900089a6:	6803      	ldr	r3, [r0, #0]
900089a8:	681a      	ldr	r2, [r3, #0]
900089aa:	f022 0201 	bic.w	r2, r2, #1
900089ae:	601a      	str	r2, [r3, #0]
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
900089b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
900089b2:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
900089b6:	631a      	str	r2, [r3, #48]	; 0x30
  hjpeg->State = HAL_JPEG_STATE_READY;
900089b8:	f880 104d 	strb.w	r1, [r0, #77]	; 0x4d
  hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
900089bc:	6d03      	ldr	r3, [r0, #80]	; 0x50
900089be:	f043 0304 	orr.w	r3, r3, #4
900089c2:	6503      	str	r3, [r0, #80]	; 0x50
  HAL_JPEG_ErrorCallback(hjpeg);
900089c4:	f7f9 f82a 	bl	90001a1c <HAL_JPEG_ErrorCallback>
}
900089c8:	bd08      	pop	{r3, pc}
900089ca:	bf00      	nop

900089cc <JPEG_MDMAInCpltCallback>:
{
900089cc:	b530      	push	{r4, r5, lr}
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
900089ce:	6c04      	ldr	r4, [r0, #64]	; 0x40
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) == JPEG_CONTEXT_DMA)
900089d0:	f248 010c 	movw	r1, #32780	; 0x800c
{
900089d4:	b083      	sub	sp, #12
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
900089d6:	6822      	ldr	r2, [r4, #0]
900089d8:	6b13      	ldr	r3, [r2, #48]	; 0x30
900089da:	f023 037e 	bic.w	r3, r3, #126	; 0x7e
900089de:	6313      	str	r3, [r2, #48]	; 0x30
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) == JPEG_CONTEXT_DMA)
900089e0:	6d63      	ldr	r3, [r4, #84]	; 0x54
900089e2:	400b      	ands	r3, r1
900089e4:	2b0c      	cmp	r3, #12
900089e6:	d001      	beq.n	900089ec <JPEG_MDMAInCpltCallback+0x20>
}
900089e8:	b003      	add	sp, #12
900089ea:	bd30      	pop	{r4, r5, pc}
    hjpeg->JpegInCount = hjpeg->InDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
900089ec:	6802      	ldr	r2, [r0, #0]
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
900089ee:	4620      	mov	r0, r4
    hjpeg->JpegInCount = hjpeg->InDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
900089f0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
900089f2:	6952      	ldr	r2, [r2, #20]
    inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
900089f4:	6b21      	ldr	r1, [r4, #48]	; 0x30
    hjpeg->JpegInCount = hjpeg->InDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
900089f6:	f3c2 0210 	ubfx	r2, r2, #0, #17
    inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
900089fa:	6a8d      	ldr	r5, [r1, #40]	; 0x28
    hjpeg->JpegInCount = hjpeg->InDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
900089fc:	1a9b      	subs	r3, r3, r2
900089fe:	6223      	str	r3, [r4, #32]
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
90008a00:	6a21      	ldr	r1, [r4, #32]
90008a02:	f7f8 ff97 	bl	90001934 <HAL_JPEG_GetDataCallback>
    if (hjpeg->InDataLength >= inXfrSize)
90008a06:	6aa3      	ldr	r3, [r4, #40]	; 0x28
90008a08:	42ab      	cmp	r3, r5
90008a0a:	d311      	bcc.n	90008a30 <JPEG_MDMAInCpltCallback+0x64>
      if (inXfrSize == 0UL)
90008a0c:	b305      	cbz	r5, 90008a50 <JPEG_MDMAInCpltCallback+0x84>
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
90008a0e:	fbb3 f2f5 	udiv	r2, r3, r5
90008a12:	fb05 3212 	mls	r2, r5, r2, r3
90008a16:	1a9b      	subs	r3, r3, r2
    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
90008a18:	6d62      	ldr	r2, [r4, #84]	; 0x54
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
90008a1a:	62a3      	str	r3, [r4, #40]	; 0x28
    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
90008a1c:	04d1      	lsls	r1, r2, #19
90008a1e:	d400      	bmi.n	90008a22 <JPEG_MDMAInCpltCallback+0x56>
90008a20:	b963      	cbnz	r3, 90008a3c <JPEG_MDMAInCpltCallback+0x70>
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
90008a22:	6822      	ldr	r2, [r4, #0]
90008a24:	6b13      	ldr	r3, [r2, #48]	; 0x30
90008a26:	f043 0360 	orr.w	r3, r3, #96	; 0x60
90008a2a:	6313      	str	r3, [r2, #48]	; 0x30
}
90008a2c:	b003      	add	sp, #12
90008a2e:	bd30      	pop	{r4, r5, pc}
    else if (hjpeg->InDataLength > 0UL)
90008a30:	b1cb      	cbz	r3, 90008a66 <JPEG_MDMAInCpltCallback+0x9a>
      if ((hjpeg->InDataLength % 4UL) != 0UL)
90008a32:	0798      	lsls	r0, r3, #30
90008a34:	d119      	bne.n	90008a6a <JPEG_MDMAInCpltCallback+0x9e>
    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
90008a36:	6d62      	ldr	r2, [r4, #84]	; 0x54
90008a38:	04d2      	lsls	r2, r2, #19
90008a3a:	d4f2      	bmi.n	90008a22 <JPEG_MDMAInCpltCallback+0x56>
      if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
90008a3c:	6822      	ldr	r2, [r4, #0]
90008a3e:	2501      	movs	r5, #1
90008a40:	69a1      	ldr	r1, [r4, #24]
90008a42:	6b20      	ldr	r0, [r4, #48]	; 0x30
90008a44:	3240      	adds	r2, #64	; 0x40
90008a46:	9500      	str	r5, [sp, #0]
90008a48:	f001 f8b0 	bl	90009bac <HAL_MDMA_Start_IT>
90008a4c:	2800      	cmp	r0, #0
90008a4e:	d0e8      	beq.n	90008a22 <JPEG_MDMAInCpltCallback+0x56>
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
90008a50:	6d23      	ldr	r3, [r4, #80]	; 0x50
        hjpeg->State = HAL_JPEG_STATE_ERROR;
90008a52:	2206      	movs	r2, #6
        HAL_JPEG_ErrorCallback(hjpeg);
90008a54:	4620      	mov	r0, r4
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
90008a56:	f043 0304 	orr.w	r3, r3, #4
90008a5a:	6523      	str	r3, [r4, #80]	; 0x50
        hjpeg->State = HAL_JPEG_STATE_ERROR;
90008a5c:	f884 204d 	strb.w	r2, [r4, #77]	; 0x4d
        HAL_JPEG_ErrorCallback(hjpeg);
90008a60:	f7f8 ffdc 	bl	90001a1c <HAL_JPEG_ErrorCallback>
        return;
90008a64:	e7c0      	b.n	900089e8 <JPEG_MDMAInCpltCallback+0x1c>
    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
90008a66:	6d63      	ldr	r3, [r4, #84]	; 0x54
90008a68:	e7db      	b.n	90008a22 <JPEG_MDMAInCpltCallback+0x56>
        hjpeg->InDataLength = ((hjpeg->InDataLength / 4UL) + 1UL) * 4UL;
90008a6a:	f023 0303 	bic.w	r3, r3, #3
90008a6e:	3304      	adds	r3, #4
90008a70:	e7d2      	b.n	90008a18 <JPEG_MDMAInCpltCallback+0x4c>
90008a72:	bf00      	nop

90008a74 <JPEG_DMA_PollResidualData>:
{
90008a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
      if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
90008a76:	6802      	ldr	r2, [r0, #0]
90008a78:	2610      	movs	r6, #16
{
90008a7a:	4604      	mov	r4, r0
    if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
90008a7c:	6d65      	ldr	r5, [r4, #84]	; 0x54
90008a7e:	f415 5500 	ands.w	r5, r5, #8192	; 0x2000
90008a82:	d11d      	bne.n	90008ac0 <JPEG_DMA_PollResidualData+0x4c>
      if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
90008a84:	6b53      	ldr	r3, [r2, #52]	; 0x34
90008a86:	06df      	lsls	r7, r3, #27
90008a88:	d51a      	bpl.n	90008ac0 <JPEG_DMA_PollResidualData+0x4c>
        dataOut = hjpeg->Instance->DOR;
90008a8a:	6c53      	ldr	r3, [r2, #68]	; 0x44
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataOut & 0x000000FFUL);
90008a8c:	69e7      	ldr	r7, [r4, #28]
90008a8e:	6a62      	ldr	r2, [r4, #36]	; 0x24
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataOut & 0x0000FF00UL) >> 8);
90008a90:	0a18      	lsrs	r0, r3, #8
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataOut & 0x00FF0000UL) >> 16);
90008a92:	0c19      	lsrs	r1, r3, #16
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataOut & 0x000000FFUL);
90008a94:	54bb      	strb	r3, [r7, r2]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataOut & 0xFF000000UL) >> 24);
90008a96:	0e1b      	lsrs	r3, r3, #24
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataOut & 0x0000FF00UL) >> 8);
90008a98:	6a67      	ldr	r7, [r4, #36]	; 0x24
90008a9a:	69e2      	ldr	r2, [r4, #28]
90008a9c:	443a      	add	r2, r7
90008a9e:	7050      	strb	r0, [r2, #1]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataOut & 0x00FF0000UL) >> 16);
90008aa0:	6a60      	ldr	r0, [r4, #36]	; 0x24
90008aa2:	69e2      	ldr	r2, [r4, #28]
90008aa4:	4402      	add	r2, r0
90008aa6:	7091      	strb	r1, [r2, #2]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataOut & 0xFF000000UL) >> 24);
90008aa8:	6a61      	ldr	r1, [r4, #36]	; 0x24
90008aaa:	69e2      	ldr	r2, [r4, #28]
90008aac:	440a      	add	r2, r1
90008aae:	70d3      	strb	r3, [r2, #3]
        hjpeg->JpegOutCount += 4UL;
90008ab0:	6a63      	ldr	r3, [r4, #36]	; 0x24
        if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
90008ab2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
        hjpeg->JpegOutCount += 4UL;
90008ab4:	3304      	adds	r3, #4
90008ab6:	6263      	str	r3, [r4, #36]	; 0x24
        if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
90008ab8:	6a63      	ldr	r3, [r4, #36]	; 0x24
90008aba:	4293      	cmp	r3, r2
90008abc:	d021      	beq.n	90008b02 <JPEG_DMA_PollResidualData+0x8e>
  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
90008abe:	6822      	ldr	r2, [r4, #0]
  for (count = JPEG_FIFO_SIZE; count > 0UL; count--)
90008ac0:	3e01      	subs	r6, #1
90008ac2:	d1db      	bne.n	90008a7c <JPEG_DMA_PollResidualData+0x8>
  tmpContext = hjpeg->Context;
90008ac4:	6d61      	ldr	r1, [r4, #84]	; 0x54
  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
90008ac6:	6b53      	ldr	r3, [r2, #52]	; 0x34
90008ac8:	06d8      	lsls	r0, r3, #27
90008aca:	d501      	bpl.n	90008ad0 <JPEG_DMA_PollResidualData+0x5c>
90008acc:	048b      	lsls	r3, r1, #18
90008ace:	d417      	bmi.n	90008b00 <JPEG_DMA_PollResidualData+0x8c>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
90008ad0:	6813      	ldr	r3, [r2, #0]
90008ad2:	f023 0301 	bic.w	r3, r3, #1
90008ad6:	6013      	str	r3, [r2, #0]
    if (hjpeg->JpegOutCount > 0UL)
90008ad8:	6a63      	ldr	r3, [r4, #36]	; 0x24
90008ada:	b9eb      	cbnz	r3, 90008b18 <JPEG_DMA_PollResidualData+0xa4>
    tmpContext = hjpeg->Context;
90008adc:	6d63      	ldr	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hjpeg);
90008ade:	2000      	movs	r0, #0
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
90008ae0:	6d62      	ldr	r2, [r4, #84]	; 0x54
    hjpeg->State = HAL_JPEG_STATE_READY;
90008ae2:	2101      	movs	r1, #1
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
90008ae4:	f003 0303 	and.w	r3, r3, #3
    __HAL_UNLOCK(hjpeg);
90008ae8:	f884 004c 	strb.w	r0, [r4, #76]	; 0x4c
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
90008aec:	f402 4282 	and.w	r2, r2, #16640	; 0x4100
      HAL_JPEG_DecodeCpltCallback(hjpeg);
90008af0:	4620      	mov	r0, r4
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
90008af2:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
90008af4:	6562      	str	r2, [r4, #84]	; 0x54
    hjpeg->State = HAL_JPEG_STATE_READY;
90008af6:	f884 104d 	strb.w	r1, [r4, #77]	; 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
90008afa:	d00a      	beq.n	90008b12 <JPEG_DMA_PollResidualData+0x9e>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
90008afc:	f7ff ff4e 	bl	9000899c <HAL_JPEG_EncodeCpltCallback>
}
90008b00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
90008b02:	6a62      	ldr	r2, [r4, #36]	; 0x24
90008b04:	4620      	mov	r0, r4
90008b06:	69e1      	ldr	r1, [r4, #28]
90008b08:	f7f8 ff34 	bl	90001974 <HAL_JPEG_DataReadyCallback>
  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
90008b0c:	6822      	ldr	r2, [r4, #0]
          hjpeg->JpegOutCount = 0;
90008b0e:	6265      	str	r5, [r4, #36]	; 0x24
90008b10:	e7d6      	b.n	90008ac0 <JPEG_DMA_PollResidualData+0x4c>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
90008b12:	f7f8 ff85 	bl	90001a20 <HAL_JPEG_DecodeCpltCallback>
}
90008b16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
90008b18:	6a62      	ldr	r2, [r4, #36]	; 0x24
90008b1a:	4620      	mov	r0, r4
90008b1c:	69e1      	ldr	r1, [r4, #28]
90008b1e:	f7f8 ff29 	bl	90001974 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
90008b22:	2300      	movs	r3, #0
90008b24:	6263      	str	r3, [r4, #36]	; 0x24
90008b26:	e7d9      	b.n	90008adc <JPEG_DMA_PollResidualData+0x68>

90008b28 <HAL_JPEG_Resume>:
  if ((hjpeg->Context & (JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT)) == 0UL)
90008b28:	6d43      	ldr	r3, [r0, #84]	; 0x54
90008b2a:	f413 5f40 	tst.w	r3, #12288	; 0x3000
90008b2e:	d028      	beq.n	90008b82 <HAL_JPEG_Resume+0x5a>
  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
90008b30:	6d43      	ldr	r3, [r0, #84]	; 0x54
90008b32:	f003 030c 	and.w	r3, r3, #12
90008b36:	2b0c      	cmp	r3, #12
{
90008b38:	b570      	push	{r4, r5, r6, lr}
90008b3a:	4604      	mov	r4, r0
90008b3c:	b082      	sub	sp, #8
90008b3e:	460d      	mov	r5, r1
  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
90008b40:	d007      	beq.n	90008b52 <HAL_JPEG_Resume+0x2a>
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
90008b42:	6d43      	ldr	r3, [r0, #84]	; 0x54
90008b44:	f003 030c 	and.w	r3, r3, #12
90008b48:	2b08      	cmp	r3, #8
90008b4a:	d037      	beq.n	90008bbc <HAL_JPEG_Resume+0x94>
  return HAL_OK;
90008b4c:	2000      	movs	r0, #0
}
90008b4e:	b002      	add	sp, #8
90008b50:	bd70      	pop	{r4, r5, r6, pc}
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
90008b52:	07c8      	lsls	r0, r1, #31
90008b54:	d417      	bmi.n	90008b86 <HAL_JPEG_Resume+0x5e>
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
90008b56:	07a9      	lsls	r1, r5, #30
90008b58:	d5f8      	bpl.n	90008b4c <HAL_JPEG_Resume+0x24>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_OUTPUT);
90008b5a:	6d63      	ldr	r3, [r4, #84]	; 0x54
90008b5c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
90008b60:	6563      	str	r3, [r4, #84]	; 0x54
      if ((hjpeg->Context & JPEG_CONTEXT_ENDING_DMA) != 0UL)
90008b62:	6d63      	ldr	r3, [r4, #84]	; 0x54
90008b64:	041a      	lsls	r2, r3, #16
90008b66:	d453      	bmi.n	90008c10 <HAL_JPEG_Resume+0xe8>
        xfrSize = hjpeg->hdmaout->Init.BufferTransferLength;
90008b68:	6b60      	ldr	r0, [r4, #52]	; 0x34
90008b6a:	6a82      	ldr	r2, [r0, #40]	; 0x28
        if (xfrSize == 0UL)
90008b6c:	2a00      	cmp	r2, #0
90008b6e:	d13e      	bne.n	90008bee <HAL_JPEG_Resume+0xc6>
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
90008b70:	6d23      	ldr	r3, [r4, #80]	; 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
90008b72:	2206      	movs	r2, #6
          return HAL_ERROR;
90008b74:	2001      	movs	r0, #1
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
90008b76:	f043 0304 	orr.w	r3, r3, #4
90008b7a:	6523      	str	r3, [r4, #80]	; 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
90008b7c:	f884 204d 	strb.w	r2, [r4, #77]	; 0x4d
          return HAL_ERROR;
90008b80:	e7e5      	b.n	90008b4e <HAL_JPEG_Resume+0x26>
    return HAL_ERROR;
90008b82:	2001      	movs	r0, #1
}
90008b84:	4770      	bx	lr
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_INPUT);
90008b86:	6d63      	ldr	r3, [r4, #84]	; 0x54
      xfrSize = hjpeg->hdmain->Init.BufferTransferLength;
90008b88:	6b20      	ldr	r0, [r4, #48]	; 0x30
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_INPUT);
90008b8a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
      xfrSize = hjpeg->hdmain->Init.BufferTransferLength;
90008b8e:	6a82      	ldr	r2, [r0, #40]	; 0x28
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_INPUT);
90008b90:	6563      	str	r3, [r4, #84]	; 0x54
      if (xfrSize == 0UL)
90008b92:	2a00      	cmp	r2, #0
90008b94:	d0ec      	beq.n	90008b70 <HAL_JPEG_Resume+0x48>
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % xfrSize);
90008b96:	6aa3      	ldr	r3, [r4, #40]	; 0x28
90008b98:	fbb3 f1f2 	udiv	r1, r3, r2
90008b9c:	fb02 3211 	mls	r2, r2, r1, r3
90008ba0:	1a9b      	subs	r3, r3, r2
90008ba2:	62a3      	str	r3, [r4, #40]	; 0x28
      if (hjpeg->InDataLength > 0UL)
90008ba4:	2b00      	cmp	r3, #0
90008ba6:	d0d6      	beq.n	90008b56 <HAL_JPEG_Resume+0x2e>
        if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
90008ba8:	6822      	ldr	r2, [r4, #0]
90008baa:	2601      	movs	r6, #1
90008bac:	3240      	adds	r2, #64	; 0x40
90008bae:	9600      	str	r6, [sp, #0]
90008bb0:	69a1      	ldr	r1, [r4, #24]
90008bb2:	f000 fffb 	bl	90009bac <HAL_MDMA_Start_IT>
90008bb6:	2800      	cmp	r0, #0
90008bb8:	d0cd      	beq.n	90008b56 <HAL_JPEG_Resume+0x2e>
90008bba:	e7d9      	b.n	90008b70 <HAL_JPEG_Resume+0x48>
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
90008bbc:	f011 0101 	ands.w	r1, r1, #1
90008bc0:	d013      	beq.n	90008bea <HAL_JPEG_Resume+0xc2>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_INPUT);
90008bc2:	6d43      	ldr	r3, [r0, #84]	; 0x54
90008bc4:	222e      	movs	r2, #46	; 0x2e
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
90008bc6:	2106      	movs	r1, #6
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_INPUT);
90008bc8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
90008bcc:	6543      	str	r3, [r0, #84]	; 0x54
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
90008bce:	07ab      	lsls	r3, r5, #30
90008bd0:	d504      	bpl.n	90008bdc <HAL_JPEG_Resume+0xb4>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_OUTPUT);
90008bd2:	6d63      	ldr	r3, [r4, #84]	; 0x54
      mask |= (JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC);
90008bd4:	4611      	mov	r1, r2
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_OUTPUT);
90008bd6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
90008bda:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_JPEG_ENABLE_IT(hjpeg, mask);
90008bdc:	6822      	ldr	r2, [r4, #0]
  return HAL_OK;
90008bde:	2000      	movs	r0, #0
    __HAL_JPEG_ENABLE_IT(hjpeg, mask);
90008be0:	6b13      	ldr	r3, [r2, #48]	; 0x30
90008be2:	430b      	orrs	r3, r1
90008be4:	6313      	str	r3, [r2, #48]	; 0x30
}
90008be6:	b002      	add	sp, #8
90008be8:	bd70      	pop	{r4, r5, r6, pc}
90008bea:	2228      	movs	r2, #40	; 0x28
90008bec:	e7ef      	b.n	90008bce <HAL_JPEG_Resume+0xa6>
        hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % xfrSize);
90008bee:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
90008bf0:	2501      	movs	r5, #1
        hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % xfrSize);
90008bf2:	fbb3 f1f2 	udiv	r1, r3, r2
90008bf6:	fb02 3211 	mls	r2, r2, r1, r3
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
90008bfa:	6821      	ldr	r1, [r4, #0]
        hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % xfrSize);
90008bfc:	1a9b      	subs	r3, r3, r2
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
90008bfe:	3144      	adds	r1, #68	; 0x44
        hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % xfrSize);
90008c00:	62e3      	str	r3, [r4, #44]	; 0x2c
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
90008c02:	9500      	str	r5, [sp, #0]
90008c04:	69e2      	ldr	r2, [r4, #28]
90008c06:	f000 ffd1 	bl	90009bac <HAL_MDMA_Start_IT>
90008c0a:	2800      	cmp	r0, #0
90008c0c:	d09e      	beq.n	90008b4c <HAL_JPEG_Resume+0x24>
90008c0e:	e7af      	b.n	90008b70 <HAL_JPEG_Resume+0x48>
        JPEG_DMA_PollResidualData(hjpeg);
90008c10:	4620      	mov	r0, r4
90008c12:	f7ff ff2f 	bl	90008a74 <JPEG_DMA_PollResidualData>
90008c16:	e799      	b.n	90008b4c <HAL_JPEG_Resume+0x24>

90008c18 <JPEG_MDMAOutCpltCallback>:
{
90008c18:	b530      	push	{r4, r5, lr}
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
90008c1a:	6c04      	ldr	r4, [r0, #64]	; 0x40
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) ==
90008c1c:	f248 010c 	movw	r1, #32780	; 0x800c
{
90008c20:	b083      	sub	sp, #12
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
90008c22:	6823      	ldr	r3, [r4, #0]
90008c24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90008c26:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
90008c2a:	631a      	str	r2, [r3, #48]	; 0x30
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) ==
90008c2c:	6d62      	ldr	r2, [r4, #84]	; 0x54
90008c2e:	400a      	ands	r2, r1
90008c30:	2a0c      	cmp	r2, #12
90008c32:	d001      	beq.n	90008c38 <JPEG_MDMAOutCpltCallback+0x20>
}
90008c34:	b003      	add	sp, #12
90008c36:	bd30      	pop	{r4, r5, pc}
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) == 0UL)
90008c38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
90008c3a:	0692      	lsls	r2, r2, #26
90008c3c:	d505      	bpl.n	90008c4a <JPEG_MDMAOutCpltCallback+0x32>
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
90008c3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90008c40:	f042 0260 	orr.w	r2, r2, #96	; 0x60
90008c44:	631a      	str	r2, [r3, #48]	; 0x30
}
90008c46:	b003      	add	sp, #12
90008c48:	bd30      	pop	{r4, r5, pc}
      hjpeg->JpegOutCount = hjpeg->OutDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
90008c4a:	6802      	ldr	r2, [r0, #0]
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
90008c4c:	4620      	mov	r0, r4
      hjpeg->JpegOutCount = hjpeg->OutDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
90008c4e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
90008c50:	6952      	ldr	r2, [r2, #20]
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
90008c52:	69e1      	ldr	r1, [r4, #28]
      hjpeg->JpegOutCount = hjpeg->OutDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
90008c54:	f3c2 0210 	ubfx	r2, r2, #0, #17
90008c58:	1a9b      	subs	r3, r3, r2
90008c5a:	6263      	str	r3, [r4, #36]	; 0x24
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
90008c5c:	6a62      	ldr	r2, [r4, #36]	; 0x24
90008c5e:	f7f8 fe89 	bl	90001974 <HAL_JPEG_DataReadyCallback>
      if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
90008c62:	6d63      	ldr	r3, [r4, #84]	; 0x54
90008c64:	049b      	lsls	r3, r3, #18
90008c66:	d501      	bpl.n	90008c6c <JPEG_MDMAOutCpltCallback+0x54>
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
90008c68:	6823      	ldr	r3, [r4, #0]
90008c6a:	e7e8      	b.n	90008c3e <JPEG_MDMAOutCpltCallback+0x26>
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
90008c6c:	6821      	ldr	r1, [r4, #0]
90008c6e:	2501      	movs	r5, #1
90008c70:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
90008c72:	69e2      	ldr	r2, [r4, #28]
90008c74:	3144      	adds	r1, #68	; 0x44
90008c76:	6b60      	ldr	r0, [r4, #52]	; 0x34
90008c78:	9500      	str	r5, [sp, #0]
90008c7a:	f000 ff97 	bl	90009bac <HAL_MDMA_Start_IT>
90008c7e:	2800      	cmp	r0, #0
90008c80:	d0f2      	beq.n	90008c68 <JPEG_MDMAOutCpltCallback+0x50>
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
90008c82:	6d23      	ldr	r3, [r4, #80]	; 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
90008c84:	2206      	movs	r2, #6
          HAL_JPEG_ErrorCallback(hjpeg);
90008c86:	4620      	mov	r0, r4
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
90008c88:	f043 0304 	orr.w	r3, r3, #4
90008c8c:	6523      	str	r3, [r4, #80]	; 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
90008c8e:	f884 204d 	strb.w	r2, [r4, #77]	; 0x4d
          HAL_JPEG_ErrorCallback(hjpeg);
90008c92:	f7f8 fec3 	bl	90001a1c <HAL_JPEG_ErrorCallback>
          return;
90008c96:	e7cd      	b.n	90008c34 <JPEG_MDMAOutCpltCallback+0x1c>

90008c98 <JPEG_MDMAOutAbortCallback>:
{
90008c98:	b538      	push	{r3, r4, r5, lr}
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
90008c9a:	6c04      	ldr	r4, [r0, #64]	; 0x40
  if ((hjpeg->Context & JPEG_CONTEXT_ENDING_DMA) != 0UL)
90008c9c:	6d63      	ldr	r3, [r4, #84]	; 0x54
90008c9e:	041a      	lsls	r2, r3, #16
90008ca0:	d400      	bmi.n	90008ca4 <JPEG_MDMAOutAbortCallback+0xc>
}
90008ca2:	bd38      	pop	{r3, r4, r5, pc}
  hjpeg->JpegOutCount = hjpeg->OutDataLength - (hjpeg->hdmaout->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
90008ca4:	6b63      	ldr	r3, [r4, #52]	; 0x34
90008ca6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
90008ca8:	681b      	ldr	r3, [r3, #0]
90008caa:	695b      	ldr	r3, [r3, #20]
90008cac:	f3c3 0310 	ubfx	r3, r3, #0, #17
90008cb0:	1ad3      	subs	r3, r2, r3
90008cb2:	6263      	str	r3, [r4, #36]	; 0x24
  if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
90008cb4:	6a63      	ldr	r3, [r4, #36]	; 0x24
90008cb6:	429a      	cmp	r2, r3
90008cb8:	d025      	beq.n	90008d06 <JPEG_MDMAOutAbortCallback+0x6e>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL)
90008cba:	6822      	ldr	r2, [r4, #0]
90008cbc:	6b55      	ldr	r5, [r2, #52]	; 0x34
90008cbe:	f015 0510 	ands.w	r5, r5, #16
90008cc2:	d118      	bne.n	90008cf6 <JPEG_MDMAOutAbortCallback+0x5e>
    if (hjpeg->JpegOutCount > 0UL)
90008cc4:	6a63      	ldr	r3, [r4, #36]	; 0x24
90008cc6:	bb4b      	cbnz	r3, 90008d1c <JPEG_MDMAOutAbortCallback+0x84>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
90008cc8:	6813      	ldr	r3, [r2, #0]
    __HAL_UNLOCK(hjpeg);
90008cca:	2000      	movs	r0, #0
    hjpeg->State = HAL_JPEG_STATE_READY;
90008ccc:	2101      	movs	r1, #1
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
90008cce:	f023 0301 	bic.w	r3, r3, #1
90008cd2:	6013      	str	r3, [r2, #0]
    tmpContext = hjpeg->Context;
90008cd4:	6d63      	ldr	r3, [r4, #84]	; 0x54
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
90008cd6:	6d62      	ldr	r2, [r4, #84]	; 0x54
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
90008cd8:	f003 0303 	and.w	r3, r3, #3
    __HAL_UNLOCK(hjpeg);
90008cdc:	f884 004c 	strb.w	r0, [r4, #76]	; 0x4c
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
90008ce0:	f402 4282 	and.w	r2, r2, #16640	; 0x4100
      HAL_JPEG_DecodeCpltCallback(hjpeg);
90008ce4:	4620      	mov	r0, r4
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
90008ce6:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
90008ce8:	6562      	str	r2, [r4, #84]	; 0x54
    hjpeg->State = HAL_JPEG_STATE_READY;
90008cea:	f884 104d 	strb.w	r1, [r4, #77]	; 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
90008cee:	d012      	beq.n	90008d16 <JPEG_MDMAOutAbortCallback+0x7e>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
90008cf0:	f7ff fe54 	bl	9000899c <HAL_JPEG_EncodeCpltCallback>
}
90008cf4:	bd38      	pop	{r3, r4, r5, pc}
  else if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
90008cf6:	6d63      	ldr	r3, [r4, #84]	; 0x54
90008cf8:	049b      	lsls	r3, r3, #18
90008cfa:	d4d2      	bmi.n	90008ca2 <JPEG_MDMAOutAbortCallback+0xa>
    JPEG_DMA_PollResidualData(hjpeg);
90008cfc:	4620      	mov	r0, r4
}
90008cfe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    JPEG_DMA_PollResidualData(hjpeg);
90008d02:	f7ff beb7 	b.w	90008a74 <JPEG_DMA_PollResidualData>
    HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
90008d06:	6a62      	ldr	r2, [r4, #36]	; 0x24
90008d08:	4620      	mov	r0, r4
90008d0a:	69e1      	ldr	r1, [r4, #28]
90008d0c:	f7f8 fe32 	bl	90001974 <HAL_JPEG_DataReadyCallback>
    hjpeg->JpegOutCount = 0;
90008d10:	2300      	movs	r3, #0
90008d12:	6263      	str	r3, [r4, #36]	; 0x24
90008d14:	e7d1      	b.n	90008cba <JPEG_MDMAOutAbortCallback+0x22>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
90008d16:	f7f8 fe83 	bl	90001a20 <HAL_JPEG_DecodeCpltCallback>
}
90008d1a:	bd38      	pop	{r3, r4, r5, pc}
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
90008d1c:	6a62      	ldr	r2, [r4, #36]	; 0x24
90008d1e:	4620      	mov	r0, r4
90008d20:	69e1      	ldr	r1, [r4, #28]
90008d22:	f7f8 fe27 	bl	90001974 <HAL_JPEG_DataReadyCallback>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
90008d26:	6822      	ldr	r2, [r4, #0]
      hjpeg->JpegOutCount = 0;
90008d28:	6265      	str	r5, [r4, #36]	; 0x24
90008d2a:	e7cd      	b.n	90008cc8 <JPEG_MDMAOutAbortCallback+0x30>

90008d2c <JPEG_Process>:
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
90008d2c:	6d43      	ldr	r3, [r0, #84]	; 0x54
90008d2e:	f003 0303 	and.w	r3, r3, #3
90008d32:	2b02      	cmp	r3, #2
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
90008d34:	6803      	ldr	r3, [r0, #0]
{
90008d36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90008d3a:	4604      	mov	r4, r0
90008d3c:	b082      	sub	sp, #8
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
90008d3e:	d01f      	beq.n	90008d80 <JPEG_Process+0x54>
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL)
90008d40:	6d62      	ldr	r2, [r4, #84]	; 0x54
90008d42:	04d7      	lsls	r7, r2, #19
90008d44:	d407      	bmi.n	90008d56 <JPEG_Process+0x2a>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFTF) != 0UL)
90008d46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
90008d48:	0796      	lsls	r6, r2, #30
90008d4a:	f100 811d 	bmi.w	90008f88 <JPEG_Process+0x25c>
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFNFF) != 0UL)
90008d4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
90008d50:	0750      	lsls	r0, r2, #29
90008d52:	f100 81b1 	bmi.w	900090b8 <JPEG_Process+0x38c>
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
90008d56:	6d65      	ldr	r5, [r4, #84]	; 0x54
90008d58:	f415 5500 	ands.w	r5, r5, #8192	; 0x2000
90008d5c:	d107      	bne.n	90008d6e <JPEG_Process+0x42>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFTF) != 0UL)
90008d5e:	6b5e      	ldr	r6, [r3, #52]	; 0x34
90008d60:	f016 0608 	ands.w	r6, r6, #8
90008d64:	d14c      	bne.n	90008e00 <JPEG_Process+0xd4>
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
90008d66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
90008d68:	06d2      	lsls	r2, r2, #27
90008d6a:	f100 81e3 	bmi.w	90009134 <JPEG_Process+0x408>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
90008d6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
90008d70:	f002 0238 	and.w	r2, r2, #56	; 0x38
90008d74:	2a20      	cmp	r2, #32
90008d76:	d01a      	beq.n	90008dae <JPEG_Process+0x82>
  return JPEG_PROCESS_ONGOING;
90008d78:	2000      	movs	r0, #0
}
90008d7a:	b002      	add	sp, #8
90008d7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
90008d80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
90008d82:	0652      	lsls	r2, r2, #25
90008d84:	d5dc      	bpl.n	90008d40 <JPEG_Process+0x14>
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
90008d86:	1d01      	adds	r1, r0, #4
  if ((hjpeg == NULL) || (pInfo == NULL))
90008d88:	9101      	str	r1, [sp, #4]
90008d8a:	f7ff fb79 	bl	90008480 <HAL_JPEG_GetInfo.part.0>
      hjpeg->Conf.ImageQuality = 0;
90008d8e:	2300      	movs	r3, #0
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
90008d90:	9901      	ldr	r1, [sp, #4]
90008d92:	4620      	mov	r0, r4
      hjpeg->Conf.ImageQuality = 0;
90008d94:	6163      	str	r3, [r4, #20]
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
90008d96:	f7f8 fd97 	bl	900018c8 <HAL_JPEG_InfoReadyCallback>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
90008d9a:	6823      	ldr	r3, [r4, #0]
90008d9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90008d9e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
90008da2:	631a      	str	r2, [r3, #48]	; 0x30
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
90008da4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
90008da6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
90008daa:	639a      	str	r2, [r3, #56]	; 0x38
90008dac:	e7c8      	b.n	90008d40 <JPEG_Process+0x14>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
90008dae:	681a      	ldr	r2, [r3, #0]
90008db0:	f022 0201 	bic.w	r2, r2, #1
90008db4:	601a      	str	r2, [r3, #0]
    if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
90008db6:	6d62      	ldr	r2, [r4, #84]	; 0x54
90008db8:	f002 020c 	and.w	r2, r2, #12
90008dbc:	2a08      	cmp	r2, #8
90008dbe:	f000 81e6 	beq.w	9000918e <JPEG_Process+0x462>
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
90008dc2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
90008dc4:	f042 0260 	orr.w	r2, r2, #96	; 0x60
90008dc8:	639a      	str	r2, [r3, #56]	; 0x38
    if (hjpeg->JpegOutCount > 0UL)
90008dca:	6a63      	ldr	r3, [r4, #36]	; 0x24
90008dcc:	2b00      	cmp	r3, #0
90008dce:	f040 81e3 	bne.w	90009198 <JPEG_Process+0x46c>
    tmpContext = hjpeg->Context;
90008dd2:	6d63      	ldr	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hjpeg);
90008dd4:	2100      	movs	r1, #0
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
90008dd6:	6d62      	ldr	r2, [r4, #84]	; 0x54
    hjpeg->State = HAL_JPEG_STATE_READY;
90008dd8:	2501      	movs	r5, #1
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
90008dda:	f003 0303 	and.w	r3, r3, #3
      HAL_JPEG_DecodeCpltCallback(hjpeg);
90008dde:	4620      	mov	r0, r4
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
90008de0:	f402 4282 	and.w	r2, r2, #16640	; 0x4100
    __HAL_UNLOCK(hjpeg);
90008de4:	f884 104c 	strb.w	r1, [r4, #76]	; 0x4c
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
90008de8:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
90008dea:	6562      	str	r2, [r4, #84]	; 0x54
    hjpeg->State = HAL_JPEG_STATE_READY;
90008dec:	f884 504d 	strb.w	r5, [r4, #77]	; 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
90008df0:	f000 81c9 	beq.w	90009186 <JPEG_Process+0x45a>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
90008df4:	f7ff fdd2 	bl	9000899c <HAL_JPEG_EncodeCpltCallback>
    return JPEG_PROCESS_DONE;
90008df8:	4628      	mov	r0, r5
}
90008dfa:	b002      	add	sp, #8
90008dfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
90008e00:	6a62      	ldr	r2, [r4, #36]	; 0x24
90008e02:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
90008e04:	3220      	adds	r2, #32
90008e06:	4296      	cmp	r6, r2
90008e08:	f0c0 81e4 	bcc.w	900091d4 <JPEG_Process+0x4a8>
      dataword = hjpeg->Instance->DOR;
90008e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
90008e0e:	69e1      	ldr	r1, [r4, #28]
90008e10:	6a62      	ldr	r2, [r4, #36]	; 0x24
90008e12:	548b      	strb	r3, [r1, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
90008e14:	6a61      	ldr	r1, [r4, #36]	; 0x24
90008e16:	69e2      	ldr	r2, [r4, #28]
90008e18:	440a      	add	r2, r1
90008e1a:	0a19      	lsrs	r1, r3, #8
90008e1c:	7051      	strb	r1, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
90008e1e:	6a61      	ldr	r1, [r4, #36]	; 0x24
90008e20:	69e2      	ldr	r2, [r4, #28]
90008e22:	440a      	add	r2, r1
90008e24:	0c19      	lsrs	r1, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
90008e26:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
90008e28:	7091      	strb	r1, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
90008e2a:	6a61      	ldr	r1, [r4, #36]	; 0x24
90008e2c:	69e2      	ldr	r2, [r4, #28]
90008e2e:	440a      	add	r2, r1
90008e30:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
90008e32:	6a63      	ldr	r3, [r4, #36]	; 0x24
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
90008e34:	6822      	ldr	r2, [r4, #0]
      hjpeg->JpegOutCount += 4UL;
90008e36:	3304      	adds	r3, #4
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
90008e38:	69e1      	ldr	r1, [r4, #28]
      hjpeg->JpegOutCount += 4UL;
90008e3a:	6263      	str	r3, [r4, #36]	; 0x24
      dataword = hjpeg->Instance->DOR;
90008e3c:	6c53      	ldr	r3, [r2, #68]	; 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
90008e3e:	6a62      	ldr	r2, [r4, #36]	; 0x24
90008e40:	548b      	strb	r3, [r1, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
90008e42:	6a61      	ldr	r1, [r4, #36]	; 0x24
90008e44:	69e2      	ldr	r2, [r4, #28]
90008e46:	440a      	add	r2, r1
90008e48:	0a19      	lsrs	r1, r3, #8
90008e4a:	7051      	strb	r1, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
90008e4c:	6a61      	ldr	r1, [r4, #36]	; 0x24
90008e4e:	69e2      	ldr	r2, [r4, #28]
90008e50:	440a      	add	r2, r1
90008e52:	0c19      	lsrs	r1, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
90008e54:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
90008e56:	7091      	strb	r1, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
90008e58:	6a61      	ldr	r1, [r4, #36]	; 0x24
90008e5a:	69e2      	ldr	r2, [r4, #28]
90008e5c:	440a      	add	r2, r1
90008e5e:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
90008e60:	6a63      	ldr	r3, [r4, #36]	; 0x24
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
90008e62:	6822      	ldr	r2, [r4, #0]
      hjpeg->JpegOutCount += 4UL;
90008e64:	3304      	adds	r3, #4
90008e66:	6263      	str	r3, [r4, #36]	; 0x24
      dataword = hjpeg->Instance->DOR;
90008e68:	6c53      	ldr	r3, [r2, #68]	; 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
90008e6a:	6a62      	ldr	r2, [r4, #36]	; 0x24
90008e6c:	69e1      	ldr	r1, [r4, #28]
90008e6e:	548b      	strb	r3, [r1, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
90008e70:	6a61      	ldr	r1, [r4, #36]	; 0x24
90008e72:	69e2      	ldr	r2, [r4, #28]
90008e74:	440a      	add	r2, r1
90008e76:	0a19      	lsrs	r1, r3, #8
90008e78:	7051      	strb	r1, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
90008e7a:	6a61      	ldr	r1, [r4, #36]	; 0x24
90008e7c:	69e2      	ldr	r2, [r4, #28]
90008e7e:	440a      	add	r2, r1
90008e80:	0c19      	lsrs	r1, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
90008e82:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
90008e84:	7091      	strb	r1, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
90008e86:	6a61      	ldr	r1, [r4, #36]	; 0x24
90008e88:	69e2      	ldr	r2, [r4, #28]
90008e8a:	440a      	add	r2, r1
90008e8c:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
90008e8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
90008e90:	6822      	ldr	r2, [r4, #0]
      hjpeg->JpegOutCount += 4UL;
90008e92:	3304      	adds	r3, #4
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
90008e94:	69e1      	ldr	r1, [r4, #28]
      hjpeg->JpegOutCount += 4UL;
90008e96:	6263      	str	r3, [r4, #36]	; 0x24
      dataword = hjpeg->Instance->DOR;
90008e98:	6c53      	ldr	r3, [r2, #68]	; 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
90008e9a:	6a62      	ldr	r2, [r4, #36]	; 0x24
90008e9c:	548b      	strb	r3, [r1, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
90008e9e:	6a61      	ldr	r1, [r4, #36]	; 0x24
90008ea0:	69e2      	ldr	r2, [r4, #28]
90008ea2:	440a      	add	r2, r1
90008ea4:	0a19      	lsrs	r1, r3, #8
90008ea6:	7051      	strb	r1, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
90008ea8:	6a61      	ldr	r1, [r4, #36]	; 0x24
90008eaa:	69e2      	ldr	r2, [r4, #28]
90008eac:	440a      	add	r2, r1
90008eae:	0c19      	lsrs	r1, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
90008eb0:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
90008eb2:	7091      	strb	r1, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
90008eb4:	6a61      	ldr	r1, [r4, #36]	; 0x24
90008eb6:	69e2      	ldr	r2, [r4, #28]
90008eb8:	440a      	add	r2, r1
90008eba:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
90008ebc:	6a63      	ldr	r3, [r4, #36]	; 0x24
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
90008ebe:	6822      	ldr	r2, [r4, #0]
      hjpeg->JpegOutCount += 4UL;
90008ec0:	3304      	adds	r3, #4
90008ec2:	6263      	str	r3, [r4, #36]	; 0x24
      dataword = hjpeg->Instance->DOR;
90008ec4:	6c53      	ldr	r3, [r2, #68]	; 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
90008ec6:	6a62      	ldr	r2, [r4, #36]	; 0x24
90008ec8:	69e1      	ldr	r1, [r4, #28]
90008eca:	548b      	strb	r3, [r1, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
90008ecc:	6a61      	ldr	r1, [r4, #36]	; 0x24
90008ece:	69e2      	ldr	r2, [r4, #28]
90008ed0:	440a      	add	r2, r1
90008ed2:	0a19      	lsrs	r1, r3, #8
90008ed4:	7051      	strb	r1, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
90008ed6:	6a61      	ldr	r1, [r4, #36]	; 0x24
90008ed8:	69e2      	ldr	r2, [r4, #28]
90008eda:	440a      	add	r2, r1
90008edc:	0c19      	lsrs	r1, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
90008ede:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
90008ee0:	7091      	strb	r1, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
90008ee2:	6a61      	ldr	r1, [r4, #36]	; 0x24
90008ee4:	69e2      	ldr	r2, [r4, #28]
90008ee6:	440a      	add	r2, r1
90008ee8:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
90008eea:	6a63      	ldr	r3, [r4, #36]	; 0x24
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
90008eec:	6822      	ldr	r2, [r4, #0]
      hjpeg->JpegOutCount += 4UL;
90008eee:	3304      	adds	r3, #4
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
90008ef0:	69e1      	ldr	r1, [r4, #28]
      hjpeg->JpegOutCount += 4UL;
90008ef2:	6263      	str	r3, [r4, #36]	; 0x24
      dataword = hjpeg->Instance->DOR;
90008ef4:	6c53      	ldr	r3, [r2, #68]	; 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
90008ef6:	6a62      	ldr	r2, [r4, #36]	; 0x24
90008ef8:	548b      	strb	r3, [r1, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
90008efa:	6a61      	ldr	r1, [r4, #36]	; 0x24
90008efc:	69e2      	ldr	r2, [r4, #28]
90008efe:	440a      	add	r2, r1
90008f00:	0a19      	lsrs	r1, r3, #8
90008f02:	7051      	strb	r1, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
90008f04:	6a61      	ldr	r1, [r4, #36]	; 0x24
90008f06:	69e2      	ldr	r2, [r4, #28]
90008f08:	440a      	add	r2, r1
90008f0a:	0c19      	lsrs	r1, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
90008f0c:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
90008f0e:	7091      	strb	r1, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
90008f10:	6a61      	ldr	r1, [r4, #36]	; 0x24
90008f12:	69e2      	ldr	r2, [r4, #28]
90008f14:	440a      	add	r2, r1
90008f16:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
90008f18:	6a63      	ldr	r3, [r4, #36]	; 0x24
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
90008f1a:	6822      	ldr	r2, [r4, #0]
      hjpeg->JpegOutCount += 4UL;
90008f1c:	3304      	adds	r3, #4
90008f1e:	6263      	str	r3, [r4, #36]	; 0x24
      dataword = hjpeg->Instance->DOR;
90008f20:	6c53      	ldr	r3, [r2, #68]	; 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
90008f22:	6a62      	ldr	r2, [r4, #36]	; 0x24
90008f24:	69e1      	ldr	r1, [r4, #28]
90008f26:	548b      	strb	r3, [r1, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
90008f28:	6a61      	ldr	r1, [r4, #36]	; 0x24
90008f2a:	69e2      	ldr	r2, [r4, #28]
90008f2c:	440a      	add	r2, r1
90008f2e:	0a19      	lsrs	r1, r3, #8
90008f30:	7051      	strb	r1, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
90008f32:	6a61      	ldr	r1, [r4, #36]	; 0x24
90008f34:	69e2      	ldr	r2, [r4, #28]
90008f36:	440a      	add	r2, r1
90008f38:	0c19      	lsrs	r1, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
90008f3a:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
90008f3c:	7091      	strb	r1, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
90008f3e:	6a61      	ldr	r1, [r4, #36]	; 0x24
90008f40:	69e2      	ldr	r2, [r4, #28]
90008f42:	440a      	add	r2, r1
90008f44:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
90008f46:	6a63      	ldr	r3, [r4, #36]	; 0x24
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
90008f48:	6822      	ldr	r2, [r4, #0]
      hjpeg->JpegOutCount += 4UL;
90008f4a:	3304      	adds	r3, #4
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
90008f4c:	69e1      	ldr	r1, [r4, #28]
      hjpeg->JpegOutCount += 4UL;
90008f4e:	6263      	str	r3, [r4, #36]	; 0x24
      dataword = hjpeg->Instance->DOR;
90008f50:	6c53      	ldr	r3, [r2, #68]	; 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
90008f52:	6a62      	ldr	r2, [r4, #36]	; 0x24
90008f54:	548b      	strb	r3, [r1, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
90008f56:	6a61      	ldr	r1, [r4, #36]	; 0x24
90008f58:	69e2      	ldr	r2, [r4, #28]
90008f5a:	440a      	add	r2, r1
90008f5c:	0a19      	lsrs	r1, r3, #8
90008f5e:	7051      	strb	r1, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
90008f60:	6a61      	ldr	r1, [r4, #36]	; 0x24
90008f62:	69e2      	ldr	r2, [r4, #28]
90008f64:	440a      	add	r2, r1
90008f66:	0c19      	lsrs	r1, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
90008f68:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
90008f6a:	7091      	strb	r1, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
90008f6c:	6a61      	ldr	r1, [r4, #36]	; 0x24
90008f6e:	69e2      	ldr	r2, [r4, #28]
90008f70:	440a      	add	r2, r1
90008f72:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
90008f74:	6a63      	ldr	r3, [r4, #36]	; 0x24
90008f76:	3304      	adds	r3, #4
90008f78:	6263      	str	r3, [r4, #36]	; 0x24
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
90008f7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
90008f7c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
90008f7e:	429a      	cmp	r2, r3
90008f80:	f000 82ae 	beq.w	900094e0 <JPEG_Process+0x7b4>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
90008f84:	6823      	ldr	r3, [r4, #0]
90008f86:	e6f2      	b.n	90008d6e <JPEG_Process+0x42>
  if ((hjpeg->InDataLength == 0UL) || (nbRequestWords == 0UL))
90008f88:	6aa2      	ldr	r2, [r4, #40]	; 0x28
90008f8a:	2a00      	cmp	r2, #0
90008f8c:	f000 810c 	beq.w	900091a8 <JPEG_Process+0x47c>
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
90008f90:	6a21      	ldr	r1, [r4, #32]
90008f92:	428a      	cmp	r2, r1
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
90008f94:	6a21      	ldr	r1, [r4, #32]
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
90008f96:	f240 81a4 	bls.w	900092e2 <JPEG_Process+0x5b6>
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
90008f9a:	1a52      	subs	r2, r2, r1
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
90008f9c:	6d61      	ldr	r1, [r4, #84]	; 0x54
90008f9e:	04cd      	lsls	r5, r1, #19
90008fa0:	f53f aed9 	bmi.w	90008d56 <JPEG_Process+0x2a>
90008fa4:	2a00      	cmp	r2, #0
90008fa6:	f43f aed6 	beq.w	90008d56 <JPEG_Process+0x2a>
    if (nb_words >= nbRequestWords)
90008faa:	2a1f      	cmp	r2, #31
    nb_words = nb_bytes / 4UL;
90008fac:	ea4f 0192 	mov.w	r1, r2, lsr #2
    if (nb_words >= nbRequestWords)
90008fb0:	f240 8203 	bls.w	900093ba <JPEG_Process+0x68e>
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
90008fb4:	69a2      	ldr	r2, [r4, #24]
        input_count = hjpeg->JpegInCount;
90008fb6:	6a21      	ldr	r1, [r4, #32]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
90008fb8:	1850      	adds	r0, r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
90008fba:	5c55      	ldrb	r5, [r2, r1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
90008fbc:	7881      	ldrb	r1, [r0, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
90008fbe:	7846      	ldrb	r6, [r0, #1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
90008fc0:	0409      	lsls	r1, r1, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
90008fc2:	78c0      	ldrb	r0, [r0, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
90008fc4:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
90008fc8:	4329      	orrs	r1, r5
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
90008fca:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
90008fce:	6419      	str	r1, [r3, #64]	; 0x40
        hjpeg->JpegInCount += 4UL;
90008fd0:	6a21      	ldr	r1, [r4, #32]
90008fd2:	3104      	adds	r1, #4
90008fd4:	6221      	str	r1, [r4, #32]
        input_count = hjpeg->JpegInCount;
90008fd6:	6a21      	ldr	r1, [r4, #32]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
90008fd8:	1850      	adds	r0, r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
90008fda:	5c55      	ldrb	r5, [r2, r1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
90008fdc:	7881      	ldrb	r1, [r0, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
90008fde:	7846      	ldrb	r6, [r0, #1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
90008fe0:	0409      	lsls	r1, r1, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
90008fe2:	78c0      	ldrb	r0, [r0, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
90008fe4:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
90008fe8:	4329      	orrs	r1, r5
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
90008fea:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
90008fee:	6419      	str	r1, [r3, #64]	; 0x40
        hjpeg->JpegInCount += 4UL;
90008ff0:	6a21      	ldr	r1, [r4, #32]
90008ff2:	3104      	adds	r1, #4
90008ff4:	6221      	str	r1, [r4, #32]
        input_count = hjpeg->JpegInCount;
90008ff6:	6a21      	ldr	r1, [r4, #32]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
90008ff8:	1850      	adds	r0, r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
90008ffa:	5c55      	ldrb	r5, [r2, r1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
90008ffc:	7881      	ldrb	r1, [r0, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
90008ffe:	7846      	ldrb	r6, [r0, #1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
90009000:	0409      	lsls	r1, r1, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
90009002:	78c0      	ldrb	r0, [r0, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
90009004:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
90009008:	4329      	orrs	r1, r5
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000900a:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000900e:	6419      	str	r1, [r3, #64]	; 0x40
        hjpeg->JpegInCount += 4UL;
90009010:	6a21      	ldr	r1, [r4, #32]
90009012:	3104      	adds	r1, #4
90009014:	6221      	str	r1, [r4, #32]
        input_count = hjpeg->JpegInCount;
90009016:	6a21      	ldr	r1, [r4, #32]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
90009018:	1850      	adds	r0, r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000901a:	5c55      	ldrb	r5, [r2, r1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000901c:	7881      	ldrb	r1, [r0, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000901e:	7846      	ldrb	r6, [r0, #1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
90009020:	0409      	lsls	r1, r1, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
90009022:	78c0      	ldrb	r0, [r0, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
90009024:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
90009028:	4329      	orrs	r1, r5
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000902a:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000902e:	6419      	str	r1, [r3, #64]	; 0x40
        hjpeg->JpegInCount += 4UL;
90009030:	6a21      	ldr	r1, [r4, #32]
90009032:	3104      	adds	r1, #4
90009034:	6221      	str	r1, [r4, #32]
        input_count = hjpeg->JpegInCount;
90009036:	6a21      	ldr	r1, [r4, #32]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
90009038:	1850      	adds	r0, r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000903a:	5c55      	ldrb	r5, [r2, r1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000903c:	7881      	ldrb	r1, [r0, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000903e:	7846      	ldrb	r6, [r0, #1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
90009040:	0409      	lsls	r1, r1, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
90009042:	78c0      	ldrb	r0, [r0, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
90009044:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
90009048:	4329      	orrs	r1, r5
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000904a:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000904e:	6419      	str	r1, [r3, #64]	; 0x40
        hjpeg->JpegInCount += 4UL;
90009050:	6a21      	ldr	r1, [r4, #32]
90009052:	3104      	adds	r1, #4
90009054:	6221      	str	r1, [r4, #32]
        input_count = hjpeg->JpegInCount;
90009056:	6a21      	ldr	r1, [r4, #32]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
90009058:	1850      	adds	r0, r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000905a:	5c55      	ldrb	r5, [r2, r1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000905c:	7881      	ldrb	r1, [r0, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000905e:	7846      	ldrb	r6, [r0, #1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
90009060:	0409      	lsls	r1, r1, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
90009062:	78c0      	ldrb	r0, [r0, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
90009064:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
90009068:	4329      	orrs	r1, r5
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000906a:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000906e:	6419      	str	r1, [r3, #64]	; 0x40
        hjpeg->JpegInCount += 4UL;
90009070:	6a21      	ldr	r1, [r4, #32]
90009072:	3104      	adds	r1, #4
90009074:	6221      	str	r1, [r4, #32]
        input_count = hjpeg->JpegInCount;
90009076:	6a21      	ldr	r1, [r4, #32]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
90009078:	1850      	adds	r0, r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000907a:	5c55      	ldrb	r5, [r2, r1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000907c:	7881      	ldrb	r1, [r0, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000907e:	7846      	ldrb	r6, [r0, #1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
90009080:	0409      	lsls	r1, r1, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
90009082:	78c0      	ldrb	r0, [r0, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
90009084:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
90009088:	4329      	orrs	r1, r5
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000908a:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000908e:	6419      	str	r1, [r3, #64]	; 0x40
        hjpeg->JpegInCount += 4UL;
90009090:	6a21      	ldr	r1, [r4, #32]
90009092:	3104      	adds	r1, #4
90009094:	6221      	str	r1, [r4, #32]
        input_count = hjpeg->JpegInCount;
90009096:	6a20      	ldr	r0, [r4, #32]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
90009098:	1881      	adds	r1, r0, r2
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000909a:	5c85      	ldrb	r5, [r0, r2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000909c:	788a      	ldrb	r2, [r1, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
9000909e:	78c8      	ldrb	r0, [r1, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
900090a0:	0412      	lsls	r2, r2, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
900090a2:	7849      	ldrb	r1, [r1, #1]
900090a4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
900090a8:	432a      	orrs	r2, r5
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
900090aa:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
900090ae:	641a      	str	r2, [r3, #64]	; 0x40
        hjpeg->JpegInCount += 4UL;
900090b0:	6a22      	ldr	r2, [r4, #32]
900090b2:	3204      	adds	r2, #4
900090b4:	6222      	str	r2, [r4, #32]
      for (index = 0; index < nbRequestWords; index++)
900090b6:	e64e      	b.n	90008d56 <JPEG_Process+0x2a>
  if ((hjpeg->InDataLength == 0UL) || (nbRequestWords == 0UL))
900090b8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
900090ba:	2a00      	cmp	r2, #0
900090bc:	d074      	beq.n	900091a8 <JPEG_Process+0x47c>
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
900090be:	6a21      	ldr	r1, [r4, #32]
900090c0:	428a      	cmp	r2, r1
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
900090c2:	6a21      	ldr	r1, [r4, #32]
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
900090c4:	f200 8164 	bhi.w	90009390 <JPEG_Process+0x664>
  else if (hjpeg->InDataLength == hjpeg->JpegInCount)
900090c8:	428a      	cmp	r2, r1
900090ca:	f040 810c 	bne.w	900092e6 <JPEG_Process+0x5ba>
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
900090ce:	6a21      	ldr	r1, [r4, #32]
900090d0:	4620      	mov	r0, r4
900090d2:	f7f8 fc2f 	bl	90001934 <HAL_JPEG_GetDataCallback>
    if (hjpeg->InDataLength > 4UL)
900090d6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
900090d8:	2a04      	cmp	r2, #4
900090da:	d902      	bls.n	900090e2 <JPEG_Process+0x3b6>
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
900090dc:	f022 0203 	bic.w	r2, r2, #3
900090e0:	62a2      	str	r2, [r4, #40]	; 0x28
    hjpeg->JpegInCount = 0;
900090e2:	2100      	movs	r1, #0
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
900090e4:	6823      	ldr	r3, [r4, #0]
    hjpeg->JpegInCount = 0;
900090e6:	6221      	str	r1, [r4, #32]
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
900090e8:	6d61      	ldr	r1, [r4, #84]	; 0x54
900090ea:	04c9      	lsls	r1, r1, #19
900090ec:	f53f ae33 	bmi.w	90008d56 <JPEG_Process+0x2a>
900090f0:	2a00      	cmp	r2, #0
900090f2:	f43f ae30 	beq.w	90008d56 <JPEG_Process+0x2a>
    if (nb_words >= nbRequestWords)
900090f6:	0891      	lsrs	r1, r2, #2
900090f8:	f040 8203 	bne.w	90009502 <JPEG_Process+0x7d6>
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
900090fc:	6a20      	ldr	r0, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
900090fe:	2a01      	cmp	r2, #1
          hjpeg->JpegInCount++;
90009100:	6a21      	ldr	r1, [r4, #32]
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
90009102:	69a5      	ldr	r5, [r4, #24]
          hjpeg->JpegInCount++;
90009104:	f101 0101 	add.w	r1, r1, #1
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
90009108:	5c28      	ldrb	r0, [r5, r0]
          hjpeg->JpegInCount++;
9000910a:	6221      	str	r1, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
9000910c:	d010      	beq.n	90009130 <JPEG_Process+0x404>
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
9000910e:	6a21      	ldr	r1, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
90009110:	2a03      	cmp	r2, #3
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
90009112:	5c69      	ldrb	r1, [r5, r1]
90009114:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
          hjpeg->JpegInCount++;
90009118:	6a21      	ldr	r1, [r4, #32]
9000911a:	f101 0101 	add.w	r1, r1, #1
9000911e:	6221      	str	r1, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
90009120:	d106      	bne.n	90009130 <JPEG_Process+0x404>
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
90009122:	6a22      	ldr	r2, [r4, #32]
90009124:	5ca9      	ldrb	r1, [r5, r2]
          hjpeg->JpegInCount++;
90009126:	6a22      	ldr	r2, [r4, #32]
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
90009128:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
          hjpeg->JpegInCount++;
9000912c:	3201      	adds	r2, #1
9000912e:	6222      	str	r2, [r4, #32]
        hjpeg->Instance->DIR = dataword;
90009130:	6418      	str	r0, [r3, #64]	; 0x40
90009132:	e610      	b.n	90008d56 <JPEG_Process+0x2a>
  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
90009134:	6a62      	ldr	r2, [r4, #36]	; 0x24
90009136:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
90009138:	3204      	adds	r2, #4
9000913a:	4295      	cmp	r5, r2
9000913c:	f0c0 80d5 	bcc.w	900092ea <JPEG_Process+0x5be>
      dataword = hjpeg->Instance->DOR;
90009140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
90009142:	69e1      	ldr	r1, [r4, #28]
90009144:	6a62      	ldr	r2, [r4, #36]	; 0x24
90009146:	548b      	strb	r3, [r1, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
90009148:	6a61      	ldr	r1, [r4, #36]	; 0x24
9000914a:	69e2      	ldr	r2, [r4, #28]
9000914c:	440a      	add	r2, r1
9000914e:	0a19      	lsrs	r1, r3, #8
90009150:	7051      	strb	r1, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
90009152:	6a61      	ldr	r1, [r4, #36]	; 0x24
90009154:	69e2      	ldr	r2, [r4, #28]
90009156:	440a      	add	r2, r1
90009158:	0c19      	lsrs	r1, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
9000915a:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
9000915c:	7091      	strb	r1, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
9000915e:	6a61      	ldr	r1, [r4, #36]	; 0x24
90009160:	69e2      	ldr	r2, [r4, #28]
90009162:	440a      	add	r2, r1
90009164:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
90009166:	6a63      	ldr	r3, [r4, #36]	; 0x24
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
90009168:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
      hjpeg->JpegOutCount += 4UL;
9000916a:	3304      	adds	r3, #4
9000916c:	6263      	str	r3, [r4, #36]	; 0x24
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
9000916e:	6a63      	ldr	r3, [r4, #36]	; 0x24
90009170:	429a      	cmp	r2, r3
90009172:	f47f af07 	bne.w	90008f84 <JPEG_Process+0x258>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
90009176:	6a62      	ldr	r2, [r4, #36]	; 0x24
90009178:	4620      	mov	r0, r4
9000917a:	69e1      	ldr	r1, [r4, #28]
9000917c:	f7f8 fbfa 	bl	90001974 <HAL_JPEG_DataReadyCallback>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
90009180:	6823      	ldr	r3, [r4, #0]
      hjpeg->JpegOutCount = 0;
90009182:	6266      	str	r6, [r4, #36]	; 0x24
90009184:	e5f3      	b.n	90008d6e <JPEG_Process+0x42>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
90009186:	f7f8 fc4b 	bl	90001a20 <HAL_JPEG_DecodeCpltCallback>
    return JPEG_PROCESS_DONE;
9000918a:	4628      	mov	r0, r5
9000918c:	e5f5      	b.n	90008d7a <JPEG_Process+0x4e>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
9000918e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90009190:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
90009194:	631a      	str	r2, [r3, #48]	; 0x30
90009196:	e614      	b.n	90008dc2 <JPEG_Process+0x96>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
90009198:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000919a:	4620      	mov	r0, r4
9000919c:	69e1      	ldr	r1, [r4, #28]
9000919e:	f7f8 fbe9 	bl	90001974 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
900091a2:	2300      	movs	r3, #0
900091a4:	6263      	str	r3, [r4, #36]	; 0x24
900091a6:	e614      	b.n	90008dd2 <JPEG_Process+0xa6>
  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
900091a8:	6d62      	ldr	r2, [r4, #84]	; 0x54
900091aa:	f002 020c 	and.w	r2, r2, #12
900091ae:	2a0c      	cmp	r2, #12
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
900091b0:	6d62      	ldr	r2, [r4, #84]	; 0x54
  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
900091b2:	f000 80fd 	beq.w	900093b0 <JPEG_Process+0x684>
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
900091b6:	f002 020c 	and.w	r2, r2, #12
900091ba:	2a08      	cmp	r2, #8
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
900091bc:	6d62      	ldr	r2, [r4, #84]	; 0x54
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
900091be:	f47f adca 	bne.w	90008d56 <JPEG_Process+0x2a>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
900091c2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
900091c6:	6562      	str	r2, [r4, #84]	; 0x54
    __HAL_JPEG_DISABLE_IT(hjpeg, mask);
900091c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
900091ca:	f022 0206 	bic.w	r2, r2, #6
900091ce:	631a      	str	r2, [r3, #48]	; 0x30
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
900091d0:	6d62      	ldr	r2, [r4, #84]	; 0x54
900091d2:	e5c0      	b.n	90008d56 <JPEG_Process+0x2a>
  else if (hjpeg->OutDataLength > hjpeg->JpegOutCount)
900091d4:	6a62      	ldr	r2, [r4, #36]	; 0x24
900091d6:	4296      	cmp	r6, r2
900091d8:	f67f adc9 	bls.w	90008d6e <JPEG_Process+0x42>
    nb_words = (hjpeg->OutDataLength - hjpeg->JpegOutCount) / 4UL;
900091dc:	6a60      	ldr	r0, [r4, #36]	; 0x24
900091de:	1a30      	subs	r0, r6, r0
    for (index = 0; index < nb_words; index++)
900091e0:	0880      	lsrs	r0, r0, #2
900091e2:	d020      	beq.n	90009226 <JPEG_Process+0x4fa>
900091e4:	4629      	mov	r1, r5
900091e6:	e000      	b.n	900091ea <JPEG_Process+0x4be>
      dataword = hjpeg->Instance->DOR;
900091e8:	6823      	ldr	r3, [r4, #0]
900091ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    for (index = 0; index < nb_words; index++)
900091ec:	3101      	adds	r1, #1
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
900091ee:	6a62      	ldr	r2, [r4, #36]	; 0x24
900091f0:	69e6      	ldr	r6, [r4, #28]
    for (index = 0; index < nb_words; index++)
900091f2:	4288      	cmp	r0, r1
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
900091f4:	54b3      	strb	r3, [r6, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
900091f6:	6a66      	ldr	r6, [r4, #36]	; 0x24
900091f8:	69e2      	ldr	r2, [r4, #28]
900091fa:	4432      	add	r2, r6
900091fc:	ea4f 2613 	mov.w	r6, r3, lsr #8
90009200:	7056      	strb	r6, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
90009202:	6a66      	ldr	r6, [r4, #36]	; 0x24
90009204:	69e2      	ldr	r2, [r4, #28]
90009206:	4432      	add	r2, r6
90009208:	ea4f 4613 	mov.w	r6, r3, lsr #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
9000920c:	ea4f 6313 	mov.w	r3, r3, lsr #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
90009210:	7096      	strb	r6, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
90009212:	6a66      	ldr	r6, [r4, #36]	; 0x24
90009214:	69e2      	ldr	r2, [r4, #28]
90009216:	4432      	add	r2, r6
90009218:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
9000921a:	6a63      	ldr	r3, [r4, #36]	; 0x24
9000921c:	f103 0304 	add.w	r3, r3, #4
90009220:	6263      	str	r3, [r4, #36]	; 0x24
    for (index = 0; index < nb_words; index++)
90009222:	d1e1      	bne.n	900091e8 <JPEG_Process+0x4bc>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
90009224:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
90009226:	6a63      	ldr	r3, [r4, #36]	; 0x24
90009228:	42b3      	cmp	r3, r6
9000922a:	f000 8161 	beq.w	900094f0 <JPEG_Process+0x7c4>
      nb_bytes = hjpeg->OutDataLength - hjpeg->JpegOutCount;
9000922e:	f8d4 8024 	ldr.w	r8, [r4, #36]	; 0x24
      dataword = hjpeg->Instance->DOR;
90009232:	6823      	ldr	r3, [r4, #0]
      for (index = 0; index < nb_bytes; index++)
90009234:	ebb6 0008 	subs.w	r0, r6, r8
      dataword = hjpeg->Instance->DOR;
90009238:	6c5f      	ldr	r7, [r3, #68]	; 0x44
      for (index = 0; index < nb_bytes; index++)
9000923a:	d00e      	beq.n	9000925a <JPEG_Process+0x52e>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
9000923c:	f005 0303 	and.w	r3, r5, #3
90009240:	6a62      	ldr	r2, [r4, #36]	; 0x24
90009242:	69e1      	ldr	r1, [r4, #28]
      for (index = 0; index < nb_bytes; index++)
90009244:	3501      	adds	r5, #1
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
90009246:	00db      	lsls	r3, r3, #3
      for (index = 0; index < nb_bytes; index++)
90009248:	42a8      	cmp	r0, r5
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
9000924a:	fa27 f303 	lsr.w	r3, r7, r3
9000924e:	548b      	strb	r3, [r1, r2]
        hjpeg->JpegOutCount++;
90009250:	6a63      	ldr	r3, [r4, #36]	; 0x24
90009252:	f103 0301 	add.w	r3, r3, #1
90009256:	6263      	str	r3, [r4, #36]	; 0x24
      for (index = 0; index < nb_bytes; index++)
90009258:	d1f0      	bne.n	9000923c <JPEG_Process+0x510>
      nb_bytes = 4UL - nb_bytes;
9000925a:	f108 0804 	add.w	r8, r8, #4
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
9000925e:	6a62      	ldr	r2, [r4, #36]	; 0x24
90009260:	69e1      	ldr	r1, [r4, #28]
90009262:	4620      	mov	r0, r4
      nb_bytes = 4UL - nb_bytes;
90009264:	eba8 0806 	sub.w	r8, r8, r6
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
90009268:	f7f8 fb84 	bl	90001974 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
9000926c:	2300      	movs	r3, #0
      for (index = nb_bytes; index < 4UL; index++)
9000926e:	f1b8 0f03 	cmp.w	r8, #3
      hjpeg->JpegOutCount = 0;
90009272:	6263      	str	r3, [r4, #36]	; 0x24
      for (index = nb_bytes; index < 4UL; index++)
90009274:	f63f ae86 	bhi.w	90008f84 <JPEG_Process+0x258>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
90009278:	ea4f 03c8 	mov.w	r3, r8, lsl #3
9000927c:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000927e:	69e1      	ldr	r1, [r4, #28]
      for (index = nb_bytes; index < 4UL; index++)
90009280:	f1b8 0f03 	cmp.w	r8, #3
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
90009284:	fa27 f003 	lsr.w	r0, r7, r3
90009288:	5488      	strb	r0, [r1, r2]
        hjpeg->JpegOutCount++;
9000928a:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000928c:	f102 0201 	add.w	r2, r2, #1
90009290:	6262      	str	r2, [r4, #36]	; 0x24
      for (index = nb_bytes; index < 4UL; index++)
90009292:	f43f ae77 	beq.w	90008f84 <JPEG_Process+0x258>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
90009296:	f103 0208 	add.w	r2, r3, #8
9000929a:	6a61      	ldr	r1, [r4, #36]	; 0x24
9000929c:	69e0      	ldr	r0, [r4, #28]
      for (index = nb_bytes; index < 4UL; index++)
9000929e:	f1b8 0f02 	cmp.w	r8, #2
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
900092a2:	fa27 f202 	lsr.w	r2, r7, r2
900092a6:	5442      	strb	r2, [r0, r1]
        hjpeg->JpegOutCount++;
900092a8:	6a62      	ldr	r2, [r4, #36]	; 0x24
900092aa:	f102 0201 	add.w	r2, r2, #1
900092ae:	6262      	str	r2, [r4, #36]	; 0x24
      for (index = nb_bytes; index < 4UL; index++)
900092b0:	f108 0202 	add.w	r2, r8, #2
900092b4:	f43f ae66 	beq.w	90008f84 <JPEG_Process+0x258>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
900092b8:	3310      	adds	r3, #16
900092ba:	6a61      	ldr	r1, [r4, #36]	; 0x24
900092bc:	69e0      	ldr	r0, [r4, #28]
      for (index = nb_bytes; index < 4UL; index++)
900092be:	2a02      	cmp	r2, #2
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
900092c0:	fa27 f303 	lsr.w	r3, r7, r3
900092c4:	5443      	strb	r3, [r0, r1]
        hjpeg->JpegOutCount++;
900092c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
900092c8:	f103 0301 	add.w	r3, r3, #1
900092cc:	6263      	str	r3, [r4, #36]	; 0x24
      for (index = nb_bytes; index < 4UL; index++)
900092ce:	f47f ae59 	bne.w	90008f84 <JPEG_Process+0x258>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
900092d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
900092d4:	0e3f      	lsrs	r7, r7, #24
900092d6:	69e2      	ldr	r2, [r4, #28]
900092d8:	54d7      	strb	r7, [r2, r3]
        hjpeg->JpegOutCount++;
900092da:	6a63      	ldr	r3, [r4, #36]	; 0x24
900092dc:	3301      	adds	r3, #1
900092de:	6263      	str	r3, [r4, #36]	; 0x24
      for (index = nb_bytes; index < 4UL; index++)
900092e0:	e650      	b.n	90008f84 <JPEG_Process+0x258>
  else if (hjpeg->InDataLength == hjpeg->JpegInCount)
900092e2:	428a      	cmp	r2, r1
900092e4:	d056      	beq.n	90009394 <JPEG_Process+0x668>
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
900092e6:	6d62      	ldr	r2, [r4, #84]	; 0x54
900092e8:	e535      	b.n	90008d56 <JPEG_Process+0x2a>
  else if (hjpeg->OutDataLength > hjpeg->JpegOutCount)
900092ea:	6a62      	ldr	r2, [r4, #36]	; 0x24
900092ec:	4295      	cmp	r5, r2
900092ee:	f67f ad3e 	bls.w	90008d6e <JPEG_Process+0x42>
    nb_words = (hjpeg->OutDataLength - hjpeg->JpegOutCount) / 4UL;
900092f2:	6a60      	ldr	r0, [r4, #36]	; 0x24
900092f4:	1a28      	subs	r0, r5, r0
    for (index = 0; index < nb_words; index++)
900092f6:	0880      	lsrs	r0, r0, #2
900092f8:	d020      	beq.n	9000933c <JPEG_Process+0x610>
900092fa:	4631      	mov	r1, r6
900092fc:	e000      	b.n	90009300 <JPEG_Process+0x5d4>
      dataword = hjpeg->Instance->DOR;
900092fe:	6823      	ldr	r3, [r4, #0]
90009300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    for (index = 0; index < nb_words; index++)
90009302:	3101      	adds	r1, #1
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
90009304:	6a62      	ldr	r2, [r4, #36]	; 0x24
90009306:	69e5      	ldr	r5, [r4, #28]
    for (index = 0; index < nb_words; index++)
90009308:	4288      	cmp	r0, r1
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
9000930a:	54ab      	strb	r3, [r5, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
9000930c:	6a65      	ldr	r5, [r4, #36]	; 0x24
9000930e:	69e2      	ldr	r2, [r4, #28]
90009310:	442a      	add	r2, r5
90009312:	ea4f 2513 	mov.w	r5, r3, lsr #8
90009316:	7055      	strb	r5, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
90009318:	6a65      	ldr	r5, [r4, #36]	; 0x24
9000931a:	69e2      	ldr	r2, [r4, #28]
9000931c:	442a      	add	r2, r5
9000931e:	ea4f 4513 	mov.w	r5, r3, lsr #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
90009322:	ea4f 6313 	mov.w	r3, r3, lsr #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
90009326:	7095      	strb	r5, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
90009328:	6a65      	ldr	r5, [r4, #36]	; 0x24
9000932a:	69e2      	ldr	r2, [r4, #28]
9000932c:	442a      	add	r2, r5
9000932e:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
90009330:	6a63      	ldr	r3, [r4, #36]	; 0x24
90009332:	f103 0304 	add.w	r3, r3, #4
90009336:	6263      	str	r3, [r4, #36]	; 0x24
    for (index = 0; index < nb_words; index++)
90009338:	d1e1      	bne.n	900092fe <JPEG_Process+0x5d2>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
9000933a:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
9000933c:	6a63      	ldr	r3, [r4, #36]	; 0x24
9000933e:	429d      	cmp	r5, r3
90009340:	f000 80d6 	beq.w	900094f0 <JPEG_Process+0x7c4>
      nb_bytes = hjpeg->OutDataLength - hjpeg->JpegOutCount;
90009344:	f8d4 8024 	ldr.w	r8, [r4, #36]	; 0x24
      dataword = hjpeg->Instance->DOR;
90009348:	6823      	ldr	r3, [r4, #0]
      for (index = 0; index < nb_bytes; index++)
9000934a:	ebb5 0008 	subs.w	r0, r5, r8
      dataword = hjpeg->Instance->DOR;
9000934e:	6c5f      	ldr	r7, [r3, #68]	; 0x44
      for (index = 0; index < nb_bytes; index++)
90009350:	d00e      	beq.n	90009370 <JPEG_Process+0x644>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
90009352:	f006 0303 	and.w	r3, r6, #3
90009356:	6a62      	ldr	r2, [r4, #36]	; 0x24
90009358:	69e1      	ldr	r1, [r4, #28]
      for (index = 0; index < nb_bytes; index++)
9000935a:	3601      	adds	r6, #1
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
9000935c:	00db      	lsls	r3, r3, #3
      for (index = 0; index < nb_bytes; index++)
9000935e:	42b0      	cmp	r0, r6
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
90009360:	fa27 f303 	lsr.w	r3, r7, r3
90009364:	548b      	strb	r3, [r1, r2]
        hjpeg->JpegOutCount++;
90009366:	6a63      	ldr	r3, [r4, #36]	; 0x24
90009368:	f103 0301 	add.w	r3, r3, #1
9000936c:	6263      	str	r3, [r4, #36]	; 0x24
      for (index = 0; index < nb_bytes; index++)
9000936e:	d1f0      	bne.n	90009352 <JPEG_Process+0x626>
      nb_bytes = 4UL - nb_bytes;
90009370:	f108 0804 	add.w	r8, r8, #4
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
90009374:	6a62      	ldr	r2, [r4, #36]	; 0x24
90009376:	69e1      	ldr	r1, [r4, #28]
90009378:	4620      	mov	r0, r4
      nb_bytes = 4UL - nb_bytes;
9000937a:	eba8 0805 	sub.w	r8, r8, r5
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
9000937e:	f7f8 faf9 	bl	90001974 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
90009382:	2300      	movs	r3, #0
      for (index = nb_bytes; index < 4UL; index++)
90009384:	f1b8 0f03 	cmp.w	r8, #3
      hjpeg->JpegOutCount = 0;
90009388:	6263      	str	r3, [r4, #36]	; 0x24
      for (index = nb_bytes; index < 4UL; index++)
9000938a:	f67f af75 	bls.w	90009278 <JPEG_Process+0x54c>
9000938e:	e5f9      	b.n	90008f84 <JPEG_Process+0x258>
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
90009390:	1a52      	subs	r2, r2, r1
90009392:	e6a9      	b.n	900090e8 <JPEG_Process+0x3bc>
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
90009394:	6a21      	ldr	r1, [r4, #32]
90009396:	4620      	mov	r0, r4
90009398:	f7f8 facc 	bl	90001934 <HAL_JPEG_GetDataCallback>
    if (hjpeg->InDataLength > 4UL)
9000939c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
9000939e:	2a04      	cmp	r2, #4
900093a0:	d902      	bls.n	900093a8 <JPEG_Process+0x67c>
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
900093a2:	f022 0203 	bic.w	r2, r2, #3
900093a6:	62a2      	str	r2, [r4, #40]	; 0x28
    hjpeg->JpegInCount = 0;
900093a8:	2100      	movs	r1, #0
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
900093aa:	6823      	ldr	r3, [r4, #0]
    hjpeg->JpegInCount = 0;
900093ac:	6221      	str	r1, [r4, #32]
    nb_bytes = hjpeg->InDataLength;
900093ae:	e5f5      	b.n	90008f9c <JPEG_Process+0x270>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
900093b0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
900093b4:	6562      	str	r2, [r4, #84]	; 0x54
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
900093b6:	6d62      	ldr	r2, [r4, #84]	; 0x54
900093b8:	e4cd      	b.n	90008d56 <JPEG_Process+0x2a>
      if (nb_words > 0UL)
900093ba:	2a03      	cmp	r2, #3
900093bc:	f240 80a4 	bls.w	90009508 <JPEG_Process+0x7dc>
        for (index = 0; index < nb_words; index++)
900093c0:	2900      	cmp	r1, #0
900093c2:	f43f acc8 	beq.w	90008d56 <JPEG_Process+0x2a>
          input_count = hjpeg->JpegInCount;
900093c6:	6a20      	ldr	r0, [r4, #32]
        for (index = 0; index < nb_words; index++)
900093c8:	2901      	cmp	r1, #1
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
900093ca:	69a2      	ldr	r2, [r4, #24]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
900093cc:	eb02 0500 	add.w	r5, r2, r0
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
900093d0:	5c16      	ldrb	r6, [r2, r0]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
900093d2:	78a8      	ldrb	r0, [r5, #2]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
900093d4:	786f      	ldrb	r7, [r5, #1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
900093d6:	ea4f 4000 	mov.w	r0, r0, lsl #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
900093da:	78ed      	ldrb	r5, [r5, #3]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
900093dc:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
900093e0:	ea40 0006 	orr.w	r0, r0, r6
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
900093e4:	ea40 6005 	orr.w	r0, r0, r5, lsl #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
900093e8:	6418      	str	r0, [r3, #64]	; 0x40
          hjpeg->JpegInCount += 4UL;
900093ea:	6a20      	ldr	r0, [r4, #32]
900093ec:	f100 0004 	add.w	r0, r0, #4
900093f0:	6220      	str	r0, [r4, #32]
        for (index = 0; index < nb_words; index++)
900093f2:	f43f acb0 	beq.w	90008d56 <JPEG_Process+0x2a>
          input_count = hjpeg->JpegInCount;
900093f6:	6a20      	ldr	r0, [r4, #32]
        for (index = 0; index < nb_words; index++)
900093f8:	2902      	cmp	r1, #2
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
900093fa:	eb02 0500 	add.w	r5, r2, r0
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
900093fe:	5c16      	ldrb	r6, [r2, r0]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
90009400:	78a8      	ldrb	r0, [r5, #2]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
90009402:	786f      	ldrb	r7, [r5, #1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
90009404:	ea4f 4000 	mov.w	r0, r0, lsl #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
90009408:	78ed      	ldrb	r5, [r5, #3]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000940a:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
9000940e:	ea40 0006 	orr.w	r0, r0, r6
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
90009412:	ea40 6005 	orr.w	r0, r0, r5, lsl #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
90009416:	6418      	str	r0, [r3, #64]	; 0x40
          hjpeg->JpegInCount += 4UL;
90009418:	6a20      	ldr	r0, [r4, #32]
9000941a:	f100 0004 	add.w	r0, r0, #4
9000941e:	6220      	str	r0, [r4, #32]
        for (index = 0; index < nb_words; index++)
90009420:	f43f ac99 	beq.w	90008d56 <JPEG_Process+0x2a>
          input_count = hjpeg->JpegInCount;
90009424:	6a20      	ldr	r0, [r4, #32]
        for (index = 0; index < nb_words; index++)
90009426:	2903      	cmp	r1, #3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
90009428:	eb02 0500 	add.w	r5, r2, r0
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000942c:	5c16      	ldrb	r6, [r2, r0]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000942e:	78a8      	ldrb	r0, [r5, #2]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
90009430:	786f      	ldrb	r7, [r5, #1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
90009432:	ea4f 4000 	mov.w	r0, r0, lsl #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
90009436:	78ed      	ldrb	r5, [r5, #3]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
90009438:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
9000943c:	ea40 0006 	orr.w	r0, r0, r6
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
90009440:	ea40 6005 	orr.w	r0, r0, r5, lsl #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
90009444:	6418      	str	r0, [r3, #64]	; 0x40
          hjpeg->JpegInCount += 4UL;
90009446:	6a20      	ldr	r0, [r4, #32]
90009448:	f100 0004 	add.w	r0, r0, #4
9000944c:	6220      	str	r0, [r4, #32]
        for (index = 0; index < nb_words; index++)
9000944e:	f43f ac82 	beq.w	90008d56 <JPEG_Process+0x2a>
          input_count = hjpeg->JpegInCount;
90009452:	6a20      	ldr	r0, [r4, #32]
        for (index = 0; index < nb_words; index++)
90009454:	2904      	cmp	r1, #4
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
90009456:	eb02 0500 	add.w	r5, r2, r0
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000945a:	5c16      	ldrb	r6, [r2, r0]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000945c:	78a8      	ldrb	r0, [r5, #2]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000945e:	786f      	ldrb	r7, [r5, #1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
90009460:	ea4f 4000 	mov.w	r0, r0, lsl #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
90009464:	78ed      	ldrb	r5, [r5, #3]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
90009466:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
9000946a:	ea40 0006 	orr.w	r0, r0, r6
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000946e:	ea40 6005 	orr.w	r0, r0, r5, lsl #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
90009472:	6418      	str	r0, [r3, #64]	; 0x40
          hjpeg->JpegInCount += 4UL;
90009474:	6a20      	ldr	r0, [r4, #32]
90009476:	f100 0004 	add.w	r0, r0, #4
9000947a:	6220      	str	r0, [r4, #32]
        for (index = 0; index < nb_words; index++)
9000947c:	f43f ac6b 	beq.w	90008d56 <JPEG_Process+0x2a>
          input_count = hjpeg->JpegInCount;
90009480:	6a20      	ldr	r0, [r4, #32]
        for (index = 0; index < nb_words; index++)
90009482:	2905      	cmp	r1, #5
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
90009484:	eb02 0500 	add.w	r5, r2, r0
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
90009488:	5c16      	ldrb	r6, [r2, r0]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000948a:	78a8      	ldrb	r0, [r5, #2]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000948c:	786f      	ldrb	r7, [r5, #1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000948e:	ea4f 4000 	mov.w	r0, r0, lsl #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
90009492:	78ed      	ldrb	r5, [r5, #3]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
90009494:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
90009498:	ea40 0006 	orr.w	r0, r0, r6
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000949c:	ea40 6005 	orr.w	r0, r0, r5, lsl #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
900094a0:	6418      	str	r0, [r3, #64]	; 0x40
          hjpeg->JpegInCount += 4UL;
900094a2:	6a20      	ldr	r0, [r4, #32]
900094a4:	f100 0004 	add.w	r0, r0, #4
900094a8:	6220      	str	r0, [r4, #32]
        for (index = 0; index < nb_words; index++)
900094aa:	f43f ac54 	beq.w	90008d56 <JPEG_Process+0x2a>
          input_count = hjpeg->JpegInCount;
900094ae:	6a20      	ldr	r0, [r4, #32]
        for (index = 0; index < nb_words; index++)
900094b0:	2907      	cmp	r1, #7
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
900094b2:	eb02 0500 	add.w	r5, r2, r0
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
900094b6:	5c16      	ldrb	r6, [r2, r0]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
900094b8:	78a8      	ldrb	r0, [r5, #2]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
900094ba:	786f      	ldrb	r7, [r5, #1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
900094bc:	ea4f 4000 	mov.w	r0, r0, lsl #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
900094c0:	78ed      	ldrb	r5, [r5, #3]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
900094c2:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
900094c6:	ea40 0006 	orr.w	r0, r0, r6
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
900094ca:	ea40 6005 	orr.w	r0, r0, r5, lsl #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
900094ce:	6418      	str	r0, [r3, #64]	; 0x40
          hjpeg->JpegInCount += 4UL;
900094d0:	6a20      	ldr	r0, [r4, #32]
900094d2:	f100 0004 	add.w	r0, r0, #4
900094d6:	6220      	str	r0, [r4, #32]
        for (index = 0; index < nb_words; index++)
900094d8:	f47f ac3d 	bne.w	90008d56 <JPEG_Process+0x2a>
          input_count = hjpeg->JpegInCount;
900094dc:	6a20      	ldr	r0, [r4, #32]
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
900094de:	e5db      	b.n	90009098 <JPEG_Process+0x36c>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
900094e0:	6a62      	ldr	r2, [r4, #36]	; 0x24
900094e2:	4620      	mov	r0, r4
900094e4:	69e1      	ldr	r1, [r4, #28]
900094e6:	f7f8 fa45 	bl	90001974 <HAL_JPEG_DataReadyCallback>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
900094ea:	6823      	ldr	r3, [r4, #0]
      hjpeg->JpegOutCount = 0;
900094ec:	6265      	str	r5, [r4, #36]	; 0x24
900094ee:	e43e      	b.n	90008d6e <JPEG_Process+0x42>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
900094f0:	6a62      	ldr	r2, [r4, #36]	; 0x24
900094f2:	4620      	mov	r0, r4
900094f4:	69e1      	ldr	r1, [r4, #28]
900094f6:	f7f8 fa3d 	bl	90001974 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
900094fa:	2200      	movs	r2, #0
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
900094fc:	6823      	ldr	r3, [r4, #0]
      hjpeg->JpegOutCount = 0;
900094fe:	6262      	str	r2, [r4, #36]	; 0x24
90009500:	e435      	b.n	90008d6e <JPEG_Process+0x42>
        input_count = hjpeg->JpegInCount;
90009502:	6a22      	ldr	r2, [r4, #32]
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
90009504:	69a0      	ldr	r0, [r4, #24]
90009506:	e5c7      	b.n	90009098 <JPEG_Process+0x36c>
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
90009508:	6a21      	ldr	r1, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
9000950a:	2a01      	cmp	r2, #1
          hjpeg->JpegInCount++;
9000950c:	6a20      	ldr	r0, [r4, #32]
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
9000950e:	69a5      	ldr	r5, [r4, #24]
          hjpeg->JpegInCount++;
90009510:	f100 0001 	add.w	r0, r0, #1
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
90009514:	5c69      	ldrb	r1, [r5, r1]
          hjpeg->JpegInCount++;
90009516:	6220      	str	r0, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
90009518:	d010      	beq.n	9000953c <JPEG_Process+0x810>
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
9000951a:	6a20      	ldr	r0, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
9000951c:	2a03      	cmp	r2, #3
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
9000951e:	5c28      	ldrb	r0, [r5, r0]
90009520:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
          hjpeg->JpegInCount++;
90009524:	6a20      	ldr	r0, [r4, #32]
90009526:	f100 0001 	add.w	r0, r0, #1
9000952a:	6220      	str	r0, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
9000952c:	d106      	bne.n	9000953c <JPEG_Process+0x810>
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
9000952e:	6a22      	ldr	r2, [r4, #32]
90009530:	5ca8      	ldrb	r0, [r5, r2]
          hjpeg->JpegInCount++;
90009532:	6a22      	ldr	r2, [r4, #32]
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
90009534:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
          hjpeg->JpegInCount++;
90009538:	3201      	adds	r2, #1
9000953a:	6222      	str	r2, [r4, #32]
        hjpeg->Instance->DIR = dataword;
9000953c:	6419      	str	r1, [r3, #64]	; 0x40
9000953e:	e40a      	b.n	90008d56 <JPEG_Process+0x2a>

90009540 <HAL_JPEG_IRQHandler>:
  switch (hjpeg->State)
90009540:	f890 304d 	ldrb.w	r3, [r0, #77]	; 0x4d
90009544:	3b03      	subs	r3, #3
90009546:	2b01      	cmp	r3, #1
90009548:	d900      	bls.n	9000954c <HAL_JPEG_IRQHandler+0xc>
9000954a:	4770      	bx	lr
      if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
9000954c:	6d43      	ldr	r3, [r0, #84]	; 0x54
9000954e:	f003 030c 	and.w	r3, r3, #12
90009552:	2b08      	cmp	r3, #8
{
90009554:	b530      	push	{r4, r5, lr}
90009556:	4604      	mov	r4, r0
90009558:	b083      	sub	sp, #12
      if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
9000955a:	d006      	beq.n	9000956a <HAL_JPEG_IRQHandler+0x2a>
      else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
9000955c:	6d43      	ldr	r3, [r0, #84]	; 0x54
9000955e:	f003 030c 	and.w	r3, r3, #12
90009562:	2b0c      	cmp	r3, #12
90009564:	d006      	beq.n	90009574 <HAL_JPEG_IRQHandler+0x34>
}
90009566:	b003      	add	sp, #12
90009568:	bd30      	pop	{r4, r5, pc}
9000956a:	b003      	add	sp, #12
9000956c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        (void) JPEG_Process(hjpeg);
90009570:	f7ff bbdc 	b.w	90008d2c <JPEG_Process>
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
90009574:	6d43      	ldr	r3, [r0, #84]	; 0x54
90009576:	f003 0303 	and.w	r3, r3, #3
9000957a:	2b02      	cmp	r3, #2
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
9000957c:	6803      	ldr	r3, [r0, #0]
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
9000957e:	d045      	beq.n	9000960c <HAL_JPEG_IRQHandler+0xcc>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) != 0UL)
90009580:	6b5a      	ldr	r2, [r3, #52]	; 0x34
90009582:	0692      	lsls	r2, r2, #26
90009584:	d5ef      	bpl.n	90009566 <HAL_JPEG_IRQHandler+0x26>
    hjpeg->Context |= JPEG_CONTEXT_ENDING_DMA;
90009586:	6d62      	ldr	r2, [r4, #84]	; 0x54
    if (hjpeg->hdmain->State == HAL_MDMA_STATE_BUSY)
90009588:	6b20      	ldr	r0, [r4, #48]	; 0x30
    hjpeg->Context |= JPEG_CONTEXT_ENDING_DMA;
9000958a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
9000958e:	6562      	str	r2, [r4, #84]	; 0x54
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
90009590:	681a      	ldr	r2, [r3, #0]
90009592:	f022 0201 	bic.w	r2, r2, #1
90009596:	601a      	str	r2, [r3, #0]
    __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
90009598:	6b1a      	ldr	r2, [r3, #48]	; 0x30
9000959a:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
9000959e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
900095a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
900095a2:	f042 0260 	orr.w	r2, r2, #96	; 0x60
900095a6:	639a      	str	r2, [r3, #56]	; 0x38
    if (hjpeg->hdmain->State == HAL_MDMA_STATE_BUSY)
900095a8:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
900095ac:	2b02      	cmp	r3, #2
900095ae:	d052      	beq.n	90009656 <HAL_JPEG_IRQHandler+0x116>
    if (hjpeg->hdmaout->State == HAL_MDMA_STATE_BUSY)
900095b0:	6b60      	ldr	r0, [r4, #52]	; 0x34
900095b2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
900095b6:	2b02      	cmp	r3, #2
900095b8:	d03f      	beq.n	9000963a <HAL_JPEG_IRQHandler+0xfa>
  hjpeg->JpegOutCount = hjpeg->OutDataLength - (hjpeg->hdmaout->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
900095ba:	6803      	ldr	r3, [r0, #0]
900095bc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
900095be:	695b      	ldr	r3, [r3, #20]
900095c0:	f3c3 0310 	ubfx	r3, r3, #0, #17
900095c4:	1ad3      	subs	r3, r2, r3
900095c6:	6263      	str	r3, [r4, #36]	; 0x24
  if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
900095c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
900095ca:	429a      	cmp	r2, r3
900095cc:	d046      	beq.n	9000965c <HAL_JPEG_IRQHandler+0x11c>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL)
900095ce:	6822      	ldr	r2, [r4, #0]
900095d0:	6b55      	ldr	r5, [r2, #52]	; 0x34
900095d2:	f015 0510 	ands.w	r5, r5, #16
900095d6:	d135      	bne.n	90009644 <HAL_JPEG_IRQHandler+0x104>
    if (hjpeg->JpegOutCount > 0UL)
900095d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
900095da:	2b00      	cmp	r3, #0
900095dc:	d149      	bne.n	90009672 <HAL_JPEG_IRQHandler+0x132>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
900095de:	6813      	ldr	r3, [r2, #0]
    __HAL_UNLOCK(hjpeg);
900095e0:	2000      	movs	r0, #0
    hjpeg->State = HAL_JPEG_STATE_READY;
900095e2:	2101      	movs	r1, #1
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
900095e4:	f023 0301 	bic.w	r3, r3, #1
900095e8:	6013      	str	r3, [r2, #0]
    tmpContext = hjpeg->Context;
900095ea:	6d63      	ldr	r3, [r4, #84]	; 0x54
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
900095ec:	6d62      	ldr	r2, [r4, #84]	; 0x54
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
900095ee:	f003 0303 	and.w	r3, r3, #3
    __HAL_UNLOCK(hjpeg);
900095f2:	f884 004c 	strb.w	r0, [r4, #76]	; 0x4c
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
900095f6:	f402 4282 	and.w	r2, r2, #16640	; 0x4100
      HAL_JPEG_DecodeCpltCallback(hjpeg);
900095fa:	4620      	mov	r0, r4
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
900095fc:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
900095fe:	6562      	str	r2, [r4, #84]	; 0x54
    hjpeg->State = HAL_JPEG_STATE_READY;
90009600:	f884 104d 	strb.w	r1, [r4, #77]	; 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
90009604:	d032      	beq.n	9000966c <HAL_JPEG_IRQHandler+0x12c>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
90009606:	f7ff f9c9 	bl	9000899c <HAL_JPEG_EncodeCpltCallback>
9000960a:	e7ac      	b.n	90009566 <HAL_JPEG_IRQHandler+0x26>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
9000960c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
9000960e:	0651      	lsls	r1, r2, #25
90009610:	d5b6      	bpl.n	90009580 <HAL_JPEG_IRQHandler+0x40>
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
90009612:	1d01      	adds	r1, r0, #4
  if ((hjpeg == NULL) || (pInfo == NULL))
90009614:	9101      	str	r1, [sp, #4]
90009616:	f7fe ff33 	bl	90008480 <HAL_JPEG_GetInfo.part.0>
      hjpeg->Conf.ImageQuality = 0;
9000961a:	2300      	movs	r3, #0
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
9000961c:	9901      	ldr	r1, [sp, #4]
9000961e:	4620      	mov	r0, r4
      hjpeg->Conf.ImageQuality = 0;
90009620:	6163      	str	r3, [r4, #20]
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
90009622:	f7f8 f951 	bl	900018c8 <HAL_JPEG_InfoReadyCallback>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
90009626:	6823      	ldr	r3, [r4, #0]
90009628:	6b1a      	ldr	r2, [r3, #48]	; 0x30
9000962a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
9000962e:	631a      	str	r2, [r3, #48]	; 0x30
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
90009630:	6b9a      	ldr	r2, [r3, #56]	; 0x38
90009632:	f042 0240 	orr.w	r2, r2, #64	; 0x40
90009636:	639a      	str	r2, [r3, #56]	; 0x38
90009638:	e7a2      	b.n	90009580 <HAL_JPEG_IRQHandler+0x40>
}
9000963a:	b003      	add	sp, #12
9000963c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmaout);
90009640:	f000 bb30 	b.w	90009ca4 <HAL_MDMA_Abort_IT>
  else if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
90009644:	6d63      	ldr	r3, [r4, #84]	; 0x54
90009646:	049b      	lsls	r3, r3, #18
90009648:	d48d      	bmi.n	90009566 <HAL_JPEG_IRQHandler+0x26>
    JPEG_DMA_PollResidualData(hjpeg);
9000964a:	4620      	mov	r0, r4
}
9000964c:	b003      	add	sp, #12
9000964e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    JPEG_DMA_PollResidualData(hjpeg);
90009652:	f7ff ba0f 	b.w	90008a74 <JPEG_DMA_PollResidualData>
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmain);
90009656:	f000 fb25 	bl	90009ca4 <HAL_MDMA_Abort_IT>
9000965a:	e7a9      	b.n	900095b0 <HAL_JPEG_IRQHandler+0x70>
    HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
9000965c:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000965e:	4620      	mov	r0, r4
90009660:	69e1      	ldr	r1, [r4, #28]
90009662:	f7f8 f987 	bl	90001974 <HAL_JPEG_DataReadyCallback>
    hjpeg->JpegOutCount = 0;
90009666:	2300      	movs	r3, #0
90009668:	6263      	str	r3, [r4, #36]	; 0x24
9000966a:	e7b0      	b.n	900095ce <HAL_JPEG_IRQHandler+0x8e>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
9000966c:	f7f8 f9d8 	bl	90001a20 <HAL_JPEG_DecodeCpltCallback>
90009670:	e779      	b.n	90009566 <HAL_JPEG_IRQHandler+0x26>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
90009672:	6a62      	ldr	r2, [r4, #36]	; 0x24
90009674:	4620      	mov	r0, r4
90009676:	69e1      	ldr	r1, [r4, #28]
90009678:	f7f8 f97c 	bl	90001974 <HAL_JPEG_DataReadyCallback>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
9000967c:	6822      	ldr	r2, [r4, #0]
      hjpeg->JpegOutCount = 0;
9000967e:	6265      	str	r5, [r4, #36]	; 0x24
90009680:	e7ad      	b.n	900095de <HAL_JPEG_IRQHandler+0x9e>
90009682:	bf00      	nop

90009684 <HAL_LTDC_Init>:
{
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
90009684:	2800      	cmp	r0, #0
90009686:	d067      	beq.n	90009758 <HAL_LTDC_Init+0xd4>
{
90009688:	b538      	push	{r3, r4, r5, lr}
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
9000968a:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
9000968e:	4604      	mov	r4, r0
90009690:	f003 02ff 	and.w	r2, r3, #255	; 0xff
90009694:	2b00      	cmp	r3, #0
90009696:	d05a      	beq.n	9000974e <HAL_LTDC_Init+0xca>
  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
90009698:	68a0      	ldr	r0, [r4, #8]
  hltdc->State = HAL_LTDC_STATE_BUSY;
9000969a:	2102      	movs	r1, #2
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
9000969c:	e9d4 3200 	ldrd	r3, r2, [r4]
  hltdc->State = HAL_LTDC_STATE_BUSY;
900096a0:	f884 10a1 	strb.w	r1, [r4, #161]	; 0xa1
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
900096a4:	4302      	orrs	r2, r0
900096a6:	68e1      	ldr	r1, [r4, #12]
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
900096a8:	6998      	ldr	r0, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
900096aa:	430a      	orrs	r2, r1
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
900096ac:	6921      	ldr	r1, [r4, #16]
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
900096ae:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
900096b2:	430a      	orrs	r2, r1

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
900096b4:	4929      	ldr	r1, [pc, #164]	; (9000975c <HAL_LTDC_Init+0xd8>)
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
900096b6:	6198      	str	r0, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
900096b8:	6998      	ldr	r0, [r3, #24]
900096ba:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.HorizontalSync << 16U);
900096bc:	6960      	ldr	r0, [r4, #20]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
900096be:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
900096c0:	689a      	ldr	r2, [r3, #8]
900096c2:	400a      	ands	r2, r1
900096c4:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
900096c6:	689a      	ldr	r2, [r3, #8]
900096c8:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
900096cc:	69a0      	ldr	r0, [r4, #24]
900096ce:	4302      	orrs	r2, r0

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
900096d0:	69e0      	ldr	r0, [r4, #28]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
900096d2:	609a      	str	r2, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
900096d4:	68da      	ldr	r2, [r3, #12]
900096d6:	400a      	ands	r2, r1
900096d8:	60da      	str	r2, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
900096da:	68da      	ldr	r2, [r3, #12]
900096dc:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
900096e0:	6a20      	ldr	r0, [r4, #32]
900096e2:	4302      	orrs	r2, r0

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
900096e4:	6a60      	ldr	r0, [r4, #36]	; 0x24
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
900096e6:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
900096e8:	691a      	ldr	r2, [r3, #16]
900096ea:	400a      	ands	r2, r1
900096ec:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
900096ee:	691a      	ldr	r2, [r3, #16]
900096f0:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
900096f4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
900096f6:	4302      	orrs	r2, r0

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
  tmp = (hltdc->Init.TotalWidth << 16U);
900096f8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
900096fa:	611a      	str	r2, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
900096fc:	695a      	ldr	r2, [r3, #20]
900096fe:	400a      	ands	r2, r1
90009700:	615a      	str	r2, [r3, #20]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
90009702:	695a      	ldr	r2, [r3, #20]
90009704:	6b21      	ldr	r1, [r4, #48]	; 0x30
90009706:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
9000970a:	430a      	orrs	r2, r1
9000970c:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
9000970e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
90009710:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
90009714:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
90009718:	f894 1036 	ldrb.w	r1, [r4, #54]	; 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
9000971c:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
9000971e:	6add      	ldr	r5, [r3, #44]	; 0x2c
90009720:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
90009724:	432a      	orrs	r2, r5
90009726:	ea42 2200 	orr.w	r2, r2, r0, lsl #8

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
9000972a:	2000      	movs	r0, #0
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
9000972c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
90009730:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
90009732:	6b5a      	ldr	r2, [r3, #52]	; 0x34
90009734:	f042 0206 	orr.w	r2, r2, #6
90009738:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
9000973a:	699a      	ldr	r2, [r3, #24]
9000973c:	f042 0201 	orr.w	r2, r2, #1
90009740:	619a      	str	r2, [r3, #24]

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
90009742:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
90009744:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
90009748:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1

  return HAL_OK;
}
9000974c:	bd38      	pop	{r3, r4, r5, pc}
    hltdc->Lock = HAL_UNLOCKED;
9000974e:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
90009752:	f7fa fc4f 	bl	90003ff4 <HAL_LTDC_MspInit>
90009756:	e79f      	b.n	90009698 <HAL_LTDC_Init+0x14>
    return HAL_ERROR;
90009758:	2001      	movs	r0, #1
}
9000975a:	4770      	bx	lr
9000975c:	f000f800 	.word	0xf000f800

90009760 <HAL_LTDC_ErrorCallback>:
90009760:	4770      	bx	lr
90009762:	bf00      	nop

90009764 <HAL_LTDC_ReloadEventCallback>:
90009764:	4770      	bx	lr
90009766:	bf00      	nop

90009768 <HAL_LTDC_IRQHandler>:
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
90009768:	6803      	ldr	r3, [r0, #0]
{
9000976a:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
9000976c:	6b9d      	ldr	r5, [r3, #56]	; 0x38
{
9000976e:	4604      	mov	r4, r0
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
90009770:	6b5e      	ldr	r6, [r3, #52]	; 0x34

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
90009772:	076a      	lsls	r2, r5, #29
90009774:	d501      	bpl.n	9000977a <HAL_LTDC_IRQHandler+0x12>
90009776:	0771      	lsls	r1, r6, #29
90009778:	d41d      	bmi.n	900097b6 <HAL_LTDC_IRQHandler+0x4e>
    HAL_LTDC_ErrorCallback(hltdc);
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
9000977a:	07aa      	lsls	r2, r5, #30
9000977c:	d501      	bpl.n	90009782 <HAL_LTDC_IRQHandler+0x1a>
9000977e:	07b3      	lsls	r3, r6, #30
90009780:	d42d      	bmi.n	900097de <HAL_LTDC_IRQHandler+0x76>
    HAL_LTDC_ErrorCallback(hltdc);
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
90009782:	07e8      	lsls	r0, r5, #31
90009784:	d501      	bpl.n	9000978a <HAL_LTDC_IRQHandler+0x22>
90009786:	07f1      	lsls	r1, r6, #31
90009788:	d440      	bmi.n	9000980c <HAL_LTDC_IRQHandler+0xa4>
    HAL_LTDC_LineEventCallback(hltdc);
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
9000978a:	072a      	lsls	r2, r5, #28
9000978c:	d501      	bpl.n	90009792 <HAL_LTDC_IRQHandler+0x2a>
9000978e:	0733      	lsls	r3, r6, #28
90009790:	d400      	bmi.n	90009794 <HAL_LTDC_IRQHandler+0x2c>
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
90009792:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
90009794:	6823      	ldr	r3, [r4, #0]
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
90009796:	2008      	movs	r0, #8
    hltdc->State = HAL_LTDC_STATE_READY;
90009798:	2501      	movs	r5, #1
    __HAL_UNLOCK(hltdc);
9000979a:	2100      	movs	r1, #0
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
9000979c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
9000979e:	f022 0208 	bic.w	r2, r2, #8
900097a2:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
900097a4:	63d8      	str	r0, [r3, #60]	; 0x3c
    HAL_LTDC_ReloadEventCallback(hltdc);
900097a6:	4620      	mov	r0, r4
    hltdc->State = HAL_LTDC_STATE_READY;
900097a8:	f884 50a1 	strb.w	r5, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
900097ac:	f884 10a0 	strb.w	r1, [r4, #160]	; 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
900097b0:	f7ff ffd8 	bl	90009764 <HAL_LTDC_ReloadEventCallback>
}
900097b4:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
900097b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
900097b8:	f022 0204 	bic.w	r2, r2, #4
900097bc:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
900097be:	2204      	movs	r2, #4
900097c0:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
900097c2:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
900097c6:	f043 0301 	orr.w	r3, r3, #1
900097ca:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
    __HAL_UNLOCK(hltdc);
900097ce:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_ERROR;
900097d0:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
900097d4:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
900097d8:	f7ff ffc2 	bl	90009760 <HAL_LTDC_ErrorCallback>
900097dc:	e7cd      	b.n	9000977a <HAL_LTDC_IRQHandler+0x12>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
900097de:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ErrorCallback(hltdc);
900097e0:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
900097e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
900097e4:	f022 0202 	bic.w	r2, r2, #2
900097e8:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
900097ea:	2202      	movs	r2, #2
900097ec:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_ERROR;
900097ee:	2204      	movs	r2, #4
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
900097f0:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
900097f4:	f043 0302 	orr.w	r3, r3, #2
900097f8:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    __HAL_UNLOCK(hltdc);
900097fc:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_ERROR;
900097fe:	f884 20a1 	strb.w	r2, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
90009802:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
90009806:	f7ff ffab 	bl	90009760 <HAL_LTDC_ErrorCallback>
9000980a:	e7ba      	b.n	90009782 <HAL_LTDC_IRQHandler+0x1a>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
9000980c:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_LineEventCallback(hltdc);
9000980e:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
90009810:	6b5a      	ldr	r2, [r3, #52]	; 0x34
90009812:	f022 0201 	bic.w	r2, r2, #1
90009816:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
90009818:	2201      	movs	r2, #1
9000981a:	63da      	str	r2, [r3, #60]	; 0x3c
    __HAL_UNLOCK(hltdc);
9000981c:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_READY;
9000981e:	f884 20a1 	strb.w	r2, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
90009822:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
90009826:	f7f9 f8ef 	bl	90002a08 <HAL_LTDC_LineEventCallback>
9000982a:	e7ae      	b.n	9000978a <HAL_LTDC_IRQHandler+0x22>

9000982c <HAL_LTDC_ConfigLayer>:
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
9000982c:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
90009830:	2b01      	cmp	r3, #1
90009832:	f000 80c0 	beq.w	900099b6 <HAL_LTDC_ConfigLayer+0x18a>

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
90009836:	2302      	movs	r3, #2
{
90009838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
9000983c:	f04f 0e34 	mov.w	lr, #52	; 0x34
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
90009840:	f8d0 9000 	ldr.w	r9, [r0]
  hltdc->State = HAL_LTDC_STATE_BUSY;
90009844:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
{
90009848:	b083      	sub	sp, #12
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
9000984a:	fb0e 0e02 	mla	lr, lr, r2, r0
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
9000984e:	01d2      	lsls	r2, r2, #7
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
90009850:	f8d9 300c 	ldr.w	r3, [r9, #12]
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
90009854:	460c      	mov	r4, r1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
90009856:	f102 0684 	add.w	r6, r2, #132	; 0x84
9000985a:	460d      	mov	r5, r1
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
9000985c:	f3c3 4b0b 	ubfx	fp, r3, #16, #12
90009860:	4680      	mov	r8, r0
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
90009862:	eb09 0c06 	add.w	ip, r9, r6
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
90009866:	f10e 0e38 	add.w	lr, lr, #56	; 0x38
  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
9000986a:	f8df a160 	ldr.w	sl, [pc, #352]	; 900099cc <HAL_LTDC_ConfigLayer+0x1a0>
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
9000986e:	f8dc 3004 	ldr.w	r3, [ip, #4]
90009872:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
90009876:	9301      	str	r3, [sp, #4]
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
90009878:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
9000987a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
9000987e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
90009880:	686f      	ldr	r7, [r5, #4]
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
90009882:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
90009886:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
90009888:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
9000988c:	6823      	ldr	r3, [r4, #0]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
9000988e:	44bb      	add	fp, r7
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
90009890:	f8ce 3000 	str.w	r3, [lr]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
90009894:	9b01      	ldr	r3, [sp, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
90009896:	682a      	ldr	r2, [r5, #0]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
90009898:	f8cc 3004 	str.w	r3, [ip, #4]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
9000989c:	f8d9 300c 	ldr.w	r3, [r9, #12]
900098a0:	1c51      	adds	r1, r2, #1
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
900098a2:	68e8      	ldr	r0, [r5, #12]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
900098a4:	f3c3 430b 	ubfx	r3, r3, #16, #12
  tmp2 = (pLayerCfg->Alpha0 << 24U);
900098a8:	f8d5 e018 	ldr.w	lr, [r5, #24]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
900098ac:	440b      	add	r3, r1
900098ae:	ea43 430b 	orr.w	r3, r3, fp, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
900098b2:	f8cc 3004 	str.w	r3, [ip, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
900098b6:	f8d9 100c 	ldr.w	r1, [r9, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
900098ba:	f8dc 3008 	ldr.w	r3, [ip, #8]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
900098be:	f3c1 010a 	ubfx	r1, r1, #0, #11
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
900098c2:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
900098c6:	4401      	add	r1, r0
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
900098c8:	f8cc 3008 	str.w	r3, [ip, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
900098cc:	68ab      	ldr	r3, [r5, #8]
900098ce:	f8d9 000c 	ldr.w	r0, [r9, #12]
900098d2:	3301      	adds	r3, #1
900098d4:	f3c0 000a 	ubfx	r0, r0, #0, #11
900098d8:	4403      	add	r3, r0
900098da:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
900098de:	6929      	ldr	r1, [r5, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
900098e0:	f8cc 3008 	str.w	r3, [ip, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
900098e4:	f8dc 3010 	ldr.w	r3, [ip, #16]
900098e8:	f023 0307 	bic.w	r3, r3, #7
900098ec:	f8cc 3010 	str.w	r3, [ip, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
900098f0:	f8cc 1010 	str.w	r1, [ip, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
900098f4:	f8dc 3018 	ldr.w	r3, [ip, #24]
900098f8:	2300      	movs	r3, #0
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
900098fa:	f895 0032 	ldrb.w	r0, [r5, #50]	; 0x32
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
900098fe:	f895 4031 	ldrb.w	r4, [r5, #49]	; 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
90009902:	f8cc 3018 	str.w	r3, [ip, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
90009906:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
9000990a:	ea43 630e 	orr.w	r3, r3, lr, lsl #24
9000990e:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
90009912:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
90009916:	f8cc 3018 	str.w	r3, [ip, #24]
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
9000991a:	f8dc 3014 	ldr.w	r3, [ip, #20]
9000991e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
90009922:	f8cc 3014 	str.w	r3, [ip, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
90009926:	696b      	ldr	r3, [r5, #20]
90009928:	f8cc 3014 	str.w	r3, [ip, #20]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
9000992c:	f8dc 001c 	ldr.w	r0, [ip, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
90009930:	69eb      	ldr	r3, [r5, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
90009932:	ea00 0a0a 	and.w	sl, r0, sl
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
90009936:	6a28      	ldr	r0, [r5, #32]
90009938:	4303      	orrs	r3, r0
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
9000993a:	f8cc a01c 	str.w	sl, [ip, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
9000993e:	f8cc 301c 	str.w	r3, [ip, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
90009942:	f8dc 3028 	ldr.w	r3, [ip, #40]	; 0x28
90009946:	2300      	movs	r3, #0
90009948:	f8cc 3028 	str.w	r3, [ip, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
9000994c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
9000994e:	f8cc 3028 	str.w	r3, [ip, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
90009952:	bb59      	cbnz	r1, 900099ac <HAL_LTDC_ConfigLayer+0x180>
  {
    tmp = 4U;
90009954:	2304      	movs	r3, #4
    tmp = 1U;
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
90009956:	1abf      	subs	r7, r7, r2
90009958:	6aaa      	ldr	r2, [r5, #40]	; 0x28
9000995a:	fb03 f707 	mul.w	r7, r3, r7
9000995e:	fb02 f303 	mul.w	r3, r2, r3
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
90009962:	6aea      	ldr	r2, [r5, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
90009964:	3707      	adds	r7, #7
90009966:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
9000996a:	f8dc 302c 	ldr.w	r3, [ip, #44]	; 0x2c
9000996e:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
90009972:	f8cc 302c 	str.w	r3, [ip, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
90009976:	f8cc 702c 	str.w	r7, [ip, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
9000997a:	4b12      	ldr	r3, [pc, #72]	; (900099c4 <HAL_LTDC_ConfigLayer+0x198>)
9000997c:	f8dc 1030 	ldr.w	r1, [ip, #48]	; 0x30
90009980:	400b      	ands	r3, r1
90009982:	f8cc 3030 	str.w	r3, [ip, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
90009986:	f8cc 2030 	str.w	r2, [ip, #48]	; 0x30
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
9000998a:	2201      	movs	r2, #1

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
9000998c:	f859 3006 	ldr.w	r3, [r9, r6]
90009990:	4313      	orrs	r3, r2
90009992:	f849 3006 	str.w	r3, [r9, r6]
  __HAL_UNLOCK(hltdc);
90009996:	2300      	movs	r3, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
90009998:	f8c9 2024 	str.w	r2, [r9, #36]	; 0x24
  return HAL_OK;
9000999c:	4618      	mov	r0, r3
  hltdc->State  = HAL_LTDC_STATE_READY;
9000999e:	f888 20a1 	strb.w	r2, [r8, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
900099a2:	f888 30a0 	strb.w	r3, [r8, #160]	; 0xa0
}
900099a6:	b003      	add	sp, #12
900099a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
900099ac:	3901      	subs	r1, #1
900099ae:	2906      	cmp	r1, #6
900099b0:	d903      	bls.n	900099ba <HAL_LTDC_ConfigLayer+0x18e>
  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
900099b2:	2301      	movs	r3, #1
900099b4:	e7cf      	b.n	90009956 <HAL_LTDC_ConfigLayer+0x12a>
  __HAL_LOCK(hltdc);
900099b6:	2002      	movs	r0, #2
}
900099b8:	4770      	bx	lr
900099ba:	4b03      	ldr	r3, [pc, #12]	; (900099c8 <HAL_LTDC_ConfigLayer+0x19c>)
900099bc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
900099c0:	e7c9      	b.n	90009956 <HAL_LTDC_ConfigLayer+0x12a>
900099c2:	bf00      	nop
900099c4:	fffff800 	.word	0xfffff800
900099c8:	90028b78 	.word	0x90028b78
900099cc:	fffff8f8 	.word	0xfffff8f8

900099d0 <HAL_LTDC_ProgramLineEvent>:
  __HAL_LOCK(hltdc);
900099d0:	f890 20a0 	ldrb.w	r2, [r0, #160]	; 0xa0
900099d4:	2a01      	cmp	r2, #1
900099d6:	d019      	beq.n	90009a0c <HAL_LTDC_ProgramLineEvent+0x3c>
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
900099d8:	6802      	ldr	r2, [r0, #0]
900099da:	4603      	mov	r3, r0
  hltdc->State = HAL_LTDC_STATE_BUSY;
900099dc:	2002      	movs	r0, #2
  __HAL_UNLOCK(hltdc);
900099de:	f04f 0c00 	mov.w	ip, #0
{
900099e2:	b410      	push	{r4}
  hltdc->State = HAL_LTDC_STATE_BUSY;
900099e4:	f883 00a1 	strb.w	r0, [r3, #161]	; 0xa1
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
900099e8:	6b50      	ldr	r0, [r2, #52]	; 0x34
  LTDC->LIPCR = (uint32_t)Line;
900099ea:	4c09      	ldr	r4, [pc, #36]	; (90009a10 <HAL_LTDC_ProgramLineEvent+0x40>)
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
900099ec:	f020 0001 	bic.w	r0, r0, #1
900099f0:	6350      	str	r0, [r2, #52]	; 0x34
  hltdc->State = HAL_LTDC_STATE_READY;
900099f2:	2001      	movs	r0, #1
  LTDC->LIPCR = (uint32_t)Line;
900099f4:	6421      	str	r1, [r4, #64]	; 0x40
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
900099f6:	6b51      	ldr	r1, [r2, #52]	; 0x34
900099f8:	4301      	orrs	r1, r0
900099fa:	6351      	str	r1, [r2, #52]	; 0x34
  hltdc->State = HAL_LTDC_STATE_READY;
900099fc:	f883 00a1 	strb.w	r0, [r3, #161]	; 0xa1
  return HAL_OK;
90009a00:	4660      	mov	r0, ip
  __HAL_UNLOCK(hltdc);
90009a02:	f883 c0a0 	strb.w	ip, [r3, #160]	; 0xa0
}
90009a06:	f85d 4b04 	ldr.w	r4, [sp], #4
90009a0a:	4770      	bx	lr
  __HAL_LOCK(hltdc);
90009a0c:	2002      	movs	r0, #2
}
90009a0e:	4770      	bx	lr
90009a10:	50001000 	.word	0x50001000

90009a14 <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
90009a14:	b538      	push	{r3, r4, r5, lr}
90009a16:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
90009a18:	f7fc fbd0 	bl	900061bc <HAL_GetTick>

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
90009a1c:	2c00      	cmp	r4, #0
90009a1e:	d05a      	beq.n	90009ad6 <HAL_MDMA_Init+0xc2>

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
90009a20:	6823      	ldr	r3, [r4, #0]
  hmdma->State = HAL_MDMA_STATE_BUSY;
90009a22:	2202      	movs	r2, #2
  __HAL_UNLOCK(hmdma);
90009a24:	2100      	movs	r1, #0
90009a26:	4605      	mov	r5, r0
  hmdma->State = HAL_MDMA_STATE_BUSY;
90009a28:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_UNLOCK(hmdma);
90009a2c:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
  __HAL_MDMA_DISABLE(hmdma);
90009a30:	68da      	ldr	r2, [r3, #12]
90009a32:	f022 0201 	bic.w	r2, r2, #1
90009a36:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
90009a38:	e005      	b.n	90009a46 <HAL_MDMA_Init+0x32>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
90009a3a:	f7fc fbbf 	bl	900061bc <HAL_GetTick>
90009a3e:	1b43      	subs	r3, r0, r5
90009a40:	2b05      	cmp	r3, #5
90009a42:	d841      	bhi.n	90009ac8 <HAL_MDMA_Init+0xb4>
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
90009a44:	6823      	ldr	r3, [r4, #0]
90009a46:	68da      	ldr	r2, [r3, #12]
90009a48:	07d2      	lsls	r2, r2, #31
90009a4a:	d4f6      	bmi.n	90009a3a <HAL_MDMA_Init+0x26>
  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
                           hmdma->Init.DestBurst                                   | \
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
90009a4c:	e9d4 2505 	ldrd	r2, r5, [r4, #20]
90009a50:	69e0      	ldr	r0, [r4, #28]
90009a52:	432a      	orrs	r2, r5
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
90009a54:	68e1      	ldr	r1, [r4, #12]
90009a56:	6925      	ldr	r5, [r4, #16]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
90009a58:	4302      	orrs	r2, r0
90009a5a:	6a20      	ldr	r0, [r4, #32]
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
90009a5c:	4329      	orrs	r1, r5
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
90009a5e:	4302      	orrs	r2, r0
90009a60:	6a60      	ldr	r0, [r4, #36]	; 0x24
90009a62:	4302      	orrs	r2, r0
90009a64:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
90009a66:	4302      	orrs	r2, r0
90009a68:	6b20      	ldr	r0, [r4, #48]	; 0x30
90009a6a:	4302      	orrs	r2, r0
90009a6c:	68a0      	ldr	r0, [r4, #8]
90009a6e:	4302      	orrs	r2, r0
90009a70:	6aa0      	ldr	r0, [r4, #40]	; 0x28
90009a72:	3801      	subs	r0, #1
90009a74:	ea42 4280 	orr.w	r2, r2, r0, lsl #18
                           hmdma->Init.TransferTriggerMode;

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
90009a78:	6860      	ldr	r0, [r4, #4]
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
90009a7a:	60d9      	str	r1, [r3, #12]
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
90009a7c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
90009a80:	611a      	str	r2, [r3, #16]
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
90009a82:	d103      	bne.n	90009a8c <HAL_MDMA_Init+0x78>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
90009a84:	691a      	ldr	r2, [r3, #16]
90009a86:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
90009a8a:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
90009a8c:	2100      	movs	r1, #0

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
90009a8e:	6b62      	ldr	r2, [r4, #52]	; 0x34
90009a90:	428a      	cmp	r2, r1
  hmdma->Instance->CBNDTR = 0;
90009a92:	6159      	str	r1, [r3, #20]
  if(hmdma->Init.SourceBlockAddressOffset < 0)
90009a94:	db30      	blt.n	90009af8 <HAL_MDMA_Init+0xe4>
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
90009a96:	b292      	uxth	r2, r2
90009a98:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
90009a9a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
90009a9c:	2a00      	cmp	r2, #0
90009a9e:	db1c      	blt.n	90009ada <HAL_MDMA_Init+0xc6>
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
90009aa0:	6a19      	ldr	r1, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
90009aa2:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
90009aa6:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
90009aaa:	621a      	str	r2, [r3, #32]
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
90009aac:	d021      	beq.n	90009af2 <HAL_MDMA_Init+0xde>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
90009aae:	b2c0      	uxtb	r0, r0
90009ab0:	6298      	str	r0, [r3, #40]	; 0x28
  {
    hmdma->Instance->CTBR = 0;
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
90009ab2:	2200      	movs	r2, #0
  hmdma->State = HAL_MDMA_STATE_READY;
90009ab4:	2101      	movs	r1, #1
  hmdma->Instance->CLAR =  0;
90009ab6:	625a      	str	r2, [r3, #36]	; 0x24
  return HAL_OK;
90009ab8:	4610      	mov	r0, r2
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
90009aba:	66a2      	str	r2, [r4, #104]	; 0x68
  hmdma->LinkedListNodeCounter  = 0;
90009abc:	6662      	str	r2, [r4, #100]	; 0x64
  hmdma->State = HAL_MDMA_STATE_READY;
90009abe:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  hmdma->LastLinkedListNodeAddress   = 0;
90009ac2:	e9c4 2217 	strd	r2, r2, [r4, #92]	; 0x5c
}
90009ac6:	bd38      	pop	{r3, r4, r5, pc}
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
90009ac8:	2240      	movs	r2, #64	; 0x40
      hmdma->State = HAL_MDMA_STATE_ERROR;
90009aca:	2303      	movs	r3, #3
      return HAL_ERROR;
90009acc:	2001      	movs	r0, #1
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
90009ace:	66a2      	str	r2, [r4, #104]	; 0x68
      hmdma->State = HAL_MDMA_STATE_ERROR;
90009ad0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
90009ad4:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
90009ad6:	2001      	movs	r0, #1
}
90009ad8:	bd38      	pop	{r3, r4, r5, pc}
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
90009ada:	6959      	ldr	r1, [r3, #20]
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
90009adc:	4252      	negs	r2, r2
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
90009ade:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
90009ae2:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
90009ae6:	6159      	str	r1, [r3, #20]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
90009ae8:	6a19      	ldr	r1, [r3, #32]
90009aea:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
90009aee:	621a      	str	r2, [r3, #32]
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
90009af0:	d1dd      	bne.n	90009aae <HAL_MDMA_Init+0x9a>
    hmdma->Instance->CTBR = 0;
90009af2:	2200      	movs	r2, #0
90009af4:	629a      	str	r2, [r3, #40]	; 0x28
90009af6:	e7dc      	b.n	90009ab2 <HAL_MDMA_Init+0x9e>
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
90009af8:	6959      	ldr	r1, [r3, #20]
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
90009afa:	4252      	negs	r2, r2
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
90009afc:	f441 2180 	orr.w	r1, r1, #262144	; 0x40000
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
90009b00:	b292      	uxth	r2, r2
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
90009b02:	6159      	str	r1, [r3, #20]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
90009b04:	621a      	str	r2, [r3, #32]
90009b06:	e7c8      	b.n	90009a9a <HAL_MDMA_Init+0x86>

90009b08 <HAL_MDMA_DeInit>:
  if(hmdma == NULL)
90009b08:	b1f8      	cbz	r0, 90009b4a <HAL_MDMA_DeInit+0x42>
  __HAL_MDMA_DISABLE(hmdma);
90009b0a:	6802      	ldr	r2, [r0, #0]
90009b0c:	4601      	mov	r1, r0
  hmdma->Instance->CCR  = 0;
90009b0e:	2300      	movs	r3, #0
  __HAL_MDMA_DISABLE(hmdma);
90009b10:	68d0      	ldr	r0, [r2, #12]
{
90009b12:	b410      	push	{r4}
  __HAL_MDMA_DISABLE(hmdma);
90009b14:	f020 0001 	bic.w	r0, r0, #1
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
90009b18:	241f      	movs	r4, #31
  __HAL_MDMA_DISABLE(hmdma);
90009b1a:	60d0      	str	r0, [r2, #12]
  return HAL_OK;
90009b1c:	4618      	mov	r0, r3
  hmdma->Instance->CCR  = 0;
90009b1e:	60d3      	str	r3, [r2, #12]
  hmdma->Instance->CTCR = 0;
90009b20:	6113      	str	r3, [r2, #16]
  hmdma->Instance->CBNDTR = 0;
90009b22:	6153      	str	r3, [r2, #20]
  hmdma->Instance->CSAR = 0;
90009b24:	6193      	str	r3, [r2, #24]
  hmdma->Instance->CDAR = 0;
90009b26:	61d3      	str	r3, [r2, #28]
  hmdma->Instance->CBRUR = 0;
90009b28:	6213      	str	r3, [r2, #32]
  hmdma->Instance->CLAR = 0;
90009b2a:	6253      	str	r3, [r2, #36]	; 0x24
  hmdma->Instance->CTBR = 0;
90009b2c:	6293      	str	r3, [r2, #40]	; 0x28
  hmdma->Instance->CMAR = 0;
90009b2e:	6313      	str	r3, [r2, #48]	; 0x30
  hmdma->Instance->CMDR = 0;
90009b30:	6353      	str	r3, [r2, #52]	; 0x34
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
90009b32:	6054      	str	r4, [r2, #4]
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
90009b34:	668b      	str	r3, [r1, #104]	; 0x68
  __HAL_UNLOCK(hmdma);
90009b36:	f881 303c 	strb.w	r3, [r1, #60]	; 0x3c
  hmdma->State = HAL_MDMA_STATE_RESET;
90009b3a:	f881 303d 	strb.w	r3, [r1, #61]	; 0x3d
}
90009b3e:	f85d 4b04 	ldr.w	r4, [sp], #4
  hmdma->LinkedListNodeCounter  = 0;
90009b42:	664b      	str	r3, [r1, #100]	; 0x64
  hmdma->LastLinkedListNodeAddress   = 0;
90009b44:	e9c1 3317 	strd	r3, r3, [r1, #92]	; 0x5c
}
90009b48:	4770      	bx	lr
    return HAL_ERROR;
90009b4a:	2001      	movs	r0, #1
}
90009b4c:	4770      	bx	lr
90009b4e:	bf00      	nop

90009b50 <HAL_MDMA_ConfigPostRequestMask>:
  if(hmdma == NULL)
90009b50:	b310      	cbz	r0, 90009b98 <HAL_MDMA_ConfigPostRequestMask+0x48>
90009b52:	4603      	mov	r3, r0
  __HAL_LOCK(hmdma);
90009b54:	f890 003c 	ldrb.w	r0, [r0, #60]	; 0x3c
90009b58:	2801      	cmp	r0, #1
90009b5a:	d01f      	beq.n	90009b9c <HAL_MDMA_ConfigPostRequestMask+0x4c>
{
90009b5c:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(hmdma);
90009b5e:	f04f 0e01 	mov.w	lr, #1
  if(HAL_MDMA_STATE_READY == hmdma->State)
90009b62:	f893 c03d 	ldrb.w	ip, [r3, #61]	; 0x3d
90009b66:	45f4      	cmp	ip, lr
90009b68:	fa5f f08c 	uxtb.w	r0, ip
  __HAL_LOCK(hmdma);
90009b6c:	f883 e03c 	strb.w	lr, [r3, #60]	; 0x3c
  if(HAL_MDMA_STATE_READY == hmdma->State)
90009b70:	d004      	beq.n	90009b7c <HAL_MDMA_ConfigPostRequestMask+0x2c>
    status =  HAL_ERROR;
90009b72:	4670      	mov	r0, lr
  __HAL_UNLOCK(hmdma);
90009b74:	2200      	movs	r2, #0
90009b76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
90009b7a:	bd30      	pop	{r4, r5, pc}
    if((hmdma->Instance->CTCR & MDMA_CTCR_SWRM) == 0U)
90009b7c:	681d      	ldr	r5, [r3, #0]
90009b7e:	692c      	ldr	r4, [r5, #16]
90009b80:	f014 4480 	ands.w	r4, r4, #1073741824	; 0x40000000
90009b84:	d1f6      	bne.n	90009b74 <HAL_MDMA_ConfigPostRequestMask+0x24>
      hmdma->Instance->CMAR = MaskAddress;
90009b86:	6329      	str	r1, [r5, #48]	; 0x30
      hmdma->Instance->CMDR = MaskData;
90009b88:	636a      	str	r2, [r5, #52]	; 0x34
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
90009b8a:	692a      	ldr	r2, [r5, #16]
      if(MaskAddress == 0U)
90009b8c:	b941      	cbnz	r1, 90009ba0 <HAL_MDMA_ConfigPostRequestMask+0x50>
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
90009b8e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
  HAL_StatusTypeDef  status = HAL_OK;
90009b92:	4608      	mov	r0, r1
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
90009b94:	612a      	str	r2, [r5, #16]
90009b96:	e7ed      	b.n	90009b74 <HAL_MDMA_ConfigPostRequestMask+0x24>
    return HAL_ERROR;
90009b98:	2001      	movs	r0, #1
90009b9a:	4770      	bx	lr
  __HAL_LOCK(hmdma);
90009b9c:	2002      	movs	r0, #2
}
90009b9e:	4770      	bx	lr
        hmdma->Instance->CTCR |=  MDMA_CTCR_BWM;
90009ba0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
  HAL_StatusTypeDef  status = HAL_OK;
90009ba4:	4620      	mov	r0, r4
        hmdma->Instance->CTCR |=  MDMA_CTCR_BWM;
90009ba6:	612a      	str	r2, [r5, #16]
90009ba8:	e7e4      	b.n	90009b74 <HAL_MDMA_ConfigPostRequestMask+0x24>
90009baa:	bf00      	nop

90009bac <HAL_MDMA_Start_IT>:
  if(hmdma == NULL)
90009bac:	2800      	cmp	r0, #0
90009bae:	d06f      	beq.n	90009c90 <HAL_MDMA_Start_IT+0xe4>
90009bb0:	4684      	mov	ip, r0
  __HAL_LOCK(hmdma);
90009bb2:	f890 003c 	ldrb.w	r0, [r0, #60]	; 0x3c
90009bb6:	2801      	cmp	r0, #1
90009bb8:	d072      	beq.n	90009ca0 <HAL_MDMA_Start_IT+0xf4>
90009bba:	2001      	movs	r0, #1
90009bbc:	f88c 003c 	strb.w	r0, [ip, #60]	; 0x3c
  if(HAL_MDMA_STATE_READY == hmdma->State)
90009bc0:	f89c 003d 	ldrb.w	r0, [ip, #61]	; 0x3d
90009bc4:	2801      	cmp	r0, #1
90009bc6:	d004      	beq.n	90009bd2 <HAL_MDMA_Start_IT+0x26>
    __HAL_UNLOCK(hmdma);
90009bc8:	2300      	movs	r3, #0
    return HAL_BUSY;
90009bca:	2002      	movs	r0, #2
    __HAL_UNLOCK(hmdma);
90009bcc:	f88c 303c 	strb.w	r3, [ip, #60]	; 0x3c
    return HAL_BUSY;
90009bd0:	4770      	bx	lr
    hmdma->State = HAL_MDMA_STATE_BUSY;
90009bd2:	2002      	movs	r0, #2
  MODIFY_REG(hmdma->Instance->CBNDTR ,MDMA_CBNDTR_BNDT, (BlockDataLength & MDMA_CBNDTR_BNDT));
90009bd4:	f3c3 0310 	ubfx	r3, r3, #0, #17
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
90009bd8:	f011 4f5f 	tst.w	r1, #3741319168	; 0xdf000000
{
90009bdc:	b530      	push	{r4, r5, lr}
  MODIFY_REG(hmdma->Instance->CBNDTR , MDMA_CBNDTR_BRC , ((BlockCount - 1U) << MDMA_CBNDTR_BRC_Pos) & MDMA_CBNDTR_BRC);
90009bde:	9d03      	ldr	r5, [sp, #12]
    hmdma->State = HAL_MDMA_STATE_BUSY;
90009be0:	f88c 003d 	strb.w	r0, [ip, #61]	; 0x3d
    hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
90009be4:	f04f 0000 	mov.w	r0, #0
    __HAL_MDMA_DISABLE(hmdma);
90009be8:	f8dc 4000 	ldr.w	r4, [ip]
  MODIFY_REG(hmdma->Instance->CBNDTR , MDMA_CBNDTR_BRC , ((BlockCount - 1U) << MDMA_CBNDTR_BRC_Pos) & MDMA_CBNDTR_BRC);
90009bec:	f105 3eff 	add.w	lr, r5, #4294967295
    hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
90009bf0:	f8cc 0068 	str.w	r0, [ip, #104]	; 0x68
  MODIFY_REG(hmdma->Instance->CBNDTR ,MDMA_CBNDTR_BNDT, (BlockDataLength & MDMA_CBNDTR_BNDT));
90009bf4:	f5a0 3000 	sub.w	r0, r0, #131072	; 0x20000
    __HAL_MDMA_DISABLE(hmdma);
90009bf8:	68e5      	ldr	r5, [r4, #12]
90009bfa:	f025 0501 	bic.w	r5, r5, #1
90009bfe:	60e5      	str	r5, [r4, #12]
  MODIFY_REG(hmdma->Instance->CBNDTR ,MDMA_CBNDTR_BNDT, (BlockDataLength & MDMA_CBNDTR_BNDT));
90009c00:	6965      	ldr	r5, [r4, #20]
90009c02:	ea00 0005 	and.w	r0, r0, r5
90009c06:	ea40 0003 	orr.w	r0, r0, r3
90009c0a:	6160      	str	r0, [r4, #20]
  MODIFY_REG(hmdma->Instance->CBNDTR , MDMA_CBNDTR_BRC , ((BlockCount - 1U) << MDMA_CBNDTR_BRC_Pos) & MDMA_CBNDTR_BRC);
90009c0c:	6963      	ldr	r3, [r4, #20]
90009c0e:	f3c3 0313 	ubfx	r3, r3, #0, #20
90009c12:	ea43 530e 	orr.w	r3, r3, lr, lsl #20
90009c16:	6163      	str	r3, [r4, #20]
  __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_CISR_BRTIF | MDMA_CISR_BTIF | MDMA_CISR_TCIF);
90009c18:	f04f 031f 	mov.w	r3, #31
90009c1c:	6063      	str	r3, [r4, #4]
  hmdma->Instance->CDAR = DstAddress;
90009c1e:	61e2      	str	r2, [r4, #28]
  hmdma->Instance->CSAR = SrcAddress;
90009c20:	61a1      	str	r1, [r4, #24]
    hmdma->Instance->CTBR |= MDMA_CTBR_SBUS;
90009c22:	6aa3      	ldr	r3, [r4, #40]	; 0x28
90009c24:	bf0c      	ite	eq
90009c26:	f443 3380 	orreq.w	r3, r3, #65536	; 0x10000
    hmdma->Instance->CTBR &= (~MDMA_CTBR_SBUS);
90009c2a:	f423 3380 	bicne.w	r3, r3, #65536	; 0x10000
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
90009c2e:	f012 4f5f 	tst.w	r2, #3741319168	; 0xdf000000
    if(hmdma->XferBlockCpltCallback != NULL)
90009c32:	f8dc 204c 	ldr.w	r2, [ip, #76]	; 0x4c
    hmdma->Instance->CTBR &= (~MDMA_CTBR_SBUS);
90009c36:	62a3      	str	r3, [r4, #40]	; 0x28
    hmdma->Instance->CTBR |= MDMA_CTBR_DBUS;
90009c38:	6aa3      	ldr	r3, [r4, #40]	; 0x28
90009c3a:	bf0c      	ite	eq
90009c3c:	f443 3300 	orreq.w	r3, r3, #131072	; 0x20000
    hmdma->Instance->CTBR &= (~MDMA_CTBR_DBUS);
90009c40:	f423 3300 	bicne.w	r3, r3, #131072	; 0x20000
90009c44:	62a3      	str	r3, [r4, #40]	; 0x28
  hmdma->Instance->CLAR = (uint32_t)hmdma->FirstLinkedListNodeAddress;
90009c46:	f8dc 305c 	ldr.w	r3, [ip, #92]	; 0x5c
90009c4a:	6263      	str	r3, [r4, #36]	; 0x24
    __HAL_MDMA_ENABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC));
90009c4c:	68e3      	ldr	r3, [r4, #12]
90009c4e:	f043 0306 	orr.w	r3, r3, #6
90009c52:	60e3      	str	r3, [r4, #12]
    if(hmdma->XferBlockCpltCallback != NULL)
90009c54:	b11a      	cbz	r2, 90009c5e <HAL_MDMA_Start_IT+0xb2>
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BT);
90009c56:	68e3      	ldr	r3, [r4, #12]
90009c58:	f043 0310 	orr.w	r3, r3, #16
90009c5c:	60e3      	str	r3, [r4, #12]
    if(hmdma->XferRepeatBlockCpltCallback != NULL)
90009c5e:	f8dc 3050 	ldr.w	r3, [ip, #80]	; 0x50
90009c62:	b11b      	cbz	r3, 90009c6c <HAL_MDMA_Start_IT+0xc0>
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BRT);
90009c64:	68e3      	ldr	r3, [r4, #12]
90009c66:	f043 0308 	orr.w	r3, r3, #8
90009c6a:	60e3      	str	r3, [r4, #12]
    if(hmdma->XferBufferCpltCallback != NULL)
90009c6c:	f8dc 3048 	ldr.w	r3, [ip, #72]	; 0x48
90009c70:	b11b      	cbz	r3, 90009c7a <HAL_MDMA_Start_IT+0xce>
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BFTC);
90009c72:	68e3      	ldr	r3, [r4, #12]
90009c74:	f043 0320 	orr.w	r3, r3, #32
90009c78:	60e3      	str	r3, [r4, #12]
    __HAL_MDMA_ENABLE(hmdma);
90009c7a:	68e3      	ldr	r3, [r4, #12]
    if(hmdma->Init.Request == MDMA_REQUEST_SW)
90009c7c:	f8dc 2004 	ldr.w	r2, [ip, #4]
    __HAL_MDMA_ENABLE(hmdma);
90009c80:	f043 0301 	orr.w	r3, r3, #1
    if(hmdma->Init.Request == MDMA_REQUEST_SW)
90009c84:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
    __HAL_MDMA_ENABLE(hmdma);
90009c88:	60e3      	str	r3, [r4, #12]
    if(hmdma->Init.Request == MDMA_REQUEST_SW)
90009c8a:	d003      	beq.n	90009c94 <HAL_MDMA_Start_IT+0xe8>
  return HAL_OK;
90009c8c:	2000      	movs	r0, #0
}
90009c8e:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
90009c90:	2001      	movs	r0, #1
90009c92:	4770      	bx	lr
      hmdma->Instance->CCR |=  MDMA_CCR_SWRQ;
90009c94:	68e3      	ldr	r3, [r4, #12]
  return HAL_OK;
90009c96:	2000      	movs	r0, #0
      hmdma->Instance->CCR |=  MDMA_CCR_SWRQ;
90009c98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
90009c9c:	60e3      	str	r3, [r4, #12]
}
90009c9e:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hmdma);
90009ca0:	2002      	movs	r0, #2
}
90009ca2:	4770      	bx	lr

90009ca4 <HAL_MDMA_Abort_IT>:
  if(hmdma == NULL)
90009ca4:	4603      	mov	r3, r0
90009ca6:	b188      	cbz	r0, 90009ccc <HAL_MDMA_Abort_IT+0x28>
  if(HAL_MDMA_STATE_BUSY != hmdma->State)
90009ca8:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
90009cac:	2a02      	cmp	r2, #2
90009cae:	d003      	beq.n	90009cb8 <HAL_MDMA_Abort_IT+0x14>
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
90009cb0:	2280      	movs	r2, #128	; 0x80
    return HAL_ERROR;
90009cb2:	2001      	movs	r0, #1
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
90009cb4:	669a      	str	r2, [r3, #104]	; 0x68
    return HAL_ERROR;
90009cb6:	4770      	bx	lr
    __HAL_MDMA_DISABLE(hmdma);
90009cb8:	6802      	ldr	r2, [r0, #0]
    hmdma->State = HAL_MDMA_STATE_ABORT;
90009cba:	2104      	movs	r1, #4
  return HAL_OK;
90009cbc:	2000      	movs	r0, #0
    hmdma->State = HAL_MDMA_STATE_ABORT;
90009cbe:	f883 103d 	strb.w	r1, [r3, #61]	; 0x3d
    __HAL_MDMA_DISABLE(hmdma);
90009cc2:	68d3      	ldr	r3, [r2, #12]
90009cc4:	f023 0301 	bic.w	r3, r3, #1
90009cc8:	60d3      	str	r3, [r2, #12]
  return HAL_OK;
90009cca:	4770      	bx	lr
    return HAL_ERROR;
90009ccc:	2001      	movs	r0, #1
}
90009cce:	4770      	bx	lr

90009cd0 <HAL_MDMA_IRQHandler>:
{
90009cd0:	b530      	push	{r4, r5, lr}
  __IO uint32_t count = 0;
90009cd2:	2300      	movs	r3, #0
{
90009cd4:	b083      	sub	sp, #12
  if((MDMA->GISR0 & generalIntFlag) == 0U)
90009cd6:	f04f 45a4 	mov.w	r5, #1375731712	; 0x52000000
{
90009cda:	4604      	mov	r4, r0
  __IO uint32_t count = 0;
90009cdc:	9301      	str	r3, [sp, #4]
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
90009cde:	2101      	movs	r1, #1
  uint32_t timeout = SystemCoreClock / 9600U;
90009ce0:	4b57      	ldr	r3, [pc, #348]	; (90009e40 <HAL_MDMA_IRQHandler+0x170>)
  if((MDMA->GISR0 & generalIntFlag) == 0U)
90009ce2:	6828      	ldr	r0, [r5, #0]
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
90009ce4:	4a57      	ldr	r2, [pc, #348]	; (90009e44 <HAL_MDMA_IRQHandler+0x174>)
  uint32_t timeout = SystemCoreClock / 9600U;
90009ce6:	681d      	ldr	r5, [r3, #0]
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
90009ce8:	6823      	ldr	r3, [r4, #0]
90009cea:	441a      	add	r2, r3
90009cec:	f3c2 1284 	ubfx	r2, r2, #6, #5
90009cf0:	fa01 f202 	lsl.w	r2, r1, r2
  if((MDMA->GISR0 & generalIntFlag) == 0U)
90009cf4:	4202      	tst	r2, r0
90009cf6:	f000 80a0 	beq.w	90009e3a <HAL_MDMA_IRQHandler+0x16a>
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
90009cfa:	681a      	ldr	r2, [r3, #0]
90009cfc:	07d1      	lsls	r1, r2, #31
90009cfe:	d529      	bpl.n	90009d54 <HAL_MDMA_IRQHandler+0x84>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_TE) != 0U)
90009d00:	68da      	ldr	r2, [r3, #12]
90009d02:	0792      	lsls	r2, r2, #30
90009d04:	d526      	bpl.n	90009d54 <HAL_MDMA_IRQHandler+0x84>
      __HAL_MDMA_DISABLE_IT(hmdma, MDMA_IT_TE);
90009d06:	68da      	ldr	r2, [r3, #12]
90009d08:	f022 0202 	bic.w	r2, r2, #2
90009d0c:	60da      	str	r2, [r3, #12]
      errorFlag = hmdma->Instance->CESR;
90009d0e:	689a      	ldr	r2, [r3, #8]
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
90009d10:	6ea1      	ldr	r1, [r4, #104]	; 0x68
      if((errorFlag & MDMA_CESR_TED) == 0U)
90009d12:	0610      	lsls	r0, r2, #24
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
90009d14:	bf54      	ite	pl
90009d16:	f041 0101 	orrpl.w	r1, r1, #1
        hmdma->ErrorCode |= HAL_MDMA_ERROR_WRITE_XFER;
90009d1a:	f041 0102 	orrmi.w	r1, r1, #2
90009d1e:	66a1      	str	r1, [r4, #104]	; 0x68
      if((errorFlag & MDMA_CESR_TEMD) != 0U)
90009d20:	0591      	lsls	r1, r2, #22
90009d22:	d503      	bpl.n	90009d2c <HAL_MDMA_IRQHandler+0x5c>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_MASK_DATA;
90009d24:	6ea1      	ldr	r1, [r4, #104]	; 0x68
90009d26:	f041 0104 	orr.w	r1, r1, #4
90009d2a:	66a1      	str	r1, [r4, #104]	; 0x68
      if((errorFlag & MDMA_CESR_TELD) != 0U)
90009d2c:	05d0      	lsls	r0, r2, #23
90009d2e:	d503      	bpl.n	90009d38 <HAL_MDMA_IRQHandler+0x68>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_LINKED_LIST;
90009d30:	6ea1      	ldr	r1, [r4, #104]	; 0x68
90009d32:	f041 0108 	orr.w	r1, r1, #8
90009d36:	66a1      	str	r1, [r4, #104]	; 0x68
      if((errorFlag & MDMA_CESR_ASE) != 0U)
90009d38:	0551      	lsls	r1, r2, #21
90009d3a:	d503      	bpl.n	90009d44 <HAL_MDMA_IRQHandler+0x74>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_ALIGNMENT;
90009d3c:	6ea1      	ldr	r1, [r4, #104]	; 0x68
90009d3e:	f041 0110 	orr.w	r1, r1, #16
90009d42:	66a1      	str	r1, [r4, #104]	; 0x68
      if((errorFlag & MDMA_CESR_BSE) != 0U)
90009d44:	0510      	lsls	r0, r2, #20
90009d46:	d503      	bpl.n	90009d50 <HAL_MDMA_IRQHandler+0x80>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_BLOCK_SIZE;
90009d48:	6ea2      	ldr	r2, [r4, #104]	; 0x68
90009d4a:	f042 0220 	orr.w	r2, r2, #32
90009d4e:	66a2      	str	r2, [r4, #104]	; 0x68
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE);
90009d50:	2201      	movs	r2, #1
90009d52:	605a      	str	r2, [r3, #4]
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BFTC) != 0U))
90009d54:	681a      	ldr	r2, [r3, #0]
90009d56:	06d1      	lsls	r1, r2, #27
90009d58:	d509      	bpl.n	90009d6e <HAL_MDMA_IRQHandler+0x9e>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BFTC) != 0U)
90009d5a:	68da      	ldr	r2, [r3, #12]
90009d5c:	0692      	lsls	r2, r2, #26
90009d5e:	d506      	bpl.n	90009d6e <HAL_MDMA_IRQHandler+0x9e>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
90009d60:	2110      	movs	r1, #16
      if(hmdma->XferBufferCpltCallback != NULL)
90009d62:	6ca2      	ldr	r2, [r4, #72]	; 0x48
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
90009d64:	6059      	str	r1, [r3, #4]
      if(hmdma->XferBufferCpltCallback != NULL)
90009d66:	b112      	cbz	r2, 90009d6e <HAL_MDMA_IRQHandler+0x9e>
        hmdma->XferBufferCpltCallback(hmdma);
90009d68:	4620      	mov	r0, r4
90009d6a:	4790      	blx	r2
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BT) != 0U))
90009d6c:	6823      	ldr	r3, [r4, #0]
90009d6e:	681a      	ldr	r2, [r3, #0]
90009d70:	0710      	lsls	r0, r2, #28
90009d72:	d509      	bpl.n	90009d88 <HAL_MDMA_IRQHandler+0xb8>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BT) != 0U)
90009d74:	68da      	ldr	r2, [r3, #12]
90009d76:	06d1      	lsls	r1, r2, #27
90009d78:	d506      	bpl.n	90009d88 <HAL_MDMA_IRQHandler+0xb8>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
90009d7a:	2108      	movs	r1, #8
      if(hmdma->XferBlockCpltCallback != NULL)
90009d7c:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
90009d7e:	6059      	str	r1, [r3, #4]
      if(hmdma->XferBlockCpltCallback != NULL)
90009d80:	b112      	cbz	r2, 90009d88 <HAL_MDMA_IRQHandler+0xb8>
        hmdma->XferBlockCpltCallback(hmdma);
90009d82:	4620      	mov	r0, r4
90009d84:	4790      	blx	r2
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BRT) != 0U))
90009d86:	6823      	ldr	r3, [r4, #0]
90009d88:	681a      	ldr	r2, [r3, #0]
90009d8a:	0752      	lsls	r2, r2, #29
90009d8c:	d509      	bpl.n	90009da2 <HAL_MDMA_IRQHandler+0xd2>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BRT) != 0U)
90009d8e:	68da      	ldr	r2, [r3, #12]
90009d90:	0710      	lsls	r0, r2, #28
90009d92:	d506      	bpl.n	90009da2 <HAL_MDMA_IRQHandler+0xd2>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
90009d94:	2104      	movs	r1, #4
      if(hmdma->XferRepeatBlockCpltCallback != NULL)
90009d96:	6d22      	ldr	r2, [r4, #80]	; 0x50
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
90009d98:	6059      	str	r1, [r3, #4]
      if(hmdma->XferRepeatBlockCpltCallback != NULL)
90009d9a:	b112      	cbz	r2, 90009da2 <HAL_MDMA_IRQHandler+0xd2>
        hmdma->XferRepeatBlockCpltCallback(hmdma);
90009d9c:	4620      	mov	r0, r4
90009d9e:	4790      	blx	r2
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_CTC) != 0U))
90009da0:	6823      	ldr	r3, [r4, #0]
90009da2:	681a      	ldr	r2, [r3, #0]
90009da4:	0791      	lsls	r1, r2, #30
90009da6:	d516      	bpl.n	90009dd6 <HAL_MDMA_IRQHandler+0x106>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_CTC) != 0U)
90009da8:	68da      	ldr	r2, [r3, #12]
90009daa:	0752      	lsls	r2, r2, #29
90009dac:	d513      	bpl.n	90009dd6 <HAL_MDMA_IRQHandler+0x106>
      __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
90009dae:	68da      	ldr	r2, [r3, #12]
90009db0:	f022 023e 	bic.w	r2, r2, #62	; 0x3e
90009db4:	60da      	str	r2, [r3, #12]
      if(HAL_MDMA_STATE_ABORT == hmdma->State)
90009db6:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
90009dba:	2a04      	cmp	r2, #4
90009dbc:	d034      	beq.n	90009e28 <HAL_MDMA_IRQHandler+0x158>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
90009dbe:	2202      	movs	r2, #2
      __HAL_UNLOCK(hmdma);
90009dc0:	2100      	movs	r1, #0
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
90009dc2:	605a      	str	r2, [r3, #4]
      hmdma->State = HAL_MDMA_STATE_READY;
90009dc4:	2201      	movs	r2, #1
      if(hmdma->XferCpltCallback != NULL)
90009dc6:	6c63      	ldr	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(hmdma);
90009dc8:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
      hmdma->State = HAL_MDMA_STATE_READY;
90009dcc:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      if(hmdma->XferCpltCallback != NULL)
90009dd0:	b10b      	cbz	r3, 90009dd6 <HAL_MDMA_IRQHandler+0x106>
        hmdma->XferCpltCallback(hmdma);
90009dd2:	4620      	mov	r0, r4
90009dd4:	4798      	blx	r3
  if(hmdma->ErrorCode != HAL_MDMA_ERROR_NONE)
90009dd6:	6ea3      	ldr	r3, [r4, #104]	; 0x68
90009dd8:	2b00      	cmp	r3, #0
90009dda:	d02e      	beq.n	90009e3a <HAL_MDMA_IRQHandler+0x16a>
    __HAL_MDMA_DISABLE(hmdma);
90009ddc:	6821      	ldr	r1, [r4, #0]
    hmdma->State = HAL_MDMA_STATE_ABORT;
90009dde:	2004      	movs	r0, #4
  uint32_t timeout = SystemCoreClock / 9600U;
90009de0:	4b19      	ldr	r3, [pc, #100]	; (90009e48 <HAL_MDMA_IRQHandler+0x178>)
    hmdma->State = HAL_MDMA_STATE_ABORT;
90009de2:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  uint32_t timeout = SystemCoreClock / 9600U;
90009de6:	fba3 3205 	umull	r3, r2, r3, r5
    __HAL_MDMA_DISABLE(hmdma);
90009dea:	68cb      	ldr	r3, [r1, #12]
90009dec:	f023 0301 	bic.w	r3, r3, #1
  uint32_t timeout = SystemCoreClock / 9600U;
90009df0:	0a92      	lsrs	r2, r2, #10
    __HAL_MDMA_DISABLE(hmdma);
90009df2:	60cb      	str	r3, [r1, #12]
90009df4:	e002      	b.n	90009dfc <HAL_MDMA_IRQHandler+0x12c>
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U);
90009df6:	68cb      	ldr	r3, [r1, #12]
90009df8:	07d8      	lsls	r0, r3, #31
90009dfa:	d504      	bpl.n	90009e06 <HAL_MDMA_IRQHandler+0x136>
      if (++count > timeout)
90009dfc:	9b01      	ldr	r3, [sp, #4]
90009dfe:	3301      	adds	r3, #1
90009e00:	4293      	cmp	r3, r2
90009e02:	9301      	str	r3, [sp, #4]
90009e04:	d9f7      	bls.n	90009df6 <HAL_MDMA_IRQHandler+0x126>
    __HAL_UNLOCK(hmdma);
90009e06:	2300      	movs	r3, #0
90009e08:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
90009e0c:	68cb      	ldr	r3, [r1, #12]
90009e0e:	07db      	lsls	r3, r3, #31
      hmdma->State = HAL_MDMA_STATE_ERROR;
90009e10:	bf4c      	ite	mi
90009e12:	2303      	movmi	r3, #3
      hmdma->State = HAL_MDMA_STATE_READY;
90009e14:	2301      	movpl	r3, #1
90009e16:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    if (hmdma->XferErrorCallback != NULL)
90009e1a:	6d63      	ldr	r3, [r4, #84]	; 0x54
90009e1c:	b16b      	cbz	r3, 90009e3a <HAL_MDMA_IRQHandler+0x16a>
      hmdma->XferErrorCallback(hmdma);
90009e1e:	4620      	mov	r0, r4
}
90009e20:	b003      	add	sp, #12
90009e22:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      hmdma->XferErrorCallback(hmdma);
90009e26:	4718      	bx	r3
        __HAL_UNLOCK(hmdma);
90009e28:	2100      	movs	r1, #0
        hmdma->State = HAL_MDMA_STATE_READY;
90009e2a:	2201      	movs	r2, #1
        if(hmdma->XferAbortCallback != NULL)
90009e2c:	6da3      	ldr	r3, [r4, #88]	; 0x58
        __HAL_UNLOCK(hmdma);
90009e2e:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
        hmdma->State = HAL_MDMA_STATE_READY;
90009e32:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        if(hmdma->XferAbortCallback != NULL)
90009e36:	2b00      	cmp	r3, #0
90009e38:	d1f1      	bne.n	90009e1e <HAL_MDMA_IRQHandler+0x14e>
}
90009e3a:	b003      	add	sp, #12
90009e3c:	bd30      	pop	{r4, r5, pc}
90009e3e:	bf00      	nop
90009e40:	24000068 	.word	0x24000068
90009e44:	adffffc0 	.word	0xadffffc0
90009e48:	1b4e81b5 	.word	0x1b4e81b5

90009e4c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
90009e4c:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
90009e4e:	4c10      	ldr	r4, [pc, #64]	; (90009e90 <HAL_PWREx_ConfigSupply+0x44>)
90009e50:	68e3      	ldr	r3, [r4, #12]
90009e52:	f013 0f04 	tst.w	r3, #4
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
90009e56:	68e3      	ldr	r3, [r4, #12]
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
90009e58:	d105      	bne.n	90009e66 <HAL_PWREx_ConfigSupply+0x1a>
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
90009e5a:	f003 0307 	and.w	r3, r3, #7
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
90009e5e:	1a18      	subs	r0, r3, r0
90009e60:	bf18      	it	ne
90009e62:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
90009e64:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
90009e66:	f023 0307 	bic.w	r3, r3, #7
90009e6a:	4303      	orrs	r3, r0
90009e6c:	60e3      	str	r3, [r4, #12]
  tickstart = HAL_GetTick ();
90009e6e:	f7fc f9a5 	bl	900061bc <HAL_GetTick>
90009e72:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
90009e74:	e005      	b.n	90009e82 <HAL_PWREx_ConfigSupply+0x36>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
90009e76:	f7fc f9a1 	bl	900061bc <HAL_GetTick>
90009e7a:	1b40      	subs	r0, r0, r5
90009e7c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
90009e80:	d804      	bhi.n	90009e8c <HAL_PWREx_ConfigSupply+0x40>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
90009e82:	6863      	ldr	r3, [r4, #4]
90009e84:	049b      	lsls	r3, r3, #18
90009e86:	d5f6      	bpl.n	90009e76 <HAL_PWREx_ConfigSupply+0x2a>
  return HAL_OK;
90009e88:	2000      	movs	r0, #0
}
90009e8a:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
90009e8c:	2001      	movs	r0, #1
}
90009e8e:	bd38      	pop	{r3, r4, r5, pc}
90009e90:	58024800 	.word	0x58024800

90009e94 <HAL_RCC_GetSysClockFreq.part.0>:
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
90009e94:	4b3b      	ldr	r3, [pc, #236]	; (90009f84 <HAL_RCC_GetSysClockFreq.part.0+0xf0>)
uint32_t HAL_RCC_GetSysClockFreq(void)
90009e96:	b430      	push	{r4, r5}
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
90009e98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
90009e9a:	6a9c      	ldr	r4, [r3, #40]	; 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
90009e9c:	6add      	ldr	r5, [r3, #44]	; 0x2c
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));

      if (pllm != 0U)
90009e9e:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
90009ea2:	6b59      	ldr	r1, [r3, #52]	; 0x34
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
90009ea4:	f3c4 1005 	ubfx	r0, r4, #4, #6
      if (pllm != 0U)
90009ea8:	d038      	beq.n	90009f1c <HAL_RCC_GetSysClockFreq.part.0+0x88>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
90009eaa:	f3c1 01cc 	ubfx	r1, r1, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
90009eae:	f005 0501 	and.w	r5, r5, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
90009eb2:	f002 0203 	and.w	r2, r2, #3
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
90009eb6:	fb05 f101 	mul.w	r1, r5, r1
90009eba:	2a01      	cmp	r2, #1
90009ebc:	ee07 1a90 	vmov	s15, r1
90009ec0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
      {
        switch (pllsource)
90009ec4:	d002      	beq.n	90009ecc <HAL_RCC_GetSysClockFreq.part.0+0x38>
90009ec6:	2a02      	cmp	r2, #2
90009ec8:	d04e      	beq.n	90009f68 <HAL_RCC_GetSysClockFreq.part.0+0xd4>
90009eca:	b34a      	cbz	r2, 90009f20 <HAL_RCC_GetSysClockFreq.part.0+0x8c>
          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            break;

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
90009ecc:	ee07 0a90 	vmov	s15, r0
90009ed0:	ed9f 5a2d 	vldr	s10, [pc, #180]	; 90009f88 <HAL_RCC_GetSysClockFreq.part.0+0xf4>
90009ed4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
90009ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90009eda:	eec5 6a27 	vdiv.f32	s13, s10, s15
90009ede:	eddf 5a2b 	vldr	s11, [pc, #172]	; 90009f8c <HAL_RCC_GetSysClockFreq.part.0+0xf8>
90009ee2:	f3c3 0308 	ubfx	r3, r3, #0, #9
90009ee6:	ee07 3a90 	vmov	s15, r3
90009eea:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
90009eee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
90009ef2:	eee7 7a25 	vfma.f32	s15, s14, s11
90009ef6:	ee77 7a86 	vadd.f32	s15, s15, s12
90009efa:	ee66 6aa7 	vmul.f32	s13, s13, s15
            break;
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
90009efe:	4b21      	ldr	r3, [pc, #132]	; (90009f84 <HAL_RCC_GetSysClockFreq.part.0+0xf0>)
90009f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90009f02:	f3c3 2346 	ubfx	r3, r3, #9, #7
90009f06:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
90009f08:	ee07 3a90 	vmov	s15, r3
90009f0c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
90009f10:	eec6 7a87 	vdiv.f32	s15, s13, s14
90009f14:	eefc 7ae7 	vcvt.u32.f32	s15, s15
90009f18:	ee17 0a90 	vmov	r0, s15
      sysclockfreq = CSI_VALUE;
      break;
  }

  return sysclockfreq;
}
90009f1c:	bc30      	pop	{r4, r5}
90009f1e:	4770      	bx	lr
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
90009f20:	681a      	ldr	r2, [r3, #0]
90009f22:	0692      	lsls	r2, r2, #26
90009f24:	d527      	bpl.n	90009f76 <HAL_RCC_GetSysClockFreq.part.0+0xe2>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
90009f26:	6819      	ldr	r1, [r3, #0]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
90009f28:	ee07 0a90 	vmov	s15, r0
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
90009f2c:	4a18      	ldr	r2, [pc, #96]	; (90009f90 <HAL_RCC_GetSysClockFreq.part.0+0xfc>)
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
90009f2e:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
90009f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
90009f34:	f3c1 01c1 	ubfx	r1, r1, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
90009f38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
90009f3c:	ed9f 5a13 	vldr	s10, [pc, #76]	; 90009f8c <HAL_RCC_GetSysClockFreq.part.0+0xf8>
90009f40:	f3c3 0308 	ubfx	r3, r3, #0, #9
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
90009f44:	40ca      	lsrs	r2, r1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
90009f46:	ee06 3a90 	vmov	s13, r3
90009f4a:	ee06 2a10 	vmov	s12, r2
90009f4e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
90009f52:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
90009f56:	eee7 6a05 	vfma.f32	s13, s14, s10
90009f5a:	ee86 7a27 	vdiv.f32	s14, s12, s15
90009f5e:	ee76 6aa5 	vadd.f32	s13, s13, s11
90009f62:	ee66 6a87 	vmul.f32	s13, s13, s14
90009f66:	e7ca      	b.n	90009efe <HAL_RCC_GetSysClockFreq.part.0+0x6a>
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
90009f68:	ee07 0a90 	vmov	s15, r0
90009f6c:	ed9f 5a09 	vldr	s10, [pc, #36]	; 90009f94 <HAL_RCC_GetSysClockFreq.part.0+0x100>
90009f70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
90009f74:	e7b0      	b.n	90009ed8 <HAL_RCC_GetSysClockFreq.part.0+0x44>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
90009f76:	ee07 0a90 	vmov	s15, r0
90009f7a:	ed9f 5a07 	vldr	s10, [pc, #28]	; 90009f98 <HAL_RCC_GetSysClockFreq.part.0+0x104>
90009f7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
90009f82:	e7a9      	b.n	90009ed8 <HAL_RCC_GetSysClockFreq.part.0+0x44>
90009f84:	58024400 	.word	0x58024400
90009f88:	4a742400 	.word	0x4a742400
90009f8c:	39000000 	.word	0x39000000
90009f90:	03d09000 	.word	0x03d09000
90009f94:	4bbebc20 	.word	0x4bbebc20
90009f98:	4c742400 	.word	0x4c742400

90009f9c <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
90009f9c:	2800      	cmp	r0, #0
90009f9e:	f000 81e8 	beq.w	9000a372 <HAL_RCC_OscConfig+0x3d6>
{
90009fa2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
90009fa4:	6803      	ldr	r3, [r0, #0]
90009fa6:	4604      	mov	r4, r0
90009fa8:	07d9      	lsls	r1, r3, #31
90009faa:	d52e      	bpl.n	9000a00a <HAL_RCC_OscConfig+0x6e>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
90009fac:	49a4      	ldr	r1, [pc, #656]	; (9000a240 <HAL_RCC_OscConfig+0x2a4>)
90009fae:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
90009fb0:	6a89      	ldr	r1, [r1, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
90009fb2:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
90009fb6:	2a10      	cmp	r2, #16
90009fb8:	f000 8107 	beq.w	9000a1ca <HAL_RCC_OscConfig+0x22e>
90009fbc:	2a18      	cmp	r2, #24
90009fbe:	f000 80ff 	beq.w	9000a1c0 <HAL_RCC_OscConfig+0x224>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
90009fc2:	6863      	ldr	r3, [r4, #4]
90009fc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
90009fc8:	f000 812a 	beq.w	9000a220 <HAL_RCC_OscConfig+0x284>
90009fcc:	2b00      	cmp	r3, #0
90009fce:	f000 8168 	beq.w	9000a2a2 <HAL_RCC_OscConfig+0x306>
90009fd2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
90009fd6:	4b9a      	ldr	r3, [pc, #616]	; (9000a240 <HAL_RCC_OscConfig+0x2a4>)
90009fd8:	681a      	ldr	r2, [r3, #0]
90009fda:	f000 8289 	beq.w	9000a4f0 <HAL_RCC_OscConfig+0x554>
90009fde:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
90009fe2:	601a      	str	r2, [r3, #0]
90009fe4:	681a      	ldr	r2, [r3, #0]
90009fe6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
90009fea:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
90009fec:	f7fc f8e6 	bl	900061bc <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
90009ff0:	4e93      	ldr	r6, [pc, #588]	; (9000a240 <HAL_RCC_OscConfig+0x2a4>)
        tickstart = HAL_GetTick();
90009ff2:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
90009ff4:	e005      	b.n	9000a002 <HAL_RCC_OscConfig+0x66>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
90009ff6:	f7fc f8e1 	bl	900061bc <HAL_GetTick>
90009ffa:	1b40      	subs	r0, r0, r5
90009ffc:	2864      	cmp	r0, #100	; 0x64
90009ffe:	f200 814e 	bhi.w	9000a29e <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
9000a002:	6833      	ldr	r3, [r6, #0]
9000a004:	039b      	lsls	r3, r3, #14
9000a006:	d5f6      	bpl.n	90009ff6 <HAL_RCC_OscConfig+0x5a>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
9000a008:	6823      	ldr	r3, [r4, #0]
9000a00a:	079d      	lsls	r5, r3, #30
9000a00c:	f100 808a 	bmi.w	9000a124 <HAL_RCC_OscConfig+0x188>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
9000a010:	06d9      	lsls	r1, r3, #27
9000a012:	d533      	bpl.n	9000a07c <HAL_RCC_OscConfig+0xe0>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
9000a014:	4a8a      	ldr	r2, [pc, #552]	; (9000a240 <HAL_RCC_OscConfig+0x2a4>)
9000a016:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
9000a018:	6a92      	ldr	r2, [r2, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
9000a01a:	f003 0338 	and.w	r3, r3, #56	; 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
9000a01e:	2b08      	cmp	r3, #8
9000a020:	f000 80e3 	beq.w	9000a1ea <HAL_RCC_OscConfig+0x24e>
9000a024:	2b18      	cmp	r3, #24
9000a026:	f000 80db 	beq.w	9000a1e0 <HAL_RCC_OscConfig+0x244>
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
9000a02a:	69e3      	ldr	r3, [r4, #28]
        __HAL_RCC_CSI_ENABLE();
9000a02c:	4d84      	ldr	r5, [pc, #528]	; (9000a240 <HAL_RCC_OscConfig+0x2a4>)
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
9000a02e:	2b00      	cmp	r3, #0
9000a030:	f000 816f 	beq.w	9000a312 <HAL_RCC_OscConfig+0x376>
        __HAL_RCC_CSI_ENABLE();
9000a034:	682b      	ldr	r3, [r5, #0]
9000a036:	f043 0380 	orr.w	r3, r3, #128	; 0x80
9000a03a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
9000a03c:	f7fc f8be 	bl	900061bc <HAL_GetTick>
9000a040:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
9000a042:	e005      	b.n	9000a050 <HAL_RCC_OscConfig+0xb4>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
9000a044:	f7fc f8ba 	bl	900061bc <HAL_GetTick>
9000a048:	1b80      	subs	r0, r0, r6
9000a04a:	2802      	cmp	r0, #2
9000a04c:	f200 8127 	bhi.w	9000a29e <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
9000a050:	682b      	ldr	r3, [r5, #0]
9000a052:	05db      	lsls	r3, r3, #23
9000a054:	d5f6      	bpl.n	9000a044 <HAL_RCC_OscConfig+0xa8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
9000a056:	f7fc f8c9 	bl	900061ec <HAL_GetREVID>
9000a05a:	f241 0303 	movw	r3, #4099	; 0x1003
9000a05e:	4298      	cmp	r0, r3
9000a060:	f200 826d 	bhi.w	9000a53e <HAL_RCC_OscConfig+0x5a2>
9000a064:	6a22      	ldr	r2, [r4, #32]
9000a066:	686b      	ldr	r3, [r5, #4]
9000a068:	2a20      	cmp	r2, #32
9000a06a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
9000a06e:	bf0c      	ite	eq
9000a070:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
9000a074:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
9000a078:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
9000a07a:	6823      	ldr	r3, [r4, #0]
9000a07c:	071d      	lsls	r5, r3, #28
9000a07e:	d516      	bpl.n	9000a0ae <HAL_RCC_OscConfig+0x112>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
9000a080:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
9000a082:	4d6f      	ldr	r5, [pc, #444]	; (9000a240 <HAL_RCC_OscConfig+0x2a4>)
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
9000a084:	2b00      	cmp	r3, #0
9000a086:	f000 8122 	beq.w	9000a2ce <HAL_RCC_OscConfig+0x332>
      __HAL_RCC_LSI_ENABLE();
9000a08a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
9000a08c:	f043 0301 	orr.w	r3, r3, #1
9000a090:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
9000a092:	f7fc f893 	bl	900061bc <HAL_GetTick>
9000a096:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
9000a098:	e005      	b.n	9000a0a6 <HAL_RCC_OscConfig+0x10a>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
9000a09a:	f7fc f88f 	bl	900061bc <HAL_GetTick>
9000a09e:	1b80      	subs	r0, r0, r6
9000a0a0:	2802      	cmp	r0, #2
9000a0a2:	f200 80fc 	bhi.w	9000a29e <HAL_RCC_OscConfig+0x302>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
9000a0a6:	6f6b      	ldr	r3, [r5, #116]	; 0x74
9000a0a8:	0798      	lsls	r0, r3, #30
9000a0aa:	d5f6      	bpl.n	9000a09a <HAL_RCC_OscConfig+0xfe>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
9000a0ac:	6823      	ldr	r3, [r4, #0]
9000a0ae:	069a      	lsls	r2, r3, #26
9000a0b0:	d516      	bpl.n	9000a0e0 <HAL_RCC_OscConfig+0x144>
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
9000a0b2:	69a3      	ldr	r3, [r4, #24]
      __HAL_RCC_HSI48_ENABLE();
9000a0b4:	4d62      	ldr	r5, [pc, #392]	; (9000a240 <HAL_RCC_OscConfig+0x2a4>)
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
9000a0b6:	2b00      	cmp	r3, #0
9000a0b8:	f000 811a 	beq.w	9000a2f0 <HAL_RCC_OscConfig+0x354>
      __HAL_RCC_HSI48_ENABLE();
9000a0bc:	682b      	ldr	r3, [r5, #0]
9000a0be:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
9000a0c2:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
9000a0c4:	f7fc f87a 	bl	900061bc <HAL_GetTick>
9000a0c8:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
9000a0ca:	e005      	b.n	9000a0d8 <HAL_RCC_OscConfig+0x13c>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
9000a0cc:	f7fc f876 	bl	900061bc <HAL_GetTick>
9000a0d0:	1b80      	subs	r0, r0, r6
9000a0d2:	2802      	cmp	r0, #2
9000a0d4:	f200 80e3 	bhi.w	9000a29e <HAL_RCC_OscConfig+0x302>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
9000a0d8:	682b      	ldr	r3, [r5, #0]
9000a0da:	049f      	lsls	r7, r3, #18
9000a0dc:	d5f6      	bpl.n	9000a0cc <HAL_RCC_OscConfig+0x130>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
9000a0de:	6823      	ldr	r3, [r4, #0]
9000a0e0:	0759      	lsls	r1, r3, #29
9000a0e2:	f100 80a3 	bmi.w	9000a22c <HAL_RCC_OscConfig+0x290>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
9000a0e6:	6a60      	ldr	r0, [r4, #36]	; 0x24
9000a0e8:	b1d0      	cbz	r0, 9000a120 <HAL_RCC_OscConfig+0x184>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
9000a0ea:	4d55      	ldr	r5, [pc, #340]	; (9000a240 <HAL_RCC_OscConfig+0x2a4>)
9000a0ec:	692b      	ldr	r3, [r5, #16]
9000a0ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
9000a0f2:	2b18      	cmp	r3, #24
9000a0f4:	f000 81ae 	beq.w	9000a454 <HAL_RCC_OscConfig+0x4b8>
        __HAL_RCC_PLL_DISABLE();
9000a0f8:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
9000a0fa:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
9000a0fc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
9000a100:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
9000a102:	f000 8142 	beq.w	9000a38a <HAL_RCC_OscConfig+0x3ee>
        tickstart = HAL_GetTick();
9000a106:	f7fc f859 	bl	900061bc <HAL_GetTick>
9000a10a:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
9000a10c:	e005      	b.n	9000a11a <HAL_RCC_OscConfig+0x17e>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
9000a10e:	f7fc f855 	bl	900061bc <HAL_GetTick>
9000a112:	1b00      	subs	r0, r0, r4
9000a114:	2802      	cmp	r0, #2
9000a116:	f200 80c2 	bhi.w	9000a29e <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
9000a11a:	682b      	ldr	r3, [r5, #0]
9000a11c:	019b      	lsls	r3, r3, #6
9000a11e:	d4f6      	bmi.n	9000a10e <HAL_RCC_OscConfig+0x172>
  return HAL_OK;
9000a120:	2000      	movs	r0, #0
}
9000a122:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
9000a124:	4a46      	ldr	r2, [pc, #280]	; (9000a240 <HAL_RCC_OscConfig+0x2a4>)
9000a126:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
9000a128:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
9000a12a:	f013 0338 	ands.w	r3, r3, #56	; 0x38
9000a12e:	d12d      	bne.n	9000a18c <HAL_RCC_OscConfig+0x1f0>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
9000a130:	4b43      	ldr	r3, [pc, #268]	; (9000a240 <HAL_RCC_OscConfig+0x2a4>)
9000a132:	68e2      	ldr	r2, [r4, #12]
9000a134:	681b      	ldr	r3, [r3, #0]
9000a136:	0759      	lsls	r1, r3, #29
9000a138:	d501      	bpl.n	9000a13e <HAL_RCC_OscConfig+0x1a2>
9000a13a:	2a00      	cmp	r2, #0
9000a13c:	d04e      	beq.n	9000a1dc <HAL_RCC_OscConfig+0x240>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
9000a13e:	4d40      	ldr	r5, [pc, #256]	; (9000a240 <HAL_RCC_OscConfig+0x2a4>)
9000a140:	682b      	ldr	r3, [r5, #0]
9000a142:	f023 0319 	bic.w	r3, r3, #25
9000a146:	4313      	orrs	r3, r2
9000a148:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
9000a14a:	f7fc f837 	bl	900061bc <HAL_GetTick>
9000a14e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
9000a150:	e005      	b.n	9000a15e <HAL_RCC_OscConfig+0x1c2>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
9000a152:	f7fc f833 	bl	900061bc <HAL_GetTick>
9000a156:	1b80      	subs	r0, r0, r6
9000a158:	2802      	cmp	r0, #2
9000a15a:	f200 80a0 	bhi.w	9000a29e <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
9000a15e:	682b      	ldr	r3, [r5, #0]
9000a160:	075b      	lsls	r3, r3, #29
9000a162:	d5f6      	bpl.n	9000a152 <HAL_RCC_OscConfig+0x1b6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
9000a164:	f7fc f842 	bl	900061ec <HAL_GetREVID>
9000a168:	f241 0303 	movw	r3, #4099	; 0x1003
9000a16c:	4298      	cmp	r0, r3
9000a16e:	f200 80f7 	bhi.w	9000a360 <HAL_RCC_OscConfig+0x3c4>
9000a172:	6922      	ldr	r2, [r4, #16]
9000a174:	686b      	ldr	r3, [r5, #4]
9000a176:	2a40      	cmp	r2, #64	; 0x40
9000a178:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
9000a17c:	bf0c      	ite	eq
9000a17e:	f443 3300 	orreq.w	r3, r3, #131072	; 0x20000
9000a182:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
9000a186:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
9000a188:	6823      	ldr	r3, [r4, #0]
9000a18a:	e741      	b.n	9000a010 <HAL_RCC_OscConfig+0x74>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
9000a18c:	2b18      	cmp	r3, #24
9000a18e:	f000 80e3 	beq.w	9000a358 <HAL_RCC_OscConfig+0x3bc>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
9000a192:	4d2b      	ldr	r5, [pc, #172]	; (9000a240 <HAL_RCC_OscConfig+0x2a4>)
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
9000a194:	68e2      	ldr	r2, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
9000a196:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
9000a198:	2a00      	cmp	r2, #0
9000a19a:	f000 80cc 	beq.w	9000a336 <HAL_RCC_OscConfig+0x39a>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
9000a19e:	f023 0319 	bic.w	r3, r3, #25
9000a1a2:	4313      	orrs	r3, r2
9000a1a4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
9000a1a6:	f7fc f809 	bl	900061bc <HAL_GetTick>
9000a1aa:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
9000a1ac:	e004      	b.n	9000a1b8 <HAL_RCC_OscConfig+0x21c>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
9000a1ae:	f7fc f805 	bl	900061bc <HAL_GetTick>
9000a1b2:	1b80      	subs	r0, r0, r6
9000a1b4:	2802      	cmp	r0, #2
9000a1b6:	d872      	bhi.n	9000a29e <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
9000a1b8:	682b      	ldr	r3, [r5, #0]
9000a1ba:	075f      	lsls	r7, r3, #29
9000a1bc:	d5f7      	bpl.n	9000a1ae <HAL_RCC_OscConfig+0x212>
9000a1be:	e7d1      	b.n	9000a164 <HAL_RCC_OscConfig+0x1c8>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
9000a1c0:	f001 0103 	and.w	r1, r1, #3
9000a1c4:	2902      	cmp	r1, #2
9000a1c6:	f47f aefc 	bne.w	90009fc2 <HAL_RCC_OscConfig+0x26>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
9000a1ca:	4a1d      	ldr	r2, [pc, #116]	; (9000a240 <HAL_RCC_OscConfig+0x2a4>)
9000a1cc:	6812      	ldr	r2, [r2, #0]
9000a1ce:	0392      	lsls	r2, r2, #14
9000a1d0:	f57f af1b 	bpl.w	9000a00a <HAL_RCC_OscConfig+0x6e>
9000a1d4:	6862      	ldr	r2, [r4, #4]
9000a1d6:	2a00      	cmp	r2, #0
9000a1d8:	f47f af17 	bne.w	9000a00a <HAL_RCC_OscConfig+0x6e>
        return HAL_ERROR;
9000a1dc:	2001      	movs	r0, #1
}
9000a1de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
9000a1e0:	f002 0203 	and.w	r2, r2, #3
9000a1e4:	2a01      	cmp	r2, #1
9000a1e6:	f47f af20 	bne.w	9000a02a <HAL_RCC_OscConfig+0x8e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
9000a1ea:	4b15      	ldr	r3, [pc, #84]	; (9000a240 <HAL_RCC_OscConfig+0x2a4>)
9000a1ec:	681b      	ldr	r3, [r3, #0]
9000a1ee:	05da      	lsls	r2, r3, #23
9000a1f0:	d502      	bpl.n	9000a1f8 <HAL_RCC_OscConfig+0x25c>
9000a1f2:	69e3      	ldr	r3, [r4, #28]
9000a1f4:	2b80      	cmp	r3, #128	; 0x80
9000a1f6:	d1f1      	bne.n	9000a1dc <HAL_RCC_OscConfig+0x240>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
9000a1f8:	f7fb fff8 	bl	900061ec <HAL_GetREVID>
9000a1fc:	f241 0303 	movw	r3, #4099	; 0x1003
9000a200:	4298      	cmp	r0, r3
9000a202:	f200 80b8 	bhi.w	9000a376 <HAL_RCC_OscConfig+0x3da>
9000a206:	6a22      	ldr	r2, [r4, #32]
9000a208:	2a20      	cmp	r2, #32
9000a20a:	f000 81a7 	beq.w	9000a55c <HAL_RCC_OscConfig+0x5c0>
9000a20e:	490c      	ldr	r1, [pc, #48]	; (9000a240 <HAL_RCC_OscConfig+0x2a4>)
9000a210:	684b      	ldr	r3, [r1, #4]
9000a212:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
9000a216:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
9000a21a:	604b      	str	r3, [r1, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
9000a21c:	6823      	ldr	r3, [r4, #0]
9000a21e:	e72d      	b.n	9000a07c <HAL_RCC_OscConfig+0xe0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
9000a220:	4a07      	ldr	r2, [pc, #28]	; (9000a240 <HAL_RCC_OscConfig+0x2a4>)
9000a222:	6813      	ldr	r3, [r2, #0]
9000a224:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
9000a228:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
9000a22a:	e6df      	b.n	90009fec <HAL_RCC_OscConfig+0x50>
    PWR->CR1 |= PWR_CR1_DBP;
9000a22c:	4d05      	ldr	r5, [pc, #20]	; (9000a244 <HAL_RCC_OscConfig+0x2a8>)
9000a22e:	682b      	ldr	r3, [r5, #0]
9000a230:	f443 7380 	orr.w	r3, r3, #256	; 0x100
9000a234:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
9000a236:	f7fb ffc1 	bl	900061bc <HAL_GetTick>
9000a23a:	4606      	mov	r6, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
9000a23c:	e009      	b.n	9000a252 <HAL_RCC_OscConfig+0x2b6>
9000a23e:	bf00      	nop
9000a240:	58024400 	.word	0x58024400
9000a244:	58024800 	.word	0x58024800
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
9000a248:	f7fb ffb8 	bl	900061bc <HAL_GetTick>
9000a24c:	1b80      	subs	r0, r0, r6
9000a24e:	2864      	cmp	r0, #100	; 0x64
9000a250:	d825      	bhi.n	9000a29e <HAL_RCC_OscConfig+0x302>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
9000a252:	682b      	ldr	r3, [r5, #0]
9000a254:	05da      	lsls	r2, r3, #23
9000a256:	d5f7      	bpl.n	9000a248 <HAL_RCC_OscConfig+0x2ac>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
9000a258:	68a3      	ldr	r3, [r4, #8]
9000a25a:	2b01      	cmp	r3, #1
9000a25c:	f000 8178 	beq.w	9000a550 <HAL_RCC_OscConfig+0x5b4>
9000a260:	2b00      	cmp	r3, #0
9000a262:	f000 8153 	beq.w	9000a50c <HAL_RCC_OscConfig+0x570>
9000a266:	2b05      	cmp	r3, #5
9000a268:	4ba5      	ldr	r3, [pc, #660]	; (9000a500 <HAL_RCC_OscConfig+0x564>)
9000a26a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
9000a26c:	f000 817f 	beq.w	9000a56e <HAL_RCC_OscConfig+0x5d2>
9000a270:	f022 0201 	bic.w	r2, r2, #1
9000a274:	671a      	str	r2, [r3, #112]	; 0x70
9000a276:	6f1a      	ldr	r2, [r3, #112]	; 0x70
9000a278:	f022 0204 	bic.w	r2, r2, #4
9000a27c:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
9000a27e:	f7fb ff9d 	bl	900061bc <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
9000a282:	4e9f      	ldr	r6, [pc, #636]	; (9000a500 <HAL_RCC_OscConfig+0x564>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
9000a284:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
9000a288:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
9000a28a:	e004      	b.n	9000a296 <HAL_RCC_OscConfig+0x2fa>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
9000a28c:	f7fb ff96 	bl	900061bc <HAL_GetTick>
9000a290:	1b40      	subs	r0, r0, r5
9000a292:	42b8      	cmp	r0, r7
9000a294:	d803      	bhi.n	9000a29e <HAL_RCC_OscConfig+0x302>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
9000a296:	6f33      	ldr	r3, [r6, #112]	; 0x70
9000a298:	079b      	lsls	r3, r3, #30
9000a29a:	d5f7      	bpl.n	9000a28c <HAL_RCC_OscConfig+0x2f0>
9000a29c:	e723      	b.n	9000a0e6 <HAL_RCC_OscConfig+0x14a>
            return HAL_TIMEOUT;
9000a29e:	2003      	movs	r0, #3
}
9000a2a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
9000a2a2:	4d97      	ldr	r5, [pc, #604]	; (9000a500 <HAL_RCC_OscConfig+0x564>)
9000a2a4:	682b      	ldr	r3, [r5, #0]
9000a2a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
9000a2aa:	602b      	str	r3, [r5, #0]
9000a2ac:	682b      	ldr	r3, [r5, #0]
9000a2ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
9000a2b2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
9000a2b4:	f7fb ff82 	bl	900061bc <HAL_GetTick>
9000a2b8:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
9000a2ba:	e004      	b.n	9000a2c6 <HAL_RCC_OscConfig+0x32a>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
9000a2bc:	f7fb ff7e 	bl	900061bc <HAL_GetTick>
9000a2c0:	1b80      	subs	r0, r0, r6
9000a2c2:	2864      	cmp	r0, #100	; 0x64
9000a2c4:	d8eb      	bhi.n	9000a29e <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
9000a2c6:	682b      	ldr	r3, [r5, #0]
9000a2c8:	039f      	lsls	r7, r3, #14
9000a2ca:	d4f7      	bmi.n	9000a2bc <HAL_RCC_OscConfig+0x320>
9000a2cc:	e69c      	b.n	9000a008 <HAL_RCC_OscConfig+0x6c>
      __HAL_RCC_LSI_DISABLE();
9000a2ce:	6f6b      	ldr	r3, [r5, #116]	; 0x74
9000a2d0:	f023 0301 	bic.w	r3, r3, #1
9000a2d4:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
9000a2d6:	f7fb ff71 	bl	900061bc <HAL_GetTick>
9000a2da:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
9000a2dc:	e004      	b.n	9000a2e8 <HAL_RCC_OscConfig+0x34c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
9000a2de:	f7fb ff6d 	bl	900061bc <HAL_GetTick>
9000a2e2:	1b80      	subs	r0, r0, r6
9000a2e4:	2802      	cmp	r0, #2
9000a2e6:	d8da      	bhi.n	9000a29e <HAL_RCC_OscConfig+0x302>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
9000a2e8:	6f6b      	ldr	r3, [r5, #116]	; 0x74
9000a2ea:	0799      	lsls	r1, r3, #30
9000a2ec:	d4f7      	bmi.n	9000a2de <HAL_RCC_OscConfig+0x342>
9000a2ee:	e6dd      	b.n	9000a0ac <HAL_RCC_OscConfig+0x110>
      __HAL_RCC_HSI48_DISABLE();
9000a2f0:	682b      	ldr	r3, [r5, #0]
9000a2f2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
9000a2f6:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
9000a2f8:	f7fb ff60 	bl	900061bc <HAL_GetTick>
9000a2fc:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
9000a2fe:	e004      	b.n	9000a30a <HAL_RCC_OscConfig+0x36e>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
9000a300:	f7fb ff5c 	bl	900061bc <HAL_GetTick>
9000a304:	1b80      	subs	r0, r0, r6
9000a306:	2802      	cmp	r0, #2
9000a308:	d8c9      	bhi.n	9000a29e <HAL_RCC_OscConfig+0x302>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
9000a30a:	682b      	ldr	r3, [r5, #0]
9000a30c:	0498      	lsls	r0, r3, #18
9000a30e:	d4f7      	bmi.n	9000a300 <HAL_RCC_OscConfig+0x364>
9000a310:	e6e5      	b.n	9000a0de <HAL_RCC_OscConfig+0x142>
        __HAL_RCC_CSI_DISABLE();
9000a312:	682b      	ldr	r3, [r5, #0]
9000a314:	f023 0380 	bic.w	r3, r3, #128	; 0x80
9000a318:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
9000a31a:	f7fb ff4f 	bl	900061bc <HAL_GetTick>
9000a31e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
9000a320:	e004      	b.n	9000a32c <HAL_RCC_OscConfig+0x390>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
9000a322:	f7fb ff4b 	bl	900061bc <HAL_GetTick>
9000a326:	1b80      	subs	r0, r0, r6
9000a328:	2802      	cmp	r0, #2
9000a32a:	d8b8      	bhi.n	9000a29e <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
9000a32c:	682b      	ldr	r3, [r5, #0]
9000a32e:	05df      	lsls	r7, r3, #23
9000a330:	d4f7      	bmi.n	9000a322 <HAL_RCC_OscConfig+0x386>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
9000a332:	6823      	ldr	r3, [r4, #0]
9000a334:	e6a2      	b.n	9000a07c <HAL_RCC_OscConfig+0xe0>
        __HAL_RCC_HSI_DISABLE();
9000a336:	f023 0301 	bic.w	r3, r3, #1
9000a33a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
9000a33c:	f7fb ff3e 	bl	900061bc <HAL_GetTick>
9000a340:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
9000a342:	e004      	b.n	9000a34e <HAL_RCC_OscConfig+0x3b2>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
9000a344:	f7fb ff3a 	bl	900061bc <HAL_GetTick>
9000a348:	1b80      	subs	r0, r0, r6
9000a34a:	2802      	cmp	r0, #2
9000a34c:	d8a7      	bhi.n	9000a29e <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
9000a34e:	682b      	ldr	r3, [r5, #0]
9000a350:	0758      	lsls	r0, r3, #29
9000a352:	d4f7      	bmi.n	9000a344 <HAL_RCC_OscConfig+0x3a8>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
9000a354:	6823      	ldr	r3, [r4, #0]
9000a356:	e65b      	b.n	9000a010 <HAL_RCC_OscConfig+0x74>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
9000a358:	0790      	lsls	r0, r2, #30
9000a35a:	f47f af1a 	bne.w	9000a192 <HAL_RCC_OscConfig+0x1f6>
9000a35e:	e6e7      	b.n	9000a130 <HAL_RCC_OscConfig+0x194>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
9000a360:	686b      	ldr	r3, [r5, #4]
9000a362:	6922      	ldr	r2, [r4, #16]
9000a364:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
9000a368:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
9000a36c:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
9000a36e:	6823      	ldr	r3, [r4, #0]
9000a370:	e64e      	b.n	9000a010 <HAL_RCC_OscConfig+0x74>
    return HAL_ERROR;
9000a372:	2001      	movs	r0, #1
}
9000a374:	4770      	bx	lr
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
9000a376:	4a62      	ldr	r2, [pc, #392]	; (9000a500 <HAL_RCC_OscConfig+0x564>)
9000a378:	6a21      	ldr	r1, [r4, #32]
9000a37a:	68d3      	ldr	r3, [r2, #12]
9000a37c:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
9000a380:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
9000a384:	60d3      	str	r3, [r2, #12]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
9000a386:	6823      	ldr	r3, [r4, #0]
9000a388:	e678      	b.n	9000a07c <HAL_RCC_OscConfig+0xe0>
        tickstart = HAL_GetTick();
9000a38a:	f7fb ff17 	bl	900061bc <HAL_GetTick>
9000a38e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
9000a390:	e004      	b.n	9000a39c <HAL_RCC_OscConfig+0x400>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
9000a392:	f7fb ff13 	bl	900061bc <HAL_GetTick>
9000a396:	1b80      	subs	r0, r0, r6
9000a398:	2802      	cmp	r0, #2
9000a39a:	d880      	bhi.n	9000a29e <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
9000a39c:	682b      	ldr	r3, [r5, #0]
9000a39e:	0199      	lsls	r1, r3, #6
9000a3a0:	d4f7      	bmi.n	9000a392 <HAL_RCC_OscConfig+0x3f6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
9000a3a2:	6aa9      	ldr	r1, [r5, #40]	; 0x28
9000a3a4:	4b57      	ldr	r3, [pc, #348]	; (9000a504 <HAL_RCC_OscConfig+0x568>)
9000a3a6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
9000a3a8:	400b      	ands	r3, r1
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
9000a3aa:	4957      	ldr	r1, [pc, #348]	; (9000a508 <HAL_RCC_OscConfig+0x56c>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
9000a3ac:	4e54      	ldr	r6, [pc, #336]	; (9000a500 <HAL_RCC_OscConfig+0x564>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
9000a3ae:	4313      	orrs	r3, r2
9000a3b0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
9000a3b2:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
9000a3b6:	62ab      	str	r3, [r5, #40]	; 0x28
9000a3b8:	e9d4 320d 	ldrd	r3, r2, [r4, #52]	; 0x34
9000a3bc:	3b01      	subs	r3, #1
9000a3be:	3a01      	subs	r2, #1
9000a3c0:	025b      	lsls	r3, r3, #9
9000a3c2:	0412      	lsls	r2, r2, #16
9000a3c4:	b29b      	uxth	r3, r3
9000a3c6:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
9000a3ca:	4313      	orrs	r3, r2
9000a3cc:	6b22      	ldr	r2, [r4, #48]	; 0x30
9000a3ce:	3a01      	subs	r2, #1
9000a3d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
9000a3d4:	4313      	orrs	r3, r2
9000a3d6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
9000a3d8:	3a01      	subs	r2, #1
9000a3da:	0612      	lsls	r2, r2, #24
9000a3dc:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
9000a3e0:	4313      	orrs	r3, r2
9000a3e2:	632b      	str	r3, [r5, #48]	; 0x30
        __HAL_RCC_PLLFRACN_DISABLE();
9000a3e4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
9000a3e6:	f023 0301 	bic.w	r3, r3, #1
9000a3ea:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
9000a3ec:	6b6a      	ldr	r2, [r5, #52]	; 0x34
9000a3ee:	6ca3      	ldr	r3, [r4, #72]	; 0x48
9000a3f0:	4011      	ands	r1, r2
9000a3f2:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
9000a3f6:	6369      	str	r1, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
9000a3f8:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
9000a3fa:	6c22      	ldr	r2, [r4, #64]	; 0x40
9000a3fc:	f023 030c 	bic.w	r3, r3, #12
9000a400:	4313      	orrs	r3, r2
9000a402:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
9000a404:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
9000a406:	6c62      	ldr	r2, [r4, #68]	; 0x44
9000a408:	f023 0302 	bic.w	r3, r3, #2
9000a40c:	4313      	orrs	r3, r2
9000a40e:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
9000a410:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
9000a412:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
9000a416:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000a418:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
9000a41a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
9000a41e:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
9000a420:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
9000a422:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
9000a426:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLFRACN_ENABLE();
9000a428:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
9000a42a:	f043 0301 	orr.w	r3, r3, #1
9000a42e:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
9000a430:	682b      	ldr	r3, [r5, #0]
9000a432:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
9000a436:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
9000a438:	f7fb fec0 	bl	900061bc <HAL_GetTick>
9000a43c:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
9000a43e:	e005      	b.n	9000a44c <HAL_RCC_OscConfig+0x4b0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
9000a440:	f7fb febc 	bl	900061bc <HAL_GetTick>
9000a444:	1b00      	subs	r0, r0, r4
9000a446:	2802      	cmp	r0, #2
9000a448:	f63f af29 	bhi.w	9000a29e <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
9000a44c:	6833      	ldr	r3, [r6, #0]
9000a44e:	019a      	lsls	r2, r3, #6
9000a450:	d5f6      	bpl.n	9000a440 <HAL_RCC_OscConfig+0x4a4>
9000a452:	e665      	b.n	9000a120 <HAL_RCC_OscConfig+0x184>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
9000a454:	2801      	cmp	r0, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
9000a456:	6aaa      	ldr	r2, [r5, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
9000a458:	6b2e      	ldr	r6, [r5, #48]	; 0x30
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
9000a45a:	f43f ae62 	beq.w	9000a122 <HAL_RCC_OscConfig+0x186>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
9000a45e:	f002 0303 	and.w	r3, r2, #3
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
9000a462:	6aa1      	ldr	r1, [r4, #40]	; 0x28
9000a464:	428b      	cmp	r3, r1
9000a466:	f47f aeb9 	bne.w	9000a1dc <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
9000a46a:	f3c2 1205 	ubfx	r2, r2, #4, #6
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
9000a46e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
9000a470:	429a      	cmp	r2, r3
9000a472:	f47f aeb3 	bne.w	9000a1dc <HAL_RCC_OscConfig+0x240>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
9000a476:	6b23      	ldr	r3, [r4, #48]	; 0x30
9000a478:	f3c6 0208 	ubfx	r2, r6, #0, #9
9000a47c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
9000a47e:	429a      	cmp	r2, r3
9000a480:	f47f aeac 	bne.w	9000a1dc <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
9000a484:	6b63      	ldr	r3, [r4, #52]	; 0x34
9000a486:	f3c6 2246 	ubfx	r2, r6, #9, #7
9000a48a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
9000a48c:	429a      	cmp	r2, r3
9000a48e:	f47f aea5 	bne.w	9000a1dc <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
9000a492:	6ba3      	ldr	r3, [r4, #56]	; 0x38
9000a494:	f3c6 4206 	ubfx	r2, r6, #16, #7
9000a498:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
9000a49a:	429a      	cmp	r2, r3
9000a49c:	f47f ae9e 	bne.w	9000a1dc <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
9000a4a0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
9000a4a2:	f3c6 6606 	ubfx	r6, r6, #24, #7
9000a4a6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
9000a4a8:	429e      	cmp	r6, r3
9000a4aa:	f47f ae97 	bne.w	9000a1dc <HAL_RCC_OscConfig+0x240>
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
9000a4ae:	6b6b      	ldr	r3, [r5, #52]	; 0x34
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
9000a4b0:	6ca2      	ldr	r2, [r4, #72]	; 0x48
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
9000a4b2:	f3c3 03cc 	ubfx	r3, r3, #3, #13
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
9000a4b6:	429a      	cmp	r2, r3
9000a4b8:	f43f ae32 	beq.w	9000a120 <HAL_RCC_OscConfig+0x184>
          __HAL_RCC_PLLFRACN_DISABLE();
9000a4bc:	4a10      	ldr	r2, [pc, #64]	; (9000a500 <HAL_RCC_OscConfig+0x564>)
9000a4be:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
9000a4c0:	f023 0301 	bic.w	r3, r3, #1
9000a4c4:	62d3      	str	r3, [r2, #44]	; 0x2c
          tickstart = HAL_GetTick();
9000a4c6:	f7fb fe79 	bl	900061bc <HAL_GetTick>
9000a4ca:	4605      	mov	r5, r0
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
9000a4cc:	f7fb fe76 	bl	900061bc <HAL_GetTick>
9000a4d0:	42a8      	cmp	r0, r5
9000a4d2:	d0fb      	beq.n	9000a4cc <HAL_RCC_OscConfig+0x530>
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
9000a4d4:	4a0a      	ldr	r2, [pc, #40]	; (9000a500 <HAL_RCC_OscConfig+0x564>)
  return HAL_OK;
9000a4d6:	2000      	movs	r0, #0
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
9000a4d8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
9000a4da:	4b0b      	ldr	r3, [pc, #44]	; (9000a508 <HAL_RCC_OscConfig+0x56c>)
9000a4dc:	6b54      	ldr	r4, [r2, #52]	; 0x34
9000a4de:	4023      	ands	r3, r4
9000a4e0:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
9000a4e4:	6353      	str	r3, [r2, #52]	; 0x34
          __HAL_RCC_PLLFRACN_ENABLE();
9000a4e6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
9000a4e8:	f043 0301 	orr.w	r3, r3, #1
9000a4ec:	62d3      	str	r3, [r2, #44]	; 0x2c
}
9000a4ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
9000a4f0:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
9000a4f4:	601a      	str	r2, [r3, #0]
9000a4f6:	681a      	ldr	r2, [r3, #0]
9000a4f8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
9000a4fc:	601a      	str	r2, [r3, #0]
9000a4fe:	e575      	b.n	90009fec <HAL_RCC_OscConfig+0x50>
9000a500:	58024400 	.word	0x58024400
9000a504:	fffffc0c 	.word	0xfffffc0c
9000a508:	ffff0007 	.word	0xffff0007
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
9000a50c:	4d1c      	ldr	r5, [pc, #112]	; (9000a580 <HAL_RCC_OscConfig+0x5e4>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
9000a50e:	f241 3788 	movw	r7, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
9000a512:	6f2b      	ldr	r3, [r5, #112]	; 0x70
9000a514:	f023 0301 	bic.w	r3, r3, #1
9000a518:	672b      	str	r3, [r5, #112]	; 0x70
9000a51a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
9000a51c:	f023 0304 	bic.w	r3, r3, #4
9000a520:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
9000a522:	f7fb fe4b 	bl	900061bc <HAL_GetTick>
9000a526:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
9000a528:	e005      	b.n	9000a536 <HAL_RCC_OscConfig+0x59a>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
9000a52a:	f7fb fe47 	bl	900061bc <HAL_GetTick>
9000a52e:	1b80      	subs	r0, r0, r6
9000a530:	42b8      	cmp	r0, r7
9000a532:	f63f aeb4 	bhi.w	9000a29e <HAL_RCC_OscConfig+0x302>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
9000a536:	6f2b      	ldr	r3, [r5, #112]	; 0x70
9000a538:	0798      	lsls	r0, r3, #30
9000a53a:	d4f6      	bmi.n	9000a52a <HAL_RCC_OscConfig+0x58e>
9000a53c:	e5d3      	b.n	9000a0e6 <HAL_RCC_OscConfig+0x14a>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
9000a53e:	68eb      	ldr	r3, [r5, #12]
9000a540:	6a22      	ldr	r2, [r4, #32]
9000a542:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
9000a546:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
9000a54a:	60eb      	str	r3, [r5, #12]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
9000a54c:	6823      	ldr	r3, [r4, #0]
9000a54e:	e595      	b.n	9000a07c <HAL_RCC_OscConfig+0xe0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
9000a550:	4a0b      	ldr	r2, [pc, #44]	; (9000a580 <HAL_RCC_OscConfig+0x5e4>)
9000a552:	6f13      	ldr	r3, [r2, #112]	; 0x70
9000a554:	f043 0301 	orr.w	r3, r3, #1
9000a558:	6713      	str	r3, [r2, #112]	; 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
9000a55a:	e690      	b.n	9000a27e <HAL_RCC_OscConfig+0x2e2>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
9000a55c:	4a08      	ldr	r2, [pc, #32]	; (9000a580 <HAL_RCC_OscConfig+0x5e4>)
9000a55e:	6853      	ldr	r3, [r2, #4]
9000a560:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
9000a564:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
9000a568:	6053      	str	r3, [r2, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
9000a56a:	6823      	ldr	r3, [r4, #0]
9000a56c:	e586      	b.n	9000a07c <HAL_RCC_OscConfig+0xe0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
9000a56e:	f042 0204 	orr.w	r2, r2, #4
9000a572:	671a      	str	r2, [r3, #112]	; 0x70
9000a574:	6f1a      	ldr	r2, [r3, #112]	; 0x70
9000a576:	f042 0201 	orr.w	r2, r2, #1
9000a57a:	671a      	str	r2, [r3, #112]	; 0x70
9000a57c:	e67f      	b.n	9000a27e <HAL_RCC_OscConfig+0x2e2>
9000a57e:	bf00      	nop
9000a580:	58024400 	.word	0x58024400

9000a584 <HAL_RCC_GetSysClockFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
9000a584:	4a47      	ldr	r2, [pc, #284]	; (9000a6a4 <HAL_RCC_GetSysClockFreq+0x120>)
9000a586:	6913      	ldr	r3, [r2, #16]
9000a588:	f003 0338 	and.w	r3, r3, #56	; 0x38
9000a58c:	2b10      	cmp	r3, #16
9000a58e:	d004      	beq.n	9000a59a <HAL_RCC_GetSysClockFreq+0x16>
9000a590:	2b18      	cmp	r3, #24
9000a592:	d00d      	beq.n	9000a5b0 <HAL_RCC_GetSysClockFreq+0x2c>
9000a594:	b11b      	cbz	r3, 9000a59e <HAL_RCC_GetSysClockFreq+0x1a>
      sysclockfreq = CSI_VALUE;
9000a596:	4844      	ldr	r0, [pc, #272]	; (9000a6a8 <HAL_RCC_GetSysClockFreq+0x124>)
9000a598:	4770      	bx	lr
  switch (RCC->CFGR & RCC_CFGR_SWS)
9000a59a:	4844      	ldr	r0, [pc, #272]	; (9000a6ac <HAL_RCC_GetSysClockFreq+0x128>)
9000a59c:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
9000a59e:	6813      	ldr	r3, [r2, #0]
9000a5a0:	0699      	lsls	r1, r3, #26
9000a5a2:	d54a      	bpl.n	9000a63a <HAL_RCC_GetSysClockFreq+0xb6>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000a5a4:	6813      	ldr	r3, [r2, #0]
9000a5a6:	4842      	ldr	r0, [pc, #264]	; (9000a6b0 <HAL_RCC_GetSysClockFreq+0x12c>)
9000a5a8:	f3c3 03c1 	ubfx	r3, r3, #3, #2
9000a5ac:	40d8      	lsrs	r0, r3
9000a5ae:	4770      	bx	lr
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
9000a5b0:	6a93      	ldr	r3, [r2, #40]	; 0x28
{
9000a5b2:	b430      	push	{r4, r5}
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
9000a5b4:	6a94      	ldr	r4, [r2, #40]	; 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
9000a5b6:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
      if (pllm != 0U)
9000a5b8:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
9000a5bc:	6b51      	ldr	r1, [r2, #52]	; 0x34
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
9000a5be:	f3c4 1005 	ubfx	r0, r4, #4, #6
      if (pllm != 0U)
9000a5c2:	d038      	beq.n	9000a636 <HAL_RCC_GetSysClockFreq+0xb2>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
9000a5c4:	f3c1 01cc 	ubfx	r1, r1, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
9000a5c8:	f005 0501 	and.w	r5, r5, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
9000a5cc:	f003 0303 	and.w	r3, r3, #3
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
9000a5d0:	fb05 f101 	mul.w	r1, r5, r1
9000a5d4:	2b01      	cmp	r3, #1
9000a5d6:	ee07 1a90 	vmov	s15, r1
9000a5da:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
        switch (pllsource)
9000a5de:	d002      	beq.n	9000a5e6 <HAL_RCC_GetSysClockFreq+0x62>
9000a5e0:	2b02      	cmp	r3, #2
9000a5e2:	d02c      	beq.n	9000a63e <HAL_RCC_GetSysClockFreq+0xba>
9000a5e4:	b393      	cbz	r3, 9000a64c <HAL_RCC_GetSysClockFreq+0xc8>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000a5e6:	ee07 0a90 	vmov	s15, r0
9000a5ea:	ed9f 5a32 	vldr	s10, [pc, #200]	; 9000a6b4 <HAL_RCC_GetSysClockFreq+0x130>
9000a5ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000a5f2:	6b13      	ldr	r3, [r2, #48]	; 0x30
9000a5f4:	eec5 6a27 	vdiv.f32	s13, s10, s15
9000a5f8:	eddf 5a2f 	vldr	s11, [pc, #188]	; 9000a6b8 <HAL_RCC_GetSysClockFreq+0x134>
9000a5fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
9000a600:	ee07 3a90 	vmov	s15, r3
9000a604:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
9000a608:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000a60c:	eee7 7a25 	vfma.f32	s15, s14, s11
9000a610:	ee77 7a86 	vadd.f32	s15, s15, s12
9000a614:	ee66 6aa7 	vmul.f32	s13, s13, s15
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
9000a618:	4b22      	ldr	r3, [pc, #136]	; (9000a6a4 <HAL_RCC_GetSysClockFreq+0x120>)
9000a61a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
9000a61c:	f3c3 2346 	ubfx	r3, r3, #9, #7
9000a620:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
9000a622:	ee07 3a90 	vmov	s15, r3
9000a626:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
9000a62a:	eec6 7a87 	vdiv.f32	s15, s13, s14
9000a62e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
9000a632:	ee17 0a90 	vmov	r0, s15
}
9000a636:	bc30      	pop	{r4, r5}
9000a638:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
9000a63a:	481d      	ldr	r0, [pc, #116]	; (9000a6b0 <HAL_RCC_GetSysClockFreq+0x12c>)
}
9000a63c:	4770      	bx	lr
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000a63e:	ee07 0a90 	vmov	s15, r0
9000a642:	ed9f 5a1e 	vldr	s10, [pc, #120]	; 9000a6bc <HAL_RCC_GetSysClockFreq+0x138>
9000a646:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000a64a:	e7d2      	b.n	9000a5f2 <HAL_RCC_GetSysClockFreq+0x6e>
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
9000a64c:	6813      	ldr	r3, [r2, #0]
9000a64e:	069b      	lsls	r3, r3, #26
9000a650:	d520      	bpl.n	9000a694 <HAL_RCC_GetSysClockFreq+0x110>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000a652:	6814      	ldr	r4, [r2, #0]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000a654:	ee07 0a90 	vmov	s15, r0
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000a658:	4915      	ldr	r1, [pc, #84]	; (9000a6b0 <HAL_RCC_GetSysClockFreq+0x12c>)
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000a65a:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
9000a65e:	6b13      	ldr	r3, [r2, #48]	; 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000a660:	f3c4 04c1 	ubfx	r4, r4, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000a664:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000a668:	ed9f 5a13 	vldr	s10, [pc, #76]	; 9000a6b8 <HAL_RCC_GetSysClockFreq+0x134>
9000a66c:	f3c3 0308 	ubfx	r3, r3, #0, #9
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000a670:	40e1      	lsrs	r1, r4
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000a672:	ee06 3a90 	vmov	s13, r3
9000a676:	ee06 1a10 	vmov	s12, r1
9000a67a:	eef8 6ae6 	vcvt.f32.s32	s13, s13
9000a67e:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
9000a682:	eee7 6a05 	vfma.f32	s13, s14, s10
9000a686:	ee86 7a27 	vdiv.f32	s14, s12, s15
9000a68a:	ee76 6aa5 	vadd.f32	s13, s13, s11
9000a68e:	ee66 6a87 	vmul.f32	s13, s13, s14
9000a692:	e7c1      	b.n	9000a618 <HAL_RCC_GetSysClockFreq+0x94>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000a694:	ee07 0a90 	vmov	s15, r0
9000a698:	ed9f 5a09 	vldr	s10, [pc, #36]	; 9000a6c0 <HAL_RCC_GetSysClockFreq+0x13c>
9000a69c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000a6a0:	e7a7      	b.n	9000a5f2 <HAL_RCC_GetSysClockFreq+0x6e>
9000a6a2:	bf00      	nop
9000a6a4:	58024400 	.word	0x58024400
9000a6a8:	003d0900 	.word	0x003d0900
9000a6ac:	017d7840 	.word	0x017d7840
9000a6b0:	03d09000 	.word	0x03d09000
9000a6b4:	4a742400 	.word	0x4a742400
9000a6b8:	39000000 	.word	0x39000000
9000a6bc:	4bbebc20 	.word	0x4bbebc20
9000a6c0:	4c742400 	.word	0x4c742400

9000a6c4 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
9000a6c4:	2800      	cmp	r0, #0
9000a6c6:	f000 810c 	beq.w	9000a8e2 <HAL_RCC_ClockConfig+0x21e>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
9000a6ca:	4a8c      	ldr	r2, [pc, #560]	; (9000a8fc <HAL_RCC_ClockConfig+0x238>)
9000a6cc:	6813      	ldr	r3, [r2, #0]
9000a6ce:	f003 030f 	and.w	r3, r3, #15
9000a6d2:	428b      	cmp	r3, r1
{
9000a6d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9000a6d8:	4604      	mov	r4, r0
9000a6da:	460d      	mov	r5, r1
  if (FLatency > __HAL_FLASH_GET_LATENCY())
9000a6dc:	d20c      	bcs.n	9000a6f8 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
9000a6de:	6813      	ldr	r3, [r2, #0]
9000a6e0:	f023 030f 	bic.w	r3, r3, #15
9000a6e4:	430b      	orrs	r3, r1
9000a6e6:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
9000a6e8:	6813      	ldr	r3, [r2, #0]
9000a6ea:	f003 030f 	and.w	r3, r3, #15
9000a6ee:	428b      	cmp	r3, r1
9000a6f0:	d002      	beq.n	9000a6f8 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
9000a6f2:	2001      	movs	r0, #1
}
9000a6f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
9000a6f8:	6823      	ldr	r3, [r4, #0]
9000a6fa:	075f      	lsls	r7, r3, #29
9000a6fc:	d50b      	bpl.n	9000a716 <HAL_RCC_ClockConfig+0x52>
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
9000a6fe:	4980      	ldr	r1, [pc, #512]	; (9000a900 <HAL_RCC_ClockConfig+0x23c>)
9000a700:	6920      	ldr	r0, [r4, #16]
9000a702:	698a      	ldr	r2, [r1, #24]
9000a704:	f002 0270 	and.w	r2, r2, #112	; 0x70
9000a708:	4290      	cmp	r0, r2
9000a70a:	d904      	bls.n	9000a716 <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
9000a70c:	698a      	ldr	r2, [r1, #24]
9000a70e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
9000a712:	4302      	orrs	r2, r0
9000a714:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
9000a716:	071e      	lsls	r6, r3, #28
9000a718:	d50b      	bpl.n	9000a732 <HAL_RCC_ClockConfig+0x6e>
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
9000a71a:	4979      	ldr	r1, [pc, #484]	; (9000a900 <HAL_RCC_ClockConfig+0x23c>)
9000a71c:	6960      	ldr	r0, [r4, #20]
9000a71e:	69ca      	ldr	r2, [r1, #28]
9000a720:	f002 0270 	and.w	r2, r2, #112	; 0x70
9000a724:	4290      	cmp	r0, r2
9000a726:	d904      	bls.n	9000a732 <HAL_RCC_ClockConfig+0x6e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
9000a728:	69ca      	ldr	r2, [r1, #28]
9000a72a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
9000a72e:	4302      	orrs	r2, r0
9000a730:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
9000a732:	06d8      	lsls	r0, r3, #27
9000a734:	d50b      	bpl.n	9000a74e <HAL_RCC_ClockConfig+0x8a>
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
9000a736:	4972      	ldr	r1, [pc, #456]	; (9000a900 <HAL_RCC_ClockConfig+0x23c>)
9000a738:	69a0      	ldr	r0, [r4, #24]
9000a73a:	69ca      	ldr	r2, [r1, #28]
9000a73c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
9000a740:	4290      	cmp	r0, r2
9000a742:	d904      	bls.n	9000a74e <HAL_RCC_ClockConfig+0x8a>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
9000a744:	69ca      	ldr	r2, [r1, #28]
9000a746:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
9000a74a:	4302      	orrs	r2, r0
9000a74c:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
9000a74e:	0699      	lsls	r1, r3, #26
9000a750:	d50b      	bpl.n	9000a76a <HAL_RCC_ClockConfig+0xa6>
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
9000a752:	496b      	ldr	r1, [pc, #428]	; (9000a900 <HAL_RCC_ClockConfig+0x23c>)
9000a754:	69e0      	ldr	r0, [r4, #28]
9000a756:	6a0a      	ldr	r2, [r1, #32]
9000a758:	f002 0270 	and.w	r2, r2, #112	; 0x70
9000a75c:	4290      	cmp	r0, r2
9000a75e:	d904      	bls.n	9000a76a <HAL_RCC_ClockConfig+0xa6>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
9000a760:	6a0a      	ldr	r2, [r1, #32]
9000a762:	f022 0270 	bic.w	r2, r2, #112	; 0x70
9000a766:	4302      	orrs	r2, r0
9000a768:	620a      	str	r2, [r1, #32]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
9000a76a:	079a      	lsls	r2, r3, #30
9000a76c:	f140 80ab 	bpl.w	9000a8c6 <HAL_RCC_ClockConfig+0x202>
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
9000a770:	4863      	ldr	r0, [pc, #396]	; (9000a900 <HAL_RCC_ClockConfig+0x23c>)
9000a772:	68e1      	ldr	r1, [r4, #12]
9000a774:	6982      	ldr	r2, [r0, #24]
9000a776:	f002 020f 	and.w	r2, r2, #15
9000a77a:	4291      	cmp	r1, r2
9000a77c:	d904      	bls.n	9000a788 <HAL_RCC_ClockConfig+0xc4>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
9000a77e:	6982      	ldr	r2, [r0, #24]
9000a780:	f022 020f 	bic.w	r2, r2, #15
9000a784:	430a      	orrs	r2, r1
9000a786:	6182      	str	r2, [r0, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
9000a788:	07d8      	lsls	r0, r3, #31
9000a78a:	d530      	bpl.n	9000a7ee <HAL_RCC_ClockConfig+0x12a>
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
9000a78c:	4a5c      	ldr	r2, [pc, #368]	; (9000a900 <HAL_RCC_ClockConfig+0x23c>)
9000a78e:	68a1      	ldr	r1, [r4, #8]
9000a790:	6993      	ldr	r3, [r2, #24]
9000a792:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
9000a796:	430b      	orrs	r3, r1
9000a798:	6193      	str	r3, [r2, #24]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
9000a79a:	6861      	ldr	r1, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
9000a79c:	6813      	ldr	r3, [r2, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
9000a79e:	2902      	cmp	r1, #2
9000a7a0:	f000 80a1 	beq.w	9000a8e6 <HAL_RCC_ClockConfig+0x222>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
9000a7a4:	2903      	cmp	r1, #3
9000a7a6:	f000 8098 	beq.w	9000a8da <HAL_RCC_ClockConfig+0x216>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
9000a7aa:	2901      	cmp	r1, #1
9000a7ac:	f000 80a1 	beq.w	9000a8f2 <HAL_RCC_ClockConfig+0x22e>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
9000a7b0:	0758      	lsls	r0, r3, #29
9000a7b2:	d59e      	bpl.n	9000a6f2 <HAL_RCC_ClockConfig+0x2e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
9000a7b4:	4e52      	ldr	r6, [pc, #328]	; (9000a900 <HAL_RCC_ClockConfig+0x23c>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
9000a7b6:	f241 3888 	movw	r8, #5000	; 0x1388
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
9000a7ba:	6933      	ldr	r3, [r6, #16]
9000a7bc:	f023 0307 	bic.w	r3, r3, #7
9000a7c0:	430b      	orrs	r3, r1
9000a7c2:	6133      	str	r3, [r6, #16]
    tickstart = HAL_GetTick();
9000a7c4:	f7fb fcfa 	bl	900061bc <HAL_GetTick>
9000a7c8:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
9000a7ca:	e005      	b.n	9000a7d8 <HAL_RCC_ClockConfig+0x114>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
9000a7cc:	f7fb fcf6 	bl	900061bc <HAL_GetTick>
9000a7d0:	1bc0      	subs	r0, r0, r7
9000a7d2:	4540      	cmp	r0, r8
9000a7d4:	f200 808b 	bhi.w	9000a8ee <HAL_RCC_ClockConfig+0x22a>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
9000a7d8:	6933      	ldr	r3, [r6, #16]
9000a7da:	6862      	ldr	r2, [r4, #4]
9000a7dc:	f003 0338 	and.w	r3, r3, #56	; 0x38
9000a7e0:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
9000a7e4:	d1f2      	bne.n	9000a7cc <HAL_RCC_ClockConfig+0x108>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
9000a7e6:	6823      	ldr	r3, [r4, #0]
9000a7e8:	0799      	lsls	r1, r3, #30
9000a7ea:	d506      	bpl.n	9000a7fa <HAL_RCC_ClockConfig+0x136>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
9000a7ec:	68e1      	ldr	r1, [r4, #12]
9000a7ee:	4844      	ldr	r0, [pc, #272]	; (9000a900 <HAL_RCC_ClockConfig+0x23c>)
9000a7f0:	6982      	ldr	r2, [r0, #24]
9000a7f2:	f002 020f 	and.w	r2, r2, #15
9000a7f6:	428a      	cmp	r2, r1
9000a7f8:	d869      	bhi.n	9000a8ce <HAL_RCC_ClockConfig+0x20a>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
9000a7fa:	4940      	ldr	r1, [pc, #256]	; (9000a8fc <HAL_RCC_ClockConfig+0x238>)
9000a7fc:	680a      	ldr	r2, [r1, #0]
9000a7fe:	f002 020f 	and.w	r2, r2, #15
9000a802:	42aa      	cmp	r2, r5
9000a804:	d90a      	bls.n	9000a81c <HAL_RCC_ClockConfig+0x158>
    __HAL_FLASH_SET_LATENCY(FLatency);
9000a806:	680a      	ldr	r2, [r1, #0]
9000a808:	f022 020f 	bic.w	r2, r2, #15
9000a80c:	432a      	orrs	r2, r5
9000a80e:	600a      	str	r2, [r1, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
9000a810:	680a      	ldr	r2, [r1, #0]
9000a812:	f002 020f 	and.w	r2, r2, #15
9000a816:	42aa      	cmp	r2, r5
9000a818:	f47f af6b 	bne.w	9000a6f2 <HAL_RCC_ClockConfig+0x2e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
9000a81c:	075a      	lsls	r2, r3, #29
9000a81e:	d50b      	bpl.n	9000a838 <HAL_RCC_ClockConfig+0x174>
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
9000a820:	4937      	ldr	r1, [pc, #220]	; (9000a900 <HAL_RCC_ClockConfig+0x23c>)
9000a822:	6920      	ldr	r0, [r4, #16]
9000a824:	698a      	ldr	r2, [r1, #24]
9000a826:	f002 0270 	and.w	r2, r2, #112	; 0x70
9000a82a:	4290      	cmp	r0, r2
9000a82c:	d204      	bcs.n	9000a838 <HAL_RCC_ClockConfig+0x174>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
9000a82e:	698a      	ldr	r2, [r1, #24]
9000a830:	f022 0270 	bic.w	r2, r2, #112	; 0x70
9000a834:	4302      	orrs	r2, r0
9000a836:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
9000a838:	071f      	lsls	r7, r3, #28
9000a83a:	d50b      	bpl.n	9000a854 <HAL_RCC_ClockConfig+0x190>
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
9000a83c:	4930      	ldr	r1, [pc, #192]	; (9000a900 <HAL_RCC_ClockConfig+0x23c>)
9000a83e:	6960      	ldr	r0, [r4, #20]
9000a840:	69ca      	ldr	r2, [r1, #28]
9000a842:	f002 0270 	and.w	r2, r2, #112	; 0x70
9000a846:	4290      	cmp	r0, r2
9000a848:	d204      	bcs.n	9000a854 <HAL_RCC_ClockConfig+0x190>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
9000a84a:	69ca      	ldr	r2, [r1, #28]
9000a84c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
9000a850:	4302      	orrs	r2, r0
9000a852:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
9000a854:	06de      	lsls	r6, r3, #27
9000a856:	d50b      	bpl.n	9000a870 <HAL_RCC_ClockConfig+0x1ac>
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
9000a858:	4929      	ldr	r1, [pc, #164]	; (9000a900 <HAL_RCC_ClockConfig+0x23c>)
9000a85a:	69a0      	ldr	r0, [r4, #24]
9000a85c:	69ca      	ldr	r2, [r1, #28]
9000a85e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
9000a862:	4290      	cmp	r0, r2
9000a864:	d204      	bcs.n	9000a870 <HAL_RCC_ClockConfig+0x1ac>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
9000a866:	69ca      	ldr	r2, [r1, #28]
9000a868:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
9000a86c:	4302      	orrs	r2, r0
9000a86e:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
9000a870:	069d      	lsls	r5, r3, #26
9000a872:	d50b      	bpl.n	9000a88c <HAL_RCC_ClockConfig+0x1c8>
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
9000a874:	4a22      	ldr	r2, [pc, #136]	; (9000a900 <HAL_RCC_ClockConfig+0x23c>)
9000a876:	69e1      	ldr	r1, [r4, #28]
9000a878:	6a13      	ldr	r3, [r2, #32]
9000a87a:	f003 0370 	and.w	r3, r3, #112	; 0x70
9000a87e:	4299      	cmp	r1, r3
9000a880:	d204      	bcs.n	9000a88c <HAL_RCC_ClockConfig+0x1c8>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
9000a882:	6a13      	ldr	r3, [r2, #32]
9000a884:	f023 0370 	bic.w	r3, r3, #112	; 0x70
9000a888:	430b      	orrs	r3, r1
9000a88a:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
9000a88c:	f7ff fe7a 	bl	9000a584 <HAL_RCC_GetSysClockFreq>
9000a890:	4a1b      	ldr	r2, [pc, #108]	; (9000a900 <HAL_RCC_ClockConfig+0x23c>)
9000a892:	4603      	mov	r3, r0
9000a894:	481b      	ldr	r0, [pc, #108]	; (9000a904 <HAL_RCC_ClockConfig+0x240>)
9000a896:	6991      	ldr	r1, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000a898:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
9000a89a:	f3c1 2103 	ubfx	r1, r1, #8, #4
  SystemCoreClock = common_system_clock;
9000a89e:	4d1a      	ldr	r5, [pc, #104]	; (9000a908 <HAL_RCC_ClockConfig+0x244>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000a8a0:	f002 020f 	and.w	r2, r2, #15
9000a8a4:	4c19      	ldr	r4, [pc, #100]	; (9000a90c <HAL_RCC_ClockConfig+0x248>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
9000a8a6:	5c41      	ldrb	r1, [r0, r1]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000a8a8:	5c82      	ldrb	r2, [r0, r2]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
9000a8aa:	f001 011f 	and.w	r1, r1, #31
  halstatus = HAL_InitTick(uwTickPrio);
9000a8ae:	4818      	ldr	r0, [pc, #96]	; (9000a910 <HAL_RCC_ClockConfig+0x24c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000a8b0:	f002 021f 	and.w	r2, r2, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
9000a8b4:	40cb      	lsrs	r3, r1
  halstatus = HAL_InitTick(uwTickPrio);
9000a8b6:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = common_system_clock;
9000a8b8:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000a8ba:	40d3      	lsrs	r3, r2
9000a8bc:	6023      	str	r3, [r4, #0]
}
9000a8be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick(uwTickPrio);
9000a8c2:	f7f9 bd55 	b.w	90004370 <HAL_InitTick>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
9000a8c6:	07da      	lsls	r2, r3, #31
9000a8c8:	f53f af60 	bmi.w	9000a78c <HAL_RCC_ClockConfig+0xc8>
9000a8cc:	e795      	b.n	9000a7fa <HAL_RCC_ClockConfig+0x136>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
9000a8ce:	6982      	ldr	r2, [r0, #24]
9000a8d0:	f022 020f 	bic.w	r2, r2, #15
9000a8d4:	430a      	orrs	r2, r1
9000a8d6:	6182      	str	r2, [r0, #24]
9000a8d8:	e78f      	b.n	9000a7fa <HAL_RCC_ClockConfig+0x136>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
9000a8da:	019f      	lsls	r7, r3, #6
9000a8dc:	f53f af6a 	bmi.w	9000a7b4 <HAL_RCC_ClockConfig+0xf0>
9000a8e0:	e707      	b.n	9000a6f2 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
9000a8e2:	2001      	movs	r0, #1
}
9000a8e4:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
9000a8e6:	039b      	lsls	r3, r3, #14
9000a8e8:	f53f af64 	bmi.w	9000a7b4 <HAL_RCC_ClockConfig+0xf0>
9000a8ec:	e701      	b.n	9000a6f2 <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
9000a8ee:	2003      	movs	r0, #3
9000a8f0:	e700      	b.n	9000a6f4 <HAL_RCC_ClockConfig+0x30>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
9000a8f2:	05de      	lsls	r6, r3, #23
9000a8f4:	f53f af5e 	bmi.w	9000a7b4 <HAL_RCC_ClockConfig+0xf0>
9000a8f8:	e6fb      	b.n	9000a6f2 <HAL_RCC_ClockConfig+0x2e>
9000a8fa:	bf00      	nop
9000a8fc:	52002000 	.word	0x52002000
9000a900:	58024400 	.word	0x58024400
9000a904:	90028908 	.word	0x90028908
9000a908:	24000068 	.word	0x24000068
9000a90c:	2400006c 	.word	0x2400006c
9000a910:	24000074 	.word	0x24000074

9000a914 <HAL_RCC_GetHCLKFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
9000a914:	4a18      	ldr	r2, [pc, #96]	; (9000a978 <HAL_RCC_GetHCLKFreq+0x64>)
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
9000a916:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
9000a918:	6913      	ldr	r3, [r2, #16]
9000a91a:	f003 0338 	and.w	r3, r3, #56	; 0x38
9000a91e:	2b10      	cmp	r3, #16
9000a920:	d01a      	beq.n	9000a958 <HAL_RCC_GetHCLKFreq+0x44>
9000a922:	2b18      	cmp	r3, #24
9000a924:	d023      	beq.n	9000a96e <HAL_RCC_GetHCLKFreq+0x5a>
9000a926:	b1cb      	cbz	r3, 9000a95c <HAL_RCC_GetHCLKFreq+0x48>
      sysclockfreq = CSI_VALUE;
9000a928:	4814      	ldr	r0, [pc, #80]	; (9000a97c <HAL_RCC_GetHCLKFreq+0x68>)
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
9000a92a:	4b13      	ldr	r3, [pc, #76]	; (9000a978 <HAL_RCC_GetHCLKFreq+0x64>)
9000a92c:	4914      	ldr	r1, [pc, #80]	; (9000a980 <HAL_RCC_GetHCLKFreq+0x6c>)
9000a92e:	699a      	ldr	r2, [r3, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000a930:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
9000a932:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000a936:	4c13      	ldr	r4, [pc, #76]	; (9000a984 <HAL_RCC_GetHCLKFreq+0x70>)
9000a938:	f003 030f 	and.w	r3, r3, #15
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
9000a93c:	4d12      	ldr	r5, [pc, #72]	; (9000a988 <HAL_RCC_GetHCLKFreq+0x74>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
9000a93e:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000a940:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
9000a942:	f002 021f 	and.w	r2, r2, #31
9000a946:	fa20 f202 	lsr.w	r2, r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000a94a:	f003 001f 	and.w	r0, r3, #31
9000a94e:	fa22 f000 	lsr.w	r0, r2, r0
  SystemCoreClock = common_system_clock;
9000a952:	602a      	str	r2, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000a954:	6020      	str	r0, [r4, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
9000a956:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
9000a958:	480c      	ldr	r0, [pc, #48]	; (9000a98c <HAL_RCC_GetHCLKFreq+0x78>)
9000a95a:	e7e6      	b.n	9000a92a <HAL_RCC_GetHCLKFreq+0x16>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
9000a95c:	6813      	ldr	r3, [r2, #0]
9000a95e:	069b      	lsls	r3, r3, #26
9000a960:	d508      	bpl.n	9000a974 <HAL_RCC_GetHCLKFreq+0x60>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000a962:	6813      	ldr	r3, [r2, #0]
9000a964:	480a      	ldr	r0, [pc, #40]	; (9000a990 <HAL_RCC_GetHCLKFreq+0x7c>)
9000a966:	f3c3 03c1 	ubfx	r3, r3, #3, #2
9000a96a:	40d8      	lsrs	r0, r3
9000a96c:	e7dd      	b.n	9000a92a <HAL_RCC_GetHCLKFreq+0x16>
9000a96e:	f7ff fa91 	bl	90009e94 <HAL_RCC_GetSysClockFreq.part.0>
9000a972:	e7da      	b.n	9000a92a <HAL_RCC_GetHCLKFreq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
9000a974:	4806      	ldr	r0, [pc, #24]	; (9000a990 <HAL_RCC_GetHCLKFreq+0x7c>)
9000a976:	e7d8      	b.n	9000a92a <HAL_RCC_GetHCLKFreq+0x16>
9000a978:	58024400 	.word	0x58024400
9000a97c:	003d0900 	.word	0x003d0900
9000a980:	90028908 	.word	0x90028908
9000a984:	2400006c 	.word	0x2400006c
9000a988:	24000068 	.word	0x24000068
9000a98c:	017d7840 	.word	0x017d7840
9000a990:	03d09000 	.word	0x03d09000

9000a994 <HAL_RCC_GetPCLK1Freq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
9000a994:	4a1c      	ldr	r2, [pc, #112]	; (9000aa08 <HAL_RCC_GetPCLK1Freq+0x74>)
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
9000a996:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
9000a998:	6913      	ldr	r3, [r2, #16]
9000a99a:	f003 0338 	and.w	r3, r3, #56	; 0x38
9000a99e:	2b10      	cmp	r3, #16
9000a9a0:	d021      	beq.n	9000a9e6 <HAL_RCC_GetPCLK1Freq+0x52>
9000a9a2:	2b18      	cmp	r3, #24
9000a9a4:	d02a      	beq.n	9000a9fc <HAL_RCC_GetPCLK1Freq+0x68>
9000a9a6:	b303      	cbz	r3, 9000a9ea <HAL_RCC_GetPCLK1Freq+0x56>
      sysclockfreq = CSI_VALUE;
9000a9a8:	4818      	ldr	r0, [pc, #96]	; (9000aa0c <HAL_RCC_GetPCLK1Freq+0x78>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
9000a9aa:	4a17      	ldr	r2, [pc, #92]	; (9000aa08 <HAL_RCC_GetPCLK1Freq+0x74>)
9000a9ac:	4918      	ldr	r1, [pc, #96]	; (9000aa10 <HAL_RCC_GetPCLK1Freq+0x7c>)
9000a9ae:	6993      	ldr	r3, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000a9b0:	4c18      	ldr	r4, [pc, #96]	; (9000aa14 <HAL_RCC_GetPCLK1Freq+0x80>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
9000a9b2:	f3c3 2303 	ubfx	r3, r3, #8, #4
  SystemCoreClock = common_system_clock;
9000a9b6:	4d18      	ldr	r5, [pc, #96]	; (9000aa18 <HAL_RCC_GetPCLK1Freq+0x84>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
9000a9b8:	5ccb      	ldrb	r3, [r1, r3]
9000a9ba:	f003 031f 	and.w	r3, r3, #31
9000a9be:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000a9c0:	6993      	ldr	r3, [r2, #24]
9000a9c2:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = common_system_clock;
9000a9c6:	6028      	str	r0, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000a9c8:	5ccb      	ldrb	r3, [r1, r3]
9000a9ca:	f003 031f 	and.w	r3, r3, #31
9000a9ce:	fa20 f303 	lsr.w	r3, r0, r3
9000a9d2:	6023      	str	r3, [r4, #0]
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
9000a9d4:	69d2      	ldr	r2, [r2, #28]
9000a9d6:	f3c2 1202 	ubfx	r2, r2, #4, #3
9000a9da:	5c88      	ldrb	r0, [r1, r2]
9000a9dc:	f000 001f 	and.w	r0, r0, #31
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
9000a9e0:	fa23 f000 	lsr.w	r0, r3, r0
9000a9e4:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
9000a9e6:	480d      	ldr	r0, [pc, #52]	; (9000aa1c <HAL_RCC_GetPCLK1Freq+0x88>)
9000a9e8:	e7df      	b.n	9000a9aa <HAL_RCC_GetPCLK1Freq+0x16>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
9000a9ea:	6813      	ldr	r3, [r2, #0]
9000a9ec:	069b      	lsls	r3, r3, #26
9000a9ee:	d508      	bpl.n	9000aa02 <HAL_RCC_GetPCLK1Freq+0x6e>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000a9f0:	6813      	ldr	r3, [r2, #0]
9000a9f2:	480b      	ldr	r0, [pc, #44]	; (9000aa20 <HAL_RCC_GetPCLK1Freq+0x8c>)
9000a9f4:	f3c3 03c1 	ubfx	r3, r3, #3, #2
9000a9f8:	40d8      	lsrs	r0, r3
9000a9fa:	e7d6      	b.n	9000a9aa <HAL_RCC_GetPCLK1Freq+0x16>
9000a9fc:	f7ff fa4a 	bl	90009e94 <HAL_RCC_GetSysClockFreq.part.0>
9000aa00:	e7d3      	b.n	9000a9aa <HAL_RCC_GetPCLK1Freq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
9000aa02:	4807      	ldr	r0, [pc, #28]	; (9000aa20 <HAL_RCC_GetPCLK1Freq+0x8c>)
9000aa04:	e7d1      	b.n	9000a9aa <HAL_RCC_GetPCLK1Freq+0x16>
9000aa06:	bf00      	nop
9000aa08:	58024400 	.word	0x58024400
9000aa0c:	003d0900 	.word	0x003d0900
9000aa10:	90028908 	.word	0x90028908
9000aa14:	2400006c 	.word	0x2400006c
9000aa18:	24000068 	.word	0x24000068
9000aa1c:	017d7840 	.word	0x017d7840
9000aa20:	03d09000 	.word	0x03d09000

9000aa24 <HAL_RCC_GetPCLK2Freq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
9000aa24:	4a1c      	ldr	r2, [pc, #112]	; (9000aa98 <HAL_RCC_GetPCLK2Freq+0x74>)
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
9000aa26:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
9000aa28:	6913      	ldr	r3, [r2, #16]
9000aa2a:	f003 0338 	and.w	r3, r3, #56	; 0x38
9000aa2e:	2b10      	cmp	r3, #16
9000aa30:	d021      	beq.n	9000aa76 <HAL_RCC_GetPCLK2Freq+0x52>
9000aa32:	2b18      	cmp	r3, #24
9000aa34:	d02a      	beq.n	9000aa8c <HAL_RCC_GetPCLK2Freq+0x68>
9000aa36:	b303      	cbz	r3, 9000aa7a <HAL_RCC_GetPCLK2Freq+0x56>
      sysclockfreq = CSI_VALUE;
9000aa38:	4818      	ldr	r0, [pc, #96]	; (9000aa9c <HAL_RCC_GetPCLK2Freq+0x78>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
9000aa3a:	4a17      	ldr	r2, [pc, #92]	; (9000aa98 <HAL_RCC_GetPCLK2Freq+0x74>)
9000aa3c:	4918      	ldr	r1, [pc, #96]	; (9000aaa0 <HAL_RCC_GetPCLK2Freq+0x7c>)
9000aa3e:	6993      	ldr	r3, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000aa40:	4c18      	ldr	r4, [pc, #96]	; (9000aaa4 <HAL_RCC_GetPCLK2Freq+0x80>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
9000aa42:	f3c3 2303 	ubfx	r3, r3, #8, #4
  SystemCoreClock = common_system_clock;
9000aa46:	4d18      	ldr	r5, [pc, #96]	; (9000aaa8 <HAL_RCC_GetPCLK2Freq+0x84>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
9000aa48:	5ccb      	ldrb	r3, [r1, r3]
9000aa4a:	f003 031f 	and.w	r3, r3, #31
9000aa4e:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000aa50:	6993      	ldr	r3, [r2, #24]
9000aa52:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = common_system_clock;
9000aa56:	6028      	str	r0, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000aa58:	5ccb      	ldrb	r3, [r1, r3]
9000aa5a:	f003 031f 	and.w	r3, r3, #31
9000aa5e:	fa20 f303 	lsr.w	r3, r0, r3
9000aa62:	6023      	str	r3, [r4, #0]
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
9000aa64:	69d2      	ldr	r2, [r2, #28]
9000aa66:	f3c2 2202 	ubfx	r2, r2, #8, #3
9000aa6a:	5c88      	ldrb	r0, [r1, r2]
9000aa6c:	f000 001f 	and.w	r0, r0, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
9000aa70:	fa23 f000 	lsr.w	r0, r3, r0
9000aa74:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
9000aa76:	480d      	ldr	r0, [pc, #52]	; (9000aaac <HAL_RCC_GetPCLK2Freq+0x88>)
9000aa78:	e7df      	b.n	9000aa3a <HAL_RCC_GetPCLK2Freq+0x16>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
9000aa7a:	6813      	ldr	r3, [r2, #0]
9000aa7c:	069b      	lsls	r3, r3, #26
9000aa7e:	d508      	bpl.n	9000aa92 <HAL_RCC_GetPCLK2Freq+0x6e>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000aa80:	6813      	ldr	r3, [r2, #0]
9000aa82:	480b      	ldr	r0, [pc, #44]	; (9000aab0 <HAL_RCC_GetPCLK2Freq+0x8c>)
9000aa84:	f3c3 03c1 	ubfx	r3, r3, #3, #2
9000aa88:	40d8      	lsrs	r0, r3
9000aa8a:	e7d6      	b.n	9000aa3a <HAL_RCC_GetPCLK2Freq+0x16>
9000aa8c:	f7ff fa02 	bl	90009e94 <HAL_RCC_GetSysClockFreq.part.0>
9000aa90:	e7d3      	b.n	9000aa3a <HAL_RCC_GetPCLK2Freq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
9000aa92:	4807      	ldr	r0, [pc, #28]	; (9000aab0 <HAL_RCC_GetPCLK2Freq+0x8c>)
9000aa94:	e7d1      	b.n	9000aa3a <HAL_RCC_GetPCLK2Freq+0x16>
9000aa96:	bf00      	nop
9000aa98:	58024400 	.word	0x58024400
9000aa9c:	003d0900 	.word	0x003d0900
9000aaa0:	90028908 	.word	0x90028908
9000aaa4:	2400006c 	.word	0x2400006c
9000aaa8:	24000068 	.word	0x24000068
9000aaac:	017d7840 	.word	0x017d7840
9000aab0:	03d09000 	.word	0x03d09000

9000aab4 <HAL_RCC_GetClockConfig>:
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
9000aab4:	4b13      	ldr	r3, [pc, #76]	; (9000ab04 <HAL_RCC_GetClockConfig+0x50>)
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
9000aab6:	223f      	movs	r2, #63	; 0x3f
9000aab8:	6002      	str	r2, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
9000aaba:	691a      	ldr	r2, [r3, #16]
9000aabc:	f002 0207 	and.w	r2, r2, #7
9000aac0:	6042      	str	r2, [r0, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
9000aac2:	699a      	ldr	r2, [r3, #24]
9000aac4:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
9000aac8:	6082      	str	r2, [r0, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
9000aaca:	699a      	ldr	r2, [r3, #24]
9000aacc:	f002 020f 	and.w	r2, r2, #15
9000aad0:	60c2      	str	r2, [r0, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
9000aad2:	699a      	ldr	r2, [r3, #24]
9000aad4:	f002 0270 	and.w	r2, r2, #112	; 0x70
9000aad8:	6102      	str	r2, [r0, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
9000aada:	69da      	ldr	r2, [r3, #28]
9000aadc:	f002 0270 	and.w	r2, r2, #112	; 0x70
9000aae0:	6142      	str	r2, [r0, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
9000aae2:	69da      	ldr	r2, [r3, #28]
9000aae4:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
9000aae8:	6182      	str	r2, [r0, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
9000aaea:	6a1b      	ldr	r3, [r3, #32]
{
9000aaec:	b410      	push	{r4}
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
9000aaee:	f003 0370 	and.w	r3, r3, #112	; 0x70
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
9000aaf2:	4c05      	ldr	r4, [pc, #20]	; (9000ab08 <HAL_RCC_GetClockConfig+0x54>)
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
9000aaf4:	61c3      	str	r3, [r0, #28]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
9000aaf6:	6823      	ldr	r3, [r4, #0]
}
9000aaf8:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
9000aafc:	f003 030f 	and.w	r3, r3, #15
9000ab00:	600b      	str	r3, [r1, #0]
}
9000ab02:	4770      	bx	lr
9000ab04:	58024400 	.word	0x58024400
9000ab08:	52002000 	.word	0x52002000

9000ab0c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
9000ab0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
9000ab0e:	4c3a      	ldr	r4, [pc, #232]	; (9000abf8 <RCCEx_PLL2_Config+0xec>)
9000ab10:	6aa3      	ldr	r3, [r4, #40]	; 0x28
9000ab12:	f003 0303 	and.w	r3, r3, #3
9000ab16:	2b03      	cmp	r3, #3
9000ab18:	d067      	beq.n	9000abea <RCCEx_PLL2_Config+0xde>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
9000ab1a:	6823      	ldr	r3, [r4, #0]
9000ab1c:	4606      	mov	r6, r0
9000ab1e:	460f      	mov	r7, r1
9000ab20:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
9000ab24:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
9000ab26:	f7fb fb49 	bl	900061bc <HAL_GetTick>
9000ab2a:	4605      	mov	r5, r0

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
9000ab2c:	e004      	b.n	9000ab38 <RCCEx_PLL2_Config+0x2c>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
9000ab2e:	f7fb fb45 	bl	900061bc <HAL_GetTick>
9000ab32:	1b43      	subs	r3, r0, r5
9000ab34:	2b02      	cmp	r3, #2
9000ab36:	d856      	bhi.n	9000abe6 <RCCEx_PLL2_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
9000ab38:	6823      	ldr	r3, [r4, #0]
9000ab3a:	011a      	lsls	r2, r3, #4
9000ab3c:	d4f7      	bmi.n	9000ab2e <RCCEx_PLL2_Config+0x22>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
9000ab3e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
9000ab40:	6832      	ldr	r2, [r6, #0]
9000ab42:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
9000ab46:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
9000ab4a:	62a3      	str	r3, [r4, #40]	; 0x28
9000ab4c:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
9000ab50:	3b01      	subs	r3, #1
9000ab52:	3a01      	subs	r2, #1
9000ab54:	025b      	lsls	r3, r3, #9
9000ab56:	0412      	lsls	r2, r2, #16
9000ab58:	b29b      	uxth	r3, r3
9000ab5a:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
9000ab5e:	4313      	orrs	r3, r2
9000ab60:	6872      	ldr	r2, [r6, #4]
9000ab62:	3a01      	subs	r2, #1
9000ab64:	f3c2 0208 	ubfx	r2, r2, #0, #9
9000ab68:	4313      	orrs	r3, r2
9000ab6a:	6932      	ldr	r2, [r6, #16]
9000ab6c:	3a01      	subs	r2, #1
9000ab6e:	0612      	lsls	r2, r2, #24
9000ab70:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
9000ab74:	4313      	orrs	r3, r2
9000ab76:	63a3      	str	r3, [r4, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
9000ab78:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
9000ab7a:	6972      	ldr	r2, [r6, #20]
9000ab7c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
9000ab80:	4313      	orrs	r3, r2
9000ab82:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
9000ab84:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
9000ab86:	69b3      	ldr	r3, [r6, #24]
9000ab88:	f022 0220 	bic.w	r2, r2, #32
9000ab8c:	431a      	orrs	r2, r3

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
9000ab8e:	4b1b      	ldr	r3, [pc, #108]	; (9000abfc <RCCEx_PLL2_Config+0xf0>)
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
9000ab90:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
9000ab92:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
9000ab94:	f022 0210 	bic.w	r2, r2, #16
9000ab98:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
9000ab9a:	6be1      	ldr	r1, [r4, #60]	; 0x3c
9000ab9c:	69f2      	ldr	r2, [r6, #28]
9000ab9e:	400b      	ands	r3, r1
9000aba0:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
9000aba4:	63e3      	str	r3, [r4, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
9000aba6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
9000aba8:	f043 0310 	orr.w	r3, r3, #16
9000abac:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
9000abae:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if (Divider == DIVIDER_P_UPDATE)
9000abb0:	b1ef      	cbz	r7, 9000abee <RCCEx_PLL2_Config+0xe2>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
9000abb2:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
9000abb4:	bf0c      	ite	eq
9000abb6:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
9000abba:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
9000abbe:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
9000abc0:	4c0d      	ldr	r4, [pc, #52]	; (9000abf8 <RCCEx_PLL2_Config+0xec>)
9000abc2:	6823      	ldr	r3, [r4, #0]
9000abc4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
9000abc8:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
9000abca:	f7fb faf7 	bl	900061bc <HAL_GetTick>
9000abce:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
9000abd0:	e004      	b.n	9000abdc <RCCEx_PLL2_Config+0xd0>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
9000abd2:	f7fb faf3 	bl	900061bc <HAL_GetTick>
9000abd6:	1b40      	subs	r0, r0, r5
9000abd8:	2802      	cmp	r0, #2
9000abda:	d804      	bhi.n	9000abe6 <RCCEx_PLL2_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
9000abdc:	6823      	ldr	r3, [r4, #0]
9000abde:	011b      	lsls	r3, r3, #4
9000abe0:	d5f7      	bpl.n	9000abd2 <RCCEx_PLL2_Config+0xc6>
    }

  }


  return status;
9000abe2:	2000      	movs	r0, #0
}
9000abe4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
9000abe6:	2003      	movs	r0, #3
}
9000abe8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
9000abea:	2001      	movs	r0, #1
}
9000abec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
9000abee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
9000abf2:	62e3      	str	r3, [r4, #44]	; 0x2c
9000abf4:	e7e4      	b.n	9000abc0 <RCCEx_PLL2_Config+0xb4>
9000abf6:	bf00      	nop
9000abf8:	58024400 	.word	0x58024400
9000abfc:	ffff0007 	.word	0xffff0007

9000ac00 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
9000ac00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
9000ac02:	4c3a      	ldr	r4, [pc, #232]	; (9000acec <RCCEx_PLL3_Config+0xec>)
9000ac04:	6aa3      	ldr	r3, [r4, #40]	; 0x28
9000ac06:	f003 0303 	and.w	r3, r3, #3
9000ac0a:	2b03      	cmp	r3, #3
9000ac0c:	d067      	beq.n	9000acde <RCCEx_PLL3_Config+0xde>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
9000ac0e:	6823      	ldr	r3, [r4, #0]
9000ac10:	4606      	mov	r6, r0
9000ac12:	460f      	mov	r7, r1
9000ac14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
9000ac18:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
9000ac1a:	f7fb facf 	bl	900061bc <HAL_GetTick>
9000ac1e:	4605      	mov	r5, r0
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
9000ac20:	e004      	b.n	9000ac2c <RCCEx_PLL3_Config+0x2c>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
9000ac22:	f7fb facb 	bl	900061bc <HAL_GetTick>
9000ac26:	1b43      	subs	r3, r0, r5
9000ac28:	2b02      	cmp	r3, #2
9000ac2a:	d856      	bhi.n	9000acda <RCCEx_PLL3_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
9000ac2c:	6823      	ldr	r3, [r4, #0]
9000ac2e:	009a      	lsls	r2, r3, #2
9000ac30:	d4f7      	bmi.n	9000ac22 <RCCEx_PLL3_Config+0x22>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
9000ac32:	6aa3      	ldr	r3, [r4, #40]	; 0x28
9000ac34:	6832      	ldr	r2, [r6, #0]
9000ac36:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
9000ac3a:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
9000ac3e:	62a3      	str	r3, [r4, #40]	; 0x28
9000ac40:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
9000ac44:	3b01      	subs	r3, #1
9000ac46:	3a01      	subs	r2, #1
9000ac48:	025b      	lsls	r3, r3, #9
9000ac4a:	0412      	lsls	r2, r2, #16
9000ac4c:	b29b      	uxth	r3, r3
9000ac4e:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
9000ac52:	4313      	orrs	r3, r2
9000ac54:	6872      	ldr	r2, [r6, #4]
9000ac56:	3a01      	subs	r2, #1
9000ac58:	f3c2 0208 	ubfx	r2, r2, #0, #9
9000ac5c:	4313      	orrs	r3, r2
9000ac5e:	6932      	ldr	r2, [r6, #16]
9000ac60:	3a01      	subs	r2, #1
9000ac62:	0612      	lsls	r2, r2, #24
9000ac64:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
9000ac68:	4313      	orrs	r3, r2
9000ac6a:	6423      	str	r3, [r4, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
9000ac6c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
9000ac6e:	6972      	ldr	r2, [r6, #20]
9000ac70:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
9000ac74:	4313      	orrs	r3, r2
9000ac76:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
9000ac78:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
9000ac7a:	69b3      	ldr	r3, [r6, #24]
9000ac7c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
9000ac80:	431a      	orrs	r2, r3

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
9000ac82:	4b1b      	ldr	r3, [pc, #108]	; (9000acf0 <RCCEx_PLL3_Config+0xf0>)
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
9000ac84:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
9000ac86:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
9000ac88:	f422 7280 	bic.w	r2, r2, #256	; 0x100
9000ac8c:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
9000ac8e:	6c61      	ldr	r1, [r4, #68]	; 0x44
9000ac90:	69f2      	ldr	r2, [r6, #28]
9000ac92:	400b      	ands	r3, r1
9000ac94:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
9000ac98:	6463      	str	r3, [r4, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
9000ac9a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
9000ac9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
9000aca0:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
9000aca2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if (Divider == DIVIDER_P_UPDATE)
9000aca4:	b1ef      	cbz	r7, 9000ace2 <RCCEx_PLL3_Config+0xe2>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
9000aca6:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
9000aca8:	bf0c      	ite	eq
9000acaa:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
9000acae:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
9000acb2:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
9000acb4:	4c0d      	ldr	r4, [pc, #52]	; (9000acec <RCCEx_PLL3_Config+0xec>)
9000acb6:	6823      	ldr	r3, [r4, #0]
9000acb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
9000acbc:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
9000acbe:	f7fb fa7d 	bl	900061bc <HAL_GetTick>
9000acc2:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
9000acc4:	e004      	b.n	9000acd0 <RCCEx_PLL3_Config+0xd0>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
9000acc6:	f7fb fa79 	bl	900061bc <HAL_GetTick>
9000acca:	1b40      	subs	r0, r0, r5
9000accc:	2802      	cmp	r0, #2
9000acce:	d804      	bhi.n	9000acda <RCCEx_PLL3_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
9000acd0:	6823      	ldr	r3, [r4, #0]
9000acd2:	009b      	lsls	r3, r3, #2
9000acd4:	d5f7      	bpl.n	9000acc6 <RCCEx_PLL3_Config+0xc6>
    }

  }


  return status;
9000acd6:	2000      	movs	r0, #0
}
9000acd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
9000acda:	2003      	movs	r0, #3
}
9000acdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
9000acde:	2001      	movs	r0, #1
}
9000ace0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
9000ace2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
9000ace6:	62e3      	str	r3, [r4, #44]	; 0x2c
9000ace8:	e7e4      	b.n	9000acb4 <RCCEx_PLL3_Config+0xb4>
9000acea:	bf00      	nop
9000acec:	58024400 	.word	0x58024400
9000acf0:	ffff0007 	.word	0xffff0007

9000acf4 <HAL_RCCEx_PeriphCLKConfig>:
{
9000acf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
9000acf8:	e9d0 3200 	ldrd	r3, r2, [r0]
{
9000acfc:	4604      	mov	r4, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
9000acfe:	011d      	lsls	r5, r3, #4
9000ad00:	f003 6600 	and.w	r6, r3, #134217728	; 0x8000000
9000ad04:	d523      	bpl.n	9000ad4e <HAL_RCCEx_PeriphCLKConfig+0x5a>
    switch (PeriphClkInit->SpdifrxClockSelection)
9000ad06:	6e81      	ldr	r1, [r0, #104]	; 0x68
9000ad08:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
9000ad0c:	f000 8553 	beq.w	9000b7b6 <HAL_RCCEx_PeriphCLKConfig+0xac2>
9000ad10:	d812      	bhi.n	9000ad38 <HAL_RCCEx_PeriphCLKConfig+0x44>
9000ad12:	2900      	cmp	r1, #0
9000ad14:	f000 85a9 	beq.w	9000b86a <HAL_RCCEx_PeriphCLKConfig+0xb76>
9000ad18:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
9000ad1c:	f040 85a2 	bne.w	9000b864 <HAL_RCCEx_PeriphCLKConfig+0xb70>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
9000ad20:	2102      	movs	r1, #2
9000ad22:	3008      	adds	r0, #8
9000ad24:	f7ff fef2 	bl	9000ab0c <RCCEx_PLL2_Config>
9000ad28:	4606      	mov	r6, r0
    if (ret == HAL_OK)
9000ad2a:	2e00      	cmp	r6, #0
9000ad2c:	f040 8522 	bne.w	9000b774 <HAL_RCCEx_PeriphCLKConfig+0xa80>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
9000ad30:	6ea1      	ldr	r1, [r4, #104]	; 0x68
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
9000ad32:	e9d4 3200 	ldrd	r3, r2, [r4]
9000ad36:	e003      	b.n	9000ad40 <HAL_RCCEx_PeriphCLKConfig+0x4c>
    switch (PeriphClkInit->SpdifrxClockSelection)
9000ad38:	f5b1 1f40 	cmp.w	r1, #3145728	; 0x300000
9000ad3c:	f040 8592 	bne.w	9000b864 <HAL_RCCEx_PeriphCLKConfig+0xb70>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
9000ad40:	4dae      	ldr	r5, [pc, #696]	; (9000affc <HAL_RCCEx_PeriphCLKConfig+0x308>)
9000ad42:	2600      	movs	r6, #0
9000ad44:	6d28      	ldr	r0, [r5, #80]	; 0x50
9000ad46:	f420 1040 	bic.w	r0, r0, #3145728	; 0x300000
9000ad4a:	4301      	orrs	r1, r0
9000ad4c:	6529      	str	r1, [r5, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
9000ad4e:	05d8      	lsls	r0, r3, #23
9000ad50:	d50a      	bpl.n	9000ad68 <HAL_RCCEx_PeriphCLKConfig+0x74>
    switch (PeriphClkInit->Sai1ClockSelection)
9000ad52:	6da1      	ldr	r1, [r4, #88]	; 0x58
9000ad54:	2904      	cmp	r1, #4
9000ad56:	d806      	bhi.n	9000ad66 <HAL_RCCEx_PeriphCLKConfig+0x72>
9000ad58:	e8df f011 	tbh	[pc, r1, lsl #1]
9000ad5c:	053d0536 	.word	0x053d0536
9000ad60:	0323051a 	.word	0x0323051a
9000ad64:	0323      	.short	0x0323
9000ad66:	2601      	movs	r6, #1
9000ad68:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
9000ad6a:	0599      	lsls	r1, r3, #22
9000ad6c:	d51d      	bpl.n	9000adaa <HAL_RCCEx_PeriphCLKConfig+0xb6>
    switch (PeriphClkInit->Sai23ClockSelection)
9000ad6e:	6de1      	ldr	r1, [r4, #92]	; 0x5c
9000ad70:	2980      	cmp	r1, #128	; 0x80
9000ad72:	f000 8516 	beq.w	9000b7a2 <HAL_RCCEx_PeriphCLKConfig+0xaae>
9000ad76:	f200 80f9 	bhi.w	9000af6c <HAL_RCCEx_PeriphCLKConfig+0x278>
9000ad7a:	2900      	cmp	r1, #0
9000ad7c:	f000 8433 	beq.w	9000b5e6 <HAL_RCCEx_PeriphCLKConfig+0x8f2>
9000ad80:	2940      	cmp	r1, #64	; 0x40
9000ad82:	f040 80fa 	bne.w	9000af7a <HAL_RCCEx_PeriphCLKConfig+0x286>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
9000ad86:	2100      	movs	r1, #0
9000ad88:	f104 0008 	add.w	r0, r4, #8
9000ad8c:	f7ff febe 	bl	9000ab0c <RCCEx_PLL2_Config>
9000ad90:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
9000ad92:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000ad96:	2d00      	cmp	r5, #0
9000ad98:	f040 83fe 	bne.w	9000b598 <HAL_RCCEx_PeriphCLKConfig+0x8a4>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
9000ad9c:	4f97      	ldr	r7, [pc, #604]	; (9000affc <HAL_RCCEx_PeriphCLKConfig+0x308>)
9000ad9e:	6de0      	ldr	r0, [r4, #92]	; 0x5c
9000ada0:	6d39      	ldr	r1, [r7, #80]	; 0x50
9000ada2:	f421 71e0 	bic.w	r1, r1, #448	; 0x1c0
9000ada6:	4301      	orrs	r1, r0
9000ada8:	6539      	str	r1, [r7, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
9000adaa:	055f      	lsls	r7, r3, #21
9000adac:	d521      	bpl.n	9000adf2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    switch (PeriphClkInit->Sai4AClockSelection)
9000adae:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
9000adb2:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
9000adb6:	f000 8521 	beq.w	9000b7fc <HAL_RCCEx_PeriphCLKConfig+0xb08>
9000adba:	f200 80e1 	bhi.w	9000af80 <HAL_RCCEx_PeriphCLKConfig+0x28c>
9000adbe:	2900      	cmp	r1, #0
9000adc0:	f000 8418 	beq.w	9000b5f4 <HAL_RCCEx_PeriphCLKConfig+0x900>
9000adc4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
9000adc8:	f040 80e2 	bne.w	9000af90 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
9000adcc:	2100      	movs	r1, #0
9000adce:	f104 0008 	add.w	r0, r4, #8
9000add2:	f7ff fe9b 	bl	9000ab0c <RCCEx_PLL2_Config>
9000add6:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
9000add8:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000addc:	2d00      	cmp	r5, #0
9000adde:	f040 83e2 	bne.w	9000b5a6 <HAL_RCCEx_PeriphCLKConfig+0x8b2>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
9000ade2:	4f86      	ldr	r7, [pc, #536]	; (9000affc <HAL_RCCEx_PeriphCLKConfig+0x308>)
9000ade4:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
9000ade8:	6db9      	ldr	r1, [r7, #88]	; 0x58
9000adea:	f421 0160 	bic.w	r1, r1, #14680064	; 0xe00000
9000adee:	4301      	orrs	r1, r0
9000adf0:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
9000adf2:	0518      	lsls	r0, r3, #20
9000adf4:	d521      	bpl.n	9000ae3a <HAL_RCCEx_PeriphCLKConfig+0x146>
    switch (PeriphClkInit->Sai4BClockSelection)
9000adf6:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
9000adfa:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
9000adfe:	f000 84bd 	beq.w	9000b77c <HAL_RCCEx_PeriphCLKConfig+0xa88>
9000ae02:	f200 80c8 	bhi.w	9000af96 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
9000ae06:	2900      	cmp	r1, #0
9000ae08:	f000 83e7 	beq.w	9000b5da <HAL_RCCEx_PeriphCLKConfig+0x8e6>
9000ae0c:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
9000ae10:	f040 80c9 	bne.w	9000afa6 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
9000ae14:	2100      	movs	r1, #0
9000ae16:	f104 0008 	add.w	r0, r4, #8
9000ae1a:	f7ff fe77 	bl	9000ab0c <RCCEx_PLL2_Config>
9000ae1e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
9000ae20:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000ae24:	2d00      	cmp	r5, #0
9000ae26:	f040 83b5 	bne.w	9000b594 <HAL_RCCEx_PeriphCLKConfig+0x8a0>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
9000ae2a:	4f74      	ldr	r7, [pc, #464]	; (9000affc <HAL_RCCEx_PeriphCLKConfig+0x308>)
9000ae2c:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
9000ae30:	6db9      	ldr	r1, [r7, #88]	; 0x58
9000ae32:	f021 61e0 	bic.w	r1, r1, #117440512	; 0x7000000
9000ae36:	4301      	orrs	r1, r0
9000ae38:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
9000ae3a:	0199      	lsls	r1, r3, #6
9000ae3c:	d518      	bpl.n	9000ae70 <HAL_RCCEx_PeriphCLKConfig+0x17c>
    switch (PeriphClkInit->QspiClockSelection)
9000ae3e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
9000ae40:	2920      	cmp	r1, #32
9000ae42:	f000 841f 	beq.w	9000b684 <HAL_RCCEx_PeriphCLKConfig+0x990>
9000ae46:	f200 80b1 	bhi.w	9000afac <HAL_RCCEx_PeriphCLKConfig+0x2b8>
9000ae4a:	b139      	cbz	r1, 9000ae5c <HAL_RCCEx_PeriphCLKConfig+0x168>
9000ae4c:	2910      	cmp	r1, #16
9000ae4e:	f040 80b0 	bne.w	9000afb2 <HAL_RCCEx_PeriphCLKConfig+0x2be>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000ae52:	486a      	ldr	r0, [pc, #424]	; (9000affc <HAL_RCCEx_PeriphCLKConfig+0x308>)
9000ae54:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
9000ae56:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
9000ae5a:	62c1      	str	r1, [r0, #44]	; 0x2c
    if (ret == HAL_OK)
9000ae5c:	2d00      	cmp	r5, #0
9000ae5e:	f040 83d8 	bne.w	9000b612 <HAL_RCCEx_PeriphCLKConfig+0x91e>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
9000ae62:	4f66      	ldr	r7, [pc, #408]	; (9000affc <HAL_RCCEx_PeriphCLKConfig+0x308>)
9000ae64:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
9000ae66:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
9000ae68:	f021 0130 	bic.w	r1, r1, #48	; 0x30
9000ae6c:	4301      	orrs	r1, r0
9000ae6e:	64f9      	str	r1, [r7, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
9000ae70:	04df      	lsls	r7, r3, #19
9000ae72:	d51f      	bpl.n	9000aeb4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    switch (PeriphClkInit->Spi123ClockSelection)
9000ae74:	6e21      	ldr	r1, [r4, #96]	; 0x60
9000ae76:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
9000ae7a:	f000 84b5 	beq.w	9000b7e8 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
9000ae7e:	f200 809b 	bhi.w	9000afb8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
9000ae82:	2900      	cmp	r1, #0
9000ae84:	f000 83a3 	beq.w	9000b5ce <HAL_RCCEx_PeriphCLKConfig+0x8da>
9000ae88:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
9000ae8c:	f040 809c 	bne.w	9000afc8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
9000ae90:	2100      	movs	r1, #0
9000ae92:	f104 0008 	add.w	r0, r4, #8
9000ae96:	f7ff fe39 	bl	9000ab0c <RCCEx_PLL2_Config>
9000ae9a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
9000ae9c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000aea0:	2d00      	cmp	r5, #0
9000aea2:	f040 837b 	bne.w	9000b59c <HAL_RCCEx_PeriphCLKConfig+0x8a8>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
9000aea6:	4f55      	ldr	r7, [pc, #340]	; (9000affc <HAL_RCCEx_PeriphCLKConfig+0x308>)
9000aea8:	6e20      	ldr	r0, [r4, #96]	; 0x60
9000aeaa:	6d39      	ldr	r1, [r7, #80]	; 0x50
9000aeac:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
9000aeb0:	4301      	orrs	r1, r0
9000aeb2:	6539      	str	r1, [r7, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
9000aeb4:	0498      	lsls	r0, r3, #18
9000aeb6:	d51d      	bpl.n	9000aef4 <HAL_RCCEx_PeriphCLKConfig+0x200>
    switch (PeriphClkInit->Spi45ClockSelection)
9000aeb8:	6e61      	ldr	r1, [r4, #100]	; 0x64
9000aeba:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
9000aebe:	f000 8410 	beq.w	9000b6e2 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
9000aec2:	f200 8084 	bhi.w	9000afce <HAL_RCCEx_PeriphCLKConfig+0x2da>
9000aec6:	b159      	cbz	r1, 9000aee0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
9000aec8:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
9000aecc:	f040 8087 	bne.w	9000afde <HAL_RCCEx_PeriphCLKConfig+0x2ea>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
9000aed0:	2101      	movs	r1, #1
9000aed2:	f104 0008 	add.w	r0, r4, #8
9000aed6:	f7ff fe19 	bl	9000ab0c <RCCEx_PLL2_Config>
9000aeda:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
9000aedc:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000aee0:	2d00      	cmp	r5, #0
9000aee2:	f040 839a 	bne.w	9000b61a <HAL_RCCEx_PeriphCLKConfig+0x926>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
9000aee6:	4f45      	ldr	r7, [pc, #276]	; (9000affc <HAL_RCCEx_PeriphCLKConfig+0x308>)
9000aee8:	6e60      	ldr	r0, [r4, #100]	; 0x64
9000aeea:	6d39      	ldr	r1, [r7, #80]	; 0x50
9000aeec:	f421 21e0 	bic.w	r1, r1, #458752	; 0x70000
9000aef0:	4301      	orrs	r1, r0
9000aef2:	6539      	str	r1, [r7, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
9000aef4:	0459      	lsls	r1, r3, #17
9000aef6:	d51d      	bpl.n	9000af34 <HAL_RCCEx_PeriphCLKConfig+0x240>
    switch (PeriphClkInit->Spi6ClockSelection)
9000aef8:	f8d4 10b0 	ldr.w	r1, [r4, #176]	; 0xb0
9000aefc:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
9000af00:	f000 83fb 	beq.w	9000b6fa <HAL_RCCEx_PeriphCLKConfig+0xa06>
9000af04:	d86e      	bhi.n	9000afe4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
9000af06:	b151      	cbz	r1, 9000af1e <HAL_RCCEx_PeriphCLKConfig+0x22a>
9000af08:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
9000af0c:	d172      	bne.n	9000aff4 <HAL_RCCEx_PeriphCLKConfig+0x300>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
9000af0e:	2101      	movs	r1, #1
9000af10:	f104 0008 	add.w	r0, r4, #8
9000af14:	f7ff fdfa 	bl	9000ab0c <RCCEx_PLL2_Config>
9000af18:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
9000af1a:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000af1e:	2d00      	cmp	r5, #0
9000af20:	f040 837f 	bne.w	9000b622 <HAL_RCCEx_PeriphCLKConfig+0x92e>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
9000af24:	4f35      	ldr	r7, [pc, #212]	; (9000affc <HAL_RCCEx_PeriphCLKConfig+0x308>)
9000af26:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
9000af2a:	6db9      	ldr	r1, [r7, #88]	; 0x58
9000af2c:	f021 41e0 	bic.w	r1, r1, #1879048192	; 0x70000000
9000af30:	4301      	orrs	r1, r0
9000af32:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
9000af34:	041f      	lsls	r7, r3, #16
9000af36:	d50d      	bpl.n	9000af54 <HAL_RCCEx_PeriphCLKConfig+0x260>
    switch (PeriphClkInit->FdcanClockSelection)
9000af38:	6f21      	ldr	r1, [r4, #112]	; 0x70
9000af3a:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
9000af3e:	f000 83c8 	beq.w	9000b6d2 <HAL_RCCEx_PeriphCLKConfig+0x9de>
9000af42:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
9000af46:	f000 823b 	beq.w	9000b3c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
9000af4a:	2900      	cmp	r1, #0
9000af4c:	f000 8240 	beq.w	9000b3d0 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
9000af50:	2601      	movs	r6, #1
9000af52:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
9000af54:	01d8      	lsls	r0, r3, #7
9000af56:	d562      	bpl.n	9000b01e <HAL_RCCEx_PeriphCLKConfig+0x32a>
    switch (PeriphClkInit->FmcClockSelection)
9000af58:	6ca1      	ldr	r1, [r4, #72]	; 0x48
9000af5a:	2903      	cmp	r1, #3
9000af5c:	f200 84bf 	bhi.w	9000b8de <HAL_RCCEx_PeriphCLKConfig+0xbea>
9000af60:	e8df f011 	tbh	[pc, r1, lsl #1]
9000af64:	004e0053 	.word	0x004e0053
9000af68:	005303e2 	.word	0x005303e2
    switch (PeriphClkInit->Sai23ClockSelection)
9000af6c:	29c0      	cmp	r1, #192	; 0xc0
9000af6e:	f43f af12 	beq.w	9000ad96 <HAL_RCCEx_PeriphCLKConfig+0xa2>
9000af72:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
9000af76:	f43f af0e 	beq.w	9000ad96 <HAL_RCCEx_PeriphCLKConfig+0xa2>
9000af7a:	2601      	movs	r6, #1
9000af7c:	4635      	mov	r5, r6
9000af7e:	e714      	b.n	9000adaa <HAL_RCCEx_PeriphCLKConfig+0xb6>
    switch (PeriphClkInit->Sai4AClockSelection)
9000af80:	f5b1 0fc0 	cmp.w	r1, #6291456	; 0x600000
9000af84:	f43f af2a 	beq.w	9000addc <HAL_RCCEx_PeriphCLKConfig+0xe8>
9000af88:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
9000af8c:	f43f af26 	beq.w	9000addc <HAL_RCCEx_PeriphCLKConfig+0xe8>
9000af90:	2601      	movs	r6, #1
9000af92:	4635      	mov	r5, r6
9000af94:	e72d      	b.n	9000adf2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    switch (PeriphClkInit->Sai4BClockSelection)
9000af96:	f1b1 7f40 	cmp.w	r1, #50331648	; 0x3000000
9000af9a:	f43f af43 	beq.w	9000ae24 <HAL_RCCEx_PeriphCLKConfig+0x130>
9000af9e:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
9000afa2:	f43f af3f 	beq.w	9000ae24 <HAL_RCCEx_PeriphCLKConfig+0x130>
9000afa6:	2601      	movs	r6, #1
9000afa8:	4635      	mov	r5, r6
9000afaa:	e746      	b.n	9000ae3a <HAL_RCCEx_PeriphCLKConfig+0x146>
    switch (PeriphClkInit->QspiClockSelection)
9000afac:	2930      	cmp	r1, #48	; 0x30
9000afae:	f43f af55 	beq.w	9000ae5c <HAL_RCCEx_PeriphCLKConfig+0x168>
9000afb2:	2601      	movs	r6, #1
9000afb4:	4635      	mov	r5, r6
9000afb6:	e75b      	b.n	9000ae70 <HAL_RCCEx_PeriphCLKConfig+0x17c>
    switch (PeriphClkInit->Spi123ClockSelection)
9000afb8:	f5b1 5f40 	cmp.w	r1, #12288	; 0x3000
9000afbc:	f43f af70 	beq.w	9000aea0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
9000afc0:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
9000afc4:	f43f af6c 	beq.w	9000aea0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
9000afc8:	2601      	movs	r6, #1
9000afca:	4635      	mov	r5, r6
9000afcc:	e772      	b.n	9000aeb4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    switch (PeriphClkInit->Spi45ClockSelection)
9000afce:	f421 3080 	bic.w	r0, r1, #65536	; 0x10000
9000afd2:	f5b0 2f80 	cmp.w	r0, #262144	; 0x40000
9000afd6:	d083      	beq.n	9000aee0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
9000afd8:	f5b1 3f40 	cmp.w	r1, #196608	; 0x30000
9000afdc:	d080      	beq.n	9000aee0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
9000afde:	2601      	movs	r6, #1
9000afe0:	4635      	mov	r5, r6
9000afe2:	e787      	b.n	9000aef4 <HAL_RCCEx_PeriphCLKConfig+0x200>
    switch (PeriphClkInit->Spi6ClockSelection)
9000afe4:	f021 5080 	bic.w	r0, r1, #268435456	; 0x10000000
9000afe8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
9000afec:	d097      	beq.n	9000af1e <HAL_RCCEx_PeriphCLKConfig+0x22a>
9000afee:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
9000aff2:	d094      	beq.n	9000af1e <HAL_RCCEx_PeriphCLKConfig+0x22a>
9000aff4:	2601      	movs	r6, #1
9000aff6:	4635      	mov	r5, r6
9000aff8:	e79c      	b.n	9000af34 <HAL_RCCEx_PeriphCLKConfig+0x240>
9000affa:	bf00      	nop
9000affc:	58024400 	.word	0x58024400
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000b000:	4839      	ldr	r0, [pc, #228]	; (9000b0e8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
9000b002:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
9000b004:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
9000b008:	62c1      	str	r1, [r0, #44]	; 0x2c
    if (ret == HAL_OK)
9000b00a:	2d00      	cmp	r5, #0
9000b00c:	f040 8303 	bne.w	9000b616 <HAL_RCCEx_PeriphCLKConfig+0x922>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
9000b010:	4f35      	ldr	r7, [pc, #212]	; (9000b0e8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
9000b012:	6ca0      	ldr	r0, [r4, #72]	; 0x48
9000b014:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
9000b016:	f021 0103 	bic.w	r1, r1, #3
9000b01a:	4301      	orrs	r1, r0
9000b01c:	64f9      	str	r1, [r7, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
9000b01e:	0259      	lsls	r1, r3, #9
9000b020:	f100 826a 	bmi.w	9000b4f8 <HAL_RCCEx_PeriphCLKConfig+0x804>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
9000b024:	07d8      	lsls	r0, r3, #31
9000b026:	d52f      	bpl.n	9000b088 <HAL_RCCEx_PeriphCLKConfig+0x394>
    switch (PeriphClkInit->Usart16ClockSelection)
9000b028:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
9000b02a:	2928      	cmp	r1, #40	; 0x28
9000b02c:	d82a      	bhi.n	9000b084 <HAL_RCCEx_PeriphCLKConfig+0x390>
9000b02e:	e8df f011 	tbh	[pc, r1, lsl #1]
9000b032:	020a      	.short	0x020a
9000b034:	00290029 	.word	0x00290029
9000b038:	00290029 	.word	0x00290029
9000b03c:	00290029 	.word	0x00290029
9000b040:	02020029 	.word	0x02020029
9000b044:	00290029 	.word	0x00290029
9000b048:	00290029 	.word	0x00290029
9000b04c:	00290029 	.word	0x00290029
9000b050:	04070029 	.word	0x04070029
9000b054:	00290029 	.word	0x00290029
9000b058:	00290029 	.word	0x00290029
9000b05c:	00290029 	.word	0x00290029
9000b060:	020a0029 	.word	0x020a0029
9000b064:	00290029 	.word	0x00290029
9000b068:	00290029 	.word	0x00290029
9000b06c:	00290029 	.word	0x00290029
9000b070:	020a0029 	.word	0x020a0029
9000b074:	00290029 	.word	0x00290029
9000b078:	00290029 	.word	0x00290029
9000b07c:	00290029 	.word	0x00290029
9000b080:	020a0029 	.word	0x020a0029
9000b084:	2601      	movs	r6, #1
9000b086:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
9000b088:	0799      	lsls	r1, r3, #30
9000b08a:	d51d      	bpl.n	9000b0c8 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
    switch (PeriphClkInit->Usart234578ClockSelection)
9000b08c:	6fa1      	ldr	r1, [r4, #120]	; 0x78
9000b08e:	2905      	cmp	r1, #5
9000b090:	f200 8421 	bhi.w	9000b8d6 <HAL_RCCEx_PeriphCLKConfig+0xbe2>
9000b094:	e8df f011 	tbh	[pc, r1, lsl #1]
9000b098:	0006000e 	.word	0x0006000e
9000b09c:	000e03c8 	.word	0x000e03c8
9000b0a0:	000e000e 	.word	0x000e000e
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
9000b0a4:	2101      	movs	r1, #1
9000b0a6:	f104 0008 	add.w	r0, r4, #8
9000b0aa:	f7ff fd2f 	bl	9000ab0c <RCCEx_PLL2_Config>
9000b0ae:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
9000b0b0:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000b0b4:	2d00      	cmp	r5, #0
9000b0b6:	f040 82b8 	bne.w	9000b62a <HAL_RCCEx_PeriphCLKConfig+0x936>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
9000b0ba:	4f0b      	ldr	r7, [pc, #44]	; (9000b0e8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
9000b0bc:	6fa0      	ldr	r0, [r4, #120]	; 0x78
9000b0be:	6d79      	ldr	r1, [r7, #84]	; 0x54
9000b0c0:	f021 0107 	bic.w	r1, r1, #7
9000b0c4:	4301      	orrs	r1, r0
9000b0c6:	6579      	str	r1, [r7, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
9000b0c8:	075f      	lsls	r7, r3, #29
9000b0ca:	d522      	bpl.n	9000b112 <HAL_RCCEx_PeriphCLKConfig+0x41e>
    switch (PeriphClkInit->Lpuart1ClockSelection)
9000b0cc:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
9000b0d0:	2905      	cmp	r1, #5
9000b0d2:	f200 8408 	bhi.w	9000b8e6 <HAL_RCCEx_PeriphCLKConfig+0xbf2>
9000b0d6:	e8df f011 	tbh	[pc, r1, lsl #1]
9000b0da:	0011      	.short	0x0011
9000b0dc:	039b0009 	.word	0x039b0009
9000b0e0:	00110011 	.word	0x00110011
9000b0e4:	0011      	.short	0x0011
9000b0e6:	bf00      	nop
9000b0e8:	58024400 	.word	0x58024400
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
9000b0ec:	2101      	movs	r1, #1
9000b0ee:	f104 0008 	add.w	r0, r4, #8
9000b0f2:	f7ff fd0b 	bl	9000ab0c <RCCEx_PLL2_Config>
9000b0f6:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
9000b0f8:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000b0fc:	2d00      	cmp	r5, #0
9000b0fe:	f040 8286 	bne.w	9000b60e <HAL_RCCEx_PeriphCLKConfig+0x91a>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
9000b102:	4fae      	ldr	r7, [pc, #696]	; (9000b3bc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
9000b104:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
9000b108:	6db9      	ldr	r1, [r7, #88]	; 0x58
9000b10a:	f021 0107 	bic.w	r1, r1, #7
9000b10e:	4301      	orrs	r1, r0
9000b110:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
9000b112:	0698      	lsls	r0, r3, #26
9000b114:	d51f      	bpl.n	9000b156 <HAL_RCCEx_PeriphCLKConfig+0x462>
    switch (PeriphClkInit->Lptim1ClockSelection)
9000b116:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
9000b11a:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
9000b11e:	f000 82f7 	beq.w	9000b710 <HAL_RCCEx_PeriphCLKConfig+0xa1c>
9000b122:	f200 810b 	bhi.w	9000b33c <HAL_RCCEx_PeriphCLKConfig+0x648>
9000b126:	b159      	cbz	r1, 9000b140 <HAL_RCCEx_PeriphCLKConfig+0x44c>
9000b128:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
9000b12c:	f040 8110 	bne.w	9000b350 <HAL_RCCEx_PeriphCLKConfig+0x65c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
9000b130:	2100      	movs	r1, #0
9000b132:	f104 0008 	add.w	r0, r4, #8
9000b136:	f7ff fce9 	bl	9000ab0c <RCCEx_PLL2_Config>
9000b13a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
9000b13c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000b140:	2d00      	cmp	r5, #0
9000b142:	f040 8260 	bne.w	9000b606 <HAL_RCCEx_PeriphCLKConfig+0x912>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
9000b146:	4f9d      	ldr	r7, [pc, #628]	; (9000b3bc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
9000b148:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
9000b14c:	6d79      	ldr	r1, [r7, #84]	; 0x54
9000b14e:	f021 41e0 	bic.w	r1, r1, #1879048192	; 0x70000000
9000b152:	4301      	orrs	r1, r0
9000b154:	6579      	str	r1, [r7, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
9000b156:	0659      	lsls	r1, r3, #25
9000b158:	d51f      	bpl.n	9000b19a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    switch (PeriphClkInit->Lptim2ClockSelection)
9000b15a:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
9000b15e:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
9000b162:	f000 829b 	beq.w	9000b69c <HAL_RCCEx_PeriphCLKConfig+0x9a8>
9000b166:	f200 80f6 	bhi.w	9000b356 <HAL_RCCEx_PeriphCLKConfig+0x662>
9000b16a:	b159      	cbz	r1, 9000b184 <HAL_RCCEx_PeriphCLKConfig+0x490>
9000b16c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
9000b170:	f040 80fb 	bne.w	9000b36a <HAL_RCCEx_PeriphCLKConfig+0x676>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
9000b174:	2100      	movs	r1, #0
9000b176:	f104 0008 	add.w	r0, r4, #8
9000b17a:	f7ff fcc7 	bl	9000ab0c <RCCEx_PLL2_Config>
9000b17e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
9000b180:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000b184:	2d00      	cmp	r5, #0
9000b186:	f040 824e 	bne.w	9000b626 <HAL_RCCEx_PeriphCLKConfig+0x932>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
9000b18a:	4f8c      	ldr	r7, [pc, #560]	; (9000b3bc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
9000b18c:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
9000b190:	6db9      	ldr	r1, [r7, #88]	; 0x58
9000b192:	f421 51e0 	bic.w	r1, r1, #7168	; 0x1c00
9000b196:	4301      	orrs	r1, r0
9000b198:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
9000b19a:	061f      	lsls	r7, r3, #24
9000b19c:	d51f      	bpl.n	9000b1de <HAL_RCCEx_PeriphCLKConfig+0x4ea>
    switch (PeriphClkInit->Lptim345ClockSelection)
9000b19e:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
9000b1a2:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
9000b1a6:	f000 8289 	beq.w	9000b6bc <HAL_RCCEx_PeriphCLKConfig+0x9c8>
9000b1aa:	f200 80e1 	bhi.w	9000b370 <HAL_RCCEx_PeriphCLKConfig+0x67c>
9000b1ae:	b159      	cbz	r1, 9000b1c8 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
9000b1b0:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
9000b1b4:	f040 80e6 	bne.w	9000b384 <HAL_RCCEx_PeriphCLKConfig+0x690>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
9000b1b8:	2100      	movs	r1, #0
9000b1ba:	f104 0008 	add.w	r0, r4, #8
9000b1be:	f7ff fca5 	bl	9000ab0c <RCCEx_PLL2_Config>
9000b1c2:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
9000b1c4:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000b1c8:	2d00      	cmp	r5, #0
9000b1ca:	f040 8228 	bne.w	9000b61e <HAL_RCCEx_PeriphCLKConfig+0x92a>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
9000b1ce:	4f7b      	ldr	r7, [pc, #492]	; (9000b3bc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
9000b1d0:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
9000b1d4:	6db9      	ldr	r1, [r7, #88]	; 0x58
9000b1d6:	f421 4160 	bic.w	r1, r1, #57344	; 0xe000
9000b1da:	4301      	orrs	r1, r0
9000b1dc:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
9000b1de:	0718      	lsls	r0, r3, #28
9000b1e0:	d50b      	bpl.n	9000b1fa <HAL_RCCEx_PeriphCLKConfig+0x506>
    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
9000b1e2:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
9000b1e6:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
9000b1ea:	f000 82a9 	beq.w	9000b740 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
9000b1ee:	4f73      	ldr	r7, [pc, #460]	; (9000b3bc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
9000b1f0:	6d79      	ldr	r1, [r7, #84]	; 0x54
9000b1f2:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
9000b1f6:	4301      	orrs	r1, r0
9000b1f8:	6579      	str	r1, [r7, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
9000b1fa:	06d9      	lsls	r1, r3, #27
9000b1fc:	d50b      	bpl.n	9000b216 <HAL_RCCEx_PeriphCLKConfig+0x522>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
9000b1fe:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
9000b202:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
9000b206:	f000 82a8 	beq.w	9000b75a <HAL_RCCEx_PeriphCLKConfig+0xa66>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
9000b20a:	4f6c      	ldr	r7, [pc, #432]	; (9000b3bc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
9000b20c:	6db9      	ldr	r1, [r7, #88]	; 0x58
9000b20e:	f421 7140 	bic.w	r1, r1, #768	; 0x300
9000b212:	4301      	orrs	r1, r0
9000b214:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
9000b216:	031f      	lsls	r7, r3, #12
9000b218:	d50e      	bpl.n	9000b238 <HAL_RCCEx_PeriphCLKConfig+0x544>
    switch (PeriphClkInit->AdcClockSelection)
9000b21a:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
9000b21e:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
9000b222:	f000 80f4 	beq.w	9000b40e <HAL_RCCEx_PeriphCLKConfig+0x71a>
9000b226:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
9000b22a:	f000 80f8 	beq.w	9000b41e <HAL_RCCEx_PeriphCLKConfig+0x72a>
9000b22e:	2900      	cmp	r1, #0
9000b230:	f000 821c 	beq.w	9000b66c <HAL_RCCEx_PeriphCLKConfig+0x978>
9000b234:	2601      	movs	r6, #1
9000b236:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
9000b238:	0358      	lsls	r0, r3, #13
9000b23a:	d50f      	bpl.n	9000b25c <HAL_RCCEx_PeriphCLKConfig+0x568>
    switch (PeriphClkInit->UsbClockSelection)
9000b23c:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
9000b240:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
9000b244:	f000 80cf 	beq.w	9000b3e6 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
9000b248:	f5b1 1f40 	cmp.w	r1, #3145728	; 0x300000
9000b24c:	f000 80d3 	beq.w	9000b3f6 <HAL_RCCEx_PeriphCLKConfig+0x702>
9000b250:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
9000b254:	f000 8202 	beq.w	9000b65c <HAL_RCCEx_PeriphCLKConfig+0x968>
9000b258:	2601      	movs	r6, #1
9000b25a:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
9000b25c:	03d9      	lsls	r1, r3, #15
9000b25e:	d509      	bpl.n	9000b274 <HAL_RCCEx_PeriphCLKConfig+0x580>
    switch (PeriphClkInit->SdmmcClockSelection)
9000b260:	6d21      	ldr	r1, [r4, #80]	; 0x50
9000b262:	2900      	cmp	r1, #0
9000b264:	f000 81f1 	beq.w	9000b64a <HAL_RCCEx_PeriphCLKConfig+0x956>
9000b268:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
9000b26c:	f000 819d 	beq.w	9000b5aa <HAL_RCCEx_PeriphCLKConfig+0x8b6>
9000b270:	2601      	movs	r6, #1
9000b272:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
9000b274:	009f      	lsls	r7, r3, #2
9000b276:	f100 80f1 	bmi.w	9000b45c <HAL_RCCEx_PeriphCLKConfig+0x768>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
9000b27a:	0398      	lsls	r0, r3, #14
9000b27c:	d50c      	bpl.n	9000b298 <HAL_RCCEx_PeriphCLKConfig+0x5a4>
    switch (PeriphClkInit->RngClockSelection)
9000b27e:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
9000b282:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
9000b286:	f000 81d8 	beq.w	9000b63a <HAL_RCCEx_PeriphCLKConfig+0x946>
9000b28a:	d97e      	bls.n	9000b38a <HAL_RCCEx_PeriphCLKConfig+0x696>
9000b28c:	f421 7080 	bic.w	r0, r1, #256	; 0x100
9000b290:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
9000b294:	d07b      	beq.n	9000b38e <HAL_RCCEx_PeriphCLKConfig+0x69a>
9000b296:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
9000b298:	02d9      	lsls	r1, r3, #11
9000b29a:	d506      	bpl.n	9000b2aa <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
9000b29c:	4847      	ldr	r0, [pc, #284]	; (9000b3bc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
9000b29e:	6f65      	ldr	r5, [r4, #116]	; 0x74
9000b2a0:	6d01      	ldr	r1, [r0, #80]	; 0x50
9000b2a2:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
9000b2a6:	4329      	orrs	r1, r5
9000b2a8:	6501      	str	r1, [r0, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
9000b2aa:	00df      	lsls	r7, r3, #3
9000b2ac:	d507      	bpl.n	9000b2be <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
9000b2ae:	4843      	ldr	r0, [pc, #268]	; (9000b3bc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
9000b2b0:	f8d4 50b8 	ldr.w	r5, [r4, #184]	; 0xb8
9000b2b4:	6901      	ldr	r1, [r0, #16]
9000b2b6:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
9000b2ba:	4329      	orrs	r1, r5
9000b2bc:	6101      	str	r1, [r0, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
9000b2be:	029d      	lsls	r5, r3, #10
9000b2c0:	d506      	bpl.n	9000b2d0 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
9000b2c2:	483e      	ldr	r0, [pc, #248]	; (9000b3bc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
9000b2c4:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
9000b2c6:	6d01      	ldr	r1, [r0, #80]	; 0x50
9000b2c8:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
9000b2cc:	4329      	orrs	r1, r5
9000b2ce:	6501      	str	r1, [r0, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
9000b2d0:	0058      	lsls	r0, r3, #1
9000b2d2:	d509      	bpl.n	9000b2e8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
9000b2d4:	4939      	ldr	r1, [pc, #228]	; (9000b3bc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
9000b2d6:	6908      	ldr	r0, [r1, #16]
9000b2d8:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
9000b2dc:	6108      	str	r0, [r1, #16]
9000b2de:	6908      	ldr	r0, [r1, #16]
9000b2e0:	f8d4 50bc 	ldr.w	r5, [r4, #188]	; 0xbc
9000b2e4:	4328      	orrs	r0, r5
9000b2e6:	6108      	str	r0, [r1, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
9000b2e8:	2b00      	cmp	r3, #0
9000b2ea:	da06      	bge.n	9000b2fa <HAL_RCCEx_PeriphCLKConfig+0x606>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
9000b2ec:	4833      	ldr	r0, [pc, #204]	; (9000b3bc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
9000b2ee:	6d65      	ldr	r5, [r4, #84]	; 0x54
9000b2f0:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
9000b2f2:	f021 5140 	bic.w	r1, r1, #805306368	; 0x30000000
9000b2f6:	4329      	orrs	r1, r5
9000b2f8:	64c1      	str	r1, [r0, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
9000b2fa:	0219      	lsls	r1, r3, #8
9000b2fc:	d507      	bpl.n	9000b30e <HAL_RCCEx_PeriphCLKConfig+0x61a>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
9000b2fe:	492f      	ldr	r1, [pc, #188]	; (9000b3bc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
9000b300:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
9000b304:	6d4b      	ldr	r3, [r1, #84]	; 0x54
9000b306:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
9000b30a:	4303      	orrs	r3, r0
9000b30c:	654b      	str	r3, [r1, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
9000b30e:	07d3      	lsls	r3, r2, #31
9000b310:	f100 80b0 	bmi.w	9000b474 <HAL_RCCEx_PeriphCLKConfig+0x780>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
9000b314:	0797      	lsls	r7, r2, #30
9000b316:	f100 80ba 	bmi.w	9000b48e <HAL_RCCEx_PeriphCLKConfig+0x79a>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
9000b31a:	0755      	lsls	r5, r2, #29
9000b31c:	f100 80c4 	bmi.w	9000b4a8 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
9000b320:	0710      	lsls	r0, r2, #28
9000b322:	f100 80ce 	bmi.w	9000b4c2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
9000b326:	06d1      	lsls	r1, r2, #27
9000b328:	f100 80d8 	bmi.w	9000b4dc <HAL_RCCEx_PeriphCLKConfig+0x7e8>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
9000b32c:	0692      	lsls	r2, r2, #26
9000b32e:	f100 8125 	bmi.w	9000b57c <HAL_RCCEx_PeriphCLKConfig+0x888>
    return HAL_OK;
9000b332:	1e30      	subs	r0, r6, #0
9000b334:	bf18      	it	ne
9000b336:	2001      	movne	r0, #1
}
9000b338:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch (PeriphClkInit->Lptim1ClockSelection)
9000b33c:	f021 5080 	bic.w	r0, r1, #268435456	; 0x10000000
9000b340:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
9000b344:	f43f aefc 	beq.w	9000b140 <HAL_RCCEx_PeriphCLKConfig+0x44c>
9000b348:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
9000b34c:	f43f aef8 	beq.w	9000b140 <HAL_RCCEx_PeriphCLKConfig+0x44c>
9000b350:	2601      	movs	r6, #1
9000b352:	4635      	mov	r5, r6
9000b354:	e6ff      	b.n	9000b156 <HAL_RCCEx_PeriphCLKConfig+0x462>
    switch (PeriphClkInit->Lptim2ClockSelection)
9000b356:	f421 6080 	bic.w	r0, r1, #1024	; 0x400
9000b35a:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
9000b35e:	f43f af11 	beq.w	9000b184 <HAL_RCCEx_PeriphCLKConfig+0x490>
9000b362:	f5b1 6f40 	cmp.w	r1, #3072	; 0xc00
9000b366:	f43f af0d 	beq.w	9000b184 <HAL_RCCEx_PeriphCLKConfig+0x490>
9000b36a:	2601      	movs	r6, #1
9000b36c:	4635      	mov	r5, r6
9000b36e:	e714      	b.n	9000b19a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    switch (PeriphClkInit->Lptim345ClockSelection)
9000b370:	f421 5000 	bic.w	r0, r1, #8192	; 0x2000
9000b374:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
9000b378:	f43f af26 	beq.w	9000b1c8 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
9000b37c:	f5b1 4fc0 	cmp.w	r1, #24576	; 0x6000
9000b380:	f43f af22 	beq.w	9000b1c8 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
9000b384:	2601      	movs	r6, #1
9000b386:	4635      	mov	r5, r6
9000b388:	e729      	b.n	9000b1de <HAL_RCCEx_PeriphCLKConfig+0x4ea>
    switch (PeriphClkInit->RngClockSelection)
9000b38a:	2900      	cmp	r1, #0
9000b38c:	d183      	bne.n	9000b296 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
    if (ret == HAL_OK)
9000b38e:	2d00      	cmp	r5, #0
9000b390:	f040 8151 	bne.w	9000b636 <HAL_RCCEx_PeriphCLKConfig+0x942>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
9000b394:	4d09      	ldr	r5, [pc, #36]	; (9000b3bc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
9000b396:	6d68      	ldr	r0, [r5, #84]	; 0x54
9000b398:	f420 7040 	bic.w	r0, r0, #768	; 0x300
9000b39c:	4301      	orrs	r1, r0
9000b39e:	6569      	str	r1, [r5, #84]	; 0x54
9000b3a0:	e77a      	b.n	9000b298 <HAL_RCCEx_PeriphCLKConfig+0x5a4>
    switch (PeriphClkInit->Sai1ClockSelection)
9000b3a2:	4635      	mov	r5, r6
    if (ret == HAL_OK)
9000b3a4:	2d00      	cmp	r5, #0
9000b3a6:	f040 80fb 	bne.w	9000b5a0 <HAL_RCCEx_PeriphCLKConfig+0x8ac>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
9000b3aa:	4f04      	ldr	r7, [pc, #16]	; (9000b3bc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
9000b3ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
9000b3ae:	6d39      	ldr	r1, [r7, #80]	; 0x50
9000b3b0:	f021 0107 	bic.w	r1, r1, #7
9000b3b4:	4301      	orrs	r1, r0
9000b3b6:	6539      	str	r1, [r7, #80]	; 0x50
9000b3b8:	e4d7      	b.n	9000ad6a <HAL_RCCEx_PeriphCLKConfig+0x76>
9000b3ba:	bf00      	nop
9000b3bc:	58024400 	.word	0x58024400
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
9000b3c0:	2101      	movs	r1, #1
9000b3c2:	f104 0008 	add.w	r0, r4, #8
9000b3c6:	f7ff fba1 	bl	9000ab0c <RCCEx_PLL2_Config>
9000b3ca:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
9000b3cc:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000b3d0:	2d00      	cmp	r5, #0
9000b3d2:	f040 811a 	bne.w	9000b60a <HAL_RCCEx_PeriphCLKConfig+0x916>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
9000b3d6:	4fb7      	ldr	r7, [pc, #732]	; (9000b6b4 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
9000b3d8:	6f20      	ldr	r0, [r4, #112]	; 0x70
9000b3da:	6d39      	ldr	r1, [r7, #80]	; 0x50
9000b3dc:	f021 5140 	bic.w	r1, r1, #805306368	; 0x30000000
9000b3e0:	4301      	orrs	r1, r0
9000b3e2:	6539      	str	r1, [r7, #80]	; 0x50
9000b3e4:	e5b6      	b.n	9000af54 <HAL_RCCEx_PeriphCLKConfig+0x260>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
9000b3e6:	2101      	movs	r1, #1
9000b3e8:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000b3ec:	f7ff fc08 	bl	9000ac00 <RCCEx_PLL3_Config>
9000b3f0:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
9000b3f2:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000b3f6:	2d00      	cmp	r5, #0
9000b3f8:	f040 811b 	bne.w	9000b632 <HAL_RCCEx_PeriphCLKConfig+0x93e>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
9000b3fc:	4fad      	ldr	r7, [pc, #692]	; (9000b6b4 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
9000b3fe:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
9000b402:	6d79      	ldr	r1, [r7, #84]	; 0x54
9000b404:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
9000b408:	4301      	orrs	r1, r0
9000b40a:	6579      	str	r1, [r7, #84]	; 0x54
9000b40c:	e726      	b.n	9000b25c <HAL_RCCEx_PeriphCLKConfig+0x568>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
9000b40e:	2102      	movs	r1, #2
9000b410:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000b414:	f7ff fbf4 	bl	9000ac00 <RCCEx_PLL3_Config>
9000b418:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
9000b41a:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000b41e:	2d00      	cmp	r5, #0
9000b420:	f040 8105 	bne.w	9000b62e <HAL_RCCEx_PeriphCLKConfig+0x93a>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
9000b424:	4fa3      	ldr	r7, [pc, #652]	; (9000b6b4 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
9000b426:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
9000b42a:	6db9      	ldr	r1, [r7, #88]	; 0x58
9000b42c:	f421 3140 	bic.w	r1, r1, #196608	; 0x30000
9000b430:	4301      	orrs	r1, r0
9000b432:	65b9      	str	r1, [r7, #88]	; 0x58
9000b434:	e700      	b.n	9000b238 <HAL_RCCEx_PeriphCLKConfig+0x544>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
9000b436:	2101      	movs	r1, #1
9000b438:	f104 0008 	add.w	r0, r4, #8
9000b43c:	f7ff fb66 	bl	9000ab0c <RCCEx_PLL2_Config>
9000b440:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
9000b442:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000b446:	2d00      	cmp	r5, #0
9000b448:	f040 80db 	bne.w	9000b602 <HAL_RCCEx_PeriphCLKConfig+0x90e>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
9000b44c:	4f99      	ldr	r7, [pc, #612]	; (9000b6b4 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
9000b44e:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
9000b450:	6d79      	ldr	r1, [r7, #84]	; 0x54
9000b452:	f021 0138 	bic.w	r1, r1, #56	; 0x38
9000b456:	4301      	orrs	r1, r0
9000b458:	6579      	str	r1, [r7, #84]	; 0x54
9000b45a:	e615      	b.n	9000b088 <HAL_RCCEx_PeriphCLKConfig+0x394>
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
9000b45c:	2102      	movs	r1, #2
9000b45e:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000b462:	f7ff fbcd 	bl	9000ac00 <RCCEx_PLL3_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
9000b466:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
9000b46a:	2800      	cmp	r0, #0
9000b46c:	f43f af05 	beq.w	9000b27a <HAL_RCCEx_PeriphCLKConfig+0x586>
      status = HAL_ERROR;
9000b470:	2601      	movs	r6, #1
9000b472:	e702      	b.n	9000b27a <HAL_RCCEx_PeriphCLKConfig+0x586>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
9000b474:	2100      	movs	r1, #0
9000b476:	f104 0008 	add.w	r0, r4, #8
9000b47a:	f7ff fb47 	bl	9000ab0c <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
9000b47e:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
9000b480:	2800      	cmp	r0, #0
9000b482:	f43f af47 	beq.w	9000b314 <HAL_RCCEx_PeriphCLKConfig+0x620>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
9000b486:	0797      	lsls	r7, r2, #30
9000b488:	4606      	mov	r6, r0
9000b48a:	f57f af46 	bpl.w	9000b31a <HAL_RCCEx_PeriphCLKConfig+0x626>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
9000b48e:	2101      	movs	r1, #1
9000b490:	f104 0008 	add.w	r0, r4, #8
9000b494:	f7ff fb3a 	bl	9000ab0c <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
9000b498:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
9000b49a:	2800      	cmp	r0, #0
9000b49c:	f43f af3d 	beq.w	9000b31a <HAL_RCCEx_PeriphCLKConfig+0x626>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
9000b4a0:	0755      	lsls	r5, r2, #29
9000b4a2:	4606      	mov	r6, r0
9000b4a4:	f57f af3c 	bpl.w	9000b320 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
9000b4a8:	2102      	movs	r1, #2
9000b4aa:	f104 0008 	add.w	r0, r4, #8
9000b4ae:	f7ff fb2d 	bl	9000ab0c <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
9000b4b2:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
9000b4b4:	2800      	cmp	r0, #0
9000b4b6:	f43f af33 	beq.w	9000b320 <HAL_RCCEx_PeriphCLKConfig+0x62c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
9000b4ba:	4606      	mov	r6, r0
9000b4bc:	0710      	lsls	r0, r2, #28
9000b4be:	f57f af32 	bpl.w	9000b326 <HAL_RCCEx_PeriphCLKConfig+0x632>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
9000b4c2:	2100      	movs	r1, #0
9000b4c4:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000b4c8:	f7ff fb9a 	bl	9000ac00 <RCCEx_PLL3_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
9000b4cc:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
9000b4ce:	2800      	cmp	r0, #0
9000b4d0:	f43f af29 	beq.w	9000b326 <HAL_RCCEx_PeriphCLKConfig+0x632>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
9000b4d4:	06d1      	lsls	r1, r2, #27
9000b4d6:	4606      	mov	r6, r0
9000b4d8:	f57f af28 	bpl.w	9000b32c <HAL_RCCEx_PeriphCLKConfig+0x638>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
9000b4dc:	f104 0528 	add.w	r5, r4, #40	; 0x28
9000b4e0:	2101      	movs	r1, #1
9000b4e2:	4628      	mov	r0, r5
9000b4e4:	f7ff fb8c 	bl	9000ac00 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
9000b4e8:	2800      	cmp	r0, #0
9000b4ea:	f000 80c9 	beq.w	9000b680 <HAL_RCCEx_PeriphCLKConfig+0x98c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
9000b4ee:	6863      	ldr	r3, [r4, #4]
9000b4f0:	069b      	lsls	r3, r3, #26
9000b4f2:	d54c      	bpl.n	9000b58e <HAL_RCCEx_PeriphCLKConfig+0x89a>
9000b4f4:	4606      	mov	r6, r0
9000b4f6:	e043      	b.n	9000b580 <HAL_RCCEx_PeriphCLKConfig+0x88c>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
9000b4f8:	4f6f      	ldr	r7, [pc, #444]	; (9000b6b8 <HAL_RCCEx_PeriphCLKConfig+0x9c4>)
9000b4fa:	683b      	ldr	r3, [r7, #0]
9000b4fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
9000b500:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
9000b502:	f7fa fe5b 	bl	900061bc <HAL_GetTick>
9000b506:	4680      	mov	r8, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
9000b508:	e006      	b.n	9000b518 <HAL_RCCEx_PeriphCLKConfig+0x824>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
9000b50a:	f7fa fe57 	bl	900061bc <HAL_GetTick>
9000b50e:	eba0 0008 	sub.w	r0, r0, r8
9000b512:	2864      	cmp	r0, #100	; 0x64
9000b514:	f200 81a0 	bhi.w	9000b858 <HAL_RCCEx_PeriphCLKConfig+0xb64>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
9000b518:	683b      	ldr	r3, [r7, #0]
9000b51a:	05da      	lsls	r2, r3, #23
9000b51c:	d5f5      	bpl.n	9000b50a <HAL_RCCEx_PeriphCLKConfig+0x816>
    if (ret == HAL_OK)
9000b51e:	2d00      	cmp	r5, #0
9000b520:	f040 81d4 	bne.w	9000b8cc <HAL_RCCEx_PeriphCLKConfig+0xbd8>
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
9000b524:	4a63      	ldr	r2, [pc, #396]	; (9000b6b4 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
9000b526:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
9000b52a:	6f11      	ldr	r1, [r2, #112]	; 0x70
9000b52c:	4059      	eors	r1, r3
9000b52e:	f411 7f40 	tst.w	r1, #768	; 0x300
9000b532:	d00b      	beq.n	9000b54c <HAL_RCCEx_PeriphCLKConfig+0x858>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
9000b534:	6f11      	ldr	r1, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
9000b536:	6f10      	ldr	r0, [r2, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
9000b538:	f421 7140 	bic.w	r1, r1, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
9000b53c:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
9000b540:	6710      	str	r0, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
9000b542:	6f10      	ldr	r0, [r2, #112]	; 0x70
9000b544:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
9000b548:	6710      	str	r0, [r2, #112]	; 0x70
        RCC->BDCR = tmpreg;
9000b54a:	6711      	str	r1, [r2, #112]	; 0x70
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
9000b54c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
9000b550:	f000 819e 	beq.w	9000b890 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
9000b554:	f403 7240 	and.w	r2, r3, #768	; 0x300
9000b558:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
9000b55c:	f000 81ac 	beq.w	9000b8b8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>
9000b560:	4954      	ldr	r1, [pc, #336]	; (9000b6b4 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
9000b562:	690a      	ldr	r2, [r1, #16]
9000b564:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
9000b568:	610a      	str	r2, [r1, #16]
9000b56a:	4852      	ldr	r0, [pc, #328]	; (9000b6b4 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
9000b56c:	f3c3 010b 	ubfx	r1, r3, #0, #12
9000b570:	6f07      	ldr	r7, [r0, #112]	; 0x70
9000b572:	4339      	orrs	r1, r7
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
9000b574:	e9d4 3200 	ldrd	r3, r2, [r4]
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
9000b578:	6701      	str	r1, [r0, #112]	; 0x70
9000b57a:	e553      	b.n	9000b024 <HAL_RCCEx_PeriphCLKConfig+0x330>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
9000b57c:	f104 0528 	add.w	r5, r4, #40	; 0x28
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
9000b580:	2102      	movs	r1, #2
9000b582:	4628      	mov	r0, r5
9000b584:	f7ff fb3c 	bl	9000ac00 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
9000b588:	2800      	cmp	r0, #0
9000b58a:	f43f aed2 	beq.w	9000b332 <HAL_RCCEx_PeriphCLKConfig+0x63e>
  return HAL_ERROR;
9000b58e:	2001      	movs	r0, #1
}
9000b590:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
9000b594:	462e      	mov	r6, r5
9000b596:	e450      	b.n	9000ae3a <HAL_RCCEx_PeriphCLKConfig+0x146>
9000b598:	462e      	mov	r6, r5
9000b59a:	e406      	b.n	9000adaa <HAL_RCCEx_PeriphCLKConfig+0xb6>
9000b59c:	462e      	mov	r6, r5
9000b59e:	e489      	b.n	9000aeb4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
9000b5a0:	462e      	mov	r6, r5
9000b5a2:	f7ff bbe2 	b.w	9000ad6a <HAL_RCCEx_PeriphCLKConfig+0x76>
9000b5a6:	462e      	mov	r6, r5
9000b5a8:	e423      	b.n	9000adf2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
9000b5aa:	2102      	movs	r1, #2
9000b5ac:	f104 0008 	add.w	r0, r4, #8
9000b5b0:	f7ff faac 	bl	9000ab0c <RCCEx_PLL2_Config>
9000b5b4:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
9000b5b6:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000b5ba:	2d00      	cmp	r5, #0
9000b5bc:	d14c      	bne.n	9000b658 <HAL_RCCEx_PeriphCLKConfig+0x964>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
9000b5be:	4f3d      	ldr	r7, [pc, #244]	; (9000b6b4 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
9000b5c0:	6d20      	ldr	r0, [r4, #80]	; 0x50
9000b5c2:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
9000b5c4:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
9000b5c8:	4301      	orrs	r1, r0
9000b5ca:	64f9      	str	r1, [r7, #76]	; 0x4c
9000b5cc:	e652      	b.n	9000b274 <HAL_RCCEx_PeriphCLKConfig+0x580>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000b5ce:	4839      	ldr	r0, [pc, #228]	; (9000b6b4 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
9000b5d0:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
9000b5d2:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
9000b5d6:	62c1      	str	r1, [r0, #44]	; 0x2c
        break;
9000b5d8:	e462      	b.n	9000aea0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000b5da:	4836      	ldr	r0, [pc, #216]	; (9000b6b4 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
9000b5dc:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
9000b5de:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
9000b5e2:	62c1      	str	r1, [r0, #44]	; 0x2c
        break;
9000b5e4:	e41e      	b.n	9000ae24 <HAL_RCCEx_PeriphCLKConfig+0x130>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000b5e6:	4833      	ldr	r0, [pc, #204]	; (9000b6b4 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
9000b5e8:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
9000b5ea:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
9000b5ee:	62c1      	str	r1, [r0, #44]	; 0x2c
        break;
9000b5f0:	f7ff bbd1 	b.w	9000ad96 <HAL_RCCEx_PeriphCLKConfig+0xa2>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000b5f4:	482f      	ldr	r0, [pc, #188]	; (9000b6b4 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
9000b5f6:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
9000b5f8:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
9000b5fc:	62c1      	str	r1, [r0, #44]	; 0x2c
        break;
9000b5fe:	f7ff bbed 	b.w	9000addc <HAL_RCCEx_PeriphCLKConfig+0xe8>
9000b602:	462e      	mov	r6, r5
9000b604:	e540      	b.n	9000b088 <HAL_RCCEx_PeriphCLKConfig+0x394>
9000b606:	462e      	mov	r6, r5
9000b608:	e5a5      	b.n	9000b156 <HAL_RCCEx_PeriphCLKConfig+0x462>
9000b60a:	462e      	mov	r6, r5
9000b60c:	e4a2      	b.n	9000af54 <HAL_RCCEx_PeriphCLKConfig+0x260>
9000b60e:	462e      	mov	r6, r5
9000b610:	e57f      	b.n	9000b112 <HAL_RCCEx_PeriphCLKConfig+0x41e>
9000b612:	462e      	mov	r6, r5
9000b614:	e42c      	b.n	9000ae70 <HAL_RCCEx_PeriphCLKConfig+0x17c>
9000b616:	462e      	mov	r6, r5
9000b618:	e501      	b.n	9000b01e <HAL_RCCEx_PeriphCLKConfig+0x32a>
9000b61a:	462e      	mov	r6, r5
9000b61c:	e46a      	b.n	9000aef4 <HAL_RCCEx_PeriphCLKConfig+0x200>
9000b61e:	462e      	mov	r6, r5
9000b620:	e5dd      	b.n	9000b1de <HAL_RCCEx_PeriphCLKConfig+0x4ea>
9000b622:	462e      	mov	r6, r5
9000b624:	e486      	b.n	9000af34 <HAL_RCCEx_PeriphCLKConfig+0x240>
9000b626:	462e      	mov	r6, r5
9000b628:	e5b7      	b.n	9000b19a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
9000b62a:	462e      	mov	r6, r5
9000b62c:	e54c      	b.n	9000b0c8 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
9000b62e:	462e      	mov	r6, r5
9000b630:	e602      	b.n	9000b238 <HAL_RCCEx_PeriphCLKConfig+0x544>
9000b632:	462e      	mov	r6, r5
9000b634:	e612      	b.n	9000b25c <HAL_RCCEx_PeriphCLKConfig+0x568>
9000b636:	462e      	mov	r6, r5
9000b638:	e62e      	b.n	9000b298 <HAL_RCCEx_PeriphCLKConfig+0x5a4>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000b63a:	4f1e      	ldr	r7, [pc, #120]	; (9000b6b4 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
9000b63c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
9000b63e:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
9000b642:	62f8      	str	r0, [r7, #44]	; 0x2c
    if (ret == HAL_OK)
9000b644:	2d00      	cmp	r5, #0
9000b646:	d1f6      	bne.n	9000b636 <HAL_RCCEx_PeriphCLKConfig+0x942>
9000b648:	e6a4      	b.n	9000b394 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000b64a:	481a      	ldr	r0, [pc, #104]	; (9000b6b4 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
9000b64c:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
9000b64e:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
9000b652:	62c1      	str	r1, [r0, #44]	; 0x2c
    if (ret == HAL_OK)
9000b654:	2d00      	cmp	r5, #0
9000b656:	d0b2      	beq.n	9000b5be <HAL_RCCEx_PeriphCLKConfig+0x8ca>
9000b658:	462e      	mov	r6, r5
9000b65a:	e60b      	b.n	9000b274 <HAL_RCCEx_PeriphCLKConfig+0x580>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000b65c:	4815      	ldr	r0, [pc, #84]	; (9000b6b4 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
9000b65e:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
9000b660:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
9000b664:	62c1      	str	r1, [r0, #44]	; 0x2c
    if (ret == HAL_OK)
9000b666:	2d00      	cmp	r5, #0
9000b668:	d1e3      	bne.n	9000b632 <HAL_RCCEx_PeriphCLKConfig+0x93e>
9000b66a:	e6c7      	b.n	9000b3fc <HAL_RCCEx_PeriphCLKConfig+0x708>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
9000b66c:	f104 0008 	add.w	r0, r4, #8
9000b670:	f7ff fa4c 	bl	9000ab0c <RCCEx_PLL2_Config>
9000b674:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
9000b676:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000b67a:	2d00      	cmp	r5, #0
9000b67c:	d1d7      	bne.n	9000b62e <HAL_RCCEx_PeriphCLKConfig+0x93a>
9000b67e:	e6d1      	b.n	9000b424 <HAL_RCCEx_PeriphCLKConfig+0x730>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
9000b680:	6862      	ldr	r2, [r4, #4]
9000b682:	e653      	b.n	9000b32c <HAL_RCCEx_PeriphCLKConfig+0x638>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
9000b684:	2102      	movs	r1, #2
9000b686:	f104 0008 	add.w	r0, r4, #8
9000b68a:	f7ff fa3f 	bl	9000ab0c <RCCEx_PLL2_Config>
9000b68e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
9000b690:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000b694:	2d00      	cmp	r5, #0
9000b696:	d1bc      	bne.n	9000b612 <HAL_RCCEx_PeriphCLKConfig+0x91e>
9000b698:	f7ff bbe3 	b.w	9000ae62 <HAL_RCCEx_PeriphCLKConfig+0x16e>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
9000b69c:	2102      	movs	r1, #2
9000b69e:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000b6a2:	f7ff faad 	bl	9000ac00 <RCCEx_PLL3_Config>
9000b6a6:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
9000b6a8:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000b6ac:	2d00      	cmp	r5, #0
9000b6ae:	d1ba      	bne.n	9000b626 <HAL_RCCEx_PeriphCLKConfig+0x932>
9000b6b0:	e56b      	b.n	9000b18a <HAL_RCCEx_PeriphCLKConfig+0x496>
9000b6b2:	bf00      	nop
9000b6b4:	58024400 	.word	0x58024400
9000b6b8:	58024800 	.word	0x58024800
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
9000b6bc:	2102      	movs	r1, #2
9000b6be:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000b6c2:	f7ff fa9d 	bl	9000ac00 <RCCEx_PLL3_Config>
9000b6c6:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
9000b6c8:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000b6cc:	2d00      	cmp	r5, #0
9000b6ce:	d1a6      	bne.n	9000b61e <HAL_RCCEx_PeriphCLKConfig+0x92a>
9000b6d0:	e57d      	b.n	9000b1ce <HAL_RCCEx_PeriphCLKConfig+0x4da>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000b6d2:	4886      	ldr	r0, [pc, #536]	; (9000b8ec <HAL_RCCEx_PeriphCLKConfig+0xbf8>)
9000b6d4:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
9000b6d6:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
9000b6da:	62c1      	str	r1, [r0, #44]	; 0x2c
    if (ret == HAL_OK)
9000b6dc:	2d00      	cmp	r5, #0
9000b6de:	d194      	bne.n	9000b60a <HAL_RCCEx_PeriphCLKConfig+0x916>
9000b6e0:	e679      	b.n	9000b3d6 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
9000b6e2:	2101      	movs	r1, #1
9000b6e4:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000b6e8:	f7ff fa8a 	bl	9000ac00 <RCCEx_PLL3_Config>
9000b6ec:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
9000b6ee:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000b6f2:	2d00      	cmp	r5, #0
9000b6f4:	d191      	bne.n	9000b61a <HAL_RCCEx_PeriphCLKConfig+0x926>
9000b6f6:	f7ff bbf6 	b.w	9000aee6 <HAL_RCCEx_PeriphCLKConfig+0x1f2>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
9000b6fa:	2101      	movs	r1, #1
9000b6fc:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000b700:	f7ff fa7e 	bl	9000ac00 <RCCEx_PLL3_Config>
9000b704:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
9000b706:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000b70a:	2d00      	cmp	r5, #0
9000b70c:	d189      	bne.n	9000b622 <HAL_RCCEx_PeriphCLKConfig+0x92e>
9000b70e:	e409      	b.n	9000af24 <HAL_RCCEx_PeriphCLKConfig+0x230>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
9000b710:	2102      	movs	r1, #2
9000b712:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000b716:	f7ff fa73 	bl	9000ac00 <RCCEx_PLL3_Config>
9000b71a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
9000b71c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000b720:	2d00      	cmp	r5, #0
9000b722:	f47f af70 	bne.w	9000b606 <HAL_RCCEx_PeriphCLKConfig+0x912>
9000b726:	e50e      	b.n	9000b146 <HAL_RCCEx_PeriphCLKConfig+0x452>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
9000b728:	2102      	movs	r1, #2
9000b72a:	f104 0008 	add.w	r0, r4, #8
9000b72e:	f7ff f9ed 	bl	9000ab0c <RCCEx_PLL2_Config>
9000b732:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
9000b734:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000b738:	2d00      	cmp	r5, #0
9000b73a:	f47f af6c 	bne.w	9000b616 <HAL_RCCEx_PeriphCLKConfig+0x922>
9000b73e:	e467      	b.n	9000b010 <HAL_RCCEx_PeriphCLKConfig+0x31c>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
9000b740:	2102      	movs	r1, #2
9000b742:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000b746:	f7ff fa5b 	bl	9000ac00 <RCCEx_PLL3_Config>
9000b74a:	2800      	cmp	r0, #0
9000b74c:	f040 8094 	bne.w	9000b878 <HAL_RCCEx_PeriphCLKConfig+0xb84>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
9000b750:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
9000b754:	e9d4 3200 	ldrd	r3, r2, [r4]
9000b758:	e549      	b.n	9000b1ee <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
9000b75a:	2102      	movs	r1, #2
9000b75c:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000b760:	f7ff fa4e 	bl	9000ac00 <RCCEx_PLL3_Config>
9000b764:	2800      	cmp	r0, #0
9000b766:	f040 808d 	bne.w	9000b884 <HAL_RCCEx_PeriphCLKConfig+0xb90>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
9000b76a:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
9000b76e:	e9d4 3200 	ldrd	r3, r2, [r4]
9000b772:	e54a      	b.n	9000b20a <HAL_RCCEx_PeriphCLKConfig+0x516>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
9000b774:	e9d4 3200 	ldrd	r3, r2, [r4]
9000b778:	f7ff bae9 	b.w	9000ad4e <HAL_RCCEx_PeriphCLKConfig+0x5a>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
9000b77c:	2100      	movs	r1, #0
9000b77e:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000b782:	f7ff fa3d 	bl	9000ac00 <RCCEx_PLL3_Config>
9000b786:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
9000b788:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
9000b78c:	f7ff bb4a 	b.w	9000ae24 <HAL_RCCEx_PeriphCLKConfig+0x130>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
9000b790:	2100      	movs	r1, #0
9000b792:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000b796:	f7ff fa33 	bl	9000ac00 <RCCEx_PLL3_Config>
9000b79a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
9000b79c:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
9000b7a0:	e600      	b.n	9000b3a4 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
9000b7a2:	2100      	movs	r1, #0
9000b7a4:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000b7a8:	f7ff fa2a 	bl	9000ac00 <RCCEx_PLL3_Config>
9000b7ac:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
9000b7ae:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
9000b7b2:	f7ff baf0 	b.w	9000ad96 <HAL_RCCEx_PeriphCLKConfig+0xa2>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
9000b7b6:	2102      	movs	r1, #2
9000b7b8:	3028      	adds	r0, #40	; 0x28
9000b7ba:	f7ff fa21 	bl	9000ac00 <RCCEx_PLL3_Config>
9000b7be:	4606      	mov	r6, r0
    if (ret == HAL_OK)
9000b7c0:	2e00      	cmp	r6, #0
9000b7c2:	f43f aab5 	beq.w	9000ad30 <HAL_RCCEx_PeriphCLKConfig+0x3c>
9000b7c6:	e7d5      	b.n	9000b774 <HAL_RCCEx_PeriphCLKConfig+0xa80>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000b7c8:	4848      	ldr	r0, [pc, #288]	; (9000b8ec <HAL_RCCEx_PeriphCLKConfig+0xbf8>)
        break;
9000b7ca:	4635      	mov	r5, r6
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000b7cc:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
9000b7ce:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
9000b7d2:	62c1      	str	r1, [r0, #44]	; 0x2c
        break;
9000b7d4:	e5e6      	b.n	9000b3a4 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
9000b7d6:	2100      	movs	r1, #0
9000b7d8:	f104 0008 	add.w	r0, r4, #8
9000b7dc:	f7ff f996 	bl	9000ab0c <RCCEx_PLL2_Config>
9000b7e0:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
9000b7e2:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
9000b7e6:	e5dd      	b.n	9000b3a4 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
9000b7e8:	2100      	movs	r1, #0
9000b7ea:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000b7ee:	f7ff fa07 	bl	9000ac00 <RCCEx_PLL3_Config>
9000b7f2:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
9000b7f4:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
9000b7f8:	f7ff bb52 	b.w	9000aea0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
9000b7fc:	2100      	movs	r1, #0
9000b7fe:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000b802:	f7ff f9fd 	bl	9000ac00 <RCCEx_PLL3_Config>
9000b806:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
9000b808:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
9000b80c:	f7ff bae6 	b.w	9000addc <HAL_RCCEx_PeriphCLKConfig+0xe8>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
9000b810:	2101      	movs	r1, #1
9000b812:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000b816:	f7ff f9f3 	bl	9000ac00 <RCCEx_PLL3_Config>
9000b81a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
9000b81c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000b820:	2d00      	cmp	r5, #0
9000b822:	f47f aef4 	bne.w	9000b60e <HAL_RCCEx_PeriphCLKConfig+0x91a>
9000b826:	e46c      	b.n	9000b102 <HAL_RCCEx_PeriphCLKConfig+0x40e>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
9000b828:	2101      	movs	r1, #1
9000b82a:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000b82e:	f7ff f9e7 	bl	9000ac00 <RCCEx_PLL3_Config>
9000b832:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
9000b834:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000b838:	2d00      	cmp	r5, #0
9000b83a:	f47f aef6 	bne.w	9000b62a <HAL_RCCEx_PeriphCLKConfig+0x936>
9000b83e:	e43c      	b.n	9000b0ba <HAL_RCCEx_PeriphCLKConfig+0x3c6>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
9000b840:	2101      	movs	r1, #1
9000b842:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000b846:	f7ff f9db 	bl	9000ac00 <RCCEx_PLL3_Config>
9000b84a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
9000b84c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000b850:	2d00      	cmp	r5, #0
9000b852:	f47f aed6 	bne.w	9000b602 <HAL_RCCEx_PeriphCLKConfig+0x90e>
9000b856:	e5f9      	b.n	9000b44c <HAL_RCCEx_PeriphCLKConfig+0x758>
        status = ret;
9000b858:	2603      	movs	r6, #3
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
9000b85a:	e9d4 3200 	ldrd	r3, r2, [r4]
9000b85e:	4635      	mov	r5, r6
9000b860:	f7ff bbe0 	b.w	9000b024 <HAL_RCCEx_PeriphCLKConfig+0x330>
    switch (PeriphClkInit->SpdifrxClockSelection)
9000b864:	2601      	movs	r6, #1
9000b866:	f7ff ba72 	b.w	9000ad4e <HAL_RCCEx_PeriphCLKConfig+0x5a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000b86a:	4d20      	ldr	r5, [pc, #128]	; (9000b8ec <HAL_RCCEx_PeriphCLKConfig+0xbf8>)
9000b86c:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
9000b86e:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
9000b872:	62e8      	str	r0, [r5, #44]	; 0x2c
    if (ret == HAL_OK)
9000b874:	f7ff ba64 	b.w	9000ad40 <HAL_RCCEx_PeriphCLKConfig+0x4c>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
9000b878:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
        status = HAL_ERROR;
9000b87c:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
9000b87e:	e9d4 3200 	ldrd	r3, r2, [r4]
9000b882:	e4b4      	b.n	9000b1ee <HAL_RCCEx_PeriphCLKConfig+0x4fa>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
9000b884:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
        status = HAL_ERROR;
9000b888:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
9000b88a:	e9d4 3200 	ldrd	r3, r2, [r4]
9000b88e:	e4bc      	b.n	9000b20a <HAL_RCCEx_PeriphCLKConfig+0x516>
        tickstart = HAL_GetTick();
9000b890:	f7fa fc94 	bl	900061bc <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
9000b894:	f8df 8054 	ldr.w	r8, [pc, #84]	; 9000b8ec <HAL_RCCEx_PeriphCLKConfig+0xbf8>
        tickstart = HAL_GetTick();
9000b898:	4607      	mov	r7, r0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
9000b89a:	f241 3988 	movw	r9, #5000	; 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
9000b89e:	e004      	b.n	9000b8aa <HAL_RCCEx_PeriphCLKConfig+0xbb6>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
9000b8a0:	f7fa fc8c 	bl	900061bc <HAL_GetTick>
9000b8a4:	1bc0      	subs	r0, r0, r7
9000b8a6:	4548      	cmp	r0, r9
9000b8a8:	d8d6      	bhi.n	9000b858 <HAL_RCCEx_PeriphCLKConfig+0xb64>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
9000b8aa:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
9000b8ae:	079b      	lsls	r3, r3, #30
9000b8b0:	d5f6      	bpl.n	9000b8a0 <HAL_RCCEx_PeriphCLKConfig+0xbac>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
9000b8b2:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
9000b8b6:	e64d      	b.n	9000b554 <HAL_RCCEx_PeriphCLKConfig+0x860>
9000b8b8:	480c      	ldr	r0, [pc, #48]	; (9000b8ec <HAL_RCCEx_PeriphCLKConfig+0xbf8>)
9000b8ba:	4a0d      	ldr	r2, [pc, #52]	; (9000b8f0 <HAL_RCCEx_PeriphCLKConfig+0xbfc>)
9000b8bc:	6901      	ldr	r1, [r0, #16]
9000b8be:	ea02 1213 	and.w	r2, r2, r3, lsr #4
9000b8c2:	f421 517c 	bic.w	r1, r1, #16128	; 0x3f00
9000b8c6:	430a      	orrs	r2, r1
9000b8c8:	6102      	str	r2, [r0, #16]
9000b8ca:	e64e      	b.n	9000b56a <HAL_RCCEx_PeriphCLKConfig+0x876>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
9000b8cc:	e9d4 3200 	ldrd	r3, r2, [r4]
9000b8d0:	462e      	mov	r6, r5
9000b8d2:	f7ff bba7 	b.w	9000b024 <HAL_RCCEx_PeriphCLKConfig+0x330>
    switch (PeriphClkInit->Usart234578ClockSelection)
9000b8d6:	2601      	movs	r6, #1
9000b8d8:	4635      	mov	r5, r6
9000b8da:	f7ff bbf5 	b.w	9000b0c8 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
    switch (PeriphClkInit->FmcClockSelection)
9000b8de:	2601      	movs	r6, #1
9000b8e0:	4635      	mov	r5, r6
9000b8e2:	f7ff bb9c 	b.w	9000b01e <HAL_RCCEx_PeriphCLKConfig+0x32a>
    switch (PeriphClkInit->Lpuart1ClockSelection)
9000b8e6:	2601      	movs	r6, #1
9000b8e8:	4635      	mov	r5, r6
9000b8ea:	e412      	b.n	9000b112 <HAL_RCCEx_PeriphCLKConfig+0x41e>
9000b8ec:	58024400 	.word	0x58024400
9000b8f0:	00ffffcf 	.word	0x00ffffcf

9000b8f4 <HAL_RCCEx_GetD3PCLK1Freq>:
{
9000b8f4:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
9000b8f6:	f7ff f80d 	bl	9000a914 <HAL_RCC_GetHCLKFreq>
9000b8fa:	4b05      	ldr	r3, [pc, #20]	; (9000b910 <HAL_RCCEx_GetD3PCLK1Freq+0x1c>)
9000b8fc:	4a05      	ldr	r2, [pc, #20]	; (9000b914 <HAL_RCCEx_GetD3PCLK1Freq+0x20>)
9000b8fe:	6a1b      	ldr	r3, [r3, #32]
9000b900:	f3c3 1302 	ubfx	r3, r3, #4, #3
9000b904:	5cd3      	ldrb	r3, [r2, r3]
9000b906:	f003 031f 	and.w	r3, r3, #31
}
9000b90a:	40d8      	lsrs	r0, r3
9000b90c:	bd08      	pop	{r3, pc}
9000b90e:	bf00      	nop
9000b910:	58024400 	.word	0x58024400
9000b914:	90028908 	.word	0x90028908

9000b918 <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
9000b918:	4a4f      	ldr	r2, [pc, #316]	; (9000ba58 <HAL_RCCEx_GetPLL2ClockFreq+0x140>)
{
9000b91a:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
9000b91c:	6a91      	ldr	r1, [r2, #40]	; 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
9000b91e:	6a95      	ldr	r5, [r2, #40]	; 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
9000b920:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
  if (pll2m != 0U)
9000b922:	f415 3f7c 	tst.w	r5, #258048	; 0x3f000
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
9000b926:	f3c5 3305 	ubfx	r3, r5, #12, #6
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
9000b92a:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
  if (pll2m != 0U)
9000b92c:	d05d      	beq.n	9000b9ea <HAL_RCCEx_GetPLL2ClockFreq+0xd2>
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
9000b92e:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
9000b932:	f3c6 1600 	ubfx	r6, r6, #4, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
9000b936:	f001 0103 	and.w	r1, r1, #3
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
9000b93a:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
9000b93e:	2901      	cmp	r1, #1
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
9000b940:	ee07 4a90 	vmov	s15, r4
9000b944:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
9000b948:	d003      	beq.n	9000b952 <HAL_RCCEx_GetPLL2ClockFreq+0x3a>
9000b94a:	2902      	cmp	r1, #2
9000b94c:	d076      	beq.n	9000ba3c <HAL_RCCEx_GetPLL2ClockFreq+0x124>
9000b94e:	2900      	cmp	r1, #0
9000b950:	d050      	beq.n	9000b9f4 <HAL_RCCEx_GetPLL2ClockFreq+0xdc>
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
9000b952:	ee07 3a90 	vmov	s15, r3
9000b956:	ed9f 5a41 	vldr	s10, [pc, #260]	; 9000ba5c <HAL_RCCEx_GetPLL2ClockFreq+0x144>
9000b95a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000b95e:	6b93      	ldr	r3, [r2, #56]	; 0x38
9000b960:	eec5 6a27 	vdiv.f32	s13, s10, s15
9000b964:	eddf 5a3e 	vldr	s11, [pc, #248]	; 9000ba60 <HAL_RCCEx_GetPLL2ClockFreq+0x148>
9000b968:	f3c3 0308 	ubfx	r3, r3, #0, #9
9000b96c:	ee07 3a90 	vmov	s15, r3
9000b970:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
9000b974:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000b978:	eee7 7a25 	vfma.f32	s15, s14, s11
9000b97c:	ee77 7a86 	vadd.f32	s15, s15, s12
9000b980:	ee66 6aa7 	vmul.f32	s13, s13, s15
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
9000b984:	4a34      	ldr	r2, [pc, #208]	; (9000ba58 <HAL_RCCEx_GetPLL2ClockFreq+0x140>)
9000b986:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
9000b98a:	6b93      	ldr	r3, [r2, #56]	; 0x38
9000b98c:	f3c3 2346 	ubfx	r3, r3, #9, #7
9000b990:	ee07 3a90 	vmov	s15, r3
9000b994:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
9000b998:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
9000b99a:	ee77 7a86 	vadd.f32	s15, s15, s12
9000b99e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
9000b9a2:	eebc 7ac7 	vcvt.u32.f32	s14, s14
9000b9a6:	ed80 7a00 	vstr	s14, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
9000b9aa:	6b93      	ldr	r3, [r2, #56]	; 0x38
9000b9ac:	f3c3 4306 	ubfx	r3, r3, #16, #7
9000b9b0:	ee07 3a90 	vmov	s15, r3
9000b9b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000b9b8:	ee77 7a86 	vadd.f32	s15, s15, s12
9000b9bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
9000b9c0:	eebc 7ac7 	vcvt.u32.f32	s14, s14
9000b9c4:	ed80 7a01 	vstr	s14, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
9000b9c8:	6b93      	ldr	r3, [r2, #56]	; 0x38
9000b9ca:	f3c3 6306 	ubfx	r3, r3, #24, #7
9000b9ce:	ee07 3a10 	vmov	s14, r3
9000b9d2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
9000b9d6:	ee37 7a06 	vadd.f32	s14, s14, s12
9000b9da:	eec6 7a87 	vdiv.f32	s15, s13, s14
9000b9de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
9000b9e2:	ee17 3a90 	vmov	r3, s15
9000b9e6:	6083      	str	r3, [r0, #8]
}
9000b9e8:	4770      	bx	lr
9000b9ea:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
9000b9ec:	e9c0 3300 	strd	r3, r3, [r0]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
9000b9f0:	6083      	str	r3, [r0, #8]
}
9000b9f2:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
9000b9f4:	6811      	ldr	r1, [r2, #0]
9000b9f6:	0689      	lsls	r1, r1, #26
9000b9f8:	d527      	bpl.n	9000ba4a <HAL_RCCEx_GetPLL2ClockFreq+0x132>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000b9fa:	6814      	ldr	r4, [r2, #0]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
9000b9fc:	ee07 3a90 	vmov	s15, r3
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000ba00:	4918      	ldr	r1, [pc, #96]	; (9000ba64 <HAL_RCCEx_GetPLL2ClockFreq+0x14c>)
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
9000ba02:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
9000ba06:	6b93      	ldr	r3, [r2, #56]	; 0x38
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000ba08:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
9000ba0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000ba10:	ed9f 5a13 	vldr	s10, [pc, #76]	; 9000ba60 <HAL_RCCEx_GetPLL2ClockFreq+0x148>
9000ba14:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000ba18:	40d1      	lsrs	r1, r2
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
9000ba1a:	ee06 3a90 	vmov	s13, r3
9000ba1e:	ee06 1a10 	vmov	s12, r1
9000ba22:	eef8 6ae6 	vcvt.f32.s32	s13, s13
9000ba26:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
9000ba2a:	eee7 6a05 	vfma.f32	s13, s14, s10
9000ba2e:	ee86 7a27 	vdiv.f32	s14, s12, s15
9000ba32:	ee76 6aa5 	vadd.f32	s13, s13, s11
9000ba36:	ee66 6a87 	vmul.f32	s13, s13, s14
9000ba3a:	e7a3      	b.n	9000b984 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
9000ba3c:	ee07 3a90 	vmov	s15, r3
9000ba40:	ed9f 5a09 	vldr	s10, [pc, #36]	; 9000ba68 <HAL_RCCEx_GetPLL2ClockFreq+0x150>
9000ba44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000ba48:	e789      	b.n	9000b95e <HAL_RCCEx_GetPLL2ClockFreq+0x46>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
9000ba4a:	ee07 3a90 	vmov	s15, r3
9000ba4e:	ed9f 5a07 	vldr	s10, [pc, #28]	; 9000ba6c <HAL_RCCEx_GetPLL2ClockFreq+0x154>
9000ba52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000ba56:	e782      	b.n	9000b95e <HAL_RCCEx_GetPLL2ClockFreq+0x46>
9000ba58:	58024400 	.word	0x58024400
9000ba5c:	4a742400 	.word	0x4a742400
9000ba60:	39000000 	.word	0x39000000
9000ba64:	03d09000 	.word	0x03d09000
9000ba68:	4bbebc20 	.word	0x4bbebc20
9000ba6c:	4c742400 	.word	0x4c742400

9000ba70 <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
9000ba70:	4a4f      	ldr	r2, [pc, #316]	; (9000bbb0 <HAL_RCCEx_GetPLL3ClockFreq+0x140>)
{
9000ba72:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
9000ba74:	6a91      	ldr	r1, [r2, #40]	; 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
9000ba76:	6a95      	ldr	r5, [r2, #40]	; 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
9000ba78:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
  if (pll3m != 0U)
9000ba7a:	f015 7f7c 	tst.w	r5, #66060288	; 0x3f00000
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
9000ba7e:	f3c5 5305 	ubfx	r3, r5, #20, #6
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
9000ba82:	6c54      	ldr	r4, [r2, #68]	; 0x44
  if (pll3m != 0U)
9000ba84:	d05d      	beq.n	9000bb42 <HAL_RCCEx_GetPLL3ClockFreq+0xd2>
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
9000ba86:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
9000ba8a:	f3c6 2600 	ubfx	r6, r6, #8, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
9000ba8e:	f001 0103 	and.w	r1, r1, #3
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
9000ba92:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
9000ba96:	2901      	cmp	r1, #1
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
9000ba98:	ee07 4a90 	vmov	s15, r4
9000ba9c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
9000baa0:	d003      	beq.n	9000baaa <HAL_RCCEx_GetPLL3ClockFreq+0x3a>
9000baa2:	2902      	cmp	r1, #2
9000baa4:	d076      	beq.n	9000bb94 <HAL_RCCEx_GetPLL3ClockFreq+0x124>
9000baa6:	2900      	cmp	r1, #0
9000baa8:	d050      	beq.n	9000bb4c <HAL_RCCEx_GetPLL3ClockFreq+0xdc>
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
9000baaa:	ee07 3a90 	vmov	s15, r3
9000baae:	ed9f 5a41 	vldr	s10, [pc, #260]	; 9000bbb4 <HAL_RCCEx_GetPLL3ClockFreq+0x144>
9000bab2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000bab6:	6c13      	ldr	r3, [r2, #64]	; 0x40
9000bab8:	eec5 6a27 	vdiv.f32	s13, s10, s15
9000babc:	eddf 5a3e 	vldr	s11, [pc, #248]	; 9000bbb8 <HAL_RCCEx_GetPLL3ClockFreq+0x148>
9000bac0:	f3c3 0308 	ubfx	r3, r3, #0, #9
9000bac4:	ee07 3a90 	vmov	s15, r3
9000bac8:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
9000bacc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000bad0:	eee7 7a25 	vfma.f32	s15, s14, s11
9000bad4:	ee77 7a86 	vadd.f32	s15, s15, s12
9000bad8:	ee66 6aa7 	vmul.f32	s13, s13, s15
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
9000badc:	4a34      	ldr	r2, [pc, #208]	; (9000bbb0 <HAL_RCCEx_GetPLL3ClockFreq+0x140>)
9000bade:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
9000bae2:	6c13      	ldr	r3, [r2, #64]	; 0x40
9000bae4:	f3c3 2346 	ubfx	r3, r3, #9, #7
9000bae8:	ee07 3a90 	vmov	s15, r3
9000baec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
9000baf0:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
9000baf2:	ee77 7a86 	vadd.f32	s15, s15, s12
9000baf6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
9000bafa:	eebc 7ac7 	vcvt.u32.f32	s14, s14
9000bafe:	ed80 7a00 	vstr	s14, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
9000bb02:	6c13      	ldr	r3, [r2, #64]	; 0x40
9000bb04:	f3c3 4306 	ubfx	r3, r3, #16, #7
9000bb08:	ee07 3a90 	vmov	s15, r3
9000bb0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000bb10:	ee77 7a86 	vadd.f32	s15, s15, s12
9000bb14:	ee86 7aa7 	vdiv.f32	s14, s13, s15
9000bb18:	eebc 7ac7 	vcvt.u32.f32	s14, s14
9000bb1c:	ed80 7a01 	vstr	s14, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
9000bb20:	6c13      	ldr	r3, [r2, #64]	; 0x40
9000bb22:	f3c3 6306 	ubfx	r3, r3, #24, #7
9000bb26:	ee07 3a10 	vmov	s14, r3
9000bb2a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
9000bb2e:	ee37 7a06 	vadd.f32	s14, s14, s12
9000bb32:	eec6 7a87 	vdiv.f32	s15, s13, s14
9000bb36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
9000bb3a:	ee17 3a90 	vmov	r3, s15
9000bb3e:	6083      	str	r3, [r0, #8]
}
9000bb40:	4770      	bx	lr
9000bb42:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
9000bb44:	e9c0 3300 	strd	r3, r3, [r0]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
9000bb48:	6083      	str	r3, [r0, #8]
}
9000bb4a:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
9000bb4c:	6811      	ldr	r1, [r2, #0]
9000bb4e:	0689      	lsls	r1, r1, #26
9000bb50:	d527      	bpl.n	9000bba2 <HAL_RCCEx_GetPLL3ClockFreq+0x132>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000bb52:	6814      	ldr	r4, [r2, #0]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
9000bb54:	ee07 3a90 	vmov	s15, r3
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000bb58:	4918      	ldr	r1, [pc, #96]	; (9000bbbc <HAL_RCCEx_GetPLL3ClockFreq+0x14c>)
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
9000bb5a:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
9000bb5e:	6c13      	ldr	r3, [r2, #64]	; 0x40
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000bb60:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
9000bb64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000bb68:	ed9f 5a13 	vldr	s10, [pc, #76]	; 9000bbb8 <HAL_RCCEx_GetPLL3ClockFreq+0x148>
9000bb6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000bb70:	40d1      	lsrs	r1, r2
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
9000bb72:	ee06 3a90 	vmov	s13, r3
9000bb76:	ee06 1a10 	vmov	s12, r1
9000bb7a:	eef8 6ae6 	vcvt.f32.s32	s13, s13
9000bb7e:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
9000bb82:	eee7 6a05 	vfma.f32	s13, s14, s10
9000bb86:	ee86 7a27 	vdiv.f32	s14, s12, s15
9000bb8a:	ee76 6aa5 	vadd.f32	s13, s13, s11
9000bb8e:	ee66 6a87 	vmul.f32	s13, s13, s14
9000bb92:	e7a3      	b.n	9000badc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
9000bb94:	ee07 3a90 	vmov	s15, r3
9000bb98:	ed9f 5a09 	vldr	s10, [pc, #36]	; 9000bbc0 <HAL_RCCEx_GetPLL3ClockFreq+0x150>
9000bb9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000bba0:	e789      	b.n	9000bab6 <HAL_RCCEx_GetPLL3ClockFreq+0x46>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
9000bba2:	ee07 3a90 	vmov	s15, r3
9000bba6:	ed9f 5a07 	vldr	s10, [pc, #28]	; 9000bbc4 <HAL_RCCEx_GetPLL3ClockFreq+0x154>
9000bbaa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000bbae:	e782      	b.n	9000bab6 <HAL_RCCEx_GetPLL3ClockFreq+0x46>
9000bbb0:	58024400 	.word	0x58024400
9000bbb4:	4a742400 	.word	0x4a742400
9000bbb8:	39000000 	.word	0x39000000
9000bbbc:	03d09000 	.word	0x03d09000
9000bbc0:	4bbebc20 	.word	0x4bbebc20
9000bbc4:	4c742400 	.word	0x4c742400

9000bbc8 <HAL_SDRAM_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
9000bbc8:	b318      	cbz	r0, 9000bc12 <HAL_SDRAM_Init+0x4a>
{
9000bbca:	b538      	push	{r3, r4, r5, lr}
  {
    return HAL_ERROR;
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
9000bbcc:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
9000bbd0:	4604      	mov	r4, r0
9000bbd2:	460d      	mov	r5, r1
9000bbd4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
9000bbd8:	b1b3      	cbz	r3, 9000bc08 <HAL_SDRAM_Init+0x40>

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
9000bbda:	4621      	mov	r1, r4
  hsdram->State = HAL_SDRAM_STATE_BUSY;
9000bbdc:	2302      	movs	r3, #2
9000bbde:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
9000bbe2:	f851 0b04 	ldr.w	r0, [r1], #4
9000bbe6:	f001 fd89 	bl	9000d6fc <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
9000bbea:	6862      	ldr	r2, [r4, #4]
9000bbec:	4629      	mov	r1, r5
9000bbee:	6820      	ldr	r0, [r4, #0]
9000bbf0:	f001 fdc2 	bl	9000d778 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
9000bbf4:	4a08      	ldr	r2, [pc, #32]	; (9000bc18 <HAL_SDRAM_Init+0x50>)
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
9000bbf6:	2101      	movs	r1, #1

  return HAL_OK;
9000bbf8:	2000      	movs	r0, #0
  __FMC_ENABLE();
9000bbfa:	6813      	ldr	r3, [r2, #0]
9000bbfc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
9000bc00:	6013      	str	r3, [r2, #0]
  hsdram->State = HAL_SDRAM_STATE_READY;
9000bc02:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
}
9000bc06:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->Lock = HAL_UNLOCKED;
9000bc08:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
    HAL_SDRAM_MspInit(hsdram);
9000bc0c:	f7f8 fafe 	bl	9000420c <HAL_SDRAM_MspInit>
9000bc10:	e7e3      	b.n	9000bbda <HAL_SDRAM_Init+0x12>
    return HAL_ERROR;
9000bc12:	2001      	movs	r0, #1
}
9000bc14:	4770      	bx	lr
9000bc16:	bf00      	nop
9000bc18:	52004000 	.word	0x52004000

9000bc1c <HAL_SDRAM_DeInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_DeInit(SDRAM_HandleTypeDef *hsdram)
{
9000bc1c:	b510      	push	{r4, lr}
9000bc1e:	4604      	mov	r4, r0

  /* DeInit the low level hardware */
  hsdram->MspDeInitCallback(hsdram);
#else
  /* Initialize the low level hardware (MSP) */
  HAL_SDRAM_MspDeInit(hsdram);
9000bc20:	f7f8 fb70 	bl	90004304 <HAL_SDRAM_MspDeInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */

  /* Configure the SDRAM registers with their reset values */
  (void)FMC_SDRAM_DeInit(hsdram->Instance, hsdram->Init.SDBank);
9000bc24:	e9d4 0100 	ldrd	r0, r1, [r4]
9000bc28:	f001 fdf4 	bl	9000d814 <FMC_SDRAM_DeInit>

  /* Reset the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_RESET;
9000bc2c:	2000      	movs	r0, #0
9000bc2e:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c

  /* Release Lock */
  __HAL_UNLOCK(hsdram);
9000bc32:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d

  return HAL_OK;
}
9000bc36:	bd10      	pop	{r4, pc}

9000bc38 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
9000bc38:	b570      	push	{r4, r5, r6, lr}
  HAL_SDRAM_StateTypeDef state = hsdram->State;
9000bc3a:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
9000bc3e:	4604      	mov	r4, r0

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
9000bc40:	2b02      	cmp	r3, #2
  HAL_SDRAM_StateTypeDef state = hsdram->State;
9000bc42:	b2d8      	uxtb	r0, r3
  if (state == HAL_SDRAM_STATE_BUSY)
9000bc44:	d004      	beq.n	9000bc50 <HAL_SDRAM_SendCommand+0x18>
  {
    return HAL_BUSY;
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
9000bc46:	f000 06fb 	and.w	r6, r0, #251	; 0xfb
9000bc4a:	2e01      	cmp	r6, #1
9000bc4c:	d001      	beq.n	9000bc52 <HAL_SDRAM_SendCommand+0x1a>
      hsdram->State = HAL_SDRAM_STATE_READY;
    }
  }
  else
  {
    return HAL_ERROR;
9000bc4e:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
9000bc50:	bd70      	pop	{r4, r5, r6, pc}
    hsdram->State = HAL_SDRAM_STATE_BUSY;
9000bc52:	2302      	movs	r3, #2
9000bc54:	460d      	mov	r5, r1
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
9000bc56:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
9000bc58:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
9000bc5c:	f001 fdee 	bl	9000d83c <FMC_SDRAM_SendCommand>
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
9000bc60:	682b      	ldr	r3, [r5, #0]
9000bc62:	2b02      	cmp	r3, #2
9000bc64:	d003      	beq.n	9000bc6e <HAL_SDRAM_SendCommand+0x36>
  return HAL_OK;
9000bc66:	2000      	movs	r0, #0
      hsdram->State = HAL_SDRAM_STATE_READY;
9000bc68:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
}
9000bc6c:	bd70      	pop	{r4, r5, r6, pc}
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
9000bc6e:	2305      	movs	r3, #5
  return HAL_OK;
9000bc70:	2000      	movs	r0, #0
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
9000bc72:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
9000bc76:	bd70      	pop	{r4, r5, r6, pc}

9000bc78 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
9000bc78:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
9000bc7a:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
9000bc7e:	4604      	mov	r4, r0
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
9000bc80:	2b02      	cmp	r3, #2
9000bc82:	b2d8      	uxtb	r0, r3
9000bc84:	d005      	beq.n	9000bc92 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
9000bc86:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
9000bc8a:	2b01      	cmp	r3, #1
9000bc8c:	b2dd      	uxtb	r5, r3
9000bc8e:	d001      	beq.n	9000bc94 <HAL_SDRAM_ProgramRefreshRate+0x1c>
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
  }
  else
  {
    return HAL_ERROR;
9000bc90:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
9000bc92:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->State = HAL_SDRAM_STATE_BUSY;
9000bc94:	2302      	movs	r3, #2
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
9000bc96:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
9000bc98:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
9000bc9c:	f001 fde6 	bl	9000d86c <FMC_SDRAM_ProgramRefreshRate>
  return HAL_OK;
9000bca0:	2000      	movs	r0, #0
    hsdram->State = HAL_SDRAM_STATE_READY;
9000bca2:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
}
9000bca6:	bd38      	pop	{r3, r4, r5, pc}

9000bca8 <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
9000bca8:	4770      	bx	lr
9000bcaa:	bf00      	nop

9000bcac <HAL_TIM_Base_Init>:
  if (htim == NULL)
9000bcac:	2800      	cmp	r0, #0
9000bcae:	f000 80a5 	beq.w	9000bdfc <HAL_TIM_Base_Init+0x150>
{
9000bcb2:	b538      	push	{r3, r4, r5, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
9000bcb4:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
9000bcb8:	4604      	mov	r4, r0
9000bcba:	f003 02ff 	and.w	r2, r3, #255	; 0xff
9000bcbe:	2b00      	cmp	r3, #0
9000bcc0:	d076      	beq.n	9000bdb0 <HAL_TIM_Base_Init+0x104>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
9000bcc2:	6822      	ldr	r2, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
9000bcc4:	2302      	movs	r3, #2
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
9000bcc6:	494e      	ldr	r1, [pc, #312]	; (9000be00 <HAL_TIM_Base_Init+0x154>)
9000bcc8:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
  htim->State = HAL_TIM_STATE_BUSY;
9000bccc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
9000bcd0:	eba2 0101 	sub.w	r1, r2, r1
  tmpcr1 = TIMx->CR1;
9000bcd4:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
9000bcd6:	fab1 f181 	clz	r1, r1
9000bcda:	ea4f 1151 	mov.w	r1, r1, lsr #5
9000bcde:	d027      	beq.n	9000bd30 <HAL_TIM_Base_Init+0x84>
9000bce0:	bb31      	cbnz	r1, 9000bd30 <HAL_TIM_Base_Init+0x84>
9000bce2:	4848      	ldr	r0, [pc, #288]	; (9000be04 <HAL_TIM_Base_Init+0x158>)
9000bce4:	4d48      	ldr	r5, [pc, #288]	; (9000be08 <HAL_TIM_Base_Init+0x15c>)
9000bce6:	4282      	cmp	r2, r0
9000bce8:	d067      	beq.n	9000bdba <HAL_TIM_Base_Init+0x10e>
9000bcea:	f500 6080 	add.w	r0, r0, #1024	; 0x400
9000bcee:	4282      	cmp	r2, r0
9000bcf0:	d063      	beq.n	9000bdba <HAL_TIM_Base_Init+0x10e>
9000bcf2:	1b55      	subs	r5, r2, r5
9000bcf4:	f500 6080 	add.w	r0, r0, #1024	; 0x400
9000bcf8:	fab5 f585 	clz	r5, r5
9000bcfc:	4282      	cmp	r2, r0
9000bcfe:	ea4f 1555 	mov.w	r5, r5, lsr #5
9000bd02:	d063      	beq.n	9000bdcc <HAL_TIM_Base_Init+0x120>
9000bd04:	2d00      	cmp	r5, #0
9000bd06:	d161      	bne.n	9000bdcc <HAL_TIM_Base_Init+0x120>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
9000bd08:	4840      	ldr	r0, [pc, #256]	; (9000be0c <HAL_TIM_Base_Init+0x160>)
9000bd0a:	4941      	ldr	r1, [pc, #260]	; (9000be10 <HAL_TIM_Base_Init+0x164>)
9000bd0c:	428a      	cmp	r2, r1
9000bd0e:	bf18      	it	ne
9000bd10:	4282      	cmpne	r2, r0
9000bd12:	d065      	beq.n	9000bde0 <HAL_TIM_Base_Init+0x134>
9000bd14:	f501 6180 	add.w	r1, r1, #1024	; 0x400
9000bd18:	428a      	cmp	r2, r1
9000bd1a:	d061      	beq.n	9000bde0 <HAL_TIM_Base_Init+0x134>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
9000bd1c:	69a0      	ldr	r0, [r4, #24]
9000bd1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
9000bd22:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
9000bd24:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
9000bd26:	6013      	str	r3, [r2, #0]

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
9000bd28:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
9000bd2a:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
9000bd2c:	6293      	str	r3, [r2, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
9000bd2e:	e023      	b.n	9000bd78 <HAL_TIM_Base_Init+0xcc>
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
9000bd30:	4d35      	ldr	r5, [pc, #212]	; (9000be08 <HAL_TIM_Base_Init+0x15c>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
9000bd32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
9000bd36:	68a0      	ldr	r0, [r4, #8]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
9000bd38:	1b55      	subs	r5, r2, r5
    tmpcr1 |= Structure->CounterMode;
9000bd3a:	4303      	orrs	r3, r0
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
9000bd3c:	fab5 f585 	clz	r5, r5
9000bd40:	096d      	lsrs	r5, r5, #5
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
9000bd42:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
9000bd44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
9000bd48:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
9000bd4a:	69a0      	ldr	r0, [r4, #24]
9000bd4c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
9000bd50:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
9000bd52:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
9000bd54:	68e3      	ldr	r3, [r4, #12]
9000bd56:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
9000bd58:	6863      	ldr	r3, [r4, #4]
9000bd5a:	6293      	str	r3, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
9000bd5c:	b951      	cbnz	r1, 9000bd74 <HAL_TIM_Base_Init+0xc8>
9000bd5e:	b94d      	cbnz	r5, 9000bd74 <HAL_TIM_Base_Init+0xc8>
9000bd60:	492a      	ldr	r1, [pc, #168]	; (9000be0c <HAL_TIM_Base_Init+0x160>)
9000bd62:	4b2b      	ldr	r3, [pc, #172]	; (9000be10 <HAL_TIM_Base_Init+0x164>)
9000bd64:	429a      	cmp	r2, r3
9000bd66:	bf18      	it	ne
9000bd68:	428a      	cmpne	r2, r1
9000bd6a:	d003      	beq.n	9000bd74 <HAL_TIM_Base_Init+0xc8>
9000bd6c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
9000bd70:	429a      	cmp	r2, r3
9000bd72:	d101      	bne.n	9000bd78 <HAL_TIM_Base_Init+0xcc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
9000bd74:	6963      	ldr	r3, [r4, #20]
9000bd76:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
9000bd78:	2301      	movs	r3, #1
  return HAL_OK;
9000bd7a:	2000      	movs	r0, #0
  TIMx->EGR = TIM_EGR_UG;
9000bd7c:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
9000bd7e:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
9000bd82:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
9000bd86:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
9000bd8a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
9000bd8e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
9000bd92:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
9000bd96:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
9000bd9a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
9000bd9e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
9000bda2:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
9000bda6:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
9000bdaa:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
9000bdae:	bd38      	pop	{r3, r4, r5, pc}
    htim->Lock = HAL_UNLOCKED;
9000bdb0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
9000bdb4:	f7ff ff78 	bl	9000bca8 <HAL_TIM_Base_MspInit>
9000bdb8:	e783      	b.n	9000bcc2 <HAL_TIM_Base_Init+0x16>
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
9000bdba:	1b55      	subs	r5, r2, r5
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
9000bdbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
9000bdc0:	68a0      	ldr	r0, [r4, #8]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
9000bdc2:	fab5 f585 	clz	r5, r5
    tmpcr1 |= Structure->CounterMode;
9000bdc6:	4303      	orrs	r3, r0
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
9000bdc8:	096d      	lsrs	r5, r5, #5
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
9000bdca:	e7ba      	b.n	9000bd42 <HAL_TIM_Base_Init+0x96>
    tmpcr1 |= Structure->CounterMode;
9000bdcc:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
9000bdce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
9000bdd2:	4303      	orrs	r3, r0
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
9000bdd4:	480f      	ldr	r0, [pc, #60]	; (9000be14 <HAL_TIM_Base_Init+0x168>)
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
9000bdd6:	4282      	cmp	r2, r0
9000bdd8:	d0b3      	beq.n	9000bd42 <HAL_TIM_Base_Init+0x96>
9000bdda:	2d00      	cmp	r5, #0
9000bddc:	d1b1      	bne.n	9000bd42 <HAL_TIM_Base_Init+0x96>
9000bdde:	e793      	b.n	9000bd08 <HAL_TIM_Base_Init+0x5c>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
9000bde0:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
9000bde2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
9000bde6:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
9000bde8:	4303      	orrs	r3, r0
  TIMx->ARR = (uint32_t)Structure->Period ;
9000bdea:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
9000bdec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
9000bdf0:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
9000bdf2:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
9000bdf4:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
9000bdf6:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
9000bdf8:	6291      	str	r1, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
9000bdfa:	e7b1      	b.n	9000bd60 <HAL_TIM_Base_Init+0xb4>
    return HAL_ERROR;
9000bdfc:	2001      	movs	r0, #1
}
9000bdfe:	4770      	bx	lr
9000be00:	40010000 	.word	0x40010000
9000be04:	40000400 	.word	0x40000400
9000be08:	40010400 	.word	0x40010400
9000be0c:	40014000 	.word	0x40014000
9000be10:	40014400 	.word	0x40014400
9000be14:	40000c00 	.word	0x40000c00

9000be18 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
9000be18:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
9000be1c:	2b01      	cmp	r3, #1
9000be1e:	d141      	bne.n	9000bea4 <HAL_TIM_Base_Start_IT+0x8c>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
9000be20:	6802      	ldr	r2, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
9000be22:	2102      	movs	r1, #2
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
9000be24:	4b24      	ldr	r3, [pc, #144]	; (9000beb8 <HAL_TIM_Base_Start_IT+0xa0>)
9000be26:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
9000be2a:	bf18      	it	ne
9000be2c:	429a      	cmpne	r2, r3
{
9000be2e:	b430      	push	{r4, r5}
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
9000be30:	bf0c      	ite	eq
9000be32:	2301      	moveq	r3, #1
9000be34:	2300      	movne	r3, #0
9000be36:	4d21      	ldr	r5, [pc, #132]	; (9000bebc <HAL_TIM_Base_Start_IT+0xa4>)
9000be38:	4c21      	ldr	r4, [pc, #132]	; (9000bec0 <HAL_TIM_Base_Start_IT+0xa8>)
9000be3a:	42aa      	cmp	r2, r5
9000be3c:	bf08      	it	eq
9000be3e:	f043 0301 	orreq.w	r3, r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
9000be42:	f880 103d 	strb.w	r1, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
9000be46:	68d1      	ldr	r1, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
9000be48:	42a2      	cmp	r2, r4
9000be4a:	bf08      	it	eq
9000be4c:	f043 0301 	orreq.w	r3, r3, #1
9000be50:	f504 6480 	add.w	r4, r4, #1024	; 0x400
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
9000be54:	f041 0101 	orr.w	r1, r1, #1
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
9000be58:	481a      	ldr	r0, [pc, #104]	; (9000bec4 <HAL_TIM_Base_Start_IT+0xac>)
9000be5a:	42a2      	cmp	r2, r4
9000be5c:	bf08      	it	eq
9000be5e:	f043 0301 	orreq.w	r3, r3, #1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
9000be62:	60d1      	str	r1, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
9000be64:	4282      	cmp	r2, r0
9000be66:	bf08      	it	eq
9000be68:	f043 0301 	orreq.w	r3, r3, #1
9000be6c:	4916      	ldr	r1, [pc, #88]	; (9000bec8 <HAL_TIM_Base_Start_IT+0xb0>)
9000be6e:	428a      	cmp	r2, r1
9000be70:	bf08      	it	eq
9000be72:	f043 0301 	orreq.w	r3, r3, #1
9000be76:	b933      	cbnz	r3, 9000be86 <HAL_TIM_Base_Start_IT+0x6e>
9000be78:	f500 5070 	add.w	r0, r0, #15360	; 0x3c00
9000be7c:	1a10      	subs	r0, r2, r0
9000be7e:	fab0 f080 	clz	r0, r0
9000be82:	0940      	lsrs	r0, r0, #5
9000be84:	b198      	cbz	r0, 9000beae <HAL_TIM_Base_Start_IT+0x96>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
9000be86:	6891      	ldr	r1, [r2, #8]
9000be88:	4b10      	ldr	r3, [pc, #64]	; (9000becc <HAL_TIM_Base_Start_IT+0xb4>)
9000be8a:	400b      	ands	r3, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
9000be8c:	2b06      	cmp	r3, #6
9000be8e:	d00b      	beq.n	9000bea8 <HAL_TIM_Base_Start_IT+0x90>
9000be90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
9000be94:	d008      	beq.n	9000bea8 <HAL_TIM_Base_Start_IT+0x90>
      __HAL_TIM_ENABLE(htim);
9000be96:	6813      	ldr	r3, [r2, #0]
  return HAL_OK;
9000be98:	2000      	movs	r0, #0
      __HAL_TIM_ENABLE(htim);
9000be9a:	f043 0301 	orr.w	r3, r3, #1
9000be9e:	6013      	str	r3, [r2, #0]
}
9000bea0:	bc30      	pop	{r4, r5}
9000bea2:	4770      	bx	lr
    return HAL_ERROR;
9000bea4:	2001      	movs	r0, #1
}
9000bea6:	4770      	bx	lr
  return HAL_OK;
9000bea8:	2000      	movs	r0, #0
}
9000beaa:	bc30      	pop	{r4, r5}
9000beac:	4770      	bx	lr
    __HAL_TIM_ENABLE(htim);
9000beae:	6813      	ldr	r3, [r2, #0]
9000beb0:	f043 0301 	orr.w	r3, r3, #1
9000beb4:	6013      	str	r3, [r2, #0]
9000beb6:	e7f3      	b.n	9000bea0 <HAL_TIM_Base_Start_IT+0x88>
9000beb8:	40010000 	.word	0x40010000
9000bebc:	40000400 	.word	0x40000400
9000bec0:	40000800 	.word	0x40000800
9000bec4:	40010400 	.word	0x40010400
9000bec8:	40001800 	.word	0x40001800
9000becc:	00010007 	.word	0x00010007

9000bed0 <HAL_TIM_OC_DelayElapsedCallback>:
9000bed0:	4770      	bx	lr
9000bed2:	bf00      	nop

9000bed4 <HAL_TIM_IC_CaptureCallback>:
9000bed4:	4770      	bx	lr
9000bed6:	bf00      	nop

9000bed8 <HAL_TIM_PWM_PulseFinishedCallback>:
9000bed8:	4770      	bx	lr
9000beda:	bf00      	nop

9000bedc <HAL_TIM_TriggerCallback>:
9000bedc:	4770      	bx	lr
9000bede:	bf00      	nop

9000bee0 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
9000bee0:	6803      	ldr	r3, [r0, #0]
9000bee2:	691a      	ldr	r2, [r3, #16]
9000bee4:	0791      	lsls	r1, r2, #30
{
9000bee6:	b510      	push	{r4, lr}
9000bee8:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
9000beea:	d502      	bpl.n	9000bef2 <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
9000beec:	68da      	ldr	r2, [r3, #12]
9000beee:	0792      	lsls	r2, r2, #30
9000bef0:	d468      	bmi.n	9000bfc4 <HAL_TIM_IRQHandler+0xe4>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
9000bef2:	691a      	ldr	r2, [r3, #16]
9000bef4:	0752      	lsls	r2, r2, #29
9000bef6:	d502      	bpl.n	9000befe <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
9000bef8:	68da      	ldr	r2, [r3, #12]
9000befa:	0750      	lsls	r0, r2, #29
9000befc:	d44f      	bmi.n	9000bf9e <HAL_TIM_IRQHandler+0xbe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
9000befe:	691a      	ldr	r2, [r3, #16]
9000bf00:	0711      	lsls	r1, r2, #28
9000bf02:	d502      	bpl.n	9000bf0a <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
9000bf04:	68da      	ldr	r2, [r3, #12]
9000bf06:	0712      	lsls	r2, r2, #28
9000bf08:	d437      	bmi.n	9000bf7a <HAL_TIM_IRQHandler+0x9a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
9000bf0a:	691a      	ldr	r2, [r3, #16]
9000bf0c:	06d0      	lsls	r0, r2, #27
9000bf0e:	d502      	bpl.n	9000bf16 <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
9000bf10:	68da      	ldr	r2, [r3, #12]
9000bf12:	06d1      	lsls	r1, r2, #27
9000bf14:	d41e      	bmi.n	9000bf54 <HAL_TIM_IRQHandler+0x74>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
9000bf16:	691a      	ldr	r2, [r3, #16]
9000bf18:	07d2      	lsls	r2, r2, #31
9000bf1a:	d502      	bpl.n	9000bf22 <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
9000bf1c:	68da      	ldr	r2, [r3, #12]
9000bf1e:	07d0      	lsls	r0, r2, #31
9000bf20:	d469      	bmi.n	9000bff6 <HAL_TIM_IRQHandler+0x116>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
9000bf22:	691a      	ldr	r2, [r3, #16]
9000bf24:	0611      	lsls	r1, r2, #24
9000bf26:	d502      	bpl.n	9000bf2e <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
9000bf28:	68da      	ldr	r2, [r3, #12]
9000bf2a:	0612      	lsls	r2, r2, #24
9000bf2c:	d46b      	bmi.n	9000c006 <HAL_TIM_IRQHandler+0x126>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
9000bf2e:	691a      	ldr	r2, [r3, #16]
9000bf30:	05d0      	lsls	r0, r2, #23
9000bf32:	d502      	bpl.n	9000bf3a <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
9000bf34:	68da      	ldr	r2, [r3, #12]
9000bf36:	0611      	lsls	r1, r2, #24
9000bf38:	d46d      	bmi.n	9000c016 <HAL_TIM_IRQHandler+0x136>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
9000bf3a:	691a      	ldr	r2, [r3, #16]
9000bf3c:	0652      	lsls	r2, r2, #25
9000bf3e:	d502      	bpl.n	9000bf46 <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
9000bf40:	68da      	ldr	r2, [r3, #12]
9000bf42:	0650      	lsls	r0, r2, #25
9000bf44:	d46f      	bmi.n	9000c026 <HAL_TIM_IRQHandler+0x146>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
9000bf46:	691a      	ldr	r2, [r3, #16]
9000bf48:	0691      	lsls	r1, r2, #26
9000bf4a:	d502      	bpl.n	9000bf52 <HAL_TIM_IRQHandler+0x72>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
9000bf4c:	68da      	ldr	r2, [r3, #12]
9000bf4e:	0692      	lsls	r2, r2, #26
9000bf50:	d449      	bmi.n	9000bfe6 <HAL_TIM_IRQHandler+0x106>
}
9000bf52:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
9000bf54:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
9000bf58:	2208      	movs	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
9000bf5a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
9000bf5c:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
9000bf5e:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
9000bf60:	69db      	ldr	r3, [r3, #28]
9000bf62:	f413 7f40 	tst.w	r3, #768	; 0x300
9000bf66:	d16f      	bne.n	9000c048 <HAL_TIM_IRQHandler+0x168>
        HAL_TIM_OC_DelayElapsedCallback(htim);
9000bf68:	f7ff ffb2 	bl	9000bed0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
9000bf6c:	4620      	mov	r0, r4
9000bf6e:	f7ff ffb3 	bl	9000bed8 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
9000bf72:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
9000bf74:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
9000bf76:	7722      	strb	r2, [r4, #28]
9000bf78:	e7cd      	b.n	9000bf16 <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
9000bf7a:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
9000bf7e:	2204      	movs	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
9000bf80:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
9000bf82:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
9000bf84:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
9000bf86:	69db      	ldr	r3, [r3, #28]
9000bf88:	079b      	lsls	r3, r3, #30
9000bf8a:	d15a      	bne.n	9000c042 <HAL_TIM_IRQHandler+0x162>
        HAL_TIM_OC_DelayElapsedCallback(htim);
9000bf8c:	f7ff ffa0 	bl	9000bed0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
9000bf90:	4620      	mov	r0, r4
9000bf92:	f7ff ffa1 	bl	9000bed8 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
9000bf96:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
9000bf98:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
9000bf9a:	7722      	strb	r2, [r4, #28]
9000bf9c:	e7b5      	b.n	9000bf0a <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
9000bf9e:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
9000bfa2:	2202      	movs	r2, #2
        HAL_TIM_IC_CaptureCallback(htim);
9000bfa4:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
9000bfa6:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
9000bfa8:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
9000bfaa:	699b      	ldr	r3, [r3, #24]
9000bfac:	f413 7f40 	tst.w	r3, #768	; 0x300
9000bfb0:	d144      	bne.n	9000c03c <HAL_TIM_IRQHandler+0x15c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
9000bfb2:	f7ff ff8d 	bl	9000bed0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
9000bfb6:	4620      	mov	r0, r4
9000bfb8:	f7ff ff8e 	bl	9000bed8 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
9000bfbc:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
9000bfbe:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
9000bfc0:	7722      	strb	r2, [r4, #28]
9000bfc2:	e79c      	b.n	9000befe <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
9000bfc4:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
9000bfc8:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
9000bfca:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
9000bfcc:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
9000bfce:	699b      	ldr	r3, [r3, #24]
9000bfd0:	0799      	lsls	r1, r3, #30
9000bfd2:	d130      	bne.n	9000c036 <HAL_TIM_IRQHandler+0x156>
          HAL_TIM_OC_DelayElapsedCallback(htim);
9000bfd4:	f7ff ff7c 	bl	9000bed0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
9000bfd8:	4620      	mov	r0, r4
9000bfda:	f7ff ff7d 	bl	9000bed8 <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
9000bfde:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
9000bfe0:	6823      	ldr	r3, [r4, #0]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
9000bfe2:	7722      	strb	r2, [r4, #28]
9000bfe4:	e785      	b.n	9000bef2 <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
9000bfe6:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
9000bfea:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
9000bfec:	611a      	str	r2, [r3, #16]
}
9000bfee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
9000bff2:	f000 b82d 	b.w	9000c050 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
9000bff6:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
9000bffa:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
9000bffc:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
9000bffe:	f7f7 fd2f 	bl	90003a60 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
9000c002:	6823      	ldr	r3, [r4, #0]
9000c004:	e78d      	b.n	9000bf22 <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
9000c006:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
9000c00a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
9000c00c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
9000c00e:	f000 f821 	bl	9000c054 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
9000c012:	6823      	ldr	r3, [r4, #0]
9000c014:	e78b      	b.n	9000bf2e <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
9000c016:	f46f 7280 	mvn.w	r2, #256	; 0x100
      HAL_TIMEx_Break2Callback(htim);
9000c01a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
9000c01c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
9000c01e:	f000 f81b 	bl	9000c058 <HAL_TIMEx_Break2Callback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
9000c022:	6823      	ldr	r3, [r4, #0]
9000c024:	e789      	b.n	9000bf3a <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
9000c026:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
9000c02a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
9000c02c:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
9000c02e:	f7ff ff55 	bl	9000bedc <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
9000c032:	6823      	ldr	r3, [r4, #0]
9000c034:	e787      	b.n	9000bf46 <HAL_TIM_IRQHandler+0x66>
          HAL_TIM_IC_CaptureCallback(htim);
9000c036:	f7ff ff4d 	bl	9000bed4 <HAL_TIM_IC_CaptureCallback>
9000c03a:	e7d0      	b.n	9000bfde <HAL_TIM_IRQHandler+0xfe>
        HAL_TIM_IC_CaptureCallback(htim);
9000c03c:	f7ff ff4a 	bl	9000bed4 <HAL_TIM_IC_CaptureCallback>
9000c040:	e7bc      	b.n	9000bfbc <HAL_TIM_IRQHandler+0xdc>
        HAL_TIM_IC_CaptureCallback(htim);
9000c042:	f7ff ff47 	bl	9000bed4 <HAL_TIM_IC_CaptureCallback>
9000c046:	e7a6      	b.n	9000bf96 <HAL_TIM_IRQHandler+0xb6>
        HAL_TIM_IC_CaptureCallback(htim);
9000c048:	f7ff ff44 	bl	9000bed4 <HAL_TIM_IC_CaptureCallback>
9000c04c:	e791      	b.n	9000bf72 <HAL_TIM_IRQHandler+0x92>
9000c04e:	bf00      	nop

9000c050 <HAL_TIMEx_CommutCallback>:
9000c050:	4770      	bx	lr
9000c052:	bf00      	nop

9000c054 <HAL_TIMEx_BreakCallback>:
9000c054:	4770      	bx	lr
9000c056:	bf00      	nop

9000c058 <HAL_TIMEx_Break2Callback>:
9000c058:	4770      	bx	lr
9000c05a:	bf00      	nop

9000c05c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
9000c05c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
9000c060:	461d      	mov	r5, r3
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
9000c062:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
9000c066:	2b20      	cmp	r3, #32
9000c068:	f040 8091 	bne.w	9000c18e <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
9000c06c:	4688      	mov	r8, r1
9000c06e:	2900      	cmp	r1, #0
9000c070:	d03e      	beq.n	9000c0f0 <HAL_UART_Transmit+0x94>
9000c072:	fab2 f982 	clz	r9, r2
9000c076:	4616      	mov	r6, r2
9000c078:	ea4f 1959 	mov.w	r9, r9, lsr #5
9000c07c:	2a00      	cmp	r2, #0
9000c07e:	d037      	beq.n	9000c0f0 <HAL_UART_Transmit+0x94>
    {
      return  HAL_ERROR;
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
    huart->gState = HAL_UART_STATE_BUSY_TX;
9000c080:	2321      	movs	r3, #33	; 0x21
9000c082:	4604      	mov	r4, r0
    huart->ErrorCode = HAL_UART_ERROR_NONE;
9000c084:	f8c0 9090 	str.w	r9, [r0, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
9000c088:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
9000c08c:	f7fa f896 	bl	900061bc <HAL_GetTick>

    huart->TxXferSize  = Size;
    huart->TxXferCount = Size;

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
9000c090:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
9000c092:	4607      	mov	r7, r0
    huart->TxXferSize  = Size;
9000c094:	f8a4 6054 	strh.w	r6, [r4, #84]	; 0x54
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
9000c098:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferCount = Size;
9000c09c:	f8a4 6056 	strh.w	r6, [r4, #86]	; 0x56
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
9000c0a0:	f000 80b7 	beq.w	9000c212 <HAL_UART_Transmit+0x1b6>
    {
      pdata8bits  = pData;
      pdata16bits = NULL;
    }

    while (huart->TxXferCount > 0U)
9000c0a4:	f8b4 3056 	ldrh.w	r3, [r4, #86]	; 0x56
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
9000c0a8:	6820      	ldr	r0, [r4, #0]
    while (huart->TxXferCount > 0U)
9000c0aa:	b29b      	uxth	r3, r3
9000c0ac:	b1ab      	cbz	r3, 9000c0da <HAL_UART_Transmit+0x7e>
9000c0ae:	1c6a      	adds	r2, r5, #1
9000c0b0:	d121      	bne.n	9000c0f6 <HAL_UART_Transmit+0x9a>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
9000c0b2:	69c2      	ldr	r2, [r0, #28]
9000c0b4:	0613      	lsls	r3, r2, #24
9000c0b6:	d5fc      	bpl.n	9000c0b2 <HAL_UART_Transmit+0x56>
      if (pdata8bits == NULL)
9000c0b8:	f1b8 0f00 	cmp.w	r8, #0
9000c0bc:	d062      	beq.n	9000c184 <HAL_UART_Transmit+0x128>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
9000c0be:	f818 3b01 	ldrb.w	r3, [r8], #1
9000c0c2:	6283      	str	r3, [r0, #40]	; 0x28
      huart->TxXferCount--;
9000c0c4:	f8b4 3056 	ldrh.w	r3, [r4, #86]	; 0x56
9000c0c8:	3b01      	subs	r3, #1
9000c0ca:	b29b      	uxth	r3, r3
9000c0cc:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
    while (huart->TxXferCount > 0U)
9000c0d0:	f8b4 3056 	ldrh.w	r3, [r4, #86]	; 0x56
9000c0d4:	b29b      	uxth	r3, r3
9000c0d6:	2b00      	cmp	r3, #0
9000c0d8:	d1e9      	bne.n	9000c0ae <HAL_UART_Transmit+0x52>
9000c0da:	1c69      	adds	r1, r5, #1
9000c0dc:	d15a      	bne.n	9000c194 <HAL_UART_Transmit+0x138>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
9000c0de:	69c3      	ldr	r3, [r0, #28]
9000c0e0:	065a      	lsls	r2, r3, #25
9000c0e2:	d5fc      	bpl.n	9000c0de <HAL_UART_Transmit+0x82>
    huart->gState = HAL_UART_STATE_READY;
9000c0e4:	2320      	movs	r3, #32
    return HAL_OK;
9000c0e6:	2000      	movs	r0, #0
    huart->gState = HAL_UART_STATE_READY;
9000c0e8:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
}
9000c0ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      return  HAL_ERROR;
9000c0f0:	2001      	movs	r0, #1
}
9000c0f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
9000c0f6:	69c3      	ldr	r3, [r0, #28]
9000c0f8:	061e      	lsls	r6, r3, #24
9000c0fa:	d4dd      	bmi.n	9000c0b8 <HAL_UART_Transmit+0x5c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
9000c0fc:	f7fa f85e 	bl	900061bc <HAL_GetTick>
9000c100:	1bc0      	subs	r0, r0, r7
9000c102:	4285      	cmp	r5, r0
9000c104:	d338      	bcc.n	9000c178 <HAL_UART_Transmit+0x11c>
9000c106:	2d00      	cmp	r5, #0
9000c108:	d036      	beq.n	9000c178 <HAL_UART_Transmit+0x11c>
      {

        return HAL_TIMEOUT;
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
9000c10a:	6823      	ldr	r3, [r4, #0]
9000c10c:	681a      	ldr	r2, [r3, #0]
9000c10e:	4618      	mov	r0, r3
9000c110:	0752      	lsls	r2, r2, #29
9000c112:	d5cc      	bpl.n	9000c0ae <HAL_UART_Transmit+0x52>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
9000c114:	69da      	ldr	r2, [r3, #28]
9000c116:	0716      	lsls	r6, r2, #28
9000c118:	f100 808b 	bmi.w	9000c232 <HAL_UART_Transmit+0x1d6>
           /* Process Unlocked */
           __HAL_UNLOCK(huart);

           return HAL_ERROR;
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
9000c11c:	69da      	ldr	r2, [r3, #28]
9000c11e:	0511      	lsls	r1, r2, #20
9000c120:	d5c5      	bpl.n	9000c0ae <HAL_UART_Transmit+0x52>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
9000c122:	f44f 6200 	mov.w	r2, #2048	; 0x800
9000c126:	621a      	str	r2, [r3, #32]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000c128:	e853 2f00 	ldrex	r2, [r3]
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
9000c12c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000c130:	e843 2100 	strex	r1, r2, [r3]
9000c134:	b139      	cbz	r1, 9000c146 <HAL_UART_Transmit+0xea>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000c136:	e853 2f00 	ldrex	r2, [r3]
9000c13a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000c13e:	e843 2100 	strex	r1, r2, [r3]
9000c142:	2900      	cmp	r1, #0
9000c144:	d1f7      	bne.n	9000c136 <HAL_UART_Transmit+0xda>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
9000c146:	4863      	ldr	r0, [pc, #396]	; (9000c2d4 <HAL_UART_Transmit+0x278>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000c148:	f103 0208 	add.w	r2, r3, #8
9000c14c:	e852 2f00 	ldrex	r2, [r2]
9000c150:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000c152:	f103 0508 	add.w	r5, r3, #8
9000c156:	e845 2100 	strex	r1, r2, [r5]
9000c15a:	2900      	cmp	r1, #0
9000c15c:	d1f4      	bne.n	9000c148 <HAL_UART_Transmit+0xec>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
9000c15e:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
9000c160:	2a01      	cmp	r2, #1
9000c162:	d05d      	beq.n	9000c220 <HAL_UART_Transmit+0x1c4>
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
9000c164:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_READY;
9000c166:	2220      	movs	r2, #32

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
9000c168:	6763      	str	r3, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
9000c16a:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
          __HAL_UNLOCK(huart);
9000c16e:	f884 3084 	strb.w	r3, [r4, #132]	; 0x84
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
9000c172:	66e3      	str	r3, [r4, #108]	; 0x6c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
9000c174:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
      huart->gState = HAL_UART_STATE_READY;
9000c178:	2320      	movs	r3, #32
      return HAL_TIMEOUT;
9000c17a:	2003      	movs	r0, #3
      huart->gState = HAL_UART_STATE_READY;
9000c17c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
}
9000c180:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
9000c184:	f839 3b02 	ldrh.w	r3, [r9], #2
9000c188:	f3c3 0308 	ubfx	r3, r3, #0, #9
9000c18c:	e799      	b.n	9000c0c2 <HAL_UART_Transmit+0x66>
    return HAL_BUSY;
9000c18e:	2002      	movs	r0, #2
}
9000c190:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
9000c194:	69c3      	ldr	r3, [r0, #28]
9000c196:	065b      	lsls	r3, r3, #25
9000c198:	d4a4      	bmi.n	9000c0e4 <HAL_UART_Transmit+0x88>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
9000c19a:	f7fa f80f 	bl	900061bc <HAL_GetTick>
9000c19e:	1bc0      	subs	r0, r0, r7
9000c1a0:	4285      	cmp	r5, r0
9000c1a2:	d3e9      	bcc.n	9000c178 <HAL_UART_Transmit+0x11c>
9000c1a4:	2d00      	cmp	r5, #0
9000c1a6:	d0e7      	beq.n	9000c178 <HAL_UART_Transmit+0x11c>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
9000c1a8:	6823      	ldr	r3, [r4, #0]
9000c1aa:	681a      	ldr	r2, [r3, #0]
9000c1ac:	4618      	mov	r0, r3
9000c1ae:	0751      	lsls	r1, r2, #29
9000c1b0:	d593      	bpl.n	9000c0da <HAL_UART_Transmit+0x7e>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
9000c1b2:	69da      	ldr	r2, [r3, #28]
9000c1b4:	0712      	lsls	r2, r2, #28
9000c1b6:	d46a      	bmi.n	9000c28e <HAL_UART_Transmit+0x232>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
9000c1b8:	69da      	ldr	r2, [r3, #28]
9000c1ba:	0516      	lsls	r6, r2, #20
9000c1bc:	d58d      	bpl.n	9000c0da <HAL_UART_Transmit+0x7e>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
9000c1be:	f44f 6200 	mov.w	r2, #2048	; 0x800
9000c1c2:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000c1c4:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
9000c1c8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000c1cc:	e843 2100 	strex	r1, r2, [r3]
9000c1d0:	b139      	cbz	r1, 9000c1e2 <HAL_UART_Transmit+0x186>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000c1d2:	e853 2f00 	ldrex	r2, [r3]
9000c1d6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000c1da:	e843 2100 	strex	r1, r2, [r3]
9000c1de:	2900      	cmp	r1, #0
9000c1e0:	d1f7      	bne.n	9000c1d2 <HAL_UART_Transmit+0x176>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
9000c1e2:	493c      	ldr	r1, [pc, #240]	; (9000c2d4 <HAL_UART_Transmit+0x278>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000c1e4:	f103 0208 	add.w	r2, r3, #8
9000c1e8:	e852 2f00 	ldrex	r2, [r2]
9000c1ec:	400a      	ands	r2, r1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000c1ee:	f103 0508 	add.w	r5, r3, #8
9000c1f2:	e845 2000 	strex	r0, r2, [r5]
9000c1f6:	2800      	cmp	r0, #0
9000c1f8:	d1f4      	bne.n	9000c1e4 <HAL_UART_Transmit+0x188>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
9000c1fa:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
9000c1fc:	2a01      	cmp	r2, #1
9000c1fe:	d1b1      	bne.n	9000c164 <HAL_UART_Transmit+0x108>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000c200:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
9000c204:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000c208:	e843 2100 	strex	r1, r2, [r3]
9000c20c:	2900      	cmp	r1, #0
9000c20e:	d1f7      	bne.n	9000c200 <HAL_UART_Transmit+0x1a4>
9000c210:	e7a8      	b.n	9000c164 <HAL_UART_Transmit+0x108>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
9000c212:	6923      	ldr	r3, [r4, #16]
9000c214:	2b00      	cmp	r3, #0
9000c216:	f47f af45 	bne.w	9000c0a4 <HAL_UART_Transmit+0x48>
9000c21a:	46c1      	mov	r9, r8
      pdata8bits  = NULL;
9000c21c:	4698      	mov	r8, r3
9000c21e:	e741      	b.n	9000c0a4 <HAL_UART_Transmit+0x48>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000c220:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
9000c224:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000c228:	e843 2100 	strex	r1, r2, [r3]
9000c22c:	2900      	cmp	r1, #0
9000c22e:	d1f7      	bne.n	9000c220 <HAL_UART_Transmit+0x1c4>
9000c230:	e798      	b.n	9000c164 <HAL_UART_Transmit+0x108>
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
9000c232:	2208      	movs	r2, #8
9000c234:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000c236:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
9000c23a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000c23e:	e843 2100 	strex	r1, r2, [r3]
9000c242:	2900      	cmp	r1, #0
9000c244:	d1f7      	bne.n	9000c236 <HAL_UART_Transmit+0x1da>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
9000c246:	4823      	ldr	r0, [pc, #140]	; (9000c2d4 <HAL_UART_Transmit+0x278>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000c248:	f103 0208 	add.w	r2, r3, #8
9000c24c:	e852 2f00 	ldrex	r2, [r2]
9000c250:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000c252:	f103 0508 	add.w	r5, r3, #8
9000c256:	e845 2100 	strex	r1, r2, [r5]
9000c25a:	2900      	cmp	r1, #0
9000c25c:	d1f4      	bne.n	9000c248 <HAL_UART_Transmit+0x1ec>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
9000c25e:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
9000c260:	2a01      	cmp	r2, #1
9000c262:	d00b      	beq.n	9000c27c <HAL_UART_Transmit+0x220>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
9000c264:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_READY;
9000c266:	2120      	movs	r1, #32
           huart->ErrorCode = HAL_UART_ERROR_ORE;
9000c268:	2208      	movs	r2, #8
  huart->RxState = HAL_UART_STATE_READY;
9000c26a:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
  huart->RxISR = NULL;
9000c26e:	6763      	str	r3, [r4, #116]	; 0x74
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
9000c270:	66e3      	str	r3, [r4, #108]	; 0x6c
           __HAL_UNLOCK(huart);
9000c272:	f884 3084 	strb.w	r3, [r4, #132]	; 0x84
           huart->ErrorCode = HAL_UART_ERROR_ORE;
9000c276:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
           return HAL_ERROR;
9000c27a:	e77d      	b.n	9000c178 <HAL_UART_Transmit+0x11c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000c27c:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
9000c280:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000c284:	e843 2100 	strex	r1, r2, [r3]
9000c288:	2900      	cmp	r1, #0
9000c28a:	d1f7      	bne.n	9000c27c <HAL_UART_Transmit+0x220>
9000c28c:	e7ea      	b.n	9000c264 <HAL_UART_Transmit+0x208>
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
9000c28e:	2208      	movs	r2, #8
9000c290:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000c292:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
9000c296:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000c29a:	e843 2100 	strex	r1, r2, [r3]
9000c29e:	2900      	cmp	r1, #0
9000c2a0:	d1f7      	bne.n	9000c292 <HAL_UART_Transmit+0x236>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
9000c2a2:	490c      	ldr	r1, [pc, #48]	; (9000c2d4 <HAL_UART_Transmit+0x278>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000c2a4:	f103 0208 	add.w	r2, r3, #8
9000c2a8:	e852 2f00 	ldrex	r2, [r2]
9000c2ac:	400a      	ands	r2, r1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000c2ae:	f103 0508 	add.w	r5, r3, #8
9000c2b2:	e845 2000 	strex	r0, r2, [r5]
9000c2b6:	2800      	cmp	r0, #0
9000c2b8:	d1f4      	bne.n	9000c2a4 <HAL_UART_Transmit+0x248>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
9000c2ba:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
9000c2bc:	2a01      	cmp	r2, #1
9000c2be:	d1d1      	bne.n	9000c264 <HAL_UART_Transmit+0x208>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000c2c0:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
9000c2c4:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000c2c8:	e843 2100 	strex	r1, r2, [r3]
9000c2cc:	2900      	cmp	r1, #0
9000c2ce:	d1f7      	bne.n	9000c2c0 <HAL_UART_Transmit+0x264>
9000c2d0:	e7c8      	b.n	9000c264 <HAL_UART_Transmit+0x208>
9000c2d2:	bf00      	nop
9000c2d4:	effffffe 	.word	0xeffffffe

9000c2d8 <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
9000c2d8:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
9000c2dc:	2b20      	cmp	r3, #32
9000c2de:	d15e      	bne.n	9000c39e <HAL_UART_Receive_IT+0xc6>
    if ((pData == NULL) || (Size == 0U))
9000c2e0:	2900      	cmp	r1, #0
9000c2e2:	d061      	beq.n	9000c3a8 <HAL_UART_Receive_IT+0xd0>
{
9000c2e4:	b430      	push	{r4, r5}
    if ((pData == NULL) || (Size == 0U))
9000c2e6:	fab2 f482 	clz	r4, r2
9000c2ea:	0964      	lsrs	r4, r4, #5
9000c2ec:	2a00      	cmp	r2, #0
9000c2ee:	d058      	beq.n	9000c3a2 <HAL_UART_Receive_IT+0xca>
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
9000c2f0:	6803      	ldr	r3, [r0, #0]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
9000c2f2:	66c4      	str	r4, [r0, #108]	; 0x6c
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
9000c2f4:	4c56      	ldr	r4, [pc, #344]	; (9000c450 <HAL_UART_Receive_IT+0x178>)
9000c2f6:	42a3      	cmp	r3, r4
9000c2f8:	d002      	beq.n	9000c300 <HAL_UART_Receive_IT+0x28>
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
9000c2fa:	685c      	ldr	r4, [r3, #4]
9000c2fc:	0224      	lsls	r4, r4, #8
9000c2fe:	d43d      	bmi.n	9000c37c <HAL_UART_Receive_IT+0xa4>
  huart->pRxBuffPtr  = pData;
9000c300:	6581      	str	r1, [r0, #88]	; 0x58
  huart->RxISR       = NULL;
9000c302:	2400      	movs	r4, #0
  UART_MASK_COMPUTATION(huart);
9000c304:	6881      	ldr	r1, [r0, #8]
  huart->RxXferSize  = Size;
9000c306:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
  UART_MASK_COMPUTATION(huart);
9000c30a:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
  huart->RxXferCount = Size;
9000c30e:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e
  huart->RxISR       = NULL;
9000c312:	6744      	str	r4, [r0, #116]	; 0x74
  UART_MASK_COMPUTATION(huart);
9000c314:	d069      	beq.n	9000c3ea <HAL_UART_Receive_IT+0x112>
9000c316:	2900      	cmp	r1, #0
9000c318:	d148      	bne.n	9000c3ac <HAL_UART_Receive_IT+0xd4>
9000c31a:	6901      	ldr	r1, [r0, #16]
9000c31c:	2900      	cmp	r1, #0
9000c31e:	bf14      	ite	ne
9000c320:	247f      	movne	r4, #127	; 0x7f
9000c322:	24ff      	moveq	r4, #255	; 0xff
  huart->ErrorCode = HAL_UART_ERROR_NONE;
9000c324:	2100      	movs	r1, #0
  UART_MASK_COMPUTATION(huart);
9000c326:	f8a0 4060 	strh.w	r4, [r0, #96]	; 0x60
  huart->ErrorCode = HAL_UART_ERROR_NONE;
9000c32a:	f8c0 1090 	str.w	r1, [r0, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
9000c32e:	2122      	movs	r1, #34	; 0x22
9000c330:	f8c0 108c 	str.w	r1, [r0, #140]	; 0x8c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000c334:	f103 0108 	add.w	r1, r3, #8
9000c338:	e851 1f00 	ldrex	r1, [r1]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
9000c33c:	f041 0101 	orr.w	r1, r1, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000c340:	f103 0508 	add.w	r5, r3, #8
9000c344:	e845 1400 	strex	r4, r1, [r5]
9000c348:	2c00      	cmp	r4, #0
9000c34a:	d1f3      	bne.n	9000c334 <HAL_UART_Receive_IT+0x5c>
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
9000c34c:	6e41      	ldr	r1, [r0, #100]	; 0x64
9000c34e:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
9000c352:	d051      	beq.n	9000c3f8 <HAL_UART_Receive_IT+0x120>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
9000c354:	6882      	ldr	r2, [r0, #8]
9000c356:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
9000c35a:	d030      	beq.n	9000c3be <HAL_UART_Receive_IT+0xe6>
9000c35c:	493d      	ldr	r1, [pc, #244]	; (9000c454 <HAL_UART_Receive_IT+0x17c>)
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
9000c35e:	6902      	ldr	r2, [r0, #16]
      huart->RxISR = UART_RxISR_8BIT;
9000c360:	6741      	str	r1, [r0, #116]	; 0x74
    if (huart->Init.Parity != UART_PARITY_NONE)
9000c362:	2a00      	cmp	r2, #0
9000c364:	d030      	beq.n	9000c3c8 <HAL_UART_Receive_IT+0xf0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000c366:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
9000c36a:	f442 7290 	orr.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000c36e:	e843 2100 	strex	r1, r2, [r3]
9000c372:	2900      	cmp	r1, #0
9000c374:	d1f7      	bne.n	9000c366 <HAL_UART_Receive_IT+0x8e>
    return (UART_Start_Receive_IT(huart, pData, Size));
9000c376:	2000      	movs	r0, #0
}
9000c378:	bc30      	pop	{r4, r5}
9000c37a:	4770      	bx	lr
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000c37c:	e853 4f00 	ldrex	r4, [r3]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
9000c380:	f044 6480 	orr.w	r4, r4, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000c384:	e843 4500 	strex	r5, r4, [r3]
9000c388:	2d00      	cmp	r5, #0
9000c38a:	d0b9      	beq.n	9000c300 <HAL_UART_Receive_IT+0x28>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000c38c:	e853 4f00 	ldrex	r4, [r3]
9000c390:	f044 6480 	orr.w	r4, r4, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000c394:	e843 4500 	strex	r5, r4, [r3]
9000c398:	2d00      	cmp	r5, #0
9000c39a:	d1ef      	bne.n	9000c37c <HAL_UART_Receive_IT+0xa4>
9000c39c:	e7b0      	b.n	9000c300 <HAL_UART_Receive_IT+0x28>
    return HAL_BUSY;
9000c39e:	2002      	movs	r0, #2
9000c3a0:	4770      	bx	lr
      return HAL_ERROR;
9000c3a2:	2001      	movs	r0, #1
}
9000c3a4:	bc30      	pop	{r4, r5}
9000c3a6:	4770      	bx	lr
      return HAL_ERROR;
9000c3a8:	2001      	movs	r0, #1
}
9000c3aa:	4770      	bx	lr
  UART_MASK_COMPUTATION(huart);
9000c3ac:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
9000c3b0:	d1b8      	bne.n	9000c324 <HAL_UART_Receive_IT+0x4c>
9000c3b2:	6901      	ldr	r1, [r0, #16]
9000c3b4:	2900      	cmp	r1, #0
9000c3b6:	bf0c      	ite	eq
9000c3b8:	247f      	moveq	r4, #127	; 0x7f
9000c3ba:	243f      	movne	r4, #63	; 0x3f
9000c3bc:	e7b2      	b.n	9000c324 <HAL_UART_Receive_IT+0x4c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
9000c3be:	6902      	ldr	r2, [r0, #16]
9000c3c0:	2a00      	cmp	r2, #0
9000c3c2:	d13a      	bne.n	9000c43a <HAL_UART_Receive_IT+0x162>
9000c3c4:	4a24      	ldr	r2, [pc, #144]	; (9000c458 <HAL_UART_Receive_IT+0x180>)
9000c3c6:	6742      	str	r2, [r0, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000c3c8:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
9000c3cc:	f042 0220 	orr.w	r2, r2, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000c3d0:	e843 2100 	strex	r1, r2, [r3]
9000c3d4:	2900      	cmp	r1, #0
9000c3d6:	d0ce      	beq.n	9000c376 <HAL_UART_Receive_IT+0x9e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000c3d8:	e853 2f00 	ldrex	r2, [r3]
9000c3dc:	f042 0220 	orr.w	r2, r2, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000c3e0:	e843 2100 	strex	r1, r2, [r3]
9000c3e4:	2900      	cmp	r1, #0
9000c3e6:	d1ef      	bne.n	9000c3c8 <HAL_UART_Receive_IT+0xf0>
9000c3e8:	e7c5      	b.n	9000c376 <HAL_UART_Receive_IT+0x9e>
  UART_MASK_COMPUTATION(huart);
9000c3ea:	6901      	ldr	r1, [r0, #16]
9000c3ec:	f240 14ff 	movw	r4, #511	; 0x1ff
9000c3f0:	2900      	cmp	r1, #0
9000c3f2:	bf18      	it	ne
9000c3f4:	24ff      	movne	r4, #255	; 0xff
9000c3f6:	e795      	b.n	9000c324 <HAL_UART_Receive_IT+0x4c>
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
9000c3f8:	f8b0 1068 	ldrh.w	r1, [r0, #104]	; 0x68
9000c3fc:	4291      	cmp	r1, r2
9000c3fe:	d8a9      	bhi.n	9000c354 <HAL_UART_Receive_IT+0x7c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
9000c400:	6882      	ldr	r2, [r0, #8]
9000c402:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
9000c406:	d01b      	beq.n	9000c440 <HAL_UART_Receive_IT+0x168>
9000c408:	4914      	ldr	r1, [pc, #80]	; (9000c45c <HAL_UART_Receive_IT+0x184>)
9000c40a:	6902      	ldr	r2, [r0, #16]
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
9000c40c:	6741      	str	r1, [r0, #116]	; 0x74
    if (huart->Init.Parity != UART_PARITY_NONE)
9000c40e:	b13a      	cbz	r2, 9000c420 <HAL_UART_Receive_IT+0x148>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000c410:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
9000c414:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000c418:	e843 2100 	strex	r1, r2, [r3]
9000c41c:	2900      	cmp	r1, #0
9000c41e:	d1f7      	bne.n	9000c410 <HAL_UART_Receive_IT+0x138>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000c420:	f103 0208 	add.w	r2, r3, #8
9000c424:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
9000c428:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000c42c:	f103 0008 	add.w	r0, r3, #8
9000c430:	e840 2100 	strex	r1, r2, [r0]
9000c434:	2900      	cmp	r1, #0
9000c436:	d1f3      	bne.n	9000c420 <HAL_UART_Receive_IT+0x148>
9000c438:	e79d      	b.n	9000c376 <HAL_UART_Receive_IT+0x9e>
      huart->RxISR = UART_RxISR_8BIT;
9000c43a:	4a06      	ldr	r2, [pc, #24]	; (9000c454 <HAL_UART_Receive_IT+0x17c>)
9000c43c:	6742      	str	r2, [r0, #116]	; 0x74
    if (huart->Init.Parity != UART_PARITY_NONE)
9000c43e:	e792      	b.n	9000c366 <HAL_UART_Receive_IT+0x8e>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
9000c440:	6902      	ldr	r2, [r0, #16]
9000c442:	b912      	cbnz	r2, 9000c44a <HAL_UART_Receive_IT+0x172>
9000c444:	4a06      	ldr	r2, [pc, #24]	; (9000c460 <HAL_UART_Receive_IT+0x188>)
9000c446:	6742      	str	r2, [r0, #116]	; 0x74
    if (huart->Init.Parity != UART_PARITY_NONE)
9000c448:	e7ea      	b.n	9000c420 <HAL_UART_Receive_IT+0x148>
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
9000c44a:	4a04      	ldr	r2, [pc, #16]	; (9000c45c <HAL_UART_Receive_IT+0x184>)
9000c44c:	6742      	str	r2, [r0, #116]	; 0x74
    if (huart->Init.Parity != UART_PARITY_NONE)
9000c44e:	e7df      	b.n	9000c410 <HAL_UART_Receive_IT+0x138>
9000c450:	58000c00 	.word	0x58000c00
9000c454:	9000c8ed 	.word	0x9000c8ed
9000c458:	9000c8a1 	.word	0x9000c8a1
9000c45c:	9000c92d 	.word	0x9000c92d
9000c460:	9000cb1d 	.word	0x9000cb1d

9000c464 <HAL_UART_TxCpltCallback>:
9000c464:	4770      	bx	lr
9000c466:	bf00      	nop

9000c468 <HAL_UART_ErrorCallback>:
9000c468:	4770      	bx	lr
9000c46a:	bf00      	nop

9000c46c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
9000c46c:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
9000c46e:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
9000c470:	2300      	movs	r3, #0
9000c472:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
  huart->TxXferCount = 0U;
9000c476:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
9000c47a:	f7ff fff5 	bl	9000c468 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
9000c47e:	bd08      	pop	{r3, pc}

9000c480 <HAL_UARTEx_RxEventCallback>:
}
9000c480:	4770      	bx	lr
9000c482:	bf00      	nop

9000c484 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
9000c484:	6803      	ldr	r3, [r0, #0]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
9000c486:	f640 0c0f 	movw	ip, #2063	; 0x80f
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
9000c48a:	69da      	ldr	r2, [r3, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
9000c48c:	6819      	ldr	r1, [r3, #0]
  if (errorflags == 0U)
9000c48e:	ea12 0f0c 	tst.w	r2, ip
{
9000c492:	b570      	push	{r4, r5, r6, lr}
9000c494:	4604      	mov	r4, r0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
9000c496:	689d      	ldr	r5, [r3, #8]
  if (errorflags == 0U)
9000c498:	f000 8122 	beq.w	9000c6e0 <HAL_UART_IRQHandler+0x25c>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
9000c49c:	48b1      	ldr	r0, [pc, #708]	; (9000c764 <HAL_UART_IRQHandler+0x2e0>)
9000c49e:	ea05 0c00 	and.w	ip, r5, r0
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
9000c4a2:	48b1      	ldr	r0, [pc, #708]	; (9000c768 <HAL_UART_IRQHandler+0x2e4>)
9000c4a4:	4008      	ands	r0, r1
9000c4a6:	ea50 000c 	orrs.w	r0, r0, ip
9000c4aa:	f040 8089 	bne.w	9000c5c0 <HAL_UART_IRQHandler+0x13c>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
9000c4ae:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
9000c4b0:	2801      	cmp	r0, #1
9000c4b2:	d022      	beq.n	9000c4fa <HAL_UART_IRQHandler+0x76>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
9000c4b4:	02d6      	lsls	r6, r2, #11
9000c4b6:	d502      	bpl.n	9000c4be <HAL_UART_IRQHandler+0x3a>
9000c4b8:	0268      	lsls	r0, r5, #9
9000c4ba:	f100 813a 	bmi.w	9000c732 <HAL_UART_IRQHandler+0x2ae>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
9000c4be:	0616      	lsls	r6, r2, #24
9000c4c0:	d506      	bpl.n	9000c4d0 <HAL_UART_IRQHandler+0x4c>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
9000c4c2:	f405 0500 	and.w	r5, r5, #8388608	; 0x800000
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
9000c4c6:	f001 0080 	and.w	r0, r1, #128	; 0x80
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
9000c4ca:	4328      	orrs	r0, r5
9000c4cc:	f040 8129 	bne.w	9000c722 <HAL_UART_IRQHandler+0x29e>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
9000c4d0:	0650      	lsls	r0, r2, #25
9000c4d2:	d567      	bpl.n	9000c5a4 <HAL_UART_IRQHandler+0x120>
9000c4d4:	064e      	lsls	r6, r1, #25
9000c4d6:	d565      	bpl.n	9000c5a4 <HAL_UART_IRQHandler+0x120>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000c4d8:	e853 2f00 	ldrex	r2, [r3]
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
9000c4dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000c4e0:	e843 2100 	strex	r1, r2, [r3]
9000c4e4:	2900      	cmp	r1, #0
9000c4e6:	d1f7      	bne.n	9000c4d8 <HAL_UART_IRQHandler+0x54>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
9000c4e8:	2220      	movs	r2, #32

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
9000c4ea:	2300      	movs	r3, #0
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
9000c4ec:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_READY;
9000c4ee:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
  huart->TxISR = NULL;
9000c4f2:	67a3      	str	r3, [r4, #120]	; 0x78
  HAL_UART_TxCpltCallback(huart);
9000c4f4:	f7ff ffb6 	bl	9000c464 <HAL_UART_TxCpltCallback>
}
9000c4f8:	bd70      	pop	{r4, r5, r6, pc}
      && ((isrflags & USART_ISR_IDLE) != 0U)
9000c4fa:	06d6      	lsls	r6, r2, #27
9000c4fc:	d5da      	bpl.n	9000c4b4 <HAL_UART_IRQHandler+0x30>
      && ((cr1its & USART_ISR_IDLE) != 0U))
9000c4fe:	06c8      	lsls	r0, r1, #27
9000c500:	d5d8      	bpl.n	9000c4b4 <HAL_UART_IRQHandler+0x30>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
9000c502:	2210      	movs	r2, #16
9000c504:	621a      	str	r2, [r3, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
9000c506:	689a      	ldr	r2, [r3, #8]
9000c508:	0652      	lsls	r2, r2, #25
9000c50a:	f140 813c 	bpl.w	9000c786 <HAL_UART_IRQHandler+0x302>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
9000c50e:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
9000c512:	6801      	ldr	r1, [r0, #0]
9000c514:	684a      	ldr	r2, [r1, #4]
9000c516:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
9000c518:	2a00      	cmp	r2, #0
9000c51a:	d0ed      	beq.n	9000c4f8 <HAL_UART_IRQHandler+0x74>
          && (nb_remaining_rx_data < huart->RxXferSize))
9000c51c:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
9000c520:	4291      	cmp	r1, r2
9000c522:	d9e9      	bls.n	9000c4f8 <HAL_UART_IRQHandler+0x74>
        huart->RxXferCount = nb_remaining_rx_data;
9000c524:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
9000c528:	69c2      	ldr	r2, [r0, #28]
9000c52a:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
9000c52e:	d02f      	beq.n	9000c590 <HAL_UART_IRQHandler+0x10c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000c530:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
9000c534:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000c538:	e843 2100 	strex	r1, r2, [r3]
9000c53c:	2900      	cmp	r1, #0
9000c53e:	d1f7      	bne.n	9000c530 <HAL_UART_IRQHandler+0xac>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000c540:	f103 0208 	add.w	r2, r3, #8
9000c544:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
9000c548:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000c54c:	f103 0508 	add.w	r5, r3, #8
9000c550:	e845 2100 	strex	r1, r2, [r5]
9000c554:	2900      	cmp	r1, #0
9000c556:	d1f3      	bne.n	9000c540 <HAL_UART_IRQHandler+0xbc>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000c558:	f103 0208 	add.w	r2, r3, #8
9000c55c:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
9000c560:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000c564:	f103 0508 	add.w	r5, r3, #8
9000c568:	e845 2100 	strex	r1, r2, [r5]
9000c56c:	2900      	cmp	r1, #0
9000c56e:	d1f3      	bne.n	9000c558 <HAL_UART_IRQHandler+0xd4>
          huart->RxState = HAL_UART_STATE_READY;
9000c570:	2220      	movs	r2, #32
9000c572:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
9000c576:	66e1      	str	r1, [r4, #108]	; 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000c578:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
9000c57c:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000c580:	e843 2100 	strex	r1, r2, [r3]
9000c584:	2900      	cmp	r1, #0
9000c586:	d1f7      	bne.n	9000c578 <HAL_UART_IRQHandler+0xf4>
          (void)HAL_DMA_Abort(huart->hdmarx);
9000c588:	f7f9 ff6c 	bl	90006464 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
9000c58c:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
9000c590:	2302      	movs	r3, #2
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
9000c592:	4620      	mov	r0, r4
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
9000c594:	6723      	str	r3, [r4, #112]	; 0x70
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
9000c596:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
9000c59a:	1ac9      	subs	r1, r1, r3
9000c59c:	b289      	uxth	r1, r1
9000c59e:	f7ff ff6f 	bl	9000c480 <HAL_UARTEx_RxEventCallback>
}
9000c5a2:	bd70      	pop	{r4, r5, r6, pc}
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
9000c5a4:	0215      	lsls	r5, r2, #8
9000c5a6:	d502      	bpl.n	9000c5ae <HAL_UART_IRQHandler+0x12a>
9000c5a8:	0048      	lsls	r0, r1, #1
9000c5aa:	f100 80e7 	bmi.w	9000c77c <HAL_UART_IRQHandler+0x2f8>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
9000c5ae:	01d3      	lsls	r3, r2, #7
9000c5b0:	d5a2      	bpl.n	9000c4f8 <HAL_UART_IRQHandler+0x74>
9000c5b2:	2900      	cmp	r1, #0
9000c5b4:	daa0      	bge.n	9000c4f8 <HAL_UART_IRQHandler+0x74>
    HAL_UARTEx_RxFifoFullCallback(huart);
9000c5b6:	4620      	mov	r0, r4
}
9000c5b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_RxFifoFullCallback(huart);
9000c5bc:	f000 bff8 	b.w	9000d5b0 <HAL_UARTEx_RxFifoFullCallback>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
9000c5c0:	07d0      	lsls	r0, r2, #31
9000c5c2:	d509      	bpl.n	9000c5d8 <HAL_UART_IRQHandler+0x154>
9000c5c4:	05ce      	lsls	r6, r1, #23
9000c5c6:	d507      	bpl.n	9000c5d8 <HAL_UART_IRQHandler+0x154>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
9000c5c8:	2001      	movs	r0, #1
9000c5ca:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
9000c5cc:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
9000c5d0:	f040 0001 	orr.w	r0, r0, #1
9000c5d4:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
9000c5d8:	0790      	lsls	r0, r2, #30
9000c5da:	f140 8093 	bpl.w	9000c704 <HAL_UART_IRQHandler+0x280>
9000c5de:	07ee      	lsls	r6, r5, #31
9000c5e0:	d50a      	bpl.n	9000c5f8 <HAL_UART_IRQHandler+0x174>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
9000c5e2:	2002      	movs	r0, #2
9000c5e4:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
9000c5e6:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
9000c5ea:	f040 0004 	orr.w	r0, r0, #4
9000c5ee:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
9000c5f2:	0750      	lsls	r0, r2, #29
9000c5f4:	f100 808c 	bmi.w	9000c710 <HAL_UART_IRQHandler+0x28c>
    if (((isrflags & USART_ISR_ORE) != 0U)
9000c5f8:	0716      	lsls	r6, r2, #28
9000c5fa:	d50c      	bpl.n	9000c616 <HAL_UART_IRQHandler+0x192>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
9000c5fc:	f001 0020 	and.w	r0, r1, #32
9000c600:	ea50 000c 	orrs.w	r0, r0, ip
9000c604:	d007      	beq.n	9000c616 <HAL_UART_IRQHandler+0x192>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
9000c606:	2008      	movs	r0, #8
9000c608:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
9000c60a:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
9000c60e:	f040 0008 	orr.w	r0, r0, #8
9000c612:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
9000c616:	0510      	lsls	r0, r2, #20
9000c618:	d50a      	bpl.n	9000c630 <HAL_UART_IRQHandler+0x1ac>
9000c61a:	014e      	lsls	r6, r1, #5
9000c61c:	d508      	bpl.n	9000c630 <HAL_UART_IRQHandler+0x1ac>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
9000c61e:	f44f 6000 	mov.w	r0, #2048	; 0x800
9000c622:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
9000c624:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
9000c628:	f040 0020 	orr.w	r0, r0, #32
9000c62c:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
9000c630:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
9000c634:	2800      	cmp	r0, #0
9000c636:	f43f af5f 	beq.w	9000c4f8 <HAL_UART_IRQHandler+0x74>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
9000c63a:	0690      	lsls	r0, r2, #26
9000c63c:	d50a      	bpl.n	9000c654 <HAL_UART_IRQHandler+0x1d0>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
9000c63e:	f001 0120 	and.w	r1, r1, #32
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
9000c642:	f005 5580 	and.w	r5, r5, #268435456	; 0x10000000
9000c646:	4329      	orrs	r1, r5
9000c648:	d004      	beq.n	9000c654 <HAL_UART_IRQHandler+0x1d0>
        if (huart->RxISR != NULL)
9000c64a:	6f62      	ldr	r2, [r4, #116]	; 0x74
9000c64c:	b112      	cbz	r2, 9000c654 <HAL_UART_IRQHandler+0x1d0>
          huart->RxISR(huart);
9000c64e:	4620      	mov	r0, r4
9000c650:	4790      	blx	r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
9000c652:	6823      	ldr	r3, [r4, #0]
      errorcode = huart->ErrorCode;
9000c654:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
9000c658:	689a      	ldr	r2, [r3, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
9000c65a:	f001 0128 	and.w	r1, r1, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
9000c65e:	f002 0240 	and.w	r2, r2, #64	; 0x40
9000c662:	ea52 0501 	orrs.w	r5, r2, r1
9000c666:	f000 80c4 	beq.w	9000c7f2 <HAL_UART_IRQHandler+0x36e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000c66a:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
9000c66e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000c672:	e843 2100 	strex	r1, r2, [r3]
9000c676:	2900      	cmp	r1, #0
9000c678:	d1f7      	bne.n	9000c66a <HAL_UART_IRQHandler+0x1e6>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
9000c67a:	483c      	ldr	r0, [pc, #240]	; (9000c76c <HAL_UART_IRQHandler+0x2e8>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000c67c:	f103 0208 	add.w	r2, r3, #8
9000c680:	e852 2f00 	ldrex	r2, [r2]
9000c684:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000c686:	f103 0508 	add.w	r5, r3, #8
9000c68a:	e845 2100 	strex	r1, r2, [r5]
9000c68e:	2900      	cmp	r1, #0
9000c690:	d1f4      	bne.n	9000c67c <HAL_UART_IRQHandler+0x1f8>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
9000c692:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
9000c694:	2a01      	cmp	r2, #1
9000c696:	d054      	beq.n	9000c742 <HAL_UART_IRQHandler+0x2be>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
9000c698:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
9000c69a:	2120      	movs	r1, #32
9000c69c:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
9000c6a0:	66e2      	str	r2, [r4, #108]	; 0x6c
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
9000c6a2:	6899      	ldr	r1, [r3, #8]
  huart->RxISR = NULL;
9000c6a4:	6762      	str	r2, [r4, #116]	; 0x74
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
9000c6a6:	064a      	lsls	r2, r1, #25
9000c6a8:	d564      	bpl.n	9000c774 <HAL_UART_IRQHandler+0x2f0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000c6aa:	f103 0208 	add.w	r2, r3, #8
9000c6ae:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
9000c6b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000c6b6:	f103 0008 	add.w	r0, r3, #8
9000c6ba:	e840 2100 	strex	r1, r2, [r0]
9000c6be:	2900      	cmp	r1, #0
9000c6c0:	d1f3      	bne.n	9000c6aa <HAL_UART_IRQHandler+0x226>
          if (huart->hdmarx != NULL)
9000c6c2:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
9000c6c6:	2800      	cmp	r0, #0
9000c6c8:	d054      	beq.n	9000c774 <HAL_UART_IRQHandler+0x2f0>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
9000c6ca:	4b29      	ldr	r3, [pc, #164]	; (9000c770 <HAL_UART_IRQHandler+0x2ec>)
9000c6cc:	6503      	str	r3, [r0, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
9000c6ce:	f7fa f841 	bl	90006754 <HAL_DMA_Abort_IT>
9000c6d2:	2800      	cmp	r0, #0
9000c6d4:	f43f af10 	beq.w	9000c4f8 <HAL_UART_IRQHandler+0x74>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
9000c6d8:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
9000c6dc:	6d03      	ldr	r3, [r0, #80]	; 0x50
9000c6de:	e00e      	b.n	9000c6fe <HAL_UART_IRQHandler+0x27a>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
9000c6e0:	0696      	lsls	r6, r2, #26
9000c6e2:	f57f aee4 	bpl.w	9000c4ae <HAL_UART_IRQHandler+0x2a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
9000c6e6:	f001 0c20 	and.w	ip, r1, #32
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
9000c6ea:	f005 5e80 	and.w	lr, r5, #268435456	; 0x10000000
9000c6ee:	ea5c 0c0e 	orrs.w	ip, ip, lr
9000c6f2:	f43f aedc 	beq.w	9000c4ae <HAL_UART_IRQHandler+0x2a>
      if (huart->RxISR != NULL)
9000c6f6:	6f43      	ldr	r3, [r0, #116]	; 0x74
9000c6f8:	2b00      	cmp	r3, #0
9000c6fa:	f43f aefd 	beq.w	9000c4f8 <HAL_UART_IRQHandler+0x74>
}
9000c6fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
9000c702:	4718      	bx	r3
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
9000c704:	0756      	lsls	r6, r2, #29
9000c706:	f57f af77 	bpl.w	9000c5f8 <HAL_UART_IRQHandler+0x174>
9000c70a:	07e8      	lsls	r0, r5, #31
9000c70c:	f57f af74 	bpl.w	9000c5f8 <HAL_UART_IRQHandler+0x174>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
9000c710:	2004      	movs	r0, #4
9000c712:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
9000c714:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
9000c718:	f040 0002 	orr.w	r0, r0, #2
9000c71c:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90
9000c720:	e76a      	b.n	9000c5f8 <HAL_UART_IRQHandler+0x174>
    if (huart->TxISR != NULL)
9000c722:	6fa3      	ldr	r3, [r4, #120]	; 0x78
9000c724:	2b00      	cmp	r3, #0
9000c726:	f43f aee7 	beq.w	9000c4f8 <HAL_UART_IRQHandler+0x74>
      huart->TxISR(huart);
9000c72a:	4620      	mov	r0, r4
}
9000c72c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      huart->TxISR(huart);
9000c730:	4718      	bx	r3
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
9000c732:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    HAL_UARTEx_WakeupCallback(huart);
9000c736:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
9000c738:	621a      	str	r2, [r3, #32]
}
9000c73a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_WakeupCallback(huart);
9000c73e:	f000 bf35 	b.w	9000d5ac <HAL_UARTEx_WakeupCallback>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000c742:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
9000c746:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000c74a:	e843 2100 	strex	r1, r2, [r3]
9000c74e:	2900      	cmp	r1, #0
9000c750:	d0a2      	beq.n	9000c698 <HAL_UART_IRQHandler+0x214>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000c752:	e853 2f00 	ldrex	r2, [r3]
9000c756:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000c75a:	e843 2100 	strex	r1, r2, [r3]
9000c75e:	2900      	cmp	r1, #0
9000c760:	d1ef      	bne.n	9000c742 <HAL_UART_IRQHandler+0x2be>
9000c762:	e799      	b.n	9000c698 <HAL_UART_IRQHandler+0x214>
9000c764:	10000001 	.word	0x10000001
9000c768:	04000120 	.word	0x04000120
9000c76c:	effffffe 	.word	0xeffffffe
9000c770:	9000c46d 	.word	0x9000c46d
            HAL_UART_ErrorCallback(huart);
9000c774:	4620      	mov	r0, r4
9000c776:	f7ff fe77 	bl	9000c468 <HAL_UART_ErrorCallback>
}
9000c77a:	bd70      	pop	{r4, r5, r6, pc}
    HAL_UARTEx_TxFifoEmptyCallback(huart);
9000c77c:	4620      	mov	r0, r4
}
9000c77e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_TxFifoEmptyCallback(huart);
9000c782:	f000 bf17 	b.w	9000d5b4 <HAL_UARTEx_TxFifoEmptyCallback>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
9000c786:	f8b4 005e 	ldrh.w	r0, [r4, #94]	; 0x5e
9000c78a:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
      if ((huart->RxXferCount > 0U)
9000c78e:	f8b4 205e 	ldrh.w	r2, [r4, #94]	; 0x5e
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
9000c792:	1a09      	subs	r1, r1, r0
      if ((huart->RxXferCount > 0U)
9000c794:	b292      	uxth	r2, r2
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
9000c796:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
9000c798:	2a00      	cmp	r2, #0
9000c79a:	f43f aead 	beq.w	9000c4f8 <HAL_UART_IRQHandler+0x74>
9000c79e:	2900      	cmp	r1, #0
9000c7a0:	f43f aeaa 	beq.w	9000c4f8 <HAL_UART_IRQHandler+0x74>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000c7a4:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
9000c7a8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000c7ac:	e843 2000 	strex	r0, r2, [r3]
9000c7b0:	2800      	cmp	r0, #0
9000c7b2:	d1f7      	bne.n	9000c7a4 <HAL_UART_IRQHandler+0x320>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
9000c7b4:	4d12      	ldr	r5, [pc, #72]	; (9000c800 <HAL_UART_IRQHandler+0x37c>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000c7b6:	f103 0208 	add.w	r2, r3, #8
9000c7ba:	e852 2f00 	ldrex	r2, [r2]
9000c7be:	402a      	ands	r2, r5
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000c7c0:	f103 0c08 	add.w	ip, r3, #8
9000c7c4:	e84c 2000 	strex	r0, r2, [ip]
9000c7c8:	2800      	cmp	r0, #0
9000c7ca:	d1f4      	bne.n	9000c7b6 <HAL_UART_IRQHandler+0x332>
        huart->RxState = HAL_UART_STATE_READY;
9000c7cc:	2220      	movs	r2, #32
        huart->RxISR = NULL;
9000c7ce:	6760      	str	r0, [r4, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
9000c7d0:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
9000c7d4:	66e0      	str	r0, [r4, #108]	; 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000c7d6:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
9000c7da:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000c7de:	e843 2000 	strex	r0, r2, [r3]
9000c7e2:	2800      	cmp	r0, #0
9000c7e4:	d1f7      	bne.n	9000c7d6 <HAL_UART_IRQHandler+0x352>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
9000c7e6:	2302      	movs	r3, #2
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
9000c7e8:	4620      	mov	r0, r4
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
9000c7ea:	6723      	str	r3, [r4, #112]	; 0x70
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
9000c7ec:	f7ff fe48 	bl	9000c480 <HAL_UARTEx_RxEventCallback>
}
9000c7f0:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
9000c7f2:	4620      	mov	r0, r4
9000c7f4:	f7ff fe38 	bl	9000c468 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
9000c7f8:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
}
9000c7fc:	bd70      	pop	{r4, r5, r6, pc}
9000c7fe:	bf00      	nop
9000c800:	effffffe 	.word	0xeffffffe

9000c804 <UART_RxISR_16BIT.part.0>:
/**
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
9000c804:	6803      	ldr	r3, [r0, #0]
9000c806:	b510      	push	{r4, lr}
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000c808:	e853 2f00 	ldrex	r2, [r3]
    huart->RxXferCount--;

    if (huart->RxXferCount == 0U)
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
9000c80c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000c810:	e843 2100 	strex	r1, r2, [r3]
9000c814:	2900      	cmp	r1, #0
9000c816:	d1f7      	bne.n	9000c808 <UART_RxISR_16BIT.part.0+0x4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000c818:	f103 0208 	add.w	r2, r3, #8
9000c81c:	e852 2f00 	ldrex	r2, [r2]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
9000c820:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000c824:	f103 0408 	add.w	r4, r3, #8
9000c828:	e844 2100 	strex	r1, r2, [r4]
9000c82c:	2900      	cmp	r1, #0
9000c82e:	d1f3      	bne.n	9000c818 <UART_RxISR_16BIT.part.0+0x14>
      huart->RxISR = NULL;

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
9000c830:	4a1a      	ldr	r2, [pc, #104]	; (9000c89c <UART_RxISR_16BIT.part.0+0x98>)
      huart->RxState = HAL_UART_STATE_READY;
9000c832:	2420      	movs	r4, #32
      huart->RxISR = NULL;
9000c834:	6741      	str	r1, [r0, #116]	; 0x74
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
9000c836:	4293      	cmp	r3, r2
      huart->RxState = HAL_UART_STATE_READY;
9000c838:	f8c0 408c 	str.w	r4, [r0, #140]	; 0x8c
      huart->RxEventType = HAL_UART_RXEVENT_TC;
9000c83c:	6701      	str	r1, [r0, #112]	; 0x70
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
9000c83e:	d002      	beq.n	9000c846 <UART_RxISR_16BIT.part.0+0x42>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
9000c840:	685a      	ldr	r2, [r3, #4]
9000c842:	0211      	lsls	r1, r2, #8
9000c844:	d416      	bmi.n	9000c874 <UART_RxISR_16BIT.part.0+0x70>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
9000c846:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
9000c848:	2a01      	cmp	r2, #1
9000c84a:	d124      	bne.n	9000c896 <UART_RxISR_16BIT.part.0+0x92>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
9000c84c:	2200      	movs	r2, #0
9000c84e:	66c2      	str	r2, [r0, #108]	; 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000c850:	e853 2f00 	ldrex	r2, [r3]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
9000c854:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000c858:	e843 2100 	strex	r1, r2, [r3]
9000c85c:	2900      	cmp	r1, #0
9000c85e:	d1f7      	bne.n	9000c850 <UART_RxISR_16BIT.part.0+0x4c>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
9000c860:	69da      	ldr	r2, [r3, #28]
9000c862:	06d2      	lsls	r2, r2, #27
9000c864:	d501      	bpl.n	9000c86a <UART_RxISR_16BIT.part.0+0x66>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
9000c866:	2210      	movs	r2, #16
9000c868:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
9000c86a:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
9000c86e:	f7ff fe07 	bl	9000c480 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
9000c872:	bd10      	pop	{r4, pc}
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000c874:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
9000c878:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000c87c:	e843 2100 	strex	r1, r2, [r3]
9000c880:	2900      	cmp	r1, #0
9000c882:	d0e0      	beq.n	9000c846 <UART_RxISR_16BIT.part.0+0x42>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000c884:	e853 2f00 	ldrex	r2, [r3]
9000c888:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000c88c:	e843 2100 	strex	r1, r2, [r3]
9000c890:	2900      	cmp	r1, #0
9000c892:	d1ef      	bne.n	9000c874 <UART_RxISR_16BIT.part.0+0x70>
9000c894:	e7d7      	b.n	9000c846 <UART_RxISR_16BIT.part.0+0x42>
        HAL_UART_RxCpltCallback(huart);
9000c896:	f7f7 f8c9 	bl	90003a2c <HAL_UART_RxCpltCallback>
}
9000c89a:	bd10      	pop	{r4, pc}
9000c89c:	58000c00 	.word	0x58000c00

9000c8a0 <UART_RxISR_16BIT>:
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
9000c8a0:	f8d0 108c 	ldr.w	r1, [r0, #140]	; 0x8c
  uint16_t uhMask = huart->Mask;
9000c8a4:	f8b0 2060 	ldrh.w	r2, [r0, #96]	; 0x60
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
9000c8a8:	2922      	cmp	r1, #34	; 0x22
9000c8aa:	d005      	beq.n	9000c8b8 <UART_RxISR_16BIT+0x18>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
9000c8ac:	6802      	ldr	r2, [r0, #0]
9000c8ae:	6993      	ldr	r3, [r2, #24]
9000c8b0:	f043 0308 	orr.w	r3, r3, #8
9000c8b4:	6193      	str	r3, [r2, #24]
9000c8b6:	4770      	bx	lr
{
9000c8b8:	b410      	push	{r4}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
9000c8ba:	6804      	ldr	r4, [r0, #0]
    *tmp = (uint16_t)(uhdata & uhMask);
9000c8bc:	6d81      	ldr	r1, [r0, #88]	; 0x58
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
9000c8be:	6a64      	ldr	r4, [r4, #36]	; 0x24
    *tmp = (uint16_t)(uhdata & uhMask);
9000c8c0:	4022      	ands	r2, r4
9000c8c2:	f821 2b02 	strh.w	r2, [r1], #2
    huart->RxXferCount--;
9000c8c6:	f8b0 205e 	ldrh.w	r2, [r0, #94]	; 0x5e
    huart->pRxBuffPtr += 2U;
9000c8ca:	6581      	str	r1, [r0, #88]	; 0x58
    huart->RxXferCount--;
9000c8cc:	3a01      	subs	r2, #1
9000c8ce:	b292      	uxth	r2, r2
9000c8d0:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e
    if (huart->RxXferCount == 0U)
9000c8d4:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
9000c8d8:	b29b      	uxth	r3, r3
9000c8da:	b91b      	cbnz	r3, 9000c8e4 <UART_RxISR_16BIT+0x44>
  }
}
9000c8dc:	f85d 4b04 	ldr.w	r4, [sp], #4
9000c8e0:	f7ff bf90 	b.w	9000c804 <UART_RxISR_16BIT.part.0>
9000c8e4:	f85d 4b04 	ldr.w	r4, [sp], #4
9000c8e8:	4770      	bx	lr
9000c8ea:	bf00      	nop

9000c8ec <UART_RxISR_8BIT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
9000c8ec:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
  uint16_t uhMask = huart->Mask;
9000c8f0:	f8b0 1060 	ldrh.w	r1, [r0, #96]	; 0x60
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
9000c8f4:	2a22      	cmp	r2, #34	; 0x22
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
9000c8f6:	6802      	ldr	r2, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
9000c8f8:	d004      	beq.n	9000c904 <UART_RxISR_8BIT+0x18>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
9000c8fa:	6993      	ldr	r3, [r2, #24]
9000c8fc:	f043 0308 	orr.w	r3, r3, #8
9000c900:	6193      	str	r3, [r2, #24]
}
9000c902:	4770      	bx	lr
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
9000c904:	6a52      	ldr	r2, [r2, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
9000c906:	400a      	ands	r2, r1
9000c908:	6d81      	ldr	r1, [r0, #88]	; 0x58
9000c90a:	700a      	strb	r2, [r1, #0]
    huart->RxXferCount--;
9000c90c:	f8b0 205e 	ldrh.w	r2, [r0, #94]	; 0x5e
    huart->pRxBuffPtr++;
9000c910:	6d81      	ldr	r1, [r0, #88]	; 0x58
    huart->RxXferCount--;
9000c912:	3a01      	subs	r2, #1
    huart->pRxBuffPtr++;
9000c914:	3101      	adds	r1, #1
    huart->RxXferCount--;
9000c916:	b292      	uxth	r2, r2
    huart->pRxBuffPtr++;
9000c918:	6581      	str	r1, [r0, #88]	; 0x58
    huart->RxXferCount--;
9000c91a:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e
    if (huart->RxXferCount == 0U)
9000c91e:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
9000c922:	b29b      	uxth	r3, r3
9000c924:	2b00      	cmp	r3, #0
9000c926:	d1ec      	bne.n	9000c902 <UART_RxISR_8BIT+0x16>
9000c928:	f7ff bf6c 	b.w	9000c804 <UART_RxISR_16BIT.part.0>

9000c92c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
9000c92c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint16_t  uhMask = huart->Mask;
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
9000c930:	6802      	ldr	r2, [r0, #0]
{
9000c932:	4604      	mov	r4, r0
  uint16_t  uhMask = huart->Mask;
9000c934:	f8b0 a060 	ldrh.w	sl, [r0, #96]	; 0x60
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
9000c938:	69d0      	ldr	r0, [r2, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
9000c93a:	6816      	ldr	r6, [r2, #0]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
9000c93c:	6895      	ldr	r5, [r2, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
9000c93e:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
9000c942:	2922      	cmp	r1, #34	; 0x22
9000c944:	d006      	beq.n	9000c954 <UART_RxISR_8BIT_FIFOEN+0x28>
9000c946:	4613      	mov	r3, r2
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
9000c948:	6992      	ldr	r2, [r2, #24]
9000c94a:	f042 0208 	orr.w	r2, r2, #8
9000c94e:	619a      	str	r2, [r3, #24]
  }
}
9000c950:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
9000c954:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
9000c958:	2b00      	cmp	r3, #0
9000c95a:	f000 80d5 	beq.w	9000cb08 <UART_RxISR_8BIT_FIFOEN+0x1dc>
9000c95e:	0680      	lsls	r0, r0, #26
9000c960:	f140 8089 	bpl.w	9000ca76 <UART_RxISR_8BIT_FIFOEN+0x14a>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
9000c964:	f406 7680 	and.w	r6, r6, #256	; 0x100
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
9000c968:	f005 0501 	and.w	r5, r5, #1
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
9000c96c:	fa5f fa8a 	uxtb.w	sl, sl
          huart->ErrorCode = HAL_UART_ERROR_NONE;
9000c970:	f04f 0800 	mov.w	r8, #0
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
9000c974:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 9000cb18 <UART_RxISR_8BIT_FIFOEN+0x1ec>
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
9000c978:	4f65      	ldr	r7, [pc, #404]	; (9000cb10 <UART_RxISR_8BIT_FIFOEN+0x1e4>)
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
9000c97a:	6a52      	ldr	r2, [r2, #36]	; 0x24
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
9000c97c:	6da3      	ldr	r3, [r4, #88]	; 0x58
9000c97e:	ea0a 0202 	and.w	r2, sl, r2
9000c982:	701a      	strb	r2, [r3, #0]
      huart->RxXferCount--;
9000c984:	f8b4 105e 	ldrh.w	r1, [r4, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
9000c988:	6823      	ldr	r3, [r4, #0]
      huart->RxXferCount--;
9000c98a:	3901      	subs	r1, #1
      huart->pRxBuffPtr++;
9000c98c:	6da2      	ldr	r2, [r4, #88]	; 0x58
      huart->RxXferCount--;
9000c98e:	b289      	uxth	r1, r1
      huart->pRxBuffPtr++;
9000c990:	3201      	adds	r2, #1
      huart->RxXferCount--;
9000c992:	f8a4 105e 	strh.w	r1, [r4, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
9000c996:	f8d3 b01c 	ldr.w	fp, [r3, #28]
      huart->pRxBuffPtr++;
9000c99a:	65a2      	str	r2, [r4, #88]	; 0x58
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
9000c99c:	f01b 0f07 	tst.w	fp, #7
9000c9a0:	d01d      	beq.n	9000c9de <UART_RxISR_8BIT_FIFOEN+0xb2>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
9000c9a2:	f01b 0f01 	tst.w	fp, #1
9000c9a6:	d008      	beq.n	9000c9ba <UART_RxISR_8BIT_FIFOEN+0x8e>
9000c9a8:	b13e      	cbz	r6, 9000c9ba <UART_RxISR_8BIT_FIFOEN+0x8e>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
9000c9aa:	2201      	movs	r2, #1
9000c9ac:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
9000c9ae:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
9000c9b2:	f042 0201 	orr.w	r2, r2, #1
9000c9b6:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
9000c9ba:	f01b 0f02 	tst.w	fp, #2
9000c9be:	d017      	beq.n	9000c9f0 <UART_RxISR_8BIT_FIFOEN+0xc4>
9000c9c0:	b155      	cbz	r5, 9000c9d8 <UART_RxISR_8BIT_FIFOEN+0xac>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
9000c9c2:	2202      	movs	r2, #2
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
9000c9c4:	f01b 0f04 	tst.w	fp, #4
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
9000c9c8:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
9000c9ca:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
9000c9ce:	f042 0204 	orr.w	r2, r2, #4
9000c9d2:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
9000c9d6:	d110      	bne.n	9000c9fa <UART_RxISR_8BIT_FIFOEN+0xce>
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
9000c9d8:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
9000c9dc:	b9cb      	cbnz	r3, 9000ca12 <UART_RxISR_8BIT_FIFOEN+0xe6>
      if (huart->RxXferCount == 0U)
9000c9de:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
9000c9e2:	b29b      	uxth	r3, r3
9000c9e4:	b1fb      	cbz	r3, 9000ca26 <UART_RxISR_8BIT_FIFOEN+0xfa>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
9000c9e6:	f01b 0f20 	tst.w	fp, #32
9000c9ea:	d044      	beq.n	9000ca76 <UART_RxISR_8BIT_FIFOEN+0x14a>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
9000c9ec:	6822      	ldr	r2, [r4, #0]
9000c9ee:	e7c4      	b.n	9000c97a <UART_RxISR_8BIT_FIFOEN+0x4e>
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
9000c9f0:	f01b 0f04 	tst.w	fp, #4
9000c9f4:	d0f0      	beq.n	9000c9d8 <UART_RxISR_8BIT_FIFOEN+0xac>
9000c9f6:	2d00      	cmp	r5, #0
9000c9f8:	d0ee      	beq.n	9000c9d8 <UART_RxISR_8BIT_FIFOEN+0xac>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
9000c9fa:	2204      	movs	r2, #4
9000c9fc:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
9000c9fe:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
9000ca02:	f043 0302 	orr.w	r3, r3, #2
9000ca06:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
9000ca0a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
9000ca0e:	2b00      	cmp	r3, #0
9000ca10:	d0e5      	beq.n	9000c9de <UART_RxISR_8BIT_FIFOEN+0xb2>
          HAL_UART_ErrorCallback(huart);
9000ca12:	4620      	mov	r0, r4
9000ca14:	f7ff fd28 	bl	9000c468 <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
9000ca18:	f8c4 8090 	str.w	r8, [r4, #144]	; 0x90
      if (huart->RxXferCount == 0U)
9000ca1c:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
9000ca20:	b29b      	uxth	r3, r3
9000ca22:	2b00      	cmp	r3, #0
9000ca24:	d1df      	bne.n	9000c9e6 <UART_RxISR_8BIT_FIFOEN+0xba>
9000ca26:	6823      	ldr	r3, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000ca28:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
9000ca2c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000ca30:	e843 2100 	strex	r1, r2, [r3]
9000ca34:	2900      	cmp	r1, #0
9000ca36:	d1f7      	bne.n	9000ca28 <UART_RxISR_8BIT_FIFOEN+0xfc>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000ca38:	f103 0208 	add.w	r2, r3, #8
9000ca3c:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
9000ca40:	ea02 0209 	and.w	r2, r2, r9
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000ca44:	f103 0008 	add.w	r0, r3, #8
9000ca48:	e840 2100 	strex	r1, r2, [r0]
9000ca4c:	2900      	cmp	r1, #0
9000ca4e:	d1f3      	bne.n	9000ca38 <UART_RxISR_8BIT_FIFOEN+0x10c>
        huart->RxState = HAL_UART_STATE_READY;
9000ca50:	2220      	movs	r2, #32
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
9000ca52:	42bb      	cmp	r3, r7
        huart->RxISR = NULL;
9000ca54:	6761      	str	r1, [r4, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
9000ca56:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
        huart->RxEventType = HAL_UART_RXEVENT_TC;
9000ca5a:	6721      	str	r1, [r4, #112]	; 0x70
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
9000ca5c:	d002      	beq.n	9000ca64 <UART_RxISR_8BIT_FIFOEN+0x138>
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
9000ca5e:	685a      	ldr	r2, [r3, #4]
9000ca60:	0211      	lsls	r1, r2, #8
9000ca62:	d42b      	bmi.n	9000cabc <UART_RxISR_8BIT_FIFOEN+0x190>
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
9000ca64:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
9000ca66:	2a01      	cmp	r2, #1
9000ca68:	d039      	beq.n	9000cade <UART_RxISR_8BIT_FIFOEN+0x1b2>
          HAL_UART_RxCpltCallback(huart);
9000ca6a:	4620      	mov	r0, r4
9000ca6c:	f7f6 ffde 	bl	90003a2c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
9000ca70:	f01b 0f20 	tst.w	fp, #32
9000ca74:	d1ba      	bne.n	9000c9ec <UART_RxISR_8BIT_FIFOEN+0xc0>
    rxdatacount = huart->RxXferCount;
9000ca76:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
9000ca7a:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
9000ca7c:	2b00      	cmp	r3, #0
9000ca7e:	f43f af67 	beq.w	9000c950 <UART_RxISR_8BIT_FIFOEN+0x24>
9000ca82:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
9000ca86:	429a      	cmp	r2, r3
9000ca88:	f67f af62 	bls.w	9000c950 <UART_RxISR_8BIT_FIFOEN+0x24>
9000ca8c:	6823      	ldr	r3, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000ca8e:	f103 0208 	add.w	r2, r3, #8
9000ca92:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
9000ca96:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000ca9a:	f103 0008 	add.w	r0, r3, #8
9000ca9e:	e840 2100 	strex	r1, r2, [r0]
9000caa2:	2900      	cmp	r1, #0
9000caa4:	d1f3      	bne.n	9000ca8e <UART_RxISR_8BIT_FIFOEN+0x162>
      huart->RxISR = UART_RxISR_8BIT;
9000caa6:	4a1b      	ldr	r2, [pc, #108]	; (9000cb14 <UART_RxISR_8BIT_FIFOEN+0x1e8>)
9000caa8:	6762      	str	r2, [r4, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000caaa:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
9000caae:	f042 0220 	orr.w	r2, r2, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000cab2:	e843 2100 	strex	r1, r2, [r3]
9000cab6:	2900      	cmp	r1, #0
9000cab8:	d1f7      	bne.n	9000caaa <UART_RxISR_8BIT_FIFOEN+0x17e>
9000caba:	e749      	b.n	9000c950 <UART_RxISR_8BIT_FIFOEN+0x24>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000cabc:	e853 2f00 	ldrex	r2, [r3]
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
9000cac0:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000cac4:	e843 2100 	strex	r1, r2, [r3]
9000cac8:	2900      	cmp	r1, #0
9000caca:	d0cb      	beq.n	9000ca64 <UART_RxISR_8BIT_FIFOEN+0x138>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000cacc:	e853 2f00 	ldrex	r2, [r3]
9000cad0:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000cad4:	e843 2100 	strex	r1, r2, [r3]
9000cad8:	2900      	cmp	r1, #0
9000cada:	d1ef      	bne.n	9000cabc <UART_RxISR_8BIT_FIFOEN+0x190>
9000cadc:	e7c2      	b.n	9000ca64 <UART_RxISR_8BIT_FIFOEN+0x138>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
9000cade:	f8c4 806c 	str.w	r8, [r4, #108]	; 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000cae2:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
9000cae6:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000caea:	e843 2100 	strex	r1, r2, [r3]
9000caee:	2900      	cmp	r1, #0
9000caf0:	d1f7      	bne.n	9000cae2 <UART_RxISR_8BIT_FIFOEN+0x1b6>
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
9000caf2:	69da      	ldr	r2, [r3, #28]
9000caf4:	06d2      	lsls	r2, r2, #27
9000caf6:	d501      	bpl.n	9000cafc <UART_RxISR_8BIT_FIFOEN+0x1d0>
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
9000caf8:	2210      	movs	r2, #16
9000cafa:	621a      	str	r2, [r3, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
9000cafc:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
9000cb00:	4620      	mov	r0, r4
9000cb02:	f7ff fcbd 	bl	9000c480 <HAL_UARTEx_RxEventCallback>
9000cb06:	e76e      	b.n	9000c9e6 <UART_RxISR_8BIT_FIFOEN+0xba>
    rxdatacount = huart->RxXferCount;
9000cb08:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
9000cb0c:	e720      	b.n	9000c950 <UART_RxISR_8BIT_FIFOEN+0x24>
9000cb0e:	bf00      	nop
9000cb10:	58000c00 	.word	0x58000c00
9000cb14:	9000c8ed 	.word	0x9000c8ed
9000cb18:	effffffe 	.word	0xeffffffe

9000cb1c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
9000cb1c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
9000cb20:	6803      	ldr	r3, [r0, #0]
  uint16_t  uhMask = huart->Mask;
9000cb22:	f8b0 a060 	ldrh.w	sl, [r0, #96]	; 0x60
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
9000cb26:	69d9      	ldr	r1, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
9000cb28:	681e      	ldr	r6, [r3, #0]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
9000cb2a:	689d      	ldr	r5, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
9000cb2c:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
9000cb30:	2a22      	cmp	r2, #34	; 0x22
9000cb32:	d005      	beq.n	9000cb40 <UART_RxISR_16BIT_FIFOEN+0x24>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
9000cb34:	699a      	ldr	r2, [r3, #24]
9000cb36:	f042 0208 	orr.w	r2, r2, #8
9000cb3a:	619a      	str	r2, [r3, #24]
  }
}
9000cb3c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
9000cb40:	f8b0 2068 	ldrh.w	r2, [r0, #104]	; 0x68
9000cb44:	4683      	mov	fp, r0
9000cb46:	2a00      	cmp	r2, #0
9000cb48:	f000 80d2 	beq.w	9000ccf0 <UART_RxISR_16BIT_FIFOEN+0x1d4>
9000cb4c:	0689      	lsls	r1, r1, #26
9000cb4e:	f140 8084 	bpl.w	9000cc5a <UART_RxISR_16BIT_FIFOEN+0x13e>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
9000cb52:	f406 7680 	and.w	r6, r6, #256	; 0x100
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
9000cb56:	f005 0501 	and.w	r5, r5, #1
          huart->ErrorCode = HAL_UART_ERROR_NONE;
9000cb5a:	f04f 0800 	mov.w	r8, #0
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
9000cb5e:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 9000cd00 <UART_RxISR_16BIT_FIFOEN+0x1e4>
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
9000cb62:	4f65      	ldr	r7, [pc, #404]	; (9000ccf8 <UART_RxISR_16BIT_FIFOEN+0x1dc>)
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
9000cb64:	6a5a      	ldr	r2, [r3, #36]	; 0x24
      *tmp = (uint16_t)(uhdata & uhMask);
9000cb66:	f8db 1058 	ldr.w	r1, [fp, #88]	; 0x58
9000cb6a:	ea0a 0202 	and.w	r2, sl, r2
9000cb6e:	f821 2b02 	strh.w	r2, [r1], #2
      huart->RxXferCount--;
9000cb72:	f8bb 205e 	ldrh.w	r2, [fp, #94]	; 0x5e
      huart->pRxBuffPtr += 2U;
9000cb76:	f8cb 1058 	str.w	r1, [fp, #88]	; 0x58
      huart->RxXferCount--;
9000cb7a:	3a01      	subs	r2, #1
9000cb7c:	b292      	uxth	r2, r2
9000cb7e:	f8ab 205e 	strh.w	r2, [fp, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
9000cb82:	69dc      	ldr	r4, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
9000cb84:	0762      	lsls	r2, r4, #29
9000cb86:	d01a      	beq.n	9000cbbe <UART_RxISR_16BIT_FIFOEN+0xa2>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
9000cb88:	07e0      	lsls	r0, r4, #31
9000cb8a:	d508      	bpl.n	9000cb9e <UART_RxISR_16BIT_FIFOEN+0x82>
9000cb8c:	b13e      	cbz	r6, 9000cb9e <UART_RxISR_16BIT_FIFOEN+0x82>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
9000cb8e:	2201      	movs	r2, #1
9000cb90:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
9000cb92:	f8db 2090 	ldr.w	r2, [fp, #144]	; 0x90
9000cb96:	f042 0201 	orr.w	r2, r2, #1
9000cb9a:	f8cb 2090 	str.w	r2, [fp, #144]	; 0x90
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
9000cb9e:	07a1      	lsls	r1, r4, #30
9000cba0:	d516      	bpl.n	9000cbd0 <UART_RxISR_16BIT_FIFOEN+0xb4>
9000cba2:	b14d      	cbz	r5, 9000cbb8 <UART_RxISR_16BIT_FIFOEN+0x9c>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
9000cba4:	2202      	movs	r2, #2
9000cba6:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
9000cba8:	f8db 2090 	ldr.w	r2, [fp, #144]	; 0x90
9000cbac:	f042 0204 	orr.w	r2, r2, #4
9000cbb0:	f8cb 2090 	str.w	r2, [fp, #144]	; 0x90
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
9000cbb4:	0762      	lsls	r2, r4, #29
9000cbb6:	d40f      	bmi.n	9000cbd8 <UART_RxISR_16BIT_FIFOEN+0xbc>
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
9000cbb8:	f8db 3090 	ldr.w	r3, [fp, #144]	; 0x90
9000cbbc:	b9c3      	cbnz	r3, 9000cbf0 <UART_RxISR_16BIT_FIFOEN+0xd4>
      if (huart->RxXferCount == 0U)
9000cbbe:	f8bb 305e 	ldrh.w	r3, [fp, #94]	; 0x5e
9000cbc2:	b29b      	uxth	r3, r3
9000cbc4:	b1f3      	cbz	r3, 9000cc04 <UART_RxISR_16BIT_FIFOEN+0xe8>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
9000cbc6:	06a3      	lsls	r3, r4, #26
9000cbc8:	d547      	bpl.n	9000cc5a <UART_RxISR_16BIT_FIFOEN+0x13e>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
9000cbca:	f8db 3000 	ldr.w	r3, [fp]
9000cbce:	e7c9      	b.n	9000cb64 <UART_RxISR_16BIT_FIFOEN+0x48>
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
9000cbd0:	0760      	lsls	r0, r4, #29
9000cbd2:	d5f1      	bpl.n	9000cbb8 <UART_RxISR_16BIT_FIFOEN+0x9c>
9000cbd4:	2d00      	cmp	r5, #0
9000cbd6:	d0ef      	beq.n	9000cbb8 <UART_RxISR_16BIT_FIFOEN+0x9c>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
9000cbd8:	2204      	movs	r2, #4
9000cbda:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
9000cbdc:	f8db 3090 	ldr.w	r3, [fp, #144]	; 0x90
9000cbe0:	f043 0302 	orr.w	r3, r3, #2
9000cbe4:	f8cb 3090 	str.w	r3, [fp, #144]	; 0x90
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
9000cbe8:	f8db 3090 	ldr.w	r3, [fp, #144]	; 0x90
9000cbec:	2b00      	cmp	r3, #0
9000cbee:	d0e6      	beq.n	9000cbbe <UART_RxISR_16BIT_FIFOEN+0xa2>
          HAL_UART_ErrorCallback(huart);
9000cbf0:	4658      	mov	r0, fp
9000cbf2:	f7ff fc39 	bl	9000c468 <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
9000cbf6:	f8cb 8090 	str.w	r8, [fp, #144]	; 0x90
      if (huart->RxXferCount == 0U)
9000cbfa:	f8bb 305e 	ldrh.w	r3, [fp, #94]	; 0x5e
9000cbfe:	b29b      	uxth	r3, r3
9000cc00:	2b00      	cmp	r3, #0
9000cc02:	d1e0      	bne.n	9000cbc6 <UART_RxISR_16BIT_FIFOEN+0xaa>
9000cc04:	f8db 3000 	ldr.w	r3, [fp]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000cc08:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
9000cc0c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000cc10:	e843 2100 	strex	r1, r2, [r3]
9000cc14:	2900      	cmp	r1, #0
9000cc16:	d1f7      	bne.n	9000cc08 <UART_RxISR_16BIT_FIFOEN+0xec>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000cc18:	f103 0208 	add.w	r2, r3, #8
9000cc1c:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
9000cc20:	ea02 0209 	and.w	r2, r2, r9
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000cc24:	f103 0008 	add.w	r0, r3, #8
9000cc28:	e840 2100 	strex	r1, r2, [r0]
9000cc2c:	2900      	cmp	r1, #0
9000cc2e:	d1f3      	bne.n	9000cc18 <UART_RxISR_16BIT_FIFOEN+0xfc>
        huart->RxState = HAL_UART_STATE_READY;
9000cc30:	2220      	movs	r2, #32
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
9000cc32:	42bb      	cmp	r3, r7
        huart->RxISR = NULL;
9000cc34:	f8cb 1074 	str.w	r1, [fp, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
9000cc38:	f8cb 208c 	str.w	r2, [fp, #140]	; 0x8c
        huart->RxEventType = HAL_UART_RXEVENT_TC;
9000cc3c:	f8cb 1070 	str.w	r1, [fp, #112]	; 0x70
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
9000cc40:	d002      	beq.n	9000cc48 <UART_RxISR_16BIT_FIFOEN+0x12c>
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
9000cc42:	685a      	ldr	r2, [r3, #4]
9000cc44:	0211      	lsls	r1, r2, #8
9000cc46:	d42d      	bmi.n	9000cca4 <UART_RxISR_16BIT_FIFOEN+0x188>
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
9000cc48:	f8db 206c 	ldr.w	r2, [fp, #108]	; 0x6c
9000cc4c:	2a01      	cmp	r2, #1
9000cc4e:	d03a      	beq.n	9000ccc6 <UART_RxISR_16BIT_FIFOEN+0x1aa>
          HAL_UART_RxCpltCallback(huart);
9000cc50:	4658      	mov	r0, fp
9000cc52:	f7f6 feeb 	bl	90003a2c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
9000cc56:	06a3      	lsls	r3, r4, #26
9000cc58:	d4b7      	bmi.n	9000cbca <UART_RxISR_16BIT_FIFOEN+0xae>
    rxdatacount = huart->RxXferCount;
9000cc5a:	f8bb 305e 	ldrh.w	r3, [fp, #94]	; 0x5e
9000cc5e:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
9000cc60:	2b00      	cmp	r3, #0
9000cc62:	f43f af6b 	beq.w	9000cb3c <UART_RxISR_16BIT_FIFOEN+0x20>
9000cc66:	f8bb 2068 	ldrh.w	r2, [fp, #104]	; 0x68
9000cc6a:	429a      	cmp	r2, r3
9000cc6c:	f67f af66 	bls.w	9000cb3c <UART_RxISR_16BIT_FIFOEN+0x20>
9000cc70:	f8db 3000 	ldr.w	r3, [fp]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000cc74:	f103 0208 	add.w	r2, r3, #8
9000cc78:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
9000cc7c:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000cc80:	f103 0008 	add.w	r0, r3, #8
9000cc84:	e840 2100 	strex	r1, r2, [r0]
9000cc88:	2900      	cmp	r1, #0
9000cc8a:	d1f3      	bne.n	9000cc74 <UART_RxISR_16BIT_FIFOEN+0x158>
      huart->RxISR = UART_RxISR_16BIT;
9000cc8c:	4a1b      	ldr	r2, [pc, #108]	; (9000ccfc <UART_RxISR_16BIT_FIFOEN+0x1e0>)
9000cc8e:	f8cb 2074 	str.w	r2, [fp, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000cc92:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
9000cc96:	f042 0220 	orr.w	r2, r2, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000cc9a:	e843 2100 	strex	r1, r2, [r3]
9000cc9e:	2900      	cmp	r1, #0
9000cca0:	d1f7      	bne.n	9000cc92 <UART_RxISR_16BIT_FIFOEN+0x176>
9000cca2:	e74b      	b.n	9000cb3c <UART_RxISR_16BIT_FIFOEN+0x20>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000cca4:	e853 2f00 	ldrex	r2, [r3]
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
9000cca8:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000ccac:	e843 2100 	strex	r1, r2, [r3]
9000ccb0:	2900      	cmp	r1, #0
9000ccb2:	d0c9      	beq.n	9000cc48 <UART_RxISR_16BIT_FIFOEN+0x12c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000ccb4:	e853 2f00 	ldrex	r2, [r3]
9000ccb8:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000ccbc:	e843 2100 	strex	r1, r2, [r3]
9000ccc0:	2900      	cmp	r1, #0
9000ccc2:	d1ef      	bne.n	9000cca4 <UART_RxISR_16BIT_FIFOEN+0x188>
9000ccc4:	e7c0      	b.n	9000cc48 <UART_RxISR_16BIT_FIFOEN+0x12c>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
9000ccc6:	f8cb 806c 	str.w	r8, [fp, #108]	; 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000ccca:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
9000ccce:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000ccd2:	e843 2100 	strex	r1, r2, [r3]
9000ccd6:	2900      	cmp	r1, #0
9000ccd8:	d1f7      	bne.n	9000ccca <UART_RxISR_16BIT_FIFOEN+0x1ae>
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
9000ccda:	69da      	ldr	r2, [r3, #28]
9000ccdc:	06d2      	lsls	r2, r2, #27
9000ccde:	d501      	bpl.n	9000cce4 <UART_RxISR_16BIT_FIFOEN+0x1c8>
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
9000cce0:	2210      	movs	r2, #16
9000cce2:	621a      	str	r2, [r3, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
9000cce4:	f8bb 105c 	ldrh.w	r1, [fp, #92]	; 0x5c
9000cce8:	4658      	mov	r0, fp
9000ccea:	f7ff fbc9 	bl	9000c480 <HAL_UARTEx_RxEventCallback>
9000ccee:	e76a      	b.n	9000cbc6 <UART_RxISR_16BIT_FIFOEN+0xaa>
    rxdatacount = huart->RxXferCount;
9000ccf0:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
9000ccf4:	e722      	b.n	9000cb3c <UART_RxISR_16BIT_FIFOEN+0x20>
9000ccf6:	bf00      	nop
9000ccf8:	58000c00 	.word	0x58000c00
9000ccfc:	9000c8a1 	.word	0x9000c8a1
9000cd00:	effffffe 	.word	0xeffffffe

9000cd04 <UART_SetConfig>:
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
9000cd04:	6901      	ldr	r1, [r0, #16]
9000cd06:	6882      	ldr	r2, [r0, #8]
  if (UART_INSTANCE_LOWPOWER(huart))
9000cd08:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
9000cd0a:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
9000cd0c:	49c0      	ldr	r1, [pc, #768]	; (9000d010 <UART_SetConfig+0x30c>)
{
9000cd0e:	b530      	push	{r4, r5, lr}
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
9000cd10:	6945      	ldr	r5, [r0, #20]
{
9000cd12:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
9000cd14:	69c0      	ldr	r0, [r0, #28]
{
9000cd16:	b087      	sub	sp, #28
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
9000cd18:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
9000cd1a:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
9000cd1c:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
9000cd1e:	4029      	ands	r1, r5
  if (!(UART_INSTANCE_LOWPOWER(huart)))
9000cd20:	4dbc      	ldr	r5, [pc, #752]	; (9000d014 <UART_SetConfig+0x310>)
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
9000cd22:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
9000cd24:	68e1      	ldr	r1, [r4, #12]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
9000cd26:	42ab      	cmp	r3, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
9000cd28:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
9000cd2a:	685a      	ldr	r2, [r3, #4]
9000cd2c:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
9000cd30:	ea42 0201 	orr.w	r2, r2, r1
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
9000cd34:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
9000cd36:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
9000cd38:	f000 80e0 	beq.w	9000cefc <UART_SetConfig+0x1f8>
    tmpreg |= huart->Init.OneBitSampling;
9000cd3c:	6a22      	ldr	r2, [r4, #32]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
9000cd3e:	689d      	ldr	r5, [r3, #8]
    tmpreg |= huart->Init.OneBitSampling;
9000cd40:	4311      	orrs	r1, r2
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
9000cd42:	4ab5      	ldr	r2, [pc, #724]	; (9000d018 <UART_SetConfig+0x314>)
9000cd44:	402a      	ands	r2, r5
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
9000cd46:	6a65      	ldr	r5, [r4, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
9000cd48:	4311      	orrs	r1, r2
9000cd4a:	6099      	str	r1, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
9000cd4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
9000cd4e:	f022 020f 	bic.w	r2, r2, #15
9000cd52:	432a      	orrs	r2, r5
9000cd54:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
9000cd56:	4ab1      	ldr	r2, [pc, #708]	; (9000d01c <UART_SetConfig+0x318>)
9000cd58:	4293      	cmp	r3, r2
9000cd5a:	d023      	beq.n	9000cda4 <UART_SetConfig+0xa0>
9000cd5c:	4ab0      	ldr	r2, [pc, #704]	; (9000d020 <UART_SetConfig+0x31c>)
9000cd5e:	4293      	cmp	r3, r2
9000cd60:	d076      	beq.n	9000ce50 <UART_SetConfig+0x14c>
9000cd62:	4ab0      	ldr	r2, [pc, #704]	; (9000d024 <UART_SetConfig+0x320>)
9000cd64:	4293      	cmp	r3, r2
9000cd66:	f000 818f 	beq.w	9000d088 <UART_SetConfig+0x384>
9000cd6a:	4aaf      	ldr	r2, [pc, #700]	; (9000d028 <UART_SetConfig+0x324>)
9000cd6c:	4293      	cmp	r3, r2
9000cd6e:	f000 81e1 	beq.w	9000d134 <UART_SetConfig+0x430>
9000cd72:	4aae      	ldr	r2, [pc, #696]	; (9000d02c <UART_SetConfig+0x328>)
9000cd74:	4293      	cmp	r3, r2
9000cd76:	f000 8121 	beq.w	9000cfbc <UART_SetConfig+0x2b8>
9000cd7a:	4aad      	ldr	r2, [pc, #692]	; (9000d030 <UART_SetConfig+0x32c>)
9000cd7c:	4293      	cmp	r3, r2
9000cd7e:	f000 81e3 	beq.w	9000d148 <UART_SetConfig+0x444>
9000cd82:	4aac      	ldr	r2, [pc, #688]	; (9000d034 <UART_SetConfig+0x330>)
9000cd84:	4293      	cmp	r3, r2
9000cd86:	f000 8234 	beq.w	9000d1f2 <UART_SetConfig+0x4ee>
9000cd8a:	4aab      	ldr	r2, [pc, #684]	; (9000d038 <UART_SetConfig+0x334>)
9000cd8c:	4293      	cmp	r3, r2
9000cd8e:	f000 81e7 	beq.w	9000d160 <UART_SetConfig+0x45c>
        ret = HAL_ERROR;
9000cd92:	2001      	movs	r0, #1
  huart->RxISR = NULL;
9000cd94:	2300      	movs	r3, #0
  huart->NbRxDataToProcess = 1;
9000cd96:	f04f 1201 	mov.w	r2, #65537	; 0x10001
  huart->RxISR = NULL;
9000cd9a:	6763      	str	r3, [r4, #116]	; 0x74
  huart->NbRxDataToProcess = 1;
9000cd9c:	66a2      	str	r2, [r4, #104]	; 0x68
  huart->TxISR = NULL;
9000cd9e:	67a3      	str	r3, [r4, #120]	; 0x78
}
9000cda0:	b007      	add	sp, #28
9000cda2:	bd30      	pop	{r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
9000cda4:	4ba5      	ldr	r3, [pc, #660]	; (9000d03c <UART_SetConfig+0x338>)
9000cda6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
9000cda8:	f003 0338 	and.w	r3, r3, #56	; 0x38
9000cdac:	2b28      	cmp	r3, #40	; 0x28
9000cdae:	d8f0      	bhi.n	9000cd92 <UART_SetConfig+0x8e>
9000cdb0:	4aa3      	ldr	r2, [pc, #652]	; (9000d040 <UART_SetConfig+0x33c>)
9000cdb2:	5cd3      	ldrb	r3, [r2, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
9000cdb4:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
9000cdb8:	d055      	beq.n	9000ce66 <UART_SetConfig+0x162>
    switch (clocksource)
9000cdba:	2b20      	cmp	r3, #32
9000cdbc:	f200 814a 	bhi.w	9000d054 <UART_SetConfig+0x350>
9000cdc0:	2b20      	cmp	r3, #32
9000cdc2:	d8e6      	bhi.n	9000cd92 <UART_SetConfig+0x8e>
9000cdc4:	a201      	add	r2, pc, #4	; (adr r2, 9000cdcc <UART_SetConfig+0xc8>)
9000cdc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000cdca:	bf00      	nop
9000cdcc:	9000d00b 	.word	0x9000d00b
9000cdd0:	9000d005 	.word	0x9000d005
9000cdd4:	9000cd93 	.word	0x9000cd93
9000cdd8:	9000cd93 	.word	0x9000cd93
9000cddc:	9000cff5 	.word	0x9000cff5
9000cde0:	9000cd93 	.word	0x9000cd93
9000cde4:	9000cd93 	.word	0x9000cd93
9000cde8:	9000cd93 	.word	0x9000cd93
9000cdec:	9000cfe7 	.word	0x9000cfe7
9000cdf0:	9000cd93 	.word	0x9000cd93
9000cdf4:	9000cd93 	.word	0x9000cd93
9000cdf8:	9000cd93 	.word	0x9000cd93
9000cdfc:	9000cd93 	.word	0x9000cd93
9000ce00:	9000cd93 	.word	0x9000cd93
9000ce04:	9000cd93 	.word	0x9000cd93
9000ce08:	9000cd93 	.word	0x9000cd93
9000ce0c:	9000cfd1 	.word	0x9000cfd1
9000ce10:	9000cd93 	.word	0x9000cd93
9000ce14:	9000cd93 	.word	0x9000cd93
9000ce18:	9000cd93 	.word	0x9000cd93
9000ce1c:	9000cd93 	.word	0x9000cd93
9000ce20:	9000cd93 	.word	0x9000cd93
9000ce24:	9000cd93 	.word	0x9000cd93
9000ce28:	9000cd93 	.word	0x9000cd93
9000ce2c:	9000cd93 	.word	0x9000cd93
9000ce30:	9000cd93 	.word	0x9000cd93
9000ce34:	9000cd93 	.word	0x9000cd93
9000ce38:	9000cd93 	.word	0x9000cd93
9000ce3c:	9000cd93 	.word	0x9000cd93
9000ce40:	9000cd93 	.word	0x9000cd93
9000ce44:	9000cd93 	.word	0x9000cd93
9000ce48:	9000cd93 	.word	0x9000cd93
9000ce4c:	9000d175 	.word	0x9000d175
  UART_GETCLOCKSOURCE(huart, clocksource);
9000ce50:	4b7a      	ldr	r3, [pc, #488]	; (9000d03c <UART_SetConfig+0x338>)
9000ce52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
9000ce54:	f003 0307 	and.w	r3, r3, #7
9000ce58:	2b05      	cmp	r3, #5
9000ce5a:	d89a      	bhi.n	9000cd92 <UART_SetConfig+0x8e>
9000ce5c:	4a79      	ldr	r2, [pc, #484]	; (9000d044 <UART_SetConfig+0x340>)
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
9000ce5e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
9000ce62:	5cd3      	ldrb	r3, [r2, r3]
9000ce64:	d1a9      	bne.n	9000cdba <UART_SetConfig+0xb6>
    switch (clocksource)
9000ce66:	2b20      	cmp	r3, #32
9000ce68:	f200 8145 	bhi.w	9000d0f6 <UART_SetConfig+0x3f2>
9000ce6c:	2b20      	cmp	r3, #32
9000ce6e:	d890      	bhi.n	9000cd92 <UART_SetConfig+0x8e>
9000ce70:	a201      	add	r2, pc, #4	; (adr r2, 9000ce78 <UART_SetConfig+0x174>)
9000ce72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000ce76:	bf00      	nop
9000ce78:	9000d1df 	.word	0x9000d1df
9000ce7c:	9000d1d9 	.word	0x9000d1d9
9000ce80:	9000cd93 	.word	0x9000cd93
9000ce84:	9000cd93 	.word	0x9000cd93
9000ce88:	9000d1e5 	.word	0x9000d1e5
9000ce8c:	9000cd93 	.word	0x9000cd93
9000ce90:	9000cd93 	.word	0x9000cd93
9000ce94:	9000cd93 	.word	0x9000cd93
9000ce98:	9000d1c7 	.word	0x9000d1c7
9000ce9c:	9000cd93 	.word	0x9000cd93
9000cea0:	9000cd93 	.word	0x9000cd93
9000cea4:	9000cd93 	.word	0x9000cd93
9000cea8:	9000cd93 	.word	0x9000cd93
9000ceac:	9000cd93 	.word	0x9000cd93
9000ceb0:	9000cd93 	.word	0x9000cd93
9000ceb4:	9000cd93 	.word	0x9000cd93
9000ceb8:	9000d1b3 	.word	0x9000d1b3
9000cebc:	9000cd93 	.word	0x9000cd93
9000cec0:	9000cd93 	.word	0x9000cd93
9000cec4:	9000cd93 	.word	0x9000cd93
9000cec8:	9000cd93 	.word	0x9000cd93
9000cecc:	9000cd93 	.word	0x9000cd93
9000ced0:	9000cd93 	.word	0x9000cd93
9000ced4:	9000cd93 	.word	0x9000cd93
9000ced8:	9000cd93 	.word	0x9000cd93
9000cedc:	9000cd93 	.word	0x9000cd93
9000cee0:	9000cd93 	.word	0x9000cd93
9000cee4:	9000cd93 	.word	0x9000cd93
9000cee8:	9000cd93 	.word	0x9000cd93
9000ceec:	9000cd93 	.word	0x9000cd93
9000cef0:	9000cd93 	.word	0x9000cd93
9000cef4:	9000cd93 	.word	0x9000cd93
9000cef8:	9000d1ef 	.word	0x9000d1ef
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
9000cefc:	6898      	ldr	r0, [r3, #8]
9000cefe:	4a46      	ldr	r2, [pc, #280]	; (9000d018 <UART_SetConfig+0x314>)
9000cf00:	4002      	ands	r2, r0
  UART_GETCLOCKSOURCE(huart, clocksource);
9000cf02:	484e      	ldr	r0, [pc, #312]	; (9000d03c <UART_SetConfig+0x338>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
9000cf04:	430a      	orrs	r2, r1
9000cf06:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
9000cf08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
9000cf0a:	6a61      	ldr	r1, [r4, #36]	; 0x24
9000cf0c:	f022 020f 	bic.w	r2, r2, #15
9000cf10:	430a      	orrs	r2, r1
9000cf12:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
9000cf14:	6d83      	ldr	r3, [r0, #88]	; 0x58
9000cf16:	f003 0307 	and.w	r3, r3, #7
9000cf1a:	2b05      	cmp	r3, #5
9000cf1c:	f63f af39 	bhi.w	9000cd92 <UART_SetConfig+0x8e>
9000cf20:	4a49      	ldr	r2, [pc, #292]	; (9000d048 <UART_SetConfig+0x344>)
9000cf22:	5cd3      	ldrb	r3, [r2, r3]
    switch (clocksource)
9000cf24:	2b20      	cmp	r3, #32
9000cf26:	f200 80b9 	bhi.w	9000d09c <UART_SetConfig+0x398>
9000cf2a:	2b01      	cmp	r3, #1
9000cf2c:	f67f af31 	bls.w	9000cd92 <UART_SetConfig+0x8e>
9000cf30:	3b02      	subs	r3, #2
9000cf32:	2b1e      	cmp	r3, #30
9000cf34:	f63f af2d 	bhi.w	9000cd92 <UART_SetConfig+0x8e>
9000cf38:	a201      	add	r2, pc, #4	; (adr r2, 9000cf40 <UART_SetConfig+0x23c>)
9000cf3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000cf3e:	bf00      	nop
9000cf40:	9000d1a9 	.word	0x9000d1a9
9000cf44:	9000cd93 	.word	0x9000cd93
9000cf48:	9000d19f 	.word	0x9000d19f
9000cf4c:	9000cd93 	.word	0x9000cd93
9000cf50:	9000cd93 	.word	0x9000cd93
9000cf54:	9000cd93 	.word	0x9000cd93
9000cf58:	9000d18d 	.word	0x9000d18d
9000cf5c:	9000cd93 	.word	0x9000cd93
9000cf60:	9000cd93 	.word	0x9000cd93
9000cf64:	9000cd93 	.word	0x9000cd93
9000cf68:	9000cd93 	.word	0x9000cd93
9000cf6c:	9000cd93 	.word	0x9000cd93
9000cf70:	9000cd93 	.word	0x9000cd93
9000cf74:	9000cd93 	.word	0x9000cd93
9000cf78:	9000d179 	.word	0x9000d179
9000cf7c:	9000cd93 	.word	0x9000cd93
9000cf80:	9000cd93 	.word	0x9000cd93
9000cf84:	9000cd93 	.word	0x9000cd93
9000cf88:	9000cd93 	.word	0x9000cd93
9000cf8c:	9000cd93 	.word	0x9000cd93
9000cf90:	9000cd93 	.word	0x9000cd93
9000cf94:	9000cd93 	.word	0x9000cd93
9000cf98:	9000cd93 	.word	0x9000cd93
9000cf9c:	9000cd93 	.word	0x9000cd93
9000cfa0:	9000cd93 	.word	0x9000cd93
9000cfa4:	9000cd93 	.word	0x9000cd93
9000cfa8:	9000cd93 	.word	0x9000cd93
9000cfac:	9000cd93 	.word	0x9000cd93
9000cfb0:	9000cd93 	.word	0x9000cd93
9000cfb4:	9000cd93 	.word	0x9000cd93
9000cfb8:	9000d1af 	.word	0x9000d1af
  UART_GETCLOCKSOURCE(huart, clocksource);
9000cfbc:	4b1f      	ldr	r3, [pc, #124]	; (9000d03c <UART_SetConfig+0x338>)
9000cfbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
9000cfc0:	f003 0307 	and.w	r3, r3, #7
9000cfc4:	2b05      	cmp	r3, #5
9000cfc6:	f63f aee4 	bhi.w	9000cd92 <UART_SetConfig+0x8e>
9000cfca:	4a20      	ldr	r2, [pc, #128]	; (9000d04c <UART_SetConfig+0x348>)
9000cfcc:	5cd3      	ldrb	r3, [r2, r3]
9000cfce:	e6f1      	b.n	9000cdb4 <UART_SetConfig+0xb0>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
9000cfd0:	4b1a      	ldr	r3, [pc, #104]	; (9000d03c <UART_SetConfig+0x338>)
9000cfd2:	681a      	ldr	r2, [r3, #0]
9000cfd4:	0692      	lsls	r2, r2, #26
9000cfd6:	f140 80c1 	bpl.w	9000d15c <UART_SetConfig+0x458>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
9000cfda:	681b      	ldr	r3, [r3, #0]
9000cfdc:	481c      	ldr	r0, [pc, #112]	; (9000d050 <UART_SetConfig+0x34c>)
9000cfde:	f3c3 03c1 	ubfx	r3, r3, #3, #2
9000cfe2:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
9000cfe4:	e03b      	b.n	9000d05e <UART_SetConfig+0x35a>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
9000cfe6:	a803      	add	r0, sp, #12
9000cfe8:	f7fe fd42 	bl	9000ba70 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
9000cfec:	9804      	ldr	r0, [sp, #16]
    if (pclk != 0U)
9000cfee:	b938      	cbnz	r0, 9000d000 <UART_SetConfig+0x2fc>
        ret = HAL_ERROR;
9000cff0:	2000      	movs	r0, #0
9000cff2:	e6cf      	b.n	9000cd94 <UART_SetConfig+0x90>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
9000cff4:	4668      	mov	r0, sp
9000cff6:	f7fe fc8f 	bl	9000b918 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
9000cffa:	9801      	ldr	r0, [sp, #4]
    if (pclk != 0U)
9000cffc:	2800      	cmp	r0, #0
9000cffe:	d0f7      	beq.n	9000cff0 <UART_SetConfig+0x2ec>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
9000d000:	6a65      	ldr	r5, [r4, #36]	; 0x24
9000d002:	e02c      	b.n	9000d05e <UART_SetConfig+0x35a>
        pclk = HAL_RCC_GetPCLK2Freq();
9000d004:	f7fd fd0e 	bl	9000aa24 <HAL_RCC_GetPCLK2Freq>
        break;
9000d008:	e7f1      	b.n	9000cfee <UART_SetConfig+0x2ea>
        pclk = HAL_RCC_GetPCLK1Freq();
9000d00a:	f7fd fcc3 	bl	9000a994 <HAL_RCC_GetPCLK1Freq>
        break;
9000d00e:	e7ee      	b.n	9000cfee <UART_SetConfig+0x2ea>
9000d010:	cfff69f3 	.word	0xcfff69f3
9000d014:	58000c00 	.word	0x58000c00
9000d018:	11fff4ff 	.word	0x11fff4ff
9000d01c:	40011000 	.word	0x40011000
9000d020:	40004400 	.word	0x40004400
9000d024:	40004800 	.word	0x40004800
9000d028:	40004c00 	.word	0x40004c00
9000d02c:	40005000 	.word	0x40005000
9000d030:	40011400 	.word	0x40011400
9000d034:	40007800 	.word	0x40007800
9000d038:	40007c00 	.word	0x40007c00
9000d03c:	58024400 	.word	0x58024400
9000d040:	90028b94 	.word	0x90028b94
9000d044:	90028bc0 	.word	0x90028bc0
9000d048:	90028bc8 	.word	0x90028bc8
9000d04c:	90028bc0 	.word	0x90028bc0
9000d050:	03d09000 	.word	0x03d09000
    switch (clocksource)
9000d054:	2b40      	cmp	r3, #64	; 0x40
9000d056:	f47f ae9c 	bne.w	9000cd92 <UART_SetConfig+0x8e>
9000d05a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
9000d05e:	4b6c      	ldr	r3, [pc, #432]	; (9000d210 <UART_SetConfig+0x50c>)
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
9000d060:	f64f 71ef 	movw	r1, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
9000d064:	6862      	ldr	r2, [r4, #4]
9000d066:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
9000d06a:	fbb0 f3f3 	udiv	r3, r0, r3
9000d06e:	eb03 0352 	add.w	r3, r3, r2, lsr #1
9000d072:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
9000d076:	f1a3 0210 	sub.w	r2, r3, #16
9000d07a:	428a      	cmp	r2, r1
9000d07c:	f63f ae89 	bhi.w	9000cd92 <UART_SetConfig+0x8e>
        huart->Instance->BRR = (uint16_t)usartdiv;
9000d080:	6822      	ldr	r2, [r4, #0]
9000d082:	2000      	movs	r0, #0
9000d084:	60d3      	str	r3, [r2, #12]
9000d086:	e685      	b.n	9000cd94 <UART_SetConfig+0x90>
  UART_GETCLOCKSOURCE(huart, clocksource);
9000d088:	4b62      	ldr	r3, [pc, #392]	; (9000d214 <UART_SetConfig+0x510>)
9000d08a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
9000d08c:	f003 0307 	and.w	r3, r3, #7
9000d090:	2b05      	cmp	r3, #5
9000d092:	f63f ae7e 	bhi.w	9000cd92 <UART_SetConfig+0x8e>
9000d096:	4a60      	ldr	r2, [pc, #384]	; (9000d218 <UART_SetConfig+0x514>)
9000d098:	5cd3      	ldrb	r3, [r2, r3]
9000d09a:	e68b      	b.n	9000cdb4 <UART_SetConfig+0xb0>
    switch (clocksource)
9000d09c:	2b40      	cmp	r3, #64	; 0x40
9000d09e:	f47f ae78 	bne.w	9000cd92 <UART_SetConfig+0x8e>
9000d0a2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
9000d0a6:	4b5a      	ldr	r3, [pc, #360]	; (9000d210 <UART_SetConfig+0x50c>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
9000d0a8:	6865      	ldr	r5, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
9000d0aa:	f833 2011 	ldrh.w	r2, [r3, r1, lsl #1]
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
9000d0ae:	eb05 0145 	add.w	r1, r5, r5, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
9000d0b2:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
9000d0b6:	4299      	cmp	r1, r3
9000d0b8:	f63f ae6b 	bhi.w	9000cd92 <UART_SetConfig+0x8e>
9000d0bc:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
9000d0c0:	f63f ae67 	bhi.w	9000cd92 <UART_SetConfig+0x8e>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
9000d0c4:	2300      	movs	r3, #0
9000d0c6:	4619      	mov	r1, r3
9000d0c8:	f7f3 f962 	bl	90000390 <__aeabi_uldivmod>
9000d0cc:	462a      	mov	r2, r5
9000d0ce:	0209      	lsls	r1, r1, #8
9000d0d0:	0203      	lsls	r3, r0, #8
9000d0d2:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
9000d0d6:	0868      	lsrs	r0, r5, #1
9000d0d8:	1818      	adds	r0, r3, r0
9000d0da:	f04f 0300 	mov.w	r3, #0
9000d0de:	f141 0100 	adc.w	r1, r1, #0
9000d0e2:	f7f3 f955 	bl	90000390 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
9000d0e6:	4a4d      	ldr	r2, [pc, #308]	; (9000d21c <UART_SetConfig+0x518>)
9000d0e8:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
9000d0ec:	4603      	mov	r3, r0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
9000d0ee:	4291      	cmp	r1, r2
9000d0f0:	f63f ae4f 	bhi.w	9000cd92 <UART_SetConfig+0x8e>
9000d0f4:	e7c4      	b.n	9000d080 <UART_SetConfig+0x37c>
    switch (clocksource)
9000d0f6:	2b40      	cmp	r3, #64	; 0x40
9000d0f8:	f47f ae4b 	bne.w	9000cd92 <UART_SetConfig+0x8e>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
9000d0fc:	4b44      	ldr	r3, [pc, #272]	; (9000d210 <UART_SetConfig+0x50c>)
9000d0fe:	6862      	ldr	r2, [r4, #4]
9000d100:	f833 1015 	ldrh.w	r1, [r3, r5, lsl #1]
9000d104:	0853      	lsrs	r3, r2, #1
9000d106:	fbb0 f0f1 	udiv	r0, r0, r1
9000d10a:	eb03 0340 	add.w	r3, r3, r0, lsl #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
9000d10e:	f64f 71ef 	movw	r1, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
9000d112:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
9000d116:	f1a3 0210 	sub.w	r2, r3, #16
9000d11a:	428a      	cmp	r2, r1
9000d11c:	f63f ae39 	bhi.w	9000cd92 <UART_SetConfig+0x8e>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
9000d120:	f023 020f 	bic.w	r2, r3, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
9000d124:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
9000d128:	6821      	ldr	r1, [r4, #0]
9000d12a:	2000      	movs	r0, #0
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
9000d12c:	b292      	uxth	r2, r2
        huart->Instance->BRR = brrtemp;
9000d12e:	4313      	orrs	r3, r2
9000d130:	60cb      	str	r3, [r1, #12]
9000d132:	e62f      	b.n	9000cd94 <UART_SetConfig+0x90>
  UART_GETCLOCKSOURCE(huart, clocksource);
9000d134:	4b37      	ldr	r3, [pc, #220]	; (9000d214 <UART_SetConfig+0x510>)
9000d136:	6d5b      	ldr	r3, [r3, #84]	; 0x54
9000d138:	f003 0307 	and.w	r3, r3, #7
9000d13c:	2b05      	cmp	r3, #5
9000d13e:	f63f ae28 	bhi.w	9000cd92 <UART_SetConfig+0x8e>
9000d142:	4a37      	ldr	r2, [pc, #220]	; (9000d220 <UART_SetConfig+0x51c>)
9000d144:	5cd3      	ldrb	r3, [r2, r3]
9000d146:	e635      	b.n	9000cdb4 <UART_SetConfig+0xb0>
9000d148:	4b32      	ldr	r3, [pc, #200]	; (9000d214 <UART_SetConfig+0x510>)
9000d14a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
9000d14c:	f003 0338 	and.w	r3, r3, #56	; 0x38
9000d150:	2b28      	cmp	r3, #40	; 0x28
9000d152:	f63f ae1e 	bhi.w	9000cd92 <UART_SetConfig+0x8e>
9000d156:	4a33      	ldr	r2, [pc, #204]	; (9000d224 <UART_SetConfig+0x520>)
9000d158:	5cd3      	ldrb	r3, [r2, r3]
9000d15a:	e62b      	b.n	9000cdb4 <UART_SetConfig+0xb0>
          pclk = (uint32_t) HSI_VALUE;
9000d15c:	4832      	ldr	r0, [pc, #200]	; (9000d228 <UART_SetConfig+0x524>)
9000d15e:	e77e      	b.n	9000d05e <UART_SetConfig+0x35a>
  UART_GETCLOCKSOURCE(huart, clocksource);
9000d160:	4b2c      	ldr	r3, [pc, #176]	; (9000d214 <UART_SetConfig+0x510>)
9000d162:	6d5b      	ldr	r3, [r3, #84]	; 0x54
9000d164:	f003 0307 	and.w	r3, r3, #7
9000d168:	2b05      	cmp	r3, #5
9000d16a:	f63f ae12 	bhi.w	9000cd92 <UART_SetConfig+0x8e>
9000d16e:	4a2f      	ldr	r2, [pc, #188]	; (9000d22c <UART_SetConfig+0x528>)
9000d170:	5cd3      	ldrb	r3, [r2, r3]
9000d172:	e61f      	b.n	9000cdb4 <UART_SetConfig+0xb0>
        pclk = (uint32_t) CSI_VALUE;
9000d174:	482e      	ldr	r0, [pc, #184]	; (9000d230 <UART_SetConfig+0x52c>)
9000d176:	e772      	b.n	9000d05e <UART_SetConfig+0x35a>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
9000d178:	4b26      	ldr	r3, [pc, #152]	; (9000d214 <UART_SetConfig+0x510>)
9000d17a:	681a      	ldr	r2, [r3, #0]
9000d17c:	0690      	lsls	r0, r2, #26
9000d17e:	d542      	bpl.n	9000d206 <UART_SetConfig+0x502>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
9000d180:	681b      	ldr	r3, [r3, #0]
9000d182:	4829      	ldr	r0, [pc, #164]	; (9000d228 <UART_SetConfig+0x524>)
9000d184:	f3c3 03c1 	ubfx	r3, r3, #3, #2
9000d188:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
9000d18a:	e78c      	b.n	9000d0a6 <UART_SetConfig+0x3a2>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
9000d18c:	a803      	add	r0, sp, #12
9000d18e:	f7fe fc6f 	bl	9000ba70 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
9000d192:	9804      	ldr	r0, [sp, #16]
    if (pclk != 0U)
9000d194:	2800      	cmp	r0, #0
9000d196:	f43f af2b 	beq.w	9000cff0 <UART_SetConfig+0x2ec>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
9000d19a:	6a61      	ldr	r1, [r4, #36]	; 0x24
9000d19c:	e783      	b.n	9000d0a6 <UART_SetConfig+0x3a2>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
9000d19e:	4668      	mov	r0, sp
9000d1a0:	f7fe fbba 	bl	9000b918 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
9000d1a4:	9801      	ldr	r0, [sp, #4]
        break;
9000d1a6:	e7f5      	b.n	9000d194 <UART_SetConfig+0x490>
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
9000d1a8:	f7fe fba4 	bl	9000b8f4 <HAL_RCCEx_GetD3PCLK1Freq>
        break;
9000d1ac:	e7f2      	b.n	9000d194 <UART_SetConfig+0x490>
        pclk = (uint32_t) CSI_VALUE;
9000d1ae:	4820      	ldr	r0, [pc, #128]	; (9000d230 <UART_SetConfig+0x52c>)
9000d1b0:	e779      	b.n	9000d0a6 <UART_SetConfig+0x3a2>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
9000d1b2:	4b18      	ldr	r3, [pc, #96]	; (9000d214 <UART_SetConfig+0x510>)
9000d1b4:	681a      	ldr	r2, [r3, #0]
9000d1b6:	0691      	lsls	r1, r2, #26
9000d1b8:	d527      	bpl.n	9000d20a <UART_SetConfig+0x506>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
9000d1ba:	681b      	ldr	r3, [r3, #0]
9000d1bc:	481a      	ldr	r0, [pc, #104]	; (9000d228 <UART_SetConfig+0x524>)
9000d1be:	f3c3 03c1 	ubfx	r3, r3, #3, #2
9000d1c2:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
9000d1c4:	e79a      	b.n	9000d0fc <UART_SetConfig+0x3f8>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
9000d1c6:	a803      	add	r0, sp, #12
9000d1c8:	f7fe fc52 	bl	9000ba70 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
9000d1cc:	9804      	ldr	r0, [sp, #16]
    if (pclk != 0U)
9000d1ce:	2800      	cmp	r0, #0
9000d1d0:	f43f af0e 	beq.w	9000cff0 <UART_SetConfig+0x2ec>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
9000d1d4:	6a65      	ldr	r5, [r4, #36]	; 0x24
9000d1d6:	e791      	b.n	9000d0fc <UART_SetConfig+0x3f8>
        pclk = HAL_RCC_GetPCLK2Freq();
9000d1d8:	f7fd fc24 	bl	9000aa24 <HAL_RCC_GetPCLK2Freq>
        break;
9000d1dc:	e7f7      	b.n	9000d1ce <UART_SetConfig+0x4ca>
        pclk = HAL_RCC_GetPCLK1Freq();
9000d1de:	f7fd fbd9 	bl	9000a994 <HAL_RCC_GetPCLK1Freq>
        break;
9000d1e2:	e7f4      	b.n	9000d1ce <UART_SetConfig+0x4ca>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
9000d1e4:	4668      	mov	r0, sp
9000d1e6:	f7fe fb97 	bl	9000b918 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
9000d1ea:	9801      	ldr	r0, [sp, #4]
        break;
9000d1ec:	e7ef      	b.n	9000d1ce <UART_SetConfig+0x4ca>
        pclk = (uint32_t) CSI_VALUE;
9000d1ee:	4810      	ldr	r0, [pc, #64]	; (9000d230 <UART_SetConfig+0x52c>)
9000d1f0:	e784      	b.n	9000d0fc <UART_SetConfig+0x3f8>
  UART_GETCLOCKSOURCE(huart, clocksource);
9000d1f2:	4b08      	ldr	r3, [pc, #32]	; (9000d214 <UART_SetConfig+0x510>)
9000d1f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
9000d1f6:	f003 0307 	and.w	r3, r3, #7
9000d1fa:	2b05      	cmp	r3, #5
9000d1fc:	f63f adc9 	bhi.w	9000cd92 <UART_SetConfig+0x8e>
9000d200:	4a0c      	ldr	r2, [pc, #48]	; (9000d234 <UART_SetConfig+0x530>)
9000d202:	5cd3      	ldrb	r3, [r2, r3]
9000d204:	e5d6      	b.n	9000cdb4 <UART_SetConfig+0xb0>
          pclk = (uint32_t) HSI_VALUE;
9000d206:	4808      	ldr	r0, [pc, #32]	; (9000d228 <UART_SetConfig+0x524>)
9000d208:	e74d      	b.n	9000d0a6 <UART_SetConfig+0x3a2>
          pclk = (uint32_t) HSI_VALUE;
9000d20a:	4807      	ldr	r0, [pc, #28]	; (9000d228 <UART_SetConfig+0x524>)
9000d20c:	e776      	b.n	9000d0fc <UART_SetConfig+0x3f8>
9000d20e:	bf00      	nop
9000d210:	90028bd0 	.word	0x90028bd0
9000d214:	58024400 	.word	0x58024400
9000d218:	90028bc0 	.word	0x90028bc0
9000d21c:	000ffcff 	.word	0x000ffcff
9000d220:	90028bc0 	.word	0x90028bc0
9000d224:	90028b94 	.word	0x90028b94
9000d228:	03d09000 	.word	0x03d09000
9000d22c:	90028bc0 	.word	0x90028bc0
9000d230:	003d0900 	.word	0x003d0900
9000d234:	90028bc0 	.word	0x90028bc0

9000d238 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
9000d238:	6a83      	ldr	r3, [r0, #40]	; 0x28
9000d23a:	07da      	lsls	r2, r3, #31
{
9000d23c:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
9000d23e:	d506      	bpl.n	9000d24e <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
9000d240:	6801      	ldr	r1, [r0, #0]
9000d242:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
9000d244:	684a      	ldr	r2, [r1, #4]
9000d246:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
9000d24a:	4322      	orrs	r2, r4
9000d24c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
9000d24e:	079c      	lsls	r4, r3, #30
9000d250:	d506      	bpl.n	9000d260 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
9000d252:	6801      	ldr	r1, [r0, #0]
9000d254:	6b04      	ldr	r4, [r0, #48]	; 0x30
9000d256:	684a      	ldr	r2, [r1, #4]
9000d258:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
9000d25c:	4322      	orrs	r2, r4
9000d25e:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
9000d260:	0759      	lsls	r1, r3, #29
9000d262:	d506      	bpl.n	9000d272 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
9000d264:	6801      	ldr	r1, [r0, #0]
9000d266:	6b44      	ldr	r4, [r0, #52]	; 0x34
9000d268:	684a      	ldr	r2, [r1, #4]
9000d26a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
9000d26e:	4322      	orrs	r2, r4
9000d270:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
9000d272:	071a      	lsls	r2, r3, #28
9000d274:	d506      	bpl.n	9000d284 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
9000d276:	6801      	ldr	r1, [r0, #0]
9000d278:	6b84      	ldr	r4, [r0, #56]	; 0x38
9000d27a:	684a      	ldr	r2, [r1, #4]
9000d27c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
9000d280:	4322      	orrs	r2, r4
9000d282:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
9000d284:	06dc      	lsls	r4, r3, #27
9000d286:	d506      	bpl.n	9000d296 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
9000d288:	6801      	ldr	r1, [r0, #0]
9000d28a:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
9000d28c:	688a      	ldr	r2, [r1, #8]
9000d28e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
9000d292:	4322      	orrs	r2, r4
9000d294:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
9000d296:	0699      	lsls	r1, r3, #26
9000d298:	d506      	bpl.n	9000d2a8 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
9000d29a:	6801      	ldr	r1, [r0, #0]
9000d29c:	6c04      	ldr	r4, [r0, #64]	; 0x40
9000d29e:	688a      	ldr	r2, [r1, #8]
9000d2a0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
9000d2a4:	4322      	orrs	r2, r4
9000d2a6:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
9000d2a8:	065a      	lsls	r2, r3, #25
9000d2aa:	d50a      	bpl.n	9000d2c2 <UART_AdvFeatureConfig+0x8a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
9000d2ac:	6801      	ldr	r1, [r0, #0]
9000d2ae:	6c44      	ldr	r4, [r0, #68]	; 0x44
9000d2b0:	684a      	ldr	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
9000d2b2:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
9000d2b6:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
9000d2ba:	ea42 0204 	orr.w	r2, r2, r4
9000d2be:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
9000d2c0:	d00b      	beq.n	9000d2da <UART_AdvFeatureConfig+0xa2>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
9000d2c2:	061b      	lsls	r3, r3, #24
9000d2c4:	d506      	bpl.n	9000d2d4 <UART_AdvFeatureConfig+0x9c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
9000d2c6:	6802      	ldr	r2, [r0, #0]
9000d2c8:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
9000d2ca:	6853      	ldr	r3, [r2, #4]
9000d2cc:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
9000d2d0:	430b      	orrs	r3, r1
9000d2d2:	6053      	str	r3, [r2, #4]
}
9000d2d4:	f85d 4b04 	ldr.w	r4, [sp], #4
9000d2d8:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
9000d2da:	684a      	ldr	r2, [r1, #4]
9000d2dc:	6c84      	ldr	r4, [r0, #72]	; 0x48
9000d2de:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
9000d2e2:	4322      	orrs	r2, r4
9000d2e4:	604a      	str	r2, [r1, #4]
9000d2e6:	e7ec      	b.n	9000d2c2 <UART_AdvFeatureConfig+0x8a>

9000d2e8 <UART_CheckIdleState>:
{
9000d2e8:	b538      	push	{r3, r4, r5, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
9000d2ea:	2300      	movs	r3, #0
{
9000d2ec:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
9000d2ee:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
  tickstart = HAL_GetTick();
9000d2f2:	f7f8 ff63 	bl	900061bc <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
9000d2f6:	6822      	ldr	r2, [r4, #0]
  tickstart = HAL_GetTick();
9000d2f8:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
9000d2fa:	6813      	ldr	r3, [r2, #0]
9000d2fc:	071b      	lsls	r3, r3, #28
9000d2fe:	d40f      	bmi.n	9000d320 <UART_CheckIdleState+0x38>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
9000d300:	6813      	ldr	r3, [r2, #0]
9000d302:	0759      	lsls	r1, r3, #29
9000d304:	d431      	bmi.n	9000d36a <UART_CheckIdleState+0x82>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
9000d306:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
9000d308:	2220      	movs	r2, #32
  return HAL_OK;
9000d30a:	4618      	mov	r0, r3
  huart->gState = HAL_UART_STATE_READY;
9000d30c:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
9000d310:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
9000d314:	66e3      	str	r3, [r4, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
9000d316:	6723      	str	r3, [r4, #112]	; 0x70
      __HAL_UNLOCK(huart);
9000d318:	2300      	movs	r3, #0
9000d31a:	f884 3084 	strb.w	r3, [r4, #132]	; 0x84
}
9000d31e:	bd38      	pop	{r3, r4, r5, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
9000d320:	69d3      	ldr	r3, [r2, #28]
9000d322:	0298      	lsls	r0, r3, #10
9000d324:	d4ec      	bmi.n	9000d300 <UART_CheckIdleState+0x18>
9000d326:	e00c      	b.n	9000d342 <UART_CheckIdleState+0x5a>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
9000d328:	6819      	ldr	r1, [r3, #0]
9000d32a:	461a      	mov	r2, r3
9000d32c:	0749      	lsls	r1, r1, #29
9000d32e:	d505      	bpl.n	9000d33c <UART_CheckIdleState+0x54>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
9000d330:	69d9      	ldr	r1, [r3, #28]
9000d332:	0708      	lsls	r0, r1, #28
9000d334:	d44b      	bmi.n	9000d3ce <UART_CheckIdleState+0xe6>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
9000d336:	69d9      	ldr	r1, [r3, #28]
9000d338:	0509      	lsls	r1, r1, #20
9000d33a:	d476      	bmi.n	9000d42a <UART_CheckIdleState+0x142>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
9000d33c:	69db      	ldr	r3, [r3, #28]
9000d33e:	0298      	lsls	r0, r3, #10
9000d340:	d4de      	bmi.n	9000d300 <UART_CheckIdleState+0x18>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
9000d342:	f7f8 ff3b 	bl	900061bc <HAL_GetTick>
9000d346:	1b43      	subs	r3, r0, r5
9000d348:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
9000d34c:	6823      	ldr	r3, [r4, #0]
9000d34e:	d3eb      	bcc.n	9000d328 <UART_CheckIdleState+0x40>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000d350:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
9000d354:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000d358:	e843 2100 	strex	r1, r2, [r3]
9000d35c:	2900      	cmp	r1, #0
9000d35e:	d1f7      	bne.n	9000d350 <UART_CheckIdleState+0x68>
      huart->gState = HAL_UART_STATE_READY;
9000d360:	2320      	movs	r3, #32
      return HAL_TIMEOUT;
9000d362:	2003      	movs	r0, #3
      huart->gState = HAL_UART_STATE_READY;
9000d364:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
      return HAL_TIMEOUT;
9000d368:	e7d6      	b.n	9000d318 <UART_CheckIdleState+0x30>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
9000d36a:	69d3      	ldr	r3, [r2, #28]
9000d36c:	025b      	lsls	r3, r3, #9
9000d36e:	d4ca      	bmi.n	9000d306 <UART_CheckIdleState+0x1e>
9000d370:	e00d      	b.n	9000d38e <UART_CheckIdleState+0xa6>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
9000d372:	681a      	ldr	r2, [r3, #0]
9000d374:	0750      	lsls	r0, r2, #29
9000d376:	d507      	bpl.n	9000d388 <UART_CheckIdleState+0xa0>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
9000d378:	69da      	ldr	r2, [r3, #28]
9000d37a:	0711      	lsls	r1, r2, #28
9000d37c:	f100 8083 	bmi.w	9000d486 <UART_CheckIdleState+0x19e>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
9000d380:	69da      	ldr	r2, [r3, #28]
9000d382:	0512      	lsls	r2, r2, #20
9000d384:	f100 80ad 	bmi.w	9000d4e2 <UART_CheckIdleState+0x1fa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
9000d388:	69db      	ldr	r3, [r3, #28]
9000d38a:	025b      	lsls	r3, r3, #9
9000d38c:	d4bb      	bmi.n	9000d306 <UART_CheckIdleState+0x1e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
9000d38e:	f7f8 ff15 	bl	900061bc <HAL_GetTick>
9000d392:	1b43      	subs	r3, r0, r5
9000d394:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
9000d398:	6823      	ldr	r3, [r4, #0]
9000d39a:	d3ea      	bcc.n	9000d372 <UART_CheckIdleState+0x8a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000d39c:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
9000d3a0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000d3a4:	e843 2100 	strex	r1, r2, [r3]
9000d3a8:	2900      	cmp	r1, #0
9000d3aa:	d1f7      	bne.n	9000d39c <UART_CheckIdleState+0xb4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000d3ac:	f103 0208 	add.w	r2, r3, #8
9000d3b0:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
9000d3b4:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000d3b8:	f103 0008 	add.w	r0, r3, #8
9000d3bc:	e840 2100 	strex	r1, r2, [r0]
9000d3c0:	2900      	cmp	r1, #0
9000d3c2:	d1f3      	bne.n	9000d3ac <UART_CheckIdleState+0xc4>
      huart->RxState = HAL_UART_STATE_READY;
9000d3c4:	2320      	movs	r3, #32
      return HAL_TIMEOUT;
9000d3c6:	2003      	movs	r0, #3
      huart->RxState = HAL_UART_STATE_READY;
9000d3c8:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
      return HAL_TIMEOUT;
9000d3cc:	e7a4      	b.n	9000d318 <UART_CheckIdleState+0x30>
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
9000d3ce:	2208      	movs	r2, #8
9000d3d0:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000d3d2:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
9000d3d6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000d3da:	e843 2100 	strex	r1, r2, [r3]
9000d3de:	2900      	cmp	r1, #0
9000d3e0:	d1f7      	bne.n	9000d3d2 <UART_CheckIdleState+0xea>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
9000d3e2:	4857      	ldr	r0, [pc, #348]	; (9000d540 <UART_CheckIdleState+0x258>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000d3e4:	f103 0208 	add.w	r2, r3, #8
9000d3e8:	e852 2f00 	ldrex	r2, [r2]
9000d3ec:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000d3ee:	f103 0508 	add.w	r5, r3, #8
9000d3f2:	e845 2100 	strex	r1, r2, [r5]
9000d3f6:	2900      	cmp	r1, #0
9000d3f8:	d1f4      	bne.n	9000d3e4 <UART_CheckIdleState+0xfc>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
9000d3fa:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
9000d3fc:	2a01      	cmp	r2, #1
9000d3fe:	d00b      	beq.n	9000d418 <UART_CheckIdleState+0x130>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
9000d400:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
9000d402:	2020      	movs	r0, #32
           huart->ErrorCode = HAL_UART_ERROR_ORE;
9000d404:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
9000d406:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
  huart->RxISR = NULL;
9000d40a:	6762      	str	r2, [r4, #116]	; 0x74
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
9000d40c:	66e2      	str	r2, [r4, #108]	; 0x6c
           __HAL_UNLOCK(huart);
9000d40e:	f884 2084 	strb.w	r2, [r4, #132]	; 0x84
           huart->ErrorCode = HAL_UART_ERROR_ORE;
9000d412:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
           return HAL_ERROR;
9000d416:	e79b      	b.n	9000d350 <UART_CheckIdleState+0x68>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000d418:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
9000d41c:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000d420:	e843 2100 	strex	r1, r2, [r3]
9000d424:	2900      	cmp	r1, #0
9000d426:	d1f7      	bne.n	9000d418 <UART_CheckIdleState+0x130>
9000d428:	e7ea      	b.n	9000d400 <UART_CheckIdleState+0x118>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
9000d42a:	f44f 6200 	mov.w	r2, #2048	; 0x800
9000d42e:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000d430:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
9000d434:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000d438:	e843 2100 	strex	r1, r2, [r3]
9000d43c:	2900      	cmp	r1, #0
9000d43e:	d1f7      	bne.n	9000d430 <UART_CheckIdleState+0x148>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
9000d440:	483f      	ldr	r0, [pc, #252]	; (9000d540 <UART_CheckIdleState+0x258>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000d442:	f103 0208 	add.w	r2, r3, #8
9000d446:	e852 2f00 	ldrex	r2, [r2]
9000d44a:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000d44c:	f103 0508 	add.w	r5, r3, #8
9000d450:	e845 2100 	strex	r1, r2, [r5]
9000d454:	2900      	cmp	r1, #0
9000d456:	d1f4      	bne.n	9000d442 <UART_CheckIdleState+0x15a>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
9000d458:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
9000d45a:	2a01      	cmp	r2, #1
9000d45c:	d00a      	beq.n	9000d474 <UART_CheckIdleState+0x18c>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
9000d45e:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
9000d460:	2120      	movs	r1, #32
  huart->RxISR = NULL;
9000d462:	6762      	str	r2, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
9000d464:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
          __HAL_UNLOCK(huart);
9000d468:	f884 2084 	strb.w	r2, [r4, #132]	; 0x84
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
9000d46c:	66e2      	str	r2, [r4, #108]	; 0x6c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
9000d46e:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
          return HAL_TIMEOUT;
9000d472:	e76d      	b.n	9000d350 <UART_CheckIdleState+0x68>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000d474:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
9000d478:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000d47c:	e843 2100 	strex	r1, r2, [r3]
9000d480:	2900      	cmp	r1, #0
9000d482:	d1f7      	bne.n	9000d474 <UART_CheckIdleState+0x18c>
9000d484:	e7eb      	b.n	9000d45e <UART_CheckIdleState+0x176>
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
9000d486:	2208      	movs	r2, #8
9000d488:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000d48a:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
9000d48e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000d492:	e843 2100 	strex	r1, r2, [r3]
9000d496:	2900      	cmp	r1, #0
9000d498:	d1f7      	bne.n	9000d48a <UART_CheckIdleState+0x1a2>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
9000d49a:	4829      	ldr	r0, [pc, #164]	; (9000d540 <UART_CheckIdleState+0x258>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000d49c:	f103 0208 	add.w	r2, r3, #8
9000d4a0:	e852 2f00 	ldrex	r2, [r2]
9000d4a4:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000d4a6:	f103 0508 	add.w	r5, r3, #8
9000d4aa:	e845 2100 	strex	r1, r2, [r5]
9000d4ae:	2900      	cmp	r1, #0
9000d4b0:	d1f4      	bne.n	9000d49c <UART_CheckIdleState+0x1b4>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
9000d4b2:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
9000d4b4:	2a01      	cmp	r2, #1
9000d4b6:	d00b      	beq.n	9000d4d0 <UART_CheckIdleState+0x1e8>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
9000d4b8:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
9000d4ba:	2020      	movs	r0, #32
           huart->ErrorCode = HAL_UART_ERROR_ORE;
9000d4bc:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
9000d4be:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
  huart->RxISR = NULL;
9000d4c2:	6762      	str	r2, [r4, #116]	; 0x74
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
9000d4c4:	66e2      	str	r2, [r4, #108]	; 0x6c
           __HAL_UNLOCK(huart);
9000d4c6:	f884 2084 	strb.w	r2, [r4, #132]	; 0x84
           huart->ErrorCode = HAL_UART_ERROR_ORE;
9000d4ca:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
           return HAL_ERROR;
9000d4ce:	e765      	b.n	9000d39c <UART_CheckIdleState+0xb4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000d4d0:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
9000d4d4:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000d4d8:	e843 2100 	strex	r1, r2, [r3]
9000d4dc:	2900      	cmp	r1, #0
9000d4de:	d1f7      	bne.n	9000d4d0 <UART_CheckIdleState+0x1e8>
9000d4e0:	e7ea      	b.n	9000d4b8 <UART_CheckIdleState+0x1d0>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
9000d4e2:	f44f 6200 	mov.w	r2, #2048	; 0x800
9000d4e6:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000d4e8:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
9000d4ec:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000d4f0:	e843 2100 	strex	r1, r2, [r3]
9000d4f4:	2900      	cmp	r1, #0
9000d4f6:	d1f7      	bne.n	9000d4e8 <UART_CheckIdleState+0x200>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
9000d4f8:	4811      	ldr	r0, [pc, #68]	; (9000d540 <UART_CheckIdleState+0x258>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000d4fa:	f103 0208 	add.w	r2, r3, #8
9000d4fe:	e852 2f00 	ldrex	r2, [r2]
9000d502:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000d504:	f103 0508 	add.w	r5, r3, #8
9000d508:	e845 2100 	strex	r1, r2, [r5]
9000d50c:	2900      	cmp	r1, #0
9000d50e:	d1f4      	bne.n	9000d4fa <UART_CheckIdleState+0x212>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
9000d510:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
9000d512:	2a01      	cmp	r2, #1
9000d514:	d00a      	beq.n	9000d52c <UART_CheckIdleState+0x244>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
9000d516:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
9000d518:	2120      	movs	r1, #32
  huart->RxISR = NULL;
9000d51a:	6762      	str	r2, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
9000d51c:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
          __HAL_UNLOCK(huart);
9000d520:	f884 2084 	strb.w	r2, [r4, #132]	; 0x84
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
9000d524:	66e2      	str	r2, [r4, #108]	; 0x6c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
9000d526:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
          return HAL_TIMEOUT;
9000d52a:	e737      	b.n	9000d39c <UART_CheckIdleState+0xb4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000d52c:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
9000d530:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000d534:	e843 2100 	strex	r1, r2, [r3]
9000d538:	2900      	cmp	r1, #0
9000d53a:	d1f7      	bne.n	9000d52c <UART_CheckIdleState+0x244>
9000d53c:	e7eb      	b.n	9000d516 <UART_CheckIdleState+0x22e>
9000d53e:	bf00      	nop
9000d540:	effffffe 	.word	0xeffffffe

9000d544 <HAL_UART_Init>:
  if (huart == NULL)
9000d544:	b380      	cbz	r0, 9000d5a8 <HAL_UART_Init+0x64>
  if (huart->gState == HAL_UART_STATE_RESET)
9000d546:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
{
9000d54a:	b510      	push	{r4, lr}
9000d54c:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
9000d54e:	b333      	cbz	r3, 9000d59e <HAL_UART_Init+0x5a>
  __HAL_UART_DISABLE(huart);
9000d550:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
9000d552:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
9000d554:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
9000d556:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  __HAL_UART_DISABLE(huart);
9000d55a:	6813      	ldr	r3, [r2, #0]
9000d55c:	f023 0301 	bic.w	r3, r3, #1
9000d560:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
9000d562:	f7ff fbcf 	bl	9000cd04 <UART_SetConfig>
9000d566:	2801      	cmp	r0, #1
9000d568:	d017      	beq.n	9000d59a <HAL_UART_Init+0x56>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
9000d56a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
9000d56c:	b98b      	cbnz	r3, 9000d592 <HAL_UART_Init+0x4e>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
9000d56e:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
9000d570:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
9000d572:	685a      	ldr	r2, [r3, #4]
9000d574:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
9000d578:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
9000d57a:	689a      	ldr	r2, [r3, #8]
9000d57c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
9000d580:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
9000d582:	681a      	ldr	r2, [r3, #0]
9000d584:	f042 0201 	orr.w	r2, r2, #1
}
9000d588:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
9000d58c:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
9000d58e:	f7ff beab 	b.w	9000d2e8 <UART_CheckIdleState>
    UART_AdvFeatureConfig(huart);
9000d592:	4620      	mov	r0, r4
9000d594:	f7ff fe50 	bl	9000d238 <UART_AdvFeatureConfig>
9000d598:	e7e9      	b.n	9000d56e <HAL_UART_Init+0x2a>
}
9000d59a:	2001      	movs	r0, #1
9000d59c:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
9000d59e:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
    HAL_UART_MspInit(huart);
9000d5a2:	f7f6 fdd5 	bl	90004150 <HAL_UART_MspInit>
9000d5a6:	e7d3      	b.n	9000d550 <HAL_UART_Init+0xc>
}
9000d5a8:	2001      	movs	r0, #1
9000d5aa:	4770      	bx	lr

9000d5ac <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
9000d5ac:	4770      	bx	lr
9000d5ae:	bf00      	nop

9000d5b0 <HAL_UARTEx_RxFifoFullCallback>:
9000d5b0:	4770      	bx	lr
9000d5b2:	bf00      	nop

9000d5b4 <HAL_UARTEx_TxFifoEmptyCallback>:
9000d5b4:	4770      	bx	lr
9000d5b6:	bf00      	nop

9000d5b8 <HAL_UARTEx_DisableFifoMode>:

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
9000d5b8:	f890 2084 	ldrb.w	r2, [r0, #132]	; 0x84
9000d5bc:	2a01      	cmp	r2, #1
9000d5be:	d017      	beq.n	9000d5f0 <HAL_UARTEx_DisableFifoMode+0x38>

  huart->gState = HAL_UART_STATE_BUSY;

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
9000d5c0:	6802      	ldr	r2, [r0, #0]
9000d5c2:	4603      	mov	r3, r0
  huart->gState = HAL_UART_STATE_BUSY;
9000d5c4:	2024      	movs	r0, #36	; 0x24
  /* Disable UART */
  __HAL_UART_DISABLE(huart);

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
  huart->FifoMode = UART_FIFOMODE_DISABLE;
9000d5c6:	2100      	movs	r1, #0
{
9000d5c8:	b430      	push	{r4, r5}
  huart->gState = HAL_UART_STATE_BUSY;
9000d5ca:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);

  huart->gState = HAL_UART_STATE_READY;
9000d5ce:	2520      	movs	r5, #32
  tmpcr1 = READ_REG(huart->Instance->CR1);
9000d5d0:	6810      	ldr	r0, [r2, #0]
  __HAL_UART_DISABLE(huart);
9000d5d2:	6814      	ldr	r4, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
9000d5d4:	f020 5000 	bic.w	r0, r0, #536870912	; 0x20000000
  __HAL_UART_DISABLE(huart);
9000d5d8:	f024 0401 	bic.w	r4, r4, #1
9000d5dc:	6014      	str	r4, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
9000d5de:	6659      	str	r1, [r3, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
9000d5e0:	6010      	str	r0, [r2, #0]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);

  return HAL_OK;
9000d5e2:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
9000d5e4:	f8c3 5088 	str.w	r5, [r3, #136]	; 0x88
  __HAL_UNLOCK(huart);
9000d5e8:	f883 1084 	strb.w	r1, [r3, #132]	; 0x84
}
9000d5ec:	bc30      	pop	{r4, r5}
9000d5ee:	4770      	bx	lr
  __HAL_LOCK(huart);
9000d5f0:	2002      	movs	r0, #2
}
9000d5f2:	4770      	bx	lr

9000d5f4 <HAL_UARTEx_SetTxFifoThreshold>:
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
9000d5f4:	f890 2084 	ldrb.w	r2, [r0, #132]	; 0x84
9000d5f8:	2a01      	cmp	r2, #1
9000d5fa:	d037      	beq.n	9000d66c <HAL_UARTEx_SetTxFifoThreshold+0x78>

  huart->gState = HAL_UART_STATE_BUSY;

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
9000d5fc:	6802      	ldr	r2, [r0, #0]
9000d5fe:	4603      	mov	r3, r0
  huart->gState = HAL_UART_STATE_BUSY;
9000d600:	2024      	movs	r0, #36	; 0x24
{
9000d602:	b530      	push	{r4, r5, lr}
  huart->gState = HAL_UART_STATE_BUSY;
9000d604:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
9000d608:	6814      	ldr	r4, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
9000d60a:	6810      	ldr	r0, [r2, #0]
9000d60c:	f020 0001 	bic.w	r0, r0, #1
9000d610:	6010      	str	r0, [r2, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
9000d612:	6890      	ldr	r0, [r2, #8]
9000d614:	f020 4060 	bic.w	r0, r0, #3758096384	; 0xe0000000
9000d618:	4301      	orrs	r1, r0
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
9000d61a:	6e58      	ldr	r0, [r3, #100]	; 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
9000d61c:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
9000d61e:	b310      	cbz	r0, 9000d666 <HAL_UARTEx_SetTxFifoThreshold+0x72>
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
9000d620:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
9000d622:	6890      	ldr	r0, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
9000d624:	f3c1 6c42 	ubfx	ip, r1, #25, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
9000d628:	4911      	ldr	r1, [pc, #68]	; (9000d670 <HAL_UARTEx_SetTxFifoThreshold+0x7c>)
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
9000d62a:	ea4f 7e50 	mov.w	lr, r0, lsr #29
                               (uint16_t)denominator[tx_fifo_threshold];
9000d62e:	4d11      	ldr	r5, [pc, #68]	; (9000d674 <HAL_UARTEx_SetTxFifoThreshold+0x80>)
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
9000d630:	f811 000e 	ldrb.w	r0, [r1, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
9000d634:	f811 100c 	ldrb.w	r1, [r1, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
9000d638:	f815 e00e 	ldrb.w	lr, [r5, lr]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
9000d63c:	0100      	lsls	r0, r0, #4
                               (uint16_t)denominator[rx_fifo_threshold];
9000d63e:	f815 500c 	ldrb.w	r5, [r5, ip]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
9000d642:	0109      	lsls	r1, r1, #4
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
9000d644:	fbb0 f0fe 	udiv	r0, r0, lr
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
9000d648:	fbb1 f1f5 	udiv	r1, r1, r5
9000d64c:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
  huart->gState = HAL_UART_STATE_READY;
9000d650:	2520      	movs	r5, #32
  __HAL_UNLOCK(huart);
9000d652:	2100      	movs	r1, #0
9000d654:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  WRITE_REG(huart->Instance->CR1, tmpcr1);
9000d658:	6014      	str	r4, [r2, #0]
  return HAL_OK;
9000d65a:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
9000d65c:	f8c3 5088 	str.w	r5, [r3, #136]	; 0x88
  __HAL_UNLOCK(huart);
9000d660:	f883 1084 	strb.w	r1, [r3, #132]	; 0x84
}
9000d664:	bd30      	pop	{r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
9000d666:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
9000d668:	4608      	mov	r0, r1
9000d66a:	e7ef      	b.n	9000d64c <HAL_UARTEx_SetTxFifoThreshold+0x58>
  __HAL_LOCK(huart);
9000d66c:	2002      	movs	r0, #2
}
9000d66e:	4770      	bx	lr
9000d670:	90028bf0 	.word	0x90028bf0
9000d674:	90028be8 	.word	0x90028be8

9000d678 <HAL_UARTEx_SetRxFifoThreshold>:
  __HAL_LOCK(huart);
9000d678:	f890 2084 	ldrb.w	r2, [r0, #132]	; 0x84
9000d67c:	2a01      	cmp	r2, #1
9000d67e:	d037      	beq.n	9000d6f0 <HAL_UARTEx_SetRxFifoThreshold+0x78>
  tmpcr1 = READ_REG(huart->Instance->CR1);
9000d680:	6802      	ldr	r2, [r0, #0]
9000d682:	4603      	mov	r3, r0
  huart->gState = HAL_UART_STATE_BUSY;
9000d684:	2024      	movs	r0, #36	; 0x24
{
9000d686:	b530      	push	{r4, r5, lr}
  huart->gState = HAL_UART_STATE_BUSY;
9000d688:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
9000d68c:	6814      	ldr	r4, [r2, #0]
  __HAL_UART_DISABLE(huart);
9000d68e:	6810      	ldr	r0, [r2, #0]
9000d690:	f020 0001 	bic.w	r0, r0, #1
9000d694:	6010      	str	r0, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
9000d696:	6890      	ldr	r0, [r2, #8]
9000d698:	f020 6060 	bic.w	r0, r0, #234881024	; 0xe000000
9000d69c:	4301      	orrs	r1, r0
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
9000d69e:	6e58      	ldr	r0, [r3, #100]	; 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
9000d6a0:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
9000d6a2:	b310      	cbz	r0, 9000d6ea <HAL_UARTEx_SetRxFifoThreshold+0x72>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
9000d6a4:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
9000d6a6:	6890      	ldr	r0, [r2, #8]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
9000d6a8:	f3c1 6c42 	ubfx	ip, r1, #25, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
9000d6ac:	4911      	ldr	r1, [pc, #68]	; (9000d6f4 <HAL_UARTEx_SetRxFifoThreshold+0x7c>)
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
9000d6ae:	ea4f 7e50 	mov.w	lr, r0, lsr #29
                               (uint16_t)denominator[tx_fifo_threshold];
9000d6b2:	4d11      	ldr	r5, [pc, #68]	; (9000d6f8 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
9000d6b4:	f811 000e 	ldrb.w	r0, [r1, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
9000d6b8:	f811 100c 	ldrb.w	r1, [r1, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
9000d6bc:	f815 e00e 	ldrb.w	lr, [r5, lr]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
9000d6c0:	0100      	lsls	r0, r0, #4
                               (uint16_t)denominator[rx_fifo_threshold];
9000d6c2:	f815 500c 	ldrb.w	r5, [r5, ip]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
9000d6c6:	0109      	lsls	r1, r1, #4
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
9000d6c8:	fbb0 f0fe 	udiv	r0, r0, lr
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
9000d6cc:	fbb1 f1f5 	udiv	r1, r1, r5
9000d6d0:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
  huart->gState = HAL_UART_STATE_READY;
9000d6d4:	2520      	movs	r5, #32
  __HAL_UNLOCK(huart);
9000d6d6:	2100      	movs	r1, #0
9000d6d8:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  WRITE_REG(huart->Instance->CR1, tmpcr1);
9000d6dc:	6014      	str	r4, [r2, #0]
  return HAL_OK;
9000d6de:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
9000d6e0:	f8c3 5088 	str.w	r5, [r3, #136]	; 0x88
  __HAL_UNLOCK(huart);
9000d6e4:	f883 1084 	strb.w	r1, [r3, #132]	; 0x84
}
9000d6e8:	bd30      	pop	{r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
9000d6ea:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
9000d6ec:	4608      	mov	r0, r1
9000d6ee:	e7ef      	b.n	9000d6d0 <HAL_UARTEx_SetRxFifoThreshold+0x58>
  __HAL_LOCK(huart);
9000d6f0:	2002      	movs	r0, #2
}
9000d6f2:	4770      	bx	lr
9000d6f4:	90028bf0 	.word	0x90028bf0
9000d6f8:	90028be8 	.word	0x90028be8

9000d6fc <FMC_SDRAM_Init>:
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
9000d6fc:	680b      	ldr	r3, [r1, #0]
{
9000d6fe:	b410      	push	{r4}
  if (Init->SDBank == FMC_SDRAM_BANK1)
9000d700:	b9d3      	cbnz	r3, 9000d738 <FMC_SDRAM_Init+0x3c>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
9000d702:	6804      	ldr	r4, [r0, #0]
9000d704:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
9000d708:	684a      	ldr	r2, [r1, #4]
9000d70a:	4023      	ands	r3, r4
9000d70c:	4313      	orrs	r3, r2
9000d70e:	e9d1 4202 	ldrd	r4, r2, [r1, #8]
9000d712:	4323      	orrs	r3, r4
9000d714:	4313      	orrs	r3, r2
9000d716:	e9d1 4204 	ldrd	r4, r2, [r1, #16]
9000d71a:	4323      	orrs	r3, r4
9000d71c:	4313      	orrs	r3, r2
9000d71e:	e9d1 4206 	ldrd	r4, r2, [r1, #24]
9000d722:	4323      	orrs	r3, r4
9000d724:	4313      	orrs	r3, r2
9000d726:	e9d1 4208 	ldrd	r4, r2, [r1, #32]
9000d72a:	4323      	orrs	r3, r4
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
9000d72c:	f85d 4b04 	ldr.w	r4, [sp], #4
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
9000d730:	4313      	orrs	r3, r2
9000d732:	6003      	str	r3, [r0, #0]
}
9000d734:	2000      	movs	r0, #0
9000d736:	4770      	bx	lr
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
9000d738:	6802      	ldr	r2, [r0, #0]
9000d73a:	e9d1 4307 	ldrd	r4, r3, [r1, #28]
9000d73e:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
9000d742:	4322      	orrs	r2, r4
9000d744:	6a4c      	ldr	r4, [r1, #36]	; 0x24
9000d746:	431a      	orrs	r2, r3
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
9000d748:	4b0a      	ldr	r3, [pc, #40]	; (9000d774 <FMC_SDRAM_Init+0x78>)
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
9000d74a:	4322      	orrs	r2, r4
9000d74c:	6002      	str	r2, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
9000d74e:	6842      	ldr	r2, [r0, #4]
9000d750:	4013      	ands	r3, r2
9000d752:	e9d1 4201 	ldrd	r4, r2, [r1, #4]
9000d756:	4323      	orrs	r3, r4
9000d758:	4313      	orrs	r3, r2
9000d75a:	e9d1 4203 	ldrd	r4, r2, [r1, #12]
9000d75e:	4323      	orrs	r3, r4
9000d760:	4313      	orrs	r3, r2
9000d762:	e9d1 4205 	ldrd	r4, r2, [r1, #20]
9000d766:	4323      	orrs	r3, r4
}
9000d768:	f85d 4b04 	ldr.w	r4, [sp], #4
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
9000d76c:	4313      	orrs	r3, r2
9000d76e:	6043      	str	r3, [r0, #4]
}
9000d770:	2000      	movs	r0, #0
9000d772:	4770      	bx	lr
9000d774:	ffff8000 	.word	0xffff8000

9000d778 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
9000d778:	b430      	push	{r4, r5}
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
9000d77a:	bb0a      	cbnz	r2, 9000d7c0 <FMC_SDRAM_Timing_Init+0x48>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
9000d77c:	6883      	ldr	r3, [r0, #8]
9000d77e:	e9d1 2400 	ldrd	r2, r4, [r1]
9000d782:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
9000d786:	3c01      	subs	r4, #1
9000d788:	3a01      	subs	r2, #1
9000d78a:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
9000d78e:	4313      	orrs	r3, r2
9000d790:	e9d1 4202 	ldrd	r4, r2, [r1, #8]
9000d794:	3c01      	subs	r4, #1
9000d796:	3a01      	subs	r2, #1
9000d798:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
9000d79c:	e9d1 5404 	ldrd	r5, r4, [r1, #16]
9000d7a0:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
9000d7a4:	698a      	ldr	r2, [r1, #24]
9000d7a6:	3d01      	subs	r5, #1
9000d7a8:	1e61      	subs	r1, r4, #1
9000d7aa:	3a01      	subs	r2, #1
9000d7ac:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
9000d7b0:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
9000d7b4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
}
9000d7b8:	bc30      	pop	{r4, r5}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
9000d7ba:	6083      	str	r3, [r0, #8]
}
9000d7bc:	2000      	movs	r0, #0
9000d7be:	4770      	bx	lr
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
9000d7c0:	6885      	ldr	r5, [r0, #8]
9000d7c2:	68ca      	ldr	r2, [r1, #12]
9000d7c4:	4b12      	ldr	r3, [pc, #72]	; (9000d810 <FMC_SDRAM_Timing_Init+0x98>)
9000d7c6:	1e54      	subs	r4, r2, #1
9000d7c8:	694a      	ldr	r2, [r1, #20]
9000d7ca:	402b      	ands	r3, r5
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
9000d7cc:	688d      	ldr	r5, [r1, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
9000d7ce:	3a01      	subs	r2, #1
9000d7d0:	ea43 3304 	orr.w	r3, r3, r4, lsl #12
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
9000d7d4:	f105 3cff 	add.w	ip, r5, #4294967295
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
9000d7d8:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
9000d7dc:	e9d1 2400 	ldrd	r2, r4, [r1]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
9000d7e0:	6083      	str	r3, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
9000d7e2:	68c3      	ldr	r3, [r0, #12]
9000d7e4:	3c01      	subs	r4, #1
9000d7e6:	3a01      	subs	r2, #1
9000d7e8:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
9000d7ec:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
9000d7f0:	690c      	ldr	r4, [r1, #16]
9000d7f2:	4313      	orrs	r3, r2
9000d7f4:	698a      	ldr	r2, [r1, #24]
9000d7f6:	1e61      	subs	r1, r4, #1
9000d7f8:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
9000d7fc:	3a01      	subs	r2, #1
9000d7fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
9000d802:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
}
9000d806:	bc30      	pop	{r4, r5}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
9000d808:	60c3      	str	r3, [r0, #12]
}
9000d80a:	2000      	movs	r0, #0
9000d80c:	4770      	bx	lr
9000d80e:	bf00      	nop
9000d810:	ff0f0fff 	.word	0xff0f0fff

9000d814 <FMC_SDRAM_DeInit>:
  * @brief  DeInitializes the FMC_SDRAM peripheral
  * @param  Device Pointer to SDRAM device instance
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_DeInit(FMC_SDRAM_TypeDef *Device, uint32_t Bank)
{
9000d814:	b430      	push	{r4, r5}
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* De-initialize the SDRAM device */
  Device->SDCR[Bank] = 0x000002D0U;
  Device->SDTR[Bank] = 0x0FFFFFFFU;
  Device->SDCMR      = 0x00000000U;
9000d816:	2200      	movs	r2, #0
{
9000d818:	4603      	mov	r3, r0
  Device->SDCR[Bank] = 0x000002D0U;
9000d81a:	f44f 7534 	mov.w	r5, #720	; 0x2d0
  Device->SDTR[Bank] = 0x0FFFFFFFU;
9000d81e:	f06f 4470 	mvn.w	r4, #4026531840	; 0xf0000000
9000d822:	eb00 0c81 	add.w	ip, r0, r1, lsl #2
  Device->SDCR[Bank] = 0x000002D0U;
9000d826:	f840 5021 	str.w	r5, [r0, r1, lsl #2]
  Device->SDRTR      = 0x00000000U;
  Device->SDSR       = 0x00000000U;

  return HAL_OK;
}
9000d82a:	4610      	mov	r0, r2
  Device->SDTR[Bank] = 0x0FFFFFFFU;
9000d82c:	f8cc 4008 	str.w	r4, [ip, #8]
  Device->SDCMR      = 0x00000000U;
9000d830:	611a      	str	r2, [r3, #16]
  Device->SDRTR      = 0x00000000U;
9000d832:	615a      	str	r2, [r3, #20]
  Device->SDSR       = 0x00000000U;
9000d834:	619a      	str	r2, [r3, #24]
}
9000d836:	bc30      	pop	{r4, r5}
9000d838:	4770      	bx	lr
9000d83a:	bf00      	nop

9000d83c <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
9000d83c:	b410      	push	{r4}
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
9000d83e:	e9d1 3400 	ldrd	r3, r4, [r1]
{
9000d842:	4602      	mov	r2, r0
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
9000d844:	6900      	ldr	r0, [r0, #16]
9000d846:	4323      	orrs	r3, r4
9000d848:	e9d1 1402 	ldrd	r1, r4, [r1, #8]
9000d84c:	ea43 2344 	orr.w	r3, r3, r4, lsl #9
9000d850:	4c05      	ldr	r4, [pc, #20]	; (9000d868 <FMC_SDRAM_SendCommand+0x2c>)
9000d852:	3901      	subs	r1, #1
9000d854:	4004      	ands	r4, r0
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
}
9000d856:	2000      	movs	r0, #0
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
9000d858:	4323      	orrs	r3, r4
}
9000d85a:	f85d 4b04 	ldr.w	r4, [sp], #4
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
9000d85e:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
9000d862:	6113      	str	r3, [r2, #16]
}
9000d864:	4770      	bx	lr
9000d866:	bf00      	nop
9000d868:	ffc00000 	.word	0xffc00000

9000d86c <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
9000d86c:	4602      	mov	r2, r0
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
9000d86e:	4b05      	ldr	r3, [pc, #20]	; (9000d884 <FMC_SDRAM_ProgramRefreshRate+0x18>)

  return HAL_OK;
}
9000d870:	2000      	movs	r0, #0
{
9000d872:	b410      	push	{r4}
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
9000d874:	6954      	ldr	r4, [r2, #20]
9000d876:	4023      	ands	r3, r4
}
9000d878:	f85d 4b04 	ldr.w	r4, [sp], #4
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
9000d87c:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
9000d880:	6151      	str	r1, [r2, #20]
}
9000d882:	4770      	bx	lr
9000d884:	ffffc001 	.word	0xffffc001

9000d888 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
9000d888:	b508      	push	{r3, lr}
  /* Clear overflow flag */
  SysTick->CTRL;
9000d88a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
9000d88e:	691b      	ldr	r3, [r3, #16]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
9000d890:	f003 f812 	bl	900108b8 <xTaskGetSchedulerState>
9000d894:	2801      	cmp	r0, #1
9000d896:	d100      	bne.n	9000d89a <SysTick_Handler+0x12>
    /* Call tick handler */
    xPortSysTickHandler();
  }
}
9000d898:	bd08      	pop	{r3, pc}
9000d89a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
9000d89e:	f000 bf09 	b.w	9000e6b4 <xPortSysTickHandler>
9000d8a2:	bf00      	nop

9000d8a4 <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
9000d8a4:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
9000d8a8:	b92b      	cbnz	r3, 9000d8b6 <osKernelInitialize+0x12>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
9000d8aa:	4b06      	ldr	r3, [pc, #24]	; (9000d8c4 <osKernelInitialize+0x20>)
9000d8ac:	6818      	ldr	r0, [r3, #0]
9000d8ae:	b928      	cbnz	r0, 9000d8bc <osKernelInitialize+0x18>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
9000d8b0:	2201      	movs	r2, #1
9000d8b2:	601a      	str	r2, [r3, #0]
      stat = osOK;
9000d8b4:	4770      	bx	lr
    stat = osErrorISR;
9000d8b6:	f06f 0005 	mvn.w	r0, #5
9000d8ba:	4770      	bx	lr
    } else {
      stat = osError;
9000d8bc:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
9000d8c0:	4770      	bx	lr
9000d8c2:	bf00      	nop
9000d8c4:	24008674 	.word	0x24008674

9000d8c8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
9000d8c8:	b510      	push	{r4, lr}
9000d8ca:	f3ef 8405 	mrs	r4, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
9000d8ce:	b974      	cbnz	r4, 9000d8ee <osKernelStart+0x26>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
9000d8d0:	4b08      	ldr	r3, [pc, #32]	; (9000d8f4 <osKernelStart+0x2c>)
9000d8d2:	681a      	ldr	r2, [r3, #0]
9000d8d4:	2a01      	cmp	r2, #1
9000d8d6:	d107      	bne.n	9000d8e8 <osKernelStart+0x20>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
9000d8d8:	4907      	ldr	r1, [pc, #28]	; (9000d8f8 <osKernelStart+0x30>)
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
9000d8da:	2202      	movs	r2, #2
9000d8dc:	77cc      	strb	r4, [r1, #31]
9000d8de:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
9000d8e0:	f002 fc70 	bl	900101c4 <vTaskStartScheduler>
      stat = osOK;
9000d8e4:	4620      	mov	r0, r4
      stat = osError;
    }
  }

  return (stat);
}
9000d8e6:	bd10      	pop	{r4, pc}
      stat = osError;
9000d8e8:	f04f 30ff 	mov.w	r0, #4294967295
}
9000d8ec:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
9000d8ee:	f06f 0005 	mvn.w	r0, #5
}
9000d8f2:	bd10      	pop	{r4, pc}
9000d8f4:	24008674 	.word	0x24008674
9000d8f8:	e000ed00 	.word	0xe000ed00

9000d8fc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
9000d8fc:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
9000d8fe:	2500      	movs	r5, #0
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
9000d900:	b087      	sub	sp, #28
9000d902:	4614      	mov	r4, r2
  hTask = NULL;
9000d904:	9505      	str	r5, [sp, #20]
9000d906:	f3ef 8205 	mrs	r2, IPSR

  if (!IS_IRQ() && (func != NULL)) {
9000d90a:	bb62      	cbnz	r2, 9000d966 <osThreadNew+0x6a>
9000d90c:	4606      	mov	r6, r0
9000d90e:	b350      	cbz	r0, 9000d966 <osThreadNew+0x6a>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
9000d910:	b1e4      	cbz	r4, 9000d94c <osThreadNew+0x50>
      if (attr->name != NULL) {
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
9000d912:	69a7      	ldr	r7, [r4, #24]
9000d914:	bb57      	cbnz	r7, 9000d96c <osThreadNew+0x70>
9000d916:	2718      	movs	r7, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
9000d918:	6863      	ldr	r3, [r4, #4]
9000d91a:	07db      	lsls	r3, r3, #31
9000d91c:	d423      	bmi.n	9000d966 <osThreadNew+0x6a>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
9000d91e:	6963      	ldr	r3, [r4, #20]
9000d920:	b343      	cbz	r3, 9000d974 <osThreadNew+0x78>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
9000d922:	ea4f 0c93 	mov.w	ip, r3, lsr #2
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
9000d926:	68a0      	ldr	r0, [r4, #8]
      if (attr->name != NULL) {
9000d928:	6825      	ldr	r5, [r4, #0]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
9000d92a:	b340      	cbz	r0, 9000d97e <osThreadNew+0x82>
9000d92c:	68e2      	ldr	r2, [r4, #12]
9000d92e:	2a5f      	cmp	r2, #95	; 0x5f
9000d930:	d919      	bls.n	9000d966 <osThreadNew+0x6a>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
9000d932:	6924      	ldr	r4, [r4, #16]
9000d934:	b1bb      	cbz	r3, 9000d966 <osThreadNew+0x6a>
9000d936:	b1b4      	cbz	r4, 9000d966 <osThreadNew+0x6a>
      mem = 0;
    }

    if (mem == 1) {
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
9000d938:	460b      	mov	r3, r1
9000d93a:	4662      	mov	r2, ip
9000d93c:	4629      	mov	r1, r5
9000d93e:	9700      	str	r7, [sp, #0]
9000d940:	e9cd 4001 	strd	r4, r0, [sp, #4]
9000d944:	4630      	mov	r0, r6
9000d946:	f002 faa1 	bl	9000fe8c <xTaskCreateStatic>
9000d94a:	e00d      	b.n	9000d968 <osThreadNew+0x6c>
9000d94c:	f44f 7280 	mov.w	r2, #256	; 0x100
    prio  = (UBaseType_t)osPriorityNormal;
9000d950:	2718      	movs	r7, #24
      #endif
    }
    else {
      if (mem == 0) {
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
9000d952:	460b      	mov	r3, r1
9000d954:	4621      	mov	r1, r4
9000d956:	ac05      	add	r4, sp, #20
9000d958:	4630      	mov	r0, r6
9000d95a:	9700      	str	r7, [sp, #0]
9000d95c:	9401      	str	r4, [sp, #4]
9000d95e:	f002 fb3f 	bl	9000ffe0 <xTaskCreate>
9000d962:	2801      	cmp	r0, #1
9000d964:	d009      	beq.n	9000d97a <osThreadNew+0x7e>
        return (NULL);
9000d966:	2000      	movs	r0, #0
      }
    }
  }

  return ((osThreadId_t)hTask);
}
9000d968:	b007      	add	sp, #28
9000d96a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
9000d96c:	1e7a      	subs	r2, r7, #1
9000d96e:	2a37      	cmp	r2, #55	; 0x37
9000d970:	d9d2      	bls.n	9000d918 <osThreadNew+0x1c>
9000d972:	e7f8      	b.n	9000d966 <osThreadNew+0x6a>
    stack = configMINIMAL_STACK_SIZE;
9000d974:	f44f 7c80 	mov.w	ip, #256	; 0x100
9000d978:	e7d5      	b.n	9000d926 <osThreadNew+0x2a>
  return ((osThreadId_t)hTask);
9000d97a:	9805      	ldr	r0, [sp, #20]
9000d97c:	e7f4      	b.n	9000d968 <osThreadNew+0x6c>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
9000d97e:	68e3      	ldr	r3, [r4, #12]
9000d980:	2b00      	cmp	r3, #0
9000d982:	d1f1      	bne.n	9000d968 <osThreadNew+0x6c>
9000d984:	6923      	ldr	r3, [r4, #16]
9000d986:	2b00      	cmp	r3, #0
9000d988:	d1ee      	bne.n	9000d968 <osThreadNew+0x6c>
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
9000d98a:	fa1f f28c 	uxth.w	r2, ip
9000d98e:	462c      	mov	r4, r5
9000d990:	e7df      	b.n	9000d952 <osThreadNew+0x56>
9000d992:	bf00      	nop

9000d994 <osThreadSuspend>:

  return (stat);
}

#if (configUSE_OS2_THREAD_SUSPEND_RESUME == 1)
osStatus_t osThreadSuspend (osThreadId_t thread_id) {
9000d994:	b510      	push	{r4, lr}
9000d996:	f3ef 8405 	mrs	r4, IPSR
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
  osStatus_t stat;

  if (IS_IRQ()) {
9000d99a:	b924      	cbnz	r4, 9000d9a6 <osThreadSuspend+0x12>
    stat = osErrorISR;
  }
  else if (hTask == NULL) {
9000d99c:	b130      	cbz	r0, 9000d9ac <osThreadSuspend+0x18>
    stat = osErrorParameter;
  }
  else {
    stat = osOK;
    vTaskSuspend (hTask);
9000d99e:	f002 fd4b 	bl	90010438 <vTaskSuspend>
    stat = osOK;
9000d9a2:	4620      	mov	r0, r4
  }

  return (stat);
}
9000d9a4:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
9000d9a6:	f06f 0005 	mvn.w	r0, #5
}
9000d9aa:	bd10      	pop	{r4, pc}
    stat = osErrorParameter;
9000d9ac:	f06f 0003 	mvn.w	r0, #3
}
9000d9b0:	bd10      	pop	{r4, pc}
9000d9b2:	bf00      	nop

9000d9b4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
9000d9b4:	b510      	push	{r4, lr}
9000d9b6:	f3ef 8405 	mrs	r4, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
9000d9ba:	b92c      	cbnz	r4, 9000d9c8 <osDelay+0x14>
    stat = osErrorISR;
  }
  else {
    stat = osOK;

    if (ticks != 0U) {
9000d9bc:	b900      	cbnz	r0, 9000d9c0 <osDelay+0xc>
      vTaskDelay(ticks);
    }
  }

  return (stat);
}
9000d9be:	bd10      	pop	{r4, pc}
      vTaskDelay(ticks);
9000d9c0:	f002 fbaa 	bl	90010118 <vTaskDelay>
    stat = osOK;
9000d9c4:	4620      	mov	r0, r4
}
9000d9c6:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
9000d9c8:	f06f 0005 	mvn.w	r0, #5
}
9000d9cc:	bd10      	pop	{r4, pc}
9000d9ce:	bf00      	nop

9000d9d0 <osEventFlagsNew>:
9000d9d0:	f3ef 8305 	mrs	r3, IPSR
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;

  if (!IS_IRQ()) {
9000d9d4:	b92b      	cbnz	r3, 9000d9e2 <osEventFlagsNew+0x12>
    mem = -1;

    if (attr != NULL) {
9000d9d6:	b148      	cbz	r0, 9000d9ec <osEventFlagsNew+0x1c>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
9000d9d8:	6883      	ldr	r3, [r0, #8]
9000d9da:	b123      	cbz	r3, 9000d9e6 <osEventFlagsNew+0x16>
9000d9dc:	68c2      	ldr	r2, [r0, #12]
9000d9de:	2a1f      	cmp	r2, #31
9000d9e0:	d806      	bhi.n	9000d9f0 <osEventFlagsNew+0x20>
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
}
9000d9e2:	2000      	movs	r0, #0
9000d9e4:	4770      	bx	lr
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
9000d9e6:	68c3      	ldr	r3, [r0, #12]
9000d9e8:	2b00      	cmp	r3, #0
9000d9ea:	d1fa      	bne.n	9000d9e2 <osEventFlagsNew+0x12>
          hEventGroup = xEventGroupCreate();
9000d9ec:	f000 bb00 	b.w	9000dff0 <xEventGroupCreate>
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
9000d9f0:	4618      	mov	r0, r3
9000d9f2:	f000 bad7 	b.w	9000dfa4 <xEventGroupCreateStatic>
9000d9f6:	bf00      	nop

9000d9f8 <osEventFlagsSet>:
uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
9000d9f8:	b338      	cbz	r0, 9000da4a <osEventFlagsSet+0x52>
9000d9fa:	f011 437f 	ands.w	r3, r1, #4278190080	; 0xff000000
uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
9000d9fe:	b510      	push	{r4, lr}
9000da00:	460c      	mov	r4, r1
9000da02:	b082      	sub	sp, #8
  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
9000da04:	d11a      	bne.n	9000da3c <osEventFlagsSet+0x44>
9000da06:	f3ef 8205 	mrs	r2, IPSR
    rflags = (uint32_t)osErrorParameter;
  }
  else if (IS_IRQ()) {
9000da0a:	b192      	cbz	r2, 9000da32 <osEventFlagsSet+0x3a>
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
9000da0c:	aa01      	add	r2, sp, #4
    yield = pdFALSE;
9000da0e:	9301      	str	r3, [sp, #4]
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
9000da10:	f000 fc02 	bl	9000e218 <xEventGroupSetBitsFromISR>
9000da14:	b1b0      	cbz	r0, 9000da44 <osEventFlagsSet+0x4c>
      rflags = (uint32_t)osErrorResource;
    } else {
      rflags = flags;
      portYIELD_FROM_ISR (yield);
9000da16:	9b01      	ldr	r3, [sp, #4]
9000da18:	b1d3      	cbz	r3, 9000da50 <osEventFlagsSet+0x58>
9000da1a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
9000da1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
9000da22:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
9000da26:	f3bf 8f4f 	dsb	sy
9000da2a:	f3bf 8f6f 	isb	sy
9000da2e:	4620      	mov	r0, r4
9000da30:	e006      	b.n	9000da40 <osEventFlagsSet+0x48>
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
  }

  return (rflags);
}
9000da32:	b002      	add	sp, #8
9000da34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
9000da38:	f000 bba4 	b.w	9000e184 <xEventGroupSetBits>
    rflags = (uint32_t)osErrorParameter;
9000da3c:	f06f 0003 	mvn.w	r0, #3
}
9000da40:	b002      	add	sp, #8
9000da42:	bd10      	pop	{r4, pc}
      rflags = (uint32_t)osErrorResource;
9000da44:	f06f 0002 	mvn.w	r0, #2
9000da48:	e7fa      	b.n	9000da40 <osEventFlagsSet+0x48>
    rflags = (uint32_t)osErrorParameter;
9000da4a:	f06f 0003 	mvn.w	r0, #3
}
9000da4e:	4770      	bx	lr
9000da50:	4620      	mov	r0, r4
  return (rflags);
9000da52:	e7f5      	b.n	9000da40 <osEventFlagsSet+0x48>

9000da54 <osEventFlagsGet>:

uint32_t osEventFlagsGet (osEventFlagsId_t ef_id) {
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
  uint32_t rflags;

  if (ef_id == NULL) {
9000da54:	b130      	cbz	r0, 9000da64 <osEventFlagsGet+0x10>
9000da56:	f3ef 8105 	mrs	r1, IPSR
    rflags = 0U;
  }
  else if (IS_IRQ()) {
9000da5a:	b109      	cbz	r1, 9000da60 <osEventFlagsGet+0xc>
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
9000da5c:	f000 bb84 	b.w	9000e168 <xEventGroupGetBitsFromISR>
  }
  else {
    rflags = xEventGroupGetBits (hEventGroup);
9000da60:	f000 bb5e 	b.w	9000e120 <xEventGroupClearBits>
  }

  return (rflags);
}
9000da64:	4770      	bx	lr
9000da66:	bf00      	nop

9000da68 <osEventFlagsWait>:
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
9000da68:	b378      	cbz	r0, 9000daca <osEventFlagsWait+0x62>
9000da6a:	f011 4f7f 	tst.w	r1, #4278190080	; 0xff000000
uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
9000da6e:	b570      	push	{r4, r5, r6, lr}
9000da70:	460c      	mov	r4, r1
9000da72:	b082      	sub	sp, #8
  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
9000da74:	d117      	bne.n	9000daa6 <osEventFlagsWait+0x3e>
9000da76:	f3ef 8605 	mrs	r6, IPSR
    rflags = (uint32_t)osErrorParameter;
  }
  else if (IS_IRQ()) {
9000da7a:	b9c6      	cbnz	r6, 9000daae <osEventFlagsWait+0x46>
    rflags = (uint32_t)osErrorISR;
  }
  else {
    if (options & osFlagsWaitAll) {
9000da7c:	461d      	mov	r5, r3
9000da7e:	f012 0301 	ands.w	r3, r2, #1
9000da82:	d118      	bne.n	9000dab6 <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
    } else {
      wait_all = pdFAIL;
    }

    if (options & osFlagsNoClear) {
9000da84:	f012 0202 	ands.w	r2, r2, #2
9000da88:	d022      	beq.n	9000dad0 <osEventFlagsWait+0x68>
      exit_clr = pdFAIL;
    } else {
      exit_clr = pdTRUE;
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
9000da8a:	461a      	mov	r2, r3
9000da8c:	9500      	str	r5, [sp, #0]
9000da8e:	f000 fabd 	bl	9000e00c <xEventGroupWaitBits>
          rflags = (uint32_t)osErrorResource;
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
9000da92:	4204      	tst	r4, r0
9000da94:	d109      	bne.n	9000daaa <osEventFlagsWait+0x42>
          rflags = (uint32_t)osErrorResource;
9000da96:	2d00      	cmp	r5, #0
9000da98:	bf14      	ite	ne
9000da9a:	f06f 0001 	mvnne.w	r0, #1
9000da9e:	f06f 0002 	mvneq.w	r0, #2
      }
    }
  }

  return (rflags);
}
9000daa2:	b002      	add	sp, #8
9000daa4:	bd70      	pop	{r4, r5, r6, pc}
    rflags = (uint32_t)osErrorParameter;
9000daa6:	f06f 0003 	mvn.w	r0, #3
}
9000daaa:	b002      	add	sp, #8
9000daac:	bd70      	pop	{r4, r5, r6, pc}
    rflags = (uint32_t)osErrorISR;
9000daae:	f06f 0005 	mvn.w	r0, #5
}
9000dab2:	b002      	add	sp, #8
9000dab4:	bd70      	pop	{r4, r5, r6, pc}
    if (options & osFlagsNoClear) {
9000dab6:	0793      	lsls	r3, r2, #30
9000dab8:	d510      	bpl.n	9000dadc <osEventFlagsWait+0x74>
    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
9000daba:	4632      	mov	r2, r6
9000dabc:	2301      	movs	r3, #1
9000dabe:	9500      	str	r5, [sp, #0]
9000dac0:	f000 faa4 	bl	9000e00c <xEventGroupWaitBits>
      if ((flags & rflags) != flags) {
9000dac4:	4384      	bics	r4, r0
9000dac6:	d1e6      	bne.n	9000da96 <osEventFlagsWait+0x2e>
9000dac8:	e7ef      	b.n	9000daaa <osEventFlagsWait+0x42>
    rflags = (uint32_t)osErrorParameter;
9000daca:	f06f 0003 	mvn.w	r0, #3
}
9000dace:	4770      	bx	lr
    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
9000dad0:	4613      	mov	r3, r2
9000dad2:	9500      	str	r5, [sp, #0]
9000dad4:	2201      	movs	r2, #1
9000dad6:	f000 fa99 	bl	9000e00c <xEventGroupWaitBits>
    if (options & osFlagsWaitAll) {
9000dada:	e7da      	b.n	9000da92 <osEventFlagsWait+0x2a>
    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
9000dadc:	2301      	movs	r3, #1
9000dade:	9500      	str	r5, [sp, #0]
9000dae0:	461a      	mov	r2, r3
9000dae2:	f000 fa93 	bl	9000e00c <xEventGroupWaitBits>
    if (options & osFlagsWaitAll) {
9000dae6:	e7ed      	b.n	9000dac4 <osEventFlagsWait+0x5c>

9000dae8 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
9000dae8:	b570      	push	{r4, r5, r6, lr}
9000daea:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hMutex = NULL;

  if (!IS_IRQ()) {
9000daee:	b9db      	cbnz	r3, 9000db28 <osMutexNew+0x40>
    if (attr != NULL) {
9000daf0:	4604      	mov	r4, r0
9000daf2:	b1e0      	cbz	r0, 9000db2e <osMutexNew+0x46>
      type = attr->attr_bits;
9000daf4:	6846      	ldr	r6, [r0, #4]
      rmtx = 1U;
    } else {
      rmtx = 0U;
    }

    if ((type & osMutexRobust) != osMutexRobust) {
9000daf6:	0733      	lsls	r3, r6, #28
9000daf8:	d416      	bmi.n	9000db28 <osMutexNew+0x40>
      mem = -1;

      if (attr != NULL) {
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
9000dafa:	6881      	ldr	r1, [r0, #8]
    if ((type & osMutexRecursive) == osMutexRecursive) {
9000dafc:	f006 0601 	and.w	r6, r6, #1
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
9000db00:	68c3      	ldr	r3, [r0, #12]
9000db02:	b181      	cbz	r1, 9000db26 <osMutexNew+0x3e>
9000db04:	2b4f      	cmp	r3, #79	; 0x4f
9000db06:	d90f      	bls.n	9000db28 <osMutexNew+0x40>
        mem = 0;
      }

      if (mem == 1) {
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
9000db08:	b31e      	cbz	r6, 9000db52 <osMutexNew+0x6a>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
9000db0a:	2004      	movs	r0, #4
9000db0c:	f001 f9e4 	bl	9000eed8 <xQueueCreateMutexStatic>
9000db10:	4605      	mov	r5, r0
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
9000db12:	b14d      	cbz	r5, 9000db28 <osMutexNew+0x40>
        if (attr != NULL) {
          name = attr->name;
        } else {
          name = NULL;
        }
        vQueueAddToRegistry (hMutex, name);
9000db14:	6821      	ldr	r1, [r4, #0]
9000db16:	4628      	mov	r0, r5
9000db18:	f001 ff14 	bl	9000f944 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
9000db1c:	b12e      	cbz	r6, 9000db2a <osMutexNew+0x42>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
9000db1e:	f045 0501 	orr.w	r5, r5, #1
      }
    }
  }

  return ((osMutexId_t)hMutex);
}
9000db22:	4628      	mov	r0, r5
9000db24:	bd70      	pop	{r4, r5, r6, pc}
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
9000db26:	b163      	cbz	r3, 9000db42 <osMutexNew+0x5a>
  hMutex = NULL;
9000db28:	2500      	movs	r5, #0
}
9000db2a:	4628      	mov	r0, r5
9000db2c:	bd70      	pop	{r4, r5, r6, pc}
              hMutex = xSemaphoreCreateMutex ();
9000db2e:	2001      	movs	r0, #1
9000db30:	f001 fa42 	bl	9000efb8 <xQueueCreateMutex>
      if (hMutex != NULL) {
9000db34:	4605      	mov	r5, r0
9000db36:	2800      	cmp	r0, #0
9000db38:	d0f6      	beq.n	9000db28 <osMutexNew+0x40>
        vQueueAddToRegistry (hMutex, name);
9000db3a:	4621      	mov	r1, r4
9000db3c:	f001 ff02 	bl	9000f944 <vQueueAddToRegistry>
      if ((hMutex != NULL) && (rmtx != 0U)) {
9000db40:	e7f3      	b.n	9000db2a <osMutexNew+0x42>
            if (rmtx != 0U) {
9000db42:	b15e      	cbz	r6, 9000db5c <osMutexNew+0x74>
              hMutex = xSemaphoreCreateRecursiveMutex ();
9000db44:	2004      	movs	r0, #4
9000db46:	f001 fa37 	bl	9000efb8 <xQueueCreateMutex>
      if (hMutex != NULL) {
9000db4a:	4605      	mov	r5, r0
9000db4c:	2800      	cmp	r0, #0
9000db4e:	d1e1      	bne.n	9000db14 <osMutexNew+0x2c>
9000db50:	e7ea      	b.n	9000db28 <osMutexNew+0x40>
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
9000db52:	2001      	movs	r0, #1
9000db54:	f001 f9c0 	bl	9000eed8 <xQueueCreateMutexStatic>
9000db58:	4605      	mov	r5, r0
9000db5a:	e7da      	b.n	9000db12 <osMutexNew+0x2a>
              hMutex = xSemaphoreCreateMutex ();
9000db5c:	2001      	movs	r0, #1
9000db5e:	f001 fa2b 	bl	9000efb8 <xQueueCreateMutex>
      if (hMutex != NULL) {
9000db62:	4605      	mov	r5, r0
9000db64:	e7d5      	b.n	9000db12 <osMutexNew+0x2a>
9000db66:	bf00      	nop

9000db68 <osMutexAcquire>:
osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
9000db68:	f020 0201 	bic.w	r2, r0, #1

  rmtx = (uint32_t)mutex_id & 1U;
9000db6c:	f000 0301 	and.w	r3, r0, #1
9000db70:	f3ef 8005 	mrs	r0, IPSR

  stat = osOK;

  if (IS_IRQ()) {
9000db74:	b9a8      	cbnz	r0, 9000dba2 <osMutexAcquire+0x3a>
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
9000db76:	b1ba      	cbz	r2, 9000dba8 <osMutexAcquire+0x40>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
9000db78:	4610      	mov	r0, r2
osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
9000db7a:	b510      	push	{r4, lr}
9000db7c:	460c      	mov	r4, r1
    if (rmtx != 0U) {
9000db7e:	b953      	cbnz	r3, 9000db96 <osMutexAcquire+0x2e>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
9000db80:	f001 fc92 	bl	9000f4a8 <xQueueSemaphoreTake>
9000db84:	2801      	cmp	r0, #1
9000db86:	d00a      	beq.n	9000db9e <osMutexAcquire+0x36>
          stat = osErrorResource;
9000db88:	2c00      	cmp	r4, #0
9000db8a:	bf14      	ite	ne
9000db8c:	f06f 0001 	mvnne.w	r0, #1
9000db90:	f06f 0002 	mvneq.w	r0, #2
      }
    }
  }

  return (stat);
}
9000db94:	bd10      	pop	{r4, pc}
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
9000db96:	f001 fe0f 	bl	9000f7b8 <xQueueTakeMutexRecursive>
9000db9a:	2801      	cmp	r0, #1
9000db9c:	d1f4      	bne.n	9000db88 <osMutexAcquire+0x20>
  stat = osOK;
9000db9e:	2000      	movs	r0, #0
}
9000dba0:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
9000dba2:	f06f 0005 	mvn.w	r0, #5
9000dba6:	4770      	bx	lr
    stat = osErrorParameter;
9000dba8:	f06f 0003 	mvn.w	r0, #3
}
9000dbac:	4770      	bx	lr
9000dbae:	bf00      	nop

9000dbb0 <osMutexRelease>:
9000dbb0:	f3ef 8205 	mrs	r2, IPSR

  rmtx = (uint32_t)mutex_id & 1U;

  stat = osOK;

  if (IS_IRQ()) {
9000dbb4:	b9ba      	cbnz	r2, 9000dbe6 <osMutexRelease+0x36>
osStatus_t osMutexRelease (osMutexId_t mutex_id) {
9000dbb6:	b510      	push	{r4, lr}
9000dbb8:	f020 0401 	bic.w	r4, r0, #1
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
9000dbbc:	b1b4      	cbz	r4, 9000dbec <osMutexRelease+0x3c>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
9000dbbe:	f000 0301 	and.w	r3, r0, #1
9000dbc2:	b943      	cbnz	r3, 9000dbd6 <osMutexRelease+0x26>
        stat = osErrorResource;
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
9000dbc4:	461a      	mov	r2, r3
9000dbc6:	4619      	mov	r1, r3
9000dbc8:	4620      	mov	r0, r4
9000dbca:	f001 f803 	bl	9000ebd4 <xQueueGenericSend>
9000dbce:	2801      	cmp	r0, #1
9000dbd0:	d106      	bne.n	9000dbe0 <osMutexRelease+0x30>
  stat = osOK;
9000dbd2:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
9000dbd4:	bd10      	pop	{r4, pc}
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
9000dbd6:	4620      	mov	r0, r4
9000dbd8:	f001 f9ce 	bl	9000ef78 <xQueueGiveMutexRecursive>
9000dbdc:	2801      	cmp	r0, #1
9000dbde:	d0f8      	beq.n	9000dbd2 <osMutexRelease+0x22>
        stat = osErrorResource;
9000dbe0:	f06f 0002 	mvn.w	r0, #2
}
9000dbe4:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
9000dbe6:	f06f 0005 	mvn.w	r0, #5
}
9000dbea:	4770      	bx	lr
    stat = osErrorParameter;
9000dbec:	f06f 0003 	mvn.w	r0, #3
}
9000dbf0:	bd10      	pop	{r4, pc}
9000dbf2:	bf00      	nop

9000dbf4 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
9000dbf4:	b5f0      	push	{r4, r5, r6, r7, lr}
9000dbf6:	b083      	sub	sp, #12
9000dbf8:	f3ef 8605 	mrs	r6, IPSR
  const char *name;
  #endif

  hSemaphore = NULL;

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
9000dbfc:	b98e      	cbnz	r6, 9000dc22 <osSemaphoreNew+0x2e>
9000dbfe:	4605      	mov	r5, r0
9000dc00:	b178      	cbz	r0, 9000dc22 <osSemaphoreNew+0x2e>
9000dc02:	4288      	cmp	r0, r1
9000dc04:	460f      	mov	r7, r1
9000dc06:	d30c      	bcc.n	9000dc22 <osSemaphoreNew+0x2e>
    mem = -1;

    if (attr != NULL) {
9000dc08:	4614      	mov	r4, r2
9000dc0a:	b182      	cbz	r2, 9000dc2e <osSemaphoreNew+0x3a>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
9000dc0c:	e9d2 2302 	ldrd	r2, r3, [r2, #8]
9000dc10:	b15a      	cbz	r2, 9000dc2a <osSemaphoreNew+0x36>
9000dc12:	2b4f      	cmp	r3, #79	; 0x4f
9000dc14:	d905      	bls.n	9000dc22 <osSemaphoreNew+0x2e>
    else {
      mem = 0;
    }

    if (mem != -1) {
      if (max_count == 1U) {
9000dc16:	2801      	cmp	r0, #1
9000dc18:	d032      	beq.n	9000dc80 <osSemaphoreNew+0x8c>
        }
      }
      else {
        if (mem == 1) {
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
9000dc1a:	f000 ff33 	bl	9000ea84 <xQueueCreateCountingSemaphoreStatic>
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
9000dc1e:	4605      	mov	r5, r0
9000dc20:	b978      	cbnz	r0, 9000dc42 <osSemaphoreNew+0x4e>
  hSemaphore = NULL;
9000dc22:	2500      	movs	r5, #0
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
}
9000dc24:	4628      	mov	r0, r5
9000dc26:	b003      	add	sp, #12
9000dc28:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
9000dc2a:	2b00      	cmp	r3, #0
9000dc2c:	d1f9      	bne.n	9000dc22 <osSemaphoreNew+0x2e>
      if (max_count == 1U) {
9000dc2e:	2d01      	cmp	r5, #1
9000dc30:	d00f      	beq.n	9000dc52 <osSemaphoreNew+0x5e>
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
9000dc32:	4628      	mov	r0, r5
9000dc34:	4639      	mov	r1, r7
9000dc36:	f000 ff87 	bl	9000eb48 <xQueueCreateCountingSemaphore>
9000dc3a:	4605      	mov	r5, r0
      if (hSemaphore != NULL) {
9000dc3c:	2d00      	cmp	r5, #0
9000dc3e:	d0f0      	beq.n	9000dc22 <osSemaphoreNew+0x2e>
        if (attr != NULL) {
9000dc40:	b104      	cbz	r4, 9000dc44 <osSemaphoreNew+0x50>
          name = attr->name;
9000dc42:	6824      	ldr	r4, [r4, #0]
        vQueueAddToRegistry (hSemaphore, name);
9000dc44:	4628      	mov	r0, r5
9000dc46:	4621      	mov	r1, r4
9000dc48:	f001 fe7c 	bl	9000f944 <vQueueAddToRegistry>
}
9000dc4c:	4628      	mov	r0, r5
9000dc4e:	b003      	add	sp, #12
9000dc50:	bdf0      	pop	{r4, r5, r6, r7, pc}
            hSemaphore = xSemaphoreCreateBinary();
9000dc52:	4628      	mov	r0, r5
9000dc54:	2203      	movs	r2, #3
9000dc56:	2100      	movs	r1, #0
9000dc58:	f000 fed2 	bl	9000ea00 <xQueueGenericCreate>
9000dc5c:	4605      	mov	r5, r0
        if ((hSemaphore != NULL) && (initial_count != 0U)) {
9000dc5e:	2d00      	cmp	r5, #0
9000dc60:	d0df      	beq.n	9000dc22 <osSemaphoreNew+0x2e>
9000dc62:	2f00      	cmp	r7, #0
9000dc64:	d0ea      	beq.n	9000dc3c <osSemaphoreNew+0x48>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
9000dc66:	2300      	movs	r3, #0
9000dc68:	4628      	mov	r0, r5
9000dc6a:	461a      	mov	r2, r3
9000dc6c:	4619      	mov	r1, r3
9000dc6e:	f000 ffb1 	bl	9000ebd4 <xQueueGenericSend>
9000dc72:	2801      	cmp	r0, #1
9000dc74:	d0e4      	beq.n	9000dc40 <osSemaphoreNew+0x4c>
            vSemaphoreDelete (hSemaphore);
9000dc76:	4628      	mov	r0, r5
            hSemaphore = NULL;
9000dc78:	2500      	movs	r5, #0
            vSemaphoreDelete (hSemaphore);
9000dc7a:	f001 fe1d 	bl	9000f8b8 <vQueueDelete>
      if (hSemaphore != NULL) {
9000dc7e:	e7d1      	b.n	9000dc24 <osSemaphoreNew+0x30>
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
9000dc80:	4613      	mov	r3, r2
9000dc82:	2203      	movs	r2, #3
9000dc84:	4631      	mov	r1, r6
9000dc86:	9200      	str	r2, [sp, #0]
9000dc88:	4632      	mov	r2, r6
9000dc8a:	f000 fe4d 	bl	9000e928 <xQueueGenericCreateStatic>
9000dc8e:	4605      	mov	r5, r0
9000dc90:	e7e5      	b.n	9000dc5e <osSemaphoreNew+0x6a>
9000dc92:	bf00      	nop

9000dc94 <osSemaphoreAcquire>:
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
9000dc94:	b370      	cbz	r0, 9000dcf4 <osSemaphoreAcquire+0x60>
osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
9000dc96:	b510      	push	{r4, lr}
9000dc98:	460c      	mov	r4, r1
9000dc9a:	b082      	sub	sp, #8
9000dc9c:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
9000dca0:	b1c3      	cbz	r3, 9000dcd4 <osSemaphoreAcquire+0x40>
    if (timeout != 0U) {
9000dca2:	bb21      	cbnz	r1, 9000dcee <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
9000dca4:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
9000dca6:	9101      	str	r1, [sp, #4]
      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
9000dca8:	f001 fda6 	bl	9000f7f8 <xQueueReceiveFromISR>
9000dcac:	2801      	cmp	r0, #1
9000dcae:	d11a      	bne.n	9000dce6 <osSemaphoreAcquire+0x52>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
9000dcb0:	9b01      	ldr	r3, [sp, #4]
9000dcb2:	b913      	cbnz	r3, 9000dcba <osSemaphoreAcquire+0x26>
  stat = osOK;
9000dcb4:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
9000dcb6:	b002      	add	sp, #8
9000dcb8:	bd10      	pop	{r4, pc}
        portYIELD_FROM_ISR (yield);
9000dcba:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
9000dcbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
9000dcc2:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
9000dcc6:	f3bf 8f4f 	dsb	sy
9000dcca:	f3bf 8f6f 	isb	sy
  stat = osOK;
9000dcce:	4620      	mov	r0, r4
}
9000dcd0:	b002      	add	sp, #8
9000dcd2:	bd10      	pop	{r4, pc}
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
9000dcd4:	f001 fbe8 	bl	9000f4a8 <xQueueSemaphoreTake>
9000dcd8:	2801      	cmp	r0, #1
9000dcda:	d0eb      	beq.n	9000dcb4 <osSemaphoreAcquire+0x20>
      if (timeout != 0U) {
9000dcdc:	b11c      	cbz	r4, 9000dce6 <osSemaphoreAcquire+0x52>
        stat = osErrorTimeout;
9000dcde:	f06f 0001 	mvn.w	r0, #1
}
9000dce2:	b002      	add	sp, #8
9000dce4:	bd10      	pop	{r4, pc}
        stat = osErrorResource;
9000dce6:	f06f 0002 	mvn.w	r0, #2
}
9000dcea:	b002      	add	sp, #8
9000dcec:	bd10      	pop	{r4, pc}
    stat = osErrorParameter;
9000dcee:	f06f 0003 	mvn.w	r0, #3
9000dcf2:	e7e0      	b.n	9000dcb6 <osSemaphoreAcquire+0x22>
9000dcf4:	f06f 0003 	mvn.w	r0, #3
}
9000dcf8:	4770      	bx	lr
9000dcfa:	bf00      	nop

9000dcfc <osSemaphoreRelease>:
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
9000dcfc:	b330      	cbz	r0, 9000dd4c <osSemaphoreRelease+0x50>
osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
9000dcfe:	b510      	push	{r4, lr}
9000dd00:	b082      	sub	sp, #8
9000dd02:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
9000dd06:	b1ab      	cbz	r3, 9000dd34 <osSemaphoreRelease+0x38>
    yield = pdFALSE;
9000dd08:	2400      	movs	r4, #0

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
9000dd0a:	a901      	add	r1, sp, #4
    yield = pdFALSE;
9000dd0c:	9401      	str	r4, [sp, #4]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
9000dd0e:	f001 f9f5 	bl	9000f0fc <xQueueGiveFromISR>
9000dd12:	2801      	cmp	r0, #1
9000dd14:	d117      	bne.n	9000dd46 <osSemaphoreRelease+0x4a>
      stat = osErrorResource;
    } else {
      portYIELD_FROM_ISR (yield);
9000dd16:	9b01      	ldr	r3, [sp, #4]
9000dd18:	b193      	cbz	r3, 9000dd40 <osSemaphoreRelease+0x44>
9000dd1a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
9000dd1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
9000dd22:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
9000dd26:	f3bf 8f4f 	dsb	sy
9000dd2a:	f3bf 8f6f 	isb	sy
  stat = osOK;
9000dd2e:	4620      	mov	r0, r4
      stat = osErrorResource;
    }
  }

  return (stat);
}
9000dd30:	b002      	add	sp, #8
9000dd32:	bd10      	pop	{r4, pc}
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
9000dd34:	461a      	mov	r2, r3
9000dd36:	4619      	mov	r1, r3
9000dd38:	f000 ff4c 	bl	9000ebd4 <xQueueGenericSend>
9000dd3c:	2801      	cmp	r0, #1
9000dd3e:	d102      	bne.n	9000dd46 <osSemaphoreRelease+0x4a>
  stat = osOK;
9000dd40:	2000      	movs	r0, #0
}
9000dd42:	b002      	add	sp, #8
9000dd44:	bd10      	pop	{r4, pc}
      stat = osErrorResource;
9000dd46:	f06f 0002 	mvn.w	r0, #2
9000dd4a:	e7fa      	b.n	9000dd42 <osSemaphoreRelease+0x46>
    stat = osErrorParameter;
9000dd4c:	f06f 0003 	mvn.w	r0, #3
}
9000dd50:	4770      	bx	lr
9000dd52:	bf00      	nop

9000dd54 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
9000dd54:	b5f0      	push	{r4, r5, r6, r7, lr}
9000dd56:	b083      	sub	sp, #12
9000dd58:	f3ef 8705 	mrs	r7, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
9000dd5c:	b987      	cbnz	r7, 9000dd80 <osMessageQueueNew+0x2c>
9000dd5e:	4605      	mov	r5, r0
9000dd60:	b170      	cbz	r0, 9000dd80 <osMessageQueueNew+0x2c>
9000dd62:	b169      	cbz	r1, 9000dd80 <osMessageQueueNew+0x2c>
    mem = -1;

    if (attr != NULL) {
9000dd64:	4614      	mov	r4, r2
9000dd66:	b17a      	cbz	r2, 9000dd88 <osMessageQueueNew+0x34>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
9000dd68:	6893      	ldr	r3, [r2, #8]
9000dd6a:	b1cb      	cbz	r3, 9000dda0 <osMessageQueueNew+0x4c>
9000dd6c:	68d2      	ldr	r2, [r2, #12]
9000dd6e:	2a4f      	cmp	r2, #79	; 0x4f
9000dd70:	d906      	bls.n	9000dd80 <osMessageQueueNew+0x2c>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
9000dd72:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
9000dd74:	b122      	cbz	r2, 9000dd80 <osMessageQueueNew+0x2c>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
9000dd76:	fb01 f505 	mul.w	r5, r1, r5
9000dd7a:	6966      	ldr	r6, [r4, #20]
9000dd7c:	42ae      	cmp	r6, r5
9000dd7e:	d21f      	bcs.n	9000ddc0 <osMessageQueueNew+0x6c>
  hQueue = NULL;
9000dd80:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
9000dd82:	4628      	mov	r0, r5
9000dd84:	b003      	add	sp, #12
9000dd86:	bdf0      	pop	{r4, r5, r6, r7, pc}
          hQueue = xQueueCreate (msg_count, msg_size);
9000dd88:	f000 fe3a 	bl	9000ea00 <xQueueGenericCreate>
    if (hQueue != NULL) {
9000dd8c:	4605      	mov	r5, r0
9000dd8e:	2800      	cmp	r0, #0
9000dd90:	d0f6      	beq.n	9000dd80 <osMessageQueueNew+0x2c>
      vQueueAddToRegistry (hQueue, name);
9000dd92:	4628      	mov	r0, r5
9000dd94:	4621      	mov	r1, r4
9000dd96:	f001 fdd5 	bl	9000f944 <vQueueAddToRegistry>
}
9000dd9a:	4628      	mov	r0, r5
9000dd9c:	b003      	add	sp, #12
9000dd9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
9000dda0:	68d3      	ldr	r3, [r2, #12]
9000dda2:	2b00      	cmp	r3, #0
9000dda4:	d1ec      	bne.n	9000dd80 <osMessageQueueNew+0x2c>
9000dda6:	6913      	ldr	r3, [r2, #16]
9000dda8:	2b00      	cmp	r3, #0
9000ddaa:	d1e9      	bne.n	9000dd80 <osMessageQueueNew+0x2c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
9000ddac:	6952      	ldr	r2, [r2, #20]
9000ddae:	2a00      	cmp	r2, #0
9000ddb0:	d1e6      	bne.n	9000dd80 <osMessageQueueNew+0x2c>
          hQueue = xQueueCreate (msg_count, msg_size);
9000ddb2:	f000 fe25 	bl	9000ea00 <xQueueGenericCreate>
    if (hQueue != NULL) {
9000ddb6:	4605      	mov	r5, r0
9000ddb8:	2800      	cmp	r0, #0
9000ddba:	d0e1      	beq.n	9000dd80 <osMessageQueueNew+0x2c>
        name = attr->name;
9000ddbc:	6824      	ldr	r4, [r4, #0]
9000ddbe:	e7e8      	b.n	9000dd92 <osMessageQueueNew+0x3e>
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
9000ddc0:	9700      	str	r7, [sp, #0]
9000ddc2:	f000 fdb1 	bl	9000e928 <xQueueGenericCreateStatic>
    if (hQueue != NULL) {
9000ddc6:	4605      	mov	r5, r0
9000ddc8:	2800      	cmp	r0, #0
9000ddca:	d1f7      	bne.n	9000ddbc <osMessageQueueNew+0x68>
9000ddcc:	e7d8      	b.n	9000dd80 <osMessageQueueNew+0x2c>
9000ddce:	bf00      	nop

9000ddd0 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
9000ddd0:	b530      	push	{r4, r5, lr}
9000ddd2:	461c      	mov	r4, r3
9000ddd4:	b083      	sub	sp, #12
9000ddd6:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
9000ddda:	b30b      	cbz	r3, 9000de20 <osMessageQueuePut+0x50>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
9000dddc:	3c00      	subs	r4, #0
9000ddde:	bf18      	it	ne
9000dde0:	2401      	movne	r4, #1
9000dde2:	2900      	cmp	r1, #0
9000dde4:	bf08      	it	eq
9000dde6:	f044 0401 	orreq.w	r4, r4, #1
9000ddea:	bb7c      	cbnz	r4, 9000de4c <osMessageQueuePut+0x7c>
9000ddec:	fab0 f480 	clz	r4, r0
9000ddf0:	0964      	lsrs	r4, r4, #5
9000ddf2:	b358      	cbz	r0, 9000de4c <osMessageQueuePut+0x7c>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
9000ddf4:	4623      	mov	r3, r4
9000ddf6:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
9000ddf8:	9401      	str	r4, [sp, #4]
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
9000ddfa:	f001 f915 	bl	9000f028 <xQueueGenericSendFromISR>
9000ddfe:	2801      	cmp	r0, #1
9000de00:	d120      	bne.n	9000de44 <osMessageQueuePut+0x74>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
9000de02:	9b01      	ldr	r3, [sp, #4]
9000de04:	b1db      	cbz	r3, 9000de3e <osMessageQueuePut+0x6e>
9000de06:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
9000de0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
9000de0e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
9000de12:	f3bf 8f4f 	dsb	sy
9000de16:	f3bf 8f6f 	isb	sy
  stat = osOK;
9000de1a:	4620      	mov	r0, r4
      }
    }
  }

  return (stat);
}
9000de1c:	b003      	add	sp, #12
9000de1e:	bd30      	pop	{r4, r5, pc}
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
9000de20:	b1a0      	cbz	r0, 9000de4c <osMessageQueuePut+0x7c>
9000de22:	fab1 f381 	clz	r3, r1
9000de26:	095b      	lsrs	r3, r3, #5
9000de28:	b181      	cbz	r1, 9000de4c <osMessageQueuePut+0x7c>
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
9000de2a:	4622      	mov	r2, r4
9000de2c:	f000 fed2 	bl	9000ebd4 <xQueueGenericSend>
9000de30:	2801      	cmp	r0, #1
9000de32:	d004      	beq.n	9000de3e <osMessageQueuePut+0x6e>
        if (timeout != 0U) {
9000de34:	b134      	cbz	r4, 9000de44 <osMessageQueuePut+0x74>
          stat = osErrorTimeout;
9000de36:	f06f 0001 	mvn.w	r0, #1
}
9000de3a:	b003      	add	sp, #12
9000de3c:	bd30      	pop	{r4, r5, pc}
  stat = osOK;
9000de3e:	2000      	movs	r0, #0
}
9000de40:	b003      	add	sp, #12
9000de42:	bd30      	pop	{r4, r5, pc}
          stat = osErrorResource;
9000de44:	f06f 0002 	mvn.w	r0, #2
}
9000de48:	b003      	add	sp, #12
9000de4a:	bd30      	pop	{r4, r5, pc}
      stat = osErrorParameter;
9000de4c:	f06f 0003 	mvn.w	r0, #3
9000de50:	e7e4      	b.n	9000de1c <osMessageQueuePut+0x4c>
9000de52:	bf00      	nop

9000de54 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
9000de54:	b530      	push	{r4, r5, lr}
9000de56:	461c      	mov	r4, r3
9000de58:	b083      	sub	sp, #12
9000de5a:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
9000de5e:	b303      	cbz	r3, 9000dea2 <osMessageQueueGet+0x4e>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
9000de60:	3c00      	subs	r4, #0
9000de62:	bf18      	it	ne
9000de64:	2401      	movne	r4, #1
9000de66:	2900      	cmp	r1, #0
9000de68:	bf08      	it	eq
9000de6a:	f044 0401 	orreq.w	r4, r4, #1
9000de6e:	bb5c      	cbnz	r4, 9000dec8 <osMessageQueueGet+0x74>
9000de70:	fab0 f480 	clz	r4, r0
9000de74:	0964      	lsrs	r4, r4, #5
9000de76:	b338      	cbz	r0, 9000dec8 <osMessageQueueGet+0x74>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
9000de78:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
9000de7a:	9401      	str	r4, [sp, #4]
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
9000de7c:	f001 fcbc 	bl	9000f7f8 <xQueueReceiveFromISR>
9000de80:	2801      	cmp	r0, #1
9000de82:	d11d      	bne.n	9000dec0 <osMessageQueueGet+0x6c>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
9000de84:	9b01      	ldr	r3, [sp, #4]
9000de86:	b1c3      	cbz	r3, 9000deba <osMessageQueueGet+0x66>
9000de88:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
9000de8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
9000de90:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
9000de94:	f3bf 8f4f 	dsb	sy
9000de98:	f3bf 8f6f 	isb	sy
  stat = osOK;
9000de9c:	4620      	mov	r0, r4
      }
    }
  }

  return (stat);
}
9000de9e:	b003      	add	sp, #12
9000dea0:	bd30      	pop	{r4, r5, pc}
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
9000dea2:	b188      	cbz	r0, 9000dec8 <osMessageQueueGet+0x74>
9000dea4:	b181      	cbz	r1, 9000dec8 <osMessageQueueGet+0x74>
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
9000dea6:	4622      	mov	r2, r4
9000dea8:	f001 f980 	bl	9000f1ac <xQueueReceive>
9000deac:	2801      	cmp	r0, #1
9000deae:	d004      	beq.n	9000deba <osMessageQueueGet+0x66>
        if (timeout != 0U) {
9000deb0:	b134      	cbz	r4, 9000dec0 <osMessageQueueGet+0x6c>
          stat = osErrorTimeout;
9000deb2:	f06f 0001 	mvn.w	r0, #1
}
9000deb6:	b003      	add	sp, #12
9000deb8:	bd30      	pop	{r4, r5, pc}
  stat = osOK;
9000deba:	2000      	movs	r0, #0
}
9000debc:	b003      	add	sp, #12
9000debe:	bd30      	pop	{r4, r5, pc}
          stat = osErrorResource;
9000dec0:	f06f 0002 	mvn.w	r0, #2
}
9000dec4:	b003      	add	sp, #12
9000dec6:	bd30      	pop	{r4, r5, pc}
      stat = osErrorParameter;
9000dec8:	f06f 0003 	mvn.w	r0, #3
9000decc:	e7e7      	b.n	9000de9e <osMessageQueueGet+0x4a>
9000dece:	bf00      	nop

9000ded0 <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
9000ded0:	4b05      	ldr	r3, [pc, #20]	; (9000dee8 <vApplicationGetIdleTaskMemory+0x18>)
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
9000ded2:	b410      	push	{r4}
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
9000ded4:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
9000ded6:	f44f 7380 	mov.w	r3, #256	; 0x100
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
9000deda:	4c04      	ldr	r4, [pc, #16]	; (9000deec <vApplicationGetIdleTaskMemory+0x1c>)
9000dedc:	600c      	str	r4, [r1, #0]
}
9000dede:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
9000dee2:	6013      	str	r3, [r2, #0]
}
9000dee4:	4770      	bx	lr
9000dee6:	bf00      	nop
9000dee8:	24008614 	.word	0x24008614
9000deec:	24008214 	.word	0x24008214

9000def0 <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
9000def0:	4b05      	ldr	r3, [pc, #20]	; (9000df08 <vApplicationGetTimerTaskMemory+0x18>)
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
9000def2:	b410      	push	{r4}
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
9000def4:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
9000def6:	f44f 7300 	mov.w	r3, #512	; 0x200
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
9000defa:	4c04      	ldr	r4, [pc, #16]	; (9000df0c <vApplicationGetTimerTaskMemory+0x1c>)
9000defc:	600c      	str	r4, [r1, #0]
}
9000defe:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
9000df02:	6013      	str	r3, [r2, #0]
}
9000df04:	4770      	bx	lr
9000df06:	bf00      	nop
9000df08:	24008e78 	.word	0x24008e78
9000df0c:	24008678 	.word	0x24008678

9000df10 <vEventGroupSetBitsCallback>:
EventGroup_t *pxEventBits = xEventGroup;
BaseType_t xMatchFound = pdFALSE;

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
9000df10:	2800      	cmp	r0, #0
9000df12:	d03d      	beq.n	9000df90 <vEventGroupSetBitsCallback+0x80>
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
9000df14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
9000df18:	f011 467f 	ands.w	r6, r1, #4278190080	; 0xff000000
9000df1c:	4688      	mov	r8, r1
9000df1e:	d008      	beq.n	9000df32 <vEventGroupSetBitsCallback+0x22>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
9000df20:	f04f 0350 	mov.w	r3, #80	; 0x50
9000df24:	f383 8811 	msr	BASEPRI, r3
9000df28:	f3bf 8f6f 	isb	sy
9000df2c:	f3bf 8f4f 	dsb	sy
9000df30:	e7fe      	b.n	9000df30 <vEventGroupSetBitsCallback+0x20>
9000df32:	4605      	mov	r5, r0
	vTaskSuspendAll();
9000df34:	f002 f9e2 	bl	900102fc <vTaskSuspendAll>
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
9000df38:	f105 070c 	add.w	r7, r5, #12
		pxEventBits->uxEventBits |= uxBitsToSet;
9000df3c:	682b      	ldr	r3, [r5, #0]
		pxListItem = listGET_HEAD_ENTRY( pxList );
9000df3e:	692c      	ldr	r4, [r5, #16]
		pxEventBits->uxEventBits |= uxBitsToSet;
9000df40:	ea48 0303 	orr.w	r3, r8, r3
		while( pxListItem != pxListEnd )
9000df44:	42a7      	cmp	r7, r4
		pxEventBits->uxEventBits |= uxBitsToSet;
9000df46:	602b      	str	r3, [r5, #0]
		while( pxListItem != pxListEnd )
9000df48:	d10c      	bne.n	9000df64 <vEventGroupSetBitsCallback+0x54>
9000df4a:	e01c      	b.n	9000df86 <vEventGroupSetBitsCallback+0x76>
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
9000df4c:	ea13 0f0c 	tst.w	r3, ip
9000df50:	d006      	beq.n	9000df60 <vEventGroupSetBitsCallback+0x50>
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
9000df52:	01d3      	lsls	r3, r2, #7
					uxBitsToClear |= uxBitsWaitedFor;
9000df54:	bf48      	it	mi
9000df56:	ea46 060c 	orrmi.w	r6, r6, ip
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
9000df5a:	f002 fc09 	bl	90010770 <vTaskRemoveFromUnorderedEventList>
		pxEventBits->uxEventBits &= ~uxBitsToClear;
9000df5e:	682b      	ldr	r3, [r5, #0]
		while( pxListItem != pxListEnd )
9000df60:	42a7      	cmp	r7, r4
9000df62:	d00e      	beq.n	9000df82 <vEventGroupSetBitsCallback+0x72>
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
9000df64:	4620      	mov	r0, r4
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
9000df66:	f043 7100 	orr.w	r1, r3, #33554432	; 0x2000000
			pxNext = listGET_NEXT( pxListItem );
9000df6a:	6864      	ldr	r4, [r4, #4]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
9000df6c:	6802      	ldr	r2, [r0, #0]
			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
9000df6e:	f012 6f80 	tst.w	r2, #67108864	; 0x4000000
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
9000df72:	f022 4c7f 	bic.w	ip, r2, #4278190080	; 0xff000000
			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
9000df76:	d0e9      	beq.n	9000df4c <vEventGroupSetBitsCallback+0x3c>
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
9000df78:	ea3c 0e03 	bics.w	lr, ip, r3
9000df7c:	d0e9      	beq.n	9000df52 <vEventGroupSetBitsCallback+0x42>
		while( pxListItem != pxListEnd )
9000df7e:	42a7      	cmp	r7, r4
9000df80:	d1f0      	bne.n	9000df64 <vEventGroupSetBitsCallback+0x54>
		pxEventBits->uxEventBits &= ~uxBitsToClear;
9000df82:	ea23 0306 	bic.w	r3, r3, r6
9000df86:	602b      	str	r3, [r5, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
9000df88:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	( void ) xTaskResumeAll();
9000df8c:	f002 b9be 	b.w	9001030c <xTaskResumeAll>
9000df90:	f04f 0350 	mov.w	r3, #80	; 0x50
9000df94:	f383 8811 	msr	BASEPRI, r3
9000df98:	f3bf 8f6f 	isb	sy
9000df9c:	f3bf 8f4f 	dsb	sy
	configASSERT( xEventGroup );
9000dfa0:	e7fe      	b.n	9000dfa0 <vEventGroupSetBitsCallback+0x90>
9000dfa2:	bf00      	nop

9000dfa4 <xEventGroupCreateStatic>:
		configASSERT( pxEventGroupBuffer );
9000dfa4:	b178      	cbz	r0, 9000dfc6 <xEventGroupCreateStatic+0x22>
			volatile size_t xSize = sizeof( StaticEventGroup_t );
9000dfa6:	2320      	movs	r3, #32
	{
9000dfa8:	b510      	push	{r4, lr}
9000dfaa:	b082      	sub	sp, #8
			volatile size_t xSize = sizeof( StaticEventGroup_t );
9000dfac:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( EventGroup_t ) );
9000dfae:	9b01      	ldr	r3, [sp, #4]
9000dfb0:	2b20      	cmp	r3, #32
9000dfb2:	d011      	beq.n	9000dfd8 <xEventGroupCreateStatic+0x34>
9000dfb4:	f04f 0350 	mov.w	r3, #80	; 0x50
9000dfb8:	f383 8811 	msr	BASEPRI, r3
9000dfbc:	f3bf 8f6f 	isb	sy
9000dfc0:	f3bf 8f4f 	dsb	sy
9000dfc4:	e7fe      	b.n	9000dfc4 <xEventGroupCreateStatic+0x20>
9000dfc6:	f04f 0350 	mov.w	r3, #80	; 0x50
9000dfca:	f383 8811 	msr	BASEPRI, r3
9000dfce:	f3bf 8f6f 	isb	sy
9000dfd2:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventGroupBuffer );
9000dfd6:	e7fe      	b.n	9000dfd6 <xEventGroupCreateStatic+0x32>
			pxEventBits->uxEventBits = 0;
9000dfd8:	2300      	movs	r3, #0
9000dfda:	4604      	mov	r4, r0
9000dfdc:	f840 3b04 	str.w	r3, [r0], #4
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
9000dfe0:	f000 fa46 	bl	9000e470 <vListInitialise>
				pxEventBits->ucStaticallyAllocated = pdTRUE;
9000dfe4:	2301      	movs	r3, #1
	}
9000dfe6:	4620      	mov	r0, r4
				pxEventBits->ucStaticallyAllocated = pdTRUE;
9000dfe8:	7723      	strb	r3, [r4, #28]
	}
9000dfea:	b002      	add	sp, #8
9000dfec:	bd10      	pop	{r4, pc}
9000dfee:	bf00      	nop

9000dff0 <xEventGroupCreate>:
	{
9000dff0:	b538      	push	{r3, r4, r5, lr}
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
9000dff2:	2020      	movs	r0, #32
9000dff4:	f000 f91a 	bl	9000e22c <pvPortMalloc>
		if( pxEventBits != NULL )
9000dff8:	4604      	mov	r4, r0
9000dffa:	b128      	cbz	r0, 9000e008 <xEventGroupCreate+0x18>
			pxEventBits->uxEventBits = 0;
9000dffc:	2500      	movs	r5, #0
9000dffe:	f840 5b04 	str.w	r5, [r0], #4
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
9000e002:	f000 fa35 	bl	9000e470 <vListInitialise>
				pxEventBits->ucStaticallyAllocated = pdFALSE;
9000e006:	7725      	strb	r5, [r4, #28]
	}
9000e008:	4620      	mov	r0, r4
9000e00a:	bd38      	pop	{r3, r4, r5, pc}

9000e00c <xEventGroupWaitBits>:
	configASSERT( xEventGroup );
9000e00c:	b1c0      	cbz	r0, 9000e040 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
9000e00e:	f011 4f7f 	tst.w	r1, #4278190080	; 0xff000000
{
9000e012:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9000e016:	460c      	mov	r4, r1
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
9000e018:	d109      	bne.n	9000e02e <xEventGroupWaitBits+0x22>
	configASSERT( uxBitsToWaitFor != 0 );
9000e01a:	b9d1      	cbnz	r1, 9000e052 <xEventGroupWaitBits+0x46>
9000e01c:	f04f 0350 	mov.w	r3, #80	; 0x50
9000e020:	f383 8811 	msr	BASEPRI, r3
9000e024:	f3bf 8f6f 	isb	sy
9000e028:	f3bf 8f4f 	dsb	sy
9000e02c:	e7fe      	b.n	9000e02c <xEventGroupWaitBits+0x20>
9000e02e:	f04f 0350 	mov.w	r3, #80	; 0x50
9000e032:	f383 8811 	msr	BASEPRI, r3
9000e036:	f3bf 8f6f 	isb	sy
9000e03a:	f3bf 8f4f 	dsb	sy
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
9000e03e:	e7fe      	b.n	9000e03e <xEventGroupWaitBits+0x32>
9000e040:	f04f 0350 	mov.w	r3, #80	; 0x50
9000e044:	f383 8811 	msr	BASEPRI, r3
9000e048:	f3bf 8f6f 	isb	sy
9000e04c:	f3bf 8f4f 	dsb	sy
	configASSERT( xEventGroup );
9000e050:	e7fe      	b.n	9000e050 <xEventGroupWaitBits+0x44>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
9000e052:	4616      	mov	r6, r2
9000e054:	461f      	mov	r7, r3
9000e056:	4605      	mov	r5, r0
9000e058:	f002 fc2e 	bl	900108b8 <xTaskGetSchedulerState>
9000e05c:	b950      	cbnz	r0, 9000e074 <xEventGroupWaitBits+0x68>
9000e05e:	9b06      	ldr	r3, [sp, #24]
9000e060:	b143      	cbz	r3, 9000e074 <xEventGroupWaitBits+0x68>
9000e062:	f04f 0350 	mov.w	r3, #80	; 0x50
9000e066:	f383 8811 	msr	BASEPRI, r3
9000e06a:	f3bf 8f6f 	isb	sy
9000e06e:	f3bf 8f4f 	dsb	sy
9000e072:	e7fe      	b.n	9000e072 <xEventGroupWaitBits+0x66>
	vTaskSuspendAll();
9000e074:	f002 f942 	bl	900102fc <vTaskSuspendAll>
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
9000e078:	f8d5 8000 	ldr.w	r8, [r5]

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
BaseType_t xWaitConditionMet = pdFALSE;

	if( xWaitForAllBits == pdFALSE )
9000e07c:	bb1f      	cbnz	r7, 9000e0c6 <xEventGroupWaitBits+0xba>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
9000e07e:	ea14 0f08 	tst.w	r4, r8
9000e082:	d12a      	bne.n	9000e0da <xEventGroupWaitBits+0xce>
		else if( xTicksToWait == ( TickType_t ) 0 )
9000e084:	9b06      	ldr	r3, [sp, #24]
9000e086:	b31b      	cbz	r3, 9000e0d0 <xEventGroupWaitBits+0xc4>
			if( xClearOnExit != pdFALSE )
9000e088:	3e00      	subs	r6, #0
9000e08a:	461a      	mov	r2, r3
9000e08c:	bf18      	it	ne
9000e08e:	2601      	movne	r6, #1
9000e090:	0631      	lsls	r1, r6, #24
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
9000e092:	4321      	orrs	r1, r4
9000e094:	1d28      	adds	r0, r5, #4
9000e096:	f002 fa81 	bl	9001059c <vTaskPlaceOnUnorderedEventList>
	xAlreadyYielded = xTaskResumeAll();
9000e09a:	f002 f937 	bl	9001030c <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
9000e09e:	b948      	cbnz	r0, 9000e0b4 <xEventGroupWaitBits+0xa8>
			portYIELD_WITHIN_API();
9000e0a0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
9000e0a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
9000e0a8:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
9000e0ac:	f3bf 8f4f 	dsb	sy
9000e0b0:	f3bf 8f6f 	isb	sy
		uxReturn = uxTaskResetEventItemValue();
9000e0b4:	f002 fcf0 	bl	90010a98 <uxTaskResetEventItemValue>
		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
9000e0b8:	f010 7f00 	tst.w	r0, #33554432	; 0x2000000
		uxReturn = uxTaskResetEventItemValue();
9000e0bc:	4680      	mov	r8, r0
		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
9000e0be:	d014      	beq.n	9000e0ea <xEventGroupWaitBits+0xde>
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
9000e0c0:	f028 487f 	bic.w	r8, r8, #4278190080	; 0xff000000
	return uxReturn;
9000e0c4:	e006      	b.n	9000e0d4 <xEventGroupWaitBits+0xc8>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
9000e0c6:	ea34 0308 	bics.w	r3, r4, r8
9000e0ca:	d006      	beq.n	9000e0da <xEventGroupWaitBits+0xce>
		else if( xTicksToWait == ( TickType_t ) 0 )
9000e0cc:	9b06      	ldr	r3, [sp, #24]
9000e0ce:	b9db      	cbnz	r3, 9000e108 <xEventGroupWaitBits+0xfc>
	xAlreadyYielded = xTaskResumeAll();
9000e0d0:	f002 f91c 	bl	9001030c <xTaskResumeAll>
}
9000e0d4:	4640      	mov	r0, r8
9000e0d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xClearOnExit != pdFALSE )
9000e0da:	2e00      	cmp	r6, #0
9000e0dc:	d0f8      	beq.n	9000e0d0 <xEventGroupWaitBits+0xc4>
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
9000e0de:	ea28 0404 	bic.w	r4, r8, r4
9000e0e2:	602c      	str	r4, [r5, #0]
	xAlreadyYielded = xTaskResumeAll();
9000e0e4:	f002 f912 	bl	9001030c <xTaskResumeAll>
	if( xTicksToWait != ( TickType_t ) 0 )
9000e0e8:	e7f4      	b.n	9000e0d4 <xEventGroupWaitBits+0xc8>
			taskENTER_CRITICAL();
9000e0ea:	f000 fa7b 	bl	9000e5e4 <vPortEnterCritical>
				uxReturn = pxEventBits->uxEventBits;
9000e0ee:	f8d5 8000 	ldr.w	r8, [r5]
	if( xWaitForAllBits == pdFALSE )
9000e0f2:	b98f      	cbnz	r7, 9000e118 <xEventGroupWaitBits+0x10c>
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
9000e0f4:	ea14 0f08 	tst.w	r4, r8
9000e0f8:	d003      	beq.n	9000e102 <xEventGroupWaitBits+0xf6>
					if( xClearOnExit != pdFALSE )
9000e0fa:	b116      	cbz	r6, 9000e102 <xEventGroupWaitBits+0xf6>
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
9000e0fc:	ea28 0404 	bic.w	r4, r8, r4
9000e100:	602c      	str	r4, [r5, #0]
			taskEXIT_CRITICAL();
9000e102:	f000 fa91 	bl	9000e628 <vPortExitCritical>
9000e106:	e7db      	b.n	9000e0c0 <xEventGroupWaitBits+0xb4>
			if( xClearOnExit != pdFALSE )
9000e108:	3e00      	subs	r6, #0
9000e10a:	461a      	mov	r2, r3
9000e10c:	bf18      	it	ne
9000e10e:	2601      	movne	r6, #1
9000e110:	0631      	lsls	r1, r6, #24
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
9000e112:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
9000e116:	e7bc      	b.n	9000e092 <xEventGroupWaitBits+0x86>
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
9000e118:	ea34 0308 	bics.w	r3, r4, r8
9000e11c:	d1f1      	bne.n	9000e102 <xEventGroupWaitBits+0xf6>
9000e11e:	e7ec      	b.n	9000e0fa <xEventGroupWaitBits+0xee>

9000e120 <xEventGroupClearBits>:
	configASSERT( xEventGroup );
9000e120:	b1c0      	cbz	r0, 9000e154 <xEventGroupClearBits+0x34>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
9000e122:	f011 4f7f 	tst.w	r1, #4278190080	; 0xff000000
{
9000e126:	b570      	push	{r4, r5, r6, lr}
9000e128:	460c      	mov	r4, r1
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
9000e12a:	d008      	beq.n	9000e13e <xEventGroupClearBits+0x1e>
9000e12c:	f04f 0350 	mov.w	r3, #80	; 0x50
9000e130:	f383 8811 	msr	BASEPRI, r3
9000e134:	f3bf 8f6f 	isb	sy
9000e138:	f3bf 8f4f 	dsb	sy
9000e13c:	e7fe      	b.n	9000e13c <xEventGroupClearBits+0x1c>
9000e13e:	4606      	mov	r6, r0
	taskENTER_CRITICAL();
9000e140:	f000 fa50 	bl	9000e5e4 <vPortEnterCritical>
		uxReturn = pxEventBits->uxEventBits;
9000e144:	6835      	ldr	r5, [r6, #0]
		pxEventBits->uxEventBits &= ~uxBitsToClear;
9000e146:	ea25 0404 	bic.w	r4, r5, r4
9000e14a:	6034      	str	r4, [r6, #0]
	taskEXIT_CRITICAL();
9000e14c:	f000 fa6c 	bl	9000e628 <vPortExitCritical>
}
9000e150:	4628      	mov	r0, r5
9000e152:	bd70      	pop	{r4, r5, r6, pc}
9000e154:	f04f 0350 	mov.w	r3, #80	; 0x50
9000e158:	f383 8811 	msr	BASEPRI, r3
9000e15c:	f3bf 8f6f 	isb	sy
9000e160:	f3bf 8f4f 	dsb	sy
	configASSERT( xEventGroup );
9000e164:	e7fe      	b.n	9000e164 <xEventGroupClearBits+0x44>
9000e166:	bf00      	nop

9000e168 <xEventGroupGetBitsFromISR>:

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
9000e168:	f3ef 8311 	mrs	r3, BASEPRI
9000e16c:	f04f 0250 	mov.w	r2, #80	; 0x50
9000e170:	f382 8811 	msr	BASEPRI, r2
9000e174:	f3bf 8f6f 	isb	sy
9000e178:	f3bf 8f4f 	dsb	sy
		uxReturn = pxEventBits->uxEventBits;
9000e17c:	6800      	ldr	r0, [r0, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
9000e17e:	f383 8811 	msr	BASEPRI, r3
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
9000e182:	4770      	bx	lr

9000e184 <xEventGroupSetBits>:
	configASSERT( xEventGroup );
9000e184:	2800      	cmp	r0, #0
9000e186:	d03e      	beq.n	9000e206 <xEventGroupSetBits+0x82>
{
9000e188:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
9000e18c:	f011 467f 	ands.w	r6, r1, #4278190080	; 0xff000000
9000e190:	4688      	mov	r8, r1
9000e192:	d008      	beq.n	9000e1a6 <xEventGroupSetBits+0x22>
	__asm volatile
9000e194:	f04f 0350 	mov.w	r3, #80	; 0x50
9000e198:	f383 8811 	msr	BASEPRI, r3
9000e19c:	f3bf 8f6f 	isb	sy
9000e1a0:	f3bf 8f4f 	dsb	sy
9000e1a4:	e7fe      	b.n	9000e1a4 <xEventGroupSetBits+0x20>
9000e1a6:	4605      	mov	r5, r0
	vTaskSuspendAll();
9000e1a8:	f002 f8a8 	bl	900102fc <vTaskSuspendAll>
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
9000e1ac:	f105 070c 	add.w	r7, r5, #12
		pxEventBits->uxEventBits |= uxBitsToSet;
9000e1b0:	682b      	ldr	r3, [r5, #0]
		pxListItem = listGET_HEAD_ENTRY( pxList );
9000e1b2:	692c      	ldr	r4, [r5, #16]
		pxEventBits->uxEventBits |= uxBitsToSet;
9000e1b4:	ea48 0303 	orr.w	r3, r8, r3
		while( pxListItem != pxListEnd )
9000e1b8:	42a7      	cmp	r7, r4
		pxEventBits->uxEventBits |= uxBitsToSet;
9000e1ba:	602b      	str	r3, [r5, #0]
		while( pxListItem != pxListEnd )
9000e1bc:	d10c      	bne.n	9000e1d8 <xEventGroupSetBits+0x54>
9000e1be:	e01c      	b.n	9000e1fa <xEventGroupSetBits+0x76>
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
9000e1c0:	ea1c 0f03 	tst.w	ip, r3
9000e1c4:	d006      	beq.n	9000e1d4 <xEventGroupSetBits+0x50>
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
9000e1c6:	01d3      	lsls	r3, r2, #7
					uxBitsToClear |= uxBitsWaitedFor;
9000e1c8:	bf48      	it	mi
9000e1ca:	ea46 060c 	orrmi.w	r6, r6, ip
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
9000e1ce:	f002 facf 	bl	90010770 <vTaskRemoveFromUnorderedEventList>
		pxEventBits->uxEventBits &= ~uxBitsToClear;
9000e1d2:	682b      	ldr	r3, [r5, #0]
		while( pxListItem != pxListEnd )
9000e1d4:	42a7      	cmp	r7, r4
9000e1d6:	d00e      	beq.n	9000e1f6 <xEventGroupSetBits+0x72>
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
9000e1d8:	4620      	mov	r0, r4
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
9000e1da:	f043 7100 	orr.w	r1, r3, #33554432	; 0x2000000
			pxNext = listGET_NEXT( pxListItem );
9000e1de:	6864      	ldr	r4, [r4, #4]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
9000e1e0:	6802      	ldr	r2, [r0, #0]
			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
9000e1e2:	f012 6f80 	tst.w	r2, #67108864	; 0x4000000
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
9000e1e6:	f022 4c7f 	bic.w	ip, r2, #4278190080	; 0xff000000
			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
9000e1ea:	d0e9      	beq.n	9000e1c0 <xEventGroupSetBits+0x3c>
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
9000e1ec:	ea3c 0e03 	bics.w	lr, ip, r3
9000e1f0:	d0e9      	beq.n	9000e1c6 <xEventGroupSetBits+0x42>
		while( pxListItem != pxListEnd )
9000e1f2:	42a7      	cmp	r7, r4
9000e1f4:	d1f0      	bne.n	9000e1d8 <xEventGroupSetBits+0x54>
		pxEventBits->uxEventBits &= ~uxBitsToClear;
9000e1f6:	ea23 0306 	bic.w	r3, r3, r6
9000e1fa:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
9000e1fc:	f002 f886 	bl	9001030c <xTaskResumeAll>
}
9000e200:	6828      	ldr	r0, [r5, #0]
9000e202:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
9000e206:	f04f 0350 	mov.w	r3, #80	; 0x50
9000e20a:	f383 8811 	msr	BASEPRI, r3
9000e20e:	f3bf 8f6f 	isb	sy
9000e212:	f3bf 8f4f 	dsb	sy
	configASSERT( xEventGroup );
9000e216:	e7fe      	b.n	9000e216 <xEventGroupSetBits+0x92>

9000e218 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
9000e218:	4684      	mov	ip, r0
9000e21a:	4613      	mov	r3, r2
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
9000e21c:	4802      	ldr	r0, [pc, #8]	; (9000e228 <xEventGroupSetBitsFromISR+0x10>)
9000e21e:	460a      	mov	r2, r1
9000e220:	4661      	mov	r1, ip
9000e222:	f002 be47 	b.w	90010eb4 <xTimerPendFunctionCallFromISR>
9000e226:	bf00      	nop
9000e228:	9000df11 	.word	0x9000df11

9000e22c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
9000e22c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9000e230:	4605      	mov	r5, r0
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	vTaskSuspendAll();
9000e232:	f002 f863 	bl	900102fc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
9000e236:	4a54      	ldr	r2, [pc, #336]	; (9000e388 <pvPortMalloc+0x15c>)
9000e238:	6816      	ldr	r6, [r2, #0]
9000e23a:	2e00      	cmp	r6, #0
9000e23c:	d06f      	beq.n	9000e31e <pvPortMalloc+0xf2>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
9000e23e:	4b53      	ldr	r3, [pc, #332]	; (9000e38c <pvPortMalloc+0x160>)
9000e240:	681f      	ldr	r7, [r3, #0]
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
9000e242:	423d      	tst	r5, r7
9000e244:	d12e      	bne.n	9000e2a4 <pvPortMalloc+0x78>
9000e246:	b36d      	cbz	r5, 9000e2a4 <pvPortMalloc+0x78>
			{
				xWantedSize += xHeapStructSize;
9000e248:	f105 0408 	add.w	r4, r5, #8

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
9000e24c:	076d      	lsls	r5, r5, #29
9000e24e:	d002      	beq.n	9000e256 <pvPortMalloc+0x2a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
9000e250:	f024 0407 	bic.w	r4, r4, #7
9000e254:	3408      	adds	r4, #8
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
9000e256:	b32c      	cbz	r4, 9000e2a4 <pvPortMalloc+0x78>
9000e258:	f8df c148 	ldr.w	ip, [pc, #328]	; 9000e3a4 <pvPortMalloc+0x178>
9000e25c:	f8dc 5000 	ldr.w	r5, [ip]
9000e260:	42a5      	cmp	r5, r4
9000e262:	d31f      	bcc.n	9000e2a4 <pvPortMalloc+0x78>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
9000e264:	484a      	ldr	r0, [pc, #296]	; (9000e390 <pvPortMalloc+0x164>)
9000e266:	6803      	ldr	r3, [r0, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
9000e268:	e003      	b.n	9000e272 <pvPortMalloc+0x46>
9000e26a:	681a      	ldr	r2, [r3, #0]
9000e26c:	b122      	cbz	r2, 9000e278 <pvPortMalloc+0x4c>
9000e26e:	4618      	mov	r0, r3
9000e270:	4613      	mov	r3, r2
9000e272:	6859      	ldr	r1, [r3, #4]
9000e274:	42a1      	cmp	r1, r4
9000e276:	d3f8      	bcc.n	9000e26a <pvPortMalloc+0x3e>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
9000e278:	42b3      	cmp	r3, r6
9000e27a:	d013      	beq.n	9000e2a4 <pvPortMalloc+0x78>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
9000e27c:	4698      	mov	r8, r3
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
9000e27e:	1b0a      	subs	r2, r1, r4
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
9000e280:	f858 eb08 	ldr.w	lr, [r8], #8
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
9000e284:	2a10      	cmp	r2, #16
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
9000e286:	f8c0 e000 	str.w	lr, [r0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
9000e28a:	d929      	bls.n	9000e2e0 <pvPortMalloc+0xb4>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
9000e28c:	1919      	adds	r1, r3, r4
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
9000e28e:	0748      	lsls	r0, r1, #29
9000e290:	d00f      	beq.n	9000e2b2 <pvPortMalloc+0x86>
9000e292:	f04f 0350 	mov.w	r3, #80	; 0x50
9000e296:	f383 8811 	msr	BASEPRI, r3
9000e29a:	f3bf 8f6f 	isb	sy
9000e29e:	f3bf 8f4f 	dsb	sy
9000e2a2:	e7fe      	b.n	9000e2a2 <pvPortMalloc+0x76>
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
9000e2a4:	f04f 0800 	mov.w	r8, #0
9000e2a8:	f002 f830 	bl	9001030c <xTaskResumeAll>
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
}
9000e2ac:	4640      	mov	r0, r8
9000e2ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
9000e2b2:	604a      	str	r2, [r1, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
9000e2b4:	4a36      	ldr	r2, [pc, #216]	; (9000e390 <pvPortMalloc+0x164>)
						pxBlock->xBlockSize = xWantedSize;
9000e2b6:	605c      	str	r4, [r3, #4]
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
9000e2b8:	4614      	mov	r4, r2
9000e2ba:	6812      	ldr	r2, [r2, #0]
9000e2bc:	4291      	cmp	r1, r2
9000e2be:	d8fb      	bhi.n	9000e2b8 <pvPortMalloc+0x8c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
9000e2c0:	6860      	ldr	r0, [r4, #4]
9000e2c2:	eb04 0e00 	add.w	lr, r4, r0
9000e2c6:	4571      	cmp	r1, lr
9000e2c8:	d04a      	beq.n	9000e360 <pvPortMalloc+0x134>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
9000e2ca:	f8d1 e004 	ldr.w	lr, [r1, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
9000e2ce:	eb01 000e 	add.w	r0, r1, lr
9000e2d2:	4282      	cmp	r2, r0
9000e2d4:	d050      	beq.n	9000e378 <pvPortMalloc+0x14c>

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
9000e2d6:	428c      	cmp	r4, r1
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
9000e2d8:	600a      	str	r2, [r1, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
9000e2da:	bf18      	it	ne
9000e2dc:	6021      	strne	r1, [r4, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
9000e2de:	6859      	ldr	r1, [r3, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
9000e2e0:	4a2c      	ldr	r2, [pc, #176]	; (9000e394 <pvPortMalloc+0x168>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
9000e2e2:	1a6d      	subs	r5, r5, r1
					pxBlock->xBlockSize |= xBlockAllocatedBit;
9000e2e4:	4339      	orrs	r1, r7
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
9000e2e6:	6810      	ldr	r0, [r2, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
9000e2e8:	f8cc 5000 	str.w	r5, [ip]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
9000e2ec:	4285      	cmp	r5, r0
					pxBlock->pxNextFreeBlock = NULL;
9000e2ee:	f04f 0000 	mov.w	r0, #0
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
9000e2f2:	bf38      	it	cc
9000e2f4:	6015      	strcc	r5, [r2, #0]
					xNumberOfSuccessfulAllocations++;
9000e2f6:	4a28      	ldr	r2, [pc, #160]	; (9000e398 <pvPortMalloc+0x16c>)
					pxBlock->pxNextFreeBlock = NULL;
9000e2f8:	e9c3 0100 	strd	r0, r1, [r3]
					xNumberOfSuccessfulAllocations++;
9000e2fc:	6813      	ldr	r3, [r2, #0]
9000e2fe:	3301      	adds	r3, #1
9000e300:	6013      	str	r3, [r2, #0]
	( void ) xTaskResumeAll();
9000e302:	f002 f803 	bl	9001030c <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
9000e306:	f018 0f07 	tst.w	r8, #7
9000e30a:	d0cf      	beq.n	9000e2ac <pvPortMalloc+0x80>
9000e30c:	f04f 0350 	mov.w	r3, #80	; 0x50
9000e310:	f383 8811 	msr	BASEPRI, r3
9000e314:	f3bf 8f6f 	isb	sy
9000e318:	f3bf 8f4f 	dsb	sy
9000e31c:	e7fe      	b.n	9000e31c <pvPortMalloc+0xf0>
	uxAddress = ( size_t ) ucHeap;
9000e31e:	4b1f      	ldr	r3, [pc, #124]	; (9000e39c <pvPortMalloc+0x170>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
9000e320:	075e      	lsls	r6, r3, #29
9000e322:	d117      	bne.n	9000e354 <pvPortMalloc+0x128>
9000e324:	4e1e      	ldr	r6, [pc, #120]	; (9000e3a0 <pvPortMalloc+0x174>)
9000e326:	4619      	mov	r1, r3
	uxAddress -= xHeapStructSize;
9000e328:	3e08      	subs	r6, #8
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
9000e32a:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
9000e32e:	4818      	ldr	r0, [pc, #96]	; (9000e390 <pvPortMalloc+0x164>)
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
9000e330:	f026 0607 	bic.w	r6, r6, #7
	pxEnd = ( void * ) uxAddress;
9000e334:	6016      	str	r6, [r2, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
9000e336:	1af3      	subs	r3, r6, r3
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
9000e338:	4a16      	ldr	r2, [pc, #88]	; (9000e394 <pvPortMalloc+0x168>)
9000e33a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
9000e33c:	4a19      	ldr	r2, [pc, #100]	; (9000e3a4 <pvPortMalloc+0x178>)
9000e33e:	6013      	str	r3, [r2, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
9000e340:	4a12      	ldr	r2, [pc, #72]	; (9000e38c <pvPortMalloc+0x160>)
9000e342:	6017      	str	r7, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
9000e344:	2200      	movs	r2, #0
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
9000e346:	e9c0 1200 	strd	r1, r2, [r0]
	pxEnd->pxNextFreeBlock = NULL;
9000e34a:	e9c6 2200 	strd	r2, r2, [r6]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
9000e34e:	e9c1 6300 	strd	r6, r3, [r1]
}
9000e352:	e776      	b.n	9000e242 <pvPortMalloc+0x16>
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
9000e354:	3307      	adds	r3, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
9000e356:	4e12      	ldr	r6, [pc, #72]	; (9000e3a0 <pvPortMalloc+0x174>)
	pucAlignedHeap = ( uint8_t * ) uxAddress;
9000e358:	f023 0107 	bic.w	r1, r3, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
9000e35c:	460b      	mov	r3, r1
9000e35e:	e7e3      	b.n	9000e328 <pvPortMalloc+0xfc>
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
9000e360:	6849      	ldr	r1, [r1, #4]
9000e362:	eb00 0e01 	add.w	lr, r0, r1
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
9000e366:	eb04 010e 	add.w	r1, r4, lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
9000e36a:	f8c4 e004 	str.w	lr, [r4, #4]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
9000e36e:	428a      	cmp	r2, r1
9000e370:	d001      	beq.n	9000e376 <pvPortMalloc+0x14a>
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
9000e372:	6022      	str	r2, [r4, #0]
	if( pxIterator != pxBlockToInsert )
9000e374:	e7b3      	b.n	9000e2de <pvPortMalloc+0xb2>
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
9000e376:	4621      	mov	r1, r4
		if( pxIterator->pxNextFreeBlock != pxEnd )
9000e378:	42b2      	cmp	r2, r6
9000e37a:	d0ac      	beq.n	9000e2d6 <pvPortMalloc+0xaa>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
9000e37c:	6850      	ldr	r0, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
9000e37e:	6812      	ldr	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
9000e380:	4470      	add	r0, lr
9000e382:	6048      	str	r0, [r1, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
9000e384:	e7a7      	b.n	9000e2d6 <pvPortMalloc+0xaa>
9000e386:	bf00      	nop
9000e388:	24008ed8 	.word	0x24008ed8
9000e38c:	2402157c 	.word	0x2402157c
9000e390:	24021590 	.word	0x24021590
9000e394:	24021584 	.word	0x24021584
9000e398:	24021588 	.word	0x24021588
9000e39c:	24008edc 	.word	0x24008edc
9000e3a0:	2402157c 	.word	0x2402157c
9000e3a4:	24021580 	.word	0x24021580

9000e3a8 <vPortFree>:
	if( pv != NULL )
9000e3a8:	b1d0      	cbz	r0, 9000e3e0 <vPortFree+0x38>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
9000e3aa:	4a2c      	ldr	r2, [pc, #176]	; (9000e45c <vPortFree+0xb4>)
9000e3ac:	f850 3c04 	ldr.w	r3, [r0, #-4]
9000e3b0:	6812      	ldr	r2, [r2, #0]
9000e3b2:	4213      	tst	r3, r2
9000e3b4:	d00b      	beq.n	9000e3ce <vPortFree+0x26>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
9000e3b6:	f850 1c08 	ldr.w	r1, [r0, #-8]
9000e3ba:	b191      	cbz	r1, 9000e3e2 <vPortFree+0x3a>
9000e3bc:	f04f 0350 	mov.w	r3, #80	; 0x50
9000e3c0:	f383 8811 	msr	BASEPRI, r3
9000e3c4:	f3bf 8f6f 	isb	sy
9000e3c8:	f3bf 8f4f 	dsb	sy
9000e3cc:	e7fe      	b.n	9000e3cc <vPortFree+0x24>
9000e3ce:	f04f 0350 	mov.w	r3, #80	; 0x50
9000e3d2:	f383 8811 	msr	BASEPRI, r3
9000e3d6:	f3bf 8f6f 	isb	sy
9000e3da:	f3bf 8f4f 	dsb	sy
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
9000e3de:	e7fe      	b.n	9000e3de <vPortFree+0x36>
9000e3e0:	4770      	bx	lr
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
9000e3e2:	ea23 0302 	bic.w	r3, r3, r2
{
9000e3e6:	b530      	push	{r4, r5, lr}
9000e3e8:	b083      	sub	sp, #12
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
9000e3ea:	f840 3c04 	str.w	r3, [r0, #-4]
		puc -= xHeapStructSize;
9000e3ee:	f1a0 0408 	sub.w	r4, r0, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
9000e3f2:	4d1b      	ldr	r5, [pc, #108]	; (9000e460 <vPortFree+0xb8>)
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
9000e3f4:	9001      	str	r0, [sp, #4]
				vTaskSuspendAll();
9000e3f6:	f001 ff81 	bl	900102fc <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
9000e3fa:	9801      	ldr	r0, [sp, #4]
9000e3fc:	682a      	ldr	r2, [r5, #0]
9000e3fe:	f850 1c04 	ldr.w	r1, [r0, #-4]
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
9000e402:	4b18      	ldr	r3, [pc, #96]	; (9000e464 <vPortFree+0xbc>)
					xFreeBytesRemaining += pxLink->xBlockSize;
9000e404:	440a      	add	r2, r1
9000e406:	602a      	str	r2, [r5, #0]
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
9000e408:	461a      	mov	r2, r3
9000e40a:	681b      	ldr	r3, [r3, #0]
9000e40c:	429c      	cmp	r4, r3
9000e40e:	d8fb      	bhi.n	9000e408 <vPortFree+0x60>
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
9000e410:	6850      	ldr	r0, [r2, #4]
9000e412:	eb02 0c00 	add.w	ip, r2, r0
9000e416:	4564      	cmp	r4, ip
9000e418:	d00f      	beq.n	9000e43a <vPortFree+0x92>
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
9000e41a:	1860      	adds	r0, r4, r1
9000e41c:	4283      	cmp	r3, r0
9000e41e:	d014      	beq.n	9000e44a <vPortFree+0xa2>
	if( pxIterator != pxBlockToInsert )
9000e420:	42a2      	cmp	r2, r4
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
9000e422:	6023      	str	r3, [r4, #0]
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
9000e424:	bf18      	it	ne
9000e426:	6014      	strne	r4, [r2, #0]
					xNumberOfSuccessfulFrees++;
9000e428:	4a0f      	ldr	r2, [pc, #60]	; (9000e468 <vPortFree+0xc0>)
9000e42a:	6813      	ldr	r3, [r2, #0]
9000e42c:	3301      	adds	r3, #1
9000e42e:	6013      	str	r3, [r2, #0]
}
9000e430:	b003      	add	sp, #12
9000e432:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
				( void ) xTaskResumeAll();
9000e436:	f001 bf69 	b.w	9001030c <xTaskResumeAll>
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
9000e43a:	4401      	add	r1, r0
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
9000e43c:	1850      	adds	r0, r2, r1
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
9000e43e:	6051      	str	r1, [r2, #4]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
9000e440:	4283      	cmp	r3, r0
9000e442:	d001      	beq.n	9000e448 <vPortFree+0xa0>
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
9000e444:	6013      	str	r3, [r2, #0]
	if( pxIterator != pxBlockToInsert )
9000e446:	e7ef      	b.n	9000e428 <vPortFree+0x80>
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
9000e448:	4614      	mov	r4, r2
		if( pxIterator->pxNextFreeBlock != pxEnd )
9000e44a:	4808      	ldr	r0, [pc, #32]	; (9000e46c <vPortFree+0xc4>)
9000e44c:	6800      	ldr	r0, [r0, #0]
9000e44e:	4283      	cmp	r3, r0
9000e450:	d0e6      	beq.n	9000e420 <vPortFree+0x78>
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
9000e452:	e9d3 3000 	ldrd	r3, r0, [r3]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
9000e456:	4401      	add	r1, r0
9000e458:	6061      	str	r1, [r4, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
9000e45a:	e7e1      	b.n	9000e420 <vPortFree+0x78>
9000e45c:	2402157c 	.word	0x2402157c
9000e460:	24021580 	.word	0x24021580
9000e464:	24021590 	.word	0x24021590
9000e468:	2402158c 	.word	0x2402158c
9000e46c:	24008ed8 	.word	0x24008ed8

9000e470 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
9000e470:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
9000e474:	f04f 31ff 	mov.w	r1, #4294967295
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
9000e478:	2200      	movs	r2, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
9000e47a:	6081      	str	r1, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
9000e47c:	6002      	str	r2, [r0, #0]
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
9000e47e:	6043      	str	r3, [r0, #4]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
9000e480:	e9c0 3303 	strd	r3, r3, [r0, #12]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
9000e484:	4770      	bx	lr
9000e486:	bf00      	nop

9000e488 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
9000e488:	2300      	movs	r3, #0
9000e48a:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
9000e48c:	4770      	bx	lr
9000e48e:	bf00      	nop

9000e490 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
9000e490:	6843      	ldr	r3, [r0, #4]
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
9000e492:	6802      	ldr	r2, [r0, #0]
{
9000e494:	b410      	push	{r4}
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
9000e496:	689c      	ldr	r4, [r3, #8]
	( pxList->uxNumberOfItems )++;
9000e498:	3201      	adds	r2, #1
	pxNewListItem->pxNext = pxIndex;
9000e49a:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
9000e49c:	608c      	str	r4, [r1, #8]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
9000e49e:	689c      	ldr	r4, [r3, #8]
9000e4a0:	6061      	str	r1, [r4, #4]
	pxIndex->pxPrevious = pxNewListItem;
9000e4a2:	6099      	str	r1, [r3, #8]
}
9000e4a4:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxNewListItem->pxContainer = pxList;
9000e4a8:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
9000e4aa:	6002      	str	r2, [r0, #0]
}
9000e4ac:	4770      	bx	lr
9000e4ae:	bf00      	nop

9000e4b0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
9000e4b0:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
9000e4b2:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
9000e4b4:	1c6b      	adds	r3, r5, #1
9000e4b6:	d010      	beq.n	9000e4da <vListInsert+0x2a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
9000e4b8:	f100 0308 	add.w	r3, r0, #8
9000e4bc:	461c      	mov	r4, r3
9000e4be:	685b      	ldr	r3, [r3, #4]
9000e4c0:	681a      	ldr	r2, [r3, #0]
9000e4c2:	42aa      	cmp	r2, r5
9000e4c4:	d9fa      	bls.n	9000e4bc <vListInsert+0xc>

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
9000e4c6:	6802      	ldr	r2, [r0, #0]
	pxNewListItem->pxNext = pxIterator->pxNext;
9000e4c8:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )++;
9000e4ca:	3201      	adds	r2, #1
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
9000e4cc:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
9000e4ce:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
9000e4d0:	6061      	str	r1, [r4, #4]
	pxNewListItem->pxContainer = pxList;
9000e4d2:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
9000e4d4:	6002      	str	r2, [r0, #0]
}
9000e4d6:	bc30      	pop	{r4, r5}
9000e4d8:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
9000e4da:	6904      	ldr	r4, [r0, #16]
	pxNewListItem->pxNext = pxIterator->pxNext;
9000e4dc:	6863      	ldr	r3, [r4, #4]
9000e4de:	e7f2      	b.n	9000e4c6 <vListInsert+0x16>

9000e4e0 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
9000e4e0:	6903      	ldr	r3, [r0, #16]
{
9000e4e2:	b410      	push	{r4}

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
9000e4e4:	685c      	ldr	r4, [r3, #4]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
9000e4e6:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
	if( pxList->pxIndex == pxItemToRemove )
9000e4ea:	4284      	cmp	r4, r0

	pxItemToRemove->pxContainer = NULL;
	( pxList->uxNumberOfItems )--;

	return pxList->uxNumberOfItems;
}
9000e4ec:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
9000e4f0:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
9000e4f2:	6051      	str	r1, [r2, #4]
	pxItemToRemove->pxContainer = NULL;
9000e4f4:	f04f 0100 	mov.w	r1, #0
		pxList->pxIndex = pxItemToRemove->pxPrevious;
9000e4f8:	bf08      	it	eq
9000e4fa:	605a      	streq	r2, [r3, #4]
	( pxList->uxNumberOfItems )--;
9000e4fc:	681a      	ldr	r2, [r3, #0]
	pxItemToRemove->pxContainer = NULL;
9000e4fe:	6101      	str	r1, [r0, #16]
	( pxList->uxNumberOfItems )--;
9000e500:	3a01      	subs	r2, #1
9000e502:	601a      	str	r2, [r3, #0]
	return pxList->uxNumberOfItems;
9000e504:	6818      	ldr	r0, [r3, #0]
}
9000e506:	4770      	bx	lr

9000e508 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
9000e508:	4808      	ldr	r0, [pc, #32]	; (9000e52c <prvPortStartFirstTask+0x24>)
9000e50a:	6800      	ldr	r0, [r0, #0]
9000e50c:	6800      	ldr	r0, [r0, #0]
9000e50e:	f380 8808 	msr	MSP, r0
9000e512:	f04f 0000 	mov.w	r0, #0
9000e516:	f380 8814 	msr	CONTROL, r0
9000e51a:	b662      	cpsie	i
9000e51c:	b661      	cpsie	f
9000e51e:	f3bf 8f4f 	dsb	sy
9000e522:	f3bf 8f6f 	isb	sy
9000e526:	df00      	svc	0
9000e528:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
9000e52a:	0000      	.short	0x0000
9000e52c:	e000ed08 	.word	0xe000ed08

9000e530 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
9000e530:	f8df 000c 	ldr.w	r0, [pc, #12]	; 9000e540 <vPortEnableVFP+0x10>
9000e534:	6801      	ldr	r1, [r0, #0]
9000e536:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
9000e53a:	6001      	str	r1, [r0, #0]
9000e53c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
9000e53e:	0000      	.short	0x0000
9000e540:	e000ed88 	.word	0xe000ed88

9000e544 <prvTaskExitError>:
	configASSERT( uxCriticalNesting == ~0UL );
9000e544:	4b0e      	ldr	r3, [pc, #56]	; (9000e580 <prvTaskExitError+0x3c>)
{
9000e546:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
9000e548:	2200      	movs	r2, #0
	configASSERT( uxCriticalNesting == ~0UL );
9000e54a:	681b      	ldr	r3, [r3, #0]
volatile uint32_t ulDummy = 0;
9000e54c:	9201      	str	r2, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
9000e54e:	3301      	adds	r3, #1
9000e550:	d008      	beq.n	9000e564 <prvTaskExitError+0x20>
9000e552:	f04f 0350 	mov.w	r3, #80	; 0x50
9000e556:	f383 8811 	msr	BASEPRI, r3
9000e55a:	f3bf 8f6f 	isb	sy
9000e55e:	f3bf 8f4f 	dsb	sy
9000e562:	e7fe      	b.n	9000e562 <prvTaskExitError+0x1e>
9000e564:	f04f 0350 	mov.w	r3, #80	; 0x50
9000e568:	f383 8811 	msr	BASEPRI, r3
9000e56c:	f3bf 8f6f 	isb	sy
9000e570:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
9000e574:	9b01      	ldr	r3, [sp, #4]
9000e576:	2b00      	cmp	r3, #0
9000e578:	d0fc      	beq.n	9000e574 <prvTaskExitError+0x30>
}
9000e57a:	b002      	add	sp, #8
9000e57c:	4770      	bx	lr
9000e57e:	bf00      	nop
9000e580:	24000078 	.word	0x24000078

9000e584 <pxPortInitialiseStack>:
{
9000e584:	4603      	mov	r3, r0
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
9000e586:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
9000e58a:	4809      	ldr	r0, [pc, #36]	; (9000e5b0 <pxPortInitialiseStack+0x2c>)
{
9000e58c:	b410      	push	{r4}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
9000e58e:	f04f 7480 	mov.w	r4, #16777216	; 0x1000000
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
9000e592:	f843 0c0c 	str.w	r0, [r3, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
9000e596:	f843 2c20 	str.w	r2, [r3, #-32]
}
9000e59a:	f1a3 0044 	sub.w	r0, r3, #68	; 0x44
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
9000e59e:	e943 1402 	strd	r1, r4, [r3, #-8]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
9000e5a2:	f06f 0102 	mvn.w	r1, #2
}
9000e5a6:	f85d 4b04 	ldr.w	r4, [sp], #4
	*pxTopOfStack = portINITIAL_EXC_RETURN;
9000e5aa:	f843 1c24 	str.w	r1, [r3, #-36]
}
9000e5ae:	4770      	bx	lr
9000e5b0:	9000e545 	.word	0x9000e545
	...

9000e5c0 <SVC_Handler>:
	__asm volatile (
9000e5c0:	4b07      	ldr	r3, [pc, #28]	; (9000e5e0 <pxCurrentTCBConst2>)
9000e5c2:	6819      	ldr	r1, [r3, #0]
9000e5c4:	6808      	ldr	r0, [r1, #0]
9000e5c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9000e5ca:	f380 8809 	msr	PSP, r0
9000e5ce:	f3bf 8f6f 	isb	sy
9000e5d2:	f04f 0000 	mov.w	r0, #0
9000e5d6:	f380 8811 	msr	BASEPRI, r0
9000e5da:	4770      	bx	lr
9000e5dc:	f3af 8000 	nop.w

9000e5e0 <pxCurrentTCBConst2>:
9000e5e0:	240215e0 	.word	0x240215e0

9000e5e4 <vPortEnterCritical>:
9000e5e4:	f04f 0350 	mov.w	r3, #80	; 0x50
9000e5e8:	f383 8811 	msr	BASEPRI, r3
9000e5ec:	f3bf 8f6f 	isb	sy
9000e5f0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
9000e5f4:	4a0b      	ldr	r2, [pc, #44]	; (9000e624 <vPortEnterCritical+0x40>)
9000e5f6:	6813      	ldr	r3, [r2, #0]
9000e5f8:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
9000e5fa:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
9000e5fc:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
9000e5fe:	d000      	beq.n	9000e602 <vPortEnterCritical+0x1e>
}
9000e600:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
9000e602:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
9000e606:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
9000e60a:	b2db      	uxtb	r3, r3
9000e60c:	2b00      	cmp	r3, #0
9000e60e:	d0f7      	beq.n	9000e600 <vPortEnterCritical+0x1c>
9000e610:	f04f 0350 	mov.w	r3, #80	; 0x50
9000e614:	f383 8811 	msr	BASEPRI, r3
9000e618:	f3bf 8f6f 	isb	sy
9000e61c:	f3bf 8f4f 	dsb	sy
9000e620:	e7fe      	b.n	9000e620 <vPortEnterCritical+0x3c>
9000e622:	bf00      	nop
9000e624:	24000078 	.word	0x24000078

9000e628 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
9000e628:	4a08      	ldr	r2, [pc, #32]	; (9000e64c <vPortExitCritical+0x24>)
9000e62a:	6813      	ldr	r3, [r2, #0]
9000e62c:	b943      	cbnz	r3, 9000e640 <vPortExitCritical+0x18>
9000e62e:	f04f 0350 	mov.w	r3, #80	; 0x50
9000e632:	f383 8811 	msr	BASEPRI, r3
9000e636:	f3bf 8f6f 	isb	sy
9000e63a:	f3bf 8f4f 	dsb	sy
9000e63e:	e7fe      	b.n	9000e63e <vPortExitCritical+0x16>
	uxCriticalNesting--;
9000e640:	3b01      	subs	r3, #1
9000e642:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
9000e644:	b90b      	cbnz	r3, 9000e64a <vPortExitCritical+0x22>
	__asm volatile
9000e646:	f383 8811 	msr	BASEPRI, r3
}
9000e64a:	4770      	bx	lr
9000e64c:	24000078 	.word	0x24000078

9000e650 <PendSV_Handler>:
	__asm volatile
9000e650:	f3ef 8009 	mrs	r0, PSP
9000e654:	f3bf 8f6f 	isb	sy
9000e658:	4b15      	ldr	r3, [pc, #84]	; (9000e6b0 <pxCurrentTCBConst>)
9000e65a:	681a      	ldr	r2, [r3, #0]
9000e65c:	f01e 0f10 	tst.w	lr, #16
9000e660:	bf08      	it	eq
9000e662:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
9000e666:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9000e66a:	6010      	str	r0, [r2, #0]
9000e66c:	e92d 0009 	stmdb	sp!, {r0, r3}
9000e670:	f04f 0050 	mov.w	r0, #80	; 0x50
9000e674:	f380 8811 	msr	BASEPRI, r0
9000e678:	f3bf 8f4f 	dsb	sy
9000e67c:	f3bf 8f6f 	isb	sy
9000e680:	f001 fe80 	bl	90010384 <vTaskSwitchContext>
9000e684:	f04f 0000 	mov.w	r0, #0
9000e688:	f380 8811 	msr	BASEPRI, r0
9000e68c:	bc09      	pop	{r0, r3}
9000e68e:	6819      	ldr	r1, [r3, #0]
9000e690:	6808      	ldr	r0, [r1, #0]
9000e692:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9000e696:	f01e 0f10 	tst.w	lr, #16
9000e69a:	bf08      	it	eq
9000e69c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
9000e6a0:	f380 8809 	msr	PSP, r0
9000e6a4:	f3bf 8f6f 	isb	sy
9000e6a8:	4770      	bx	lr
9000e6aa:	bf00      	nop
9000e6ac:	f3af 8000 	nop.w

9000e6b0 <pxCurrentTCBConst>:
9000e6b0:	240215e0 	.word	0x240215e0

9000e6b4 <xPortSysTickHandler>:
{
9000e6b4:	b508      	push	{r3, lr}
	__asm volatile
9000e6b6:	f04f 0350 	mov.w	r3, #80	; 0x50
9000e6ba:	f383 8811 	msr	BASEPRI, r3
9000e6be:	f3bf 8f6f 	isb	sy
9000e6c2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
9000e6c6:	f001 fe37 	bl	90010338 <xTaskIncrementTick>
9000e6ca:	b128      	cbz	r0, 9000e6d8 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
9000e6cc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
9000e6d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
9000e6d4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
	__asm volatile
9000e6d8:	2300      	movs	r3, #0
9000e6da:	f383 8811 	msr	BASEPRI, r3
}
9000e6de:	bd08      	pop	{r3, pc}

9000e6e0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
9000e6e0:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
9000e6e4:	2300      	movs	r3, #0
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
9000e6e6:	4806      	ldr	r0, [pc, #24]	; (9000e700 <vPortSetupTimerInterrupt+0x20>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
9000e6e8:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
9000e6ea:	4906      	ldr	r1, [pc, #24]	; (9000e704 <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
9000e6ec:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
9000e6ee:	6803      	ldr	r3, [r0, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
9000e6f0:	2007      	movs	r0, #7
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
9000e6f2:	fba1 1303 	umull	r1, r3, r1, r3
9000e6f6:	099b      	lsrs	r3, r3, #6
9000e6f8:	3b01      	subs	r3, #1
9000e6fa:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
9000e6fc:	6110      	str	r0, [r2, #16]
}
9000e6fe:	4770      	bx	lr
9000e700:	24000068 	.word	0x24000068
9000e704:	10624dd3 	.word	0x10624dd3

9000e708 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
9000e708:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
9000e70c:	4a48      	ldr	r2, [pc, #288]	; (9000e830 <xPortStartScheduler+0x128>)
9000e70e:	f8d3 1d00 	ldr.w	r1, [r3, #3328]	; 0xd00
9000e712:	4291      	cmp	r1, r2
9000e714:	d041      	beq.n	9000e79a <xPortStartScheduler+0x92>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
9000e716:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
9000e71a:	4b46      	ldr	r3, [pc, #280]	; (9000e834 <xPortStartScheduler+0x12c>)
9000e71c:	429a      	cmp	r2, r3
9000e71e:	d033      	beq.n	9000e788 <xPortStartScheduler+0x80>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
9000e720:	4b45      	ldr	r3, [pc, #276]	; (9000e838 <xPortStartScheduler+0x130>)
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
9000e722:	20ff      	movs	r0, #255	; 0xff
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
9000e724:	4945      	ldr	r1, [pc, #276]	; (9000e83c <xPortStartScheduler+0x134>)
{
9000e726:	b570      	push	{r4, r5, r6, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
9000e728:	781a      	ldrb	r2, [r3, #0]
{
9000e72a:	b084      	sub	sp, #16
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
9000e72c:	4c44      	ldr	r4, [pc, #272]	; (9000e840 <xPortStartScheduler+0x138>)
		ulOriginalPriority = *pucFirstUserPriorityRegister;
9000e72e:	b2d2      	uxtb	r2, r2
9000e730:	9202      	str	r2, [sp, #8]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
9000e732:	2207      	movs	r2, #7
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
9000e734:	7018      	strb	r0, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
9000e736:	781b      	ldrb	r3, [r3, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
9000e738:	6022      	str	r2, [r4, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
9000e73a:	b2db      	uxtb	r3, r3
9000e73c:	f88d 3007 	strb.w	r3, [sp, #7]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
9000e740:	f89d 3007 	ldrb.w	r3, [sp, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
9000e744:	f89d 2007 	ldrb.w	r2, [sp, #7]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
9000e748:	f003 0350 	and.w	r3, r3, #80	; 0x50
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
9000e74c:	0610      	lsls	r0, r2, #24
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
9000e74e:	700b      	strb	r3, [r1, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
9000e750:	d511      	bpl.n	9000e776 <xPortStartScheduler+0x6e>
9000e752:	2206      	movs	r2, #6
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
9000e754:	f89d 3007 	ldrb.w	r3, [sp, #7]
9000e758:	4610      	mov	r0, r2
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
9000e75a:	3a01      	subs	r2, #1
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
9000e75c:	005b      	lsls	r3, r3, #1
9000e75e:	b2db      	uxtb	r3, r3
9000e760:	f88d 3007 	strb.w	r3, [sp, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
9000e764:	f89d 1007 	ldrb.w	r1, [sp, #7]
9000e768:	0609      	lsls	r1, r1, #24
9000e76a:	d4f3      	bmi.n	9000e754 <xPortStartScheduler+0x4c>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
9000e76c:	2803      	cmp	r0, #3
9000e76e:	6020      	str	r0, [r4, #0]
9000e770:	f88d 3007 	strb.w	r3, [sp, #7]
9000e774:	d01a      	beq.n	9000e7ac <xPortStartScheduler+0xa4>
	__asm volatile
9000e776:	f04f 0350 	mov.w	r3, #80	; 0x50
9000e77a:	f383 8811 	msr	BASEPRI, r3
9000e77e:	f3bf 8f6f 	isb	sy
9000e782:	f3bf 8f4f 	dsb	sy
9000e786:	e7fe      	b.n	9000e786 <xPortStartScheduler+0x7e>
9000e788:	f04f 0350 	mov.w	r3, #80	; 0x50
9000e78c:	f383 8811 	msr	BASEPRI, r3
9000e790:	f3bf 8f6f 	isb	sy
9000e794:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
9000e798:	e7fe      	b.n	9000e798 <xPortStartScheduler+0x90>
9000e79a:	f04f 0350 	mov.w	r3, #80	; 0x50
9000e79e:	f383 8811 	msr	BASEPRI, r3
9000e7a2:	f3bf 8f6f 	isb	sy
9000e7a6:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
9000e7aa:	e7fe      	b.n	9000e7aa <xPortStartScheduler+0xa2>
		*pucFirstUserPriorityRegister = ulOriginalPriority;
9000e7ac:	9b02      	ldr	r3, [sp, #8]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
9000e7ae:	f04f 25e0 	mov.w	r5, #3758153728	; 0xe000e000
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
9000e7b2:	f44f 7140 	mov.w	r1, #768	; 0x300
		*pucFirstUserPriorityRegister = ulOriginalPriority;
9000e7b6:	4a20      	ldr	r2, [pc, #128]	; (9000e838 <xPortStartScheduler+0x130>)
9000e7b8:	b2db      	uxtb	r3, r3
	uxCriticalNesting = 0;
9000e7ba:	4e22      	ldr	r6, [pc, #136]	; (9000e844 <xPortStartScheduler+0x13c>)
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
9000e7bc:	6021      	str	r1, [r4, #0]
	uxCriticalNesting = 0;
9000e7be:	2400      	movs	r4, #0
		*pucFirstUserPriorityRegister = ulOriginalPriority;
9000e7c0:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
9000e7c2:	f8d5 3d20 	ldr.w	r3, [r5, #3360]	; 0xd20
9000e7c6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
9000e7ca:	f8c5 3d20 	str.w	r3, [r5, #3360]	; 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
9000e7ce:	f8d5 3d20 	ldr.w	r3, [r5, #3360]	; 0xd20
9000e7d2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
9000e7d6:	f8c5 3d20 	str.w	r3, [r5, #3360]	; 0xd20
	vPortSetupTimerInterrupt();
9000e7da:	f7ff ff81 	bl	9000e6e0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
9000e7de:	6034      	str	r4, [r6, #0]
	vPortEnableVFP();
9000e7e0:	f7ff fea6 	bl	9000e530 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
9000e7e4:	f8d5 3f34 	ldr.w	r3, [r5, #3892]	; 0xf34
9000e7e8:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
9000e7ec:	f8c5 3f34 	str.w	r3, [r5, #3892]	; 0xf34
	prvPortStartFirstTask();
9000e7f0:	f7ff fe8a 	bl	9000e508 <prvPortStartFirstTask>
	vTaskSwitchContext();
9000e7f4:	f001 fdc6 	bl	90010384 <vTaskSwitchContext>
	configASSERT( uxCriticalNesting == ~0UL );
9000e7f8:	6833      	ldr	r3, [r6, #0]
volatile uint32_t ulDummy = 0;
9000e7fa:	9403      	str	r4, [sp, #12]
	configASSERT( uxCriticalNesting == ~0UL );
9000e7fc:	3301      	adds	r3, #1
9000e7fe:	d008      	beq.n	9000e812 <xPortStartScheduler+0x10a>
9000e800:	f04f 0350 	mov.w	r3, #80	; 0x50
9000e804:	f383 8811 	msr	BASEPRI, r3
9000e808:	f3bf 8f6f 	isb	sy
9000e80c:	f3bf 8f4f 	dsb	sy
9000e810:	e7fe      	b.n	9000e810 <xPortStartScheduler+0x108>
9000e812:	f04f 0350 	mov.w	r3, #80	; 0x50
9000e816:	f383 8811 	msr	BASEPRI, r3
9000e81a:	f3bf 8f6f 	isb	sy
9000e81e:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
9000e822:	9b03      	ldr	r3, [sp, #12]
9000e824:	2b00      	cmp	r3, #0
9000e826:	d0fc      	beq.n	9000e822 <xPortStartScheduler+0x11a>
}
9000e828:	2000      	movs	r0, #0
9000e82a:	b004      	add	sp, #16
9000e82c:	bd70      	pop	{r4, r5, r6, pc}
9000e82e:	bf00      	nop
9000e830:	410fc271 	.word	0x410fc271
9000e834:	410fc270 	.word	0x410fc270
9000e838:	e000e400 	.word	0xe000e400
9000e83c:	24021598 	.word	0x24021598
9000e840:	2402159c 	.word	0x2402159c
9000e844:	24000078 	.word	0x24000078

9000e848 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
9000e848:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
9000e84c:	2b0f      	cmp	r3, #15
9000e84e:	d90e      	bls.n	9000e86e <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
9000e850:	4911      	ldr	r1, [pc, #68]	; (9000e898 <vPortValidateInterruptPriority+0x50>)
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
9000e852:	4a12      	ldr	r2, [pc, #72]	; (9000e89c <vPortValidateInterruptPriority+0x54>)
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
9000e854:	5c5b      	ldrb	r3, [r3, r1]
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
9000e856:	7812      	ldrb	r2, [r2, #0]
9000e858:	429a      	cmp	r2, r3
9000e85a:	d908      	bls.n	9000e86e <vPortValidateInterruptPriority+0x26>
9000e85c:	f04f 0350 	mov.w	r3, #80	; 0x50
9000e860:	f383 8811 	msr	BASEPRI, r3
9000e864:	f3bf 8f6f 	isb	sy
9000e868:	f3bf 8f4f 	dsb	sy
9000e86c:	e7fe      	b.n	9000e86c <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
9000e86e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
9000e872:	4a0b      	ldr	r2, [pc, #44]	; (9000e8a0 <vPortValidateInterruptPriority+0x58>)
9000e874:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
9000e878:	6812      	ldr	r2, [r2, #0]
9000e87a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
9000e87e:	4293      	cmp	r3, r2
9000e880:	d908      	bls.n	9000e894 <vPortValidateInterruptPriority+0x4c>
9000e882:	f04f 0350 	mov.w	r3, #80	; 0x50
9000e886:	f383 8811 	msr	BASEPRI, r3
9000e88a:	f3bf 8f6f 	isb	sy
9000e88e:	f3bf 8f4f 	dsb	sy
9000e892:	e7fe      	b.n	9000e892 <vPortValidateInterruptPriority+0x4a>
	}
9000e894:	4770      	bx	lr
9000e896:	bf00      	nop
9000e898:	e000e3f0 	.word	0xe000e3f0
9000e89c:	24021598 	.word	0x24021598
9000e8a0:	2402159c 	.word	0x2402159c

9000e8a4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
9000e8a4:	b570      	push	{r4, r5, r6, lr}
9000e8a6:	4615      	mov	r5, r2

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
9000e8a8:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
9000e8aa:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
9000e8ac:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
9000e8ae:	b92a      	cbnz	r2, 9000e8bc <prvCopyDataToQueue+0x18>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
9000e8b0:	6805      	ldr	r5, [r0, #0]
9000e8b2:	b365      	cbz	r5, 9000e90e <prvCopyDataToQueue+0x6a>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
9000e8b4:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
9000e8b6:	4610      	mov	r0, r2
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
9000e8b8:	63a6      	str	r6, [r4, #56]	; 0x38

	return xReturn;
}
9000e8ba:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
9000e8bc:	b97d      	cbnz	r5, 9000e8de <prvCopyDataToQueue+0x3a>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
9000e8be:	6840      	ldr	r0, [r0, #4]
9000e8c0:	f015 ffe8 	bl	90024894 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
9000e8c4:	6863      	ldr	r3, [r4, #4]
9000e8c6:	6c22      	ldr	r2, [r4, #64]	; 0x40
9000e8c8:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
9000e8ca:	68a2      	ldr	r2, [r4, #8]
9000e8cc:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
9000e8ce:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
9000e8d0:	d319      	bcc.n	9000e906 <prvCopyDataToQueue+0x62>
			pxQueue->pcWriteTo = pxQueue->pcHead;
9000e8d2:	6822      	ldr	r2, [r4, #0]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
9000e8d4:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
9000e8d6:	4628      	mov	r0, r5
			pxQueue->pcWriteTo = pxQueue->pcHead;
9000e8d8:	6062      	str	r2, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
9000e8da:	63a6      	str	r6, [r4, #56]	; 0x38
}
9000e8dc:	bd70      	pop	{r4, r5, r6, pc}
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
9000e8de:	68c0      	ldr	r0, [r0, #12]
9000e8e0:	f015 ffd8 	bl	90024894 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
9000e8e4:	6c22      	ldr	r2, [r4, #64]	; 0x40
9000e8e6:	68e3      	ldr	r3, [r4, #12]
9000e8e8:	4251      	negs	r1, r2
9000e8ea:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
9000e8ec:	6822      	ldr	r2, [r4, #0]
9000e8ee:	4293      	cmp	r3, r2
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
9000e8f0:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
9000e8f2:	d202      	bcs.n	9000e8fa <prvCopyDataToQueue+0x56>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
9000e8f4:	68a3      	ldr	r3, [r4, #8]
9000e8f6:	440b      	add	r3, r1
9000e8f8:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
9000e8fa:	2d02      	cmp	r5, #2
9000e8fc:	d00d      	beq.n	9000e91a <prvCopyDataToQueue+0x76>
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
9000e8fe:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
9000e900:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
9000e902:	63a6      	str	r6, [r4, #56]	; 0x38
}
9000e904:	bd70      	pop	{r4, r5, r6, pc}
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
9000e906:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
9000e908:	4628      	mov	r0, r5
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
9000e90a:	63a6      	str	r6, [r4, #56]	; 0x38
}
9000e90c:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
9000e90e:	6880      	ldr	r0, [r0, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
9000e910:	3601      	adds	r6, #1
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
9000e912:	f002 f827 	bl	90010964 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
9000e916:	60a5      	str	r5, [r4, #8]
9000e918:	e7ce      	b.n	9000e8b8 <prvCopyDataToQueue+0x14>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
9000e91a:	2e01      	cmp	r6, #1
BaseType_t xReturn = pdFALSE;
9000e91c:	f04f 0000 	mov.w	r0, #0
9000e920:	bf38      	it	cc
9000e922:	2601      	movcc	r6, #1
9000e924:	e7c8      	b.n	9000e8b8 <prvCopyDataToQueue+0x14>
9000e926:	bf00      	nop

9000e928 <xQueueGenericCreateStatic>:
	{
9000e928:	b530      	push	{r4, r5, lr}
9000e92a:	b083      	sub	sp, #12
9000e92c:	f89d 4018 	ldrb.w	r4, [sp, #24]
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
9000e930:	b940      	cbnz	r0, 9000e944 <xQueueGenericCreateStatic+0x1c>
9000e932:	f04f 0350 	mov.w	r3, #80	; 0x50
9000e936:	f383 8811 	msr	BASEPRI, r3
9000e93a:	f3bf 8f6f 	isb	sy
9000e93e:	f3bf 8f4f 	dsb	sy
9000e942:	e7fe      	b.n	9000e942 <xQueueGenericCreateStatic+0x1a>
		configASSERT( pxStaticQueue != NULL );
9000e944:	461d      	mov	r5, r3
9000e946:	b153      	cbz	r3, 9000e95e <xQueueGenericCreateStatic+0x36>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
9000e948:	b30a      	cbz	r2, 9000e98e <xQueueGenericCreateStatic+0x66>
9000e94a:	b989      	cbnz	r1, 9000e970 <xQueueGenericCreateStatic+0x48>
9000e94c:	f04f 0350 	mov.w	r3, #80	; 0x50
9000e950:	f383 8811 	msr	BASEPRI, r3
9000e954:	f3bf 8f6f 	isb	sy
9000e958:	f3bf 8f4f 	dsb	sy
9000e95c:	e7fe      	b.n	9000e95c <xQueueGenericCreateStatic+0x34>
9000e95e:	f04f 0350 	mov.w	r3, #80	; 0x50
9000e962:	f383 8811 	msr	BASEPRI, r3
9000e966:	f3bf 8f6f 	isb	sy
9000e96a:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
9000e96e:	e7fe      	b.n	9000e96e <xQueueGenericCreateStatic+0x46>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
9000e970:	b16a      	cbz	r2, 9000e98e <xQueueGenericCreateStatic+0x66>
			volatile size_t xSize = sizeof( StaticQueue_t );
9000e972:	2350      	movs	r3, #80	; 0x50
9000e974:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
9000e976:	9b01      	ldr	r3, [sp, #4]
9000e978:	2b50      	cmp	r3, #80	; 0x50
9000e97a:	d013      	beq.n	9000e9a4 <xQueueGenericCreateStatic+0x7c>
9000e97c:	f04f 0350 	mov.w	r3, #80	; 0x50
9000e980:	f383 8811 	msr	BASEPRI, r3
9000e984:	f3bf 8f6f 	isb	sy
9000e988:	f3bf 8f4f 	dsb	sy
9000e98c:	e7fe      	b.n	9000e98c <xQueueGenericCreateStatic+0x64>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
9000e98e:	2900      	cmp	r1, #0
9000e990:	d0ef      	beq.n	9000e972 <xQueueGenericCreateStatic+0x4a>
9000e992:	f04f 0350 	mov.w	r3, #80	; 0x50
9000e996:	f383 8811 	msr	BASEPRI, r3
9000e99a:	f3bf 8f6f 	isb	sy
9000e99e:	f3bf 8f4f 	dsb	sy
9000e9a2:	e7fe      	b.n	9000e9a2 <xQueueGenericCreateStatic+0x7a>
	if( uxItemSize == ( UBaseType_t ) 0 )
9000e9a4:	2900      	cmp	r1, #0
9000e9a6:	bf08      	it	eq
9000e9a8:	462a      	moveq	r2, r5
	pxNewQueue->uxLength = uxQueueLength;
9000e9aa:	63e8      	str	r0, [r5, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
9000e9ac:	6429      	str	r1, [r5, #64]	; 0x40
9000e9ae:	602a      	str	r2, [r5, #0]
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
9000e9b0:	9a01      	ldr	r2, [sp, #4]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
9000e9b2:	2201      	movs	r2, #1
9000e9b4:	f885 2046 	strb.w	r2, [r5, #70]	; 0x46
	taskENTER_CRITICAL();
9000e9b8:	f7ff fe14 	bl	9000e5e4 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000e9bc:	6829      	ldr	r1, [r5, #0]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
9000e9be:	2300      	movs	r3, #0
		pxQueue->pcWriteTo = pxQueue->pcHead;
9000e9c0:	6069      	str	r1, [r5, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
9000e9c2:	63ab      	str	r3, [r5, #56]	; 0x38
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000e9c4:	e9d5 200f 	ldrd	r2, r0, [r5, #60]	; 0x3c
9000e9c8:	fb00 f202 	mul.w	r2, r0, r2
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000e9cc:	1a10      	subs	r0, r2, r0
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000e9ce:	440a      	add	r2, r1
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000e9d0:	4401      	add	r1, r0
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000e9d2:	60aa      	str	r2, [r5, #8]
		pxQueue->cRxLock = queueUNLOCKED;
9000e9d4:	22ff      	movs	r2, #255	; 0xff
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
9000e9d6:	f105 0010 	add.w	r0, r5, #16
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000e9da:	60e9      	str	r1, [r5, #12]
		pxQueue->cRxLock = queueUNLOCKED;
9000e9dc:	f885 2044 	strb.w	r2, [r5, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
9000e9e0:	f885 2045 	strb.w	r2, [r5, #69]	; 0x45
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
9000e9e4:	f7ff fd44 	bl	9000e470 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
9000e9e8:	f105 0024 	add.w	r0, r5, #36	; 0x24
9000e9ec:	f7ff fd40 	bl	9000e470 <vListInitialise>
	taskEXIT_CRITICAL();
9000e9f0:	f7ff fe1a 	bl	9000e628 <vPortExitCritical>
	}
9000e9f4:	4628      	mov	r0, r5
		pxNewQueue->ucQueueType = ucQueueType;
9000e9f6:	f885 404c 	strb.w	r4, [r5, #76]	; 0x4c
	}
9000e9fa:	b003      	add	sp, #12
9000e9fc:	bd30      	pop	{r4, r5, pc}
9000e9fe:	bf00      	nop

9000ea00 <xQueueGenericCreate>:
	{
9000ea00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
9000ea02:	b940      	cbnz	r0, 9000ea16 <xQueueGenericCreate+0x16>
9000ea04:	f04f 0350 	mov.w	r3, #80	; 0x50
9000ea08:	f383 8811 	msr	BASEPRI, r3
9000ea0c:	f3bf 8f6f 	isb	sy
9000ea10:	f3bf 8f4f 	dsb	sy
9000ea14:	e7fe      	b.n	9000ea14 <xQueueGenericCreate+0x14>
9000ea16:	4605      	mov	r5, r0
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
9000ea18:	fb01 f000 	mul.w	r0, r1, r0
9000ea1c:	460e      	mov	r6, r1
9000ea1e:	4617      	mov	r7, r2
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
9000ea20:	3050      	adds	r0, #80	; 0x50
9000ea22:	f7ff fc03 	bl	9000e22c <pvPortMalloc>
		if( pxNewQueue != NULL )
9000ea26:	4604      	mov	r4, r0
9000ea28:	b340      	cbz	r0, 9000ea7c <xQueueGenericCreate+0x7c>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
9000ea2a:	2300      	movs	r3, #0
9000ea2c:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
9000ea30:	b336      	cbz	r6, 9000ea80 <xQueueGenericCreate+0x80>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000ea32:	f100 0350 	add.w	r3, r0, #80	; 0x50
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
9000ea36:	6023      	str	r3, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
9000ea38:	e9c4 560f 	strd	r5, r6, [r4, #60]	; 0x3c
	taskENTER_CRITICAL();
9000ea3c:	f7ff fdd2 	bl	9000e5e4 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000ea40:	6822      	ldr	r2, [r4, #0]
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
9000ea42:	f104 0010 	add.w	r0, r4, #16
		pxQueue->pcWriteTo = pxQueue->pcHead;
9000ea46:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000ea48:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	; 0x3c
9000ea4c:	fb01 f303 	mul.w	r3, r1, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000ea50:	1a59      	subs	r1, r3, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000ea52:	4413      	add	r3, r2
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000ea54:	440a      	add	r2, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000ea56:	60a3      	str	r3, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
9000ea58:	2100      	movs	r1, #0
		pxQueue->cRxLock = queueUNLOCKED;
9000ea5a:	23ff      	movs	r3, #255	; 0xff
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000ea5c:	60e2      	str	r2, [r4, #12]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
9000ea5e:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
9000ea60:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
9000ea64:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
9000ea68:	f7ff fd02 	bl	9000e470 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
9000ea6c:	f104 0024 	add.w	r0, r4, #36	; 0x24
9000ea70:	f7ff fcfe 	bl	9000e470 <vListInitialise>
	taskEXIT_CRITICAL();
9000ea74:	f7ff fdd8 	bl	9000e628 <vPortExitCritical>
		pxNewQueue->ucQueueType = ucQueueType;
9000ea78:	f884 704c 	strb.w	r7, [r4, #76]	; 0x4c
	}
9000ea7c:	4620      	mov	r0, r4
9000ea7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
9000ea80:	4603      	mov	r3, r0
9000ea82:	e7d8      	b.n	9000ea36 <xQueueGenericCreate+0x36>

9000ea84 <xQueueCreateCountingSemaphoreStatic>:
		configASSERT( uxMaxCount != 0 );
9000ea84:	b940      	cbnz	r0, 9000ea98 <xQueueCreateCountingSemaphoreStatic+0x14>
9000ea86:	f04f 0350 	mov.w	r3, #80	; 0x50
9000ea8a:	f383 8811 	msr	BASEPRI, r3
9000ea8e:	f3bf 8f6f 	isb	sy
9000ea92:	f3bf 8f4f 	dsb	sy
9000ea96:	e7fe      	b.n	9000ea96 <xQueueCreateCountingSemaphoreStatic+0x12>
		configASSERT( uxInitialCount <= uxMaxCount );
9000ea98:	4288      	cmp	r0, r1
9000ea9a:	d208      	bcs.n	9000eaae <xQueueCreateCountingSemaphoreStatic+0x2a>
9000ea9c:	f04f 0350 	mov.w	r3, #80	; 0x50
9000eaa0:	f383 8811 	msr	BASEPRI, r3
9000eaa4:	f3bf 8f6f 	isb	sy
9000eaa8:	f3bf 8f4f 	dsb	sy
9000eaac:	e7fe      	b.n	9000eaac <xQueueCreateCountingSemaphoreStatic+0x28>
	{
9000eaae:	b530      	push	{r4, r5, lr}
9000eab0:	4615      	mov	r5, r2
9000eab2:	b085      	sub	sp, #20
		configASSERT( pxStaticQueue != NULL );
9000eab4:	2a00      	cmp	r2, #0
9000eab6:	d03d      	beq.n	9000eb34 <xQueueCreateCountingSemaphoreStatic+0xb0>
			volatile size_t xSize = sizeof( StaticQueue_t );
9000eab8:	2350      	movs	r3, #80	; 0x50
9000eaba:	9303      	str	r3, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
9000eabc:	9b03      	ldr	r3, [sp, #12]
9000eabe:	2b50      	cmp	r3, #80	; 0x50
9000eac0:	d008      	beq.n	9000ead4 <xQueueCreateCountingSemaphoreStatic+0x50>
9000eac2:	f04f 0350 	mov.w	r3, #80	; 0x50
9000eac6:	f383 8811 	msr	BASEPRI, r3
9000eaca:	f3bf 8f6f 	isb	sy
9000eace:	f3bf 8f4f 	dsb	sy
9000ead2:	e7fe      	b.n	9000ead2 <xQueueCreateCountingSemaphoreStatic+0x4e>
	pxNewQueue->uxItemSize = uxItemSize;
9000ead4:	2400      	movs	r4, #0
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
9000ead6:	2301      	movs	r3, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
9000ead8:	602a      	str	r2, [r5, #0]
	pxNewQueue->uxLength = uxQueueLength;
9000eada:	63d0      	str	r0, [r2, #60]	; 0x3c
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
9000eadc:	f882 3046 	strb.w	r3, [r2, #70]	; 0x46
	pxNewQueue->uxItemSize = uxItemSize;
9000eae0:	6414      	str	r4, [r2, #64]	; 0x40
9000eae2:	9101      	str	r1, [sp, #4]
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
9000eae4:	9b03      	ldr	r3, [sp, #12]
	taskENTER_CRITICAL();
9000eae6:	f7ff fd7d 	bl	9000e5e4 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000eaea:	6828      	ldr	r0, [r5, #0]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
9000eaec:	63ac      	str	r4, [r5, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
9000eaee:	6068      	str	r0, [r5, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000eaf0:	e9d5 3c0f 	ldrd	r3, ip, [r5, #60]	; 0x3c
9000eaf4:	fb03 f30c 	mul.w	r3, r3, ip
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000eaf8:	eba3 0c0c 	sub.w	ip, r3, ip
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000eafc:	4403      	add	r3, r0
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000eafe:	4484      	add	ip, r0
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000eb00:	60ab      	str	r3, [r5, #8]
		pxQueue->cRxLock = queueUNLOCKED;
9000eb02:	23ff      	movs	r3, #255	; 0xff
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
9000eb04:	f105 0010 	add.w	r0, r5, #16
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000eb08:	f8c5 c00c 	str.w	ip, [r5, #12]
		pxQueue->cRxLock = queueUNLOCKED;
9000eb0c:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
9000eb10:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
9000eb14:	f7ff fcac 	bl	9000e470 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
9000eb18:	f105 0024 	add.w	r0, r5, #36	; 0x24
9000eb1c:	f7ff fca8 	bl	9000e470 <vListInitialise>
	taskEXIT_CRITICAL();
9000eb20:	f7ff fd82 	bl	9000e628 <vPortExitCritical>
		pxNewQueue->ucQueueType = ucQueueType;
9000eb24:	2302      	movs	r3, #2
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
9000eb26:	9901      	ldr	r1, [sp, #4]
	}
9000eb28:	4628      	mov	r0, r5
		pxNewQueue->ucQueueType = ucQueueType;
9000eb2a:	f885 304c 	strb.w	r3, [r5, #76]	; 0x4c
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
9000eb2e:	63a9      	str	r1, [r5, #56]	; 0x38
	}
9000eb30:	b005      	add	sp, #20
9000eb32:	bd30      	pop	{r4, r5, pc}
9000eb34:	f04f 0350 	mov.w	r3, #80	; 0x50
9000eb38:	f383 8811 	msr	BASEPRI, r3
9000eb3c:	f3bf 8f6f 	isb	sy
9000eb40:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
9000eb44:	e7fe      	b.n	9000eb44 <xQueueCreateCountingSemaphoreStatic+0xc0>
9000eb46:	bf00      	nop

9000eb48 <xQueueCreateCountingSemaphore>:
	{
9000eb48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( uxMaxCount != 0 );
9000eb4a:	b940      	cbnz	r0, 9000eb5e <xQueueCreateCountingSemaphore+0x16>
9000eb4c:	f04f 0350 	mov.w	r3, #80	; 0x50
9000eb50:	f383 8811 	msr	BASEPRI, r3
9000eb54:	f3bf 8f6f 	isb	sy
9000eb58:	f3bf 8f4f 	dsb	sy
9000eb5c:	e7fe      	b.n	9000eb5c <xQueueCreateCountingSemaphore+0x14>
		configASSERT( uxInitialCount <= uxMaxCount );
9000eb5e:	4288      	cmp	r0, r1
9000eb60:	4604      	mov	r4, r0
9000eb62:	460e      	mov	r6, r1
9000eb64:	d208      	bcs.n	9000eb78 <xQueueCreateCountingSemaphore+0x30>
9000eb66:	f04f 0350 	mov.w	r3, #80	; 0x50
9000eb6a:	f383 8811 	msr	BASEPRI, r3
9000eb6e:	f3bf 8f6f 	isb	sy
9000eb72:	f3bf 8f4f 	dsb	sy
9000eb76:	e7fe      	b.n	9000eb76 <xQueueCreateCountingSemaphore+0x2e>
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
9000eb78:	2050      	movs	r0, #80	; 0x50
9000eb7a:	f7ff fb57 	bl	9000e22c <pvPortMalloc>
		if( pxNewQueue != NULL )
9000eb7e:	4605      	mov	r5, r0
9000eb80:	b330      	cbz	r0, 9000ebd0 <xQueueCreateCountingSemaphore+0x88>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
9000eb82:	2700      	movs	r7, #0
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
9000eb84:	6000      	str	r0, [r0, #0]
	pxNewQueue->uxLength = uxQueueLength;
9000eb86:	63c4      	str	r4, [r0, #60]	; 0x3c
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
9000eb88:	f880 7046 	strb.w	r7, [r0, #70]	; 0x46
	pxNewQueue->uxItemSize = uxItemSize;
9000eb8c:	6407      	str	r7, [r0, #64]	; 0x40
	taskENTER_CRITICAL();
9000eb8e:	f7ff fd29 	bl	9000e5e4 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000eb92:	682a      	ldr	r2, [r5, #0]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
9000eb94:	63af      	str	r7, [r5, #56]	; 0x38
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
9000eb96:	f105 0010 	add.w	r0, r5, #16
		pxQueue->pcWriteTo = pxQueue->pcHead;
9000eb9a:	606a      	str	r2, [r5, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000eb9c:	e9d5 310f 	ldrd	r3, r1, [r5, #60]	; 0x3c
9000eba0:	fb01 f303 	mul.w	r3, r1, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000eba4:	1a59      	subs	r1, r3, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000eba6:	4413      	add	r3, r2
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000eba8:	440a      	add	r2, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000ebaa:	60ab      	str	r3, [r5, #8]
		pxQueue->cRxLock = queueUNLOCKED;
9000ebac:	23ff      	movs	r3, #255	; 0xff
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000ebae:	60ea      	str	r2, [r5, #12]
		pxQueue->cRxLock = queueUNLOCKED;
9000ebb0:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
9000ebb4:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
9000ebb8:	f7ff fc5a 	bl	9000e470 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
9000ebbc:	f105 0024 	add.w	r0, r5, #36	; 0x24
9000ebc0:	f7ff fc56 	bl	9000e470 <vListInitialise>
	taskEXIT_CRITICAL();
9000ebc4:	f7ff fd30 	bl	9000e628 <vPortExitCritical>
		pxNewQueue->ucQueueType = ucQueueType;
9000ebc8:	2302      	movs	r3, #2
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
9000ebca:	63ae      	str	r6, [r5, #56]	; 0x38
		pxNewQueue->ucQueueType = ucQueueType;
9000ebcc:	f885 304c 	strb.w	r3, [r5, #76]	; 0x4c
	}
9000ebd0:	4628      	mov	r0, r5
9000ebd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

9000ebd4 <xQueueGenericSend>:
{
9000ebd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
9000ebd8:	b084      	sub	sp, #16
9000ebda:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
9000ebdc:	2800      	cmp	r0, #0
9000ebde:	f000 8103 	beq.w	9000ede8 <xQueueGenericSend+0x214>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
9000ebe2:	4688      	mov	r8, r1
9000ebe4:	4604      	mov	r4, r0
9000ebe6:	461f      	mov	r7, r3
9000ebe8:	2900      	cmp	r1, #0
9000ebea:	f000 8097 	beq.w	9000ed1c <xQueueGenericSend+0x148>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
9000ebee:	2f02      	cmp	r7, #2
9000ebf0:	d10b      	bne.n	9000ec0a <xQueueGenericSend+0x36>
9000ebf2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
9000ebf4:	2b01      	cmp	r3, #1
9000ebf6:	d008      	beq.n	9000ec0a <xQueueGenericSend+0x36>
9000ebf8:	f04f 0350 	mov.w	r3, #80	; 0x50
9000ebfc:	f383 8811 	msr	BASEPRI, r3
9000ec00:	f3bf 8f6f 	isb	sy
9000ec04:	f3bf 8f4f 	dsb	sy
9000ec08:	e7fe      	b.n	9000ec08 <xQueueGenericSend+0x34>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
9000ec0a:	f001 fe55 	bl	900108b8 <xTaskGetSchedulerState>
9000ec0e:	2800      	cmp	r0, #0
9000ec10:	f000 80f3 	beq.w	9000edfa <xQueueGenericSend+0x226>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
9000ec14:	f1a7 0902 	sub.w	r9, r7, #2
9000ec18:	2500      	movs	r5, #0
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000ec1a:	f104 0624 	add.w	r6, r4, #36	; 0x24
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
9000ec1e:	fab9 f989 	clz	r9, r9
9000ec22:	ea4f 1959 	mov.w	r9, r9, lsr #5
		taskENTER_CRITICAL();
9000ec26:	f7ff fcdd 	bl	9000e5e4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
9000ec2a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
9000ec2c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
9000ec2e:	429a      	cmp	r2, r3
9000ec30:	f0c0 80f0 	bcc.w	9000ee14 <xQueueGenericSend+0x240>
9000ec34:	f1b9 0f00 	cmp.w	r9, #0
9000ec38:	f040 80ec 	bne.w	9000ee14 <xQueueGenericSend+0x240>
				if( xTicksToWait == ( TickType_t ) 0 )
9000ec3c:	9b01      	ldr	r3, [sp, #4]
9000ec3e:	2b00      	cmp	r3, #0
9000ec40:	f000 8101 	beq.w	9000ee46 <xQueueGenericSend+0x272>
				else if( xEntryTimeSet == pdFALSE )
9000ec44:	2d00      	cmp	r5, #0
9000ec46:	f000 80cb 	beq.w	9000ede0 <xQueueGenericSend+0x20c>
		taskEXIT_CRITICAL();
9000ec4a:	f7ff fced 	bl	9000e628 <vPortExitCritical>
		vTaskSuspendAll();
9000ec4e:	f001 fb55 	bl	900102fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
9000ec52:	f7ff fcc7 	bl	9000e5e4 <vPortEnterCritical>
9000ec56:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
9000ec5a:	2bff      	cmp	r3, #255	; 0xff
9000ec5c:	d102      	bne.n	9000ec64 <xQueueGenericSend+0x90>
9000ec5e:	2300      	movs	r3, #0
9000ec60:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
9000ec64:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
9000ec68:	2bff      	cmp	r3, #255	; 0xff
9000ec6a:	d102      	bne.n	9000ec72 <xQueueGenericSend+0x9e>
9000ec6c:	2300      	movs	r3, #0
9000ec6e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
9000ec72:	f7ff fcd9 	bl	9000e628 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
9000ec76:	a901      	add	r1, sp, #4
9000ec78:	a802      	add	r0, sp, #8
9000ec7a:	f001 fdc9 	bl	90010810 <xTaskCheckForTimeOut>
9000ec7e:	2800      	cmp	r0, #0
9000ec80:	f040 80e5 	bne.w	9000ee4e <xQueueGenericSend+0x27a>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
9000ec84:	f7ff fcae 	bl	9000e5e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
9000ec88:	6ba2      	ldr	r2, [r4, #56]	; 0x38
9000ec8a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
9000ec8c:	429a      	cmp	r2, r3
9000ec8e:	d052      	beq.n	9000ed36 <xQueueGenericSend+0x162>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
9000ec90:	f7ff fcca 	bl	9000e628 <vPortExitCritical>
	taskENTER_CRITICAL();
9000ec94:	f7ff fca6 	bl	9000e5e4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
9000ec98:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
9000ec9c:	b255      	sxtb	r5, r2
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000ec9e:	2d00      	cmp	r5, #0
9000eca0:	dc04      	bgt.n	9000ecac <xQueueGenericSend+0xd8>
9000eca2:	e011      	b.n	9000ecc8 <xQueueGenericSend+0xf4>
			--cTxLock;
9000eca4:	1e6a      	subs	r2, r5, #1
9000eca6:	b2d3      	uxtb	r3, r2
9000eca8:	b255      	sxtb	r5, r2
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000ecaa:	b16b      	cbz	r3, 9000ecc8 <xQueueGenericSend+0xf4>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000ecac:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000ecae:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000ecb0:	b153      	cbz	r3, 9000ecc8 <xQueueGenericSend+0xf4>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000ecb2:	f001 fd13 	bl	900106dc <xTaskRemoveFromEventList>
9000ecb6:	2800      	cmp	r0, #0
9000ecb8:	d0f4      	beq.n	9000eca4 <xQueueGenericSend+0xd0>
						vTaskMissedYield();
9000ecba:	f001 fdf1 	bl	900108a0 <vTaskMissedYield>
			--cTxLock;
9000ecbe:	1e6a      	subs	r2, r5, #1
9000ecc0:	b2d3      	uxtb	r3, r2
9000ecc2:	b255      	sxtb	r5, r2
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000ecc4:	2b00      	cmp	r3, #0
9000ecc6:	d1f1      	bne.n	9000ecac <xQueueGenericSend+0xd8>
		pxQueue->cTxLock = queueUNLOCKED;
9000ecc8:	23ff      	movs	r3, #255	; 0xff
9000ecca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
9000ecce:	f7ff fcab 	bl	9000e628 <vPortExitCritical>
	taskENTER_CRITICAL();
9000ecd2:	f7ff fc87 	bl	9000e5e4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
9000ecd6:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
9000ecda:	b255      	sxtb	r5, r2
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000ecdc:	2d00      	cmp	r5, #0
9000ecde:	dd14      	ble.n	9000ed0a <xQueueGenericSend+0x136>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000ece0:	f104 0a10 	add.w	sl, r4, #16
9000ece4:	e003      	b.n	9000ecee <xQueueGenericSend+0x11a>
				--cRxLock;
9000ece6:	1e6a      	subs	r2, r5, #1
9000ece8:	b2d3      	uxtb	r3, r2
9000ecea:	b255      	sxtb	r5, r2
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000ecec:	b16b      	cbz	r3, 9000ed0a <xQueueGenericSend+0x136>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000ecee:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000ecf0:	4650      	mov	r0, sl
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000ecf2:	b153      	cbz	r3, 9000ed0a <xQueueGenericSend+0x136>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000ecf4:	f001 fcf2 	bl	900106dc <xTaskRemoveFromEventList>
9000ecf8:	2800      	cmp	r0, #0
9000ecfa:	d0f4      	beq.n	9000ece6 <xQueueGenericSend+0x112>
					vTaskMissedYield();
9000ecfc:	f001 fdd0 	bl	900108a0 <vTaskMissedYield>
				--cRxLock;
9000ed00:	1e6a      	subs	r2, r5, #1
9000ed02:	b2d3      	uxtb	r3, r2
9000ed04:	b255      	sxtb	r5, r2
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000ed06:	2b00      	cmp	r3, #0
9000ed08:	d1f1      	bne.n	9000ecee <xQueueGenericSend+0x11a>
		pxQueue->cRxLock = queueUNLOCKED;
9000ed0a:	23ff      	movs	r3, #255	; 0xff
9000ed0c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
9000ed10:	f7ff fc8a 	bl	9000e628 <vPortExitCritical>
				( void ) xTaskResumeAll();
9000ed14:	f001 fafa 	bl	9001030c <xTaskResumeAll>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
9000ed18:	2501      	movs	r5, #1
9000ed1a:	e784      	b.n	9000ec26 <xQueueGenericSend+0x52>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
9000ed1c:	6c03      	ldr	r3, [r0, #64]	; 0x40
9000ed1e:	2b00      	cmp	r3, #0
9000ed20:	f43f af65 	beq.w	9000ebee <xQueueGenericSend+0x1a>
9000ed24:	f04f 0350 	mov.w	r3, #80	; 0x50
9000ed28:	f383 8811 	msr	BASEPRI, r3
9000ed2c:	f3bf 8f6f 	isb	sy
9000ed30:	f3bf 8f4f 	dsb	sy
9000ed34:	e7fe      	b.n	9000ed34 <xQueueGenericSend+0x160>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
9000ed36:	f104 0a10 	add.w	sl, r4, #16
	taskEXIT_CRITICAL();
9000ed3a:	f7ff fc75 	bl	9000e628 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
9000ed3e:	9901      	ldr	r1, [sp, #4]
9000ed40:	4650      	mov	r0, sl
9000ed42:	f001 fbe7 	bl	90010514 <vTaskPlaceOnEventList>
	taskENTER_CRITICAL();
9000ed46:	f7ff fc4d 	bl	9000e5e4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
9000ed4a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
9000ed4e:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000ed50:	2d00      	cmp	r5, #0
9000ed52:	dc04      	bgt.n	9000ed5e <xQueueGenericSend+0x18a>
9000ed54:	e011      	b.n	9000ed7a <xQueueGenericSend+0x1a6>
			--cTxLock;
9000ed56:	1e6b      	subs	r3, r5, #1
9000ed58:	b2da      	uxtb	r2, r3
9000ed5a:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000ed5c:	b16a      	cbz	r2, 9000ed7a <xQueueGenericSend+0x1a6>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000ed5e:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000ed60:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000ed62:	b153      	cbz	r3, 9000ed7a <xQueueGenericSend+0x1a6>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000ed64:	f001 fcba 	bl	900106dc <xTaskRemoveFromEventList>
9000ed68:	2800      	cmp	r0, #0
9000ed6a:	d0f4      	beq.n	9000ed56 <xQueueGenericSend+0x182>
						vTaskMissedYield();
9000ed6c:	f001 fd98 	bl	900108a0 <vTaskMissedYield>
			--cTxLock;
9000ed70:	1e6b      	subs	r3, r5, #1
9000ed72:	b2da      	uxtb	r2, r3
9000ed74:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000ed76:	2a00      	cmp	r2, #0
9000ed78:	d1f1      	bne.n	9000ed5e <xQueueGenericSend+0x18a>
		pxQueue->cTxLock = queueUNLOCKED;
9000ed7a:	23ff      	movs	r3, #255	; 0xff
9000ed7c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
9000ed80:	f7ff fc52 	bl	9000e628 <vPortExitCritical>
	taskENTER_CRITICAL();
9000ed84:	f7ff fc2e 	bl	9000e5e4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
9000ed88:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
9000ed8c:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000ed8e:	2d00      	cmp	r5, #0
9000ed90:	dc04      	bgt.n	9000ed9c <xQueueGenericSend+0x1c8>
9000ed92:	e011      	b.n	9000edb8 <xQueueGenericSend+0x1e4>
				--cRxLock;
9000ed94:	1e6b      	subs	r3, r5, #1
9000ed96:	b2da      	uxtb	r2, r3
9000ed98:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000ed9a:	b16a      	cbz	r2, 9000edb8 <xQueueGenericSend+0x1e4>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000ed9c:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000ed9e:	4650      	mov	r0, sl
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000eda0:	b153      	cbz	r3, 9000edb8 <xQueueGenericSend+0x1e4>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000eda2:	f001 fc9b 	bl	900106dc <xTaskRemoveFromEventList>
9000eda6:	2800      	cmp	r0, #0
9000eda8:	d0f4      	beq.n	9000ed94 <xQueueGenericSend+0x1c0>
					vTaskMissedYield();
9000edaa:	f001 fd79 	bl	900108a0 <vTaskMissedYield>
				--cRxLock;
9000edae:	1e6b      	subs	r3, r5, #1
9000edb0:	b2da      	uxtb	r2, r3
9000edb2:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000edb4:	2a00      	cmp	r2, #0
9000edb6:	d1f1      	bne.n	9000ed9c <xQueueGenericSend+0x1c8>
		pxQueue->cRxLock = queueUNLOCKED;
9000edb8:	23ff      	movs	r3, #255	; 0xff
9000edba:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
9000edbe:	f7ff fc33 	bl	9000e628 <vPortExitCritical>
				if( xTaskResumeAll() == pdFALSE )
9000edc2:	f001 faa3 	bl	9001030c <xTaskResumeAll>
9000edc6:	2800      	cmp	r0, #0
9000edc8:	d1a6      	bne.n	9000ed18 <xQueueGenericSend+0x144>
					portYIELD_WITHIN_API();
9000edca:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
9000edce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
9000edd2:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
9000edd6:	f3bf 8f4f 	dsb	sy
9000edda:	f3bf 8f6f 	isb	sy
9000edde:	e79b      	b.n	9000ed18 <xQueueGenericSend+0x144>
					vTaskInternalSetTimeOutState( &xTimeOut );
9000ede0:	a802      	add	r0, sp, #8
9000ede2:	f001 fd09 	bl	900107f8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
9000ede6:	e730      	b.n	9000ec4a <xQueueGenericSend+0x76>
9000ede8:	f04f 0350 	mov.w	r3, #80	; 0x50
9000edec:	f383 8811 	msr	BASEPRI, r3
9000edf0:	f3bf 8f6f 	isb	sy
9000edf4:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
9000edf8:	e7fe      	b.n	9000edf8 <xQueueGenericSend+0x224>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
9000edfa:	9b01      	ldr	r3, [sp, #4]
9000edfc:	2b00      	cmp	r3, #0
9000edfe:	f43f af09 	beq.w	9000ec14 <xQueueGenericSend+0x40>
9000ee02:	f04f 0350 	mov.w	r3, #80	; 0x50
9000ee06:	f383 8811 	msr	BASEPRI, r3
9000ee0a:	f3bf 8f6f 	isb	sy
9000ee0e:	f3bf 8f4f 	dsb	sy
9000ee12:	e7fe      	b.n	9000ee12 <xQueueGenericSend+0x23e>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
9000ee14:	463a      	mov	r2, r7
9000ee16:	4641      	mov	r1, r8
9000ee18:	4620      	mov	r0, r4
9000ee1a:	f7ff fd43 	bl	9000e8a4 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000ee1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
9000ee20:	2b00      	cmp	r3, #0
9000ee22:	d152      	bne.n	9000eeca <xQueueGenericSend+0x2f6>
					else if( xYieldRequired != pdFALSE )
9000ee24:	b148      	cbz	r0, 9000ee3a <xQueueGenericSend+0x266>
						queueYIELD_IF_USING_PREEMPTION();
9000ee26:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
9000ee2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
9000ee2e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
9000ee32:	f3bf 8f4f 	dsb	sy
9000ee36:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
9000ee3a:	f7ff fbf5 	bl	9000e628 <vPortExitCritical>
				return pdPASS;
9000ee3e:	2001      	movs	r0, #1
}
9000ee40:	b004      	add	sp, #16
9000ee42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					taskEXIT_CRITICAL();
9000ee46:	f7ff fbef 	bl	9000e628 <vPortExitCritical>
					return errQUEUE_FULL;
9000ee4a:	4648      	mov	r0, r9
9000ee4c:	e7f8      	b.n	9000ee40 <xQueueGenericSend+0x26c>
	taskENTER_CRITICAL();
9000ee4e:	f7ff fbc9 	bl	9000e5e4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
9000ee52:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
9000ee56:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000ee58:	2d00      	cmp	r5, #0
9000ee5a:	dd10      	ble.n	9000ee7e <xQueueGenericSend+0x2aa>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000ee5c:	f104 0624 	add.w	r6, r4, #36	; 0x24
9000ee60:	e003      	b.n	9000ee6a <xQueueGenericSend+0x296>
			--cTxLock;
9000ee62:	1e6b      	subs	r3, r5, #1
9000ee64:	b2da      	uxtb	r2, r3
9000ee66:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000ee68:	b14a      	cbz	r2, 9000ee7e <xQueueGenericSend+0x2aa>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000ee6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000ee6c:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000ee6e:	b133      	cbz	r3, 9000ee7e <xQueueGenericSend+0x2aa>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000ee70:	f001 fc34 	bl	900106dc <xTaskRemoveFromEventList>
9000ee74:	2800      	cmp	r0, #0
9000ee76:	d0f4      	beq.n	9000ee62 <xQueueGenericSend+0x28e>
						vTaskMissedYield();
9000ee78:	f001 fd12 	bl	900108a0 <vTaskMissedYield>
9000ee7c:	e7f1      	b.n	9000ee62 <xQueueGenericSend+0x28e>
		pxQueue->cTxLock = queueUNLOCKED;
9000ee7e:	23ff      	movs	r3, #255	; 0xff
9000ee80:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
9000ee84:	f7ff fbd0 	bl	9000e628 <vPortExitCritical>
	taskENTER_CRITICAL();
9000ee88:	f7ff fbac 	bl	9000e5e4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
9000ee8c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
9000ee90:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000ee92:	2d00      	cmp	r5, #0
9000ee94:	dd10      	ble.n	9000eeb8 <xQueueGenericSend+0x2e4>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000ee96:	f104 0610 	add.w	r6, r4, #16
9000ee9a:	e003      	b.n	9000eea4 <xQueueGenericSend+0x2d0>
				--cRxLock;
9000ee9c:	1e6b      	subs	r3, r5, #1
9000ee9e:	b2da      	uxtb	r2, r3
9000eea0:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000eea2:	b14a      	cbz	r2, 9000eeb8 <xQueueGenericSend+0x2e4>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000eea4:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000eea6:	4630      	mov	r0, r6
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000eea8:	b133      	cbz	r3, 9000eeb8 <xQueueGenericSend+0x2e4>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000eeaa:	f001 fc17 	bl	900106dc <xTaskRemoveFromEventList>
9000eeae:	2800      	cmp	r0, #0
9000eeb0:	d0f4      	beq.n	9000ee9c <xQueueGenericSend+0x2c8>
					vTaskMissedYield();
9000eeb2:	f001 fcf5 	bl	900108a0 <vTaskMissedYield>
9000eeb6:	e7f1      	b.n	9000ee9c <xQueueGenericSend+0x2c8>
		pxQueue->cRxLock = queueUNLOCKED;
9000eeb8:	23ff      	movs	r3, #255	; 0xff
9000eeba:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
9000eebe:	f7ff fbb3 	bl	9000e628 <vPortExitCritical>
			( void ) xTaskResumeAll();
9000eec2:	f001 fa23 	bl	9001030c <xTaskResumeAll>
			return errQUEUE_FULL;
9000eec6:	2000      	movs	r0, #0
9000eec8:	e7ba      	b.n	9000ee40 <xQueueGenericSend+0x26c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000eeca:	f104 0024 	add.w	r0, r4, #36	; 0x24
9000eece:	f001 fc05 	bl	900106dc <xTaskRemoveFromEventList>
9000eed2:	2800      	cmp	r0, #0
9000eed4:	d0b1      	beq.n	9000ee3a <xQueueGenericSend+0x266>
9000eed6:	e7a6      	b.n	9000ee26 <xQueueGenericSend+0x252>

9000eed8 <xQueueCreateMutexStatic>:
		configASSERT( pxStaticQueue != NULL );
9000eed8:	b179      	cbz	r1, 9000eefa <xQueueCreateMutexStatic+0x22>
			volatile size_t xSize = sizeof( StaticQueue_t );
9000eeda:	2350      	movs	r3, #80	; 0x50
	{
9000eedc:	b570      	push	{r4, r5, r6, lr}
9000eede:	b082      	sub	sp, #8
			volatile size_t xSize = sizeof( StaticQueue_t );
9000eee0:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
9000eee2:	9b01      	ldr	r3, [sp, #4]
9000eee4:	2b50      	cmp	r3, #80	; 0x50
9000eee6:	d011      	beq.n	9000ef0c <xQueueCreateMutexStatic+0x34>
9000eee8:	f04f 0350 	mov.w	r3, #80	; 0x50
9000eeec:	f383 8811 	msr	BASEPRI, r3
9000eef0:	f3bf 8f6f 	isb	sy
9000eef4:	f3bf 8f4f 	dsb	sy
9000eef8:	e7fe      	b.n	9000eef8 <xQueueCreateMutexStatic+0x20>
9000eefa:	f04f 0350 	mov.w	r3, #80	; 0x50
9000eefe:	f383 8811 	msr	BASEPRI, r3
9000ef02:	f3bf 8f6f 	isb	sy
9000ef06:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
9000ef0a:	e7fe      	b.n	9000ef0a <xQueueCreateMutexStatic+0x32>
	pxNewQueue->uxItemSize = uxItemSize;
9000ef0c:	2600      	movs	r6, #0
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
9000ef0e:	2301      	movs	r3, #1
9000ef10:	460c      	mov	r4, r1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
9000ef12:	6009      	str	r1, [r1, #0]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
9000ef14:	f881 3046 	strb.w	r3, [r1, #70]	; 0x46
9000ef18:	4605      	mov	r5, r0
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
9000ef1a:	9a01      	ldr	r2, [sp, #4]
	pxNewQueue->uxItemSize = uxItemSize;
9000ef1c:	e9c1 360f 	strd	r3, r6, [r1, #60]	; 0x3c
	taskENTER_CRITICAL();
9000ef20:	f7ff fb60 	bl	9000e5e4 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000ef24:	6821      	ldr	r1, [r4, #0]
		pxQueue->cRxLock = queueUNLOCKED;
9000ef26:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
9000ef28:	63a6      	str	r6, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
9000ef2a:	6061      	str	r1, [r4, #4]
		pxQueue->cRxLock = queueUNLOCKED;
9000ef2c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
9000ef30:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000ef34:	e9d4 200f 	ldrd	r2, r0, [r4, #60]	; 0x3c
9000ef38:	fb00 f202 	mul.w	r2, r0, r2
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000ef3c:	1a10      	subs	r0, r2, r0
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000ef3e:	440a      	add	r2, r1
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000ef40:	4401      	add	r1, r0
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
9000ef42:	f104 0010 	add.w	r0, r4, #16
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000ef46:	e9c4 2102 	strd	r2, r1, [r4, #8]
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
9000ef4a:	f7ff fa91 	bl	9000e470 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
9000ef4e:	f104 0024 	add.w	r0, r4, #36	; 0x24
9000ef52:	f7ff fa8d 	bl	9000e470 <vListInitialise>
	taskEXIT_CRITICAL();
9000ef56:	f7ff fb67 	bl	9000e628 <vPortExitCritical>
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
9000ef5a:	4633      	mov	r3, r6
9000ef5c:	4632      	mov	r2, r6
9000ef5e:	4631      	mov	r1, r6
9000ef60:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
9000ef62:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
9000ef66:	60a6      	str	r6, [r4, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
9000ef68:	6026      	str	r6, [r4, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
9000ef6a:	60e6      	str	r6, [r4, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
9000ef6c:	f7ff fe32 	bl	9000ebd4 <xQueueGenericSend>
	}
9000ef70:	4620      	mov	r0, r4
9000ef72:	b002      	add	sp, #8
9000ef74:	bd70      	pop	{r4, r5, r6, pc}
9000ef76:	bf00      	nop

9000ef78 <xQueueGiveMutexRecursive>:
	{
9000ef78:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxMutex );
9000ef7a:	b138      	cbz	r0, 9000ef8c <xQueueGiveMutexRecursive+0x14>
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
9000ef7c:	6885      	ldr	r5, [r0, #8]
9000ef7e:	4604      	mov	r4, r0
9000ef80:	f001 fc94 	bl	900108ac <xTaskGetCurrentTaskHandle>
9000ef84:	4285      	cmp	r5, r0
9000ef86:	d00a      	beq.n	9000ef9e <xQueueGiveMutexRecursive+0x26>
			xReturn = pdFAIL;
9000ef88:	2000      	movs	r0, #0
	}
9000ef8a:	bd38      	pop	{r3, r4, r5, pc}
9000ef8c:	f04f 0350 	mov.w	r3, #80	; 0x50
9000ef90:	f383 8811 	msr	BASEPRI, r3
9000ef94:	f3bf 8f6f 	isb	sy
9000ef98:	f3bf 8f4f 	dsb	sy
		configASSERT( pxMutex );
9000ef9c:	e7fe      	b.n	9000ef9c <xQueueGiveMutexRecursive+0x24>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
9000ef9e:	68e3      	ldr	r3, [r4, #12]
9000efa0:	3b01      	subs	r3, #1
9000efa2:	60e3      	str	r3, [r4, #12]
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
9000efa4:	b10b      	cbz	r3, 9000efaa <xQueueGiveMutexRecursive+0x32>
			xReturn = pdPASS;
9000efa6:	2001      	movs	r0, #1
	}
9000efa8:	bd38      	pop	{r3, r4, r5, pc}
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
9000efaa:	461a      	mov	r2, r3
9000efac:	4619      	mov	r1, r3
9000efae:	4620      	mov	r0, r4
9000efb0:	f7ff fe10 	bl	9000ebd4 <xQueueGenericSend>
			xReturn = pdPASS;
9000efb4:	2001      	movs	r0, #1
	}
9000efb6:	bd38      	pop	{r3, r4, r5, pc}

9000efb8 <xQueueCreateMutex>:
	{
9000efb8:	b570      	push	{r4, r5, r6, lr}
9000efba:	4605      	mov	r5, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
9000efbc:	2050      	movs	r0, #80	; 0x50
9000efbe:	f7ff f935 	bl	9000e22c <pvPortMalloc>
		if( pxNewQueue != NULL )
9000efc2:	4604      	mov	r4, r0
9000efc4:	b370      	cbz	r0, 9000f024 <xQueueCreateMutex+0x6c>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
9000efc6:	2600      	movs	r6, #0
	pxNewQueue->uxLength = uxQueueLength;
9000efc8:	2301      	movs	r3, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
9000efca:	6020      	str	r0, [r4, #0]
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
9000efcc:	f880 6046 	strb.w	r6, [r0, #70]	; 0x46
	pxNewQueue->uxItemSize = uxItemSize;
9000efd0:	e9c0 360f 	strd	r3, r6, [r0, #60]	; 0x3c
	taskENTER_CRITICAL();
9000efd4:	f7ff fb06 	bl	9000e5e4 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000efd8:	6821      	ldr	r1, [r4, #0]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
9000efda:	63a6      	str	r6, [r4, #56]	; 0x38
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
9000efdc:	f104 0010 	add.w	r0, r4, #16
		pxQueue->pcWriteTo = pxQueue->pcHead;
9000efe0:	6061      	str	r1, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000efe2:	e9d4 230f 	ldrd	r2, r3, [r4, #60]	; 0x3c
9000efe6:	fb03 f202 	mul.w	r2, r3, r2
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000efea:	1ad3      	subs	r3, r2, r3
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000efec:	440a      	add	r2, r1
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000efee:	4419      	add	r1, r3
		pxQueue->cRxLock = queueUNLOCKED;
9000eff0:	23ff      	movs	r3, #255	; 0xff
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000eff2:	e9c4 2102 	strd	r2, r1, [r4, #8]
		pxQueue->cRxLock = queueUNLOCKED;
9000eff6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
9000effa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
9000effe:	f7ff fa37 	bl	9000e470 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
9000f002:	f104 0024 	add.w	r0, r4, #36	; 0x24
9000f006:	f7ff fa33 	bl	9000e470 <vListInitialise>
	taskEXIT_CRITICAL();
9000f00a:	f7ff fb0d 	bl	9000e628 <vPortExitCritical>
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
9000f00e:	4633      	mov	r3, r6
9000f010:	4632      	mov	r2, r6
9000f012:	4631      	mov	r1, r6
9000f014:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
9000f016:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
9000f01a:	60a6      	str	r6, [r4, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
9000f01c:	6026      	str	r6, [r4, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
9000f01e:	60e6      	str	r6, [r4, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
9000f020:	f7ff fdd8 	bl	9000ebd4 <xQueueGenericSend>
	}
9000f024:	4620      	mov	r0, r4
9000f026:	bd70      	pop	{r4, r5, r6, pc}

9000f028 <xQueueGenericSendFromISR>:
	configASSERT( pxQueue );
9000f028:	2800      	cmp	r0, #0
9000f02a:	d04e      	beq.n	9000f0ca <xQueueGenericSendFromISR+0xa2>
{
9000f02c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9000f030:	460e      	mov	r6, r1
9000f032:	4604      	mov	r4, r0
9000f034:	4617      	mov	r7, r2
9000f036:	461d      	mov	r5, r3
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
9000f038:	b339      	cbz	r1, 9000f08a <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
9000f03a:	2d02      	cmp	r5, #2
9000f03c:	d10b      	bne.n	9000f056 <xQueueGenericSendFromISR+0x2e>
9000f03e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
9000f040:	2b01      	cmp	r3, #1
9000f042:	d008      	beq.n	9000f056 <xQueueGenericSendFromISR+0x2e>
9000f044:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f048:	f383 8811 	msr	BASEPRI, r3
9000f04c:	f3bf 8f6f 	isb	sy
9000f050:	f3bf 8f4f 	dsb	sy
9000f054:	e7fe      	b.n	9000f054 <xQueueGenericSendFromISR+0x2c>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
9000f056:	f7ff fbf7 	bl	9000e848 <vPortValidateInterruptPriority>
	__asm volatile
9000f05a:	f3ef 8811 	mrs	r8, BASEPRI
9000f05e:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f062:	f383 8811 	msr	BASEPRI, r3
9000f066:	f3bf 8f6f 	isb	sy
9000f06a:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
9000f06e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
9000f070:	6be3      	ldr	r3, [r4, #60]	; 0x3c
9000f072:	429a      	cmp	r2, r3
9000f074:	d315      	bcc.n	9000f0a2 <xQueueGenericSendFromISR+0x7a>
9000f076:	f1a5 0002 	sub.w	r0, r5, #2
9000f07a:	fab0 f080 	clz	r0, r0
9000f07e:	0940      	lsrs	r0, r0, #5
9000f080:	b978      	cbnz	r0, 9000f0a2 <xQueueGenericSendFromISR+0x7a>
	__asm volatile
9000f082:	f388 8811 	msr	BASEPRI, r8
}
9000f086:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
9000f08a:	6c03      	ldr	r3, [r0, #64]	; 0x40
9000f08c:	2b00      	cmp	r3, #0
9000f08e:	d0d4      	beq.n	9000f03a <xQueueGenericSendFromISR+0x12>
	__asm volatile
9000f090:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f094:	f383 8811 	msr	BASEPRI, r3
9000f098:	f3bf 8f6f 	isb	sy
9000f09c:	f3bf 8f4f 	dsb	sy
9000f0a0:	e7fe      	b.n	9000f0a0 <xQueueGenericSendFromISR+0x78>
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
9000f0a2:	462a      	mov	r2, r5
			const int8_t cTxLock = pxQueue->cTxLock;
9000f0a4:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
9000f0a8:	4631      	mov	r1, r6
9000f0aa:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
9000f0ac:	b26d      	sxtb	r5, r5
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
9000f0ae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
9000f0b0:	f7ff fbf8 	bl	9000e8a4 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
9000f0b4:	1c6b      	adds	r3, r5, #1
9000f0b6:	d011      	beq.n	9000f0dc <xQueueGenericSendFromISR+0xb4>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
9000f0b8:	1c6b      	adds	r3, r5, #1
			xReturn = pdPASS;
9000f0ba:	2001      	movs	r0, #1
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
9000f0bc:	b25b      	sxtb	r3, r3
9000f0be:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	__asm volatile
9000f0c2:	f388 8811 	msr	BASEPRI, r8
}
9000f0c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm volatile
9000f0ca:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f0ce:	f383 8811 	msr	BASEPRI, r3
9000f0d2:	f3bf 8f6f 	isb	sy
9000f0d6:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
9000f0da:	e7fe      	b.n	9000f0da <xQueueGenericSendFromISR+0xb2>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000f0dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
9000f0de:	b90b      	cbnz	r3, 9000f0e4 <xQueueGenericSendFromISR+0xbc>
			xReturn = pdPASS;
9000f0e0:	2001      	movs	r0, #1
9000f0e2:	e7ce      	b.n	9000f082 <xQueueGenericSendFromISR+0x5a>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000f0e4:	f104 0024 	add.w	r0, r4, #36	; 0x24
9000f0e8:	f001 faf8 	bl	900106dc <xTaskRemoveFromEventList>
							if( pxHigherPriorityTaskWoken != NULL )
9000f0ec:	2800      	cmp	r0, #0
9000f0ee:	d0f7      	beq.n	9000f0e0 <xQueueGenericSendFromISR+0xb8>
9000f0f0:	2f00      	cmp	r7, #0
9000f0f2:	d0f5      	beq.n	9000f0e0 <xQueueGenericSendFromISR+0xb8>
								*pxHigherPriorityTaskWoken = pdTRUE;
9000f0f4:	2301      	movs	r3, #1
			xReturn = pdPASS;
9000f0f6:	4618      	mov	r0, r3
								*pxHigherPriorityTaskWoken = pdTRUE;
9000f0f8:	603b      	str	r3, [r7, #0]
9000f0fa:	e7c2      	b.n	9000f082 <xQueueGenericSendFromISR+0x5a>

9000f0fc <xQueueGiveFromISR>:
	configASSERT( pxQueue );
9000f0fc:	b360      	cbz	r0, 9000f158 <xQueueGiveFromISR+0x5c>
	configASSERT( pxQueue->uxItemSize == 0 );
9000f0fe:	6c03      	ldr	r3, [r0, #64]	; 0x40
{
9000f100:	b570      	push	{r4, r5, r6, lr}
9000f102:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
9000f104:	b143      	cbz	r3, 9000f118 <xQueueGiveFromISR+0x1c>
9000f106:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f10a:	f383 8811 	msr	BASEPRI, r3
9000f10e:	f3bf 8f6f 	isb	sy
9000f112:	f3bf 8f4f 	dsb	sy
9000f116:	e7fe      	b.n	9000f116 <xQueueGiveFromISR+0x1a>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
9000f118:	6803      	ldr	r3, [r0, #0]
9000f11a:	460d      	mov	r5, r1
9000f11c:	b32b      	cbz	r3, 9000f16a <xQueueGiveFromISR+0x6e>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
9000f11e:	f7ff fb93 	bl	9000e848 <vPortValidateInterruptPriority>
	__asm volatile
9000f122:	f3ef 8611 	mrs	r6, BASEPRI
9000f126:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f12a:	f383 8811 	msr	BASEPRI, r3
9000f12e:	f3bf 8f6f 	isb	sy
9000f132:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
9000f136:	6ba3      	ldr	r3, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
9000f138:	6be2      	ldr	r2, [r4, #60]	; 0x3c
9000f13a:	429a      	cmp	r2, r3
9000f13c:	d921      	bls.n	9000f182 <xQueueGiveFromISR+0x86>
			const int8_t cTxLock = pxQueue->cTxLock;
9000f13e:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
9000f142:	3301      	adds	r3, #1
			if( cTxLock == queueUNLOCKED )
9000f144:	2aff      	cmp	r2, #255	; 0xff
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
9000f146:	63a3      	str	r3, [r4, #56]	; 0x38
			const int8_t cTxLock = pxQueue->cTxLock;
9000f148:	b253      	sxtb	r3, r2
			if( cTxLock == queueUNLOCKED )
9000f14a:	d01e      	beq.n	9000f18a <xQueueGiveFromISR+0x8e>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
9000f14c:	3301      	adds	r3, #1
			xReturn = pdPASS;
9000f14e:	2001      	movs	r0, #1
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
9000f150:	b25b      	sxtb	r3, r3
9000f152:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
9000f156:	e015      	b.n	9000f184 <xQueueGiveFromISR+0x88>
	__asm volatile
9000f158:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f15c:	f383 8811 	msr	BASEPRI, r3
9000f160:	f3bf 8f6f 	isb	sy
9000f164:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
9000f168:	e7fe      	b.n	9000f168 <xQueueGiveFromISR+0x6c>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
9000f16a:	6883      	ldr	r3, [r0, #8]
9000f16c:	2b00      	cmp	r3, #0
9000f16e:	d0d6      	beq.n	9000f11e <xQueueGiveFromISR+0x22>
9000f170:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f174:	f383 8811 	msr	BASEPRI, r3
9000f178:	f3bf 8f6f 	isb	sy
9000f17c:	f3bf 8f4f 	dsb	sy
9000f180:	e7fe      	b.n	9000f180 <xQueueGiveFromISR+0x84>
			xReturn = errQUEUE_FULL;
9000f182:	2000      	movs	r0, #0
	__asm volatile
9000f184:	f386 8811 	msr	BASEPRI, r6
}
9000f188:	bd70      	pop	{r4, r5, r6, pc}
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000f18a:	6a63      	ldr	r3, [r4, #36]	; 0x24
9000f18c:	b90b      	cbnz	r3, 9000f192 <xQueueGiveFromISR+0x96>
			xReturn = pdPASS;
9000f18e:	2001      	movs	r0, #1
9000f190:	e7f8      	b.n	9000f184 <xQueueGiveFromISR+0x88>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000f192:	f104 0024 	add.w	r0, r4, #36	; 0x24
9000f196:	f001 faa1 	bl	900106dc <xTaskRemoveFromEventList>
							if( pxHigherPriorityTaskWoken != NULL )
9000f19a:	2d00      	cmp	r5, #0
9000f19c:	d0f7      	beq.n	9000f18e <xQueueGiveFromISR+0x92>
9000f19e:	2800      	cmp	r0, #0
9000f1a0:	d0f5      	beq.n	9000f18e <xQueueGiveFromISR+0x92>
								*pxHigherPriorityTaskWoken = pdTRUE;
9000f1a2:	2301      	movs	r3, #1
			xReturn = pdPASS;
9000f1a4:	4618      	mov	r0, r3
								*pxHigherPriorityTaskWoken = pdTRUE;
9000f1a6:	602b      	str	r3, [r5, #0]
9000f1a8:	e7ec      	b.n	9000f184 <xQueueGiveFromISR+0x88>
9000f1aa:	bf00      	nop

9000f1ac <xQueueReceive>:
{
9000f1ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
9000f1b0:	b085      	sub	sp, #20
9000f1b2:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
9000f1b4:	2800      	cmp	r0, #0
9000f1b6:	f000 815c 	beq.w	9000f472 <xQueueReceive+0x2c6>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
9000f1ba:	460f      	mov	r7, r1
9000f1bc:	4604      	mov	r4, r0
9000f1be:	2900      	cmp	r1, #0
9000f1c0:	d079      	beq.n	9000f2b6 <xQueueReceive+0x10a>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
9000f1c2:	f001 fb79 	bl	900108b8 <xTaskGetSchedulerState>
9000f1c6:	2800      	cmp	r0, #0
9000f1c8:	f000 8081 	beq.w	9000f2ce <xQueueReceive+0x122>
		taskENTER_CRITICAL();
9000f1cc:	f7ff fa0a 	bl	9000e5e4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
9000f1d0:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
9000f1d2:	2d00      	cmp	r5, #0
9000f1d4:	f040 8138 	bne.w	9000f448 <xQueueReceive+0x29c>
				if( xTicksToWait == ( TickType_t ) 0 )
9000f1d8:	9b01      	ldr	r3, [sp, #4]
9000f1da:	2b00      	cmp	r3, #0
9000f1dc:	f000 80d5 	beq.w	9000f38a <xQueueReceive+0x1de>
		prvLockQueue( pxQueue );
9000f1e0:	46a8      	mov	r8, r5
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000f1e2:	f104 0624 	add.w	r6, r4, #36	; 0x24
					vTaskInternalSetTimeOutState( &xTimeOut );
9000f1e6:	a802      	add	r0, sp, #8
9000f1e8:	f001 fb06 	bl	900107f8 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
9000f1ec:	f7ff fa1c 	bl	9000e628 <vPortExitCritical>
		vTaskSuspendAll();
9000f1f0:	f001 f884 	bl	900102fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
9000f1f4:	f7ff f9f6 	bl	9000e5e4 <vPortEnterCritical>
9000f1f8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
9000f1fc:	2bff      	cmp	r3, #255	; 0xff
9000f1fe:	d101      	bne.n	9000f204 <xQueueReceive+0x58>
9000f200:	f884 8044 	strb.w	r8, [r4, #68]	; 0x44
9000f204:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
9000f208:	2bff      	cmp	r3, #255	; 0xff
9000f20a:	d101      	bne.n	9000f210 <xQueueReceive+0x64>
9000f20c:	f884 8045 	strb.w	r8, [r4, #69]	; 0x45
9000f210:	f7ff fa0a 	bl	9000e628 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
9000f214:	a901      	add	r1, sp, #4
9000f216:	a802      	add	r0, sp, #8
9000f218:	f001 fafa 	bl	90010810 <xTaskCheckForTimeOut>
9000f21c:	2800      	cmp	r0, #0
9000f21e:	d163      	bne.n	9000f2e8 <xQueueReceive+0x13c>
	taskENTER_CRITICAL();
9000f220:	f7ff f9e0 	bl	9000e5e4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
9000f224:	6ba3      	ldr	r3, [r4, #56]	; 0x38
9000f226:	2b00      	cmp	r3, #0
9000f228:	f000 80b5 	beq.w	9000f396 <xQueueReceive+0x1ea>
	taskEXIT_CRITICAL();
9000f22c:	f7ff f9fc 	bl	9000e628 <vPortExitCritical>
	taskENTER_CRITICAL();
9000f230:	f7ff f9d8 	bl	9000e5e4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
9000f234:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
9000f238:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000f23a:	2d00      	cmp	r5, #0
9000f23c:	dc04      	bgt.n	9000f248 <xQueueReceive+0x9c>
9000f23e:	e011      	b.n	9000f264 <xQueueReceive+0xb8>
			--cTxLock;
9000f240:	1e6b      	subs	r3, r5, #1
9000f242:	b2da      	uxtb	r2, r3
9000f244:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000f246:	b16a      	cbz	r2, 9000f264 <xQueueReceive+0xb8>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000f248:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000f24a:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000f24c:	b153      	cbz	r3, 9000f264 <xQueueReceive+0xb8>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000f24e:	f001 fa45 	bl	900106dc <xTaskRemoveFromEventList>
9000f252:	2800      	cmp	r0, #0
9000f254:	d0f4      	beq.n	9000f240 <xQueueReceive+0x94>
						vTaskMissedYield();
9000f256:	f001 fb23 	bl	900108a0 <vTaskMissedYield>
			--cTxLock;
9000f25a:	1e6b      	subs	r3, r5, #1
9000f25c:	b2da      	uxtb	r2, r3
9000f25e:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000f260:	2a00      	cmp	r2, #0
9000f262:	d1f1      	bne.n	9000f248 <xQueueReceive+0x9c>
		pxQueue->cTxLock = queueUNLOCKED;
9000f264:	23ff      	movs	r3, #255	; 0xff
9000f266:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
9000f26a:	f7ff f9dd 	bl	9000e628 <vPortExitCritical>
	taskENTER_CRITICAL();
9000f26e:	f7ff f9b9 	bl	9000e5e4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
9000f272:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
9000f276:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000f278:	2d00      	cmp	r5, #0
9000f27a:	dd14      	ble.n	9000f2a6 <xQueueReceive+0xfa>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000f27c:	f104 0910 	add.w	r9, r4, #16
9000f280:	e003      	b.n	9000f28a <xQueueReceive+0xde>
				--cRxLock;
9000f282:	1e6b      	subs	r3, r5, #1
9000f284:	b2da      	uxtb	r2, r3
9000f286:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000f288:	b16a      	cbz	r2, 9000f2a6 <xQueueReceive+0xfa>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000f28a:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000f28c:	4648      	mov	r0, r9
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000f28e:	b153      	cbz	r3, 9000f2a6 <xQueueReceive+0xfa>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000f290:	f001 fa24 	bl	900106dc <xTaskRemoveFromEventList>
9000f294:	2800      	cmp	r0, #0
9000f296:	d0f4      	beq.n	9000f282 <xQueueReceive+0xd6>
					vTaskMissedYield();
9000f298:	f001 fb02 	bl	900108a0 <vTaskMissedYield>
				--cRxLock;
9000f29c:	1e6b      	subs	r3, r5, #1
9000f29e:	b2da      	uxtb	r2, r3
9000f2a0:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000f2a2:	2a00      	cmp	r2, #0
9000f2a4:	d1f1      	bne.n	9000f28a <xQueueReceive+0xde>
		pxQueue->cRxLock = queueUNLOCKED;
9000f2a6:	23ff      	movs	r3, #255	; 0xff
9000f2a8:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
9000f2ac:	f7ff f9bc 	bl	9000e628 <vPortExitCritical>
				( void ) xTaskResumeAll();
9000f2b0:	f001 f82c 	bl	9001030c <xTaskResumeAll>
		taskENTER_CRITICAL();
9000f2b4:	e060      	b.n	9000f378 <xQueueReceive+0x1cc>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
9000f2b6:	6c03      	ldr	r3, [r0, #64]	; 0x40
9000f2b8:	2b00      	cmp	r3, #0
9000f2ba:	d082      	beq.n	9000f1c2 <xQueueReceive+0x16>
	__asm volatile
9000f2bc:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f2c0:	f383 8811 	msr	BASEPRI, r3
9000f2c4:	f3bf 8f6f 	isb	sy
9000f2c8:	f3bf 8f4f 	dsb	sy
9000f2cc:	e7fe      	b.n	9000f2cc <xQueueReceive+0x120>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
9000f2ce:	9b01      	ldr	r3, [sp, #4]
9000f2d0:	2b00      	cmp	r3, #0
9000f2d2:	f43f af7b 	beq.w	9000f1cc <xQueueReceive+0x20>
9000f2d6:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f2da:	f383 8811 	msr	BASEPRI, r3
9000f2de:	f3bf 8f6f 	isb	sy
9000f2e2:	f3bf 8f4f 	dsb	sy
9000f2e6:	e7fe      	b.n	9000f2e6 <xQueueReceive+0x13a>
	taskENTER_CRITICAL();
9000f2e8:	f7ff f97c 	bl	9000e5e4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
9000f2ec:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
9000f2f0:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000f2f2:	2d00      	cmp	r5, #0
9000f2f4:	dc04      	bgt.n	9000f300 <xQueueReceive+0x154>
9000f2f6:	e011      	b.n	9000f31c <xQueueReceive+0x170>
			--cTxLock;
9000f2f8:	1e6b      	subs	r3, r5, #1
9000f2fa:	b2da      	uxtb	r2, r3
9000f2fc:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000f2fe:	b16a      	cbz	r2, 9000f31c <xQueueReceive+0x170>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000f300:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000f302:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000f304:	b153      	cbz	r3, 9000f31c <xQueueReceive+0x170>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000f306:	f001 f9e9 	bl	900106dc <xTaskRemoveFromEventList>
9000f30a:	2800      	cmp	r0, #0
9000f30c:	d0f4      	beq.n	9000f2f8 <xQueueReceive+0x14c>
						vTaskMissedYield();
9000f30e:	f001 fac7 	bl	900108a0 <vTaskMissedYield>
			--cTxLock;
9000f312:	1e6b      	subs	r3, r5, #1
9000f314:	b2da      	uxtb	r2, r3
9000f316:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000f318:	2a00      	cmp	r2, #0
9000f31a:	d1f1      	bne.n	9000f300 <xQueueReceive+0x154>
		pxQueue->cTxLock = queueUNLOCKED;
9000f31c:	23ff      	movs	r3, #255	; 0xff
9000f31e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
9000f322:	f7ff f981 	bl	9000e628 <vPortExitCritical>
	taskENTER_CRITICAL();
9000f326:	f7ff f95d 	bl	9000e5e4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
9000f32a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
9000f32e:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000f330:	2d00      	cmp	r5, #0
9000f332:	dd14      	ble.n	9000f35e <xQueueReceive+0x1b2>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000f334:	f104 0910 	add.w	r9, r4, #16
9000f338:	e003      	b.n	9000f342 <xQueueReceive+0x196>
				--cRxLock;
9000f33a:	1e6b      	subs	r3, r5, #1
9000f33c:	b2da      	uxtb	r2, r3
9000f33e:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000f340:	b16a      	cbz	r2, 9000f35e <xQueueReceive+0x1b2>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000f342:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000f344:	4648      	mov	r0, r9
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000f346:	b153      	cbz	r3, 9000f35e <xQueueReceive+0x1b2>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000f348:	f001 f9c8 	bl	900106dc <xTaskRemoveFromEventList>
9000f34c:	2800      	cmp	r0, #0
9000f34e:	d0f4      	beq.n	9000f33a <xQueueReceive+0x18e>
					vTaskMissedYield();
9000f350:	f001 faa6 	bl	900108a0 <vTaskMissedYield>
				--cRxLock;
9000f354:	1e6b      	subs	r3, r5, #1
9000f356:	b2da      	uxtb	r2, r3
9000f358:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000f35a:	2a00      	cmp	r2, #0
9000f35c:	d1f1      	bne.n	9000f342 <xQueueReceive+0x196>
		pxQueue->cRxLock = queueUNLOCKED;
9000f35e:	23ff      	movs	r3, #255	; 0xff
9000f360:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
9000f364:	f7ff f960 	bl	9000e628 <vPortExitCritical>
			( void ) xTaskResumeAll();
9000f368:	f000 ffd0 	bl	9001030c <xTaskResumeAll>
	taskENTER_CRITICAL();
9000f36c:	f7ff f93a 	bl	9000e5e4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
9000f370:	6ba3      	ldr	r3, [r4, #56]	; 0x38
9000f372:	b153      	cbz	r3, 9000f38a <xQueueReceive+0x1de>
	taskEXIT_CRITICAL();
9000f374:	f7ff f958 	bl	9000e628 <vPortExitCritical>
		taskENTER_CRITICAL();
9000f378:	f7ff f934 	bl	9000e5e4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
9000f37c:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
9000f37e:	2d00      	cmp	r5, #0
9000f380:	d162      	bne.n	9000f448 <xQueueReceive+0x29c>
				if( xTicksToWait == ( TickType_t ) 0 )
9000f382:	9b01      	ldr	r3, [sp, #4]
9000f384:	2b00      	cmp	r3, #0
9000f386:	f47f af31 	bne.w	9000f1ec <xQueueReceive+0x40>
					taskEXIT_CRITICAL();
9000f38a:	f7ff f94d 	bl	9000e628 <vPortExitCritical>
					return errQUEUE_EMPTY;
9000f38e:	2000      	movs	r0, #0
}
9000f390:	b005      	add	sp, #20
9000f392:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	taskEXIT_CRITICAL();
9000f396:	f7ff f947 	bl	9000e628 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
9000f39a:	9901      	ldr	r1, [sp, #4]
9000f39c:	4630      	mov	r0, r6
9000f39e:	f001 f8b9 	bl	90010514 <vTaskPlaceOnEventList>
	taskENTER_CRITICAL();
9000f3a2:	f7ff f91f 	bl	9000e5e4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
9000f3a6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
9000f3aa:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000f3ac:	2d00      	cmp	r5, #0
9000f3ae:	dc04      	bgt.n	9000f3ba <xQueueReceive+0x20e>
9000f3b0:	e011      	b.n	9000f3d6 <xQueueReceive+0x22a>
			--cTxLock;
9000f3b2:	1e6b      	subs	r3, r5, #1
9000f3b4:	b2da      	uxtb	r2, r3
9000f3b6:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000f3b8:	b16a      	cbz	r2, 9000f3d6 <xQueueReceive+0x22a>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000f3ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000f3bc:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000f3be:	b153      	cbz	r3, 9000f3d6 <xQueueReceive+0x22a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000f3c0:	f001 f98c 	bl	900106dc <xTaskRemoveFromEventList>
9000f3c4:	2800      	cmp	r0, #0
9000f3c6:	d0f4      	beq.n	9000f3b2 <xQueueReceive+0x206>
						vTaskMissedYield();
9000f3c8:	f001 fa6a 	bl	900108a0 <vTaskMissedYield>
			--cTxLock;
9000f3cc:	1e6b      	subs	r3, r5, #1
9000f3ce:	b2da      	uxtb	r2, r3
9000f3d0:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000f3d2:	2a00      	cmp	r2, #0
9000f3d4:	d1f1      	bne.n	9000f3ba <xQueueReceive+0x20e>
		pxQueue->cTxLock = queueUNLOCKED;
9000f3d6:	23ff      	movs	r3, #255	; 0xff
9000f3d8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
9000f3dc:	f7ff f924 	bl	9000e628 <vPortExitCritical>
	taskENTER_CRITICAL();
9000f3e0:	f7ff f900 	bl	9000e5e4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
9000f3e4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
9000f3e8:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000f3ea:	2d00      	cmp	r5, #0
9000f3ec:	dd14      	ble.n	9000f418 <xQueueReceive+0x26c>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000f3ee:	f104 0910 	add.w	r9, r4, #16
9000f3f2:	e003      	b.n	9000f3fc <xQueueReceive+0x250>
				--cRxLock;
9000f3f4:	1e6b      	subs	r3, r5, #1
9000f3f6:	b2da      	uxtb	r2, r3
9000f3f8:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000f3fa:	b16a      	cbz	r2, 9000f418 <xQueueReceive+0x26c>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000f3fc:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000f3fe:	4648      	mov	r0, r9
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000f400:	b153      	cbz	r3, 9000f418 <xQueueReceive+0x26c>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000f402:	f001 f96b 	bl	900106dc <xTaskRemoveFromEventList>
9000f406:	2800      	cmp	r0, #0
9000f408:	d0f4      	beq.n	9000f3f4 <xQueueReceive+0x248>
					vTaskMissedYield();
9000f40a:	f001 fa49 	bl	900108a0 <vTaskMissedYield>
				--cRxLock;
9000f40e:	1e6b      	subs	r3, r5, #1
9000f410:	b2da      	uxtb	r2, r3
9000f412:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000f414:	2a00      	cmp	r2, #0
9000f416:	d1f1      	bne.n	9000f3fc <xQueueReceive+0x250>
		pxQueue->cRxLock = queueUNLOCKED;
9000f418:	23ff      	movs	r3, #255	; 0xff
9000f41a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
9000f41e:	f7ff f903 	bl	9000e628 <vPortExitCritical>
				if( xTaskResumeAll() == pdFALSE )
9000f422:	f000 ff73 	bl	9001030c <xTaskResumeAll>
9000f426:	2800      	cmp	r0, #0
9000f428:	d1a6      	bne.n	9000f378 <xQueueReceive+0x1cc>
					portYIELD_WITHIN_API();
9000f42a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
9000f42e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
9000f432:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
9000f436:	f3bf 8f4f 	dsb	sy
9000f43a:	f3bf 8f6f 	isb	sy
		taskENTER_CRITICAL();
9000f43e:	f7ff f8d1 	bl	9000e5e4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
9000f442:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
9000f444:	2d00      	cmp	r5, #0
9000f446:	d09c      	beq.n	9000f382 <xQueueReceive+0x1d6>
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
9000f448:	6c22      	ldr	r2, [r4, #64]	; 0x40
9000f44a:	b152      	cbz	r2, 9000f462 <xQueueReceive+0x2b6>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
9000f44c:	68e1      	ldr	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
9000f44e:	68a3      	ldr	r3, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
9000f450:	4411      	add	r1, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
9000f452:	4299      	cmp	r1, r3
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
9000f454:	60e1      	str	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
9000f456:	d301      	bcc.n	9000f45c <xQueueReceive+0x2b0>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
9000f458:	6821      	ldr	r1, [r4, #0]
9000f45a:	60e1      	str	r1, [r4, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
9000f45c:	4638      	mov	r0, r7
9000f45e:	f015 fa19 	bl	90024894 <memcpy>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
9000f462:	3d01      	subs	r5, #1
9000f464:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000f466:	6923      	ldr	r3, [r4, #16]
9000f468:	b963      	cbnz	r3, 9000f484 <xQueueReceive+0x2d8>
				taskEXIT_CRITICAL();
9000f46a:	f7ff f8dd 	bl	9000e628 <vPortExitCritical>
				return pdPASS;
9000f46e:	2001      	movs	r0, #1
9000f470:	e78e      	b.n	9000f390 <xQueueReceive+0x1e4>
9000f472:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f476:	f383 8811 	msr	BASEPRI, r3
9000f47a:	f3bf 8f6f 	isb	sy
9000f47e:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
9000f482:	e7fe      	b.n	9000f482 <xQueueReceive+0x2d6>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000f484:	f104 0010 	add.w	r0, r4, #16
9000f488:	f001 f928 	bl	900106dc <xTaskRemoveFromEventList>
9000f48c:	2800      	cmp	r0, #0
9000f48e:	d0ec      	beq.n	9000f46a <xQueueReceive+0x2be>
						queueYIELD_IF_USING_PREEMPTION();
9000f490:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
9000f494:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
9000f498:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
9000f49c:	f3bf 8f4f 	dsb	sy
9000f4a0:	f3bf 8f6f 	isb	sy
9000f4a4:	e7e1      	b.n	9000f46a <xQueueReceive+0x2be>
9000f4a6:	bf00      	nop

9000f4a8 <xQueueSemaphoreTake>:
{
9000f4a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9000f4ac:	b084      	sub	sp, #16
9000f4ae:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
9000f4b0:	2800      	cmp	r0, #0
9000f4b2:	d05c      	beq.n	9000f56e <xQueueSemaphoreTake+0xc6>
	configASSERT( pxQueue->uxItemSize == 0 );
9000f4b4:	6c07      	ldr	r7, [r0, #64]	; 0x40
9000f4b6:	4604      	mov	r4, r0
9000f4b8:	b147      	cbz	r7, 9000f4cc <xQueueSemaphoreTake+0x24>
9000f4ba:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f4be:	f383 8811 	msr	BASEPRI, r3
9000f4c2:	f3bf 8f6f 	isb	sy
9000f4c6:	f3bf 8f4f 	dsb	sy
9000f4ca:	e7fe      	b.n	9000f4ca <xQueueSemaphoreTake+0x22>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
9000f4cc:	f001 f9f4 	bl	900108b8 <xTaskGetSchedulerState>
9000f4d0:	4605      	mov	r5, r0
9000f4d2:	2800      	cmp	r0, #0
9000f4d4:	d054      	beq.n	9000f580 <xQueueSemaphoreTake+0xd8>
9000f4d6:	463d      	mov	r5, r7
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000f4d8:	f104 0624 	add.w	r6, r4, #36	; 0x24
		taskENTER_CRITICAL();
9000f4dc:	f7ff f882 	bl	9000e5e4 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
9000f4e0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
9000f4e2:	2b00      	cmp	r3, #0
9000f4e4:	f040 8149 	bne.w	9000f77a <xQueueSemaphoreTake+0x2d2>
				if( xTicksToWait == ( TickType_t ) 0 )
9000f4e8:	9b01      	ldr	r3, [sp, #4]
9000f4ea:	2b00      	cmp	r3, #0
9000f4ec:	f000 813a 	beq.w	9000f764 <xQueueSemaphoreTake+0x2bc>
				else if( xEntryTimeSet == pdFALSE )
9000f4f0:	2d00      	cmp	r5, #0
9000f4f2:	f000 809d 	beq.w	9000f630 <xQueueSemaphoreTake+0x188>
		taskEXIT_CRITICAL();
9000f4f6:	f7ff f897 	bl	9000e628 <vPortExitCritical>
		vTaskSuspendAll();
9000f4fa:	f000 feff 	bl	900102fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
9000f4fe:	f7ff f871 	bl	9000e5e4 <vPortEnterCritical>
9000f502:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
9000f506:	2bff      	cmp	r3, #255	; 0xff
9000f508:	d102      	bne.n	9000f510 <xQueueSemaphoreTake+0x68>
9000f50a:	2300      	movs	r3, #0
9000f50c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
9000f510:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
9000f514:	2bff      	cmp	r3, #255	; 0xff
9000f516:	d102      	bne.n	9000f51e <xQueueSemaphoreTake+0x76>
9000f518:	2300      	movs	r3, #0
9000f51a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
9000f51e:	f7ff f883 	bl	9000e628 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
9000f522:	a901      	add	r1, sp, #4
9000f524:	a802      	add	r0, sp, #8
9000f526:	f001 f973 	bl	90010810 <xTaskCheckForTimeOut>
9000f52a:	2800      	cmp	r0, #0
9000f52c:	d135      	bne.n	9000f59a <xQueueSemaphoreTake+0xf2>
	taskENTER_CRITICAL();
9000f52e:	f7ff f859 	bl	9000e5e4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
9000f532:	6ba3      	ldr	r3, [r4, #56]	; 0x38
9000f534:	2b00      	cmp	r3, #0
9000f536:	f000 80a4 	beq.w	9000f682 <xQueueSemaphoreTake+0x1da>
	taskEXIT_CRITICAL();
9000f53a:	f7ff f875 	bl	9000e628 <vPortExitCritical>
	taskENTER_CRITICAL();
9000f53e:	f7ff f851 	bl	9000e5e4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
9000f542:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
9000f546:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000f548:	2d00      	cmp	r5, #0
9000f54a:	dc05      	bgt.n	9000f558 <xQueueSemaphoreTake+0xb0>
9000f54c:	e074      	b.n	9000f638 <xQueueSemaphoreTake+0x190>
			--cTxLock;
9000f54e:	1e6b      	subs	r3, r5, #1
9000f550:	b2da      	uxtb	r2, r3
9000f552:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000f554:	2a00      	cmp	r2, #0
9000f556:	d06f      	beq.n	9000f638 <xQueueSemaphoreTake+0x190>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000f558:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000f55a:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000f55c:	2b00      	cmp	r3, #0
9000f55e:	d06b      	beq.n	9000f638 <xQueueSemaphoreTake+0x190>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000f560:	f001 f8bc 	bl	900106dc <xTaskRemoveFromEventList>
9000f564:	2800      	cmp	r0, #0
9000f566:	d0f2      	beq.n	9000f54e <xQueueSemaphoreTake+0xa6>
						vTaskMissedYield();
9000f568:	f001 f99a 	bl	900108a0 <vTaskMissedYield>
9000f56c:	e7ef      	b.n	9000f54e <xQueueSemaphoreTake+0xa6>
9000f56e:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f572:	f383 8811 	msr	BASEPRI, r3
9000f576:	f3bf 8f6f 	isb	sy
9000f57a:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
9000f57e:	e7fe      	b.n	9000f57e <xQueueSemaphoreTake+0xd6>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
9000f580:	9b01      	ldr	r3, [sp, #4]
9000f582:	2b00      	cmp	r3, #0
9000f584:	f000 80d4 	beq.w	9000f730 <xQueueSemaphoreTake+0x288>
9000f588:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f58c:	f383 8811 	msr	BASEPRI, r3
9000f590:	f3bf 8f6f 	isb	sy
9000f594:	f3bf 8f4f 	dsb	sy
9000f598:	e7fe      	b.n	9000f598 <xQueueSemaphoreTake+0xf0>
	taskENTER_CRITICAL();
9000f59a:	f7ff f823 	bl	9000e5e4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
9000f59e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
9000f5a2:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000f5a4:	2d00      	cmp	r5, #0
9000f5a6:	dc04      	bgt.n	9000f5b2 <xQueueSemaphoreTake+0x10a>
9000f5a8:	e011      	b.n	9000f5ce <xQueueSemaphoreTake+0x126>
			--cTxLock;
9000f5aa:	1e6b      	subs	r3, r5, #1
9000f5ac:	b2da      	uxtb	r2, r3
9000f5ae:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000f5b0:	b16a      	cbz	r2, 9000f5ce <xQueueSemaphoreTake+0x126>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000f5b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000f5b4:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000f5b6:	b153      	cbz	r3, 9000f5ce <xQueueSemaphoreTake+0x126>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000f5b8:	f001 f890 	bl	900106dc <xTaskRemoveFromEventList>
9000f5bc:	2800      	cmp	r0, #0
9000f5be:	d0f4      	beq.n	9000f5aa <xQueueSemaphoreTake+0x102>
						vTaskMissedYield();
9000f5c0:	f001 f96e 	bl	900108a0 <vTaskMissedYield>
			--cTxLock;
9000f5c4:	1e6b      	subs	r3, r5, #1
9000f5c6:	b2da      	uxtb	r2, r3
9000f5c8:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000f5ca:	2a00      	cmp	r2, #0
9000f5cc:	d1f1      	bne.n	9000f5b2 <xQueueSemaphoreTake+0x10a>
		pxQueue->cTxLock = queueUNLOCKED;
9000f5ce:	23ff      	movs	r3, #255	; 0xff
9000f5d0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
9000f5d4:	f7ff f828 	bl	9000e628 <vPortExitCritical>
	taskENTER_CRITICAL();
9000f5d8:	f7ff f804 	bl	9000e5e4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
9000f5dc:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
9000f5e0:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000f5e2:	2d00      	cmp	r5, #0
9000f5e4:	dd14      	ble.n	9000f610 <xQueueSemaphoreTake+0x168>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000f5e6:	f104 0810 	add.w	r8, r4, #16
9000f5ea:	e003      	b.n	9000f5f4 <xQueueSemaphoreTake+0x14c>
				--cRxLock;
9000f5ec:	1e6b      	subs	r3, r5, #1
9000f5ee:	b2da      	uxtb	r2, r3
9000f5f0:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000f5f2:	b16a      	cbz	r2, 9000f610 <xQueueSemaphoreTake+0x168>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000f5f4:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000f5f6:	4640      	mov	r0, r8
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000f5f8:	b153      	cbz	r3, 9000f610 <xQueueSemaphoreTake+0x168>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000f5fa:	f001 f86f 	bl	900106dc <xTaskRemoveFromEventList>
9000f5fe:	2800      	cmp	r0, #0
9000f600:	d0f4      	beq.n	9000f5ec <xQueueSemaphoreTake+0x144>
					vTaskMissedYield();
9000f602:	f001 f94d 	bl	900108a0 <vTaskMissedYield>
				--cRxLock;
9000f606:	1e6b      	subs	r3, r5, #1
9000f608:	b2da      	uxtb	r2, r3
9000f60a:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000f60c:	2a00      	cmp	r2, #0
9000f60e:	d1f1      	bne.n	9000f5f4 <xQueueSemaphoreTake+0x14c>
		pxQueue->cRxLock = queueUNLOCKED;
9000f610:	23ff      	movs	r3, #255	; 0xff
9000f612:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
9000f616:	f7ff f807 	bl	9000e628 <vPortExitCritical>
			( void ) xTaskResumeAll();
9000f61a:	f000 fe77 	bl	9001030c <xTaskResumeAll>
	taskENTER_CRITICAL();
9000f61e:	f7fe ffe1 	bl	9000e5e4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
9000f622:	6ba3      	ldr	r3, [r4, #56]	; 0x38
9000f624:	2b00      	cmp	r3, #0
9000f626:	d07c      	beq.n	9000f722 <xQueueSemaphoreTake+0x27a>
	taskEXIT_CRITICAL();
9000f628:	f7fe fffe 	bl	9000e628 <vPortExitCritical>
	return xReturn;
9000f62c:	2501      	movs	r5, #1
9000f62e:	e755      	b.n	9000f4dc <xQueueSemaphoreTake+0x34>
					vTaskInternalSetTimeOutState( &xTimeOut );
9000f630:	a802      	add	r0, sp, #8
9000f632:	f001 f8e1 	bl	900107f8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
9000f636:	e75e      	b.n	9000f4f6 <xQueueSemaphoreTake+0x4e>
		pxQueue->cTxLock = queueUNLOCKED;
9000f638:	23ff      	movs	r3, #255	; 0xff
9000f63a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
9000f63e:	f7fe fff3 	bl	9000e628 <vPortExitCritical>
	taskENTER_CRITICAL();
9000f642:	f7fe ffcf 	bl	9000e5e4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
9000f646:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
9000f64a:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000f64c:	2d00      	cmp	r5, #0
9000f64e:	dd10      	ble.n	9000f672 <xQueueSemaphoreTake+0x1ca>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000f650:	f104 0810 	add.w	r8, r4, #16
9000f654:	e003      	b.n	9000f65e <xQueueSemaphoreTake+0x1b6>
				--cRxLock;
9000f656:	1e6b      	subs	r3, r5, #1
9000f658:	b2da      	uxtb	r2, r3
9000f65a:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000f65c:	b14a      	cbz	r2, 9000f672 <xQueueSemaphoreTake+0x1ca>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000f65e:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000f660:	4640      	mov	r0, r8
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000f662:	b133      	cbz	r3, 9000f672 <xQueueSemaphoreTake+0x1ca>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000f664:	f001 f83a 	bl	900106dc <xTaskRemoveFromEventList>
9000f668:	2800      	cmp	r0, #0
9000f66a:	d0f4      	beq.n	9000f656 <xQueueSemaphoreTake+0x1ae>
					vTaskMissedYield();
9000f66c:	f001 f918 	bl	900108a0 <vTaskMissedYield>
9000f670:	e7f1      	b.n	9000f656 <xQueueSemaphoreTake+0x1ae>
		pxQueue->cRxLock = queueUNLOCKED;
9000f672:	23ff      	movs	r3, #255	; 0xff
9000f674:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
9000f678:	f7fe ffd6 	bl	9000e628 <vPortExitCritical>
				( void ) xTaskResumeAll();
9000f67c:	f000 fe46 	bl	9001030c <xTaskResumeAll>
9000f680:	e7d4      	b.n	9000f62c <xQueueSemaphoreTake+0x184>
	taskEXIT_CRITICAL();
9000f682:	f7fe ffd1 	bl	9000e628 <vPortExitCritical>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
9000f686:	6823      	ldr	r3, [r4, #0]
9000f688:	2b00      	cmp	r3, #0
9000f68a:	d062      	beq.n	9000f752 <xQueueSemaphoreTake+0x2aa>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
9000f68c:	9901      	ldr	r1, [sp, #4]
9000f68e:	4630      	mov	r0, r6
9000f690:	f000 ff40 	bl	90010514 <vTaskPlaceOnEventList>
	taskENTER_CRITICAL();
9000f694:	f7fe ffa6 	bl	9000e5e4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
9000f698:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
9000f69c:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000f69e:	2d00      	cmp	r5, #0
9000f6a0:	dc04      	bgt.n	9000f6ac <xQueueSemaphoreTake+0x204>
9000f6a2:	e00d      	b.n	9000f6c0 <xQueueSemaphoreTake+0x218>
			--cTxLock;
9000f6a4:	1e6b      	subs	r3, r5, #1
9000f6a6:	b2da      	uxtb	r2, r3
9000f6a8:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000f6aa:	b14a      	cbz	r2, 9000f6c0 <xQueueSemaphoreTake+0x218>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000f6ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000f6ae:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000f6b0:	b133      	cbz	r3, 9000f6c0 <xQueueSemaphoreTake+0x218>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000f6b2:	f001 f813 	bl	900106dc <xTaskRemoveFromEventList>
9000f6b6:	2800      	cmp	r0, #0
9000f6b8:	d0f4      	beq.n	9000f6a4 <xQueueSemaphoreTake+0x1fc>
						vTaskMissedYield();
9000f6ba:	f001 f8f1 	bl	900108a0 <vTaskMissedYield>
9000f6be:	e7f1      	b.n	9000f6a4 <xQueueSemaphoreTake+0x1fc>
		pxQueue->cTxLock = queueUNLOCKED;
9000f6c0:	23ff      	movs	r3, #255	; 0xff
9000f6c2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
9000f6c6:	f7fe ffaf 	bl	9000e628 <vPortExitCritical>
	taskENTER_CRITICAL();
9000f6ca:	f7fe ff8b 	bl	9000e5e4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
9000f6ce:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
9000f6d2:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000f6d4:	2d00      	cmp	r5, #0
9000f6d6:	dd10      	ble.n	9000f6fa <xQueueSemaphoreTake+0x252>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000f6d8:	f104 0810 	add.w	r8, r4, #16
9000f6dc:	e003      	b.n	9000f6e6 <xQueueSemaphoreTake+0x23e>
				--cRxLock;
9000f6de:	1e6b      	subs	r3, r5, #1
9000f6e0:	b2da      	uxtb	r2, r3
9000f6e2:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000f6e4:	b14a      	cbz	r2, 9000f6fa <xQueueSemaphoreTake+0x252>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000f6e6:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000f6e8:	4640      	mov	r0, r8
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000f6ea:	b133      	cbz	r3, 9000f6fa <xQueueSemaphoreTake+0x252>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000f6ec:	f000 fff6 	bl	900106dc <xTaskRemoveFromEventList>
9000f6f0:	2800      	cmp	r0, #0
9000f6f2:	d0f4      	beq.n	9000f6de <xQueueSemaphoreTake+0x236>
					vTaskMissedYield();
9000f6f4:	f001 f8d4 	bl	900108a0 <vTaskMissedYield>
9000f6f8:	e7f1      	b.n	9000f6de <xQueueSemaphoreTake+0x236>
		pxQueue->cRxLock = queueUNLOCKED;
9000f6fa:	23ff      	movs	r3, #255	; 0xff
9000f6fc:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
9000f700:	f7fe ff92 	bl	9000e628 <vPortExitCritical>
				if( xTaskResumeAll() == pdFALSE )
9000f704:	f000 fe02 	bl	9001030c <xTaskResumeAll>
9000f708:	2800      	cmp	r0, #0
9000f70a:	d18f      	bne.n	9000f62c <xQueueSemaphoreTake+0x184>
					portYIELD_WITHIN_API();
9000f70c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
9000f710:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
9000f714:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
9000f718:	f3bf 8f4f 	dsb	sy
9000f71c:	f3bf 8f6f 	isb	sy
9000f720:	e784      	b.n	9000f62c <xQueueSemaphoreTake+0x184>
	taskEXIT_CRITICAL();
9000f722:	f7fe ff81 	bl	9000e628 <vPortExitCritical>
					if( xInheritanceOccurred != pdFALSE )
9000f726:	b92f      	cbnz	r7, 9000f734 <xQueueSemaphoreTake+0x28c>
}
9000f728:	4638      	mov	r0, r7
9000f72a:	b004      	add	sp, #16
9000f72c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
9000f730:	4607      	mov	r7, r0
9000f732:	e6d1      	b.n	9000f4d8 <xQueueSemaphoreTake+0x30>
						taskENTER_CRITICAL();
9000f734:	f7fe ff56 	bl	9000e5e4 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
9000f738:	6a61      	ldr	r1, [r4, #36]	; 0x24
9000f73a:	b119      	cbz	r1, 9000f744 <xQueueSemaphoreTake+0x29c>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
9000f73c:	6b23      	ldr	r3, [r4, #48]	; 0x30
9000f73e:	6819      	ldr	r1, [r3, #0]
9000f740:	f1c1 0138 	rsb	r1, r1, #56	; 0x38
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
9000f744:	68a0      	ldr	r0, [r4, #8]
				return errQUEUE_EMPTY;
9000f746:	2700      	movs	r7, #0
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
9000f748:	f001 f952 	bl	900109f0 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
9000f74c:	f7fe ff6c 	bl	9000e628 <vPortExitCritical>
9000f750:	e7ea      	b.n	9000f728 <xQueueSemaphoreTake+0x280>
						taskENTER_CRITICAL();
9000f752:	f7fe ff47 	bl	9000e5e4 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
9000f756:	68a0      	ldr	r0, [r4, #8]
9000f758:	f001 f8be 	bl	900108d8 <xTaskPriorityInherit>
9000f75c:	4607      	mov	r7, r0
						taskEXIT_CRITICAL();
9000f75e:	f7fe ff63 	bl	9000e628 <vPortExitCritical>
9000f762:	e793      	b.n	9000f68c <xQueueSemaphoreTake+0x1e4>
						configASSERT( xInheritanceOccurred == pdFALSE );
9000f764:	2f00      	cmp	r7, #0
9000f766:	d0f1      	beq.n	9000f74c <xQueueSemaphoreTake+0x2a4>
9000f768:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f76c:	f383 8811 	msr	BASEPRI, r3
9000f770:	f3bf 8f6f 	isb	sy
9000f774:	f3bf 8f4f 	dsb	sy
9000f778:	e7fe      	b.n	9000f778 <xQueueSemaphoreTake+0x2d0>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
9000f77a:	3b01      	subs	r3, #1
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
9000f77c:	6822      	ldr	r2, [r4, #0]
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
9000f77e:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
9000f780:	b12a      	cbz	r2, 9000f78e <xQueueSemaphoreTake+0x2e6>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000f782:	6923      	ldr	r3, [r4, #16]
9000f784:	b93b      	cbnz	r3, 9000f796 <xQueueSemaphoreTake+0x2ee>
				return pdPASS;
9000f786:	2701      	movs	r7, #1
				taskEXIT_CRITICAL();
9000f788:	f7fe ff4e 	bl	9000e628 <vPortExitCritical>
				return pdPASS;
9000f78c:	e7cc      	b.n	9000f728 <xQueueSemaphoreTake+0x280>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
9000f78e:	f001 f98f 	bl	90010ab0 <pvTaskIncrementMutexHeldCount>
9000f792:	60a0      	str	r0, [r4, #8]
9000f794:	e7f5      	b.n	9000f782 <xQueueSemaphoreTake+0x2da>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000f796:	f104 0010 	add.w	r0, r4, #16
9000f79a:	f000 ff9f 	bl	900106dc <xTaskRemoveFromEventList>
9000f79e:	2800      	cmp	r0, #0
9000f7a0:	d0f1      	beq.n	9000f786 <xQueueSemaphoreTake+0x2de>
						queueYIELD_IF_USING_PREEMPTION();
9000f7a2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
9000f7a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
9000f7aa:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
9000f7ae:	f3bf 8f4f 	dsb	sy
9000f7b2:	f3bf 8f6f 	isb	sy
9000f7b6:	e7e6      	b.n	9000f786 <xQueueSemaphoreTake+0x2de>

9000f7b8 <xQueueTakeMutexRecursive>:
		configASSERT( pxMutex );
9000f7b8:	b1a8      	cbz	r0, 9000f7e6 <xQueueTakeMutexRecursive+0x2e>
	{
9000f7ba:	b570      	push	{r4, r5, r6, lr}
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
9000f7bc:	6886      	ldr	r6, [r0, #8]
9000f7be:	4604      	mov	r4, r0
9000f7c0:	460d      	mov	r5, r1
9000f7c2:	f001 f873 	bl	900108ac <xTaskGetCurrentTaskHandle>
9000f7c6:	4286      	cmp	r6, r0
9000f7c8:	d008      	beq.n	9000f7dc <xQueueTakeMutexRecursive+0x24>
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
9000f7ca:	4629      	mov	r1, r5
9000f7cc:	4620      	mov	r0, r4
9000f7ce:	f7ff fe6b 	bl	9000f4a8 <xQueueSemaphoreTake>
			if( xReturn != pdFAIL )
9000f7d2:	b110      	cbz	r0, 9000f7da <xQueueTakeMutexRecursive+0x22>
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
9000f7d4:	68e3      	ldr	r3, [r4, #12]
9000f7d6:	3301      	adds	r3, #1
9000f7d8:	60e3      	str	r3, [r4, #12]
	}
9000f7da:	bd70      	pop	{r4, r5, r6, pc}
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
9000f7dc:	68e3      	ldr	r3, [r4, #12]
			xReturn = pdPASS;
9000f7de:	2001      	movs	r0, #1
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
9000f7e0:	4403      	add	r3, r0
9000f7e2:	60e3      	str	r3, [r4, #12]
	}
9000f7e4:	bd70      	pop	{r4, r5, r6, pc}
9000f7e6:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f7ea:	f383 8811 	msr	BASEPRI, r3
9000f7ee:	f3bf 8f6f 	isb	sy
9000f7f2:	f3bf 8f4f 	dsb	sy
		configASSERT( pxMutex );
9000f7f6:	e7fe      	b.n	9000f7f6 <xQueueTakeMutexRecursive+0x3e>

9000f7f8 <xQueueReceiveFromISR>:
{
9000f7f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
9000f7fc:	b310      	cbz	r0, 9000f844 <xQueueReceiveFromISR+0x4c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
9000f7fe:	460e      	mov	r6, r1
9000f800:	4604      	mov	r4, r0
9000f802:	4617      	mov	r7, r2
9000f804:	b191      	cbz	r1, 9000f82c <xQueueReceiveFromISR+0x34>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
9000f806:	f7ff f81f 	bl	9000e848 <vPortValidateInterruptPriority>
	__asm volatile
9000f80a:	f3ef 8911 	mrs	r9, BASEPRI
9000f80e:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f812:	f383 8811 	msr	BASEPRI, r3
9000f816:	f3bf 8f6f 	isb	sy
9000f81a:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
9000f81e:	6ba5      	ldr	r5, [r4, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
9000f820:	b9cd      	cbnz	r5, 9000f856 <xQueueReceiveFromISR+0x5e>
			xReturn = pdFAIL;
9000f822:	4628      	mov	r0, r5
	__asm volatile
9000f824:	f389 8811 	msr	BASEPRI, r9
}
9000f828:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
9000f82c:	6c03      	ldr	r3, [r0, #64]	; 0x40
9000f82e:	2b00      	cmp	r3, #0
9000f830:	d0e9      	beq.n	9000f806 <xQueueReceiveFromISR+0xe>
	__asm volatile
9000f832:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f836:	f383 8811 	msr	BASEPRI, r3
9000f83a:	f3bf 8f6f 	isb	sy
9000f83e:	f3bf 8f4f 	dsb	sy
9000f842:	e7fe      	b.n	9000f842 <xQueueReceiveFromISR+0x4a>
9000f844:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f848:	f383 8811 	msr	BASEPRI, r3
9000f84c:	f3bf 8f6f 	isb	sy
9000f850:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
9000f854:	e7fe      	b.n	9000f854 <xQueueReceiveFromISR+0x5c>
			const int8_t cRxLock = pxQueue->cRxLock;
9000f856:	f894 8044 	ldrb.w	r8, [r4, #68]	; 0x44
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
9000f85a:	6c22      	ldr	r2, [r4, #64]	; 0x40
			const int8_t cRxLock = pxQueue->cRxLock;
9000f85c:	fa4f f888 	sxtb.w	r8, r8
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
9000f860:	b142      	cbz	r2, 9000f874 <xQueueReceiveFromISR+0x7c>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
9000f862:	68e1      	ldr	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
9000f864:	68a3      	ldr	r3, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
9000f866:	4411      	add	r1, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
9000f868:	4299      	cmp	r1, r3
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
9000f86a:	60e1      	str	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
9000f86c:	d215      	bcs.n	9000f89a <xQueueReceiveFromISR+0xa2>
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
9000f86e:	4630      	mov	r0, r6
9000f870:	f015 f810 	bl	90024894 <memcpy>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
9000f874:	3d01      	subs	r5, #1
			if( cRxLock == queueUNLOCKED )
9000f876:	f1b8 3fff 	cmp.w	r8, #4294967295
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
9000f87a:	63a5      	str	r5, [r4, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
9000f87c:	d009      	beq.n	9000f892 <xQueueReceiveFromISR+0x9a>
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
9000f87e:	f108 0301 	add.w	r3, r8, #1
			xReturn = pdPASS;
9000f882:	2001      	movs	r0, #1
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
9000f884:	b25b      	sxtb	r3, r3
9000f886:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	__asm volatile
9000f88a:	f389 8811 	msr	BASEPRI, r9
}
9000f88e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000f892:	6923      	ldr	r3, [r4, #16]
9000f894:	b923      	cbnz	r3, 9000f8a0 <xQueueReceiveFromISR+0xa8>
			xReturn = pdPASS;
9000f896:	2001      	movs	r0, #1
9000f898:	e7c4      	b.n	9000f824 <xQueueReceiveFromISR+0x2c>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
9000f89a:	6821      	ldr	r1, [r4, #0]
9000f89c:	60e1      	str	r1, [r4, #12]
9000f89e:	e7e6      	b.n	9000f86e <xQueueReceiveFromISR+0x76>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000f8a0:	f104 0010 	add.w	r0, r4, #16
9000f8a4:	f000 ff1a 	bl	900106dc <xTaskRemoveFromEventList>
						if( pxHigherPriorityTaskWoken != NULL )
9000f8a8:	2f00      	cmp	r7, #0
9000f8aa:	d0f4      	beq.n	9000f896 <xQueueReceiveFromISR+0x9e>
9000f8ac:	2800      	cmp	r0, #0
9000f8ae:	d0f2      	beq.n	9000f896 <xQueueReceiveFromISR+0x9e>
							*pxHigherPriorityTaskWoken = pdTRUE;
9000f8b0:	2301      	movs	r3, #1
			xReturn = pdPASS;
9000f8b2:	4618      	mov	r0, r3
							*pxHigherPriorityTaskWoken = pdTRUE;
9000f8b4:	603b      	str	r3, [r7, #0]
9000f8b6:	e7b5      	b.n	9000f824 <xQueueReceiveFromISR+0x2c>

9000f8b8 <vQueueDelete>:
	configASSERT( pxQueue );
9000f8b8:	b1e0      	cbz	r0, 9000f8f4 <vQueueDelete+0x3c>

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
9000f8ba:	4b21      	ldr	r3, [pc, #132]	; (9000f940 <vQueueDelete+0x88>)
9000f8bc:	685a      	ldr	r2, [r3, #4]
9000f8be:	4290      	cmp	r0, r2
9000f8c0:	d02b      	beq.n	9000f91a <vQueueDelete+0x62>
9000f8c2:	68da      	ldr	r2, [r3, #12]
9000f8c4:	4290      	cmp	r0, r2
9000f8c6:	d02a      	beq.n	9000f91e <vQueueDelete+0x66>
9000f8c8:	695a      	ldr	r2, [r3, #20]
9000f8ca:	4290      	cmp	r0, r2
9000f8cc:	d029      	beq.n	9000f922 <vQueueDelete+0x6a>
9000f8ce:	69da      	ldr	r2, [r3, #28]
9000f8d0:	4290      	cmp	r0, r2
9000f8d2:	d028      	beq.n	9000f926 <vQueueDelete+0x6e>
9000f8d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
9000f8d6:	4290      	cmp	r0, r2
9000f8d8:	d027      	beq.n	9000f92a <vQueueDelete+0x72>
9000f8da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
9000f8dc:	4290      	cmp	r0, r2
9000f8de:	d014      	beq.n	9000f90a <vQueueDelete+0x52>
9000f8e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
9000f8e2:	4290      	cmp	r0, r2
9000f8e4:	d023      	beq.n	9000f92e <vQueueDelete+0x76>
9000f8e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
9000f8e8:	4290      	cmp	r0, r2
9000f8ea:	d022      	beq.n	9000f932 <vQueueDelete+0x7a>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
9000f8ec:	f890 3046 	ldrb.w	r3, [r0, #70]	; 0x46
9000f8f0:	b14b      	cbz	r3, 9000f906 <vQueueDelete+0x4e>
}
9000f8f2:	4770      	bx	lr
	__asm volatile
9000f8f4:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f8f8:	f383 8811 	msr	BASEPRI, r3
9000f8fc:	f3bf 8f6f 	isb	sy
9000f900:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
9000f904:	e7fe      	b.n	9000f904 <vQueueDelete+0x4c>
			vPortFree( pxQueue );
9000f906:	f7fe bd4f 	b.w	9000e3a8 <vPortFree>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
9000f90a:	2205      	movs	r2, #5
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
9000f90c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
9000f910:	ed9f 7b09 	vldr	d7, [pc, #36]	; 9000f938 <vQueueDelete+0x80>
9000f914:	ed83 7b00 	vstr	d7, [r3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
				break;
9000f918:	e7e8      	b.n	9000f8ec <vQueueDelete+0x34>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
9000f91a:	2200      	movs	r2, #0
9000f91c:	e7f6      	b.n	9000f90c <vQueueDelete+0x54>
9000f91e:	2201      	movs	r2, #1
9000f920:	e7f4      	b.n	9000f90c <vQueueDelete+0x54>
9000f922:	2202      	movs	r2, #2
9000f924:	e7f2      	b.n	9000f90c <vQueueDelete+0x54>
9000f926:	2203      	movs	r2, #3
9000f928:	e7f0      	b.n	9000f90c <vQueueDelete+0x54>
9000f92a:	2204      	movs	r2, #4
9000f92c:	e7ee      	b.n	9000f90c <vQueueDelete+0x54>
9000f92e:	2206      	movs	r2, #6
9000f930:	e7ec      	b.n	9000f90c <vQueueDelete+0x54>
9000f932:	2207      	movs	r2, #7
9000f934:	e7ea      	b.n	9000f90c <vQueueDelete+0x54>
9000f936:	bf00      	nop
	...
9000f940:	240215a0 	.word	0x240215a0

9000f944 <vQueueAddToRegistry>:
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
9000f944:	4b12      	ldr	r3, [pc, #72]	; (9000f990 <vQueueAddToRegistry+0x4c>)
9000f946:	681a      	ldr	r2, [r3, #0]
9000f948:	b17a      	cbz	r2, 9000f96a <vQueueAddToRegistry+0x26>
9000f94a:	689a      	ldr	r2, [r3, #8]
9000f94c:	b162      	cbz	r2, 9000f968 <vQueueAddToRegistry+0x24>
9000f94e:	691a      	ldr	r2, [r3, #16]
9000f950:	b192      	cbz	r2, 9000f978 <vQueueAddToRegistry+0x34>
9000f952:	699a      	ldr	r2, [r3, #24]
9000f954:	b192      	cbz	r2, 9000f97c <vQueueAddToRegistry+0x38>
9000f956:	6a1a      	ldr	r2, [r3, #32]
9000f958:	b192      	cbz	r2, 9000f980 <vQueueAddToRegistry+0x3c>
9000f95a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
9000f95c:	b192      	cbz	r2, 9000f984 <vQueueAddToRegistry+0x40>
9000f95e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
9000f960:	b192      	cbz	r2, 9000f988 <vQueueAddToRegistry+0x44>
9000f962:	6b9a      	ldr	r2, [r3, #56]	; 0x38
9000f964:	b192      	cbz	r2, 9000f98c <vQueueAddToRegistry+0x48>
	}
9000f966:	4770      	bx	lr
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
9000f968:	2201      	movs	r2, #1
				xQueueRegistry[ ux ].xHandle = xQueue;
9000f96a:	eb03 0cc2 	add.w	ip, r3, r2, lsl #3
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
9000f96e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
9000f972:	f8cc 0004 	str.w	r0, [ip, #4]
	}
9000f976:	4770      	bx	lr
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
9000f978:	2202      	movs	r2, #2
9000f97a:	e7f6      	b.n	9000f96a <vQueueAddToRegistry+0x26>
9000f97c:	2203      	movs	r2, #3
9000f97e:	e7f4      	b.n	9000f96a <vQueueAddToRegistry+0x26>
9000f980:	2204      	movs	r2, #4
9000f982:	e7f2      	b.n	9000f96a <vQueueAddToRegistry+0x26>
9000f984:	2205      	movs	r2, #5
9000f986:	e7f0      	b.n	9000f96a <vQueueAddToRegistry+0x26>
9000f988:	2206      	movs	r2, #6
9000f98a:	e7ee      	b.n	9000f96a <vQueueAddToRegistry+0x26>
9000f98c:	2207      	movs	r2, #7
9000f98e:	e7ec      	b.n	9000f96a <vQueueAddToRegistry+0x26>
9000f990:	240215a0 	.word	0x240215a0

9000f994 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
9000f994:	b570      	push	{r4, r5, r6, lr}
9000f996:	4605      	mov	r5, r0
9000f998:	460e      	mov	r6, r1
9000f99a:	4614      	mov	r4, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
9000f99c:	f7fe fe22 	bl	9000e5e4 <vPortEnterCritical>
9000f9a0:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
9000f9a4:	2bff      	cmp	r3, #255	; 0xff
9000f9a6:	d102      	bne.n	9000f9ae <vQueueWaitForMessageRestricted+0x1a>
9000f9a8:	2300      	movs	r3, #0
9000f9aa:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
9000f9ae:	f895 3045 	ldrb.w	r3, [r5, #69]	; 0x45
9000f9b2:	2bff      	cmp	r3, #255	; 0xff
9000f9b4:	d102      	bne.n	9000f9bc <vQueueWaitForMessageRestricted+0x28>
9000f9b6:	2300      	movs	r3, #0
9000f9b8:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
9000f9bc:	f7fe fe34 	bl	9000e628 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
9000f9c0:	6bab      	ldr	r3, [r5, #56]	; 0x38
9000f9c2:	2b00      	cmp	r3, #0
9000f9c4:	d043      	beq.n	9000fa4e <vQueueWaitForMessageRestricted+0xba>
	taskENTER_CRITICAL();
9000f9c6:	f7fe fe0d 	bl	9000e5e4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
9000f9ca:	f895 3045 	ldrb.w	r3, [r5, #69]	; 0x45
9000f9ce:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000f9d0:	2c00      	cmp	r4, #0
9000f9d2:	dd14      	ble.n	9000f9fe <vQueueWaitForMessageRestricted+0x6a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000f9d4:	f105 0624 	add.w	r6, r5, #36	; 0x24
9000f9d8:	e003      	b.n	9000f9e2 <vQueueWaitForMessageRestricted+0x4e>
			--cTxLock;
9000f9da:	1e63      	subs	r3, r4, #1
9000f9dc:	b2da      	uxtb	r2, r3
9000f9de:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000f9e0:	b16a      	cbz	r2, 9000f9fe <vQueueWaitForMessageRestricted+0x6a>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000f9e2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000f9e4:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000f9e6:	b153      	cbz	r3, 9000f9fe <vQueueWaitForMessageRestricted+0x6a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000f9e8:	f000 fe78 	bl	900106dc <xTaskRemoveFromEventList>
9000f9ec:	2800      	cmp	r0, #0
9000f9ee:	d0f4      	beq.n	9000f9da <vQueueWaitForMessageRestricted+0x46>
						vTaskMissedYield();
9000f9f0:	f000 ff56 	bl	900108a0 <vTaskMissedYield>
			--cTxLock;
9000f9f4:	1e63      	subs	r3, r4, #1
9000f9f6:	b2da      	uxtb	r2, r3
9000f9f8:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000f9fa:	2a00      	cmp	r2, #0
9000f9fc:	d1f1      	bne.n	9000f9e2 <vQueueWaitForMessageRestricted+0x4e>
		pxQueue->cTxLock = queueUNLOCKED;
9000f9fe:	23ff      	movs	r3, #255	; 0xff
9000fa00:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
9000fa04:	f7fe fe10 	bl	9000e628 <vPortExitCritical>
	taskENTER_CRITICAL();
9000fa08:	f7fe fdec 	bl	9000e5e4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
9000fa0c:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
9000fa10:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000fa12:	2c00      	cmp	r4, #0
9000fa14:	dd14      	ble.n	9000fa40 <vQueueWaitForMessageRestricted+0xac>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000fa16:	f105 0610 	add.w	r6, r5, #16
9000fa1a:	e003      	b.n	9000fa24 <vQueueWaitForMessageRestricted+0x90>
				--cRxLock;
9000fa1c:	1e63      	subs	r3, r4, #1
9000fa1e:	b2da      	uxtb	r2, r3
9000fa20:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000fa22:	b16a      	cbz	r2, 9000fa40 <vQueueWaitForMessageRestricted+0xac>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000fa24:	692b      	ldr	r3, [r5, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000fa26:	4630      	mov	r0, r6
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000fa28:	b153      	cbz	r3, 9000fa40 <vQueueWaitForMessageRestricted+0xac>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000fa2a:	f000 fe57 	bl	900106dc <xTaskRemoveFromEventList>
9000fa2e:	2800      	cmp	r0, #0
9000fa30:	d0f4      	beq.n	9000fa1c <vQueueWaitForMessageRestricted+0x88>
					vTaskMissedYield();
9000fa32:	f000 ff35 	bl	900108a0 <vTaskMissedYield>
				--cRxLock;
9000fa36:	1e63      	subs	r3, r4, #1
9000fa38:	b2da      	uxtb	r2, r3
9000fa3a:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000fa3c:	2a00      	cmp	r2, #0
9000fa3e:	d1f1      	bne.n	9000fa24 <vQueueWaitForMessageRestricted+0x90>
		pxQueue->cRxLock = queueUNLOCKED;
9000fa40:	23ff      	movs	r3, #255	; 0xff
9000fa42:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
	}
9000fa46:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
9000fa4a:	f7fe bded 	b.w	9000e628 <vPortExitCritical>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
9000fa4e:	4622      	mov	r2, r4
9000fa50:	4631      	mov	r1, r6
9000fa52:	f105 0024 	add.w	r0, r5, #36	; 0x24
9000fa56:	f000 fdf7 	bl	90010648 <vTaskPlaceOnEventListRestricted>
9000fa5a:	e7b4      	b.n	9000f9c6 <vQueueWaitForMessageRestricted+0x32>

9000fa5c <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
9000fa5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
9000fa60:	4605      	mov	r5, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
9000fa62:	f7fe fdbf 	bl	9000e5e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
9000fa66:	4a34      	ldr	r2, [pc, #208]	; (9000fb38 <prvAddNewTaskToReadyList+0xdc>)
		if( pxCurrentTCB == NULL )
9000fa68:	4e34      	ldr	r6, [pc, #208]	; (9000fb3c <prvAddNewTaskToReadyList+0xe0>)
		uxCurrentNumberOfTasks++;
9000fa6a:	6813      	ldr	r3, [r2, #0]
9000fa6c:	3301      	adds	r3, #1
9000fa6e:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
9000fa70:	6833      	ldr	r3, [r6, #0]
9000fa72:	2b00      	cmp	r3, #0
9000fa74:	d032      	beq.n	9000fadc <prvAddNewTaskToReadyList+0x80>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
9000fa76:	4c32      	ldr	r4, [pc, #200]	; (9000fb40 <prvAddNewTaskToReadyList+0xe4>)
9000fa78:	6823      	ldr	r3, [r4, #0]
9000fa7a:	b33b      	cbz	r3, 9000facc <prvAddNewTaskToReadyList+0x70>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
9000fa7c:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
9000fa7e:	4f31      	ldr	r7, [pc, #196]	; (9000fb44 <prvAddNewTaskToReadyList+0xe8>)
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
9000fa80:	4a31      	ldr	r2, [pc, #196]	; (9000fb48 <prvAddNewTaskToReadyList+0xec>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
9000fa82:	4932      	ldr	r1, [pc, #200]	; (9000fb4c <prvAddNewTaskToReadyList+0xf0>)
		uxTaskNumber++;
9000fa84:	6813      	ldr	r3, [r2, #0]
9000fa86:	3301      	adds	r3, #1
9000fa88:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
9000fa8a:	646b      	str	r3, [r5, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
9000fa8c:	680b      	ldr	r3, [r1, #0]
9000fa8e:	4283      	cmp	r3, r0
9000fa90:	d200      	bcs.n	9000fa94 <prvAddNewTaskToReadyList+0x38>
9000fa92:	6008      	str	r0, [r1, #0]
9000fa94:	eb00 0080 	add.w	r0, r0, r0, lsl #2
9000fa98:	1d29      	adds	r1, r5, #4
9000fa9a:	eb07 0080 	add.w	r0, r7, r0, lsl #2
9000fa9e:	f7fe fcf7 	bl	9000e490 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
9000faa2:	f7fe fdc1 	bl	9000e628 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
9000faa6:	6823      	ldr	r3, [r4, #0]
9000faa8:	b173      	cbz	r3, 9000fac8 <prvAddNewTaskToReadyList+0x6c>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
9000faaa:	6832      	ldr	r2, [r6, #0]
9000faac:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
9000faae:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
9000fab0:	429a      	cmp	r2, r3
9000fab2:	d209      	bcs.n	9000fac8 <prvAddNewTaskToReadyList+0x6c>
		{
			taskYIELD_IF_USING_PREEMPTION();
9000fab4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
9000fab8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
9000fabc:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
9000fac0:	f3bf 8f4f 	dsb	sy
9000fac4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
9000fac8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
9000facc:	6833      	ldr	r3, [r6, #0]
9000face:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
9000fad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9000fad2:	4f1c      	ldr	r7, [pc, #112]	; (9000fb44 <prvAddNewTaskToReadyList+0xe8>)
9000fad4:	4283      	cmp	r3, r0
9000fad6:	d8d3      	bhi.n	9000fa80 <prvAddNewTaskToReadyList+0x24>
					pxCurrentTCB = pxNewTCB;
9000fad8:	6035      	str	r5, [r6, #0]
9000fada:	e7d1      	b.n	9000fa80 <prvAddNewTaskToReadyList+0x24>
			pxCurrentTCB = pxNewTCB;
9000fadc:	6035      	str	r5, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
9000fade:	6813      	ldr	r3, [r2, #0]
9000fae0:	2b01      	cmp	r3, #1
9000fae2:	d003      	beq.n	9000faec <prvAddNewTaskToReadyList+0x90>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
9000fae4:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
9000fae6:	4f17      	ldr	r7, [pc, #92]	; (9000fb44 <prvAddNewTaskToReadyList+0xe8>)
9000fae8:	4c15      	ldr	r4, [pc, #84]	; (9000fb40 <prvAddNewTaskToReadyList+0xe4>)
9000faea:	e7c9      	b.n	9000fa80 <prvAddNewTaskToReadyList+0x24>
9000faec:	4f15      	ldr	r7, [pc, #84]	; (9000fb44 <prvAddNewTaskToReadyList+0xe8>)
9000faee:	463c      	mov	r4, r7
9000faf0:	f507 688c 	add.w	r8, r7, #1120	; 0x460
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
9000faf4:	4620      	mov	r0, r4
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
9000faf6:	3414      	adds	r4, #20
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
9000faf8:	f7fe fcba 	bl	9000e470 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
9000fafc:	45a0      	cmp	r8, r4
9000fafe:	d1f9      	bne.n	9000faf4 <prvAddNewTaskToReadyList+0x98>
	}

	vListInitialise( &xDelayedTaskList1 );
9000fb00:	f8df 9060 	ldr.w	r9, [pc, #96]	; 9000fb64 <prvAddNewTaskToReadyList+0x108>
	vListInitialise( &xDelayedTaskList2 );
9000fb04:	f8df 8060 	ldr.w	r8, [pc, #96]	; 9000fb68 <prvAddNewTaskToReadyList+0x10c>
	vListInitialise( &xDelayedTaskList1 );
9000fb08:	4648      	mov	r0, r9
9000fb0a:	4c0d      	ldr	r4, [pc, #52]	; (9000fb40 <prvAddNewTaskToReadyList+0xe4>)
9000fb0c:	f7fe fcb0 	bl	9000e470 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
9000fb10:	4640      	mov	r0, r8
9000fb12:	f7fe fcad 	bl	9000e470 <vListInitialise>
	vListInitialise( &xPendingReadyList );
9000fb16:	480e      	ldr	r0, [pc, #56]	; (9000fb50 <prvAddNewTaskToReadyList+0xf4>)
9000fb18:	f7fe fcaa 	bl	9000e470 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
9000fb1c:	480d      	ldr	r0, [pc, #52]	; (9000fb54 <prvAddNewTaskToReadyList+0xf8>)
9000fb1e:	f7fe fca7 	bl	9000e470 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
9000fb22:	480d      	ldr	r0, [pc, #52]	; (9000fb58 <prvAddNewTaskToReadyList+0xfc>)
9000fb24:	f7fe fca4 	bl	9000e470 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
9000fb28:	4b0c      	ldr	r3, [pc, #48]	; (9000fb5c <prvAddNewTaskToReadyList+0x100>)
		prvAddTaskToReadyList( pxNewTCB );
9000fb2a:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
	pxDelayedTaskList = &xDelayedTaskList1;
9000fb2c:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
9000fb30:	4b0b      	ldr	r3, [pc, #44]	; (9000fb60 <prvAddNewTaskToReadyList+0x104>)
9000fb32:	f8c3 8000 	str.w	r8, [r3]
}
9000fb36:	e7a3      	b.n	9000fa80 <prvAddNewTaskToReadyList+0x24>
9000fb38:	24021a4c 	.word	0x24021a4c
9000fb3c:	240215e0 	.word	0x240215e0
9000fb40:	24021aa8 	.word	0x24021aa8
9000fb44:	240215ec 	.word	0x240215ec
9000fb48:	24021a58 	.word	0x24021a58
9000fb4c:	24021a5c 	.word	0x24021a5c
9000fb50:	24021a94 	.word	0x24021a94
9000fb54:	24021ac0 	.word	0x24021ac0
9000fb58:	24021aac 	.word	0x24021aac
9000fb5c:	240215e4 	.word	0x240215e4
9000fb60:	240215e8 	.word	0x240215e8
9000fb64:	24021a60 	.word	0x24021a60
9000fb68:	24021a74 	.word	0x24021a74

9000fb6c <prvIdleTask>:
{
9000fb6c:	b580      	push	{r7, lr}
9000fb6e:	4c22      	ldr	r4, [pc, #136]	; (9000fbf8 <prvIdleTask+0x8c>)
				taskYIELD();
9000fb70:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
9000fb74:	4e21      	ldr	r6, [pc, #132]	; (9000fbfc <prvIdleTask+0x90>)
9000fb76:	f04f 5880 	mov.w	r8, #268435456	; 0x10000000
9000fb7a:	4d21      	ldr	r5, [pc, #132]	; (9000fc00 <prvIdleTask+0x94>)
9000fb7c:	4f21      	ldr	r7, [pc, #132]	; (9000fc04 <prvIdleTask+0x98>)
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
9000fb7e:	6823      	ldr	r3, [r4, #0]
9000fb80:	b353      	cbz	r3, 9000fbd8 <prvIdleTask+0x6c>
		{
			taskENTER_CRITICAL();
9000fb82:	f7fe fd2f 	bl	9000e5e4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
9000fb86:	68f3      	ldr	r3, [r6, #12]
9000fb88:	f8d3 a00c 	ldr.w	sl, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
9000fb8c:	f10a 0004 	add.w	r0, sl, #4
9000fb90:	f7fe fca6 	bl	9000e4e0 <uxListRemove>
				--uxCurrentNumberOfTasks;
9000fb94:	682b      	ldr	r3, [r5, #0]
9000fb96:	3b01      	subs	r3, #1
9000fb98:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
9000fb9a:	6823      	ldr	r3, [r4, #0]
9000fb9c:	3b01      	subs	r3, #1
9000fb9e:	6023      	str	r3, [r4, #0]
			}
			taskEXIT_CRITICAL();
9000fba0:	f7fe fd42 	bl	9000e628 <vPortExitCritical>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
9000fba4:	f89a 305d 	ldrb.w	r3, [sl, #93]	; 0x5d
9000fba8:	b163      	cbz	r3, 9000fbc4 <prvIdleTask+0x58>
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
				vPortFree( pxTCB );
			}
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
9000fbaa:	2b01      	cmp	r3, #1
9000fbac:	d020      	beq.n	9000fbf0 <prvIdleTask+0x84>
			}
			else
			{
				/* Neither the stack nor the TCB were allocated dynamically, so
				nothing needs to be freed. */
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
9000fbae:	2b02      	cmp	r3, #2
9000fbb0:	d0e5      	beq.n	9000fb7e <prvIdleTask+0x12>
9000fbb2:	f04f 0350 	mov.w	r3, #80	; 0x50
9000fbb6:	f383 8811 	msr	BASEPRI, r3
9000fbba:	f3bf 8f6f 	isb	sy
9000fbbe:	f3bf 8f4f 	dsb	sy
9000fbc2:	e7fe      	b.n	9000fbc2 <prvIdleTask+0x56>
				vPortFree( pxTCB->pxStack );
9000fbc4:	f8da 0030 	ldr.w	r0, [sl, #48]	; 0x30
9000fbc8:	f7fe fbee 	bl	9000e3a8 <vPortFree>
				vPortFree( pxTCB );
9000fbcc:	4650      	mov	r0, sl
9000fbce:	f7fe fbeb 	bl	9000e3a8 <vPortFree>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
9000fbd2:	6823      	ldr	r3, [r4, #0]
9000fbd4:	2b00      	cmp	r3, #0
9000fbd6:	d1d4      	bne.n	9000fb82 <prvIdleTask+0x16>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
9000fbd8:	683b      	ldr	r3, [r7, #0]
9000fbda:	2b01      	cmp	r3, #1
9000fbdc:	d905      	bls.n	9000fbea <prvIdleTask+0x7e>
				taskYIELD();
9000fbde:	f8c9 8d04 	str.w	r8, [r9, #3332]	; 0xd04
9000fbe2:	f3bf 8f4f 	dsb	sy
9000fbe6:	f3bf 8f6f 	isb	sy
			vApplicationIdleHook();
9000fbea:	f7f2 ffd9 	bl	90002ba0 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
9000fbee:	e7c6      	b.n	9000fb7e <prvIdleTask+0x12>
				vPortFree( pxTCB );
9000fbf0:	4650      	mov	r0, sl
9000fbf2:	f7fe fbd9 	bl	9000e3a8 <vPortFree>
9000fbf6:	e7c2      	b.n	9000fb7e <prvIdleTask+0x12>
9000fbf8:	24021a50 	.word	0x24021a50
9000fbfc:	24021ac0 	.word	0x24021ac0
9000fc00:	24021a4c 	.word	0x24021a4c
9000fc04:	240215ec 	.word	0x240215ec

9000fc08 <xTaskIncrementTick.part.0>:
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
9000fc08:	4b4a      	ldr	r3, [pc, #296]	; (9000fd34 <xTaskIncrementTick.part.0+0x12c>)
BaseType_t xTaskIncrementTick( void )
9000fc0a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
9000fc0e:	681e      	ldr	r6, [r3, #0]
BaseType_t xTaskIncrementTick( void )
9000fc10:	b083      	sub	sp, #12
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
9000fc12:	3601      	adds	r6, #1
		xTickCount = xConstTickCount;
9000fc14:	601e      	str	r6, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
9000fc16:	2e00      	cmp	r6, #0
9000fc18:	d040      	beq.n	9000fc9c <xTaskIncrementTick.part.0+0x94>
9000fc1a:	f8df b12c 	ldr.w	fp, [pc, #300]	; 9000fd48 <xTaskIncrementTick.part.0+0x140>
		if( xConstTickCount >= xNextTaskUnblockTime )
9000fc1e:	f8db 3000 	ldr.w	r3, [fp]
9000fc22:	429e      	cmp	r6, r3
9000fc24:	d347      	bcc.n	9000fcb6 <xTaskIncrementTick.part.0+0xae>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
9000fc26:	4f44      	ldr	r7, [pc, #272]	; (9000fd38 <xTaskIncrementTick.part.0+0x130>)
9000fc28:	683b      	ldr	r3, [r7, #0]
9000fc2a:	681d      	ldr	r5, [r3, #0]
9000fc2c:	2d00      	cmp	r5, #0
9000fc2e:	d077      	beq.n	9000fd20 <xTaskIncrementTick.part.0+0x118>
BaseType_t xSwitchRequired = pdFALSE;
9000fc30:	2500      	movs	r5, #0
9000fc32:	f8df 9118 	ldr.w	r9, [pc, #280]	; 9000fd4c <xTaskIncrementTick.part.0+0x144>
9000fc36:	f8df a118 	ldr.w	sl, [pc, #280]	; 9000fd50 <xTaskIncrementTick.part.0+0x148>
					prvAddTaskToReadyList( pxTCB );
9000fc3a:	f8df 8118 	ldr.w	r8, [pc, #280]	; 9000fd54 <xTaskIncrementTick.part.0+0x14c>
9000fc3e:	e022      	b.n	9000fc86 <xTaskIncrementTick.part.0+0x7e>
9000fc40:	9101      	str	r1, [sp, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
9000fc42:	f7fe fc4d 	bl	9000e4e0 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
9000fc46:	6aa3      	ldr	r3, [r4, #40]	; 0x28
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
9000fc48:	f104 0018 	add.w	r0, r4, #24
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
9000fc4c:	9901      	ldr	r1, [sp, #4]
9000fc4e:	b113      	cbz	r3, 9000fc56 <xTaskIncrementTick.part.0+0x4e>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
9000fc50:	f7fe fc46 	bl	9000e4e0 <uxListRemove>
9000fc54:	9901      	ldr	r1, [sp, #4]
					prvAddTaskToReadyList( pxTCB );
9000fc56:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
9000fc58:	f8d8 2000 	ldr.w	r2, [r8]
9000fc5c:	eb03 0083 	add.w	r0, r3, r3, lsl #2
9000fc60:	4293      	cmp	r3, r2
9000fc62:	eb09 0080 	add.w	r0, r9, r0, lsl #2
9000fc66:	d901      	bls.n	9000fc6c <xTaskIncrementTick.part.0+0x64>
9000fc68:	f8c8 3000 	str.w	r3, [r8]
9000fc6c:	f7fe fc10 	bl	9000e490 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
9000fc70:	f8da 2000 	ldr.w	r2, [sl]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
9000fc74:	683b      	ldr	r3, [r7, #0]
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
9000fc76:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
9000fc78:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
9000fc7a:	681b      	ldr	r3, [r3, #0]
							xSwitchRequired = pdTRUE;
9000fc7c:	4291      	cmp	r1, r2
9000fc7e:	bf28      	it	cs
9000fc80:	2501      	movcs	r5, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
9000fc82:	2b00      	cmp	r3, #0
9000fc84:	d050      	beq.n	9000fd28 <xTaskIncrementTick.part.0+0x120>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
9000fc86:	683b      	ldr	r3, [r7, #0]
9000fc88:	68db      	ldr	r3, [r3, #12]
9000fc8a:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
9000fc8c:	6863      	ldr	r3, [r4, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
9000fc8e:	1d21      	adds	r1, r4, #4
					if( xConstTickCount < xItemValue )
9000fc90:	429e      	cmp	r6, r3
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
9000fc92:	4608      	mov	r0, r1
					if( xConstTickCount < xItemValue )
9000fc94:	d2d4      	bcs.n	9000fc40 <xTaskIncrementTick.part.0+0x38>
						xNextTaskUnblockTime = xItemValue;
9000fc96:	f8cb 3000 	str.w	r3, [fp]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
9000fc9a:	e011      	b.n	9000fcc0 <xTaskIncrementTick.part.0+0xb8>
			taskSWITCH_DELAYED_LISTS();
9000fc9c:	4b26      	ldr	r3, [pc, #152]	; (9000fd38 <xTaskIncrementTick.part.0+0x130>)
9000fc9e:	681a      	ldr	r2, [r3, #0]
9000fca0:	6812      	ldr	r2, [r2, #0]
9000fca2:	b30a      	cbz	r2, 9000fce8 <xTaskIncrementTick.part.0+0xe0>
9000fca4:	f04f 0350 	mov.w	r3, #80	; 0x50
9000fca8:	f383 8811 	msr	BASEPRI, r3
9000fcac:	f3bf 8f6f 	isb	sy
9000fcb0:	f3bf 8f4f 	dsb	sy
9000fcb4:	e7fe      	b.n	9000fcb4 <xTaskIncrementTick.part.0+0xac>
BaseType_t xSwitchRequired = pdFALSE;
9000fcb6:	2500      	movs	r5, #0
9000fcb8:	f8df 9090 	ldr.w	r9, [pc, #144]	; 9000fd4c <xTaskIncrementTick.part.0+0x144>
9000fcbc:	f8df a090 	ldr.w	sl, [pc, #144]	; 9000fd50 <xTaskIncrementTick.part.0+0x148>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
9000fcc0:	f8da 3000 	ldr.w	r3, [sl]
			if( xYieldPending != pdFALSE )
9000fcc4:	491d      	ldr	r1, [pc, #116]	; (9000fd3c <xTaskIncrementTick.part.0+0x134>)
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
9000fcc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9000fcc8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
9000fccc:	009b      	lsls	r3, r3, #2
9000fcce:	f859 2003 	ldr.w	r2, [r9, r3]
			if( xYieldPending != pdFALSE )
9000fcd2:	680b      	ldr	r3, [r1, #0]
				xSwitchRequired = pdTRUE;
9000fcd4:	2a02      	cmp	r2, #2
9000fcd6:	bf28      	it	cs
9000fcd8:	2501      	movcs	r5, #1
				xSwitchRequired = pdTRUE;
9000fcda:	2b00      	cmp	r3, #0
}
9000fcdc:	bf0c      	ite	eq
9000fcde:	4628      	moveq	r0, r5
9000fce0:	2001      	movne	r0, #1
9000fce2:	b003      	add	sp, #12
9000fce4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			taskSWITCH_DELAYED_LISTS();
9000fce8:	4a15      	ldr	r2, [pc, #84]	; (9000fd40 <xTaskIncrementTick.part.0+0x138>)
9000fcea:	6818      	ldr	r0, [r3, #0]
9000fcec:	6811      	ldr	r1, [r2, #0]
9000fcee:	6019      	str	r1, [r3, #0]
9000fcf0:	4914      	ldr	r1, [pc, #80]	; (9000fd44 <xTaskIncrementTick.part.0+0x13c>)
9000fcf2:	6010      	str	r0, [r2, #0]
9000fcf4:	680a      	ldr	r2, [r1, #0]
9000fcf6:	3201      	adds	r2, #1
9000fcf8:	600a      	str	r2, [r1, #0]

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
9000fcfa:	681a      	ldr	r2, [r3, #0]
9000fcfc:	6812      	ldr	r2, [r2, #0]
9000fcfe:	b932      	cbnz	r2, 9000fd0e <xTaskIncrementTick.part.0+0x106>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
9000fd00:	f8df b044 	ldr.w	fp, [pc, #68]	; 9000fd48 <xTaskIncrementTick.part.0+0x140>
9000fd04:	f04f 33ff 	mov.w	r3, #4294967295
9000fd08:	f8cb 3000 	str.w	r3, [fp]
9000fd0c:	e787      	b.n	9000fc1e <xTaskIncrementTick.part.0+0x16>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
9000fd0e:	681b      	ldr	r3, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
9000fd10:	f8df b034 	ldr.w	fp, [pc, #52]	; 9000fd48 <xTaskIncrementTick.part.0+0x140>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
9000fd14:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
9000fd16:	68db      	ldr	r3, [r3, #12]
9000fd18:	685b      	ldr	r3, [r3, #4]
9000fd1a:	f8cb 3000 	str.w	r3, [fp]
	}
}
9000fd1e:	e77e      	b.n	9000fc1e <xTaskIncrementTick.part.0+0x16>
9000fd20:	f8df 9028 	ldr.w	r9, [pc, #40]	; 9000fd4c <xTaskIncrementTick.part.0+0x144>
9000fd24:	f8df a028 	ldr.w	sl, [pc, #40]	; 9000fd50 <xTaskIncrementTick.part.0+0x148>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
9000fd28:	f04f 33ff 	mov.w	r3, #4294967295
9000fd2c:	f8cb 3000 	str.w	r3, [fp]
					break;
9000fd30:	e7c6      	b.n	9000fcc0 <xTaskIncrementTick.part.0+0xb8>
9000fd32:	bf00      	nop
9000fd34:	24021ad4 	.word	0x24021ad4
9000fd38:	240215e4 	.word	0x240215e4
9000fd3c:	24021ad8 	.word	0x24021ad8
9000fd40:	240215e8 	.word	0x240215e8
9000fd44:	24021a8c 	.word	0x24021a8c
9000fd48:	24021a88 	.word	0x24021a88
9000fd4c:	240215ec 	.word	0x240215ec
9000fd50:	240215e0 	.word	0x240215e0
9000fd54:	24021a5c 	.word	0x24021a5c

9000fd58 <xTaskResumeAll.part.0>:
BaseType_t xTaskResumeAll( void )
9000fd58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		--uxSchedulerSuspended;
9000fd5c:	4d41      	ldr	r5, [pc, #260]	; (9000fe64 <xTaskResumeAll.part.0+0x10c>)
BaseType_t xTaskResumeAll( void )
9000fd5e:	b083      	sub	sp, #12
	taskENTER_CRITICAL();
9000fd60:	f7fe fc40 	bl	9000e5e4 <vPortEnterCritical>
		--uxSchedulerSuspended;
9000fd64:	682b      	ldr	r3, [r5, #0]
9000fd66:	3b01      	subs	r3, #1
9000fd68:	602b      	str	r3, [r5, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
9000fd6a:	682b      	ldr	r3, [r5, #0]
9000fd6c:	2b00      	cmp	r3, #0
9000fd6e:	d161      	bne.n	9000fe34 <xTaskResumeAll.part.0+0xdc>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
9000fd70:	4b3d      	ldr	r3, [pc, #244]	; (9000fe68 <xTaskResumeAll.part.0+0x110>)
9000fd72:	681b      	ldr	r3, [r3, #0]
9000fd74:	2b00      	cmp	r3, #0
9000fd76:	d05d      	beq.n	9000fe34 <xTaskResumeAll.part.0+0xdc>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
9000fd78:	4e3c      	ldr	r6, [pc, #240]	; (9000fe6c <xTaskResumeAll.part.0+0x114>)
9000fd7a:	6833      	ldr	r3, [r6, #0]
9000fd7c:	2b00      	cmp	r3, #0
9000fd7e:	d06e      	beq.n	9000fe5e <xTaskResumeAll.part.0+0x106>
9000fd80:	4f3b      	ldr	r7, [pc, #236]	; (9000fe70 <xTaskResumeAll.part.0+0x118>)
9000fd82:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 9000fe80 <xTaskResumeAll.part.0+0x128>
9000fd86:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 9000fe84 <xTaskResumeAll.part.0+0x12c>
9000fd8a:	f8df a0fc 	ldr.w	sl, [pc, #252]	; 9000fe88 <xTaskResumeAll.part.0+0x130>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
9000fd8e:	68f3      	ldr	r3, [r6, #12]
9000fd90:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
9000fd92:	f104 0b04 	add.w	fp, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
9000fd96:	f104 0018 	add.w	r0, r4, #24
9000fd9a:	f7fe fba1 	bl	9000e4e0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
9000fd9e:	4658      	mov	r0, fp
9000fda0:	f7fe fb9e 	bl	9000e4e0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
9000fda4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
9000fda6:	683a      	ldr	r2, [r7, #0]
9000fda8:	4659      	mov	r1, fp
9000fdaa:	eb03 0083 	add.w	r0, r3, r3, lsl #2
9000fdae:	4293      	cmp	r3, r2
9000fdb0:	eb09 0080 	add.w	r0, r9, r0, lsl #2
9000fdb4:	d900      	bls.n	9000fdb8 <xTaskResumeAll.part.0+0x60>
9000fdb6:	603b      	str	r3, [r7, #0]
9000fdb8:	f7fe fb6a 	bl	9000e490 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
9000fdbc:	f8d8 3000 	ldr.w	r3, [r8]
9000fdc0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
9000fdc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9000fdc4:	429a      	cmp	r2, r3
9000fdc6:	d33d      	bcc.n	9000fe44 <xTaskResumeAll.part.0+0xec>
						xYieldPending = pdTRUE;
9000fdc8:	2301      	movs	r3, #1
9000fdca:	f8ca 3000 	str.w	r3, [sl]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
9000fdce:	6833      	ldr	r3, [r6, #0]
9000fdd0:	2b00      	cmp	r3, #0
9000fdd2:	d1dc      	bne.n	9000fd8e <xTaskResumeAll.part.0+0x36>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
9000fdd4:	4b27      	ldr	r3, [pc, #156]	; (9000fe74 <xTaskResumeAll.part.0+0x11c>)
9000fdd6:	681a      	ldr	r2, [r3, #0]
9000fdd8:	6812      	ldr	r2, [r2, #0]
9000fdda:	2a00      	cmp	r2, #0
9000fddc:	d03a      	beq.n	9000fe54 <xTaskResumeAll.part.0+0xfc>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
9000fdde:	681a      	ldr	r2, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
9000fde0:	4b25      	ldr	r3, [pc, #148]	; (9000fe78 <xTaskResumeAll.part.0+0x120>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
9000fde2:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
9000fde4:	68d2      	ldr	r2, [r2, #12]
9000fde6:	6852      	ldr	r2, [r2, #4]
9000fde8:	601a      	str	r2, [r3, #0]
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
9000fdea:	4e24      	ldr	r6, [pc, #144]	; (9000fe7c <xTaskResumeAll.part.0+0x124>)
9000fdec:	6834      	ldr	r4, [r6, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
9000fdee:	b194      	cbz	r4, 9000fe16 <xTaskResumeAll.part.0+0xbe>
								xYieldPending = pdTRUE;
9000fdf0:	2701      	movs	r7, #1
9000fdf2:	e006      	b.n	9000fe02 <xTaskResumeAll.part.0+0xaa>
9000fdf4:	f7ff ff08 	bl	9000fc08 <xTaskIncrementTick.part.0>
							if( xTaskIncrementTick() != pdFALSE )
9000fdf8:	b108      	cbz	r0, 9000fdfe <xTaskResumeAll.part.0+0xa6>
								xYieldPending = pdTRUE;
9000fdfa:	f8ca 7000 	str.w	r7, [sl]
						} while( xPendedCounts > ( TickType_t ) 0U );
9000fdfe:	3c01      	subs	r4, #1
9000fe00:	d008      	beq.n	9000fe14 <xTaskResumeAll.part.0+0xbc>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
9000fe02:	682b      	ldr	r3, [r5, #0]
9000fe04:	2b00      	cmp	r3, #0
9000fe06:	d0f5      	beq.n	9000fdf4 <xTaskResumeAll.part.0+0x9c>
		++xPendedTicks;
9000fe08:	6833      	ldr	r3, [r6, #0]
						} while( xPendedCounts > ( TickType_t ) 0U );
9000fe0a:	3c01      	subs	r4, #1
		++xPendedTicks;
9000fe0c:	f103 0301 	add.w	r3, r3, #1
9000fe10:	6033      	str	r3, [r6, #0]
						} while( xPendedCounts > ( TickType_t ) 0U );
9000fe12:	d1f6      	bne.n	9000fe02 <xTaskResumeAll.part.0+0xaa>
						xPendedTicks = 0;
9000fe14:	6034      	str	r4, [r6, #0]
				if( xYieldPending != pdFALSE )
9000fe16:	f8da 3000 	ldr.w	r3, [sl]
9000fe1a:	b15b      	cbz	r3, 9000fe34 <xTaskResumeAll.part.0+0xdc>
					taskYIELD_IF_USING_PREEMPTION();
9000fe1c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
9000fe20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
9000fe24:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
9000fe28:	f3bf 8f4f 	dsb	sy
9000fe2c:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
9000fe30:	2001      	movs	r0, #1
9000fe32:	e000      	b.n	9000fe36 <xTaskResumeAll.part.0+0xde>
BaseType_t xAlreadyYielded = pdFALSE;
9000fe34:	2000      	movs	r0, #0
9000fe36:	9001      	str	r0, [sp, #4]
	taskEXIT_CRITICAL();
9000fe38:	f7fe fbf6 	bl	9000e628 <vPortExitCritical>
}
9000fe3c:	9801      	ldr	r0, [sp, #4]
9000fe3e:	b003      	add	sp, #12
9000fe40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
9000fe44:	6833      	ldr	r3, [r6, #0]
9000fe46:	2b00      	cmp	r3, #0
9000fe48:	d1a1      	bne.n	9000fd8e <xTaskResumeAll.part.0+0x36>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
9000fe4a:	4b0a      	ldr	r3, [pc, #40]	; (9000fe74 <xTaskResumeAll.part.0+0x11c>)
9000fe4c:	681a      	ldr	r2, [r3, #0]
9000fe4e:	6812      	ldr	r2, [r2, #0]
9000fe50:	2a00      	cmp	r2, #0
9000fe52:	d1c4      	bne.n	9000fdde <xTaskResumeAll.part.0+0x86>
		xNextTaskUnblockTime = portMAX_DELAY;
9000fe54:	4b08      	ldr	r3, [pc, #32]	; (9000fe78 <xTaskResumeAll.part.0+0x120>)
9000fe56:	f04f 32ff 	mov.w	r2, #4294967295
9000fe5a:	601a      	str	r2, [r3, #0]
9000fe5c:	e7c5      	b.n	9000fdea <xTaskResumeAll.part.0+0x92>
9000fe5e:	f8df a028 	ldr.w	sl, [pc, #40]	; 9000fe88 <xTaskResumeAll.part.0+0x130>
9000fe62:	e7c2      	b.n	9000fdea <xTaskResumeAll.part.0+0x92>
9000fe64:	24021a54 	.word	0x24021a54
9000fe68:	24021a4c 	.word	0x24021a4c
9000fe6c:	24021a94 	.word	0x24021a94
9000fe70:	24021a5c 	.word	0x24021a5c
9000fe74:	240215e4 	.word	0x240215e4
9000fe78:	24021a88 	.word	0x24021a88
9000fe7c:	24021a90 	.word	0x24021a90
9000fe80:	240215ec 	.word	0x240215ec
9000fe84:	240215e0 	.word	0x240215e0
9000fe88:	24021ad8 	.word	0x24021ad8

9000fe8c <xTaskCreateStatic>:
	{
9000fe8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
9000fe90:	b083      	sub	sp, #12
9000fe92:	4698      	mov	r8, r3
		configASSERT( puxStackBuffer != NULL );
9000fe94:	e9dd 340b 	ldrd	r3, r4, [sp, #44]	; 0x2c
9000fe98:	b1bb      	cbz	r3, 9000feca <xTaskCreateStatic+0x3e>
		configASSERT( pxTaskBuffer != NULL );
9000fe9a:	b16c      	cbz	r4, 9000feb8 <xTaskCreateStatic+0x2c>
			volatile size_t xSize = sizeof( StaticTask_t );
9000fe9c:	2360      	movs	r3, #96	; 0x60
9000fe9e:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( TCB_t ) );
9000fea0:	9b01      	ldr	r3, [sp, #4]
9000fea2:	2b60      	cmp	r3, #96	; 0x60
9000fea4:	d01a      	beq.n	9000fedc <xTaskCreateStatic+0x50>
9000fea6:	f04f 0350 	mov.w	r3, #80	; 0x50
9000feaa:	f383 8811 	msr	BASEPRI, r3
9000feae:	f3bf 8f6f 	isb	sy
9000feb2:	f3bf 8f4f 	dsb	sy
9000feb6:	e7fe      	b.n	9000feb6 <xTaskCreateStatic+0x2a>
9000feb8:	f04f 0350 	mov.w	r3, #80	; 0x50
9000febc:	f383 8811 	msr	BASEPRI, r3
9000fec0:	f3bf 8f6f 	isb	sy
9000fec4:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
9000fec8:	e7fe      	b.n	9000fec8 <xTaskCreateStatic+0x3c>
9000feca:	f04f 0350 	mov.w	r3, #80	; 0x50
9000fece:	f383 8811 	msr	BASEPRI, r3
9000fed2:	f3bf 8f6f 	isb	sy
9000fed6:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
9000feda:	e7fe      	b.n	9000feda <xTaskCreateStatic+0x4e>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
9000fedc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
9000fede:	0096      	lsls	r6, r2, #2
9000fee0:	4607      	mov	r7, r0
9000fee2:	460d      	mov	r5, r1
9000fee4:	4618      	mov	r0, r3
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
9000fee6:	6323      	str	r3, [r4, #48]	; 0x30
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
9000fee8:	9b01      	ldr	r3, [sp, #4]
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
9000feea:	2302      	movs	r3, #2
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
9000feec:	4632      	mov	r2, r6
9000feee:	21a5      	movs	r1, #165	; 0xa5
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
9000fef0:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
9000fef4:	f014 fbd4 	bl	900246a0 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
9000fef8:	1f32      	subs	r2, r6, #4
9000fefa:	6b23      	ldr	r3, [r4, #48]	; 0x30
9000fefc:	4413      	add	r3, r2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
9000fefe:	f023 0907 	bic.w	r9, r3, #7
	if( pcName != NULL )
9000ff02:	2d00      	cmp	r5, #0
9000ff04:	d069      	beq.n	9000ffda <xTaskCreateStatic+0x14e>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000ff06:	782b      	ldrb	r3, [r5, #0]
9000ff08:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
			if( pcName[ x ] == ( char ) 0x00 )
9000ff0c:	2b00      	cmp	r3, #0
9000ff0e:	d03b      	beq.n	9000ff88 <xTaskCreateStatic+0xfc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000ff10:	786b      	ldrb	r3, [r5, #1]
9000ff12:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
			if( pcName[ x ] == ( char ) 0x00 )
9000ff16:	2b00      	cmp	r3, #0
9000ff18:	d036      	beq.n	9000ff88 <xTaskCreateStatic+0xfc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000ff1a:	78ab      	ldrb	r3, [r5, #2]
9000ff1c:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
			if( pcName[ x ] == ( char ) 0x00 )
9000ff20:	b393      	cbz	r3, 9000ff88 <xTaskCreateStatic+0xfc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000ff22:	78eb      	ldrb	r3, [r5, #3]
9000ff24:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
			if( pcName[ x ] == ( char ) 0x00 )
9000ff28:	b373      	cbz	r3, 9000ff88 <xTaskCreateStatic+0xfc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000ff2a:	792b      	ldrb	r3, [r5, #4]
9000ff2c:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
			if( pcName[ x ] == ( char ) 0x00 )
9000ff30:	b353      	cbz	r3, 9000ff88 <xTaskCreateStatic+0xfc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000ff32:	796b      	ldrb	r3, [r5, #5]
9000ff34:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
			if( pcName[ x ] == ( char ) 0x00 )
9000ff38:	b333      	cbz	r3, 9000ff88 <xTaskCreateStatic+0xfc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000ff3a:	79ab      	ldrb	r3, [r5, #6]
9000ff3c:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
			if( pcName[ x ] == ( char ) 0x00 )
9000ff40:	b313      	cbz	r3, 9000ff88 <xTaskCreateStatic+0xfc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000ff42:	79eb      	ldrb	r3, [r5, #7]
9000ff44:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
			if( pcName[ x ] == ( char ) 0x00 )
9000ff48:	b1f3      	cbz	r3, 9000ff88 <xTaskCreateStatic+0xfc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000ff4a:	7a2b      	ldrb	r3, [r5, #8]
9000ff4c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
			if( pcName[ x ] == ( char ) 0x00 )
9000ff50:	b1d3      	cbz	r3, 9000ff88 <xTaskCreateStatic+0xfc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000ff52:	7a6b      	ldrb	r3, [r5, #9]
9000ff54:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
			if( pcName[ x ] == ( char ) 0x00 )
9000ff58:	b1b3      	cbz	r3, 9000ff88 <xTaskCreateStatic+0xfc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000ff5a:	7aab      	ldrb	r3, [r5, #10]
9000ff5c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
			if( pcName[ x ] == ( char ) 0x00 )
9000ff60:	b193      	cbz	r3, 9000ff88 <xTaskCreateStatic+0xfc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000ff62:	7aeb      	ldrb	r3, [r5, #11]
9000ff64:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
			if( pcName[ x ] == ( char ) 0x00 )
9000ff68:	b173      	cbz	r3, 9000ff88 <xTaskCreateStatic+0xfc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000ff6a:	7b2b      	ldrb	r3, [r5, #12]
9000ff6c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
			if( pcName[ x ] == ( char ) 0x00 )
9000ff70:	b153      	cbz	r3, 9000ff88 <xTaskCreateStatic+0xfc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000ff72:	7b6b      	ldrb	r3, [r5, #13]
9000ff74:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
			if( pcName[ x ] == ( char ) 0x00 )
9000ff78:	b133      	cbz	r3, 9000ff88 <xTaskCreateStatic+0xfc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000ff7a:	7bab      	ldrb	r3, [r5, #14]
9000ff7c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
			if( pcName[ x ] == ( char ) 0x00 )
9000ff80:	b113      	cbz	r3, 9000ff88 <xTaskCreateStatic+0xfc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000ff82:	7beb      	ldrb	r3, [r5, #15]
9000ff84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
9000ff88:	2300      	movs	r3, #0
9000ff8a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
9000ff8e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
		pxNewTCB->uxMutexesHeld = 0;
9000ff90:	2600      	movs	r6, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
9000ff92:	1d20      	adds	r0, r4, #4
9000ff94:	2d37      	cmp	r5, #55	; 0x37
		pxNewTCB->uxMutexesHeld = 0;
9000ff96:	6526      	str	r6, [r4, #80]	; 0x50
9000ff98:	bf28      	it	cs
9000ff9a:	2537      	movcs	r5, #55	; 0x37
	pxNewTCB->uxPriority = uxPriority;
9000ff9c:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
9000ff9e:	64e5      	str	r5, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
9000ffa0:	f1c5 0538 	rsb	r5, r5, #56	; 0x38
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
9000ffa4:	f7fe fa70 	bl	9000e488 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
9000ffa8:	f104 0018 	add.w	r0, r4, #24
9000ffac:	f7fe fa6c 	bl	9000e488 <vListInitialiseItem>
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
9000ffb0:	4642      	mov	r2, r8
9000ffb2:	4639      	mov	r1, r7
		pxNewTCB->ulNotifiedValue = 0;
9000ffb4:	65a6      	str	r6, [r4, #88]	; 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
9000ffb6:	4648      	mov	r0, r9
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
9000ffb8:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
9000ffba:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
9000ffbc:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->pxTaskTag = NULL;
9000ffbe:	6566      	str	r6, [r4, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
9000ffc0:	f884 605c 	strb.w	r6, [r4, #92]	; 0x5c
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
9000ffc4:	f7fe fade 	bl	9000e584 <pxPortInitialiseStack>
9000ffc8:	4603      	mov	r3, r0
			prvAddNewTaskToReadyList( pxNewTCB );
9000ffca:	4620      	mov	r0, r4
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
9000ffcc:	6023      	str	r3, [r4, #0]
			prvAddNewTaskToReadyList( pxNewTCB );
9000ffce:	f7ff fd45 	bl	9000fa5c <prvAddNewTaskToReadyList>
	}
9000ffd2:	4620      	mov	r0, r4
9000ffd4:	b003      	add	sp, #12
9000ffd6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
9000ffda:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
9000ffde:	e7d6      	b.n	9000ff8e <xTaskCreateStatic+0x102>

9000ffe0 <xTaskCreate>:
	{
9000ffe0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
9000ffe4:	0096      	lsls	r6, r2, #2
	{
9000ffe6:	4680      	mov	r8, r0
9000ffe8:	460d      	mov	r5, r1
9000ffea:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
9000ffec:	4630      	mov	r0, r6
9000ffee:	f7fe f91d 	bl	9000e22c <pvPortMalloc>
			if( pxStack != NULL )
9000fff2:	2800      	cmp	r0, #0
9000fff4:	f000 8083 	beq.w	900100fe <xTaskCreate+0x11e>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
9000fff8:	4607      	mov	r7, r0
9000fffa:	2060      	movs	r0, #96	; 0x60
9000fffc:	f7fe f916 	bl	9000e22c <pvPortMalloc>
				if( pxNewTCB != NULL )
90010000:	4604      	mov	r4, r0
90010002:	2800      	cmp	r0, #0
90010004:	d07f      	beq.n	90010106 <xTaskCreate+0x126>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
90010006:	2300      	movs	r3, #0
					pxNewTCB->pxStack = pxStack;
90010008:	6307      	str	r7, [r0, #48]	; 0x30
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
9001000a:	4632      	mov	r2, r6
9001000c:	4638      	mov	r0, r7
9001000e:	21a5      	movs	r1, #165	; 0xa5
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
90010010:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
90010014:	f014 fb44 	bl	900246a0 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
90010018:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
	if( pcName != NULL )
9001001c:	2d00      	cmp	r5, #0
9001001e:	d078      	beq.n	90010112 <xTaskCreate+0x132>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
90010020:	782b      	ldrb	r3, [r5, #0]
90010022:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
			if( pcName[ x ] == ( char ) 0x00 )
90010026:	2b00      	cmp	r3, #0
90010028:	d03b      	beq.n	900100a2 <xTaskCreate+0xc2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9001002a:	786b      	ldrb	r3, [r5, #1]
9001002c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
			if( pcName[ x ] == ( char ) 0x00 )
90010030:	2b00      	cmp	r3, #0
90010032:	d036      	beq.n	900100a2 <xTaskCreate+0xc2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
90010034:	78ab      	ldrb	r3, [r5, #2]
90010036:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
			if( pcName[ x ] == ( char ) 0x00 )
9001003a:	b393      	cbz	r3, 900100a2 <xTaskCreate+0xc2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9001003c:	78eb      	ldrb	r3, [r5, #3]
9001003e:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
			if( pcName[ x ] == ( char ) 0x00 )
90010042:	b373      	cbz	r3, 900100a2 <xTaskCreate+0xc2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
90010044:	792b      	ldrb	r3, [r5, #4]
90010046:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
			if( pcName[ x ] == ( char ) 0x00 )
9001004a:	b353      	cbz	r3, 900100a2 <xTaskCreate+0xc2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9001004c:	796b      	ldrb	r3, [r5, #5]
9001004e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
			if( pcName[ x ] == ( char ) 0x00 )
90010052:	b333      	cbz	r3, 900100a2 <xTaskCreate+0xc2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
90010054:	79ab      	ldrb	r3, [r5, #6]
90010056:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
			if( pcName[ x ] == ( char ) 0x00 )
9001005a:	b313      	cbz	r3, 900100a2 <xTaskCreate+0xc2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9001005c:	79eb      	ldrb	r3, [r5, #7]
9001005e:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
			if( pcName[ x ] == ( char ) 0x00 )
90010062:	b1f3      	cbz	r3, 900100a2 <xTaskCreate+0xc2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
90010064:	7a2b      	ldrb	r3, [r5, #8]
90010066:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
			if( pcName[ x ] == ( char ) 0x00 )
9001006a:	b1d3      	cbz	r3, 900100a2 <xTaskCreate+0xc2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9001006c:	7a6b      	ldrb	r3, [r5, #9]
9001006e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
			if( pcName[ x ] == ( char ) 0x00 )
90010072:	b1b3      	cbz	r3, 900100a2 <xTaskCreate+0xc2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
90010074:	7aab      	ldrb	r3, [r5, #10]
90010076:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
			if( pcName[ x ] == ( char ) 0x00 )
9001007a:	b193      	cbz	r3, 900100a2 <xTaskCreate+0xc2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9001007c:	7aeb      	ldrb	r3, [r5, #11]
9001007e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
			if( pcName[ x ] == ( char ) 0x00 )
90010082:	b173      	cbz	r3, 900100a2 <xTaskCreate+0xc2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
90010084:	7b2b      	ldrb	r3, [r5, #12]
90010086:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
			if( pcName[ x ] == ( char ) 0x00 )
9001008a:	b153      	cbz	r3, 900100a2 <xTaskCreate+0xc2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9001008c:	7b6b      	ldrb	r3, [r5, #13]
9001008e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
			if( pcName[ x ] == ( char ) 0x00 )
90010092:	b133      	cbz	r3, 900100a2 <xTaskCreate+0xc2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
90010094:	7bab      	ldrb	r3, [r5, #14]
90010096:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
			if( pcName[ x ] == ( char ) 0x00 )
9001009a:	b113      	cbz	r3, 900100a2 <xTaskCreate+0xc2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9001009c:	7beb      	ldrb	r3, [r5, #15]
9001009e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
900100a2:	2300      	movs	r3, #0
900100a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
900100a8:	9d08      	ldr	r5, [sp, #32]
		pxNewTCB->uxMutexesHeld = 0;
900100aa:	2700      	movs	r7, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
900100ac:	1d20      	adds	r0, r4, #4
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
900100ae:	3e04      	subs	r6, #4
900100b0:	2d37      	cmp	r5, #55	; 0x37
		pxNewTCB->uxMutexesHeld = 0;
900100b2:	6527      	str	r7, [r4, #80]	; 0x50
900100b4:	bf28      	it	cs
900100b6:	2537      	movcs	r5, #55	; 0x37
	pxNewTCB->uxPriority = uxPriority;
900100b8:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
900100ba:	64e5      	str	r5, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
900100bc:	f1c5 0538 	rsb	r5, r5, #56	; 0x38
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
900100c0:	f7fe f9e2 	bl	9000e488 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
900100c4:	f104 0018 	add.w	r0, r4, #24
900100c8:	f7fe f9de 	bl	9000e488 <vListInitialiseItem>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
900100cc:	eb0a 0006 	add.w	r0, sl, r6
		pxNewTCB->ulNotifiedValue = 0;
900100d0:	65a7      	str	r7, [r4, #88]	; 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
900100d2:	464a      	mov	r2, r9
900100d4:	4641      	mov	r1, r8
900100d6:	f020 0007 	bic.w	r0, r0, #7
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
900100da:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
900100dc:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
900100de:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->pxTaskTag = NULL;
900100e0:	6567      	str	r7, [r4, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
900100e2:	f884 705c 	strb.w	r7, [r4, #92]	; 0x5c
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
900100e6:	f7fe fa4d 	bl	9000e584 <pxPortInitialiseStack>
	if( pxCreatedTask != NULL )
900100ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
900100ec:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
900100ee:	b103      	cbz	r3, 900100f2 <xTaskCreate+0x112>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
900100f0:	601c      	str	r4, [r3, #0]
			prvAddNewTaskToReadyList( pxNewTCB );
900100f2:	4620      	mov	r0, r4
900100f4:	f7ff fcb2 	bl	9000fa5c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
900100f8:	2001      	movs	r0, #1
	}
900100fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
900100fe:	f04f 30ff 	mov.w	r0, #4294967295
	}
90010102:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					vPortFree( pxStack );
90010106:	4638      	mov	r0, r7
90010108:	f7fe f94e 	bl	9000e3a8 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
9001010c:	f04f 30ff 	mov.w	r0, #4294967295
90010110:	e7f3      	b.n	900100fa <xTaskCreate+0x11a>
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
90010112:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
90010116:	e7c7      	b.n	900100a8 <xTaskCreate+0xc8>

90010118 <vTaskDelay>:
	{
90010118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
9001011a:	b950      	cbnz	r0, 90010132 <vTaskDelay+0x1a>
			portYIELD_WITHIN_API();
9001011c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
90010120:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
90010124:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
90010128:	f3bf 8f4f 	dsb	sy
9001012c:	f3bf 8f6f 	isb	sy
	}
90010130:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			configASSERT( uxSchedulerSuspended == 0 );
90010132:	4d1e      	ldr	r5, [pc, #120]	; (900101ac <vTaskDelay+0x94>)
90010134:	682b      	ldr	r3, [r5, #0]
90010136:	b143      	cbz	r3, 9001014a <vTaskDelay+0x32>
90010138:	f04f 0350 	mov.w	r3, #80	; 0x50
9001013c:	f383 8811 	msr	BASEPRI, r3
90010140:	f3bf 8f6f 	isb	sy
90010144:	f3bf 8f4f 	dsb	sy
90010148:	e7fe      	b.n	90010148 <vTaskDelay+0x30>
	++uxSchedulerSuspended;
9001014a:	682b      	ldr	r3, [r5, #0]
9001014c:	4604      	mov	r4, r0
9001014e:	3301      	adds	r3, #1
90010150:	602b      	str	r3, [r5, #0]
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
90010152:	4b17      	ldr	r3, [pc, #92]	; (900101b0 <vTaskDelay+0x98>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
90010154:	4e17      	ldr	r6, [pc, #92]	; (900101b4 <vTaskDelay+0x9c>)
const TickType_t xConstTickCount = xTickCount;
90010156:	681f      	ldr	r7, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
90010158:	6830      	ldr	r0, [r6, #0]
9001015a:	3004      	adds	r0, #4
9001015c:	f7fe f9c0 	bl	9000e4e0 <uxListRemove>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
90010160:	19e4      	adds	r4, r4, r7

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
90010162:	6833      	ldr	r3, [r6, #0]
90010164:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
90010166:	d315      	bcc.n	90010194 <vTaskDelay+0x7c>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
90010168:	4b13      	ldr	r3, [pc, #76]	; (900101b8 <vTaskDelay+0xa0>)
9001016a:	6818      	ldr	r0, [r3, #0]
9001016c:	6831      	ldr	r1, [r6, #0]
9001016e:	3104      	adds	r1, #4
90010170:	f7fe f99e 	bl	9000e4b0 <vListInsert>
	configASSERT( uxSchedulerSuspended );
90010174:	682b      	ldr	r3, [r5, #0]
90010176:	b943      	cbnz	r3, 9001018a <vTaskDelay+0x72>
90010178:	f04f 0350 	mov.w	r3, #80	; 0x50
9001017c:	f383 8811 	msr	BASEPRI, r3
90010180:	f3bf 8f6f 	isb	sy
90010184:	f3bf 8f4f 	dsb	sy
90010188:	e7fe      	b.n	90010188 <vTaskDelay+0x70>
9001018a:	f7ff fde5 	bl	9000fd58 <xTaskResumeAll.part.0>
		if( xAlreadyYielded == pdFALSE )
9001018e:	2800      	cmp	r0, #0
90010190:	d0c4      	beq.n	9001011c <vTaskDelay+0x4>
	}
90010192:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
90010194:	4b09      	ldr	r3, [pc, #36]	; (900101bc <vTaskDelay+0xa4>)
90010196:	6818      	ldr	r0, [r3, #0]
90010198:	6831      	ldr	r1, [r6, #0]
9001019a:	3104      	adds	r1, #4
9001019c:	f7fe f988 	bl	9000e4b0 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
900101a0:	4b07      	ldr	r3, [pc, #28]	; (900101c0 <vTaskDelay+0xa8>)
900101a2:	681a      	ldr	r2, [r3, #0]
900101a4:	4294      	cmp	r4, r2
900101a6:	d2e5      	bcs.n	90010174 <vTaskDelay+0x5c>
				{
					xNextTaskUnblockTime = xTimeToWake;
900101a8:	601c      	str	r4, [r3, #0]
900101aa:	e7e3      	b.n	90010174 <vTaskDelay+0x5c>
900101ac:	24021a54 	.word	0x24021a54
900101b0:	24021ad4 	.word	0x24021ad4
900101b4:	240215e0 	.word	0x240215e0
900101b8:	240215e8 	.word	0x240215e8
900101bc:	240215e4 	.word	0x240215e4
900101c0:	24021a88 	.word	0x24021a88

900101c4 <vTaskStartScheduler>:
{
900101c4:	b570      	push	{r4, r5, r6, lr}
900101c6:	b084      	sub	sp, #16
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
900101c8:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
900101ca:	4668      	mov	r0, sp
900101cc:	aa02      	add	r2, sp, #8
900101ce:	a901      	add	r1, sp, #4
		StackType_t *pxIdleTaskStackBuffer = NULL;
900101d0:	e9cd 4400 	strd	r4, r4, [sp]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
900101d4:	f7fd fe7c 	bl	9000ded0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
900101d8:	9d00      	ldr	r5, [sp, #0]
900101da:	e9dd 0601 	ldrd	r0, r6, [sp, #4]
		configASSERT( puxStackBuffer != NULL );
900101de:	b1b8      	cbz	r0, 90010210 <vTaskStartScheduler+0x4c>
		configASSERT( pxTaskBuffer != NULL );
900101e0:	b16d      	cbz	r5, 900101fe <vTaskStartScheduler+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
900101e2:	2260      	movs	r2, #96	; 0x60
900101e4:	9203      	str	r2, [sp, #12]
			configASSERT( xSize == sizeof( TCB_t ) );
900101e6:	9a03      	ldr	r2, [sp, #12]
900101e8:	2a60      	cmp	r2, #96	; 0x60
900101ea:	d01a      	beq.n	90010222 <vTaskStartScheduler+0x5e>
900101ec:	f04f 0350 	mov.w	r3, #80	; 0x50
900101f0:	f383 8811 	msr	BASEPRI, r3
900101f4:	f3bf 8f6f 	isb	sy
900101f8:	f3bf 8f4f 	dsb	sy
900101fc:	e7fe      	b.n	900101fc <vTaskStartScheduler+0x38>
900101fe:	f04f 0350 	mov.w	r3, #80	; 0x50
90010202:	f383 8811 	msr	BASEPRI, r3
90010206:	f3bf 8f6f 	isb	sy
9001020a:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
9001020e:	e7fe      	b.n	9001020e <vTaskStartScheduler+0x4a>
90010210:	f04f 0350 	mov.w	r3, #80	; 0x50
90010214:	f383 8811 	msr	BASEPRI, r3
90010218:	f3bf 8f6f 	isb	sy
9001021c:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
90010220:	e7fe      	b.n	90010220 <vTaskStartScheduler+0x5c>
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
90010222:	00b6      	lsls	r6, r6, #2
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
90010224:	2302      	movs	r3, #2
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
90010226:	21a5      	movs	r1, #165	; 0xa5
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
90010228:	6328      	str	r0, [r5, #48]	; 0x30
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
9001022a:	4632      	mov	r2, r6
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
9001022c:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
90010230:	9b03      	ldr	r3, [sp, #12]
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
90010232:	f014 fa35 	bl	900246a0 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
90010236:	1f33      	subs	r3, r6, #4
90010238:	6b2a      	ldr	r2, [r5, #48]	; 0x30
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9001023a:	492a      	ldr	r1, [pc, #168]	; (900102e4 <vTaskStartScheduler+0x120>)
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
9001023c:	1d28      	adds	r0, r5, #4
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
9001023e:	441a      	add	r2, r3
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
90010240:	f885 4038 	strb.w	r4, [r5, #56]	; 0x38
90010244:	6369      	str	r1, [r5, #52]	; 0x34
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
90010246:	f885 4043 	strb.w	r4, [r5, #67]	; 0x43
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
9001024a:	f022 0607 	bic.w	r6, r2, #7
	pxNewTCB->uxPriority = uxPriority;
9001024e:	62ec      	str	r4, [r5, #44]	; 0x2c
		pxNewTCB->uxMutexesHeld = 0;
90010250:	e9c5 4413 	strd	r4, r4, [r5, #76]	; 0x4c
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
90010254:	f7fe f918 	bl	9000e488 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
90010258:	f105 0018 	add.w	r0, r5, #24
9001025c:	f7fe f914 	bl	9000e488 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
90010260:	2338      	movs	r3, #56	; 0x38
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
90010262:	4622      	mov	r2, r4
90010264:	4920      	ldr	r1, [pc, #128]	; (900102e8 <vTaskStartScheduler+0x124>)
		pxNewTCB->ulNotifiedValue = 0;
90010266:	65ac      	str	r4, [r5, #88]	; 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
90010268:	4630      	mov	r0, r6
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
9001026a:	61ab      	str	r3, [r5, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
9001026c:	612d      	str	r5, [r5, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
9001026e:	626d      	str	r5, [r5, #36]	; 0x24
		pxNewTCB->pxTaskTag = NULL;
90010270:	656c      	str	r4, [r5, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
90010272:	f885 405c 	strb.w	r4, [r5, #92]	; 0x5c
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
90010276:	f7fe f985 	bl	9000e584 <pxPortInitialiseStack>
9001027a:	4603      	mov	r3, r0
			prvAddNewTaskToReadyList( pxNewTCB );
9001027c:	4628      	mov	r0, r5
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
9001027e:	602b      	str	r3, [r5, #0]
			prvAddNewTaskToReadyList( pxNewTCB );
90010280:	f7ff fbec 	bl	9000fa5c <prvAddNewTaskToReadyList>
			xReturn = xTimerCreateTimerTask();
90010284:	f000 fdb8 	bl	90010df8 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
90010288:	2801      	cmp	r0, #1
9001028a:	d00c      	beq.n	900102a6 <vTaskStartScheduler+0xe2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
9001028c:	3001      	adds	r0, #1
9001028e:	d001      	beq.n	90010294 <vTaskStartScheduler+0xd0>
}
90010290:	b004      	add	sp, #16
90010292:	bd70      	pop	{r4, r5, r6, pc}
90010294:	f04f 0350 	mov.w	r3, #80	; 0x50
90010298:	f383 8811 	msr	BASEPRI, r3
9001029c:	f3bf 8f6f 	isb	sy
900102a0:	f3bf 8f4f 	dsb	sy
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
900102a4:	e7fe      	b.n	900102a4 <vTaskStartScheduler+0xe0>
900102a6:	f04f 0350 	mov.w	r3, #80	; 0x50
900102aa:	f383 8811 	msr	BASEPRI, r3
900102ae:	f3bf 8f6f 	isb	sy
900102b2:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
900102b6:	4b0d      	ldr	r3, [pc, #52]	; (900102ec <vTaskStartScheduler+0x128>)
900102b8:	f04f 32ff 	mov.w	r2, #4294967295
		xSchedulerRunning = pdTRUE;
900102bc:	490c      	ldr	r1, [pc, #48]	; (900102f0 <vTaskStartScheduler+0x12c>)
		xNextTaskUnblockTime = portMAX_DELAY;
900102be:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
900102c0:	4b0c      	ldr	r3, [pc, #48]	; (900102f4 <vTaskStartScheduler+0x130>)
		traceTASK_SWITCHED_IN();
900102c2:	4a0d      	ldr	r2, [pc, #52]	; (900102f8 <vTaskStartScheduler+0x134>)
		xSchedulerRunning = pdTRUE;
900102c4:	6008      	str	r0, [r1, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
900102c6:	601c      	str	r4, [r3, #0]
		traceTASK_SWITCHED_IN();
900102c8:	6813      	ldr	r3, [r2, #0]
		if( xTask == NULL )
900102ca:	b143      	cbz	r3, 900102de <vTaskStartScheduler+0x11a>
		if( xTCB->pxTaskTag != NULL )
900102cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
900102ce:	b10b      	cbz	r3, 900102d4 <vTaskStartScheduler+0x110>
			xReturn = xTCB->pxTaskTag( pvParameter );
900102d0:	2000      	movs	r0, #0
900102d2:	4798      	blx	r3
}
900102d4:	b004      	add	sp, #16
900102d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		if( xPortStartScheduler() != pdFALSE )
900102da:	f7fe ba15 	b.w	9000e708 <xPortStartScheduler>
			xTCB = pxCurrentTCB;
900102de:	6813      	ldr	r3, [r2, #0]
900102e0:	e7f4      	b.n	900102cc <vTaskStartScheduler+0x108>
900102e2:	bf00      	nop
900102e4:	454c4449 	.word	0x454c4449
900102e8:	9000fb6d 	.word	0x9000fb6d
900102ec:	24021a88 	.word	0x24021a88
900102f0:	24021aa8 	.word	0x24021aa8
900102f4:	24021ad4 	.word	0x24021ad4
900102f8:	240215e0 	.word	0x240215e0

900102fc <vTaskSuspendAll>:
	++uxSchedulerSuspended;
900102fc:	4a02      	ldr	r2, [pc, #8]	; (90010308 <vTaskSuspendAll+0xc>)
900102fe:	6813      	ldr	r3, [r2, #0]
90010300:	3301      	adds	r3, #1
90010302:	6013      	str	r3, [r2, #0]
}
90010304:	4770      	bx	lr
90010306:	bf00      	nop
90010308:	24021a54 	.word	0x24021a54

9001030c <xTaskResumeAll>:
	configASSERT( uxSchedulerSuspended );
9001030c:	4b06      	ldr	r3, [pc, #24]	; (90010328 <xTaskResumeAll+0x1c>)
9001030e:	681b      	ldr	r3, [r3, #0]
90010310:	b943      	cbnz	r3, 90010324 <xTaskResumeAll+0x18>
90010312:	f04f 0350 	mov.w	r3, #80	; 0x50
90010316:	f383 8811 	msr	BASEPRI, r3
9001031a:	f3bf 8f6f 	isb	sy
9001031e:	f3bf 8f4f 	dsb	sy
90010322:	e7fe      	b.n	90010322 <xTaskResumeAll+0x16>
90010324:	f7ff bd18 	b.w	9000fd58 <xTaskResumeAll.part.0>
90010328:	24021a54 	.word	0x24021a54

9001032c <xTaskGetTickCount>:
		xTicks = xTickCount;
9001032c:	4b01      	ldr	r3, [pc, #4]	; (90010334 <xTaskGetTickCount+0x8>)
9001032e:	6818      	ldr	r0, [r3, #0]
}
90010330:	4770      	bx	lr
90010332:	bf00      	nop
90010334:	24021ad4 	.word	0x24021ad4

90010338 <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
90010338:	4b05      	ldr	r3, [pc, #20]	; (90010350 <xTaskIncrementTick+0x18>)
9001033a:	681b      	ldr	r3, [r3, #0]
9001033c:	b90b      	cbnz	r3, 90010342 <xTaskIncrementTick+0xa>
9001033e:	f7ff bc63 	b.w	9000fc08 <xTaskIncrementTick.part.0>
		++xPendedTicks;
90010342:	4a04      	ldr	r2, [pc, #16]	; (90010354 <xTaskIncrementTick+0x1c>)
}
90010344:	2000      	movs	r0, #0
		++xPendedTicks;
90010346:	6813      	ldr	r3, [r2, #0]
90010348:	3301      	adds	r3, #1
9001034a:	6013      	str	r3, [r2, #0]
}
9001034c:	4770      	bx	lr
9001034e:	bf00      	nop
90010350:	24021a54 	.word	0x24021a54
90010354:	24021a90 	.word	0x24021a90

90010358 <vTaskSetApplicationTaskTag>:
	{
90010358:	b538      	push	{r3, r4, r5, lr}
9001035a:	460d      	mov	r5, r1
		if( xTask == NULL )
9001035c:	b138      	cbz	r0, 9001036e <vTaskSetApplicationTaskTag+0x16>
9001035e:	4604      	mov	r4, r0
		taskENTER_CRITICAL();
90010360:	f7fe f940 	bl	9000e5e4 <vPortEnterCritical>
			xTCB->pxTaskTag = pxHookFunction;
90010364:	6565      	str	r5, [r4, #84]	; 0x54
	}
90010366:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		taskEXIT_CRITICAL();
9001036a:	f7fe b95d 	b.w	9000e628 <vPortExitCritical>
			xTCB = ( TCB_t * ) pxCurrentTCB;
9001036e:	4b04      	ldr	r3, [pc, #16]	; (90010380 <vTaskSetApplicationTaskTag+0x28>)
90010370:	681c      	ldr	r4, [r3, #0]
		taskENTER_CRITICAL();
90010372:	f7fe f937 	bl	9000e5e4 <vPortEnterCritical>
			xTCB->pxTaskTag = pxHookFunction;
90010376:	6565      	str	r5, [r4, #84]	; 0x54
	}
90010378:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		taskEXIT_CRITICAL();
9001037c:	f7fe b954 	b.w	9000e628 <vPortExitCritical>
90010380:	240215e0 	.word	0x240215e0

90010384 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
90010384:	4b27      	ldr	r3, [pc, #156]	; (90010424 <vTaskSwitchContext+0xa0>)
90010386:	681b      	ldr	r3, [r3, #0]
90010388:	b11b      	cbz	r3, 90010392 <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
9001038a:	4b27      	ldr	r3, [pc, #156]	; (90010428 <vTaskSwitchContext+0xa4>)
9001038c:	2201      	movs	r2, #1
9001038e:	601a      	str	r2, [r3, #0]
90010390:	4770      	bx	lr
{
90010392:	b570      	push	{r4, r5, r6, lr}
		xYieldPending = pdFALSE;
90010394:	4a24      	ldr	r2, [pc, #144]	; (90010428 <vTaskSwitchContext+0xa4>)
		traceTASK_SWITCHED_OUT();
90010396:	4c25      	ldr	r4, [pc, #148]	; (9001042c <vTaskSwitchContext+0xa8>)
		xYieldPending = pdFALSE;
90010398:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_OUT();
9001039a:	6823      	ldr	r3, [r4, #0]
		if( xTask == NULL )
9001039c:	2b00      	cmp	r3, #0
9001039e:	d036      	beq.n	9001040e <vTaskSwitchContext+0x8a>
		if( xTCB->pxTaskTag != NULL )
900103a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
900103a2:	b10b      	cbz	r3, 900103a8 <vTaskSwitchContext+0x24>
			xReturn = xTCB->pxTaskTag( pvParameter );
900103a4:	2001      	movs	r0, #1
900103a6:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
900103a8:	4d21      	ldr	r5, [pc, #132]	; (90010430 <vTaskSwitchContext+0xac>)
900103aa:	4922      	ldr	r1, [pc, #136]	; (90010434 <vTaskSwitchContext+0xb0>)
900103ac:	682b      	ldr	r3, [r5, #0]
900103ae:	eb03 0283 	add.w	r2, r3, r3, lsl #2
900103b2:	0098      	lsls	r0, r3, #2
900103b4:	0092      	lsls	r2, r2, #2
900103b6:	588a      	ldr	r2, [r1, r2]
900103b8:	b942      	cbnz	r2, 900103cc <vTaskSwitchContext+0x48>
900103ba:	b1fb      	cbz	r3, 900103fc <vTaskSwitchContext+0x78>
900103bc:	3b01      	subs	r3, #1
900103be:	eb03 0283 	add.w	r2, r3, r3, lsl #2
900103c2:	0098      	lsls	r0, r3, #2
900103c4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
900103c8:	2a00      	cmp	r2, #0
900103ca:	d0f6      	beq.n	900103ba <vTaskSwitchContext+0x36>
900103cc:	4418      	add	r0, r3
900103ce:	eb01 0c80 	add.w	ip, r1, r0, lsl #2
900103d2:	f8dc 1004 	ldr.w	r1, [ip, #4]
900103d6:	4662      	mov	r2, ip
900103d8:	6849      	ldr	r1, [r1, #4]
900103da:	3208      	adds	r2, #8
900103dc:	4291      	cmp	r1, r2
900103de:	f8cc 1004 	str.w	r1, [ip, #4]
900103e2:	d01b      	beq.n	9001041c <vTaskSwitchContext+0x98>
900103e4:	68ca      	ldr	r2, [r1, #12]
900103e6:	6022      	str	r2, [r4, #0]
900103e8:	602b      	str	r3, [r5, #0]
		traceTASK_SWITCHED_IN();
900103ea:	6823      	ldr	r3, [r4, #0]
		if( xTask == NULL )
900103ec:	b1a3      	cbz	r3, 90010418 <vTaskSwitchContext+0x94>
		if( xTCB->pxTaskTag != NULL )
900103ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
900103f0:	b11b      	cbz	r3, 900103fa <vTaskSwitchContext+0x76>
			xReturn = xTCB->pxTaskTag( pvParameter );
900103f2:	2000      	movs	r0, #0
}
900103f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			xReturn = xTCB->pxTaskTag( pvParameter );
900103f8:	4718      	bx	r3
}
900103fa:	bd70      	pop	{r4, r5, r6, pc}
900103fc:	f04f 0350 	mov.w	r3, #80	; 0x50
90010400:	f383 8811 	msr	BASEPRI, r3
90010404:	f3bf 8f6f 	isb	sy
90010408:	f3bf 8f4f 	dsb	sy
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
9001040c:	e7fe      	b.n	9001040c <vTaskSwitchContext+0x88>
			xTCB = pxCurrentTCB;
9001040e:	6823      	ldr	r3, [r4, #0]
		if( xTCB->pxTaskTag != NULL )
90010410:	6d5b      	ldr	r3, [r3, #84]	; 0x54
90010412:	2b00      	cmp	r3, #0
90010414:	d1c6      	bne.n	900103a4 <vTaskSwitchContext+0x20>
90010416:	e7c7      	b.n	900103a8 <vTaskSwitchContext+0x24>
			xTCB = pxCurrentTCB;
90010418:	6823      	ldr	r3, [r4, #0]
9001041a:	e7e8      	b.n	900103ee <vTaskSwitchContext+0x6a>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
9001041c:	6849      	ldr	r1, [r1, #4]
9001041e:	f8cc 1004 	str.w	r1, [ip, #4]
90010422:	e7df      	b.n	900103e4 <vTaskSwitchContext+0x60>
90010424:	24021a54 	.word	0x24021a54
90010428:	24021ad8 	.word	0x24021ad8
9001042c:	240215e0 	.word	0x240215e0
90010430:	24021a5c 	.word	0x24021a5c
90010434:	240215ec 	.word	0x240215ec

90010438 <vTaskSuspend>:
	{
90010438:	b570      	push	{r4, r5, r6, lr}
9001043a:	4604      	mov	r4, r0
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
9001043c:	4e2e      	ldr	r6, [pc, #184]	; (900104f8 <vTaskSuspend+0xc0>)
		taskENTER_CRITICAL();
9001043e:	f7fe f8d1 	bl	9000e5e4 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
90010442:	2c00      	cmp	r4, #0
90010444:	d03a      	beq.n	900104bc <vTaskSuspend+0x84>
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
90010446:	1d25      	adds	r5, r4, #4
90010448:	4628      	mov	r0, r5
9001044a:	f7fe f849 	bl	9000e4e0 <uxListRemove>
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
9001044e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
90010450:	b11b      	cbz	r3, 9001045a <vTaskSuspend+0x22>
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
90010452:	f104 0018 	add.w	r0, r4, #24
90010456:	f7fe f843 	bl	9000e4e0 <uxListRemove>
			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
9001045a:	4629      	mov	r1, r5
9001045c:	4827      	ldr	r0, [pc, #156]	; (900104fc <vTaskSuspend+0xc4>)
9001045e:	f7fe f817 	bl	9000e490 <vListInsertEnd>
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
90010462:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
90010466:	2b01      	cmp	r3, #1
90010468:	d102      	bne.n	90010470 <vTaskSuspend+0x38>
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
9001046a:	2300      	movs	r3, #0
9001046c:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
		if( xSchedulerRunning != pdFALSE )
90010470:	4d23      	ldr	r5, [pc, #140]	; (90010500 <vTaskSuspend+0xc8>)
		taskEXIT_CRITICAL();
90010472:	f7fe f8d9 	bl	9000e628 <vPortExitCritical>
		if( xSchedulerRunning != pdFALSE )
90010476:	682b      	ldr	r3, [r5, #0]
90010478:	b98b      	cbnz	r3, 9001049e <vTaskSuspend+0x66>
		if( pxTCB == pxCurrentTCB )
9001047a:	6833      	ldr	r3, [r6, #0]
9001047c:	42a3      	cmp	r3, r4
9001047e:	d000      	beq.n	90010482 <vTaskSuspend+0x4a>
	}
90010480:	bd70      	pop	{r4, r5, r6, pc}
			if( xSchedulerRunning != pdFALSE )
90010482:	682b      	ldr	r3, [r5, #0]
90010484:	b30b      	cbz	r3, 900104ca <vTaskSuspend+0x92>
				configASSERT( uxSchedulerSuspended == 0 );
90010486:	4b1f      	ldr	r3, [pc, #124]	; (90010504 <vTaskSuspend+0xcc>)
90010488:	681b      	ldr	r3, [r3, #0]
9001048a:	b333      	cbz	r3, 900104da <vTaskSuspend+0xa2>
9001048c:	f04f 0350 	mov.w	r3, #80	; 0x50
90010490:	f383 8811 	msr	BASEPRI, r3
90010494:	f3bf 8f6f 	isb	sy
90010498:	f3bf 8f4f 	dsb	sy
9001049c:	e7fe      	b.n	9001049c <vTaskSuspend+0x64>
			taskENTER_CRITICAL();
9001049e:	f7fe f8a1 	bl	9000e5e4 <vPortEnterCritical>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
900104a2:	4b19      	ldr	r3, [pc, #100]	; (90010508 <vTaskSuspend+0xd0>)
900104a4:	681a      	ldr	r2, [r3, #0]
900104a6:	6812      	ldr	r2, [r2, #0]
900104a8:	b152      	cbz	r2, 900104c0 <vTaskSuspend+0x88>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
900104aa:	681a      	ldr	r2, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
900104ac:	4b17      	ldr	r3, [pc, #92]	; (9001050c <vTaskSuspend+0xd4>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
900104ae:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
900104b0:	68d2      	ldr	r2, [r2, #12]
900104b2:	6852      	ldr	r2, [r2, #4]
900104b4:	601a      	str	r2, [r3, #0]
			taskEXIT_CRITICAL();
900104b6:	f7fe f8b7 	bl	9000e628 <vPortExitCritical>
900104ba:	e7de      	b.n	9001047a <vTaskSuspend+0x42>
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
900104bc:	6834      	ldr	r4, [r6, #0]
900104be:	e7c2      	b.n	90010446 <vTaskSuspend+0xe>
		xNextTaskUnblockTime = portMAX_DELAY;
900104c0:	4b12      	ldr	r3, [pc, #72]	; (9001050c <vTaskSuspend+0xd4>)
900104c2:	f04f 32ff 	mov.w	r2, #4294967295
900104c6:	601a      	str	r2, [r3, #0]
900104c8:	e7f5      	b.n	900104b6 <vTaskSuspend+0x7e>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
900104ca:	490c      	ldr	r1, [pc, #48]	; (900104fc <vTaskSuspend+0xc4>)
900104cc:	4a10      	ldr	r2, [pc, #64]	; (90010510 <vTaskSuspend+0xd8>)
900104ce:	6809      	ldr	r1, [r1, #0]
900104d0:	6812      	ldr	r2, [r2, #0]
900104d2:	4291      	cmp	r1, r2
900104d4:	d10c      	bne.n	900104f0 <vTaskSuspend+0xb8>
					pxCurrentTCB = NULL;
900104d6:	6033      	str	r3, [r6, #0]
	}
900104d8:	bd70      	pop	{r4, r5, r6, pc}
				portYIELD_WITHIN_API();
900104da:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
900104de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
900104e2:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
900104e6:	f3bf 8f4f 	dsb	sy
900104ea:	f3bf 8f6f 	isb	sy
	}
900104ee:	bd70      	pop	{r4, r5, r6, pc}
900104f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
					vTaskSwitchContext();
900104f4:	f7ff bf46 	b.w	90010384 <vTaskSwitchContext>
900104f8:	240215e0 	.word	0x240215e0
900104fc:	24021aac 	.word	0x24021aac
90010500:	24021aa8 	.word	0x24021aa8
90010504:	24021a54 	.word	0x24021a54
90010508:	240215e4 	.word	0x240215e4
9001050c:	24021a88 	.word	0x24021a88
90010510:	24021a4c 	.word	0x24021a4c

90010514 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
90010514:	b1f0      	cbz	r0, 90010554 <vTaskPlaceOnEventList+0x40>
{
90010516:	b570      	push	{r4, r5, r6, lr}
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
90010518:	4d1a      	ldr	r5, [pc, #104]	; (90010584 <vTaskPlaceOnEventList+0x70>)
9001051a:	460c      	mov	r4, r1
9001051c:	6829      	ldr	r1, [r5, #0]
9001051e:	3118      	adds	r1, #24
90010520:	f7fd ffc6 	bl	9000e4b0 <vListInsert>
const TickType_t xConstTickCount = xTickCount;
90010524:	4b18      	ldr	r3, [pc, #96]	; (90010588 <vTaskPlaceOnEventList+0x74>)
90010526:	681e      	ldr	r6, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
90010528:	6828      	ldr	r0, [r5, #0]
9001052a:	3004      	adds	r0, #4
9001052c:	f7fd ffd8 	bl	9000e4e0 <uxListRemove>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
90010530:	1c63      	adds	r3, r4, #1
90010532:	d020      	beq.n	90010576 <vTaskPlaceOnEventList+0x62>
			xTimeToWake = xConstTickCount + xTicksToWait;
90010534:	19a4      	adds	r4, r4, r6
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
90010536:	682b      	ldr	r3, [r5, #0]
90010538:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
9001053a:	d214      	bcs.n	90010566 <vTaskPlaceOnEventList+0x52>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
9001053c:	4b13      	ldr	r3, [pc, #76]	; (9001058c <vTaskPlaceOnEventList+0x78>)
9001053e:	6818      	ldr	r0, [r3, #0]
90010540:	6829      	ldr	r1, [r5, #0]
90010542:	3104      	adds	r1, #4
90010544:	f7fd ffb4 	bl	9000e4b0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
90010548:	4b11      	ldr	r3, [pc, #68]	; (90010590 <vTaskPlaceOnEventList+0x7c>)
9001054a:	681a      	ldr	r2, [r3, #0]
9001054c:	4294      	cmp	r4, r2
9001054e:	d200      	bcs.n	90010552 <vTaskPlaceOnEventList+0x3e>
					xNextTaskUnblockTime = xTimeToWake;
90010550:	601c      	str	r4, [r3, #0]
}
90010552:	bd70      	pop	{r4, r5, r6, pc}
90010554:	f04f 0350 	mov.w	r3, #80	; 0x50
90010558:	f383 8811 	msr	BASEPRI, r3
9001055c:	f3bf 8f6f 	isb	sy
90010560:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
90010564:	e7fe      	b.n	90010564 <vTaskPlaceOnEventList+0x50>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
90010566:	4b0b      	ldr	r3, [pc, #44]	; (90010594 <vTaskPlaceOnEventList+0x80>)
90010568:	6818      	ldr	r0, [r3, #0]
9001056a:	6829      	ldr	r1, [r5, #0]
}
9001056c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
90010570:	3104      	adds	r1, #4
90010572:	f7fd bf9d 	b.w	9000e4b0 <vListInsert>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
90010576:	6829      	ldr	r1, [r5, #0]
90010578:	4807      	ldr	r0, [pc, #28]	; (90010598 <vTaskPlaceOnEventList+0x84>)
9001057a:	3104      	adds	r1, #4
}
9001057c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
90010580:	f7fd bf86 	b.w	9000e490 <vListInsertEnd>
90010584:	240215e0 	.word	0x240215e0
90010588:	24021ad4 	.word	0x24021ad4
9001058c:	240215e4 	.word	0x240215e4
90010590:	24021a88 	.word	0x24021a88
90010594:	240215e8 	.word	0x240215e8
90010598:	24021aac 	.word	0x24021aac

9001059c <vTaskPlaceOnUnorderedEventList>:
	configASSERT( pxEventList );
9001059c:	b350      	cbz	r0, 900105f4 <vTaskPlaceOnUnorderedEventList+0x58>
	configASSERT( uxSchedulerSuspended != 0 );
9001059e:	4b23      	ldr	r3, [pc, #140]	; (9001062c <vTaskPlaceOnUnorderedEventList+0x90>)
900105a0:	681b      	ldr	r3, [r3, #0]
900105a2:	b943      	cbnz	r3, 900105b6 <vTaskPlaceOnUnorderedEventList+0x1a>
900105a4:	f04f 0350 	mov.w	r3, #80	; 0x50
900105a8:	f383 8811 	msr	BASEPRI, r3
900105ac:	f3bf 8f6f 	isb	sy
900105b0:	f3bf 8f4f 	dsb	sy
900105b4:	e7fe      	b.n	900105b4 <vTaskPlaceOnUnorderedEventList+0x18>
{
900105b6:	b570      	push	{r4, r5, r6, lr}
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
900105b8:	4d1d      	ldr	r5, [pc, #116]	; (90010630 <vTaskPlaceOnUnorderedEventList+0x94>)
900105ba:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
900105be:	4614      	mov	r4, r2
900105c0:	682b      	ldr	r3, [r5, #0]
900105c2:	6199      	str	r1, [r3, #24]
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
900105c4:	6829      	ldr	r1, [r5, #0]
900105c6:	3118      	adds	r1, #24
900105c8:	f7fd ff62 	bl	9000e490 <vListInsertEnd>
const TickType_t xConstTickCount = xTickCount;
900105cc:	4b19      	ldr	r3, [pc, #100]	; (90010634 <vTaskPlaceOnUnorderedEventList+0x98>)
900105ce:	681e      	ldr	r6, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
900105d0:	6828      	ldr	r0, [r5, #0]
900105d2:	3004      	adds	r0, #4
900105d4:	f7fd ff84 	bl	9000e4e0 <uxListRemove>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
900105d8:	1c63      	adds	r3, r4, #1
900105da:	d014      	beq.n	90010606 <vTaskPlaceOnUnorderedEventList+0x6a>
			xTimeToWake = xConstTickCount + xTicksToWait;
900105dc:	19a4      	adds	r4, r4, r6
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
900105de:	682b      	ldr	r3, [r5, #0]
900105e0:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
900105e2:	d317      	bcc.n	90010614 <vTaskPlaceOnUnorderedEventList+0x78>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
900105e4:	4b14      	ldr	r3, [pc, #80]	; (90010638 <vTaskPlaceOnUnorderedEventList+0x9c>)
900105e6:	6818      	ldr	r0, [r3, #0]
900105e8:	6829      	ldr	r1, [r5, #0]
}
900105ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
900105ee:	3104      	adds	r1, #4
900105f0:	f7fd bf5e 	b.w	9000e4b0 <vListInsert>
900105f4:	f04f 0350 	mov.w	r3, #80	; 0x50
900105f8:	f383 8811 	msr	BASEPRI, r3
900105fc:	f3bf 8f6f 	isb	sy
90010600:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
90010604:	e7fe      	b.n	90010604 <vTaskPlaceOnUnorderedEventList+0x68>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
90010606:	6829      	ldr	r1, [r5, #0]
90010608:	480c      	ldr	r0, [pc, #48]	; (9001063c <vTaskPlaceOnUnorderedEventList+0xa0>)
9001060a:	3104      	adds	r1, #4
}
9001060c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
90010610:	f7fd bf3e 	b.w	9000e490 <vListInsertEnd>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
90010614:	4b0a      	ldr	r3, [pc, #40]	; (90010640 <vTaskPlaceOnUnorderedEventList+0xa4>)
90010616:	6818      	ldr	r0, [r3, #0]
90010618:	6829      	ldr	r1, [r5, #0]
9001061a:	3104      	adds	r1, #4
9001061c:	f7fd ff48 	bl	9000e4b0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
90010620:	4b08      	ldr	r3, [pc, #32]	; (90010644 <vTaskPlaceOnUnorderedEventList+0xa8>)
90010622:	6819      	ldr	r1, [r3, #0]
90010624:	428c      	cmp	r4, r1
90010626:	d200      	bcs.n	9001062a <vTaskPlaceOnUnorderedEventList+0x8e>
					xNextTaskUnblockTime = xTimeToWake;
90010628:	601c      	str	r4, [r3, #0]
}
9001062a:	bd70      	pop	{r4, r5, r6, pc}
9001062c:	24021a54 	.word	0x24021a54
90010630:	240215e0 	.word	0x240215e0
90010634:	24021ad4 	.word	0x24021ad4
90010638:	240215e8 	.word	0x240215e8
9001063c:	24021aac 	.word	0x24021aac
90010640:	240215e4 	.word	0x240215e4
90010644:	24021a88 	.word	0x24021a88

90010648 <vTaskPlaceOnEventListRestricted>:
		configASSERT( pxEventList );
90010648:	b358      	cbz	r0, 900106a2 <vTaskPlaceOnEventListRestricted+0x5a>
	{
9001064a:	b570      	push	{r4, r5, r6, lr}
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
9001064c:	4e1d      	ldr	r6, [pc, #116]	; (900106c4 <vTaskPlaceOnEventListRestricted+0x7c>)
9001064e:	460c      	mov	r4, r1
90010650:	4615      	mov	r5, r2
90010652:	6831      	ldr	r1, [r6, #0]
90010654:	3118      	adds	r1, #24
90010656:	f7fd ff1b 	bl	9000e490 <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
9001065a:	b165      	cbz	r5, 90010676 <vTaskPlaceOnEventListRestricted+0x2e>
const TickType_t xConstTickCount = xTickCount;
9001065c:	4b1a      	ldr	r3, [pc, #104]	; (900106c8 <vTaskPlaceOnEventListRestricted+0x80>)
9001065e:	681b      	ldr	r3, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
90010660:	6830      	ldr	r0, [r6, #0]
90010662:	3004      	adds	r0, #4
90010664:	f7fd ff3c 	bl	9000e4e0 <uxListRemove>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
90010668:	6831      	ldr	r1, [r6, #0]
9001066a:	4818      	ldr	r0, [pc, #96]	; (900106cc <vTaskPlaceOnEventListRestricted+0x84>)
9001066c:	3104      	adds	r1, #4
	}
9001066e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
90010672:	f7fd bf0d 	b.w	9000e490 <vListInsertEnd>
const TickType_t xConstTickCount = xTickCount;
90010676:	4b14      	ldr	r3, [pc, #80]	; (900106c8 <vTaskPlaceOnEventListRestricted+0x80>)
90010678:	681d      	ldr	r5, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
9001067a:	6830      	ldr	r0, [r6, #0]
9001067c:	3004      	adds	r0, #4
9001067e:	f7fd ff2f 	bl	9000e4e0 <uxListRemove>
			xTimeToWake = xConstTickCount + xTicksToWait;
90010682:	1964      	adds	r4, r4, r5
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
90010684:	6833      	ldr	r3, [r6, #0]
90010686:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
90010688:	d214      	bcs.n	900106b4 <vTaskPlaceOnEventListRestricted+0x6c>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
9001068a:	4b11      	ldr	r3, [pc, #68]	; (900106d0 <vTaskPlaceOnEventListRestricted+0x88>)
9001068c:	6818      	ldr	r0, [r3, #0]
9001068e:	6831      	ldr	r1, [r6, #0]
90010690:	3104      	adds	r1, #4
90010692:	f7fd ff0d 	bl	9000e4b0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
90010696:	4b0f      	ldr	r3, [pc, #60]	; (900106d4 <vTaskPlaceOnEventListRestricted+0x8c>)
90010698:	681a      	ldr	r2, [r3, #0]
9001069a:	4294      	cmp	r4, r2
9001069c:	d200      	bcs.n	900106a0 <vTaskPlaceOnEventListRestricted+0x58>
					xNextTaskUnblockTime = xTimeToWake;
9001069e:	601c      	str	r4, [r3, #0]
	}
900106a0:	bd70      	pop	{r4, r5, r6, pc}
900106a2:	f04f 0350 	mov.w	r3, #80	; 0x50
900106a6:	f383 8811 	msr	BASEPRI, r3
900106aa:	f3bf 8f6f 	isb	sy
900106ae:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventList );
900106b2:	e7fe      	b.n	900106b2 <vTaskPlaceOnEventListRestricted+0x6a>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
900106b4:	4b08      	ldr	r3, [pc, #32]	; (900106d8 <vTaskPlaceOnEventListRestricted+0x90>)
900106b6:	6818      	ldr	r0, [r3, #0]
900106b8:	6831      	ldr	r1, [r6, #0]
	}
900106ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
900106be:	3104      	adds	r1, #4
900106c0:	f7fd bef6 	b.w	9000e4b0 <vListInsert>
900106c4:	240215e0 	.word	0x240215e0
900106c8:	24021ad4 	.word	0x24021ad4
900106cc:	24021aac 	.word	0x24021aac
900106d0:	240215e4 	.word	0x240215e4
900106d4:	24021a88 	.word	0x24021a88
900106d8:	240215e8 	.word	0x240215e8

900106dc <xTaskRemoveFromEventList>:
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
900106dc:	68c3      	ldr	r3, [r0, #12]
{
900106de:	b530      	push	{r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
900106e0:	68dc      	ldr	r4, [r3, #12]
{
900106e2:	b083      	sub	sp, #12
	configASSERT( pxUnblockedTCB );
900106e4:	b35c      	cbz	r4, 9001073e <xTaskRemoveFromEventList+0x62>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
900106e6:	f104 0518 	add.w	r5, r4, #24
900106ea:	4628      	mov	r0, r5
900106ec:	f7fd fef8 	bl	9000e4e0 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
900106f0:	4b19      	ldr	r3, [pc, #100]	; (90010758 <xTaskRemoveFromEventList+0x7c>)
900106f2:	681b      	ldr	r3, [r3, #0]
900106f4:	b17b      	cbz	r3, 90010716 <xTaskRemoveFromEventList+0x3a>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
900106f6:	4629      	mov	r1, r5
900106f8:	4818      	ldr	r0, [pc, #96]	; (9001075c <xTaskRemoveFromEventList+0x80>)
900106fa:	f7fd fec9 	bl	9000e490 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
900106fe:	4b18      	ldr	r3, [pc, #96]	; (90010760 <xTaskRemoveFromEventList+0x84>)
90010700:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
90010702:	681b      	ldr	r3, [r3, #0]
90010704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90010706:	429a      	cmp	r2, r3
90010708:	d922      	bls.n	90010750 <xTaskRemoveFromEventList+0x74>
		xYieldPending = pdTRUE;
9001070a:	2301      	movs	r3, #1
9001070c:	4a15      	ldr	r2, [pc, #84]	; (90010764 <xTaskRemoveFromEventList+0x88>)
		xReturn = pdTRUE;
9001070e:	4618      	mov	r0, r3
		xYieldPending = pdTRUE;
90010710:	6013      	str	r3, [r2, #0]
}
90010712:	b003      	add	sp, #12
90010714:	bd30      	pop	{r4, r5, pc}
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
90010716:	1d21      	adds	r1, r4, #4
90010718:	4608      	mov	r0, r1
9001071a:	9101      	str	r1, [sp, #4]
9001071c:	f7fd fee0 	bl	9000e4e0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
90010720:	4a11      	ldr	r2, [pc, #68]	; (90010768 <xTaskRemoveFromEventList+0x8c>)
90010722:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
90010724:	6810      	ldr	r0, [r2, #0]
90010726:	9901      	ldr	r1, [sp, #4]
90010728:	4283      	cmp	r3, r0
9001072a:	d900      	bls.n	9001072e <xTaskRemoveFromEventList+0x52>
9001072c:	6013      	str	r3, [r2, #0]
9001072e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
90010732:	480e      	ldr	r0, [pc, #56]	; (9001076c <xTaskRemoveFromEventList+0x90>)
90010734:	eb00 0083 	add.w	r0, r0, r3, lsl #2
90010738:	f7fd feaa 	bl	9000e490 <vListInsertEnd>
9001073c:	e7df      	b.n	900106fe <xTaskRemoveFromEventList+0x22>
9001073e:	f04f 0350 	mov.w	r3, #80	; 0x50
90010742:	f383 8811 	msr	BASEPRI, r3
90010746:	f3bf 8f6f 	isb	sy
9001074a:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
9001074e:	e7fe      	b.n	9001074e <xTaskRemoveFromEventList+0x72>
		xReturn = pdFALSE;
90010750:	2000      	movs	r0, #0
}
90010752:	b003      	add	sp, #12
90010754:	bd30      	pop	{r4, r5, pc}
90010756:	bf00      	nop
90010758:	24021a54 	.word	0x24021a54
9001075c:	24021a94 	.word	0x24021a94
90010760:	240215e0 	.word	0x240215e0
90010764:	24021ad8 	.word	0x24021ad8
90010768:	24021a5c 	.word	0x24021a5c
9001076c:	240215ec 	.word	0x240215ec

90010770 <vTaskRemoveFromUnorderedEventList>:
{
90010770:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended != pdFALSE );
90010772:	4b1c      	ldr	r3, [pc, #112]	; (900107e4 <vTaskRemoveFromUnorderedEventList+0x74>)
90010774:	681a      	ldr	r2, [r3, #0]
90010776:	b942      	cbnz	r2, 9001078a <vTaskRemoveFromUnorderedEventList+0x1a>
90010778:	f04f 0350 	mov.w	r3, #80	; 0x50
9001077c:	f383 8811 	msr	BASEPRI, r3
90010780:	f3bf 8f6f 	isb	sy
90010784:	f3bf 8f4f 	dsb	sy
90010788:	e7fe      	b.n	90010788 <vTaskRemoveFromUnorderedEventList+0x18>
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
9001078a:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
9001078e:	68c4      	ldr	r4, [r0, #12]
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
90010790:	6001      	str	r1, [r0, #0]
	configASSERT( pxUnblockedTCB );
90010792:	b1ec      	cbz	r4, 900107d0 <vTaskRemoveFromUnorderedEventList+0x60>
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
90010794:	1d25      	adds	r5, r4, #4
	( void ) uxListRemove( pxEventListItem );
90010796:	f7fd fea3 	bl	9000e4e0 <uxListRemove>
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
9001079a:	4628      	mov	r0, r5
9001079c:	f7fd fea0 	bl	9000e4e0 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
900107a0:	4b11      	ldr	r3, [pc, #68]	; (900107e8 <vTaskRemoveFromUnorderedEventList+0x78>)
900107a2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
900107a4:	681a      	ldr	r2, [r3, #0]
900107a6:	4290      	cmp	r0, r2
900107a8:	d900      	bls.n	900107ac <vTaskRemoveFromUnorderedEventList+0x3c>
900107aa:	6018      	str	r0, [r3, #0]
900107ac:	4b0f      	ldr	r3, [pc, #60]	; (900107ec <vTaskRemoveFromUnorderedEventList+0x7c>)
900107ae:	eb00 0080 	add.w	r0, r0, r0, lsl #2
900107b2:	4629      	mov	r1, r5
900107b4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
900107b8:	f7fd fe6a 	bl	9000e490 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
900107bc:	4b0c      	ldr	r3, [pc, #48]	; (900107f0 <vTaskRemoveFromUnorderedEventList+0x80>)
900107be:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
900107c0:	681b      	ldr	r3, [r3, #0]
900107c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900107c4:	429a      	cmp	r2, r3
900107c6:	d902      	bls.n	900107ce <vTaskRemoveFromUnorderedEventList+0x5e>
		xYieldPending = pdTRUE;
900107c8:	4b0a      	ldr	r3, [pc, #40]	; (900107f4 <vTaskRemoveFromUnorderedEventList+0x84>)
900107ca:	2201      	movs	r2, #1
900107cc:	601a      	str	r2, [r3, #0]
}
900107ce:	bd38      	pop	{r3, r4, r5, pc}
900107d0:	f04f 0350 	mov.w	r3, #80	; 0x50
900107d4:	f383 8811 	msr	BASEPRI, r3
900107d8:	f3bf 8f6f 	isb	sy
900107dc:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
900107e0:	e7fe      	b.n	900107e0 <vTaskRemoveFromUnorderedEventList+0x70>
900107e2:	bf00      	nop
900107e4:	24021a54 	.word	0x24021a54
900107e8:	24021a5c 	.word	0x24021a5c
900107ec:	240215ec 	.word	0x240215ec
900107f0:	240215e0 	.word	0x240215e0
900107f4:	24021ad8 	.word	0x24021ad8

900107f8 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
900107f8:	4a03      	ldr	r2, [pc, #12]	; (90010808 <vTaskInternalSetTimeOutState+0x10>)
	pxTimeOut->xTimeOnEntering = xTickCount;
900107fa:	4b04      	ldr	r3, [pc, #16]	; (9001080c <vTaskInternalSetTimeOutState+0x14>)
	pxTimeOut->xOverflowCount = xNumOfOverflows;
900107fc:	6812      	ldr	r2, [r2, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
900107fe:	681b      	ldr	r3, [r3, #0]
90010800:	e9c0 2300 	strd	r2, r3, [r0]
}
90010804:	4770      	bx	lr
90010806:	bf00      	nop
90010808:	24021a8c 	.word	0x24021a8c
9001080c:	24021ad4 	.word	0x24021ad4

90010810 <xTaskCheckForTimeOut>:
	configASSERT( pxTimeOut );
90010810:	b328      	cbz	r0, 9001085e <xTaskCheckForTimeOut+0x4e>
{
90010812:	b5f0      	push	{r4, r5, r6, r7, lr}
90010814:	460d      	mov	r5, r1
90010816:	b083      	sub	sp, #12
	configASSERT( pxTicksToWait );
90010818:	b1c1      	cbz	r1, 9001084c <xTaskCheckForTimeOut+0x3c>
9001081a:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
9001081c:	f7fd fee2 	bl	9000e5e4 <vPortEnterCritical>
			if( *pxTicksToWait == portMAX_DELAY )
90010820:	682b      	ldr	r3, [r5, #0]
		const TickType_t xConstTickCount = xTickCount;
90010822:	4a1d      	ldr	r2, [pc, #116]	; (90010898 <xTaskCheckForTimeOut+0x88>)
			if( *pxTicksToWait == portMAX_DELAY )
90010824:	1c58      	adds	r0, r3, #1
		const TickType_t xConstTickCount = xTickCount;
90010826:	6811      	ldr	r1, [r2, #0]
			if( *pxTicksToWait == portMAX_DELAY )
90010828:	d030      	beq.n	9001088c <xTaskCheckForTimeOut+0x7c>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
9001082a:	f8df c070 	ldr.w	ip, [pc, #112]	; 9001089c <xTaskCheckForTimeOut+0x8c>
9001082e:	6826      	ldr	r6, [r4, #0]
90010830:	f8dc 7000 	ldr.w	r7, [ip]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
90010834:	6860      	ldr	r0, [r4, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
90010836:	42be      	cmp	r6, r7
90010838:	d01a      	beq.n	90010870 <xTaskCheckForTimeOut+0x60>
9001083a:	4288      	cmp	r0, r1
9001083c:	d818      	bhi.n	90010870 <xTaskCheckForTimeOut+0x60>
			xReturn = pdTRUE;
9001083e:	2001      	movs	r0, #1
90010840:	9001      	str	r0, [sp, #4]
	taskEXIT_CRITICAL();
90010842:	f7fd fef1 	bl	9000e628 <vPortExitCritical>
}
90010846:	9801      	ldr	r0, [sp, #4]
90010848:	b003      	add	sp, #12
9001084a:	bdf0      	pop	{r4, r5, r6, r7, pc}
9001084c:	f04f 0350 	mov.w	r3, #80	; 0x50
90010850:	f383 8811 	msr	BASEPRI, r3
90010854:	f3bf 8f6f 	isb	sy
90010858:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
9001085c:	e7fe      	b.n	9001085c <xTaskCheckForTimeOut+0x4c>
9001085e:	f04f 0350 	mov.w	r3, #80	; 0x50
90010862:	f383 8811 	msr	BASEPRI, r3
90010866:	f3bf 8f6f 	isb	sy
9001086a:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
9001086e:	e7fe      	b.n	9001086e <xTaskCheckForTimeOut+0x5e>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
90010870:	eba1 0e00 	sub.w	lr, r1, r0
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
90010874:	4573      	cmp	r3, lr
90010876:	d90b      	bls.n	90010890 <xTaskCheckForTimeOut+0x80>
			*pxTicksToWait -= xElapsedTime;
90010878:	1a5b      	subs	r3, r3, r1
	pxTimeOut->xOverflowCount = xNumOfOverflows;
9001087a:	f8dc 1000 	ldr.w	r1, [ip]
	pxTimeOut->xTimeOnEntering = xTickCount;
9001087e:	6812      	ldr	r2, [r2, #0]
			*pxTicksToWait -= xElapsedTime;
90010880:	4403      	add	r3, r0
			xReturn = pdFALSE;
90010882:	2000      	movs	r0, #0
			*pxTicksToWait -= xElapsedTime;
90010884:	602b      	str	r3, [r5, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
90010886:	e9c4 1200 	strd	r1, r2, [r4]
			xReturn = pdFALSE;
9001088a:	e7d9      	b.n	90010840 <xTaskCheckForTimeOut+0x30>
				xReturn = pdFALSE;
9001088c:	2000      	movs	r0, #0
9001088e:	e7d7      	b.n	90010840 <xTaskCheckForTimeOut+0x30>
			*pxTicksToWait = 0;
90010890:	2300      	movs	r3, #0
			xReturn = pdTRUE;
90010892:	2001      	movs	r0, #1
			*pxTicksToWait = 0;
90010894:	602b      	str	r3, [r5, #0]
			xReturn = pdTRUE;
90010896:	e7d3      	b.n	90010840 <xTaskCheckForTimeOut+0x30>
90010898:	24021ad4 	.word	0x24021ad4
9001089c:	24021a8c 	.word	0x24021a8c

900108a0 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
900108a0:	4b01      	ldr	r3, [pc, #4]	; (900108a8 <vTaskMissedYield+0x8>)
900108a2:	2201      	movs	r2, #1
900108a4:	601a      	str	r2, [r3, #0]
}
900108a6:	4770      	bx	lr
900108a8:	24021ad8 	.word	0x24021ad8

900108ac <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
900108ac:	4b01      	ldr	r3, [pc, #4]	; (900108b4 <xTaskGetCurrentTaskHandle+0x8>)
900108ae:	6818      	ldr	r0, [r3, #0]
	}
900108b0:	4770      	bx	lr
900108b2:	bf00      	nop
900108b4:	240215e0 	.word	0x240215e0

900108b8 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
900108b8:	4b05      	ldr	r3, [pc, #20]	; (900108d0 <xTaskGetSchedulerState+0x18>)
900108ba:	681b      	ldr	r3, [r3, #0]
900108bc:	b133      	cbz	r3, 900108cc <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
900108be:	4b05      	ldr	r3, [pc, #20]	; (900108d4 <xTaskGetSchedulerState+0x1c>)
900108c0:	6818      	ldr	r0, [r3, #0]
900108c2:	fab0 f080 	clz	r0, r0
900108c6:	0940      	lsrs	r0, r0, #5
900108c8:	0040      	lsls	r0, r0, #1
900108ca:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
900108cc:	2001      	movs	r0, #1
	}
900108ce:	4770      	bx	lr
900108d0:	24021aa8 	.word	0x24021aa8
900108d4:	24021a54 	.word	0x24021a54

900108d8 <xTaskPriorityInherit>:
	{
900108d8:	b570      	push	{r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
900108da:	4604      	mov	r4, r0
	{
900108dc:	b082      	sub	sp, #8
		if( pxMutexHolder != NULL )
900108de:	b1c8      	cbz	r0, 90010914 <xTaskPriorityInherit+0x3c>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
900108e0:	4d1d      	ldr	r5, [pc, #116]	; (90010958 <xTaskPriorityInherit+0x80>)
900108e2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
900108e4:	682a      	ldr	r2, [r5, #0]
900108e6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
900108e8:	4293      	cmp	r3, r2
900108ea:	d215      	bcs.n	90010918 <xTaskPriorityInherit+0x40>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
900108ec:	6982      	ldr	r2, [r0, #24]
900108ee:	2a00      	cmp	r2, #0
900108f0:	db04      	blt.n	900108fc <xTaskPriorityInherit+0x24>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
900108f2:	682a      	ldr	r2, [r5, #0]
900108f4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
900108f6:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
900108fa:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
900108fc:	4e17      	ldr	r6, [pc, #92]	; (9001095c <xTaskPriorityInherit+0x84>)
900108fe:	eb03 0383 	add.w	r3, r3, r3, lsl #2
90010902:	6962      	ldr	r2, [r4, #20]
90010904:	eb06 0383 	add.w	r3, r6, r3, lsl #2
90010908:	429a      	cmp	r2, r3
9001090a:	d00e      	beq.n	9001092a <xTaskPriorityInherit+0x52>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
9001090c:	682b      	ldr	r3, [r5, #0]
				xReturn = pdTRUE;
9001090e:	2001      	movs	r0, #1
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
90010910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90010912:	62e3      	str	r3, [r4, #44]	; 0x2c
	}
90010914:	b002      	add	sp, #8
90010916:	bd70      	pop	{r4, r5, r6, pc}
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
90010918:	682b      	ldr	r3, [r5, #0]
9001091a:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
9001091c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9001091e:	4298      	cmp	r0, r3
90010920:	bf2c      	ite	cs
90010922:	2000      	movcs	r0, #0
90010924:	2001      	movcc	r0, #1
	}
90010926:	b002      	add	sp, #8
90010928:	bd70      	pop	{r4, r5, r6, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
9001092a:	1d21      	adds	r1, r4, #4
9001092c:	4608      	mov	r0, r1
9001092e:	9101      	str	r1, [sp, #4]
90010930:	f7fd fdd6 	bl	9000e4e0 <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
90010934:	682a      	ldr	r2, [r5, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
90010936:	4b0a      	ldr	r3, [pc, #40]	; (90010960 <xTaskPriorityInherit+0x88>)
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
90010938:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
9001093a:	681a      	ldr	r2, [r3, #0]
9001093c:	9901      	ldr	r1, [sp, #4]
9001093e:	4290      	cmp	r0, r2
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
90010940:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
90010942:	d900      	bls.n	90010946 <xTaskPriorityInherit+0x6e>
90010944:	6018      	str	r0, [r3, #0]
90010946:	eb00 0080 	add.w	r0, r0, r0, lsl #2
9001094a:	eb06 0080 	add.w	r0, r6, r0, lsl #2
9001094e:	f7fd fd9f 	bl	9000e490 <vListInsertEnd>
				xReturn = pdTRUE;
90010952:	2001      	movs	r0, #1
90010954:	e7de      	b.n	90010914 <xTaskPriorityInherit+0x3c>
90010956:	bf00      	nop
90010958:	240215e0 	.word	0x240215e0
9001095c:	240215ec 	.word	0x240215ec
90010960:	24021a5c 	.word	0x24021a5c

90010964 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
90010964:	b318      	cbz	r0, 900109ae <xTaskPriorityDisinherit+0x4a>
			configASSERT( pxTCB == pxCurrentTCB );
90010966:	4b1f      	ldr	r3, [pc, #124]	; (900109e4 <xTaskPriorityDisinherit+0x80>)
	{
90010968:	b510      	push	{r4, lr}
			configASSERT( pxTCB == pxCurrentTCB );
9001096a:	681c      	ldr	r4, [r3, #0]
	{
9001096c:	b082      	sub	sp, #8
			configASSERT( pxTCB == pxCurrentTCB );
9001096e:	4284      	cmp	r4, r0
90010970:	d008      	beq.n	90010984 <xTaskPriorityDisinherit+0x20>
90010972:	f04f 0350 	mov.w	r3, #80	; 0x50
90010976:	f383 8811 	msr	BASEPRI, r3
9001097a:	f3bf 8f6f 	isb	sy
9001097e:	f3bf 8f4f 	dsb	sy
90010982:	e7fe      	b.n	90010982 <xTaskPriorityDisinherit+0x1e>
			configASSERT( pxTCB->uxMutexesHeld );
90010984:	6d23      	ldr	r3, [r4, #80]	; 0x50
90010986:	b14b      	cbz	r3, 9001099c <xTaskPriorityDisinherit+0x38>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
90010988:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
			( pxTCB->uxMutexesHeld )--;
9001098a:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
9001098c:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
			( pxTCB->uxMutexesHeld )--;
9001098e:	6523      	str	r3, [r4, #80]	; 0x50
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
90010990:	4291      	cmp	r1, r2
90010992:	d000      	beq.n	90010996 <xTaskPriorityDisinherit+0x32>
90010994:	b16b      	cbz	r3, 900109b2 <xTaskPriorityDisinherit+0x4e>
	BaseType_t xReturn = pdFALSE;
90010996:	2000      	movs	r0, #0
	}
90010998:	b002      	add	sp, #8
9001099a:	bd10      	pop	{r4, pc}
9001099c:	f04f 0350 	mov.w	r3, #80	; 0x50
900109a0:	f383 8811 	msr	BASEPRI, r3
900109a4:	f3bf 8f6f 	isb	sy
900109a8:	f3bf 8f4f 	dsb	sy
			configASSERT( pxTCB->uxMutexesHeld );
900109ac:	e7fe      	b.n	900109ac <xTaskPriorityDisinherit+0x48>
	BaseType_t xReturn = pdFALSE;
900109ae:	2000      	movs	r0, #0
	}
900109b0:	4770      	bx	lr
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
900109b2:	1d21      	adds	r1, r4, #4
900109b4:	4608      	mov	r0, r1
900109b6:	9101      	str	r1, [sp, #4]
900109b8:	f7fd fd92 	bl	9000e4e0 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
900109bc:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
					prvAddTaskToReadyList( pxTCB );
900109be:	4b0a      	ldr	r3, [pc, #40]	; (900109e8 <xTaskPriorityDisinherit+0x84>)
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
900109c0:	f1c0 0238 	rsb	r2, r0, #56	; 0x38
					prvAddTaskToReadyList( pxTCB );
900109c4:	9901      	ldr	r1, [sp, #4]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
900109c6:	62e0      	str	r0, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
900109c8:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
900109ca:	681a      	ldr	r2, [r3, #0]
900109cc:	4290      	cmp	r0, r2
900109ce:	d900      	bls.n	900109d2 <xTaskPriorityDisinherit+0x6e>
900109d0:	6018      	str	r0, [r3, #0]
900109d2:	4b06      	ldr	r3, [pc, #24]	; (900109ec <xTaskPriorityDisinherit+0x88>)
900109d4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
900109d8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
900109dc:	f7fd fd58 	bl	9000e490 <vListInsertEnd>
					xReturn = pdTRUE;
900109e0:	2001      	movs	r0, #1
		return xReturn;
900109e2:	e7d9      	b.n	90010998 <xTaskPriorityDisinherit+0x34>
900109e4:	240215e0 	.word	0x240215e0
900109e8:	24021a5c 	.word	0x24021a5c
900109ec:	240215ec 	.word	0x240215ec

900109f0 <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
900109f0:	2800      	cmp	r0, #0
900109f2:	d040      	beq.n	90010a76 <vTaskPriorityDisinheritAfterTimeout+0x86>
			configASSERT( pxTCB->uxMutexesHeld );
900109f4:	6d03      	ldr	r3, [r0, #80]	; 0x50
	{
900109f6:	b530      	push	{r4, r5, lr}
900109f8:	4604      	mov	r4, r0
900109fa:	b083      	sub	sp, #12
			configASSERT( pxTCB->uxMutexesHeld );
900109fc:	b153      	cbz	r3, 90010a14 <vTaskPriorityDisinheritAfterTimeout+0x24>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
900109fe:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
			if( pxTCB->uxPriority != uxPriorityToUse )
90010a00:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
90010a02:	4281      	cmp	r1, r0
90010a04:	bf38      	it	cc
90010a06:	4601      	movcc	r1, r0
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
90010a08:	2b01      	cmp	r3, #1
90010a0a:	d101      	bne.n	90010a10 <vTaskPriorityDisinheritAfterTimeout+0x20>
90010a0c:	428a      	cmp	r2, r1
90010a0e:	d10a      	bne.n	90010a26 <vTaskPriorityDisinheritAfterTimeout+0x36>
	}
90010a10:	b003      	add	sp, #12
90010a12:	bd30      	pop	{r4, r5, pc}
90010a14:	f04f 0350 	mov.w	r3, #80	; 0x50
90010a18:	f383 8811 	msr	BASEPRI, r3
90010a1c:	f3bf 8f6f 	isb	sy
90010a20:	f3bf 8f4f 	dsb	sy
			configASSERT( pxTCB->uxMutexesHeld );
90010a24:	e7fe      	b.n	90010a24 <vTaskPriorityDisinheritAfterTimeout+0x34>
					configASSERT( pxTCB != pxCurrentTCB );
90010a26:	4b19      	ldr	r3, [pc, #100]	; (90010a8c <vTaskPriorityDisinheritAfterTimeout+0x9c>)
90010a28:	681b      	ldr	r3, [r3, #0]
90010a2a:	42a3      	cmp	r3, r4
90010a2c:	d024      	beq.n	90010a78 <vTaskPriorityDisinheritAfterTimeout+0x88>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
90010a2e:	69a3      	ldr	r3, [r4, #24]
					pxTCB->uxPriority = uxPriorityToUse;
90010a30:	62e1      	str	r1, [r4, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
90010a32:	2b00      	cmp	r3, #0
90010a34:	db02      	blt.n	90010a3c <vTaskPriorityDisinheritAfterTimeout+0x4c>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
90010a36:	f1c1 0138 	rsb	r1, r1, #56	; 0x38
90010a3a:	61a1      	str	r1, [r4, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
90010a3c:	4d14      	ldr	r5, [pc, #80]	; (90010a90 <vTaskPriorityDisinheritAfterTimeout+0xa0>)
90010a3e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
90010a42:	6961      	ldr	r1, [r4, #20]
90010a44:	eb05 0382 	add.w	r3, r5, r2, lsl #2
90010a48:	4299      	cmp	r1, r3
90010a4a:	d1e1      	bne.n	90010a10 <vTaskPriorityDisinheritAfterTimeout+0x20>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
90010a4c:	1d21      	adds	r1, r4, #4
90010a4e:	4608      	mov	r0, r1
90010a50:	9101      	str	r1, [sp, #4]
90010a52:	f7fd fd45 	bl	9000e4e0 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
90010a56:	4b0f      	ldr	r3, [pc, #60]	; (90010a94 <vTaskPriorityDisinheritAfterTimeout+0xa4>)
90010a58:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
90010a5a:	681a      	ldr	r2, [r3, #0]
90010a5c:	9901      	ldr	r1, [sp, #4]
90010a5e:	4290      	cmp	r0, r2
90010a60:	d900      	bls.n	90010a64 <vTaskPriorityDisinheritAfterTimeout+0x74>
90010a62:	6018      	str	r0, [r3, #0]
90010a64:	eb00 0080 	add.w	r0, r0, r0, lsl #2
90010a68:	eb05 0080 	add.w	r0, r5, r0, lsl #2
	}
90010a6c:	b003      	add	sp, #12
90010a6e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
						prvAddTaskToReadyList( pxTCB );
90010a72:	f7fd bd0d 	b.w	9000e490 <vListInsertEnd>
90010a76:	4770      	bx	lr
90010a78:	f04f 0350 	mov.w	r3, #80	; 0x50
90010a7c:	f383 8811 	msr	BASEPRI, r3
90010a80:	f3bf 8f6f 	isb	sy
90010a84:	f3bf 8f4f 	dsb	sy
					configASSERT( pxTCB != pxCurrentTCB );
90010a88:	e7fe      	b.n	90010a88 <vTaskPriorityDisinheritAfterTimeout+0x98>
90010a8a:	bf00      	nop
90010a8c:	240215e0 	.word	0x240215e0
90010a90:	240215ec 	.word	0x240215ec
90010a94:	24021a5c 	.word	0x24021a5c

90010a98 <uxTaskResetEventItemValue>:
	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
90010a98:	4b04      	ldr	r3, [pc, #16]	; (90010aac <uxTaskResetEventItemValue+0x14>)
90010a9a:	6819      	ldr	r1, [r3, #0]
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
90010a9c:	6818      	ldr	r0, [r3, #0]
90010a9e:	681a      	ldr	r2, [r3, #0]
90010aa0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
90010aa2:	6988      	ldr	r0, [r1, #24]
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
90010aa4:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
90010aa8:	6193      	str	r3, [r2, #24]
}
90010aaa:	4770      	bx	lr
90010aac:	240215e0 	.word	0x240215e0

90010ab0 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
90010ab0:	4b04      	ldr	r3, [pc, #16]	; (90010ac4 <pvTaskIncrementMutexHeldCount+0x14>)
90010ab2:	681a      	ldr	r2, [r3, #0]
90010ab4:	b11a      	cbz	r2, 90010abe <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
90010ab6:	6819      	ldr	r1, [r3, #0]
90010ab8:	6d0a      	ldr	r2, [r1, #80]	; 0x50
90010aba:	3201      	adds	r2, #1
90010abc:	650a      	str	r2, [r1, #80]	; 0x50
		return pxCurrentTCB;
90010abe:	6818      	ldr	r0, [r3, #0]
	}
90010ac0:	4770      	bx	lr
90010ac2:	bf00      	nop
90010ac4:	240215e0 	.word	0x240215e0

90010ac8 <prvSwitchTimerLists>:
	}
}
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
90010ac8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
90010acc:	4e22      	ldr	r6, [pc, #136]	; (90010b58 <prvSwitchTimerLists+0x90>)
90010ace:	b085      	sub	sp, #20
	if( xTimerQueue != NULL )
90010ad0:	f8df 908c 	ldr.w	r9, [pc, #140]	; 90010b60 <prvSwitchTimerLists+0x98>
		xMessage.xMessageID = xCommandID;
90010ad4:	f04f 0800 	mov.w	r8, #0

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
90010ad8:	e00d      	b.n	90010af6 <prvSwitchTimerLists+0x2e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
90010ada:	68db      	ldr	r3, [r3, #12]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
90010adc:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
90010ade:	681f      	ldr	r7, [r3, #0]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
90010ae0:	1d25      	adds	r5, r4, #4
90010ae2:	4628      	mov	r0, r5
90010ae4:	f7fd fcfc 	bl	9000e4e0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
90010ae8:	6a23      	ldr	r3, [r4, #32]
90010aea:	4620      	mov	r0, r4
90010aec:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
90010aee:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
90010af2:	075b      	lsls	r3, r3, #29
90010af4:	d40a      	bmi.n	90010b0c <prvSwitchTimerLists+0x44>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
90010af6:	6833      	ldr	r3, [r6, #0]
90010af8:	681a      	ldr	r2, [r3, #0]
90010afa:	2a00      	cmp	r2, #0
90010afc:	d1ed      	bne.n	90010ada <prvSwitchTimerLists+0x12>
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
	pxCurrentTimerList = pxOverflowTimerList;
90010afe:	4a17      	ldr	r2, [pc, #92]	; (90010b5c <prvSwitchTimerLists+0x94>)
90010b00:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
90010b02:	6013      	str	r3, [r2, #0]
	pxCurrentTimerList = pxOverflowTimerList;
90010b04:	6031      	str	r1, [r6, #0]
}
90010b06:	b005      	add	sp, #20
90010b08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
90010b0c:	69a3      	ldr	r3, [r4, #24]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
90010b0e:	4629      	mov	r1, r5
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
90010b10:	443b      	add	r3, r7
			if( xReloadTime > xNextExpireTime )
90010b12:	429f      	cmp	r7, r3
90010b14:	d205      	bcs.n	90010b22 <prvSwitchTimerLists+0x5a>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
90010b16:	6830      	ldr	r0, [r6, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
90010b18:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
90010b1a:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
90010b1c:	f7fd fcc8 	bl	9000e4b0 <vListInsert>
90010b20:	e7e9      	b.n	90010af6 <prvSwitchTimerLists+0x2e>
	if( xTimerQueue != NULL )
90010b22:	f8d9 3000 	ldr.w	r3, [r9]
90010b26:	b16b      	cbz	r3, 90010b44 <prvSwitchTimerLists+0x7c>
		xMessage.u.xTimerParameters.pxTimer = xTimer;
90010b28:	9402      	str	r4, [sp, #8]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
90010b2a:	e9cd 8700 	strd	r8, r7, [sp]
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
90010b2e:	f7ff fec3 	bl	900108b8 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
90010b32:	2300      	movs	r3, #0
90010b34:	4669      	mov	r1, sp
90010b36:	f8d9 0000 	ldr.w	r0, [r9]
90010b3a:	461a      	mov	r2, r3
90010b3c:	f7fe f84a 	bl	9000ebd4 <xQueueGenericSend>
				configASSERT( xResult );
90010b40:	2800      	cmp	r0, #0
90010b42:	d1d8      	bne.n	90010af6 <prvSwitchTimerLists+0x2e>
90010b44:	f04f 0350 	mov.w	r3, #80	; 0x50
90010b48:	f383 8811 	msr	BASEPRI, r3
90010b4c:	f3bf 8f6f 	isb	sy
90010b50:	f3bf 8f4f 	dsb	sy
90010b54:	e7fe      	b.n	90010b54 <prvSwitchTimerLists+0x8c>
90010b56:	bf00      	nop
90010b58:	24021adc 	.word	0x24021adc
90010b5c:	24021ae0 	.word	0x24021ae0
90010b60:	24021c00 	.word	0x24021c00

90010b64 <prvTimerTask>:
{
90010b64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90010b68:	4e9f      	ldr	r6, [pc, #636]	; (90010de8 <prvTimerTask+0x284>)
90010b6a:	b089      	sub	sp, #36	; 0x24
90010b6c:	4d9f      	ldr	r5, [pc, #636]	; (90010dec <prvTimerTask+0x288>)
					portYIELD_WITHIN_API();
90010b6e:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
90010b72:	4c9f      	ldr	r4, [pc, #636]	; (90010df0 <prvTimerTask+0x28c>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
90010b74:	6833      	ldr	r3, [r6, #0]
90010b76:	681f      	ldr	r7, [r3, #0]
90010b78:	2f00      	cmp	r7, #0
90010b7a:	f000 80b2 	beq.w	90010ce2 <prvTimerTask+0x17e>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
90010b7e:	68db      	ldr	r3, [r3, #12]
90010b80:	681f      	ldr	r7, [r3, #0]
	vTaskSuspendAll();
90010b82:	f7ff fbbb 	bl	900102fc <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
90010b86:	f7ff fbd1 	bl	9001032c <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
90010b8a:	682a      	ldr	r2, [r5, #0]
	xTimeNow = xTaskGetTickCount();
90010b8c:	4682      	mov	sl, r0
	if( xTimeNow < xLastTime )
90010b8e:	4290      	cmp	r0, r2
90010b90:	f0c0 80af 	bcc.w	90010cf2 <prvTimerTask+0x18e>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
90010b94:	4287      	cmp	r7, r0
	xLastTime = xTimeNow;
90010b96:	6028      	str	r0, [r5, #0]
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
90010b98:	f200 80d0 	bhi.w	90010d3c <prvTimerTask+0x1d8>
				( void ) xTaskResumeAll();
90010b9c:	f7ff fbb6 	bl	9001030c <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
90010ba0:	6832      	ldr	r2, [r6, #0]
90010ba2:	68d2      	ldr	r2, [r2, #12]
90010ba4:	f8d2 b00c 	ldr.w	fp, [r2, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
90010ba8:	f10b 0804 	add.w	r8, fp, #4
90010bac:	4640      	mov	r0, r8
90010bae:	f7fd fc97 	bl	9000e4e0 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
90010bb2:	f89b 0028 	ldrb.w	r0, [fp, #40]	; 0x28
90010bb6:	0741      	lsls	r1, r0, #29
90010bb8:	f100 80d0 	bmi.w	90010d5c <prvTimerTask+0x1f8>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
90010bbc:	f020 0001 	bic.w	r0, r0, #1
90010bc0:	f88b 0028 	strb.w	r0, [fp, #40]	; 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
90010bc4:	f8db 3020 	ldr.w	r3, [fp, #32]
90010bc8:	4658      	mov	r0, fp
90010bca:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
90010bcc:	2200      	movs	r2, #0
90010bce:	4669      	mov	r1, sp
90010bd0:	6820      	ldr	r0, [r4, #0]
90010bd2:	f7fe faeb 	bl	9000f1ac <xQueueReceive>
90010bd6:	2800      	cmp	r0, #0
90010bd8:	d0cc      	beq.n	90010b74 <prvTimerTask+0x10>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
90010bda:	9b00      	ldr	r3, [sp, #0]
90010bdc:	2b00      	cmp	r3, #0
90010bde:	db77      	blt.n	90010cd0 <prvTimerTask+0x16c>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
90010be0:	9f02      	ldr	r7, [sp, #8]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
90010be2:	697b      	ldr	r3, [r7, #20]
90010be4:	b113      	cbz	r3, 90010bec <prvTimerTask+0x88>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
90010be6:	1d38      	adds	r0, r7, #4
90010be8:	f7fd fc7a 	bl	9000e4e0 <uxListRemove>
	xTimeNow = xTaskGetTickCount();
90010bec:	f7ff fb9e 	bl	9001032c <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
90010bf0:	682b      	ldr	r3, [r5, #0]
	xTimeNow = xTaskGetTickCount();
90010bf2:	4680      	mov	r8, r0
	if( xTimeNow < xLastTime )
90010bf4:	4298      	cmp	r0, r3
90010bf6:	f0c0 8083 	bcc.w	90010d00 <prvTimerTask+0x19c>
			switch( xMessage.xMessageID )
90010bfa:	9b00      	ldr	r3, [sp, #0]
	xLastTime = xTimeNow;
90010bfc:	f8c5 8000 	str.w	r8, [r5]
			switch( xMessage.xMessageID )
90010c00:	2b09      	cmp	r3, #9
90010c02:	d8e3      	bhi.n	90010bcc <prvTimerTask+0x68>
90010c04:	e8df f003 	tbb	[pc, r3]
90010c08:	54050505 	.word	0x54050505
90010c0c:	05055b3e 	.word	0x05055b3e
90010c10:	3e54      	.short	0x3e54
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
90010c12:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
90010c16:	69ba      	ldr	r2, [r7, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
90010c18:	f043 0301 	orr.w	r3, r3, #1
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
90010c1c:	613f      	str	r7, [r7, #16]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
90010c1e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
90010c22:	9b01      	ldr	r3, [sp, #4]
90010c24:	1899      	adds	r1, r3, r2
90010c26:	bf2c      	ite	cs
90010c28:	2001      	movcs	r0, #1
90010c2a:	2000      	movcc	r0, #0
	if( xNextExpiryTime <= xTimeNow )
90010c2c:	4541      	cmp	r1, r8
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
90010c2e:	6079      	str	r1, [r7, #4]
	if( xNextExpiryTime <= xTimeNow )
90010c30:	f200 8086 	bhi.w	90010d40 <prvTimerTask+0x1dc>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
90010c34:	eba8 0303 	sub.w	r3, r8, r3
90010c38:	429a      	cmp	r2, r3
90010c3a:	f200 80c0 	bhi.w	90010dbe <prvTimerTask+0x25a>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
90010c3e:	6a3b      	ldr	r3, [r7, #32]
90010c40:	4638      	mov	r0, r7
90010c42:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
90010c44:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
90010c48:	075b      	lsls	r3, r3, #29
90010c4a:	d5bf      	bpl.n	90010bcc <prvTimerTask+0x68>
	if( xTimerQueue != NULL )
90010c4c:	6822      	ldr	r2, [r4, #0]
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
90010c4e:	9901      	ldr	r1, [sp, #4]
90010c50:	69bb      	ldr	r3, [r7, #24]
	if( xTimerQueue != NULL )
90010c52:	b172      	cbz	r2, 90010c72 <prvTimerTask+0x10e>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
90010c54:	440b      	add	r3, r1
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
90010c56:	e9cd 3705 	strd	r3, r7, [sp, #20]
		xMessage.xMessageID = xCommandID;
90010c5a:	2300      	movs	r3, #0
90010c5c:	9304      	str	r3, [sp, #16]
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
90010c5e:	f7ff fe2b 	bl	900108b8 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
90010c62:	2300      	movs	r3, #0
90010c64:	a904      	add	r1, sp, #16
90010c66:	6820      	ldr	r0, [r4, #0]
90010c68:	461a      	mov	r2, r3
90010c6a:	f7fd ffb3 	bl	9000ebd4 <xQueueGenericSend>
							configASSERT( xResult );
90010c6e:	2800      	cmp	r0, #0
90010c70:	d1ac      	bne.n	90010bcc <prvTimerTask+0x68>
90010c72:	f04f 0350 	mov.w	r3, #80	; 0x50
90010c76:	f383 8811 	msr	BASEPRI, r3
90010c7a:	f3bf 8f6f 	isb	sy
90010c7e:	f3bf 8f4f 	dsb	sy
90010c82:	e7fe      	b.n	90010c82 <prvTimerTask+0x11e>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
90010c84:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
90010c88:	f043 0301 	orr.w	r3, r3, #1
90010c8c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
90010c90:	9b01      	ldr	r3, [sp, #4]
90010c92:	61bb      	str	r3, [r7, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
90010c94:	2b00      	cmp	r3, #0
90010c96:	f000 809e 	beq.w	90010dd6 <prvTimerTask+0x272>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
90010c9a:	4443      	add	r3, r8
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
90010c9c:	1d39      	adds	r1, r7, #4
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
90010c9e:	613f      	str	r7, [r7, #16]
	if( xNextExpiryTime <= xTimeNow )
90010ca0:	4543      	cmp	r3, r8
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
90010ca2:	607b      	str	r3, [r7, #4]
	if( xNextExpiryTime <= xTimeNow )
90010ca4:	d856      	bhi.n	90010d54 <prvTimerTask+0x1f0>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
90010ca6:	4b53      	ldr	r3, [pc, #332]	; (90010df4 <prvTimerTask+0x290>)
90010ca8:	6818      	ldr	r0, [r3, #0]
90010caa:	f7fd fc01 	bl	9000e4b0 <vListInsert>
	return xProcessTimerNow;
90010cae:	e78d      	b.n	90010bcc <prvTimerTask+0x68>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
90010cb0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
90010cb4:	f023 0301 	bic.w	r3, r3, #1
90010cb8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
					break;
90010cbc:	e786      	b.n	90010bcc <prvTimerTask+0x68>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
90010cbe:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
90010cc2:	079a      	lsls	r2, r3, #30
90010cc4:	d572      	bpl.n	90010dac <prvTimerTask+0x248>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
90010cc6:	f023 0301 	bic.w	r3, r3, #1
90010cca:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
90010cce:	e77d      	b.n	90010bcc <prvTimerTask+0x68>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
90010cd0:	9b01      	ldr	r3, [sp, #4]
90010cd2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
90010cd6:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
90010cd8:	9b00      	ldr	r3, [sp, #0]
90010cda:	2b00      	cmp	r3, #0
90010cdc:	f6ff af76 	blt.w	90010bcc <prvTimerTask+0x68>
90010ce0:	e77e      	b.n	90010be0 <prvTimerTask+0x7c>
	vTaskSuspendAll();
90010ce2:	f7ff fb0b 	bl	900102fc <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
90010ce6:	f7ff fb21 	bl	9001032c <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
90010cea:	682a      	ldr	r2, [r5, #0]
	xTimeNow = xTaskGetTickCount();
90010cec:	4682      	mov	sl, r0
	if( xTimeNow < xLastTime )
90010cee:	4282      	cmp	r2, r0
90010cf0:	d909      	bls.n	90010d06 <prvTimerTask+0x1a2>
		prvSwitchTimerLists();
90010cf2:	f7ff fee9 	bl	90010ac8 <prvSwitchTimerLists>
	xLastTime = xTimeNow;
90010cf6:	f8c5 a000 	str.w	sl, [r5]
			( void ) xTaskResumeAll();
90010cfa:	f7ff fb07 	bl	9001030c <xTaskResumeAll>
90010cfe:	e765      	b.n	90010bcc <prvTimerTask+0x68>
		prvSwitchTimerLists();
90010d00:	f7ff fee2 	bl	90010ac8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
90010d04:	e779      	b.n	90010bfa <prvTimerTask+0x96>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
90010d06:	4b3b      	ldr	r3, [pc, #236]	; (90010df4 <prvTimerTask+0x290>)
	xLastTime = xTimeNow;
90010d08:	f8c5 a000 	str.w	sl, [r5]
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
90010d0c:	681a      	ldr	r2, [r3, #0]
90010d0e:	6812      	ldr	r2, [r2, #0]
90010d10:	fab2 f282 	clz	r2, r2
90010d14:	0952      	lsrs	r2, r2, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
90010d16:	eba7 010a 	sub.w	r1, r7, sl
90010d1a:	6820      	ldr	r0, [r4, #0]
90010d1c:	f7fe fe3a 	bl	9000f994 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
90010d20:	f7ff faf4 	bl	9001030c <xTaskResumeAll>
90010d24:	2800      	cmp	r0, #0
90010d26:	f47f af51 	bne.w	90010bcc <prvTimerTask+0x68>
					portYIELD_WITHIN_API();
90010d2a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
90010d2e:	f8c9 3d04 	str.w	r3, [r9, #3332]	; 0xd04
90010d32:	f3bf 8f4f 	dsb	sy
90010d36:	f3bf 8f6f 	isb	sy
90010d3a:	e747      	b.n	90010bcc <prvTimerTask+0x68>
90010d3c:	2200      	movs	r2, #0
90010d3e:	e7ea      	b.n	90010d16 <prvTimerTask+0x1b2>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
90010d40:	4543      	cmp	r3, r8
90010d42:	d902      	bls.n	90010d4a <prvTimerTask+0x1e6>
90010d44:	2800      	cmp	r0, #0
90010d46:	f43f af7a 	beq.w	90010c3e <prvTimerTask+0xda>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
90010d4a:	1d39      	adds	r1, r7, #4
90010d4c:	6830      	ldr	r0, [r6, #0]
90010d4e:	f7fd fbaf 	bl	9000e4b0 <vListInsert>
	return xProcessTimerNow;
90010d52:	e73b      	b.n	90010bcc <prvTimerTask+0x68>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
90010d54:	6830      	ldr	r0, [r6, #0]
90010d56:	f7fd fbab 	bl	9000e4b0 <vListInsert>
90010d5a:	e737      	b.n	90010bcc <prvTimerTask+0x68>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
90010d5c:	f8db 2018 	ldr.w	r2, [fp, #24]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
90010d60:	f8cb b010 	str.w	fp, [fp, #16]
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
90010d64:	18b8      	adds	r0, r7, r2
	if( xNextExpiryTime <= xTimeNow )
90010d66:	4582      	cmp	sl, r0
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
90010d68:	f8cb 0004 	str.w	r0, [fp, #4]
	if( xNextExpiryTime <= xTimeNow )
90010d6c:	d322      	bcc.n	90010db4 <prvTimerTask+0x250>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
90010d6e:	ebaa 0307 	sub.w	r3, sl, r7
90010d72:	429a      	cmp	r2, r3
90010d74:	d829      	bhi.n	90010dca <prvTimerTask+0x266>
	if( xTimerQueue != NULL )
90010d76:	6823      	ldr	r3, [r4, #0]
90010d78:	b17b      	cbz	r3, 90010d9a <prvTimerTask+0x236>
		xMessage.xMessageID = xCommandID;
90010d7a:	2300      	movs	r3, #0
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
90010d7c:	9705      	str	r7, [sp, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
90010d7e:	f8cd b018 	str.w	fp, [sp, #24]
		xMessage.xMessageID = xCommandID;
90010d82:	9304      	str	r3, [sp, #16]
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
90010d84:	f7ff fd98 	bl	900108b8 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
90010d88:	2300      	movs	r3, #0
90010d8a:	a904      	add	r1, sp, #16
90010d8c:	6820      	ldr	r0, [r4, #0]
90010d8e:	461a      	mov	r2, r3
90010d90:	f7fd ff20 	bl	9000ebd4 <xQueueGenericSend>
			configASSERT( xResult );
90010d94:	2800      	cmp	r0, #0
90010d96:	f47f af15 	bne.w	90010bc4 <prvTimerTask+0x60>
90010d9a:	f04f 0350 	mov.w	r3, #80	; 0x50
90010d9e:	f383 8811 	msr	BASEPRI, r3
90010da2:	f3bf 8f6f 	isb	sy
90010da6:	f3bf 8f4f 	dsb	sy
90010daa:	e7fe      	b.n	90010daa <prvTimerTask+0x246>
							vPortFree( pxTimer );
90010dac:	4638      	mov	r0, r7
90010dae:	f7fd fafb 	bl	9000e3a8 <vPortFree>
90010db2:	e70b      	b.n	90010bcc <prvTimerTask+0x68>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
90010db4:	4641      	mov	r1, r8
90010db6:	6830      	ldr	r0, [r6, #0]
90010db8:	f7fd fb7a 	bl	9000e4b0 <vListInsert>
	return xProcessTimerNow;
90010dbc:	e702      	b.n	90010bc4 <prvTimerTask+0x60>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
90010dbe:	4b0d      	ldr	r3, [pc, #52]	; (90010df4 <prvTimerTask+0x290>)
90010dc0:	1d39      	adds	r1, r7, #4
90010dc2:	6818      	ldr	r0, [r3, #0]
90010dc4:	f7fd fb74 	bl	9000e4b0 <vListInsert>
	return xProcessTimerNow;
90010dc8:	e700      	b.n	90010bcc <prvTimerTask+0x68>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
90010dca:	4b0a      	ldr	r3, [pc, #40]	; (90010df4 <prvTimerTask+0x290>)
90010dcc:	4641      	mov	r1, r8
90010dce:	6818      	ldr	r0, [r3, #0]
90010dd0:	f7fd fb6e 	bl	9000e4b0 <vListInsert>
	return xProcessTimerNow;
90010dd4:	e6f6      	b.n	90010bc4 <prvTimerTask+0x60>
90010dd6:	f04f 0350 	mov.w	r3, #80	; 0x50
90010dda:	f383 8811 	msr	BASEPRI, r3
90010dde:	f3bf 8f6f 	isb	sy
90010de2:	f3bf 8f4f 	dsb	sy
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
90010de6:	e7fe      	b.n	90010de6 <prvTimerTask+0x282>
90010de8:	24021adc 	.word	0x24021adc
90010dec:	24021bac 	.word	0x24021bac
90010df0:	24021c00 	.word	0x24021c00
90010df4:	24021ae0 	.word	0x24021ae0

90010df8 <xTimerCreateTimerTask>:
{
90010df8:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
90010dfa:	4c23      	ldr	r4, [pc, #140]	; (90010e88 <xTimerCreateTimerTask+0x90>)
{
90010dfc:	b089      	sub	sp, #36	; 0x24
	taskENTER_CRITICAL();
90010dfe:	f7fd fbf1 	bl	9000e5e4 <vPortEnterCritical>
		if( xTimerQueue == NULL )
90010e02:	6825      	ldr	r5, [r4, #0]
90010e04:	b335      	cbz	r5, 90010e54 <xTimerCreateTimerTask+0x5c>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
90010e06:	f7fd fc0f 	bl	9000e628 <vPortExitCritical>
	if( xTimerQueue != NULL )
90010e0a:	6823      	ldr	r3, [r4, #0]
90010e0c:	b1cb      	cbz	r3, 90010e42 <xTimerCreateTimerTask+0x4a>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
90010e0e:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
90010e10:	aa07      	add	r2, sp, #28
90010e12:	a906      	add	r1, sp, #24
90010e14:	a805      	add	r0, sp, #20
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
90010e16:	2502      	movs	r5, #2
			StackType_t *pxTimerTaskStackBuffer = NULL;
90010e18:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
90010e1c:	f7fd f868 	bl	9000def0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
90010e20:	4623      	mov	r3, r4
90010e22:	9a07      	ldr	r2, [sp, #28]
90010e24:	9500      	str	r5, [sp, #0]
90010e26:	e9dd 0105 	ldrd	r0, r1, [sp, #20]
90010e2a:	e9cd 1001 	strd	r1, r0, [sp, #4]
90010e2e:	4917      	ldr	r1, [pc, #92]	; (90010e8c <xTimerCreateTimerTask+0x94>)
90010e30:	4817      	ldr	r0, [pc, #92]	; (90010e90 <xTimerCreateTimerTask+0x98>)
90010e32:	f7ff f82b 	bl	9000fe8c <xTaskCreateStatic>
90010e36:	4b17      	ldr	r3, [pc, #92]	; (90010e94 <xTimerCreateTimerTask+0x9c>)
90010e38:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
90010e3a:	b110      	cbz	r0, 90010e42 <xTimerCreateTimerTask+0x4a>
}
90010e3c:	2001      	movs	r0, #1
90010e3e:	b009      	add	sp, #36	; 0x24
90010e40:	bdf0      	pop	{r4, r5, r6, r7, pc}
90010e42:	f04f 0350 	mov.w	r3, #80	; 0x50
90010e46:	f383 8811 	msr	BASEPRI, r3
90010e4a:	f3bf 8f6f 	isb	sy
90010e4e:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
90010e52:	e7fe      	b.n	90010e52 <xTimerCreateTimerTask+0x5a>
			vListInitialise( &xActiveTimerList1 );
90010e54:	4f10      	ldr	r7, [pc, #64]	; (90010e98 <xTimerCreateTimerTask+0xa0>)
			vListInitialise( &xActiveTimerList2 );
90010e56:	4e11      	ldr	r6, [pc, #68]	; (90010e9c <xTimerCreateTimerTask+0xa4>)
			vListInitialise( &xActiveTimerList1 );
90010e58:	4638      	mov	r0, r7
90010e5a:	f7fd fb09 	bl	9000e470 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
90010e5e:	4630      	mov	r0, r6
90010e60:	f7fd fb06 	bl	9000e470 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
90010e64:	4a0e      	ldr	r2, [pc, #56]	; (90010ea0 <xTimerCreateTimerTask+0xa8>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
90010e66:	9500      	str	r5, [sp, #0]
90010e68:	2110      	movs	r1, #16
			pxCurrentTimerList = &xActiveTimerList1;
90010e6a:	6017      	str	r7, [r2, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
90010e6c:	200a      	movs	r0, #10
			pxOverflowTimerList = &xActiveTimerList2;
90010e6e:	4a0d      	ldr	r2, [pc, #52]	; (90010ea4 <xTimerCreateTimerTask+0xac>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
90010e70:	4b0d      	ldr	r3, [pc, #52]	; (90010ea8 <xTimerCreateTimerTask+0xb0>)
			pxOverflowTimerList = &xActiveTimerList2;
90010e72:	6016      	str	r6, [r2, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
90010e74:	4a0d      	ldr	r2, [pc, #52]	; (90010eac <xTimerCreateTimerTask+0xb4>)
90010e76:	f7fd fd57 	bl	9000e928 <xQueueGenericCreateStatic>
90010e7a:	6020      	str	r0, [r4, #0]
				if( xTimerQueue != NULL )
90010e7c:	2800      	cmp	r0, #0
90010e7e:	d0c2      	beq.n	90010e06 <xTimerCreateTimerTask+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
90010e80:	490b      	ldr	r1, [pc, #44]	; (90010eb0 <xTimerCreateTimerTask+0xb8>)
90010e82:	f7fe fd5f 	bl	9000f944 <vQueueAddToRegistry>
90010e86:	e7be      	b.n	90010e06 <xTimerCreateTimerTask+0xe>
90010e88:	24021c00 	.word	0x24021c00
90010e8c:	90028c00 	.word	0x90028c00
90010e90:	90010b65 	.word	0x90010b65
90010e94:	24021c04 	.word	0x24021c04
90010e98:	24021b84 	.word	0x24021b84
90010e9c:	24021b98 	.word	0x24021b98
90010ea0:	24021adc 	.word	0x24021adc
90010ea4:	24021ae0 	.word	0x24021ae0
90010ea8:	24021bb0 	.word	0x24021bb0
90010eac:	24021ae4 	.word	0x24021ae4
90010eb0:	90028bf8 	.word	0x90028bf8

90010eb4 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
90010eb4:	b530      	push	{r4, r5, lr}
90010eb6:	b085      	sub	sp, #20
90010eb8:	4614      	mov	r4, r2
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
90010eba:	f06f 0501 	mvn.w	r5, #1
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
90010ebe:	461a      	mov	r2, r3
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
90010ec0:	9001      	str	r0, [sp, #4]
		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
90010ec2:	2300      	movs	r3, #0
90010ec4:	4804      	ldr	r0, [pc, #16]	; (90010ed8 <xTimerPendFunctionCallFromISR+0x24>)
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
90010ec6:	9102      	str	r1, [sp, #8]
		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
90010ec8:	4669      	mov	r1, sp
90010eca:	6800      	ldr	r0, [r0, #0]
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
90010ecc:	9500      	str	r5, [sp, #0]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
90010ece:	9403      	str	r4, [sp, #12]
		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
90010ed0:	f7fe f8aa 	bl	9000f028 <xQueueGenericSendFromISR>

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
	}
90010ed4:	b005      	add	sp, #20
90010ed6:	bd30      	pop	{r4, r5, pc}
90010ed8:	24021c00 	.word	0x24021c00

90010edc <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
90010edc:	8880      	ldrh	r0, [r0, #4]
90010ede:	4770      	bx	lr

90010ee0 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
90010ee0:	b570      	push	{r4, r5, r6, lr}
90010ee2:	6803      	ldr	r3, [r0, #0]
90010ee4:	460c      	mov	r4, r1
90010ee6:	2100      	movs	r1, #0
90010ee8:	4605      	mov	r5, r0
90010eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90010eec:	4798      	blx	r3
90010eee:	4606      	mov	r6, r0
90010ef0:	682b      	ldr	r3, [r5, #0]
90010ef2:	4628      	mov	r0, r5
90010ef4:	1ba4      	subs	r4, r4, r6
90010ef6:	6a1b      	ldr	r3, [r3, #32]
90010ef8:	b2a4      	uxth	r4, r4
90010efa:	4798      	blx	r3
90010efc:	fbb4 f0f0 	udiv	r0, r4, r0
90010f00:	bd70      	pop	{r4, r5, r6, pc}

90010f02 <_ZN8touchgfx17AbstractPartition5clearEv>:
90010f02:	2300      	movs	r3, #0
90010f04:	8083      	strh	r3, [r0, #4]
90010f06:	4770      	bx	lr

90010f08 <_ZN8touchgfx17AbstractPartition8allocateEt>:
90010f08:	b510      	push	{r4, lr}
90010f0a:	6803      	ldr	r3, [r0, #0]
90010f0c:	4604      	mov	r4, r0
90010f0e:	8881      	ldrh	r1, [r0, #4]
90010f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90010f12:	4798      	blx	r3
90010f14:	88a3      	ldrh	r3, [r4, #4]
90010f16:	3301      	adds	r3, #1
90010f18:	80a3      	strh	r3, [r4, #4]
90010f1a:	bd10      	pop	{r4, pc}

90010f1c <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
90010f1c:	6803      	ldr	r3, [r0, #0]
90010f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90010f20:	4718      	bx	r3

90010f22 <_ZN8touchgfx17AbstractPartitionD1Ev>:
90010f22:	4770      	bx	lr

90010f24 <_ZN8touchgfx17AbstractPartitionC1Ev>:
90010f24:	4a02      	ldr	r2, [pc, #8]	; (90010f30 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
90010f26:	6002      	str	r2, [r0, #0]
90010f28:	2200      	movs	r2, #0
90010f2a:	8082      	strh	r2, [r0, #4]
90010f2c:	4770      	bx	lr
90010f2e:	bf00      	nop
90010f30:	90028c10 	.word	0x90028c10

90010f34 <_ZN8touchgfx9Container13getFirstChildEv>:
90010f34:	6a80      	ldr	r0, [r0, #40]	; 0x28
90010f36:	4770      	bx	lr

90010f38 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
90010f38:	6a83      	ldr	r3, [r0, #40]	; 0x28
90010f3a:	2000      	movs	r0, #0
90010f3c:	b12b      	cbz	r3, 90010f4a <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
90010f3e:	b920      	cbnz	r0, 90010f4a <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
90010f40:	1a5a      	subs	r2, r3, r1
90010f42:	699b      	ldr	r3, [r3, #24]
90010f44:	4250      	negs	r0, r2
90010f46:	4150      	adcs	r0, r2
90010f48:	e7f8      	b.n	90010f3c <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
90010f4a:	4770      	bx	lr

90010f4c <_ZN8touchgfx9Container3addERNS_8DrawableE>:
90010f4c:	2300      	movs	r3, #0
90010f4e:	6148      	str	r0, [r1, #20]
90010f50:	618b      	str	r3, [r1, #24]
90010f52:	6a83      	ldr	r3, [r0, #40]	; 0x28
90010f54:	b913      	cbnz	r3, 90010f5c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x10>
90010f56:	6281      	str	r1, [r0, #40]	; 0x28
90010f58:	4770      	bx	lr
90010f5a:	4613      	mov	r3, r2
90010f5c:	699a      	ldr	r2, [r3, #24]
90010f5e:	2a00      	cmp	r2, #0
90010f60:	d1fb      	bne.n	90010f5a <_ZN8touchgfx9Container3addERNS_8DrawableE+0xe>
90010f62:	6199      	str	r1, [r3, #24]
90010f64:	4770      	bx	lr

90010f66 <_ZN8touchgfx9Container9removeAllEv>:
90010f66:	2200      	movs	r2, #0
90010f68:	6a83      	ldr	r3, [r0, #40]	; 0x28
90010f6a:	b123      	cbz	r3, 90010f76 <_ZN8touchgfx9Container9removeAllEv+0x10>
90010f6c:	6999      	ldr	r1, [r3, #24]
90010f6e:	6281      	str	r1, [r0, #40]	; 0x28
90010f70:	e9c3 2205 	strd	r2, r2, [r3, #20]
90010f74:	e7f8      	b.n	90010f68 <_ZN8touchgfx9Container9removeAllEv+0x2>
90010f76:	4770      	bx	lr

90010f78 <_ZN8touchgfx9Container6unlinkEv>:
90010f78:	2300      	movs	r3, #0
90010f7a:	6283      	str	r3, [r0, #40]	; 0x28
90010f7c:	4770      	bx	lr

90010f7e <_ZNK8touchgfx9Container12getSolidRectEv>:
90010f7e:	2200      	movs	r2, #0
90010f80:	8002      	strh	r2, [r0, #0]
90010f82:	8042      	strh	r2, [r0, #2]
90010f84:	8082      	strh	r2, [r0, #4]
90010f86:	80c2      	strh	r2, [r0, #6]
90010f88:	4770      	bx	lr

90010f8a <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
90010f8a:	b570      	push	{r4, r5, r6, lr}
90010f8c:	460d      	mov	r5, r1
90010f8e:	4616      	mov	r6, r2
90010f90:	6a84      	ldr	r4, [r0, #40]	; 0x28
90010f92:	b13c      	cbz	r4, 90010fa4 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
90010f94:	6823      	ldr	r3, [r4, #0]
90010f96:	4620      	mov	r0, r4
90010f98:	4632      	mov	r2, r6
90010f9a:	4629      	mov	r1, r5
90010f9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
90010f9e:	4798      	blx	r3
90010fa0:	69a4      	ldr	r4, [r4, #24]
90010fa2:	e7f6      	b.n	90010f92 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
90010fa4:	bd70      	pop	{r4, r5, r6, pc}

90010fa6 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
90010fa6:	b538      	push	{r3, r4, r5, lr}
90010fa8:	460d      	mov	r5, r1
90010faa:	6a84      	ldr	r4, [r0, #40]	; 0x28
90010fac:	b134      	cbz	r4, 90010fbc <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
90010fae:	682b      	ldr	r3, [r5, #0]
90010fb0:	4621      	mov	r1, r4
90010fb2:	4628      	mov	r0, r5
90010fb4:	689b      	ldr	r3, [r3, #8]
90010fb6:	4798      	blx	r3
90010fb8:	69a4      	ldr	r4, [r4, #24]
90010fba:	e7f7      	b.n	90010fac <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
90010fbc:	bd38      	pop	{r3, r4, r5, pc}

90010fbe <_ZN8touchgfx9ContainerD1Ev>:
90010fbe:	4770      	bx	lr

90010fc0 <_ZN8touchgfx9ContainerD0Ev>:
90010fc0:	b510      	push	{r4, lr}
90010fc2:	4604      	mov	r4, r0
90010fc4:	212c      	movs	r1, #44	; 0x2c
90010fc6:	f012 fc46 	bl	90023856 <_ZdlPvj>
90010fca:	4620      	mov	r0, r4
90010fcc:	bd10      	pop	{r4, pc}

90010fce <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
90010fce:	6a83      	ldr	r3, [r0, #40]	; 0x28
90010fd0:	b19b      	cbz	r3, 90010ffa <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
90010fd2:	428b      	cmp	r3, r1
90010fd4:	d109      	bne.n	90010fea <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
90010fd6:	699a      	ldr	r2, [r3, #24]
90010fd8:	2100      	movs	r1, #0
90010fda:	6159      	str	r1, [r3, #20]
90010fdc:	6282      	str	r2, [r0, #40]	; 0x28
90010fde:	b902      	cbnz	r2, 90010fe2 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
90010fe0:	4770      	bx	lr
90010fe2:	6199      	str	r1, [r3, #24]
90010fe4:	4770      	bx	lr
90010fe6:	4613      	mov	r3, r2
90010fe8:	b13a      	cbz	r2, 90010ffa <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
90010fea:	699a      	ldr	r2, [r3, #24]
90010fec:	428a      	cmp	r2, r1
90010fee:	d1fa      	bne.n	90010fe6 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
90010ff0:	698a      	ldr	r2, [r1, #24]
90010ff2:	619a      	str	r2, [r3, #24]
90010ff4:	2300      	movs	r3, #0
90010ff6:	e9c1 3305 	strd	r3, r3, [r1, #20]
90010ffa:	4770      	bx	lr

90010ffc <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
90010ffc:	b410      	push	{r4}
90010ffe:	6a83      	ldr	r3, [r0, #40]	; 0x28
90011000:	4604      	mov	r4, r0
90011002:	b92b      	cbnz	r3, 90011010 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
90011004:	6803      	ldr	r3, [r0, #0]
90011006:	4611      	mov	r1, r2
90011008:	f85d 4b04 	ldr.w	r4, [sp], #4
9001100c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
9001100e:	4718      	bx	r3
90011010:	b941      	cbnz	r1, 90011024 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
90011012:	6193      	str	r3, [r2, #24]
90011014:	6282      	str	r2, [r0, #40]	; 0x28
90011016:	6154      	str	r4, [r2, #20]
90011018:	f85d 4b04 	ldr.w	r4, [sp], #4
9001101c:	4770      	bx	lr
9001101e:	4603      	mov	r3, r0
90011020:	2800      	cmp	r0, #0
90011022:	d0f9      	beq.n	90011018 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
90011024:	4299      	cmp	r1, r3
90011026:	6998      	ldr	r0, [r3, #24]
90011028:	d1f9      	bne.n	9001101e <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
9001102a:	6190      	str	r0, [r2, #24]
9001102c:	618a      	str	r2, [r1, #24]
9001102e:	e7f2      	b.n	90011016 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>

90011030 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
90011030:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90011034:	461f      	mov	r7, r3
90011036:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
9001103a:	460d      	mov	r5, r1
9001103c:	4616      	mov	r6, r2
9001103e:	b103      	cbz	r3, 90011042 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
90011040:	6038      	str	r0, [r7, #0]
90011042:	6a84      	ldr	r4, [r0, #40]	; 0x28
90011044:	b314      	cbz	r4, 9001108c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
90011046:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
9001104a:	b1eb      	cbz	r3, 90011088 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
9001104c:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
90011050:	428d      	cmp	r5, r1
90011052:	db19      	blt.n	90011088 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
90011054:	b289      	uxth	r1, r1
90011056:	8923      	ldrh	r3, [r4, #8]
90011058:	440b      	add	r3, r1
9001105a:	b21b      	sxth	r3, r3
9001105c:	429d      	cmp	r5, r3
9001105e:	da13      	bge.n	90011088 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
90011060:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
90011064:	4296      	cmp	r6, r2
90011066:	db0f      	blt.n	90011088 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
90011068:	b292      	uxth	r2, r2
9001106a:	8963      	ldrh	r3, [r4, #10]
9001106c:	4413      	add	r3, r2
9001106e:	b21b      	sxth	r3, r3
90011070:	429e      	cmp	r6, r3
90011072:	da09      	bge.n	90011088 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
90011074:	6823      	ldr	r3, [r4, #0]
90011076:	1ab2      	subs	r2, r6, r2
90011078:	1a69      	subs	r1, r5, r1
9001107a:	4620      	mov	r0, r4
9001107c:	f8d3 8024 	ldr.w	r8, [r3, #36]	; 0x24
90011080:	b212      	sxth	r2, r2
90011082:	463b      	mov	r3, r7
90011084:	b209      	sxth	r1, r1
90011086:	47c0      	blx	r8
90011088:	69a4      	ldr	r4, [r4, #24]
9001108a:	e7db      	b.n	90011044 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
9001108c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

90011090 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
90011090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90011094:	4c6d      	ldr	r4, [pc, #436]	; (9001124c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1bc>)
90011096:	b0a1      	sub	sp, #132	; 0x84
90011098:	4606      	mov	r6, r0
9001109a:	6824      	ldr	r4, [r4, #0]
9001109c:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
9001109e:	f894 9049 	ldrb.w	r9, [r4, #73]	; 0x49
900110a2:	2400      	movs	r4, #0
900110a4:	9303      	str	r3, [sp, #12]
900110a6:	802c      	strh	r4, [r5, #0]
900110a8:	9d2b      	ldr	r5, [sp, #172]	; 0xac
900110aa:	802c      	strh	r4, [r5, #0]
900110ac:	601c      	str	r4, [r3, #0]
900110ae:	e9cd 1201 	strd	r1, r2, [sp, #4]
900110b2:	f7ff ffbd 	bl	90011030 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
900110b6:	f1b9 0f03 	cmp.w	r9, #3
900110ba:	f340 80c1 	ble.w	90011240 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b0>
900110be:	4631      	mov	r1, r6
900110c0:	a80c      	add	r0, sp, #48	; 0x30
900110c2:	f003 fb43 	bl	9001474c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
900110c6:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
900110ca:	9306      	str	r3, [sp, #24]
900110cc:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
900110d0:	9307      	str	r3, [sp, #28]
900110d2:	9b03      	ldr	r3, [sp, #12]
900110d4:	f8d3 a000 	ldr.w	sl, [r3]
900110d8:	f1ba 0f00 	cmp.w	sl, #0
900110dc:	f000 80b3 	beq.w	90011246 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b6>
900110e0:	4651      	mov	r1, sl
900110e2:	a810      	add	r0, sp, #64	; 0x40
900110e4:	f003 fb32 	bl	9001474c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
900110e8:	2002      	movs	r0, #2
900110ea:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
900110ee:	9b01      	ldr	r3, [sp, #4]
900110f0:	9a06      	ldr	r2, [sp, #24]
900110f2:	fb91 f1f0 	sdiv	r1, r1, r0
900110f6:	189d      	adds	r5, r3, r2
900110f8:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
900110fc:	9a07      	ldr	r2, [sp, #28]
900110fe:	4419      	add	r1, r3
90011100:	9b02      	ldr	r3, [sp, #8]
90011102:	4413      	add	r3, r2
90011104:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
90011108:	1a6d      	subs	r5, r5, r1
9001110a:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
9001110e:	fb92 f2f0 	sdiv	r2, r2, r0
90011112:	440a      	add	r2, r1
90011114:	1a9b      	subs	r3, r3, r2
90011116:	435b      	muls	r3, r3
90011118:	fb05 3505 	mla	r5, r5, r5, r3
9001111c:	4f4c      	ldr	r7, [pc, #304]	; (90011250 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
9001111e:	ac10      	add	r4, sp, #64	; 0x40
90011120:	f1b9 0f0c 	cmp.w	r9, #12
90011124:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
90011126:	c40f      	stmia	r4!, {r0, r1, r2, r3}
90011128:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
9001112a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
9001112c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
9001112e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
90011130:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
90011134:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
90011138:	f04f 0303 	mov.w	r3, #3
9001113c:	bfd8      	it	le
9001113e:	f109 32ff 	addle.w	r2, r9, #4294967295
90011142:	f04f 0400 	mov.w	r4, #0
90011146:	f8cd 9000 	str.w	r9, [sp]
9001114a:	bfcc      	ite	gt
9001114c:	4698      	movgt	r8, r3
9001114e:	fb92 f8f3 	sdivle	r8, r2, r3
90011152:	1c63      	adds	r3, r4, #1
90011154:	aa10      	add	r2, sp, #64	; 0x40
90011156:	f004 0401 	and.w	r4, r4, #1
9001115a:	f04f 0b00 	mov.w	fp, #0
9001115e:	9308      	str	r3, [sp, #32]
90011160:	9b00      	ldr	r3, [sp, #0]
90011162:	eb02 1444 	add.w	r4, r2, r4, lsl #5
90011166:	fb93 f3f8 	sdiv	r3, r3, r8
9001116a:	3404      	adds	r4, #4
9001116c:	b29b      	uxth	r3, r3
9001116e:	9304      	str	r3, [sp, #16]
90011170:	9a04      	ldr	r2, [sp, #16]
90011172:	f854 3c04 	ldr.w	r3, [r4, #-4]
90011176:	fb13 f302 	smulbb	r3, r3, r2
9001117a:	9a01      	ldr	r2, [sp, #4]
9001117c:	b29b      	uxth	r3, r3
9001117e:	1899      	adds	r1, r3, r2
90011180:	9305      	str	r3, [sp, #20]
90011182:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
90011186:	b209      	sxth	r1, r1
90011188:	4299      	cmp	r1, r3
9001118a:	db4d      	blt.n	90011228 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
9001118c:	8932      	ldrh	r2, [r6, #8]
9001118e:	4413      	add	r3, r2
90011190:	b21b      	sxth	r3, r3
90011192:	4299      	cmp	r1, r3
90011194:	da48      	bge.n	90011228 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
90011196:	9b04      	ldr	r3, [sp, #16]
90011198:	6827      	ldr	r7, [r4, #0]
9001119a:	fb17 f703 	smulbb	r7, r7, r3
9001119e:	9b02      	ldr	r3, [sp, #8]
900111a0:	b2bf      	uxth	r7, r7
900111a2:	18fa      	adds	r2, r7, r3
900111a4:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
900111a8:	b212      	sxth	r2, r2
900111aa:	429a      	cmp	r2, r3
900111ac:	db3c      	blt.n	90011228 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
900111ae:	8970      	ldrh	r0, [r6, #10]
900111b0:	4403      	add	r3, r0
900111b2:	b21b      	sxth	r3, r3
900111b4:	429a      	cmp	r2, r3
900111b6:	da37      	bge.n	90011228 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
900111b8:	2300      	movs	r3, #0
900111ba:	4630      	mov	r0, r6
900111bc:	930b      	str	r3, [sp, #44]	; 0x2c
900111be:	ab0b      	add	r3, sp, #44	; 0x2c
900111c0:	f7ff ff36 	bl	90011030 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
900111c4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
900111c6:	b37a      	cbz	r2, 90011228 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
900111c8:	4552      	cmp	r2, sl
900111ca:	d02d      	beq.n	90011228 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
900111cc:	4611      	mov	r1, r2
900111ce:	a80e      	add	r0, sp, #56	; 0x38
900111d0:	9209      	str	r2, [sp, #36]	; 0x24
900111d2:	f003 fabb 	bl	9001474c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
900111d6:	f04f 0e02 	mov.w	lr, #2
900111da:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	; 0x3c
900111de:	9a06      	ldr	r2, [sp, #24]
900111e0:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	; 0x38
900111e4:	9b01      	ldr	r3, [sp, #4]
900111e6:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	; 0x3e
900111ea:	4413      	add	r3, r2
900111ec:	9a07      	ldr	r2, [sp, #28]
900111ee:	fb91 f1fe 	sdiv	r1, r1, lr
900111f2:	fb9c fcfe 	sdiv	ip, ip, lr
900111f6:	4401      	add	r1, r0
900111f8:	1a58      	subs	r0, r3, r1
900111fa:	9b02      	ldr	r3, [sp, #8]
900111fc:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
90011200:	4413      	add	r3, r2
90011202:	9a09      	ldr	r2, [sp, #36]	; 0x24
90011204:	448c      	add	ip, r1
90011206:	eba3 030c 	sub.w	r3, r3, ip
9001120a:	435b      	muls	r3, r3
9001120c:	fb00 3300 	mla	r3, r0, r0, r3
90011210:	42ab      	cmp	r3, r5
90011212:	d208      	bcs.n	90011226 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
90011214:	990b      	ldr	r1, [sp, #44]	; 0x2c
90011216:	461d      	mov	r5, r3
90011218:	9803      	ldr	r0, [sp, #12]
9001121a:	6001      	str	r1, [r0, #0]
9001121c:	992a      	ldr	r1, [sp, #168]	; 0xa8
9001121e:	9805      	ldr	r0, [sp, #20]
90011220:	8008      	strh	r0, [r1, #0]
90011222:	992b      	ldr	r1, [sp, #172]	; 0xac
90011224:	800f      	strh	r7, [r1, #0]
90011226:	4692      	mov	sl, r2
90011228:	f10b 0b01 	add.w	fp, fp, #1
9001122c:	3408      	adds	r4, #8
9001122e:	f1bb 0f04 	cmp.w	fp, #4
90011232:	d19d      	bne.n	90011170 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
90011234:	9b00      	ldr	r3, [sp, #0]
90011236:	9c08      	ldr	r4, [sp, #32]
90011238:	444b      	add	r3, r9
9001123a:	4544      	cmp	r4, r8
9001123c:	9300      	str	r3, [sp, #0]
9001123e:	d188      	bne.n	90011152 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
90011240:	b021      	add	sp, #132	; 0x84
90011242:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90011246:	f04f 35ff 	mov.w	r5, #4294967295
9001124a:	e767      	b.n	9001111c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
9001124c:	24021c14 	.word	0x24021c14
90011250:	900265a8 	.word	0x900265a8

90011254 <_ZN8touchgfx4RectaNERKS0_>:
90011254:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
90011258:	f9b1 7000 	ldrsh.w	r7, [r1]
9001125c:	888c      	ldrh	r4, [r1, #4]
9001125e:	f9b0 9000 	ldrsh.w	r9, [r0]
90011262:	443c      	add	r4, r7
90011264:	b2a4      	uxth	r4, r4
90011266:	fa0f f884 	sxth.w	r8, r4
9001126a:	45c1      	cmp	r9, r8
9001126c:	da2f      	bge.n	900112ce <_ZN8touchgfx4RectaNERKS0_+0x7a>
9001126e:	8882      	ldrh	r2, [r0, #4]
90011270:	444a      	add	r2, r9
90011272:	b292      	uxth	r2, r2
90011274:	fa0f fe82 	sxth.w	lr, r2
90011278:	4577      	cmp	r7, lr
9001127a:	da28      	bge.n	900112ce <_ZN8touchgfx4RectaNERKS0_+0x7a>
9001127c:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
90011280:	88cb      	ldrh	r3, [r1, #6]
90011282:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
90011286:	442b      	add	r3, r5
90011288:	b21b      	sxth	r3, r3
9001128a:	429e      	cmp	r6, r3
9001128c:	da1f      	bge.n	900112ce <_ZN8touchgfx4RectaNERKS0_+0x7a>
9001128e:	88c3      	ldrh	r3, [r0, #6]
90011290:	4433      	add	r3, r6
90011292:	b29b      	uxth	r3, r3
90011294:	fa0f fc83 	sxth.w	ip, r3
90011298:	4565      	cmp	r5, ip
9001129a:	da18      	bge.n	900112ce <_ZN8touchgfx4RectaNERKS0_+0x7a>
9001129c:	454f      	cmp	r7, r9
9001129e:	bfb8      	it	lt
900112a0:	464f      	movlt	r7, r9
900112a2:	42b5      	cmp	r5, r6
900112a4:	bfb8      	it	lt
900112a6:	4635      	movlt	r5, r6
900112a8:	45f0      	cmp	r8, lr
900112aa:	bfd8      	it	le
900112ac:	4622      	movle	r2, r4
900112ae:	1bd2      	subs	r2, r2, r7
900112b0:	8082      	strh	r2, [r0, #4]
900112b2:	884a      	ldrh	r2, [r1, #2]
900112b4:	88c9      	ldrh	r1, [r1, #6]
900112b6:	8007      	strh	r7, [r0, #0]
900112b8:	440a      	add	r2, r1
900112ba:	8045      	strh	r5, [r0, #2]
900112bc:	b292      	uxth	r2, r2
900112be:	b211      	sxth	r1, r2
900112c0:	458c      	cmp	ip, r1
900112c2:	bfa8      	it	ge
900112c4:	4613      	movge	r3, r2
900112c6:	1b5b      	subs	r3, r3, r5
900112c8:	80c3      	strh	r3, [r0, #6]
900112ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
900112ce:	2300      	movs	r3, #0
900112d0:	8003      	strh	r3, [r0, #0]
900112d2:	8043      	strh	r3, [r0, #2]
900112d4:	8083      	strh	r3, [r0, #4]
900112d6:	80c3      	strh	r3, [r0, #6]
900112d8:	e7f7      	b.n	900112ca <_ZN8touchgfx4RectaNERKS0_+0x76>

900112da <_ZNK8touchgfx4Rect7isEmptyEv>:
900112da:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
900112de:	2b00      	cmp	r3, #0
900112e0:	dd06      	ble.n	900112f0 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
900112e2:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
900112e6:	2800      	cmp	r0, #0
900112e8:	bfcc      	ite	gt
900112ea:	2000      	movgt	r0, #0
900112ec:	2001      	movle	r0, #1
900112ee:	4770      	bx	lr
900112f0:	2001      	movs	r0, #1
900112f2:	4770      	bx	lr

900112f4 <_ZNK8touchgfx9Container16getContainedAreaEv>:
900112f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
900112f8:	2300      	movs	r3, #0
900112fa:	4604      	mov	r4, r0
900112fc:	6a8d      	ldr	r5, [r1, #40]	; 0x28
900112fe:	8003      	strh	r3, [r0, #0]
90011300:	8043      	strh	r3, [r0, #2]
90011302:	8083      	strh	r3, [r0, #4]
90011304:	80c3      	strh	r3, [r0, #6]
90011306:	2d00      	cmp	r5, #0
90011308:	d040      	beq.n	9001138c <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
9001130a:	1d28      	adds	r0, r5, #4
9001130c:	f7ff ffe5 	bl	900112da <_ZNK8touchgfx4Rect7isEmptyEv>
90011310:	b988      	cbnz	r0, 90011336 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
90011312:	4620      	mov	r0, r4
90011314:	f7ff ffe1 	bl	900112da <_ZNK8touchgfx4Rect7isEmptyEv>
90011318:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
9001131c:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
90011320:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
90011324:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
90011328:	b138      	cbz	r0, 9001133a <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
9001132a:	8022      	strh	r2, [r4, #0]
9001132c:	8063      	strh	r3, [r4, #2]
9001132e:	f8a4 e004 	strh.w	lr, [r4, #4]
90011332:	f8a4 c006 	strh.w	ip, [r4, #6]
90011336:	69ad      	ldr	r5, [r5, #24]
90011338:	e7e5      	b.n	90011306 <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
9001133a:	f9b4 0000 	ldrsh.w	r0, [r4]
9001133e:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
90011342:	4290      	cmp	r0, r2
90011344:	4607      	mov	r7, r0
90011346:	f8b4 8004 	ldrh.w	r8, [r4, #4]
9001134a:	460e      	mov	r6, r1
9001134c:	bfa8      	it	ge
9001134e:	4617      	movge	r7, r2
90011350:	4299      	cmp	r1, r3
90011352:	4472      	add	r2, lr
90011354:	f8b4 e006 	ldrh.w	lr, [r4, #6]
90011358:	bfa8      	it	ge
9001135a:	461e      	movge	r6, r3
9001135c:	4440      	add	r0, r8
9001135e:	4471      	add	r1, lr
90011360:	4463      	add	r3, ip
90011362:	b200      	sxth	r0, r0
90011364:	8027      	strh	r7, [r4, #0]
90011366:	b212      	sxth	r2, r2
90011368:	8066      	strh	r6, [r4, #2]
9001136a:	b209      	sxth	r1, r1
9001136c:	b21b      	sxth	r3, r3
9001136e:	4290      	cmp	r0, r2
90011370:	bfac      	ite	ge
90011372:	ebc7 0200 	rsbge	r2, r7, r0
90011376:	ebc7 0202 	rsblt	r2, r7, r2
9001137a:	4299      	cmp	r1, r3
9001137c:	bfac      	ite	ge
9001137e:	ebc6 0301 	rsbge	r3, r6, r1
90011382:	ebc6 0303 	rsblt	r3, r6, r3
90011386:	80a2      	strh	r2, [r4, #4]
90011388:	80e3      	strh	r3, [r4, #6]
9001138a:	e7d4      	b.n	90011336 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
9001138c:	4620      	mov	r0, r4
9001138e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

90011392 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
90011392:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
90011396:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
9001139a:	b383      	cbz	r3, 900113fe <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
9001139c:	6a84      	ldr	r4, [r0, #40]	; 0x28
9001139e:	b374      	cbz	r4, 900113fe <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
900113a0:	f9b1 5000 	ldrsh.w	r5, [r1]
900113a4:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
900113a8:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
900113ac:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
900113b0:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
900113b4:	b303      	cbz	r3, 900113f8 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
900113b6:	4668      	mov	r0, sp
900113b8:	1d21      	adds	r1, r4, #4
900113ba:	f8ad 5000 	strh.w	r5, [sp]
900113be:	f8ad 6002 	strh.w	r6, [sp, #2]
900113c2:	f8ad 7004 	strh.w	r7, [sp, #4]
900113c6:	f8ad 8006 	strh.w	r8, [sp, #6]
900113ca:	f7ff ff43 	bl	90011254 <_ZN8touchgfx4RectaNERKS0_>
900113ce:	4668      	mov	r0, sp
900113d0:	f7ff ff83 	bl	900112da <_ZNK8touchgfx4Rect7isEmptyEv>
900113d4:	b980      	cbnz	r0, 900113f8 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
900113d6:	f8bd 3000 	ldrh.w	r3, [sp]
900113da:	4669      	mov	r1, sp
900113dc:	88a2      	ldrh	r2, [r4, #4]
900113de:	4620      	mov	r0, r4
900113e0:	1a9b      	subs	r3, r3, r2
900113e2:	88e2      	ldrh	r2, [r4, #6]
900113e4:	f8ad 3000 	strh.w	r3, [sp]
900113e8:	f8bd 3002 	ldrh.w	r3, [sp, #2]
900113ec:	1a9b      	subs	r3, r3, r2
900113ee:	f8ad 3002 	strh.w	r3, [sp, #2]
900113f2:	6823      	ldr	r3, [r4, #0]
900113f4:	689b      	ldr	r3, [r3, #8]
900113f6:	4798      	blx	r3
900113f8:	69a4      	ldr	r4, [r4, #24]
900113fa:	2c00      	cmp	r4, #0
900113fc:	d1d8      	bne.n	900113b0 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
900113fe:	b002      	add	sp, #8
90011400:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

90011404 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
90011404:	b573      	push	{r0, r1, r4, r5, r6, lr}
90011406:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
9001140a:	460d      	mov	r5, r1
9001140c:	4616      	mov	r6, r2
9001140e:	b323      	cbz	r3, 9001145a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
90011410:	6a84      	ldr	r4, [r0, #40]	; 0x28
90011412:	b314      	cbz	r4, 9001145a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
90011414:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
90011418:	b1eb      	cbz	r3, 90011456 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
9001141a:	6828      	ldr	r0, [r5, #0]
9001141c:	466b      	mov	r3, sp
9001141e:	6869      	ldr	r1, [r5, #4]
90011420:	c303      	stmia	r3!, {r0, r1}
90011422:	4668      	mov	r0, sp
90011424:	1d21      	adds	r1, r4, #4
90011426:	f7ff ff15 	bl	90011254 <_ZN8touchgfx4RectaNERKS0_>
9001142a:	4668      	mov	r0, sp
9001142c:	f7ff ff55 	bl	900112da <_ZNK8touchgfx4Rect7isEmptyEv>
90011430:	b988      	cbnz	r0, 90011456 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
90011432:	f8bd 3000 	ldrh.w	r3, [sp]
90011436:	4669      	mov	r1, sp
90011438:	88a2      	ldrh	r2, [r4, #4]
9001143a:	4620      	mov	r0, r4
9001143c:	1a9b      	subs	r3, r3, r2
9001143e:	88e2      	ldrh	r2, [r4, #6]
90011440:	f8ad 3000 	strh.w	r3, [sp]
90011444:	f8bd 3002 	ldrh.w	r3, [sp, #2]
90011448:	1a9b      	subs	r3, r3, r2
9001144a:	4632      	mov	r2, r6
9001144c:	f8ad 3002 	strh.w	r3, [sp, #2]
90011450:	6823      	ldr	r3, [r4, #0]
90011452:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
90011454:	4798      	blx	r3
90011456:	69a4      	ldr	r4, [r4, #24]
90011458:	e7db      	b.n	90011412 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
9001145a:	b002      	add	sp, #8
9001145c:	bd70      	pop	{r4, r5, r6, pc}

9001145e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
9001145e:	6803      	ldr	r3, [r0, #0]
90011460:	b513      	push	{r0, r1, r4, lr}
90011462:	f8d3 40a8 	ldr.w	r4, [r3, #168]	; 0xa8
90011466:	2300      	movs	r3, #0
90011468:	e9cd 3300 	strd	r3, r3, [sp]
9001146c:	466b      	mov	r3, sp
9001146e:	47a0      	blx	r4
90011470:	b002      	add	sp, #8
90011472:	bd10      	pop	{r4, pc}

90011474 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
90011474:	2301      	movs	r3, #1
90011476:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
9001147a:	f880 306d 	strb.w	r3, [r0, #109]	; 0x6d
9001147e:	4770      	bx	lr

90011480 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
90011480:	2301      	movs	r3, #1
90011482:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
90011486:	f880 306d 	strb.w	r3, [r0, #109]	; 0x6d
9001148a:	4770      	bx	lr

9001148c <_ZN8touchgfx3HAL17allowDMATransfersEv>:
9001148c:	6843      	ldr	r3, [r0, #4]
9001148e:	2201      	movs	r2, #1
90011490:	725a      	strb	r2, [r3, #9]
90011492:	6840      	ldr	r0, [r0, #4]
90011494:	6803      	ldr	r3, [r0, #0]
90011496:	691b      	ldr	r3, [r3, #16]
90011498:	4718      	bx	r3

9001149a <_ZN8touchgfx3HAL8flushDMAEv>:
9001149a:	6840      	ldr	r0, [r0, #4]
9001149c:	6803      	ldr	r3, [r0, #0]
9001149e:	689b      	ldr	r3, [r3, #8]
900114a0:	4718      	bx	r3

900114a2 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
900114a2:	b530      	push	{r4, r5, lr}
900114a4:	b08b      	sub	sp, #44	; 0x2c
900114a6:	6804      	ldr	r4, [r0, #0]
900114a8:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
900114ac:	9509      	str	r5, [sp, #36]	; 0x24
900114ae:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
900114b2:	9508      	str	r5, [sp, #32]
900114b4:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
900114b8:	9507      	str	r5, [sp, #28]
900114ba:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
900114be:	9506      	str	r5, [sp, #24]
900114c0:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
900114c4:	9505      	str	r5, [sp, #20]
900114c6:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
900114ca:	9504      	str	r5, [sp, #16]
900114cc:	f8bd 5040 	ldrh.w	r5, [sp, #64]	; 0x40
900114d0:	9503      	str	r5, [sp, #12]
900114d2:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
900114d6:	9502      	str	r5, [sp, #8]
900114d8:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
900114dc:	e9cd 3500 	strd	r3, r5, [sp]
900114e0:	4613      	mov	r3, r2
900114e2:	6be4      	ldr	r4, [r4, #60]	; 0x3c
900114e4:	2200      	movs	r2, #0
900114e6:	47a0      	blx	r4
900114e8:	b00b      	add	sp, #44	; 0x2c
900114ea:	bd30      	pop	{r4, r5, pc}

900114ec <_ZN8touchgfx3HAL10beginFrameEv>:
900114ec:	4b04      	ldr	r3, [pc, #16]	; (90011500 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
900114ee:	781b      	ldrb	r3, [r3, #0]
900114f0:	b123      	cbz	r3, 900114fc <_ZN8touchgfx3HAL10beginFrameEv+0x10>
900114f2:	f890 006e 	ldrb.w	r0, [r0, #110]	; 0x6e
900114f6:	f080 0001 	eor.w	r0, r0, #1
900114fa:	4770      	bx	lr
900114fc:	2001      	movs	r0, #1
900114fe:	4770      	bx	lr
90011500:	24021c12 	.word	0x24021c12

90011504 <_ZN8touchgfx3HAL8endFrameEv>:
90011504:	b510      	push	{r4, lr}
90011506:	4604      	mov	r4, r0
90011508:	6840      	ldr	r0, [r0, #4]
9001150a:	6803      	ldr	r3, [r0, #0]
9001150c:	689b      	ldr	r3, [r3, #8]
9001150e:	4798      	blx	r3
90011510:	f894 306d 	ldrb.w	r3, [r4, #109]	; 0x6d
90011514:	b113      	cbz	r3, 9001151c <_ZN8touchgfx3HAL8endFrameEv+0x18>
90011516:	2301      	movs	r3, #1
90011518:	f884 306e 	strb.w	r3, [r4, #110]	; 0x6e
9001151c:	bd10      	pop	{r4, pc}

9001151e <_ZN8touchgfx3HAL10initializeEv>:
9001151e:	b510      	push	{r4, lr}
90011520:	4604      	mov	r4, r0
90011522:	f7f0 faeb 	bl	90001afc <_ZN8touchgfx10OSWrappers10initializeEv>
90011526:	f7ef f96f 	bl	90000808 <_ZN8touchgfx4GPIO4initEv>
9001152a:	6860      	ldr	r0, [r4, #4]
9001152c:	6803      	ldr	r3, [r0, #0]
9001152e:	68db      	ldr	r3, [r3, #12]
90011530:	4798      	blx	r3
90011532:	68e0      	ldr	r0, [r4, #12]
90011534:	6803      	ldr	r3, [r0, #0]
90011536:	689b      	ldr	r3, [r3, #8]
90011538:	4798      	blx	r3
9001153a:	6823      	ldr	r3, [r4, #0]
9001153c:	4620      	mov	r0, r4
9001153e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
90011540:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
90011544:	4718      	bx	r3
	...

90011548 <_ZN8touchgfx3HAL4tickEv>:
90011548:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
9001154a:	6803      	ldr	r3, [r0, #0]
9001154c:	4604      	mov	r4, r0
9001154e:	4d5b      	ldr	r5, [pc, #364]	; (900116bc <_ZN8touchgfx3HAL4tickEv+0x174>)
90011550:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
90011554:	4798      	blx	r3
90011556:	2800      	cmp	r0, #0
90011558:	f000 8095 	beq.w	90011686 <_ZN8touchgfx3HAL4tickEv+0x13e>
9001155c:	2001      	movs	r0, #1
9001155e:	2600      	movs	r6, #0
90011560:	f7ef f97c 	bl	9000085c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
90011564:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
90011568:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
9001156c:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
90011570:	f894 3079 	ldrb.w	r3, [r4, #121]	; 0x79
90011574:	f884 606a 	strb.w	r6, [r4, #106]	; 0x6a
90011578:	b133      	cbz	r3, 90011588 <_ZN8touchgfx3HAL4tickEv+0x40>
9001157a:	6823      	ldr	r3, [r4, #0]
9001157c:	4620      	mov	r0, r4
9001157e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
90011582:	4798      	blx	r3
90011584:	f884 6079 	strb.w	r6, [r4, #121]	; 0x79
90011588:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
9001158c:	2601      	movs	r6, #1
9001158e:	6862      	ldr	r2, [r4, #4]
90011590:	f083 0301 	eor.w	r3, r3, #1
90011594:	702e      	strb	r6, [r5, #0]
90011596:	7253      	strb	r3, [r2, #9]
90011598:	f001 ffc4 	bl	90013524 <_ZN8touchgfx11Application11getInstanceEv>
9001159c:	6803      	ldr	r3, [r0, #0]
9001159e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
900115a0:	4798      	blx	r3
900115a2:	f894 306b 	ldrb.w	r3, [r4, #107]	; 0x6b
900115a6:	b90b      	cbnz	r3, 900115ac <_ZN8touchgfx3HAL4tickEv+0x64>
900115a8:	f884 606b 	strb.w	r6, [r4, #107]	; 0x6b
900115ac:	f001 ffba 	bl	90013524 <_ZN8touchgfx11Application11getInstanceEv>
900115b0:	6803      	ldr	r3, [r0, #0]
900115b2:	695b      	ldr	r3, [r3, #20]
900115b4:	4798      	blx	r3
900115b6:	6de0      	ldr	r0, [r4, #92]	; 0x5c
900115b8:	6803      	ldr	r3, [r0, #0]
900115ba:	691b      	ldr	r3, [r3, #16]
900115bc:	4798      	blx	r3
900115be:	f894 306b 	ldrb.w	r3, [r4, #107]	; 0x6b
900115c2:	f894 206c 	ldrb.w	r2, [r4, #108]	; 0x6c
900115c6:	3b01      	subs	r3, #1
900115c8:	b2db      	uxtb	r3, r3
900115ca:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
900115ce:	b10a      	cbz	r2, 900115d4 <_ZN8touchgfx3HAL4tickEv+0x8c>
900115d0:	2b00      	cmp	r3, #0
900115d2:	d1eb      	bne.n	900115ac <_ZN8touchgfx3HAL4tickEv+0x64>
900115d4:	4a3a      	ldr	r2, [pc, #232]	; (900116c0 <_ZN8touchgfx3HAL4tickEv+0x178>)
900115d6:	f994 1068 	ldrsb.w	r1, [r4, #104]	; 0x68
900115da:	7813      	ldrb	r3, [r2, #0]
900115dc:	3301      	adds	r3, #1
900115de:	b25b      	sxtb	r3, r3
900115e0:	4299      	cmp	r1, r3
900115e2:	7013      	strb	r3, [r2, #0]
900115e4:	dc10      	bgt.n	90011608 <_ZN8touchgfx3HAL4tickEv+0xc0>
900115e6:	2300      	movs	r3, #0
900115e8:	68e0      	ldr	r0, [r4, #12]
900115ea:	a902      	add	r1, sp, #8
900115ec:	7013      	strb	r3, [r2, #0]
900115ee:	aa03      	add	r2, sp, #12
900115f0:	6803      	ldr	r3, [r0, #0]
900115f2:	68db      	ldr	r3, [r3, #12]
900115f4:	4798      	blx	r3
900115f6:	6823      	ldr	r3, [r4, #0]
900115f8:	2800      	cmp	r0, #0
900115fa:	d050      	beq.n	9001169e <_ZN8touchgfx3HAL4tickEv+0x156>
900115fc:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
90011600:	4620      	mov	r0, r4
90011602:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
90011606:	4798      	blx	r3
90011608:	2300      	movs	r3, #0
9001160a:	6960      	ldr	r0, [r4, #20]
9001160c:	f88d 3007 	strb.w	r3, [sp, #7]
90011610:	b158      	cbz	r0, 9001162a <_ZN8touchgfx3HAL4tickEv+0xe2>
90011612:	6803      	ldr	r3, [r0, #0]
90011614:	f10d 0107 	add.w	r1, sp, #7
90011618:	68db      	ldr	r3, [r3, #12]
9001161a:	4798      	blx	r3
9001161c:	b128      	cbz	r0, 9001162a <_ZN8touchgfx3HAL4tickEv+0xe2>
9001161e:	6de0      	ldr	r0, [r4, #92]	; 0x5c
90011620:	f89d 1007 	ldrb.w	r1, [sp, #7]
90011624:	6803      	ldr	r3, [r0, #0]
90011626:	68db      	ldr	r3, [r3, #12]
90011628:	4798      	blx	r3
9001162a:	f104 001c 	add.w	r0, r4, #28
9001162e:	f011 ff93 	bl	90023558 <_ZN8touchgfx8Gestures4tickEv>
90011632:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
90011636:	b30b      	cbz	r3, 9001167c <_ZN8touchgfx3HAL4tickEv+0x134>
90011638:	6920      	ldr	r0, [r4, #16]
9001163a:	6803      	ldr	r3, [r0, #0]
9001163c:	691b      	ldr	r3, [r3, #16]
9001163e:	4798      	blx	r3
90011640:	6f63      	ldr	r3, [r4, #116]	; 0x74
90011642:	4606      	mov	r6, r0
90011644:	b903      	cbnz	r3, 90011648 <_ZN8touchgfx3HAL4tickEv+0x100>
90011646:	6760      	str	r0, [r4, #116]	; 0x74
90011648:	6f63      	ldr	r3, [r4, #116]	; 0x74
9001164a:	4a1e      	ldr	r2, [pc, #120]	; (900116c4 <_ZN8touchgfx3HAL4tickEv+0x17c>)
9001164c:	1af3      	subs	r3, r6, r3
9001164e:	4293      	cmp	r3, r2
90011650:	d914      	bls.n	9001167c <_ZN8touchgfx3HAL4tickEv+0x134>
90011652:	6920      	ldr	r0, [r4, #16]
90011654:	6803      	ldr	r3, [r0, #0]
90011656:	699b      	ldr	r3, [r3, #24]
90011658:	4798      	blx	r3
9001165a:	6f63      	ldr	r3, [r4, #116]	; 0x74
9001165c:	2264      	movs	r2, #100	; 0x64
9001165e:	1af3      	subs	r3, r6, r3
90011660:	fbb3 f3f2 	udiv	r3, r3, r2
90011664:	fbb0 f0f3 	udiv	r0, r0, r3
90011668:	2800      	cmp	r0, #0
9001166a:	dc1d      	bgt.n	900116a8 <_ZN8touchgfx3HAL4tickEv+0x160>
9001166c:	f884 2069 	strb.w	r2, [r4, #105]	; 0x69
90011670:	6920      	ldr	r0, [r4, #16]
90011672:	2100      	movs	r1, #0
90011674:	6803      	ldr	r3, [r0, #0]
90011676:	69db      	ldr	r3, [r3, #28]
90011678:	4798      	blx	r3
9001167a:	6766      	str	r6, [r4, #116]	; 0x74
9001167c:	f001 ff52 	bl	90013524 <_ZN8touchgfx11Application11getInstanceEv>
90011680:	6803      	ldr	r3, [r0, #0]
90011682:	6b9b      	ldr	r3, [r3, #56]	; 0x38
90011684:	4798      	blx	r3
90011686:	6823      	ldr	r3, [r4, #0]
90011688:	4620      	mov	r0, r4
9001168a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
9001168e:	4798      	blx	r3
90011690:	2001      	movs	r0, #1
90011692:	f7ef f917 	bl	900008c4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
90011696:	2300      	movs	r3, #0
90011698:	702b      	strb	r3, [r5, #0]
9001169a:	b004      	add	sp, #16
9001169c:	bd70      	pop	{r4, r5, r6, pc}
9001169e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
900116a2:	4620      	mov	r0, r4
900116a4:	4798      	blx	r3
900116a6:	e7af      	b.n	90011608 <_ZN8touchgfx3HAL4tickEv+0xc0>
900116a8:	2863      	cmp	r0, #99	; 0x63
900116aa:	bfcb      	itete	gt
900116ac:	2300      	movgt	r3, #0
900116ae:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
900116b2:	f884 3069 	strbgt.w	r3, [r4, #105]	; 0x69
900116b6:	f884 0069 	strble.w	r0, [r4, #105]	; 0x69
900116ba:	e7d9      	b.n	90011670 <_ZN8touchgfx3HAL4tickEv+0x128>
900116bc:	24021c18 	.word	0x24021c18
900116c0:	24021c19 	.word	0x24021c19
900116c4:	05f5e100 	.word	0x05f5e100

900116c8 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
900116c8:	b510      	push	{r4, lr}
900116ca:	4604      	mov	r4, r0
900116cc:	f7f0 fa48 	bl	90001b60 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>
900116d0:	2200      	movs	r2, #0
900116d2:	6863      	ldr	r3, [r4, #4]
900116d4:	729a      	strb	r2, [r3, #10]
900116d6:	bd10      	pop	{r4, pc}

900116d8 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
900116d8:	65c1      	str	r1, [r0, #92]	; 0x5c
900116da:	301c      	adds	r0, #28
900116dc:	f011 bf3a 	b.w	90023554 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

900116e0 <_ZN8touchgfx3HAL5touchEll>:
900116e0:	b530      	push	{r4, r5, lr}
900116e2:	b087      	sub	sp, #28
900116e4:	4604      	mov	r4, r0
900116e6:	a804      	add	r0, sp, #16
900116e8:	e9cd 1204 	strd	r1, r2, [sp, #16]
900116ec:	f001 fd00 	bl	900130f0 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
900116f0:	9b04      	ldr	r3, [sp, #16]
900116f2:	a906      	add	r1, sp, #24
900116f4:	a803      	add	r0, sp, #12
900116f6:	f8ad 300c 	strh.w	r3, [sp, #12]
900116fa:	9b05      	ldr	r3, [sp, #20]
900116fc:	f821 3d0a 	strh.w	r3, [r1, #-10]!
90011700:	f001 fd48 	bl	90013194 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
90011704:	f894 106f 	ldrb.w	r1, [r4, #111]	; 0x6f
90011708:	f104 001c 	add.w	r0, r4, #28
9001170c:	f8bd 200c 	ldrh.w	r2, [sp, #12]
90011710:	f8bd 300e 	ldrh.w	r3, [sp, #14]
90011714:	b189      	cbz	r1, 9001173a <_ZN8touchgfx3HAL5touchEll+0x5a>
90011716:	f8b4 5064 	ldrh.w	r5, [r4, #100]	; 0x64
9001171a:	9300      	str	r3, [sp, #0]
9001171c:	4613      	mov	r3, r2
9001171e:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
90011722:	462a      	mov	r2, r5
90011724:	f011 ff26 	bl	90023574 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
90011728:	b128      	cbz	r0, 90011736 <_ZN8touchgfx3HAL5touchEll+0x56>
9001172a:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
9001172e:	6623      	str	r3, [r4, #96]	; 0x60
90011730:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
90011734:	6663      	str	r3, [r4, #100]	; 0x64
90011736:	b007      	add	sp, #28
90011738:	bd30      	pop	{r4, r5, pc}
9001173a:	f011 ff5b 	bl	900235f4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
9001173e:	2301      	movs	r3, #1
90011740:	f884 306f 	strb.w	r3, [r4, #111]	; 0x6f
90011744:	e7f1      	b.n	9001172a <_ZN8touchgfx3HAL5touchEll+0x4a>

90011746 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
90011746:	b510      	push	{r4, lr}
90011748:	2b00      	cmp	r3, #0
9001174a:	d046      	beq.n	900117da <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
9001174c:	ea81 0002 	eor.w	r0, r1, r2
90011750:	07c4      	lsls	r4, r0, #31
90011752:	d508      	bpl.n	90011766 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
90011754:	440b      	add	r3, r1
90011756:	3a01      	subs	r2, #1
90011758:	428b      	cmp	r3, r1
9001175a:	d93e      	bls.n	900117da <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
9001175c:	f812 0f01 	ldrb.w	r0, [r2, #1]!
90011760:	f801 0b01 	strb.w	r0, [r1], #1
90011764:	e7f8      	b.n	90011758 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
90011766:	07d0      	lsls	r0, r2, #31
90011768:	bf42      	ittt	mi
9001176a:	f812 0b01 	ldrbmi.w	r0, [r2], #1
9001176e:	f103 33ff 	addmi.w	r3, r3, #4294967295
90011772:	f801 0b01 	strbmi.w	r0, [r1], #1
90011776:	2b01      	cmp	r3, #1
90011778:	d911      	bls.n	9001179e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
9001177a:	ea81 0402 	eor.w	r4, r1, r2
9001177e:	4610      	mov	r0, r2
90011780:	07a4      	lsls	r4, r4, #30
90011782:	d022      	beq.n	900117ca <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
90011784:	f023 0401 	bic.w	r4, r3, #1
90011788:	440c      	add	r4, r1
9001178a:	428c      	cmp	r4, r1
9001178c:	4602      	mov	r2, r0
9001178e:	d904      	bls.n	9001179a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
90011790:	8812      	ldrh	r2, [r2, #0]
90011792:	3002      	adds	r0, #2
90011794:	f821 2b02 	strh.w	r2, [r1], #2
90011798:	e7f7      	b.n	9001178a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
9001179a:	f003 0301 	and.w	r3, r3, #1
9001179e:	f023 0003 	bic.w	r0, r3, #3
900117a2:	4408      	add	r0, r1
900117a4:	4288      	cmp	r0, r1
900117a6:	4614      	mov	r4, r2
900117a8:	d904      	bls.n	900117b4 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
900117aa:	6824      	ldr	r4, [r4, #0]
900117ac:	3204      	adds	r2, #4
900117ae:	f841 4b04 	str.w	r4, [r1], #4
900117b2:	e7f7      	b.n	900117a4 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
900117b4:	f003 0303 	and.w	r3, r3, #3
900117b8:	3a01      	subs	r2, #1
900117ba:	440b      	add	r3, r1
900117bc:	428b      	cmp	r3, r1
900117be:	d90c      	bls.n	900117da <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
900117c0:	f812 0f01 	ldrb.w	r0, [r2, #1]!
900117c4:	f801 0b01 	strb.w	r0, [r1], #1
900117c8:	e7f8      	b.n	900117bc <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
900117ca:	0790      	lsls	r0, r2, #30
900117cc:	d0e7      	beq.n	9001179e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
900117ce:	f832 0b02 	ldrh.w	r0, [r2], #2
900117d2:	3b02      	subs	r3, #2
900117d4:	f821 0b02 	strh.w	r0, [r1], #2
900117d8:	e7e1      	b.n	9001179e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
900117da:	2001      	movs	r0, #1
900117dc:	bd10      	pop	{r4, pc}

900117de <_ZN8touchgfx3HAL7noTouchEv>:
900117de:	b510      	push	{r4, lr}
900117e0:	f890 306f 	ldrb.w	r3, [r0, #111]	; 0x6f
900117e4:	4604      	mov	r4, r0
900117e6:	b153      	cbz	r3, 900117fe <_ZN8touchgfx3HAL7noTouchEv+0x20>
900117e8:	f8b0 3064 	ldrh.w	r3, [r0, #100]	; 0x64
900117ec:	2101      	movs	r1, #1
900117ee:	f8b0 2060 	ldrh.w	r2, [r0, #96]	; 0x60
900117f2:	301c      	adds	r0, #28
900117f4:	f011 fefe 	bl	900235f4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
900117f8:	2300      	movs	r3, #0
900117fa:	f884 306f 	strb.w	r3, [r4, #111]	; 0x6f
900117fe:	bd10      	pop	{r4, pc}

90011800 <_ZN8touchgfx8Drawable5setXYEss>:
90011800:	b570      	push	{r4, r5, r6, lr}
90011802:	6803      	ldr	r3, [r0, #0]
90011804:	4604      	mov	r4, r0
90011806:	4615      	mov	r5, r2
90011808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
9001180a:	4798      	blx	r3
9001180c:	6823      	ldr	r3, [r4, #0]
9001180e:	4629      	mov	r1, r5
90011810:	4620      	mov	r0, r4
90011812:	6b5b      	ldr	r3, [r3, #52]	; 0x34
90011814:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90011818:	4718      	bx	r3
	...

9001181c <_ZN8touchgfx3HAL3lcdEv>:
9001181c:	4b04      	ldr	r3, [pc, #16]	; (90011830 <_ZN8touchgfx3HAL3lcdEv+0x14>)
9001181e:	681b      	ldr	r3, [r3, #0]
90011820:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
90011824:	b10a      	cbz	r2, 9001182a <_ZN8touchgfx3HAL3lcdEv+0xe>
90011826:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
90011828:	b900      	cbnz	r0, 9001182c <_ZN8touchgfx3HAL3lcdEv+0x10>
9001182a:	6898      	ldr	r0, [r3, #8]
9001182c:	4770      	bx	lr
9001182e:	bf00      	nop
90011830:	24021c14 	.word	0x24021c14

90011834 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
90011834:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
90011838:	b085      	sub	sp, #20
9001183a:	4604      	mov	r4, r0
9001183c:	2000      	movs	r0, #0
9001183e:	4699      	mov	r9, r3
90011840:	ad04      	add	r5, sp, #16
90011842:	460f      	mov	r7, r1
90011844:	4690      	mov	r8, r2
90011846:	f845 0d04 	str.w	r0, [r5, #-4]!
9001184a:	69a0      	ldr	r0, [r4, #24]
9001184c:	6806      	ldr	r6, [r0, #0]
9001184e:	9501      	str	r5, [sp, #4]
90011850:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
90011854:	9500      	str	r5, [sp, #0]
90011856:	6835      	ldr	r5, [r6, #0]
90011858:	47a8      	blx	r5
9001185a:	4d10      	ldr	r5, [pc, #64]	; (9001189c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x68>)
9001185c:	4606      	mov	r6, r0
9001185e:	f8a5 9000 	strh.w	r9, [r5]
90011862:	f7ff ffdb 	bl	9001181c <_ZN8touchgfx3HAL3lcdEv>
90011866:	6803      	ldr	r3, [r0, #0]
90011868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9001186a:	4798      	blx	r3
9001186c:	b128      	cbz	r0, 9001187a <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x46>
9001186e:	2801      	cmp	r0, #1
90011870:	d00b      	beq.n	9001188a <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x56>
90011872:	4630      	mov	r0, r6
90011874:	b005      	add	sp, #20
90011876:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
9001187a:	882b      	ldrh	r3, [r5, #0]
9001187c:	fb08 7203 	mla	r2, r8, r3, r7
90011880:	9b03      	ldr	r3, [sp, #12]
90011882:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
90011886:	63e3      	str	r3, [r4, #60]	; 0x3c
90011888:	e7f3      	b.n	90011872 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
9001188a:	882a      	ldrh	r2, [r5, #0]
9001188c:	9b03      	ldr	r3, [sp, #12]
9001188e:	fb08 7202 	mla	r2, r8, r2, r7
90011892:	eb02 0242 	add.w	r2, r2, r2, lsl #1
90011896:	1a9a      	subs	r2, r3, r2
90011898:	63e2      	str	r2, [r4, #60]	; 0x3c
9001189a:	e7ea      	b.n	90011872 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
9001189c:	24021c0e 	.word	0x24021c0e

900118a0 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
900118a0:	b5f0      	push	{r4, r5, r6, r7, lr}
900118a2:	b08b      	sub	sp, #44	; 0x2c
900118a4:	4617      	mov	r7, r2
900118a6:	4604      	mov	r4, r0
900118a8:	460e      	mov	r6, r1
900118aa:	461d      	mov	r5, r3
900118ac:	f7ff ffb6 	bl	9001181c <_ZN8touchgfx3HAL3lcdEv>
900118b0:	6803      	ldr	r3, [r0, #0]
900118b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900118b4:	4798      	blx	r3
900118b6:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
900118ba:	9007      	str	r0, [sp, #28]
900118bc:	4631      	mov	r1, r6
900118be:	6822      	ldr	r2, [r4, #0]
900118c0:	e9cd 0308 	strd	r0, r3, [sp, #32]
900118c4:	4b0c      	ldr	r3, [pc, #48]	; (900118f8 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
900118c6:	4620      	mov	r0, r4
900118c8:	881b      	ldrh	r3, [r3, #0]
900118ca:	9306      	str	r3, [sp, #24]
900118cc:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
900118d0:	9305      	str	r3, [sp, #20]
900118d2:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
900118d6:	9304      	str	r3, [sp, #16]
900118d8:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
900118dc:	9303      	str	r3, [sp, #12]
900118de:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
900118e2:	9302      	str	r3, [sp, #8]
900118e4:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
900118e8:	e9cd 5300 	strd	r5, r3, [sp]
900118ec:	463b      	mov	r3, r7
900118ee:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
900118f0:	2200      	movs	r2, #0
900118f2:	47a8      	blx	r5
900118f4:	b00b      	add	sp, #44	; 0x2c
900118f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
900118f8:	24021c0e 	.word	0x24021c0e

900118fc <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
900118fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
90011900:	4698      	mov	r8, r3
90011902:	6803      	ldr	r3, [r0, #0]
90011904:	b08b      	sub	sp, #44	; 0x2c
90011906:	4617      	mov	r7, r2
90011908:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
9001190a:	460e      	mov	r6, r1
9001190c:	4b13      	ldr	r3, [pc, #76]	; (9001195c <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
9001190e:	4604      	mov	r4, r0
90011910:	f8b3 9000 	ldrh.w	r9, [r3]
90011914:	f7ff ff82 	bl	9001181c <_ZN8touchgfx3HAL3lcdEv>
90011918:	6803      	ldr	r3, [r0, #0]
9001191a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9001191c:	4798      	blx	r3
9001191e:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
90011922:	2200      	movs	r2, #0
90011924:	4631      	mov	r1, r6
90011926:	e9cd 0308 	strd	r0, r3, [sp, #32]
9001192a:	2302      	movs	r3, #2
9001192c:	4620      	mov	r0, r4
9001192e:	e9cd 9306 	strd	r9, r3, [sp, #24]
90011932:	2301      	movs	r3, #1
90011934:	9305      	str	r3, [sp, #20]
90011936:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
9001193a:	9304      	str	r3, [sp, #16]
9001193c:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
90011940:	9303      	str	r3, [sp, #12]
90011942:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
90011946:	9302      	str	r3, [sp, #8]
90011948:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
9001194c:	e9cd 8300 	strd	r8, r3, [sp]
90011950:	463b      	mov	r3, r7
90011952:	47a8      	blx	r5
90011954:	b00b      	add	sp, #44	; 0x2c
90011956:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
9001195a:	bf00      	nop
9001195c:	24021c0e 	.word	0x24021c0e

90011960 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
90011960:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
90011964:	4698      	mov	r8, r3
90011966:	6803      	ldr	r3, [r0, #0]
90011968:	b087      	sub	sp, #28
9001196a:	460e      	mov	r6, r1
9001196c:	6d9d      	ldr	r5, [r3, #88]	; 0x58
9001196e:	4617      	mov	r7, r2
90011970:	4b0f      	ldr	r3, [pc, #60]	; (900119b0 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
90011972:	4604      	mov	r4, r0
90011974:	f8b3 9000 	ldrh.w	r9, [r3]
90011978:	f7ff ff50 	bl	9001181c <_ZN8touchgfx3HAL3lcdEv>
9001197c:	6803      	ldr	r3, [r0, #0]
9001197e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90011980:	4798      	blx	r3
90011982:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
90011986:	463a      	mov	r2, r7
90011988:	4631      	mov	r1, r6
9001198a:	f8cd 900c 	str.w	r9, [sp, #12]
9001198e:	e9cd 0304 	strd	r0, r3, [sp, #16]
90011992:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
90011996:	4620      	mov	r0, r4
90011998:	9302      	str	r3, [sp, #8]
9001199a:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
9001199e:	9301      	str	r3, [sp, #4]
900119a0:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
900119a4:	9300      	str	r3, [sp, #0]
900119a6:	4643      	mov	r3, r8
900119a8:	47a8      	blx	r5
900119aa:	b007      	add	sp, #28
900119ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
900119b0:	24021c0e 	.word	0x24021c0e

900119b4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
900119b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900119b8:	4604      	mov	r4, r0
900119ba:	b08f      	sub	sp, #60	; 0x3c
900119bc:	4610      	mov	r0, r2
900119be:	460d      	mov	r5, r1
900119c0:	4691      	mov	r9, r2
900119c2:	461e      	mov	r6, r3
900119c4:	f004 f99c 	bl	90015d00 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
900119c8:	2800      	cmp	r0, #0
900119ca:	f000 809d 	beq.w	90011b08 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>
900119ce:	6823      	ldr	r3, [r4, #0]
900119d0:	4620      	mov	r0, r4
900119d2:	f8df b198 	ldr.w	fp, [pc, #408]	; 90011b6c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
900119d6:	f10d 0838 	add.w	r8, sp, #56	; 0x38
900119da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
900119dc:	4798      	blx	r3
900119de:	6823      	ldr	r3, [r4, #0]
900119e0:	4620      	mov	r0, r4
900119e2:	f8df a18c 	ldr.w	sl, [pc, #396]	; 90011b70 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>
900119e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900119e8:	4798      	blx	r3
900119ea:	f8bb 3000 	ldrh.w	r3, [fp]
900119ee:	4f5c      	ldr	r7, [pc, #368]	; (90011b60 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
900119f0:	9301      	str	r3, [sp, #4]
900119f2:	f8ba 3000 	ldrh.w	r3, [sl]
900119f6:	f828 9d1c 	strh.w	r9, [r8, #-28]!
900119fa:	4640      	mov	r0, r8
900119fc:	9302      	str	r3, [sp, #8]
900119fe:	883b      	ldrh	r3, [r7, #0]
90011a00:	9303      	str	r3, [sp, #12]
90011a02:	4b58      	ldr	r3, [pc, #352]	; (90011b64 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
90011a04:	881a      	ldrh	r2, [r3, #0]
90011a06:	9305      	str	r3, [sp, #20]
90011a08:	9204      	str	r2, [sp, #16]
90011a0a:	f004 fa0d 	bl	90015e28 <_ZNK8touchgfx6Bitmap8getWidthEv>
90011a0e:	8038      	strh	r0, [r7, #0]
90011a10:	4640      	mov	r0, r8
90011a12:	f004 fa3d 	bl	90015e90 <_ZNK8touchgfx6Bitmap9getHeightEv>
90011a16:	9b05      	ldr	r3, [sp, #20]
90011a18:	b280      	uxth	r0, r0
90011a1a:	8018      	strh	r0, [r3, #0]
90011a1c:	4b52      	ldr	r3, [pc, #328]	; (90011b68 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
90011a1e:	781b      	ldrb	r3, [r3, #0]
90011a20:	2b00      	cmp	r3, #0
90011a22:	d174      	bne.n	90011b0e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
90011a24:	883b      	ldrh	r3, [r7, #0]
90011a26:	f8aa 0000 	strh.w	r0, [sl]
90011a2a:	f8ab 3000 	strh.w	r3, [fp]
90011a2e:	4648      	mov	r0, r9
90011a30:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	; 0x3c
90011a34:	f004 f964 	bl	90015d00 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
90011a38:	2200      	movs	r2, #0
90011a3a:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
90011a3e:	4611      	mov	r1, r2
90011a40:	4628      	mov	r0, r5
90011a42:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
90011a46:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
90011a4a:	f7ff fed9 	bl	90011800 <_ZN8touchgfx8Drawable5setXYEss>
90011a4e:	2301      	movs	r3, #1
90011a50:	f895 b025 	ldrb.w	fp, [r5, #37]	; 0x25
90011a54:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
90011a58:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
90011a5c:	2b00      	cmp	r3, #0
90011a5e:	dd5c      	ble.n	90011b1a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
90011a60:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
90011a64:	2b00      	cmp	r3, #0
90011a66:	dd58      	ble.n	90011b1a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
90011a68:	462a      	mov	r2, r5
90011a6a:	ab0a      	add	r3, sp, #40	; 0x28
90011a6c:	f852 0f04 	ldr.w	r0, [r2, #4]!
90011a70:	6851      	ldr	r1, [r2, #4]
90011a72:	c303      	stmia	r3!, {r0, r1}
90011a74:	4631      	mov	r1, r6
90011a76:	a80a      	add	r0, sp, #40	; 0x28
90011a78:	f7ff fbec 	bl	90011254 <_ZN8touchgfx4RectaNERKS0_>
90011a7c:	4b38      	ldr	r3, [pc, #224]	; (90011b60 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
90011a7e:	2100      	movs	r1, #0
90011a80:	f9b3 2000 	ldrsh.w	r2, [r3]
90011a84:	4b37      	ldr	r3, [pc, #220]	; (90011b64 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
90011a86:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
90011a8a:	aa0a      	add	r2, sp, #40	; 0x28
90011a8c:	f9b3 3000 	ldrsh.w	r3, [r3]
90011a90:	910c      	str	r1, [sp, #48]	; 0x30
90011a92:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
90011a96:	ab08      	add	r3, sp, #32
90011a98:	e892 0003 	ldmia.w	r2, {r0, r1}
90011a9c:	e883 0003 	stmia.w	r3, {r0, r1}
90011aa0:	4618      	mov	r0, r3
90011aa2:	a90c      	add	r1, sp, #48	; 0x30
90011aa4:	f7ff fbd6 	bl	90011254 <_ZN8touchgfx4RectaNERKS0_>
90011aa8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
90011aaa:	2b00      	cmp	r3, #0
90011aac:	d13c      	bne.n	90011b28 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x174>
90011aae:	2000      	movs	r0, #0
90011ab0:	f884 0058 	strb.w	r0, [r4, #88]	; 0x58
90011ab4:	2600      	movs	r6, #0
90011ab6:	696b      	ldr	r3, [r5, #20]
90011ab8:	a908      	add	r1, sp, #32
90011aba:	682a      	ldr	r2, [r5, #0]
90011abc:	4628      	mov	r0, r5
90011abe:	9305      	str	r3, [sp, #20]
90011ac0:	616e      	str	r6, [r5, #20]
90011ac2:	6892      	ldr	r2, [r2, #8]
90011ac4:	4790      	blx	r2
90011ac6:	9b05      	ldr	r3, [sp, #20]
90011ac8:	4652      	mov	r2, sl
90011aca:	4649      	mov	r1, r9
90011acc:	616b      	str	r3, [r5, #20]
90011ace:	4628      	mov	r0, r5
90011ad0:	f884 6058 	strb.w	r6, [r4, #88]	; 0x58
90011ad4:	f885 b025 	strb.w	fp, [r5, #37]	; 0x25
90011ad8:	f7ff fe92 	bl	90011800 <_ZN8touchgfx8Drawable5setXYEss>
90011adc:	9a01      	ldr	r2, [sp, #4]
90011ade:	4b23      	ldr	r3, [pc, #140]	; (90011b6c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
90011ae0:	4620      	mov	r0, r4
90011ae2:	801a      	strh	r2, [r3, #0]
90011ae4:	9a02      	ldr	r2, [sp, #8]
90011ae6:	4b22      	ldr	r3, [pc, #136]	; (90011b70 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>)
90011ae8:	801a      	strh	r2, [r3, #0]
90011aea:	9a03      	ldr	r2, [sp, #12]
90011aec:	4b1c      	ldr	r3, [pc, #112]	; (90011b60 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
90011aee:	801a      	strh	r2, [r3, #0]
90011af0:	4b1c      	ldr	r3, [pc, #112]	; (90011b64 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
90011af2:	9a04      	ldr	r2, [sp, #16]
90011af4:	801a      	strh	r2, [r3, #0]
90011af6:	6823      	ldr	r3, [r4, #0]
90011af8:	e9c4 870f 	strd	r8, r7, [r4, #60]	; 0x3c
90011afc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90011afe:	4798      	blx	r3
90011b00:	6823      	ldr	r3, [r4, #0]
90011b02:	4620      	mov	r0, r4
90011b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90011b06:	4798      	blx	r3
90011b08:	b00f      	add	sp, #60	; 0x3c
90011b0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90011b0e:	883b      	ldrh	r3, [r7, #0]
90011b10:	f8ab 0000 	strh.w	r0, [fp]
90011b14:	f8aa 3000 	strh.w	r3, [sl]
90011b18:	e789      	b.n	90011a2e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
90011b1a:	462a      	mov	r2, r5
90011b1c:	ab0a      	add	r3, sp, #40	; 0x28
90011b1e:	f852 0f04 	ldr.w	r0, [r2, #4]!
90011b22:	6851      	ldr	r1, [r2, #4]
90011b24:	c303      	stmia	r3!, {r0, r1}
90011b26:	e7a9      	b.n	90011a7c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc8>
90011b28:	a807      	add	r0, sp, #28
90011b2a:	f004 faed 	bl	90016108 <_ZNK8touchgfx6Bitmap9getFormatEv>
90011b2e:	4606      	mov	r6, r0
90011b30:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
90011b32:	6803      	ldr	r3, [r0, #0]
90011b34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90011b36:	4798      	blx	r3
90011b38:	4286      	cmp	r6, r0
90011b3a:	d1b8      	bne.n	90011aae <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
90011b3c:	f7ff fe6e 	bl	9001181c <_ZN8touchgfx3HAL3lcdEv>
90011b40:	6803      	ldr	r3, [r0, #0]
90011b42:	4606      	mov	r6, r0
90011b44:	a807      	add	r0, sp, #28
90011b46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
90011b48:	9305      	str	r3, [sp, #20]
90011b4a:	f004 fadd 	bl	90016108 <_ZNK8touchgfx6Bitmap9getFormatEv>
90011b4e:	9b05      	ldr	r3, [sp, #20]
90011b50:	4601      	mov	r1, r0
90011b52:	4630      	mov	r0, r6
90011b54:	4798      	blx	r3
90011b56:	f080 0001 	eor.w	r0, r0, #1
90011b5a:	b2c0      	uxtb	r0, r0
90011b5c:	e7a8      	b.n	90011ab0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfc>
90011b5e:	bf00      	nop
90011b60:	24021c08 	.word	0x24021c08
90011b64:	24021c0a 	.word	0x24021c0a
90011b68:	24021c0c 	.word	0x24021c0c
90011b6c:	24021c0e 	.word	0x24021c0e
90011b70:	24021c10 	.word	0x24021c10

90011b74 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
90011b74:	4b07      	ldr	r3, [pc, #28]	; (90011b94 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
90011b76:	b510      	push	{r4, lr}
90011b78:	781b      	ldrb	r3, [r3, #0]
90011b7a:	4604      	mov	r4, r0
90011b7c:	b13b      	cbz	r3, 90011b8e <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
90011b7e:	6803      	ldr	r3, [r0, #0]
90011b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90011b82:	4798      	blx	r3
90011b84:	6be3      	ldr	r3, [r4, #60]	; 0x3c
90011b86:	4283      	cmp	r3, r0
90011b88:	d101      	bne.n	90011b8e <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
90011b8a:	6c20      	ldr	r0, [r4, #64]	; 0x40
90011b8c:	bd10      	pop	{r4, pc}
90011b8e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
90011b90:	e7fc      	b.n	90011b8c <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
90011b92:	bf00      	nop
90011b94:	24021c12 	.word	0x24021c12

90011b98 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
90011b98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90011b9c:	461d      	mov	r5, r3
90011b9e:	b08a      	sub	sp, #40	; 0x28
90011ba0:	f44f 6380 	mov.w	r3, #1024	; 0x400
90011ba4:	4690      	mov	r8, r2
90011ba6:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
90011baa:	2400      	movs	r4, #0
90011bac:	4607      	mov	r7, r0
90011bae:	fb06 8505 	mla	r5, r6, r5, r8
90011bb2:	9404      	str	r4, [sp, #16]
90011bb4:	f88d 4020 	strb.w	r4, [sp, #32]
90011bb8:	e9cd 3101 	strd	r3, r1, [sp, #4]
90011bbc:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
90011bc0:	f8ad 3018 	strh.w	r3, [sp, #24]
90011bc4:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
90011bc8:	f8ad 301a 	strh.w	r3, [sp, #26]
90011bcc:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
90011bd0:	f8ad 301c 	strh.w	r3, [sp, #28]
90011bd4:	f7ff ffce 	bl	90011b74 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
90011bd8:	eb00 0545 	add.w	r5, r0, r5, lsl #1
90011bdc:	6878      	ldr	r0, [r7, #4]
90011bde:	f8ad 601e 	strh.w	r6, [sp, #30]
90011be2:	a901      	add	r1, sp, #4
90011be4:	9505      	str	r5, [sp, #20]
90011be6:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
90011bea:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
90011bee:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
90011bf2:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
90011bf6:	6803      	ldr	r3, [r0, #0]
90011bf8:	685b      	ldr	r3, [r3, #4]
90011bfa:	4798      	blx	r3
90011bfc:	b00a      	add	sp, #40	; 0x28
90011bfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

90011c02 <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
90011c02:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
90011c06:	b08b      	sub	sp, #44	; 0x2c
90011c08:	2400      	movs	r4, #0
90011c0a:	4691      	mov	r9, r2
90011c0c:	461d      	mov	r5, r3
90011c0e:	f8bd 6050 	ldrh.w	r6, [sp, #80]	; 0x50
90011c12:	f44f 6300 	mov.w	r3, #2048	; 0x800
90011c16:	4688      	mov	r8, r1
90011c18:	4607      	mov	r7, r0
90011c1a:	9404      	str	r4, [sp, #16]
90011c1c:	fb06 9505 	mla	r5, r6, r5, r9
90011c20:	e9cd 3401 	strd	r3, r4, [sp, #4]
90011c24:	f7ff ffa6 	bl	90011b74 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
90011c28:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
90011c2c:	eb00 0545 	add.w	r5, r0, r5, lsl #1
90011c30:	6878      	ldr	r0, [r7, #4]
90011c32:	f8ad 3018 	strh.w	r3, [sp, #24]
90011c36:	a901      	add	r1, sp, #4
90011c38:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
90011c3c:	9505      	str	r5, [sp, #20]
90011c3e:	f8ad 301a 	strh.w	r3, [sp, #26]
90011c42:	f8ad 401c 	strh.w	r4, [sp, #28]
90011c46:	f8ad 601e 	strh.w	r6, [sp, #30]
90011c4a:	f8cd 8010 	str.w	r8, [sp, #16]
90011c4e:	f8ad 4020 	strh.w	r4, [sp, #32]
90011c52:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
90011c56:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
90011c5a:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
90011c5e:	6803      	ldr	r3, [r0, #0]
90011c60:	685b      	ldr	r3, [r3, #4]
90011c62:	4798      	blx	r3
90011c64:	b00b      	add	sp, #44	; 0x2c
90011c66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

90011c6c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
90011c6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90011c70:	b08a      	sub	sp, #40	; 0x28
90011c72:	4698      	mov	r8, r3
90011c74:	2300      	movs	r3, #0
90011c76:	4606      	mov	r6, r0
90011c78:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
90011c7c:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
90011c80:	2d0b      	cmp	r5, #11
90011c82:	f89d c054 	ldrb.w	ip, [sp, #84]	; 0x54
90011c86:	f8bd 7058 	ldrh.w	r7, [sp, #88]	; 0x58
90011c8a:	f89d 4060 	ldrb.w	r4, [sp, #96]	; 0x60
90011c8e:	9304      	str	r3, [sp, #16]
90011c90:	d137      	bne.n	90011d02 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x96>
90011c92:	2380      	movs	r3, #128	; 0x80
90011c94:	f88d 0020 	strb.w	r0, [sp, #32]
90011c98:	4630      	mov	r0, r6
90011c9a:	9203      	str	r2, [sp, #12]
90011c9c:	e9cd 3101 	strd	r3, r1, [sp, #4]
90011ca0:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
90011ca4:	f8ad 3018 	strh.w	r3, [sp, #24]
90011ca8:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
90011cac:	f8ad 301a 	strh.w	r3, [sp, #26]
90011cb0:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
90011cb4:	f8ad 301c 	strh.w	r3, [sp, #28]
90011cb8:	f7ff ff5c 	bl	90011b74 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
90011cbc:	2c0b      	cmp	r4, #11
90011cbe:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
90011cc2:	f8ad 701e 	strh.w	r7, [sp, #30]
90011cc6:	bf94      	ite	ls
90011cc8:	4b19      	ldrls	r3, [pc, #100]	; (90011d30 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc4>)
90011cca:	2100      	movhi	r1, #0
90011ccc:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
90011cd0:	bf98      	it	ls
90011cd2:	5d19      	ldrbls	r1, [r3, r4]
90011cd4:	fb02 8307 	mla	r3, r2, r7, r8
90011cd8:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
90011cdc:	10c9      	asrs	r1, r1, #3
90011cde:	fb01 0003 	mla	r0, r1, r3, r0
90011ce2:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
90011ce6:	a901      	add	r1, sp, #4
90011ce8:	9005      	str	r0, [sp, #20]
90011cea:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
90011cee:	2300      	movs	r3, #0
90011cf0:	6870      	ldr	r0, [r6, #4]
90011cf2:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
90011cf6:	6803      	ldr	r3, [r0, #0]
90011cf8:	685b      	ldr	r3, [r3, #4]
90011cfa:	4798      	blx	r3
90011cfc:	b00a      	add	sp, #40	; 0x28
90011cfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
90011d02:	2d02      	cmp	r5, #2
90011d04:	d109      	bne.n	90011d1a <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xae>
90011d06:	28ff      	cmp	r0, #255	; 0xff
90011d08:	d105      	bne.n	90011d16 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xaa>
90011d0a:	f1bc 0f00 	cmp.w	ip, #0
90011d0e:	bf14      	ite	ne
90011d10:	2340      	movne	r3, #64	; 0x40
90011d12:	2320      	moveq	r3, #32
90011d14:	e7be      	b.n	90011c94 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
90011d16:	2340      	movs	r3, #64	; 0x40
90011d18:	e7bc      	b.n	90011c94 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
90011d1a:	28ff      	cmp	r0, #255	; 0xff
90011d1c:	d105      	bne.n	90011d2a <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xbe>
90011d1e:	f1bc 0f00 	cmp.w	ip, #0
90011d22:	bf14      	ite	ne
90011d24:	2304      	movne	r3, #4
90011d26:	2301      	moveq	r3, #1
90011d28:	e7b4      	b.n	90011c94 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
90011d2a:	2304      	movs	r3, #4
90011d2c:	e7b2      	b.n	90011c94 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
90011d2e:	bf00      	nop
90011d30:	90028ccc 	.word	0x90028ccc

90011d34 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
90011d34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90011d38:	b08b      	sub	sp, #44	; 0x2c
90011d3a:	461d      	mov	r5, r3
90011d3c:	2400      	movs	r4, #0
90011d3e:	4688      	mov	r8, r1
90011d40:	f89d 9058 	ldrb.w	r9, [sp, #88]	; 0x58
90011d44:	4693      	mov	fp, r2
90011d46:	f89d 6060 	ldrb.w	r6, [sp, #96]	; 0x60
90011d4a:	4607      	mov	r7, r0
90011d4c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
90011d50:	f8bd a05c 	ldrh.w	sl, [sp, #92]	; 0x5c
90011d54:	9404      	str	r4, [sp, #16]
90011d56:	bf14      	ite	ne
90011d58:	2308      	movne	r3, #8
90011d5a:	2302      	moveq	r3, #2
90011d5c:	fb05 b50a 	mla	r5, r5, sl, fp
90011d60:	e9cd 3401 	strd	r3, r4, [sp, #4]
90011d64:	f7ff ff06 	bl	90011b74 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
90011d68:	2e0b      	cmp	r6, #11
90011d6a:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
90011d6e:	a901      	add	r1, sp, #4
90011d70:	bf98      	it	ls
90011d72:	4b13      	ldrls	r3, [pc, #76]	; (90011dc0 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>)
90011d74:	f8ad a01e 	strh.w	sl, [sp, #30]
90011d78:	bf98      	it	ls
90011d7a:	5d9c      	ldrbls	r4, [r3, r6]
90011d7c:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
90011d80:	10e4      	asrs	r4, r4, #3
90011d82:	f8cd 8010 	str.w	r8, [sp, #16]
90011d86:	f8ad 3018 	strh.w	r3, [sp, #24]
90011d8a:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
90011d8e:	fb04 0405 	mla	r4, r4, r5, r0
90011d92:	6878      	ldr	r0, [r7, #4]
90011d94:	f8ad 301a 	strh.w	r3, [sp, #26]
90011d98:	2300      	movs	r3, #0
90011d9a:	9405      	str	r4, [sp, #20]
90011d9c:	f8ad 301c 	strh.w	r3, [sp, #28]
90011da0:	f88d 9020 	strb.w	r9, [sp, #32]
90011da4:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
90011da8:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
90011dac:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
90011db0:	f88d 6022 	strb.w	r6, [sp, #34]	; 0x22
90011db4:	6803      	ldr	r3, [r0, #0]
90011db6:	685b      	ldr	r3, [r3, #4]
90011db8:	4798      	blx	r3
90011dba:	b00b      	add	sp, #44	; 0x2c
90011dbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90011dc0:	90028ccc 	.word	0x90028ccc

90011dc4 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
90011dc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90011dc8:	461e      	mov	r6, r3
90011dca:	4b0a      	ldr	r3, [pc, #40]	; (90011df4 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x30>)
90011dcc:	460f      	mov	r7, r1
90011dce:	4690      	mov	r8, r2
90011dd0:	881d      	ldrh	r5, [r3, #0]
90011dd2:	f7ff fd23 	bl	9001181c <_ZN8touchgfx3HAL3lcdEv>
90011dd6:	6803      	ldr	r3, [r0, #0]
90011dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90011dda:	4798      	blx	r3
90011ddc:	280b      	cmp	r0, #11
90011dde:	bf96      	itet	ls
90011de0:	4b05      	ldrls	r3, [pc, #20]	; (90011df8 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
90011de2:	2400      	movhi	r4, #0
90011de4:	5c1c      	ldrbls	r4, [r3, r0]
90011de6:	fb08 7005 	mla	r0, r8, r5, r7
90011dea:	10e4      	asrs	r4, r4, #3
90011dec:	fb04 6000 	mla	r0, r4, r0, r6
90011df0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
90011df4:	24021c0e 	.word	0x24021c0e
90011df8:	90028ccc 	.word	0x90028ccc

90011dfc <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
90011dfc:	b5f0      	push	{r4, r5, r6, r7, lr}
90011dfe:	b08b      	sub	sp, #44	; 0x2c
90011e00:	461f      	mov	r7, r3
90011e02:	4604      	mov	r4, r0
90011e04:	4616      	mov	r6, r2
90011e06:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
90011e0a:	2500      	movs	r5, #0
90011e0c:	e9cd 3101 	strd	r3, r1, [sp, #4]
90011e10:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
90011e14:	9504      	str	r5, [sp, #16]
90011e16:	f8ad 3018 	strh.w	r3, [sp, #24]
90011e1a:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
90011e1e:	f8ad 301a 	strh.w	r3, [sp, #26]
90011e22:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
90011e26:	f8ad 301c 	strh.w	r3, [sp, #28]
90011e2a:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
90011e2e:	f88d 3020 	strb.w	r3, [sp, #32]
90011e32:	f7ff fe9f 	bl	90011b74 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
90011e36:	463a      	mov	r2, r7
90011e38:	4631      	mov	r1, r6
90011e3a:	4603      	mov	r3, r0
90011e3c:	4620      	mov	r0, r4
90011e3e:	f7ff ffc1 	bl	90011dc4 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
90011e42:	4b0e      	ldr	r3, [pc, #56]	; (90011e7c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x80>)
90011e44:	9005      	str	r0, [sp, #20]
90011e46:	881b      	ldrh	r3, [r3, #0]
90011e48:	f8ad 301e 	strh.w	r3, [sp, #30]
90011e4c:	f7ff fce6 	bl	9001181c <_ZN8touchgfx3HAL3lcdEv>
90011e50:	6803      	ldr	r3, [r0, #0]
90011e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90011e54:	4798      	blx	r3
90011e56:	9b13      	ldr	r3, [sp, #76]	; 0x4c
90011e58:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
90011e5c:	a901      	add	r1, sp, #4
90011e5e:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
90011e62:	9304      	str	r3, [sp, #16]
90011e64:	6860      	ldr	r0, [r4, #4]
90011e66:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
90011e6a:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
90011e6e:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
90011e72:	6803      	ldr	r3, [r0, #0]
90011e74:	685b      	ldr	r3, [r3, #4]
90011e76:	4798      	blx	r3
90011e78:	b00b      	add	sp, #44	; 0x2c
90011e7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
90011e7c:	24021c0e 	.word	0x24021c0e

90011e80 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
90011e80:	b5f0      	push	{r4, r5, r6, r7, lr}
90011e82:	b08d      	sub	sp, #52	; 0x34
90011e84:	2501      	movs	r5, #1
90011e86:	4604      	mov	r4, r0
90011e88:	466b      	mov	r3, sp
90011e8a:	9503      	str	r5, [sp, #12]
90011e8c:	e883 0006 	stmia.w	r3, {r1, r2}
90011e90:	2300      	movs	r3, #0
90011e92:	f8bd 6000 	ldrh.w	r6, [sp]
90011e96:	f8bd 7002 	ldrh.w	r7, [sp, #2]
90011e9a:	9306      	str	r3, [sp, #24]
90011e9c:	6803      	ldr	r3, [r0, #0]
90011e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90011ea0:	4798      	blx	r3
90011ea2:	463a      	mov	r2, r7
90011ea4:	4631      	mov	r1, r6
90011ea6:	4603      	mov	r3, r0
90011ea8:	4620      	mov	r0, r4
90011eaa:	f7ff ff8b 	bl	90011dc4 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
90011eae:	6c63      	ldr	r3, [r4, #68]	; 0x44
90011eb0:	9004      	str	r0, [sp, #16]
90011eb2:	9307      	str	r3, [sp, #28]
90011eb4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
90011eb8:	f8ad 3020 	strh.w	r3, [sp, #32]
90011ebc:	f8bd 3006 	ldrh.w	r3, [sp, #6]
90011ec0:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
90011ec4:	4b0e      	ldr	r3, [pc, #56]	; (90011f00 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
90011ec6:	881b      	ldrh	r3, [r3, #0]
90011ec8:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
90011ecc:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
90011ed0:	f7ff fca4 	bl	9001181c <_ZN8touchgfx3HAL3lcdEv>
90011ed4:	6803      	ldr	r3, [r0, #0]
90011ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90011ed8:	4798      	blx	r3
90011eda:	23ff      	movs	r3, #255	; 0xff
90011edc:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
90011ee0:	a903      	add	r1, sp, #12
90011ee2:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
90011ee6:	6860      	ldr	r0, [r4, #4]
90011ee8:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
90011eec:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
90011ef0:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
90011ef4:	6803      	ldr	r3, [r0, #0]
90011ef6:	685b      	ldr	r3, [r3, #4]
90011ef8:	4798      	blx	r3
90011efa:	6c60      	ldr	r0, [r4, #68]	; 0x44
90011efc:	b00d      	add	sp, #52	; 0x34
90011efe:	bdf0      	pop	{r4, r5, r6, r7, pc}
90011f00:	24021c0e 	.word	0x24021c0e

90011f04 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
90011f04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90011f08:	b08c      	sub	sp, #48	; 0x30
90011f0a:	461e      	mov	r6, r3
90011f0c:	2300      	movs	r3, #0
90011f0e:	4604      	mov	r4, r0
90011f10:	466d      	mov	r5, sp
90011f12:	9306      	str	r3, [sp, #24]
90011f14:	6803      	ldr	r3, [r0, #0]
90011f16:	e885 0006 	stmia.w	r5, {r1, r2}
90011f1a:	2501      	movs	r5, #1
90011f1c:	f8bd 7000 	ldrh.w	r7, [sp]
90011f20:	f8bd 8002 	ldrh.w	r8, [sp, #2]
90011f24:	9503      	str	r5, [sp, #12]
90011f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90011f28:	4798      	blx	r3
90011f2a:	4642      	mov	r2, r8
90011f2c:	4639      	mov	r1, r7
90011f2e:	4603      	mov	r3, r0
90011f30:	4620      	mov	r0, r4
90011f32:	f7ff ff47 	bl	90011dc4 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
90011f36:	f8bd 3004 	ldrh.w	r3, [sp, #4]
90011f3a:	9004      	str	r0, [sp, #16]
90011f3c:	f8ad 3020 	strh.w	r3, [sp, #32]
90011f40:	f8bd 3006 	ldrh.w	r3, [sp, #6]
90011f44:	9607      	str	r6, [sp, #28]
90011f46:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
90011f4a:	4b10      	ldr	r3, [pc, #64]	; (90011f8c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
90011f4c:	881b      	ldrh	r3, [r3, #0]
90011f4e:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
90011f52:	9b12      	ldr	r3, [sp, #72]	; 0x48
90011f54:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
90011f58:	f7ff fc60 	bl	9001181c <_ZN8touchgfx3HAL3lcdEv>
90011f5c:	6803      	ldr	r3, [r0, #0]
90011f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90011f60:	4798      	blx	r3
90011f62:	23ff      	movs	r3, #255	; 0xff
90011f64:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
90011f68:	a903      	add	r1, sp, #12
90011f6a:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
90011f6e:	6860      	ldr	r0, [r4, #4]
90011f70:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
90011f74:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
90011f78:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
90011f7c:	6803      	ldr	r3, [r0, #0]
90011f7e:	685b      	ldr	r3, [r3, #4]
90011f80:	4798      	blx	r3
90011f82:	4630      	mov	r0, r6
90011f84:	b00c      	add	sp, #48	; 0x30
90011f86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
90011f8a:	bf00      	nop
90011f8c:	24021c0e 	.word	0x24021c0e

90011f90 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
90011f90:	b5f0      	push	{r4, r5, r6, r7, lr}
90011f92:	b085      	sub	sp, #20
90011f94:	4605      	mov	r5, r0
90011f96:	ac02      	add	r4, sp, #8
90011f98:	e884 0006 	stmia.w	r4, {r1, r2}
90011f9c:	f8bd 6008 	ldrh.w	r6, [sp, #8]
90011fa0:	f8bd 700a 	ldrh.w	r7, [sp, #10]
90011fa4:	f7ff fde6 	bl	90011b74 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
90011fa8:	4631      	mov	r1, r6
90011faa:	4603      	mov	r3, r0
90011fac:	463a      	mov	r2, r7
90011fae:	4628      	mov	r0, r5
90011fb0:	f7ff ff08 	bl	90011dc4 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
90011fb4:	4a05      	ldr	r2, [pc, #20]	; (90011fcc <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
90011fb6:	682b      	ldr	r3, [r5, #0]
90011fb8:	8812      	ldrh	r2, [r2, #0]
90011fba:	9200      	str	r2, [sp, #0]
90011fbc:	6ede      	ldr	r6, [r3, #108]	; 0x6c
90011fbe:	4603      	mov	r3, r0
90011fc0:	4628      	mov	r0, r5
90011fc2:	e894 0006 	ldmia.w	r4, {r1, r2}
90011fc6:	47b0      	blx	r6
90011fc8:	b005      	add	sp, #20
90011fca:	bdf0      	pop	{r4, r5, r6, r7, pc}
90011fcc:	24021c0e 	.word	0x24021c0e

90011fd0 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
90011fd0:	b570      	push	{r4, r5, r6, lr}
90011fd2:	f890 306e 	ldrb.w	r3, [r0, #110]	; 0x6e
90011fd6:	4604      	mov	r4, r0
90011fd8:	b19b      	cbz	r3, 90012002 <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
90011fda:	2002      	movs	r0, #2
90011fdc:	f7ee fca6 	bl	9000092c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
90011fe0:	2300      	movs	r3, #0
90011fe2:	4620      	mov	r0, r4
90011fe4:	f884 306e 	strb.w	r3, [r4, #110]	; 0x6e
90011fe8:	f884 306d 	strb.w	r3, [r4, #109]	; 0x6d
90011fec:	6823      	ldr	r3, [r4, #0]
90011fee:	f8d3 50b8 	ldr.w	r5, [r3, #184]	; 0xb8
90011ff2:	f7ff fdbf 	bl	90011b74 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
90011ff6:	4601      	mov	r1, r0
90011ff8:	4620      	mov	r0, r4
90011ffa:	462b      	mov	r3, r5
90011ffc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90012000:	4718      	bx	r3
90012002:	bd70      	pop	{r4, r5, r6, pc}

90012004 <_ZN8touchgfx3HAL12setMCUActiveEb>:
90012004:	b570      	push	{r4, r5, r6, lr}
90012006:	4605      	mov	r5, r0
90012008:	460c      	mov	r4, r1
9001200a:	2003      	movs	r0, #3
9001200c:	b149      	cbz	r1, 90012022 <_ZN8touchgfx3HAL12setMCUActiveEb+0x1e>
9001200e:	f7ee fc25 	bl	9000085c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
90012012:	6928      	ldr	r0, [r5, #16]
90012014:	b168      	cbz	r0, 90012032 <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
90012016:	6803      	ldr	r3, [r0, #0]
90012018:	2101      	movs	r1, #1
9001201a:	695b      	ldr	r3, [r3, #20]
9001201c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90012020:	4718      	bx	r3
90012022:	f7ee fc4f 	bl	900008c4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
90012026:	6928      	ldr	r0, [r5, #16]
90012028:	b118      	cbz	r0, 90012032 <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
9001202a:	6803      	ldr	r3, [r0, #0]
9001202c:	4621      	mov	r1, r4
9001202e:	695b      	ldr	r3, [r3, #20]
90012030:	e7f4      	b.n	9001201c <_ZN8touchgfx3HAL12setMCUActiveEb+0x18>
90012032:	bd70      	pop	{r4, r5, r6, pc}

90012034 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
90012034:	b538      	push	{r3, r4, r5, lr}
90012036:	f890 307b 	ldrb.w	r3, [r0, #123]	; 0x7b
9001203a:	4604      	mov	r4, r0
9001203c:	460d      	mov	r5, r1
9001203e:	428b      	cmp	r3, r1
90012040:	d006      	beq.n	90012050 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
90012042:	6803      	ldr	r3, [r0, #0]
90012044:	b929      	cbnz	r1, 90012052 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
90012046:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
9001204a:	4798      	blx	r3
9001204c:	f884 507b 	strb.w	r5, [r4, #123]	; 0x7b
90012050:	bd38      	pop	{r3, r4, r5, pc}
90012052:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
90012056:	e7f8      	b.n	9001204a <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

90012058 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
90012058:	4b0d      	ldr	r3, [pc, #52]	; (90012090 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
9001205a:	b510      	push	{r4, lr}
9001205c:	781b      	ldrb	r3, [r3, #0]
9001205e:	4604      	mov	r4, r0
90012060:	b95b      	cbnz	r3, 9001207a <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
90012062:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
90012066:	2b02      	cmp	r3, #2
90012068:	d007      	beq.n	9001207a <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
9001206a:	6840      	ldr	r0, [r0, #4]
9001206c:	f000 f900 	bl	90012270 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
90012070:	b118      	cbz	r0, 9001207a <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
90012072:	6862      	ldr	r2, [r4, #4]
90012074:	7a53      	ldrb	r3, [r2, #9]
90012076:	2b00      	cmp	r3, #0
90012078:	d0fc      	beq.n	90012074 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
9001207a:	f7ef fd69 	bl	90001b50 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
9001207e:	4620      	mov	r0, r4
90012080:	2100      	movs	r1, #0
90012082:	f7ff ffd7 	bl	90012034 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
90012086:	4620      	mov	r0, r4
90012088:	f7ff fd74 	bl	90011b74 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
9001208c:	bd10      	pop	{r4, pc}
9001208e:	bf00      	nop
90012090:	24021c12 	.word	0x24021c12

90012094 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
90012094:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
90012098:	1a13      	subs	r3, r2, r0
9001209a:	4258      	negs	r0, r3
9001209c:	4158      	adcs	r0, r3
9001209e:	4770      	bx	lr

900120a0 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
900120a0:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
900120a4:	1a9b      	subs	r3, r3, r2
900120a6:	2b00      	cmp	r3, #0
900120a8:	bfdc      	itt	le
900120aa:	6882      	ldrle	r2, [r0, #8]
900120ac:	189b      	addle	r3, r3, r2
900120ae:	2b01      	cmp	r3, #1
900120b0:	bfcc      	ite	gt
900120b2:	2000      	movgt	r0, #0
900120b4:	2001      	movle	r0, #1
900120b6:	4770      	bx	lr

900120b8 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
900120b8:	6902      	ldr	r2, [r0, #16]
900120ba:	6843      	ldr	r3, [r0, #4]
900120bc:	2024      	movs	r0, #36	; 0x24
900120be:	fb00 3002 	mla	r0, r0, r2, r3
900120c2:	4770      	bx	lr

900120c4 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
900120c4:	6803      	ldr	r3, [r0, #0]
900120c6:	691b      	ldr	r3, [r3, #16]
900120c8:	4718      	bx	r3

900120ca <_ZN8touchgfx13DMA_Interface7executeEv>:
900120ca:	2301      	movs	r3, #1
900120cc:	b570      	push	{r4, r5, r6, lr}
900120ce:	7203      	strb	r3, [r0, #8]
900120d0:	4604      	mov	r4, r0
900120d2:	6840      	ldr	r0, [r0, #4]
900120d4:	6803      	ldr	r3, [r0, #0]
900120d6:	699b      	ldr	r3, [r3, #24]
900120d8:	4798      	blx	r3
900120da:	6803      	ldr	r3, [r0, #0]
900120dc:	4605      	mov	r5, r0
900120de:	2b40      	cmp	r3, #64	; 0x40
900120e0:	d00c      	beq.n	900120fc <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
900120e2:	d810      	bhi.n	90012106 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
900120e4:	2b04      	cmp	r3, #4
900120e6:	d01d      	beq.n	90012124 <_ZN8touchgfx13DMA_Interface7executeEv+0x5a>
900120e8:	d804      	bhi.n	900120f4 <_ZN8touchgfx13DMA_Interface7executeEv+0x2a>
900120ea:	2b01      	cmp	r3, #1
900120ec:	d006      	beq.n	900120fc <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
900120ee:	2b02      	cmp	r3, #2
900120f0:	d02c      	beq.n	9001214c <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
900120f2:	bd70      	pop	{r4, r5, r6, pc}
900120f4:	2b08      	cmp	r3, #8
900120f6:	d01d      	beq.n	90012134 <_ZN8touchgfx13DMA_Interface7executeEv+0x6a>
900120f8:	2b20      	cmp	r3, #32
900120fa:	d1fa      	bne.n	900120f2 <_ZN8touchgfx13DMA_Interface7executeEv+0x28>
900120fc:	6823      	ldr	r3, [r4, #0]
900120fe:	4620      	mov	r0, r4
90012100:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
90012102:	4798      	blx	r3
90012104:	e013      	b.n	9001212e <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
90012106:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
9001210a:	d0f7      	beq.n	900120fc <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
9001210c:	d804      	bhi.n	90012118 <_ZN8touchgfx13DMA_Interface7executeEv+0x4e>
9001210e:	2b80      	cmp	r3, #128	; 0x80
90012110:	d0f4      	beq.n	900120fc <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
90012112:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
90012116:	e7f0      	b.n	900120fa <_ZN8touchgfx13DMA_Interface7executeEv+0x30>
90012118:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
9001211c:	d0ee      	beq.n	900120fc <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
9001211e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
90012122:	e7e5      	b.n	900120f0 <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
90012124:	6823      	ldr	r3, [r4, #0]
90012126:	7f01      	ldrb	r1, [r0, #28]
90012128:	4620      	mov	r0, r4
9001212a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
9001212c:	4798      	blx	r3
9001212e:	6823      	ldr	r3, [r4, #0]
90012130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90012132:	e006      	b.n	90012142 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
90012134:	6823      	ldr	r3, [r4, #0]
90012136:	7f01      	ldrb	r1, [r0, #28]
90012138:	4620      	mov	r0, r4
9001213a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
9001213c:	4798      	blx	r3
9001213e:	6823      	ldr	r3, [r4, #0]
90012140:	6b5b      	ldr	r3, [r3, #52]	; 0x34
90012142:	4629      	mov	r1, r5
90012144:	4620      	mov	r0, r4
90012146:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
9001214a:	4718      	bx	r3
9001214c:	6823      	ldr	r3, [r4, #0]
9001214e:	4620      	mov	r0, r4
90012150:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
90012152:	4798      	blx	r3
90012154:	e7f3      	b.n	9001213e <_ZN8touchgfx13DMA_Interface7executeEv+0x74>

90012156 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
90012156:	4770      	bx	lr

90012158 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
90012158:	4770      	bx	lr

9001215a <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
9001215a:	4770      	bx	lr

9001215c <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
9001215c:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
90012160:	b510      	push	{r4, lr}
90012162:	1ad2      	subs	r2, r2, r3
90012164:	2a00      	cmp	r2, #0
90012166:	bfdc      	itt	le
90012168:	6884      	ldrle	r4, [r0, #8]
9001216a:	1912      	addle	r2, r2, r4
9001216c:	2a01      	cmp	r2, #1
9001216e:	dd16      	ble.n	9001219e <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x42>
90012170:	6842      	ldr	r2, [r0, #4]
90012172:	2424      	movs	r4, #36	; 0x24
90012174:	fb04 2303 	mla	r3, r4, r3, r2
90012178:	f101 0220 	add.w	r2, r1, #32
9001217c:	f851 4b04 	ldr.w	r4, [r1], #4
90012180:	4291      	cmp	r1, r2
90012182:	f843 4b04 	str.w	r4, [r3], #4
90012186:	d1f9      	bne.n	9001217c <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
90012188:	780a      	ldrb	r2, [r1, #0]
9001218a:	701a      	strb	r2, [r3, #0]
9001218c:	68c3      	ldr	r3, [r0, #12]
9001218e:	6882      	ldr	r2, [r0, #8]
90012190:	f3bf 8f5b 	dmb	ish
90012194:	3301      	adds	r3, #1
90012196:	429a      	cmp	r2, r3
90012198:	bfd8      	it	le
9001219a:	1a9b      	suble	r3, r3, r2
9001219c:	60c3      	str	r3, [r0, #12]
9001219e:	bd10      	pop	{r4, pc}

900121a0 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
900121a0:	6903      	ldr	r3, [r0, #16]
900121a2:	6882      	ldr	r2, [r0, #8]
900121a4:	f3bf 8f5b 	dmb	ish
900121a8:	3301      	adds	r3, #1
900121aa:	429a      	cmp	r2, r3
900121ac:	bfd8      	it	le
900121ae:	1a9b      	suble	r3, r3, r2
900121b0:	6103      	str	r3, [r0, #16]
900121b2:	4770      	bx	lr

900121b4 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
900121b4:	b570      	push	{r4, r5, r6, lr}
900121b6:	4604      	mov	r4, r0
900121b8:	460e      	mov	r6, r1
900121ba:	6860      	ldr	r0, [r4, #4]
900121bc:	6803      	ldr	r3, [r0, #0]
900121be:	685b      	ldr	r3, [r3, #4]
900121c0:	4798      	blx	r3
900121c2:	2800      	cmp	r0, #0
900121c4:	d1f9      	bne.n	900121ba <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
900121c6:	4d0d      	ldr	r5, [pc, #52]	; (900121fc <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
900121c8:	6828      	ldr	r0, [r5, #0]
900121ca:	6803      	ldr	r3, [r0, #0]
900121cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
900121ce:	4798      	blx	r3
900121d0:	f7ef fccc 	bl	90001b6c <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
900121d4:	6828      	ldr	r0, [r5, #0]
900121d6:	2101      	movs	r1, #1
900121d8:	f7ff ff2c 	bl	90012034 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
900121dc:	6860      	ldr	r0, [r4, #4]
900121de:	4631      	mov	r1, r6
900121e0:	6803      	ldr	r3, [r0, #0]
900121e2:	689b      	ldr	r3, [r3, #8]
900121e4:	4798      	blx	r3
900121e6:	6823      	ldr	r3, [r4, #0]
900121e8:	4620      	mov	r0, r4
900121ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900121ec:	4798      	blx	r3
900121ee:	6828      	ldr	r0, [r5, #0]
900121f0:	6803      	ldr	r3, [r0, #0]
900121f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
900121f6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
900121f8:	4718      	bx	r3
900121fa:	bf00      	nop
900121fc:	24021c14 	.word	0x24021c14

90012200 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
90012200:	b508      	push	{r3, lr}
90012202:	f7ef fca5 	bl	90001b50 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
90012206:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
9001220a:	f7ef bca9 	b.w	90001b60 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

9001220e <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
9001220e:	b510      	push	{r4, lr}
90012210:	4604      	mov	r4, r0
90012212:	2114      	movs	r1, #20
90012214:	f011 fb1f 	bl	90023856 <_ZdlPvj>
90012218:	4620      	mov	r0, r4
9001221a:	bd10      	pop	{r4, pc}

9001221c <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
9001221c:	b570      	push	{r4, r5, r6, lr}
9001221e:	4604      	mov	r4, r0
90012220:	6840      	ldr	r0, [r0, #4]
90012222:	6803      	ldr	r3, [r0, #0]
90012224:	681b      	ldr	r3, [r3, #0]
90012226:	4798      	blx	r3
90012228:	4605      	mov	r5, r0
9001222a:	b930      	cbnz	r0, 9001223a <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
9001222c:	7a23      	ldrb	r3, [r4, #8]
9001222e:	b123      	cbz	r3, 9001223a <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
90012230:	6860      	ldr	r0, [r4, #4]
90012232:	6803      	ldr	r3, [r0, #0]
90012234:	695b      	ldr	r3, [r3, #20]
90012236:	4798      	blx	r3
90012238:	7225      	strb	r5, [r4, #8]
9001223a:	6860      	ldr	r0, [r4, #4]
9001223c:	6803      	ldr	r3, [r0, #0]
9001223e:	681b      	ldr	r3, [r3, #0]
90012240:	4798      	blx	r3
90012242:	b928      	cbnz	r0, 90012250 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
90012244:	6823      	ldr	r3, [r4, #0]
90012246:	4620      	mov	r0, r4
90012248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9001224a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
9001224e:	4718      	bx	r3
90012250:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90012254:	f7ef bc92 	b.w	90001b7c <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

90012258 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
90012258:	b510      	push	{r4, lr}
9001225a:	6082      	str	r2, [r0, #8]
9001225c:	2200      	movs	r2, #0
9001225e:	4c03      	ldr	r4, [pc, #12]	; (9001226c <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
90012260:	e9c0 2203 	strd	r2, r2, [r0, #12]
90012264:	e9c0 4100 	strd	r4, r1, [r0]
90012268:	bd10      	pop	{r4, pc}
9001226a:	bf00      	nop
9001226c:	90028ce0 	.word	0x90028ce0

90012270 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
90012270:	6840      	ldr	r0, [r0, #4]
90012272:	6803      	ldr	r3, [r0, #0]
90012274:	681b      	ldr	r3, [r3, #0]
90012276:	4718      	bx	r3

90012278 <_ZNK8touchgfx3Box12getSolidRectEv>:
90012278:	2300      	movs	r3, #0
9001227a:	8083      	strh	r3, [r0, #4]
9001227c:	80c3      	strh	r3, [r0, #6]
9001227e:	8003      	strh	r3, [r0, #0]
90012280:	8043      	strh	r3, [r0, #2]
90012282:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
90012286:	2bff      	cmp	r3, #255	; 0xff
90012288:	bf01      	itttt	eq
9001228a:	890b      	ldrheq	r3, [r1, #8]
9001228c:	8083      	strheq	r3, [r0, #4]
9001228e:	894b      	ldrheq	r3, [r1, #10]
90012290:	80c3      	strheq	r3, [r0, #6]
90012292:	4770      	bx	lr

90012294 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
90012294:	b537      	push	{r0, r1, r2, r4, r5, lr}
90012296:	4604      	mov	r4, r0
90012298:	466b      	mov	r3, sp
9001229a:	6808      	ldr	r0, [r1, #0]
9001229c:	6849      	ldr	r1, [r1, #4]
9001229e:	c303      	stmia	r3!, {r0, r1}
900122a0:	6823      	ldr	r3, [r4, #0]
900122a2:	4669      	mov	r1, sp
900122a4:	4620      	mov	r0, r4
900122a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900122a8:	4798      	blx	r3
900122aa:	4b08      	ldr	r3, [pc, #32]	; (900122cc <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
900122ac:	681b      	ldr	r3, [r3, #0]
900122ae:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
900122b2:	b10a      	cbz	r2, 900122b8 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
900122b4:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
900122b6:	b900      	cbnz	r0, 900122ba <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
900122b8:	6898      	ldr	r0, [r3, #8]
900122ba:	6803      	ldr	r3, [r0, #0]
900122bc:	4669      	mov	r1, sp
900122be:	6aa2      	ldr	r2, [r4, #40]	; 0x28
900122c0:	6a1d      	ldr	r5, [r3, #32]
900122c2:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
900122c6:	47a8      	blx	r5
900122c8:	b003      	add	sp, #12
900122ca:	bd30      	pop	{r4, r5, pc}
900122cc:	24021c14 	.word	0x24021c14

900122d0 <_ZN8touchgfx3BoxD1Ev>:
900122d0:	4770      	bx	lr

900122d2 <_ZN8touchgfx3BoxD0Ev>:
900122d2:	b510      	push	{r4, lr}
900122d4:	4604      	mov	r4, r0
900122d6:	212c      	movs	r1, #44	; 0x2c
900122d8:	f011 fabd 	bl	90023856 <_ZdlPvj>
900122dc:	4620      	mov	r0, r4
900122de:	bd10      	pop	{r4, pc}

900122e0 <_ZNK8touchgfx3Box17invalidateContentEv>:
900122e0:	f890 2026 	ldrb.w	r2, [r0, #38]	; 0x26
900122e4:	b12a      	cbz	r2, 900122f2 <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
900122e6:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
900122ea:	b112      	cbz	r2, 900122f2 <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
900122ec:	6803      	ldr	r3, [r0, #0]
900122ee:	695b      	ldr	r3, [r3, #20]
900122f0:	4718      	bx	r3
900122f2:	4770      	bx	lr

900122f4 <_ZNK8touchgfx14AbstractButton15getPressedStateEv>:
900122f4:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
900122f8:	4770      	bx	lr

900122fa <_ZNK8touchgfx6Button17invalidateContentEv>:
900122fa:	b508      	push	{r3, lr}
900122fc:	f890 3032 	ldrb.w	r3, [r0, #50]	; 0x32
90012300:	b10b      	cbz	r3, 90012306 <_ZNK8touchgfx6Button17invalidateContentEv+0xc>
90012302:	f7f0 f8db 	bl	900024bc <_ZNK8touchgfx8Drawable17invalidateContentEv>
90012306:	bd08      	pop	{r3, pc}

90012308 <_ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_>:
90012308:	4770      	bx	lr

9001230a <_ZN8touchgfx14ButtonWithIconD1Ev>:
9001230a:	4770      	bx	lr

9001230c <_ZN8touchgfx14ButtonWithIconD0Ev>:
9001230c:	b510      	push	{r4, lr}
9001230e:	4604      	mov	r4, r0
90012310:	213c      	movs	r1, #60	; 0x3c
90012312:	f011 faa0 	bl	90023856 <_ZdlPvj>
90012316:	4620      	mov	r0, r4
90012318:	bd10      	pop	{r4, pc}

9001231a <_ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_S3_S3_>:
9001231a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9001231e:	461c      	mov	r4, r3
90012320:	4606      	mov	r6, r0
90012322:	9f06      	ldr	r7, [sp, #24]
90012324:	f011 f9e7 	bl	900236f6 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
90012328:	8823      	ldrh	r3, [r4, #0]
9001232a:	f04f 0802 	mov.w	r8, #2
9001232e:	f9b6 5008 	ldrsh.w	r5, [r6, #8]
90012332:	4638      	mov	r0, r7
90012334:	86b3      	strh	r3, [r6, #52]	; 0x34
90012336:	883b      	ldrh	r3, [r7, #0]
90012338:	fb95 f5f8 	sdiv	r5, r5, r8
9001233c:	86f3      	strh	r3, [r6, #54]	; 0x36
9001233e:	b2ad      	uxth	r5, r5
90012340:	f003 fd72 	bl	90015e28 <_ZNK8touchgfx6Bitmap8getWidthEv>
90012344:	f9b6 400a 	ldrsh.w	r4, [r6, #10]
90012348:	fb90 f0f8 	sdiv	r0, r0, r8
9001234c:	1a2d      	subs	r5, r5, r0
9001234e:	4638      	mov	r0, r7
90012350:	fb94 f4f8 	sdiv	r4, r4, r8
90012354:	8735      	strh	r5, [r6, #56]	; 0x38
90012356:	b2a4      	uxth	r4, r4
90012358:	f003 fd9a 	bl	90015e90 <_ZNK8touchgfx6Bitmap9getHeightEv>
9001235c:	fb90 f0f8 	sdiv	r0, r0, r8
90012360:	1a24      	subs	r4, r4, r0
90012362:	8774      	strh	r4, [r6, #58]	; 0x3a
90012364:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

90012368 <_ZN8touchgfx14AbstractButton13executeActionEv>:
90012368:	b510      	push	{r4, lr}
9001236a:	4604      	mov	r4, r0
9001236c:	6a80      	ldr	r0, [r0, #40]	; 0x28
9001236e:	b150      	cbz	r0, 90012386 <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
90012370:	6803      	ldr	r3, [r0, #0]
90012372:	68db      	ldr	r3, [r3, #12]
90012374:	4798      	blx	r3
90012376:	b130      	cbz	r0, 90012386 <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
90012378:	6aa0      	ldr	r0, [r4, #40]	; 0x28
9001237a:	4621      	mov	r1, r4
9001237c:	6803      	ldr	r3, [r0, #0]
9001237e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
90012382:	689b      	ldr	r3, [r3, #8]
90012384:	4718      	bx	r3
90012386:	bd10      	pop	{r4, pc}

90012388 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE>:
90012388:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9001238c:	4604      	mov	r4, r0
9001238e:	b08c      	sub	sp, #48	; 0x30
90012390:	460d      	mov	r5, r1
90012392:	f011 f9e3 	bl	9002375c <_ZNK8touchgfx6Button4drawERKNS_4RectE>
90012396:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
9001239a:	2b00      	cmp	r3, #0
9001239c:	d05d      	beq.n	9001245a <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xd2>
9001239e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
900123a0:	a805      	add	r0, sp, #20
900123a2:	f8ad 3014 	strh.w	r3, [sp, #20]
900123a6:	f9b4 8038 	ldrsh.w	r8, [r4, #56]	; 0x38
900123aa:	f9b4 703a 	ldrsh.w	r7, [r4, #58]	; 0x3a
900123ae:	f003 fd3b 	bl	90015e28 <_ZNK8touchgfx6Bitmap8getWidthEv>
900123b2:	4606      	mov	r6, r0
900123b4:	a805      	add	r0, sp, #20
900123b6:	f003 fd6b 	bl	90015e90 <_ZNK8touchgfx6Bitmap9getHeightEv>
900123ba:	6869      	ldr	r1, [r5, #4]
900123bc:	f8ad 001e 	strh.w	r0, [sp, #30]
900123c0:	ab08      	add	r3, sp, #32
900123c2:	6828      	ldr	r0, [r5, #0]
900123c4:	ad08      	add	r5, sp, #32
900123c6:	f8ad 8018 	strh.w	r8, [sp, #24]
900123ca:	f8ad 701a 	strh.w	r7, [sp, #26]
900123ce:	f8ad 601c 	strh.w	r6, [sp, #28]
900123d2:	c303      	stmia	r3!, {r0, r1}
900123d4:	a906      	add	r1, sp, #24
900123d6:	4628      	mov	r0, r5
900123d8:	f7fe ff3c 	bl	90011254 <_ZN8touchgfx4RectaNERKS0_>
900123dc:	f8bd 2014 	ldrh.w	r2, [sp, #20]
900123e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
900123e4:	429a      	cmp	r2, r3
900123e6:	d035      	beq.n	90012454 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xcc>
900123e8:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
900123ec:	2b00      	cmp	r3, #0
900123ee:	dd31      	ble.n	90012454 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xcc>
900123f0:	f9bd 3026 	ldrsh.w	r3, [sp, #38]	; 0x26
900123f4:	2b00      	cmp	r3, #0
900123f6:	dd2d      	ble.n	90012454 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xcc>
900123f8:	2300      	movs	r3, #0
900123fa:	a90a      	add	r1, sp, #40	; 0x28
900123fc:	4620      	mov	r0, r4
900123fe:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
90012402:	6823      	ldr	r3, [r4, #0]
90012404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90012406:	4798      	blx	r3
90012408:	f8bd 3020 	ldrh.w	r3, [sp, #32]
9001240c:	8f22      	ldrh	r2, [r4, #56]	; 0x38
9001240e:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
90012412:	1a9b      	subs	r3, r3, r2
90012414:	f8ad 3020 	strh.w	r3, [sp, #32]
90012418:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
9001241a:	1ac9      	subs	r1, r1, r3
9001241c:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
90012420:	490f      	ldr	r1, [pc, #60]	; (90012460 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xd8>)
90012422:	6809      	ldr	r1, [r1, #0]
90012424:	f891 0058 	ldrb.w	r0, [r1, #88]	; 0x58
90012428:	b108      	cbz	r0, 9001242e <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xa6>
9001242a:	6cc8      	ldr	r0, [r1, #76]	; 0x4c
9001242c:	b900      	cbnz	r0, 90012430 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xa8>
9001242e:	6888      	ldr	r0, [r1, #8]
90012430:	f8bd 102a 	ldrh.w	r1, [sp, #42]	; 0x2a
90012434:	2601      	movs	r6, #1
90012436:	440b      	add	r3, r1
90012438:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
9001243c:	440a      	add	r2, r1
9001243e:	6801      	ldr	r1, [r0, #0]
90012440:	9602      	str	r6, [sp, #8]
90012442:	b21b      	sxth	r3, r3
90012444:	f894 4032 	ldrb.w	r4, [r4, #50]	; 0x32
90012448:	b212      	sxth	r2, r2
9001244a:	e9cd 5400 	strd	r5, r4, [sp]
9001244e:	688c      	ldr	r4, [r1, #8]
90012450:	a905      	add	r1, sp, #20
90012452:	47a0      	blx	r4
90012454:	b00c      	add	sp, #48	; 0x30
90012456:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
9001245a:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
9001245c:	e7a0      	b.n	900123a0 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0x18>
9001245e:	bf00      	nop
90012460:	24021c14 	.word	0x24021c14

90012464 <_ZN8touchgfx14ButtonWithIconC1Ev>:
90012464:	2101      	movs	r1, #1
90012466:	2200      	movs	r2, #0
90012468:	b510      	push	{r4, lr}
9001246a:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
9001246e:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
90012472:	f64f 71ff 	movw	r1, #65535	; 0xffff
90012476:	4c0d      	ldr	r4, [pc, #52]	; (900124ac <_ZN8touchgfx14ButtonWithIconC1Ev+0x48>)
90012478:	8082      	strh	r2, [r0, #4]
9001247a:	80c2      	strh	r2, [r0, #6]
9001247c:	8102      	strh	r2, [r0, #8]
9001247e:	8142      	strh	r2, [r0, #10]
90012480:	8182      	strh	r2, [r0, #12]
90012482:	81c2      	strh	r2, [r0, #14]
90012484:	8202      	strh	r2, [r0, #16]
90012486:	8242      	strh	r2, [r0, #18]
90012488:	61c2      	str	r2, [r0, #28]
9001248a:	8402      	strh	r2, [r0, #32]
9001248c:	8442      	strh	r2, [r0, #34]	; 0x22
9001248e:	6282      	str	r2, [r0, #40]	; 0x28
90012490:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c
90012494:	85c1      	strh	r1, [r0, #46]	; 0x2e
90012496:	8601      	strh	r1, [r0, #48]	; 0x30
90012498:	f880 1032 	strb.w	r1, [r0, #50]	; 0x32
9001249c:	6004      	str	r4, [r0, #0]
9001249e:	8681      	strh	r1, [r0, #52]	; 0x34
900124a0:	86c1      	strh	r1, [r0, #54]	; 0x36
900124a2:	8702      	strh	r2, [r0, #56]	; 0x38
900124a4:	8742      	strh	r2, [r0, #58]	; 0x3a
900124a6:	e9c0 2205 	strd	r2, r2, [r0, #20]
900124aa:	bd10      	pop	{r4, pc}
900124ac:	90028d6c 	.word	0x90028d6c

900124b0 <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
900124b0:	b510      	push	{r4, lr}
900124b2:	6803      	ldr	r3, [r0, #0]
900124b4:	460c      	mov	r4, r1
900124b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900124b8:	4798      	blx	r3
900124ba:	1b03      	subs	r3, r0, r4
900124bc:	4258      	negs	r0, r3
900124be:	4158      	adcs	r0, r3
900124c0:	bd10      	pop	{r4, pc}
	...

900124c4 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
900124c4:	4b01      	ldr	r3, [pc, #4]	; (900124cc <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
900124c6:	6019      	str	r1, [r3, #0]
900124c8:	4770      	bx	lr
900124ca:	bf00      	nop
900124cc:	24021c1c 	.word	0x24021c1c

900124d0 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
900124d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900124d4:	4696      	mov	lr, r2
900124d6:	b097      	sub	sp, #92	; 0x5c
900124d8:	4605      	mov	r5, r0
900124da:	4614      	mov	r4, r2
900124dc:	460e      	mov	r6, r1
900124de:	461f      	mov	r7, r3
900124e0:	f10d 0c1c 	add.w	ip, sp, #28
900124e4:	f8bd 8088 	ldrh.w	r8, [sp, #136]	; 0x88
900124e8:	f89d 908c 	ldrb.w	r9, [sp, #140]	; 0x8c
900124ec:	f8bd a090 	ldrh.w	sl, [sp, #144]	; 0x90
900124f0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
900124f4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
900124f8:	f8de 3000 	ldr.w	r3, [lr]
900124fc:	f104 0e14 	add.w	lr, r4, #20
90012500:	f8cc 3000 	str.w	r3, [ip]
90012504:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
90012508:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
9001250c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
90012510:	f8de 3000 	ldr.w	r3, [lr]
90012514:	f104 0e28 	add.w	lr, r4, #40	; 0x28
90012518:	f8cc 3000 	str.w	r3, [ip]
9001251c:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
90012520:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
90012524:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
90012528:	f8de 3000 	ldr.w	r3, [lr]
9001252c:	4631      	mov	r1, r6
9001252e:	9a21      	ldr	r2, [sp, #132]	; 0x84
90012530:	4628      	mov	r0, r5
90012532:	f8cc 3000 	str.w	r3, [ip]
90012536:	682b      	ldr	r3, [r5, #0]
90012538:	9201      	str	r2, [sp, #4]
9001253a:	9a20      	ldr	r2, [sp, #128]	; 0x80
9001253c:	f8cd 8008 	str.w	r8, [sp, #8]
90012540:	9200      	str	r2, [sp, #0]
90012542:	aa07      	add	r2, sp, #28
90012544:	e9cd 9a03 	strd	r9, sl, [sp, #12]
90012548:	f8d3 b03c 	ldr.w	fp, [r3, #60]	; 0x3c
9001254c:	463b      	mov	r3, r7
9001254e:	47d8      	blx	fp
90012550:	46a6      	mov	lr, r4
90012552:	f10d 0c1c 	add.w	ip, sp, #28
90012556:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
9001255a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
9001255e:	f8de 3000 	ldr.w	r3, [lr]
90012562:	f104 0e28 	add.w	lr, r4, #40	; 0x28
90012566:	343c      	adds	r4, #60	; 0x3c
90012568:	f8cc 3000 	str.w	r3, [ip]
9001256c:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
90012570:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
90012574:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
90012578:	f8de 3000 	ldr.w	r3, [lr]
9001257c:	f8cc 3000 	str.w	r3, [ip]
90012580:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
90012584:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
90012586:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
9001258a:	6823      	ldr	r3, [r4, #0]
9001258c:	4631      	mov	r1, r6
9001258e:	4628      	mov	r0, r5
90012590:	f8cc 3000 	str.w	r3, [ip]
90012594:	682b      	ldr	r3, [r5, #0]
90012596:	e9cd 9a03 	strd	r9, sl, [sp, #12]
9001259a:	9a21      	ldr	r2, [sp, #132]	; 0x84
9001259c:	f8cd 8008 	str.w	r8, [sp, #8]
900125a0:	9201      	str	r2, [sp, #4]
900125a2:	9a20      	ldr	r2, [sp, #128]	; 0x80
900125a4:	9200      	str	r2, [sp, #0]
900125a6:	aa07      	add	r2, sp, #28
900125a8:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
900125aa:	463b      	mov	r3, r7
900125ac:	47a0      	blx	r4
900125ae:	b017      	add	sp, #92	; 0x5c
900125b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

900125b4 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
900125b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900125b8:	b08d      	sub	sp, #52	; 0x34
900125ba:	4688      	mov	r8, r1
900125bc:	f8d3 c000 	ldr.w	ip, [r3]
900125c0:	9916      	ldr	r1, [sp, #88]	; 0x58
900125c2:	f8bd 4070 	ldrh.w	r4, [sp, #112]	; 0x70
900125c6:	680f      	ldr	r7, [r1, #0]
900125c8:	ed92 4a09 	vldr	s8, [r2, #36]	; 0x24
900125cc:	eba7 070c 	sub.w	r7, r7, ip
900125d0:	edd2 4a0b 	vldr	s9, [r2, #44]	; 0x2c
900125d4:	edd3 6a07 	vldr	s13, [r3, #28]
900125d8:	42bc      	cmp	r4, r7
900125da:	9918      	ldr	r1, [sp, #96]	; 0x60
900125dc:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
900125e0:	bfa8      	it	ge
900125e2:	463c      	movge	r4, r7
900125e4:	f9b1 9000 	ldrsh.w	r9, [r1]
900125e8:	f9ba 1000 	ldrsh.w	r1, [sl]
900125ec:	ee07 4a90 	vmov	s15, r4
900125f0:	eb09 0e0c 	add.w	lr, r9, ip
900125f4:	edd3 1a0a 	vldr	s3, [r3, #40]	; 0x28
900125f8:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
900125fc:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
90012600:	ed93 2a0d 	vldr	s4, [r3, #52]	; 0x34
90012604:	4571      	cmp	r1, lr
90012606:	ee25 4a04 	vmul.f32	s8, s10, s8
9001260a:	ee65 4a24 	vmul.f32	s9, s10, s9
9001260e:	ee25 5a27 	vmul.f32	s10, s10, s15
90012612:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
90012616:	ee71 0aa4 	vadd.f32	s1, s3, s9
9001261a:	ee32 1a05 	vadd.f32	s2, s4, s10
9001261e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
90012622:	ee36 0a84 	vadd.f32	s0, s13, s8
90012626:	ee61 1a87 	vmul.f32	s3, s3, s14
9001262a:	ee22 2a07 	vmul.f32	s4, s4, s14
9001262e:	f340 808c 	ble.w	9001274a <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
90012632:	eba1 060e 	sub.w	r6, r1, lr
90012636:	fb96 f5f4 	sdiv	r5, r6, r4
9001263a:	ee07 5a10 	vmov	s14, r5
9001263e:	2d00      	cmp	r5, #0
90012640:	fb04 6615 	mls	r6, r4, r5, r6
90012644:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
90012648:	eea7 0a04 	vfma.f32	s0, s14, s8
9001264c:	eee7 0a24 	vfma.f32	s1, s14, s9
90012650:	eea7 1a05 	vfma.f32	s2, s14, s10
90012654:	dd12      	ble.n	9001267c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
90012656:	ee70 6a44 	vsub.f32	s13, s0, s8
9001265a:	ee70 1ae4 	vsub.f32	s3, s1, s9
9001265e:	ee31 2a45 	vsub.f32	s4, s2, s10
90012662:	eef5 6a40 	vcmp.f32	s13, #0.0
90012666:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
9001266a:	bf14      	ite	ne
9001266c:	ee87 7aa6 	vdivne.f32	s14, s15, s13
90012670:	eeb0 7a67 	vmoveq.f32	s14, s15
90012674:	ee61 1a87 	vmul.f32	s3, s3, s14
90012678:	ee22 2a07 	vmul.f32	s4, s4, s14
9001267c:	fb05 f204 	mul.w	r2, r5, r4
90012680:	1abf      	subs	r7, r7, r2
90012682:	4494      	add	ip, r2
90012684:	f8ba 2004 	ldrh.w	r2, [sl, #4]
90012688:	4411      	add	r1, r2
9001268a:	eb09 020c 	add.w	r2, r9, ip
9001268e:	b209      	sxth	r1, r1
90012690:	443a      	add	r2, r7
90012692:	428a      	cmp	r2, r1
90012694:	bfc4      	itt	gt
90012696:	eba1 0209 	subgt.w	r2, r1, r9
9001269a:	eba2 070c 	subgt.w	r7, r2, ip
9001269e:	2f00      	cmp	r7, #0
900126a0:	dd50      	ble.n	90012744 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
900126a2:	fb97 f1f4 	sdiv	r1, r7, r4
900126a6:	fb04 7211 	mls	r2, r4, r1, r7
900126aa:	b90a      	cbnz	r2, 900126b0 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
900126ac:	3901      	subs	r1, #1
900126ae:	4622      	mov	r2, r4
900126b0:	eec7 3a80 	vdiv.f32	s7, s15, s0
900126b4:	6840      	ldr	r0, [r0, #4]
900126b6:	f89d b06c 	ldrb.w	fp, [sp, #108]	; 0x6c
900126ba:	44b6      	add	lr, r6
900126bc:	f8d0 a000 	ldr.w	sl, [r0]
900126c0:	2900      	cmp	r1, #0
900126c2:	bfcc      	ite	gt
900126c4:	46a1      	movgt	r9, r4
900126c6:	4691      	movle	r9, r2
900126c8:	900b      	str	r0, [sp, #44]	; 0x2c
900126ca:	9817      	ldr	r0, [sp, #92]	; 0x5c
900126cc:	fb04 e505 	mla	r5, r4, r5, lr
900126d0:	eef0 6a42 	vmov.f32	s13, s4
900126d4:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
900126d8:	9008      	str	r0, [sp, #32]
900126da:	eeb0 7a61 	vmov.f32	s14, s3
900126de:	9818      	ldr	r0, [sp, #96]	; 0x60
900126e0:	695b      	ldr	r3, [r3, #20]
900126e2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
900126e6:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
900126ea:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
900126ee:	980b      	ldr	r0, [sp, #44]	; 0x2c
900126f0:	445b      	add	r3, fp
900126f2:	9307      	str	r3, [sp, #28]
900126f4:	ee16 3a90 	vmov	r3, s13
900126f8:	e9cd 8505 	strd	r8, r5, [sp, #20]
900126fc:	ee60 2aa3 	vmul.f32	s5, s1, s7
90012700:	ee21 3a23 	vmul.f32	s6, s2, s7
90012704:	ee72 7ae1 	vsub.f32	s15, s5, s3
90012708:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
9001270c:	ee17 7a90 	vmov	r7, s15
90012710:	ee73 7a42 	vsub.f32	s15, s6, s4
90012714:	fb97 f7f4 	sdiv	r7, r7, r4
90012718:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
9001271c:	ee17 ca90 	vmov	ip, s15
90012720:	fb9c fcf4 	sdiv	ip, ip, r4
90012724:	fb0c 3306 	mla	r3, ip, r6, r3
90012728:	9302      	str	r3, [sp, #8]
9001272a:	ee17 3a10 	vmov	r3, s14
9001272e:	e9cd 7c03 	strd	r7, ip, [sp, #12]
90012732:	fb07 3706 	mla	r7, r7, r6, r3
90012736:	eba9 0306 	sub.w	r3, r9, r6
9001273a:	e9cd 4700 	strd	r4, r7, [sp]
9001273e:	f8da 4008 	ldr.w	r4, [sl, #8]
90012742:	47a0      	blx	r4
90012744:	b00d      	add	sp, #52	; 0x34
90012746:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001274a:	2500      	movs	r5, #0
9001274c:	462e      	mov	r6, r5
9001274e:	e799      	b.n	90012684 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

90012750 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
90012750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90012754:	b0db      	sub	sp, #364	; 0x16c
90012756:	461d      	mov	r5, r3
90012758:	4614      	mov	r4, r2
9001275a:	f8bd 3198 	ldrh.w	r3, [sp, #408]	; 0x198
9001275e:	910f      	str	r1, [sp, #60]	; 0x3c
90012760:	4629      	mov	r1, r5
90012762:	930a      	str	r3, [sp, #40]	; 0x28
90012764:	f89d 319c 	ldrb.w	r3, [sp, #412]	; 0x19c
90012768:	9009      	str	r0, [sp, #36]	; 0x24
9001276a:	930b      	str	r3, [sp, #44]	; 0x2c
9001276c:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	; 0x1a0
90012770:	f8dd b194 	ldr.w	fp, [sp, #404]	; 0x194
90012774:	9310      	str	r3, [sp, #64]	; 0x40
90012776:	6803      	ldr	r3, [r0, #0]
90012778:	6c5f      	ldr	r7, [r3, #68]	; 0x44
9001277a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
9001277e:	47b8      	blx	r7
90012780:	9b09      	ldr	r3, [sp, #36]	; 0x24
90012782:	6058      	str	r0, [r3, #4]
90012784:	2800      	cmp	r0, #0
90012786:	f000 83a1 	beq.w	90012ecc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
9001278a:	682b      	ldr	r3, [r5, #0]
9001278c:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
90012790:	ed94 7a02 	vldr	s14, [r4, #8]
90012794:	9314      	str	r3, [sp, #80]	; 0x50
90012796:	686b      	ldr	r3, [r5, #4]
90012798:	eeb4 7ae7 	vcmpe.f32	s14, s15
9001279c:	9315      	str	r3, [sp, #84]	; 0x54
9001279e:	4bc1      	ldr	r3, [pc, #772]	; (90012aa4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
900127a0:	7819      	ldrb	r1, [r3, #0]
900127a2:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
900127a6:	2900      	cmp	r1, #0
900127a8:	bf16      	itet	ne
900127aa:	4619      	movne	r1, r3
900127ac:	4611      	moveq	r1, r2
900127ae:	4613      	movne	r3, r2
900127b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
900127b4:	9116      	str	r1, [sp, #88]	; 0x58
900127b6:	e9cd 3217 	strd	r3, r2, [sp, #92]	; 0x5c
900127ba:	f240 8387 	bls.w	90012ecc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
900127be:	ed94 7a07 	vldr	s14, [r4, #28]
900127c2:	eeb4 7ae7 	vcmpe.f32	s14, s15
900127c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
900127ca:	f240 837f 	bls.w	90012ecc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
900127ce:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
900127d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
900127d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
900127da:	f240 8377 	bls.w	90012ecc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
900127de:	6822      	ldr	r2, [r4, #0]
900127e0:	4bb1      	ldr	r3, [pc, #708]	; (90012aa8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
900127e2:	429a      	cmp	r2, r3
900127e4:	f2c0 8372 	blt.w	90012ecc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
900127e8:	49b0      	ldr	r1, [pc, #704]	; (90012aac <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
900127ea:	6963      	ldr	r3, [r4, #20]
900127ec:	428a      	cmp	r2, r1
900127ee:	f300 836d 	bgt.w	90012ecc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
900127f2:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
900127f6:	48ae      	ldr	r0, [pc, #696]	; (90012ab0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
900127f8:	33ff      	adds	r3, #255	; 0xff
900127fa:	4283      	cmp	r3, r0
900127fc:	f200 8366 	bhi.w	90012ecc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
90012800:	6aa3      	ldr	r3, [r4, #40]	; 0x28
90012802:	4dac      	ldr	r5, [pc, #688]	; (90012ab4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
90012804:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
90012808:	33ff      	adds	r3, #255	; 0xff
9001280a:	42ab      	cmp	r3, r5
9001280c:	f200 835e 	bhi.w	90012ecc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
90012810:	6862      	ldr	r2, [r4, #4]
90012812:	f502 331c 	add.w	r3, r2, #159744	; 0x27000
90012816:	33ff      	adds	r3, #255	; 0xff
90012818:	4283      	cmp	r3, r0
9001281a:	f200 8357 	bhi.w	90012ecc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
9001281e:	69a1      	ldr	r1, [r4, #24]
90012820:	f501 331c 	add.w	r3, r1, #159744	; 0x27000
90012824:	33ff      	adds	r3, #255	; 0xff
90012826:	4283      	cmp	r3, r0
90012828:	f200 8350 	bhi.w	90012ecc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
9001282c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
9001282e:	f503 301c 	add.w	r0, r3, #159744	; 0x27000
90012832:	30ff      	adds	r0, #255	; 0xff
90012834:	42a8      	cmp	r0, r5
90012836:	f200 8349 	bhi.w	90012ecc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
9001283a:	428a      	cmp	r2, r1
9001283c:	f280 8110 	bge.w	90012a60 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
90012840:	429a      	cmp	r2, r3
90012842:	f300 8119 	bgt.w	90012a78 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
90012846:	4299      	cmp	r1, r3
90012848:	f280 811d 	bge.w	90012a86 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
9001284c:	2502      	movs	r5, #2
9001284e:	2701      	movs	r7, #1
90012850:	46a9      	mov	r9, r5
90012852:	46b8      	mov	r8, r7
90012854:	f04f 0a00 	mov.w	sl, #0
90012858:	4621      	mov	r1, r4
9001285a:	a849      	add	r0, sp, #292	; 0x124
9001285c:	f003 f81c 	bl	90015898 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
90012860:	4622      	mov	r2, r4
90012862:	4653      	mov	r3, sl
90012864:	a949      	add	r1, sp, #292	; 0x124
90012866:	f8cd 9000 	str.w	r9, [sp]
9001286a:	a819      	add	r0, sp, #100	; 0x64
9001286c:	f003 f944 	bl	90015af8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
90012870:	4622      	mov	r2, r4
90012872:	4653      	mov	r3, sl
90012874:	a949      	add	r1, sp, #292	; 0x124
90012876:	f8cd 8000 	str.w	r8, [sp]
9001287a:	a829      	add	r0, sp, #164	; 0xa4
9001287c:	f003 f93c 	bl	90015af8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
90012880:	4643      	mov	r3, r8
90012882:	4622      	mov	r2, r4
90012884:	a949      	add	r1, sp, #292	; 0x124
90012886:	f8cd 9000 	str.w	r9, [sp]
9001288a:	a839      	add	r0, sp, #228	; 0xe4
9001288c:	f003 f934 	bl	90015af8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
90012890:	42af      	cmp	r7, r5
90012892:	af12      	add	r7, sp, #72	; 0x48
90012894:	bfb7      	itett	lt
90012896:	2300      	movlt	r3, #0
90012898:	2301      	movge	r3, #1
9001289a:	ad29      	addlt	r5, sp, #164	; 0xa4
9001289c:	ac19      	addlt	r4, sp, #100	; 0x64
9001289e:	bfb1      	iteee	lt
900128a0:	930e      	strlt	r3, [sp, #56]	; 0x38
900128a2:	ad19      	addge	r5, sp, #100	; 0x64
900128a4:	930e      	strge	r3, [sp, #56]	; 0x38
900128a6:	ac29      	addge	r4, sp, #164	; 0xa4
900128a8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
900128aa:	e893 0003 	ldmia.w	r3, {r0, r1}
900128ae:	e887 0003 	stmia.w	r7, {r0, r1}
900128b2:	b928      	cbnz	r0, 900128c0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
900128b4:	4b80      	ldr	r3, [pc, #512]	; (90012ab8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
900128b6:	6818      	ldr	r0, [r3, #0]
900128b8:	6803      	ldr	r3, [r0, #0]
900128ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
900128bc:	4798      	blx	r3
900128be:	6038      	str	r0, [r7, #0]
900128c0:	9b64      	ldr	r3, [sp, #400]	; 0x190
900128c2:	f8bb 0006 	ldrh.w	r0, [fp, #6]
900128c6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
900128ca:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
900128cc:	930c      	str	r3, [sp, #48]	; 0x30
900128ce:	990c      	ldr	r1, [sp, #48]	; 0x30
900128d0:	6963      	ldr	r3, [r4, #20]
900128d2:	440b      	add	r3, r1
900128d4:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
900128d8:	4408      	add	r0, r1
900128da:	b200      	sxth	r0, r0
900128dc:	4283      	cmp	r3, r0
900128de:	900d      	str	r0, [sp, #52]	; 0x34
900128e0:	f280 80dd 	bge.w	90012a9e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
900128e4:	428b      	cmp	r3, r1
900128e6:	da08      	bge.n	900128fa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
900128e8:	2a00      	cmp	r2, #0
900128ea:	dd06      	ble.n	900128fa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
900128ec:	1acb      	subs	r3, r1, r3
900128ee:	429a      	cmp	r2, r3
900128f0:	f2c0 80e4 	blt.w	90012abc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
900128f4:	2b00      	cmp	r3, #0
900128f6:	f300 80e2 	bgt.w	90012abe <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
900128fa:	6967      	ldr	r7, [r4, #20]
900128fc:	f10d 0850 	add.w	r8, sp, #80	; 0x50
90012900:	9b0c      	ldr	r3, [sp, #48]	; 0x30
90012902:	443b      	add	r3, r7
90012904:	461f      	mov	r7, r3
90012906:	9b0d      	ldr	r3, [sp, #52]	; 0x34
90012908:	1bdf      	subs	r7, r3, r7
9001290a:	4297      	cmp	r7, r2
9001290c:	bfa8      	it	ge
9001290e:	4617      	movge	r7, r2
90012910:	2f00      	cmp	r7, #0
90012912:	f340 8166 	ble.w	90012be2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
90012916:	9b64      	ldr	r3, [sp, #400]	; 0x190
90012918:	6829      	ldr	r1, [r5, #0]
9001291a:	f9b3 2000 	ldrsh.w	r2, [r3]
9001291e:	f9bb 3000 	ldrsh.w	r3, [fp]
90012922:	4411      	add	r1, r2
90012924:	6820      	ldr	r0, [r4, #0]
90012926:	4299      	cmp	r1, r3
90012928:	dd1a      	ble.n	90012960 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
9001292a:	f8bb 1004 	ldrh.w	r1, [fp, #4]
9001292e:	4402      	add	r2, r0
90012930:	440b      	add	r3, r1
90012932:	b21b      	sxth	r3, r3
90012934:	429a      	cmp	r2, r3
90012936:	dc13      	bgt.n	90012960 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
90012938:	9a10      	ldr	r2, [sp, #64]	; 0x40
9001293a:	a912      	add	r1, sp, #72	; 0x48
9001293c:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001293e:	9809      	ldr	r0, [sp, #36]	; 0x24
90012940:	681b      	ldr	r3, [r3, #0]
90012942:	9206      	str	r2, [sp, #24]
90012944:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
90012946:	9500      	str	r5, [sp, #0]
90012948:	9205      	str	r2, [sp, #20]
9001294a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
9001294c:	e9cd b203 	strd	fp, r2, [sp, #12]
90012950:	9a64      	ldr	r2, [sp, #400]	; 0x190
90012952:	e9cd 8201 	strd	r8, r2, [sp, #4]
90012956:	aa49      	add	r2, sp, #292	; 0x124
90012958:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
9001295c:	4623      	mov	r3, r4
9001295e:	47c8      	blx	r9
90012960:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
90012964:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
90012968:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
9001296c:	ee37 7a27 	vadd.f32	s14, s14, s15
90012970:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
90012974:	68a1      	ldr	r1, [r4, #8]
90012976:	ee77 7aa6 	vadd.f32	s15, s15, s13
9001297a:	ed94 6a08 	vldr	s12, [r4, #32]
9001297e:	edd4 6a07 	vldr	s13, [r4, #28]
90012982:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
90012986:	ee76 6a86 	vadd.f32	s13, s13, s12
9001298a:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
9001298e:	e9d4 2300 	ldrd	r2, r3, [r4]
90012992:	edc4 6a07 	vstr	s13, [r4, #28]
90012996:	441a      	add	r2, r3
90012998:	6963      	ldr	r3, [r4, #20]
9001299a:	3301      	adds	r3, #1
9001299c:	6022      	str	r2, [r4, #0]
9001299e:	6163      	str	r3, [r4, #20]
900129a0:	69a3      	ldr	r3, [r4, #24]
900129a2:	3b01      	subs	r3, #1
900129a4:	61a3      	str	r3, [r4, #24]
900129a6:	6923      	ldr	r3, [r4, #16]
900129a8:	440b      	add	r3, r1
900129aa:	68e1      	ldr	r1, [r4, #12]
900129ac:	428b      	cmp	r3, r1
900129ae:	6123      	str	r3, [r4, #16]
900129b0:	db15      	blt.n	900129de <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
900129b2:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
900129b6:	3201      	adds	r2, #1
900129b8:	1a5b      	subs	r3, r3, r1
900129ba:	ee76 6a26 	vadd.f32	s13, s12, s13
900129be:	6022      	str	r2, [r4, #0]
900129c0:	6123      	str	r3, [r4, #16]
900129c2:	edc4 6a07 	vstr	s13, [r4, #28]
900129c6:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
900129ca:	ee36 7a87 	vadd.f32	s14, s13, s14
900129ce:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
900129d2:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
900129d6:	ee77 7a27 	vadd.f32	s15, s14, s15
900129da:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
900129de:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
900129e2:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
900129e6:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
900129ea:	ee37 7a27 	vadd.f32	s14, s14, s15
900129ee:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
900129f2:	68a9      	ldr	r1, [r5, #8]
900129f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
900129f8:	ed95 6a08 	vldr	s12, [r5, #32]
900129fc:	edd5 6a07 	vldr	s13, [r5, #28]
90012a00:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
90012a04:	ee76 6a86 	vadd.f32	s13, s13, s12
90012a08:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
90012a0c:	e9d5 2300 	ldrd	r2, r3, [r5]
90012a10:	edc5 6a07 	vstr	s13, [r5, #28]
90012a14:	441a      	add	r2, r3
90012a16:	696b      	ldr	r3, [r5, #20]
90012a18:	3301      	adds	r3, #1
90012a1a:	602a      	str	r2, [r5, #0]
90012a1c:	616b      	str	r3, [r5, #20]
90012a1e:	69ab      	ldr	r3, [r5, #24]
90012a20:	3b01      	subs	r3, #1
90012a22:	61ab      	str	r3, [r5, #24]
90012a24:	692b      	ldr	r3, [r5, #16]
90012a26:	440b      	add	r3, r1
90012a28:	68e9      	ldr	r1, [r5, #12]
90012a2a:	428b      	cmp	r3, r1
90012a2c:	612b      	str	r3, [r5, #16]
90012a2e:	db15      	blt.n	90012a5c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
90012a30:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
90012a34:	3201      	adds	r2, #1
90012a36:	1a5b      	subs	r3, r3, r1
90012a38:	ee76 6a26 	vadd.f32	s13, s12, s13
90012a3c:	602a      	str	r2, [r5, #0]
90012a3e:	612b      	str	r3, [r5, #16]
90012a40:	edc5 6a07 	vstr	s13, [r5, #28]
90012a44:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
90012a48:	ee36 7a87 	vadd.f32	s14, s13, s14
90012a4c:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
90012a50:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
90012a54:	ee77 7a27 	vadd.f32	s15, s14, s15
90012a58:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
90012a5c:	3f01      	subs	r7, #1
90012a5e:	e757      	b.n	90012910 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
90012a60:	4299      	cmp	r1, r3
90012a62:	dc13      	bgt.n	90012a8c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
90012a64:	429a      	cmp	r2, r3
90012a66:	da14      	bge.n	90012a92 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
90012a68:	2502      	movs	r5, #2
90012a6a:	2703      	movs	r7, #3
90012a6c:	f04f 0800 	mov.w	r8, #0
90012a70:	46a9      	mov	r9, r5
90012a72:	f04f 0a01 	mov.w	sl, #1
90012a76:	e6ef      	b.n	90012858 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
90012a78:	2501      	movs	r5, #1
90012a7a:	2700      	movs	r7, #0
90012a7c:	46a9      	mov	r9, r5
90012a7e:	46b8      	mov	r8, r7
90012a80:	f04f 0a02 	mov.w	sl, #2
90012a84:	e6e8      	b.n	90012858 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
90012a86:	2501      	movs	r5, #1
90012a88:	2702      	movs	r7, #2
90012a8a:	e6e1      	b.n	90012850 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
90012a8c:	2500      	movs	r5, #0
90012a8e:	2701      	movs	r7, #1
90012a90:	e7f4      	b.n	90012a7c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
90012a92:	2702      	movs	r7, #2
90012a94:	2503      	movs	r5, #3
90012a96:	f04f 0900 	mov.w	r9, #0
90012a9a:	46b8      	mov	r8, r7
90012a9c:	e7e9      	b.n	90012a72 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
90012a9e:	4613      	mov	r3, r2
90012aa0:	e728      	b.n	900128f4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
90012aa2:	bf00      	nop
90012aa4:	24021c0c 	.word	0x24021c0c
90012aa8:	fffd8f01 	.word	0xfffd8f01
90012aac:	00027100 	.word	0x00027100
90012ab0:	0004e1ff 	.word	0x0004e1ff
90012ab4:	0004e1fe 	.word	0x0004e1fe
90012ab8:	24021c14 	.word	0x24021c14
90012abc:	4613      	mov	r3, r2
90012abe:	992b      	ldr	r1, [sp, #172]	; 0xac
90012ac0:	469e      	mov	lr, r3
90012ac2:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
90012ac4:	469c      	mov	ip, r3
90012ac6:	9111      	str	r1, [sp, #68]	; 0x44
90012ac8:	f04f 0900 	mov.w	r9, #0
90012acc:	eddd 4a34 	vldr	s9, [sp, #208]	; 0xd0
90012ad0:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
90012ad4:	ed9d 4a37 	vldr	s8, [sp, #220]	; 0xdc
90012ad8:	eddd 7a36 	vldr	s15, [sp, #216]	; 0xd8
90012adc:	eddd 3a31 	vldr	s7, [sp, #196]	; 0xc4
90012ae0:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
90012ae4:	ed9d 5a32 	vldr	s10, [sp, #200]	; 0xc8
90012ae8:	eddd 5a35 	vldr	s11, [sp, #212]	; 0xd4
90012aec:	ed9d 6a38 	vldr	s12, [sp, #224]	; 0xe0
90012af0:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	; 0xa4
90012af4:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	; 0xb0
90012af8:	f1bc 0f00 	cmp.w	ip, #0
90012afc:	d147      	bne.n	90012b8e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
90012afe:	eb03 0c07 	add.w	ip, r3, r7
90012b02:	1ad7      	subs	r7, r2, r3
90012b04:	f1b9 0f00 	cmp.w	r9, #0
90012b08:	d009      	beq.n	90012b1e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
90012b0a:	9029      	str	r0, [sp, #164]	; 0xa4
90012b0c:	ed8d 7a33 	vstr	s14, [sp, #204]	; 0xcc
90012b10:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
90012b14:	edcd 6a30 	vstr	s13, [sp, #192]	; 0xc0
90012b18:	912d      	str	r1, [sp, #180]	; 0xb4
90012b1a:	e9cd c72e 	strd	ip, r7, [sp, #184]	; 0xb8
90012b1e:	991b      	ldr	r1, [sp, #108]	; 0x6c
90012b20:	f04f 0800 	mov.w	r8, #0
90012b24:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
90012b28:	9111      	str	r1, [sp, #68]	; 0x44
90012b2a:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
90012b2e:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
90012b32:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
90012b36:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
90012b3a:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
90012b3e:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
90012b42:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
90012b46:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
90012b4a:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
90012b4e:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
90012b52:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
90012b56:	f1be 0f00 	cmp.w	lr, #0
90012b5a:	d031      	beq.n	90012bc0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
90012b5c:	9e11      	ldr	r6, [sp, #68]	; 0x44
90012b5e:	4450      	add	r0, sl
90012b60:	ee76 6aa4 	vadd.f32	s13, s13, s9
90012b64:	4431      	add	r1, r6
90012b66:	ee37 7a04 	vadd.f32	s14, s14, s8
90012b6a:	ee77 7aa3 	vadd.f32	s15, s15, s7
90012b6e:	4549      	cmp	r1, r9
90012b70:	db08      	blt.n	90012b84 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
90012b72:	ee77 7a85 	vadd.f32	s15, s15, s10
90012b76:	3001      	adds	r0, #1
90012b78:	ee76 6aa5 	vadd.f32	s13, s13, s11
90012b7c:	eba1 0109 	sub.w	r1, r1, r9
90012b80:	ee37 7a06 	vadd.f32	s14, s14, s12
90012b84:	f10e 3eff 	add.w	lr, lr, #4294967295
90012b88:	f04f 0801 	mov.w	r8, #1
90012b8c:	e7e3      	b.n	90012b56 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
90012b8e:	9e11      	ldr	r6, [sp, #68]	; 0x44
90012b90:	4450      	add	r0, sl
90012b92:	ee37 7a24 	vadd.f32	s14, s14, s9
90012b96:	4431      	add	r1, r6
90012b98:	ee77 7a84 	vadd.f32	s15, s15, s8
90012b9c:	ee76 6aa3 	vadd.f32	s13, s13, s7
90012ba0:	4541      	cmp	r1, r8
90012ba2:	db08      	blt.n	90012bb6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
90012ba4:	ee76 6a85 	vadd.f32	s13, s13, s10
90012ba8:	3001      	adds	r0, #1
90012baa:	ee37 7a25 	vadd.f32	s14, s14, s11
90012bae:	eba1 0108 	sub.w	r1, r1, r8
90012bb2:	ee77 7a86 	vadd.f32	s15, s15, s12
90012bb6:	f10c 3cff 	add.w	ip, ip, #4294967295
90012bba:	f04f 0901 	mov.w	r9, #1
90012bbe:	e79b      	b.n	90012af8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
90012bc0:	449c      	add	ip, r3
90012bc2:	1aff      	subs	r7, r7, r3
90012bc4:	f1b8 0f00 	cmp.w	r8, #0
90012bc8:	d009      	beq.n	90012bde <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
90012bca:	9019      	str	r0, [sp, #100]	; 0x64
90012bcc:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
90012bd0:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
90012bd4:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
90012bd8:	911d      	str	r1, [sp, #116]	; 0x74
90012bda:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
90012bde:	1ad2      	subs	r2, r2, r3
90012be0:	e68b      	b.n	900128fa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
90012be2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
90012be4:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
90012be6:	2b00      	cmp	r3, #0
90012be8:	f000 80d1 	beq.w	90012d8e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
90012bec:	ad19      	add	r5, sp, #100	; 0x64
90012bee:	ac39      	add	r4, sp, #228	; 0xe4
90012bf0:	9b64      	ldr	r3, [sp, #400]	; 0x190
90012bf2:	f8bb 0006 	ldrh.w	r0, [fp, #6]
90012bf6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
90012bfa:	930c      	str	r3, [sp, #48]	; 0x30
90012bfc:	990c      	ldr	r1, [sp, #48]	; 0x30
90012bfe:	6963      	ldr	r3, [r4, #20]
90012c00:	440b      	add	r3, r1
90012c02:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
90012c06:	4408      	add	r0, r1
90012c08:	b200      	sxth	r0, r0
90012c0a:	4283      	cmp	r3, r0
90012c0c:	900d      	str	r0, [sp, #52]	; 0x34
90012c0e:	f280 80c1 	bge.w	90012d94 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
90012c12:	428b      	cmp	r3, r1
90012c14:	da08      	bge.n	90012c28 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
90012c16:	2a00      	cmp	r2, #0
90012c18:	dd06      	ble.n	90012c28 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
90012c1a:	1acb      	subs	r3, r1, r3
90012c1c:	429a      	cmp	r2, r3
90012c1e:	f2c0 80bb 	blt.w	90012d98 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
90012c22:	2b00      	cmp	r3, #0
90012c24:	f300 80b9 	bgt.w	90012d9a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
90012c28:	6967      	ldr	r7, [r4, #20]
90012c2a:	f10d 0850 	add.w	r8, sp, #80	; 0x50
90012c2e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
90012c30:	443b      	add	r3, r7
90012c32:	461f      	mov	r7, r3
90012c34:	9b0d      	ldr	r3, [sp, #52]	; 0x34
90012c36:	1bdf      	subs	r7, r3, r7
90012c38:	4297      	cmp	r7, r2
90012c3a:	bfa8      	it	ge
90012c3c:	4617      	movge	r7, r2
90012c3e:	2f00      	cmp	r7, #0
90012c40:	f340 813c 	ble.w	90012ebc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
90012c44:	9b64      	ldr	r3, [sp, #400]	; 0x190
90012c46:	6829      	ldr	r1, [r5, #0]
90012c48:	f9b3 2000 	ldrsh.w	r2, [r3]
90012c4c:	f9bb 3000 	ldrsh.w	r3, [fp]
90012c50:	4411      	add	r1, r2
90012c52:	6820      	ldr	r0, [r4, #0]
90012c54:	4299      	cmp	r1, r3
90012c56:	dd1a      	ble.n	90012c8e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
90012c58:	f8bb 1004 	ldrh.w	r1, [fp, #4]
90012c5c:	4402      	add	r2, r0
90012c5e:	440b      	add	r3, r1
90012c60:	b21b      	sxth	r3, r3
90012c62:	429a      	cmp	r2, r3
90012c64:	dc13      	bgt.n	90012c8e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
90012c66:	9a10      	ldr	r2, [sp, #64]	; 0x40
90012c68:	a912      	add	r1, sp, #72	; 0x48
90012c6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
90012c6c:	9809      	ldr	r0, [sp, #36]	; 0x24
90012c6e:	681b      	ldr	r3, [r3, #0]
90012c70:	9206      	str	r2, [sp, #24]
90012c72:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
90012c74:	9500      	str	r5, [sp, #0]
90012c76:	9205      	str	r2, [sp, #20]
90012c78:	9a0a      	ldr	r2, [sp, #40]	; 0x28
90012c7a:	e9cd b203 	strd	fp, r2, [sp, #12]
90012c7e:	9a64      	ldr	r2, [sp, #400]	; 0x190
90012c80:	e9cd 8201 	strd	r8, r2, [sp, #4]
90012c84:	aa49      	add	r2, sp, #292	; 0x124
90012c86:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
90012c8a:	4623      	mov	r3, r4
90012c8c:	47c8      	blx	r9
90012c8e:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
90012c92:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
90012c96:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
90012c9a:	ee37 7a27 	vadd.f32	s14, s14, s15
90012c9e:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
90012ca2:	68a1      	ldr	r1, [r4, #8]
90012ca4:	ee77 7aa6 	vadd.f32	s15, s15, s13
90012ca8:	ed94 6a08 	vldr	s12, [r4, #32]
90012cac:	edd4 6a07 	vldr	s13, [r4, #28]
90012cb0:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
90012cb4:	ee76 6a86 	vadd.f32	s13, s13, s12
90012cb8:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
90012cbc:	e9d4 2300 	ldrd	r2, r3, [r4]
90012cc0:	edc4 6a07 	vstr	s13, [r4, #28]
90012cc4:	441a      	add	r2, r3
90012cc6:	6963      	ldr	r3, [r4, #20]
90012cc8:	3301      	adds	r3, #1
90012cca:	6022      	str	r2, [r4, #0]
90012ccc:	6163      	str	r3, [r4, #20]
90012cce:	69a3      	ldr	r3, [r4, #24]
90012cd0:	3b01      	subs	r3, #1
90012cd2:	61a3      	str	r3, [r4, #24]
90012cd4:	6923      	ldr	r3, [r4, #16]
90012cd6:	440b      	add	r3, r1
90012cd8:	68e1      	ldr	r1, [r4, #12]
90012cda:	428b      	cmp	r3, r1
90012cdc:	6123      	str	r3, [r4, #16]
90012cde:	db15      	blt.n	90012d0c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
90012ce0:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
90012ce4:	3201      	adds	r2, #1
90012ce6:	1a5b      	subs	r3, r3, r1
90012ce8:	ee76 6a26 	vadd.f32	s13, s12, s13
90012cec:	6022      	str	r2, [r4, #0]
90012cee:	6123      	str	r3, [r4, #16]
90012cf0:	edc4 6a07 	vstr	s13, [r4, #28]
90012cf4:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
90012cf8:	ee36 7a87 	vadd.f32	s14, s13, s14
90012cfc:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
90012d00:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
90012d04:	ee77 7a27 	vadd.f32	s15, s14, s15
90012d08:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
90012d0c:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
90012d10:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
90012d14:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
90012d18:	ee37 7a27 	vadd.f32	s14, s14, s15
90012d1c:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
90012d20:	68a9      	ldr	r1, [r5, #8]
90012d22:	ee77 7aa6 	vadd.f32	s15, s15, s13
90012d26:	ed95 6a08 	vldr	s12, [r5, #32]
90012d2a:	edd5 6a07 	vldr	s13, [r5, #28]
90012d2e:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
90012d32:	ee76 6a86 	vadd.f32	s13, s13, s12
90012d36:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
90012d3a:	e9d5 2300 	ldrd	r2, r3, [r5]
90012d3e:	edc5 6a07 	vstr	s13, [r5, #28]
90012d42:	441a      	add	r2, r3
90012d44:	696b      	ldr	r3, [r5, #20]
90012d46:	3301      	adds	r3, #1
90012d48:	602a      	str	r2, [r5, #0]
90012d4a:	616b      	str	r3, [r5, #20]
90012d4c:	69ab      	ldr	r3, [r5, #24]
90012d4e:	3b01      	subs	r3, #1
90012d50:	61ab      	str	r3, [r5, #24]
90012d52:	692b      	ldr	r3, [r5, #16]
90012d54:	440b      	add	r3, r1
90012d56:	68e9      	ldr	r1, [r5, #12]
90012d58:	428b      	cmp	r3, r1
90012d5a:	612b      	str	r3, [r5, #16]
90012d5c:	db15      	blt.n	90012d8a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
90012d5e:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
90012d62:	3201      	adds	r2, #1
90012d64:	1a5b      	subs	r3, r3, r1
90012d66:	ee76 6a26 	vadd.f32	s13, s12, s13
90012d6a:	602a      	str	r2, [r5, #0]
90012d6c:	612b      	str	r3, [r5, #16]
90012d6e:	edc5 6a07 	vstr	s13, [r5, #28]
90012d72:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
90012d76:	ee36 7a87 	vadd.f32	s14, s13, s14
90012d7a:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
90012d7e:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
90012d82:	ee77 7a27 	vadd.f32	s15, s14, s15
90012d86:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
90012d8a:	3f01      	subs	r7, #1
90012d8c:	e757      	b.n	90012c3e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
90012d8e:	ad39      	add	r5, sp, #228	; 0xe4
90012d90:	ac19      	add	r4, sp, #100	; 0x64
90012d92:	e72d      	b.n	90012bf0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
90012d94:	4613      	mov	r3, r2
90012d96:	e744      	b.n	90012c22 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
90012d98:	4613      	mov	r3, r2
90012d9a:	9e3b      	ldr	r6, [sp, #236]	; 0xec
90012d9c:	469e      	mov	lr, r3
90012d9e:	f8dd c0f8 	ldr.w	ip, [sp, #248]	; 0xf8
90012da2:	461f      	mov	r7, r3
90012da4:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
90012da8:	f04f 0900 	mov.w	r9, #0
90012dac:	eddd 4a44 	vldr	s9, [sp, #272]	; 0x110
90012db0:	eddd 7a46 	vldr	s15, [sp, #280]	; 0x118
90012db4:	ed9d 4a47 	vldr	s8, [sp, #284]	; 0x11c
90012db8:	eddd 6a40 	vldr	s13, [sp, #256]	; 0x100
90012dbc:	eddd 3a41 	vldr	s7, [sp, #260]	; 0x104
90012dc0:	993d      	ldr	r1, [sp, #244]	; 0xf4
90012dc2:	f8dd 80f0 	ldr.w	r8, [sp, #240]	; 0xf0
90012dc6:	ed9d 5a42 	vldr	s10, [sp, #264]	; 0x108
90012dca:	eddd 5a45 	vldr	s11, [sp, #276]	; 0x114
90012dce:	ed9d 6a48 	vldr	s12, [sp, #288]	; 0x120
90012dd2:	960e      	str	r6, [sp, #56]	; 0x38
90012dd4:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	; 0xe4
90012dd8:	2f00      	cmp	r7, #0
90012dda:	d146      	bne.n	90012e6a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
90012ddc:	449c      	add	ip, r3
90012dde:	1ad7      	subs	r7, r2, r3
90012de0:	f1b9 0f00 	cmp.w	r9, #0
90012de4:	d009      	beq.n	90012dfa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
90012de6:	9039      	str	r0, [sp, #228]	; 0xe4
90012de8:	913d      	str	r1, [sp, #244]	; 0xf4
90012dea:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
90012dee:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
90012df2:	edcd 7a46 	vstr	s15, [sp, #280]	; 0x118
90012df6:	e9cd c73e 	strd	ip, r7, [sp, #248]	; 0xf8
90012dfa:	991b      	ldr	r1, [sp, #108]	; 0x6c
90012dfc:	f04f 0800 	mov.w	r8, #0
90012e00:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
90012e04:	910e      	str	r1, [sp, #56]	; 0x38
90012e06:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
90012e0a:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
90012e0e:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
90012e12:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
90012e16:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
90012e1a:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
90012e1e:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
90012e22:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
90012e26:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
90012e2a:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
90012e2e:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
90012e32:	f1be 0f00 	cmp.w	lr, #0
90012e36:	d030      	beq.n	90012e9a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
90012e38:	9e0e      	ldr	r6, [sp, #56]	; 0x38
90012e3a:	4450      	add	r0, sl
90012e3c:	ee76 6aa4 	vadd.f32	s13, s13, s9
90012e40:	4431      	add	r1, r6
90012e42:	ee37 7a04 	vadd.f32	s14, s14, s8
90012e46:	ee77 7aa3 	vadd.f32	s15, s15, s7
90012e4a:	4549      	cmp	r1, r9
90012e4c:	db08      	blt.n	90012e60 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
90012e4e:	ee77 7a85 	vadd.f32	s15, s15, s10
90012e52:	3001      	adds	r0, #1
90012e54:	ee76 6aa5 	vadd.f32	s13, s13, s11
90012e58:	eba1 0109 	sub.w	r1, r1, r9
90012e5c:	ee37 7a06 	vadd.f32	s14, s14, s12
90012e60:	f10e 3eff 	add.w	lr, lr, #4294967295
90012e64:	f04f 0801 	mov.w	r8, #1
90012e68:	e7e3      	b.n	90012e32 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
90012e6a:	9e0e      	ldr	r6, [sp, #56]	; 0x38
90012e6c:	4450      	add	r0, sl
90012e6e:	ee37 7a24 	vadd.f32	s14, s14, s9
90012e72:	4431      	add	r1, r6
90012e74:	ee77 7a84 	vadd.f32	s15, s15, s8
90012e78:	ee76 6aa3 	vadd.f32	s13, s13, s7
90012e7c:	4541      	cmp	r1, r8
90012e7e:	db08      	blt.n	90012e92 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
90012e80:	ee76 6a85 	vadd.f32	s13, s13, s10
90012e84:	3001      	adds	r0, #1
90012e86:	ee37 7a25 	vadd.f32	s14, s14, s11
90012e8a:	eba1 0108 	sub.w	r1, r1, r8
90012e8e:	ee77 7a86 	vadd.f32	s15, s15, s12
90012e92:	3f01      	subs	r7, #1
90012e94:	f04f 0901 	mov.w	r9, #1
90012e98:	e79e      	b.n	90012dd8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
90012e9a:	449c      	add	ip, r3
90012e9c:	1aff      	subs	r7, r7, r3
90012e9e:	f1b8 0f00 	cmp.w	r8, #0
90012ea2:	d009      	beq.n	90012eb8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
90012ea4:	9019      	str	r0, [sp, #100]	; 0x64
90012ea6:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
90012eaa:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
90012eae:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
90012eb2:	911d      	str	r1, [sp, #116]	; 0x74
90012eb4:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
90012eb8:	1ad2      	subs	r2, r2, r3
90012eba:	e6b5      	b.n	90012c28 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
90012ebc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
90012ebe:	681b      	ldr	r3, [r3, #0]
90012ec0:	b923      	cbnz	r3, 90012ecc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
90012ec2:	4b04      	ldr	r3, [pc, #16]	; (90012ed4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
90012ec4:	6818      	ldr	r0, [r3, #0]
90012ec6:	6803      	ldr	r3, [r0, #0]
90012ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90012eca:	4798      	blx	r3
90012ecc:	b05b      	add	sp, #364	; 0x16c
90012ece:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90012ed2:	bf00      	nop
90012ed4:	24021c14 	.word	0x24021c14

90012ed8 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
90012ed8:	2b03      	cmp	r3, #3
90012eda:	d818      	bhi.n	90012f0e <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x36>
90012edc:	e8df f003 	tbb	[pc, r3]
90012ee0:	130d0602 	.word	0x130d0602
90012ee4:	f9b0 2000 	ldrsh.w	r2, [r0]
90012ee8:	1850      	adds	r0, r2, r1
90012eea:	4770      	bx	lr
90012eec:	8803      	ldrh	r3, [r0, #0]
90012eee:	8880      	ldrh	r0, [r0, #4]
90012ef0:	4418      	add	r0, r3
90012ef2:	b200      	sxth	r0, r0
90012ef4:	1a80      	subs	r0, r0, r2
90012ef6:	3801      	subs	r0, #1
90012ef8:	4770      	bx	lr
90012efa:	8803      	ldrh	r3, [r0, #0]
90012efc:	8880      	ldrh	r0, [r0, #4]
90012efe:	4418      	add	r0, r3
90012f00:	b200      	sxth	r0, r0
90012f02:	1a40      	subs	r0, r0, r1
90012f04:	e7f7      	b.n	90012ef6 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
90012f06:	f9b0 0000 	ldrsh.w	r0, [r0]
90012f0a:	4410      	add	r0, r2
90012f0c:	4770      	bx	lr
90012f0e:	2000      	movs	r0, #0
90012f10:	4770      	bx	lr

90012f12 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
90012f12:	2b03      	cmp	r3, #3
90012f14:	d817      	bhi.n	90012f46 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x34>
90012f16:	e8df f003 	tbb	[pc, r3]
90012f1a:	0602      	.short	0x0602
90012f1c:	1009      	.short	0x1009
90012f1e:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
90012f22:	1850      	adds	r0, r2, r1
90012f24:	4770      	bx	lr
90012f26:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
90012f2a:	e7fa      	b.n	90012f22 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x10>
90012f2c:	8843      	ldrh	r3, [r0, #2]
90012f2e:	88c0      	ldrh	r0, [r0, #6]
90012f30:	4418      	add	r0, r3
90012f32:	b200      	sxth	r0, r0
90012f34:	1a80      	subs	r0, r0, r2
90012f36:	3801      	subs	r0, #1
90012f38:	4770      	bx	lr
90012f3a:	8843      	ldrh	r3, [r0, #2]
90012f3c:	88c0      	ldrh	r0, [r0, #6]
90012f3e:	4418      	add	r0, r3
90012f40:	b200      	sxth	r0, r0
90012f42:	1a40      	subs	r0, r0, r1
90012f44:	e7f7      	b.n	90012f36 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
90012f46:	2000      	movs	r0, #0
90012f48:	4770      	bx	lr
	...

90012f4c <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
90012f4c:	4b01      	ldr	r3, [pc, #4]	; (90012f54 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
90012f4e:	2200      	movs	r2, #0
90012f50:	601a      	str	r2, [r3, #0]
90012f52:	4770      	bx	lr
90012f54:	24021c1c 	.word	0x24021c1c

90012f58 <_ZN8touchgfx16TouchCalibration4clzuEm>:
90012f58:	4603      	mov	r3, r0
90012f5a:	b1c8      	cbz	r0, 90012f90 <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
90012f5c:	0c02      	lsrs	r2, r0, #16
90012f5e:	0412      	lsls	r2, r2, #16
90012f60:	b9a2      	cbnz	r2, 90012f8c <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
90012f62:	0403      	lsls	r3, r0, #16
90012f64:	2010      	movs	r0, #16
90012f66:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
90012f6a:	bf04      	itt	eq
90012f6c:	021b      	lsleq	r3, r3, #8
90012f6e:	3008      	addeq	r0, #8
90012f70:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
90012f74:	bf04      	itt	eq
90012f76:	011b      	lsleq	r3, r3, #4
90012f78:	3004      	addeq	r0, #4
90012f7a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
90012f7e:	bf04      	itt	eq
90012f80:	009b      	lsleq	r3, r3, #2
90012f82:	3002      	addeq	r0, #2
90012f84:	2b00      	cmp	r3, #0
90012f86:	db04      	blt.n	90012f92 <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
90012f88:	3001      	adds	r0, #1
90012f8a:	4770      	bx	lr
90012f8c:	2000      	movs	r0, #0
90012f8e:	e7ea      	b.n	90012f66 <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
90012f90:	2020      	movs	r0, #32
90012f92:	4770      	bx	lr

90012f94 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
90012f94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90012f98:	b087      	sub	sp, #28
90012f9a:	460d      	mov	r5, r1
90012f9c:	4616      	mov	r6, r2
90012f9e:	4698      	mov	r8, r3
90012fa0:	4601      	mov	r1, r0
90012fa2:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	; 0x40
90012fa6:	b120      	cbz	r0, 90012fb2 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
90012fa8:	b11a      	cbz	r2, 90012fb2 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
90012faa:	2d1f      	cmp	r5, #31
90012fac:	d801      	bhi.n	90012fb2 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
90012fae:	2b1f      	cmp	r3, #31
90012fb0:	d904      	bls.n	90012fbc <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x28>
90012fb2:	2000      	movs	r0, #0
90012fb4:	6038      	str	r0, [r7, #0]
90012fb6:	b007      	add	sp, #28
90012fb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90012fbc:	b97d      	cbnz	r5, 90012fde <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4a>
90012fbe:	b143      	cbz	r3, 90012fd2 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x3e>
90012fc0:	4602      	mov	r2, r0
90012fc2:	462b      	mov	r3, r5
90012fc4:	4641      	mov	r1, r8
90012fc6:	4630      	mov	r0, r6
90012fc8:	e9cd 4700 	strd	r4, r7, [sp]
90012fcc:	f7ff ffe2 	bl	90012f94 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
90012fd0:	e7f1      	b.n	90012fb6 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
90012fd2:	f04f 33ff 	mov.w	r3, #4294967295
90012fd6:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
90012fda:	603b      	str	r3, [r7, #0]
90012fdc:	e7eb      	b.n	90012fb6 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
90012fde:	fa32 fa05 	lsrs.w	sl, r2, r5
90012fe2:	d106      	bne.n	90012ff2 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x5e>
90012fe4:	4346      	muls	r6, r0
90012fe6:	fbb6 f0f4 	udiv	r0, r6, r4
90012fea:	fb04 6610 	mls	r6, r4, r0, r6
90012fee:	603e      	str	r6, [r7, #0]
90012ff0:	e7e1      	b.n	90012fb6 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
90012ff2:	2201      	movs	r2, #1
90012ff4:	fa00 fb05 	lsl.w	fp, r0, r5
90012ff8:	40aa      	lsls	r2, r5
90012ffa:	fbbb f9f4 	udiv	r9, fp, r4
90012ffe:	3a01      	subs	r2, #1
90013000:	fb0a f309 	mul.w	r3, sl, r9
90013004:	fb04 b919 	mls	r9, r4, r9, fp
90013008:	4016      	ands	r6, r2
9001300a:	9303      	str	r3, [sp, #12]
9001300c:	4630      	mov	r0, r6
9001300e:	f7ff ffa3 	bl	90012f58 <_ZN8touchgfx16TouchCalibration4clzuEm>
90013012:	462b      	mov	r3, r5
90013014:	460a      	mov	r2, r1
90013016:	4601      	mov	r1, r0
90013018:	4630      	mov	r0, r6
9001301a:	e9cd 4700 	strd	r4, r7, [sp]
9001301e:	f7ff ffb9 	bl	90012f94 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
90013022:	4606      	mov	r6, r0
90013024:	4648      	mov	r0, r9
90013026:	eb05 0108 	add.w	r1, r5, r8
9001302a:	f7ff ff95 	bl	90012f58 <_ZN8touchgfx16TouchCalibration4clzuEm>
9001302e:	ab05      	add	r3, sp, #20
90013030:	464a      	mov	r2, r9
90013032:	e9cd 4300 	strd	r4, r3, [sp]
90013036:	4603      	mov	r3, r0
90013038:	4650      	mov	r0, sl
9001303a:	f7ff ffab 	bl	90012f94 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
9001303e:	6839      	ldr	r1, [r7, #0]
90013040:	9a05      	ldr	r2, [sp, #20]
90013042:	9b03      	ldr	r3, [sp, #12]
90013044:	4411      	add	r1, r2
90013046:	fbb1 f2f4 	udiv	r2, r1, r4
9001304a:	18d3      	adds	r3, r2, r3
9001304c:	fb04 1412 	mls	r4, r4, r2, r1
90013050:	441e      	add	r6, r3
90013052:	603c      	str	r4, [r7, #0]
90013054:	4430      	add	r0, r6
90013056:	e7ae      	b.n	90012fb6 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>

90013058 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
90013058:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
9001305c:	b085      	sub	sp, #20
9001305e:	f1b0 0900 	subs.w	r9, r0, #0
90013062:	461d      	mov	r5, r3
90013064:	4617      	mov	r7, r2
90013066:	9c0c      	ldr	r4, [sp, #48]	; 0x30
90013068:	bfbb      	ittet	lt
9001306a:	f1c9 0900 	rsblt	r9, r9, #0
9001306e:	f04f 36ff 	movlt.w	r6, #4294967295
90013072:	2601      	movge	r6, #1
90013074:	6823      	ldrlt	r3, [r4, #0]
90013076:	bfbc      	itt	lt
90013078:	425b      	neglt	r3, r3
9001307a:	6023      	strlt	r3, [r4, #0]
9001307c:	2a00      	cmp	r2, #0
9001307e:	da04      	bge.n	9001308a <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
90013080:	6823      	ldr	r3, [r4, #0]
90013082:	4257      	negs	r7, r2
90013084:	4276      	negs	r6, r6
90013086:	425b      	negs	r3, r3
90013088:	6023      	str	r3, [r4, #0]
9001308a:	2d00      	cmp	r5, #0
9001308c:	4638      	mov	r0, r7
9001308e:	bfba      	itte	lt
90013090:	426d      	neglt	r5, r5
90013092:	f04f 38ff 	movlt.w	r8, #4294967295
90013096:	f04f 0801 	movge.w	r8, #1
9001309a:	f7ff ff5d 	bl	90012f58 <_ZN8touchgfx16TouchCalibration4clzuEm>
9001309e:	ab03      	add	r3, sp, #12
900130a0:	463a      	mov	r2, r7
900130a2:	e9cd 5300 	strd	r5, r3, [sp]
900130a6:	4603      	mov	r3, r0
900130a8:	4648      	mov	r0, r9
900130aa:	f7ff ff73 	bl	90012f94 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
900130ae:	6823      	ldr	r3, [r4, #0]
900130b0:	9a03      	ldr	r2, [sp, #12]
900130b2:	4546      	cmp	r6, r8
900130b4:	441a      	add	r2, r3
900130b6:	fb92 f3f5 	sdiv	r3, r2, r5
900130ba:	4418      	add	r0, r3
900130bc:	fb05 2313 	mls	r3, r5, r3, r2
900130c0:	bf18      	it	ne
900130c2:	4240      	negne	r0, r0
900130c4:	1c72      	adds	r2, r6, #1
900130c6:	6023      	str	r3, [r4, #0]
900130c8:	d105      	bne.n	900130d6 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
900130ca:	2b00      	cmp	r3, #0
900130cc:	f1c3 0200 	rsb	r2, r3, #0
900130d0:	db0b      	blt.n	900130ea <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
900130d2:	6022      	str	r2, [r4, #0]
900130d4:	e006      	b.n	900130e4 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
900130d6:	2e01      	cmp	r6, #1
900130d8:	d104      	bne.n	900130e4 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
900130da:	2b00      	cmp	r3, #0
900130dc:	da02      	bge.n	900130e4 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
900130de:	442b      	add	r3, r5
900130e0:	3801      	subs	r0, #1
900130e2:	6023      	str	r3, [r4, #0]
900130e4:	b005      	add	sp, #20
900130e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
900130ea:	3801      	subs	r0, #1
900130ec:	1b52      	subs	r2, r2, r5
900130ee:	e7f0      	b.n	900130d2 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>

900130f0 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
900130f0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
900130f4:	4c1c      	ldr	r4, [pc, #112]	; (90013168 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
900130f6:	4605      	mov	r5, r0
900130f8:	6807      	ldr	r7, [r0, #0]
900130fa:	69a3      	ldr	r3, [r4, #24]
900130fc:	b92b      	cbnz	r3, 9001310a <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
900130fe:	6840      	ldr	r0, [r0, #4]
90013100:	e9c5 7000 	strd	r7, r0, [r5]
90013104:	b004      	add	sp, #16
90013106:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
9001310a:	f04f 0802 	mov.w	r8, #2
9001310e:	68a2      	ldr	r2, [r4, #8]
90013110:	ae04      	add	r6, sp, #16
90013112:	6820      	ldr	r0, [r4, #0]
90013114:	fb93 f1f8 	sdiv	r1, r3, r8
90013118:	440a      	add	r2, r1
9001311a:	69e1      	ldr	r1, [r4, #28]
9001311c:	f846 2d04 	str.w	r2, [r6, #-4]!
90013120:	463a      	mov	r2, r7
90013122:	9600      	str	r6, [sp, #0]
90013124:	f7ff ff98 	bl	90013058 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
90013128:	69a3      	ldr	r3, [r4, #24]
9001312a:	4607      	mov	r7, r0
9001312c:	686a      	ldr	r2, [r5, #4]
9001312e:	6a21      	ldr	r1, [r4, #32]
90013130:	9600      	str	r6, [sp, #0]
90013132:	6860      	ldr	r0, [r4, #4]
90013134:	f7ff ff90 	bl	90013058 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
90013138:	69a3      	ldr	r3, [r4, #24]
9001313a:	6962      	ldr	r2, [r4, #20]
9001313c:	4407      	add	r7, r0
9001313e:	6a61      	ldr	r1, [r4, #36]	; 0x24
90013140:	9600      	str	r6, [sp, #0]
90013142:	68e0      	ldr	r0, [r4, #12]
90013144:	fb93 f8f8 	sdiv	r8, r3, r8
90013148:	4442      	add	r2, r8
9001314a:	9203      	str	r2, [sp, #12]
9001314c:	682a      	ldr	r2, [r5, #0]
9001314e:	f7ff ff83 	bl	90013058 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
90013152:	4680      	mov	r8, r0
90013154:	9600      	str	r6, [sp, #0]
90013156:	69a3      	ldr	r3, [r4, #24]
90013158:	686a      	ldr	r2, [r5, #4]
9001315a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
9001315c:	6920      	ldr	r0, [r4, #16]
9001315e:	f7ff ff7b 	bl	90013058 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
90013162:	4440      	add	r0, r8
90013164:	e7cc      	b.n	90013100 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
90013166:	bf00      	nop
90013168:	24021c20 	.word	0x24021c20

9001316c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
9001316c:	4b07      	ldr	r3, [pc, #28]	; (9001318c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
9001316e:	781b      	ldrb	r3, [r3, #0]
90013170:	2b01      	cmp	r3, #1
90013172:	d109      	bne.n	90013188 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
90013174:	f9b1 3000 	ldrsh.w	r3, [r1]
90013178:	f9b0 2000 	ldrsh.w	r2, [r0]
9001317c:	8003      	strh	r3, [r0, #0]
9001317e:	4b04      	ldr	r3, [pc, #16]	; (90013190 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
90013180:	881b      	ldrh	r3, [r3, #0]
90013182:	3b01      	subs	r3, #1
90013184:	1a9b      	subs	r3, r3, r2
90013186:	800b      	strh	r3, [r1, #0]
90013188:	4770      	bx	lr
9001318a:	bf00      	nop
9001318c:	24021c0c 	.word	0x24021c0c
90013190:	24021c08 	.word	0x24021c08

90013194 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
90013194:	4b07      	ldr	r3, [pc, #28]	; (900131b4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
90013196:	b510      	push	{r4, lr}
90013198:	781b      	ldrb	r3, [r3, #0]
9001319a:	2b01      	cmp	r3, #1
9001319c:	d108      	bne.n	900131b0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
9001319e:	4b06      	ldr	r3, [pc, #24]	; (900131b8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
900131a0:	880c      	ldrh	r4, [r1, #0]
900131a2:	881b      	ldrh	r3, [r3, #0]
900131a4:	f9b0 2000 	ldrsh.w	r2, [r0]
900131a8:	3b01      	subs	r3, #1
900131aa:	1b1b      	subs	r3, r3, r4
900131ac:	8003      	strh	r3, [r0, #0]
900131ae:	800a      	strh	r2, [r1, #0]
900131b0:	bd10      	pop	{r4, pc}
900131b2:	bf00      	nop
900131b4:	24021c0c 	.word	0x24021c0c
900131b8:	24021c08 	.word	0x24021c08

900131bc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
900131bc:	4b0a      	ldr	r3, [pc, #40]	; (900131e8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
900131be:	b510      	push	{r4, lr}
900131c0:	781b      	ldrb	r3, [r3, #0]
900131c2:	2b01      	cmp	r3, #1
900131c4:	d10e      	bne.n	900131e4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
900131c6:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
900131ca:	8843      	ldrh	r3, [r0, #2]
900131cc:	f9b0 4000 	ldrsh.w	r4, [r0]
900131d0:	18ca      	adds	r2, r1, r3
900131d2:	4b06      	ldr	r3, [pc, #24]	; (900131ec <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
900131d4:	8044      	strh	r4, [r0, #2]
900131d6:	881b      	ldrh	r3, [r3, #0]
900131d8:	1a9b      	subs	r3, r3, r2
900131da:	8003      	strh	r3, [r0, #0]
900131dc:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
900131e0:	8081      	strh	r1, [r0, #4]
900131e2:	80c3      	strh	r3, [r0, #6]
900131e4:	bd10      	pop	{r4, pc}
900131e6:	bf00      	nop
900131e8:	24021c0c 	.word	0x24021c0c
900131ec:	24021c08 	.word	0x24021c08

900131f0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
900131f0:	4b08      	ldr	r3, [pc, #32]	; (90013214 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
900131f2:	781b      	ldrb	r3, [r3, #0]
900131f4:	2b01      	cmp	r3, #1
900131f6:	d10c      	bne.n	90013212 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
900131f8:	8803      	ldrh	r3, [r0, #0]
900131fa:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
900131fe:	8842      	ldrh	r2, [r0, #2]
90013200:	8002      	strh	r2, [r0, #0]
90013202:	185a      	adds	r2, r3, r1
90013204:	4b04      	ldr	r3, [pc, #16]	; (90013218 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
90013206:	881b      	ldrh	r3, [r3, #0]
90013208:	1a9b      	subs	r3, r3, r2
9001320a:	8043      	strh	r3, [r0, #2]
9001320c:	88c3      	ldrh	r3, [r0, #6]
9001320e:	80c1      	strh	r1, [r0, #6]
90013210:	8083      	strh	r3, [r0, #4]
90013212:	4770      	bx	lr
90013214:	24021c0c 	.word	0x24021c0c
90013218:	24021c08 	.word	0x24021c08

9001321c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
9001321c:	4b07      	ldr	r3, [pc, #28]	; (9001323c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
9001321e:	b510      	push	{r4, lr}
90013220:	781b      	ldrb	r3, [r3, #0]
90013222:	2b01      	cmp	r3, #1
90013224:	d108      	bne.n	90013238 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
90013226:	f9b1 3000 	ldrsh.w	r3, [r1]
9001322a:	f9b0 4000 	ldrsh.w	r4, [r0]
9001322e:	8003      	strh	r3, [r0, #0]
90013230:	8893      	ldrh	r3, [r2, #4]
90013232:	3b01      	subs	r3, #1
90013234:	1b1b      	subs	r3, r3, r4
90013236:	800b      	strh	r3, [r1, #0]
90013238:	bd10      	pop	{r4, pc}
9001323a:	bf00      	nop
9001323c:	24021c0c 	.word	0x24021c0c

90013240 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
90013240:	4b0a      	ldr	r3, [pc, #40]	; (9001326c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
90013242:	460a      	mov	r2, r1
90013244:	b510      	push	{r4, lr}
90013246:	781b      	ldrb	r3, [r3, #0]
90013248:	2b01      	cmp	r3, #1
9001324a:	d10d      	bne.n	90013268 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
9001324c:	8881      	ldrh	r1, [r0, #4]
9001324e:	8803      	ldrh	r3, [r0, #0]
90013250:	440b      	add	r3, r1
90013252:	4601      	mov	r1, r0
90013254:	3b01      	subs	r3, #1
90013256:	f821 3b02 	strh.w	r3, [r1], #2
9001325a:	f7ff ffdf 	bl	9001321c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
9001325e:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
90013262:	88c2      	ldrh	r2, [r0, #6]
90013264:	80c3      	strh	r3, [r0, #6]
90013266:	8082      	strh	r2, [r0, #4]
90013268:	bd10      	pop	{r4, pc}
9001326a:	bf00      	nop
9001326c:	24021c0c 	.word	0x24021c0c

90013270 <_ZN8touchgfx11Application19changeToStartScreenEv>:
90013270:	4770      	bx	lr
	...

90013274 <_ZN8touchgfx11Application13requestRedrawEv>:
90013274:	4b06      	ldr	r3, [pc, #24]	; (90013290 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
90013276:	2100      	movs	r1, #0
90013278:	f9b3 2000 	ldrsh.w	r2, [r3]
9001327c:	4b05      	ldr	r3, [pc, #20]	; (90013294 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
9001327e:	f8c0 1130 	str.w	r1, [r0, #304]	; 0x130
90013282:	f9b3 3000 	ldrsh.w	r3, [r3]
90013286:	f8a0 2134 	strh.w	r2, [r0, #308]	; 0x134
9001328a:	f8a0 3136 	strh.w	r3, [r0, #310]	; 0x136
9001328e:	4770      	bx	lr
90013290:	24021c08 	.word	0x24021c08
90013294:	24021c0a 	.word	0x24021c0a

90013298 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
90013298:	4b03      	ldr	r3, [pc, #12]	; (900132a8 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
9001329a:	6818      	ldr	r0, [r3, #0]
9001329c:	b110      	cbz	r0, 900132a4 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
9001329e:	6803      	ldr	r3, [r0, #0]
900132a0:	699b      	ldr	r3, [r3, #24]
900132a2:	4718      	bx	r3
900132a4:	4770      	bx	lr
900132a6:	bf00      	nop
900132a8:	24021c50 	.word	0x24021c50

900132ac <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
900132ac:	4770      	bx	lr
	...

900132b0 <_ZN8touchgfx11Application4drawEv>:
900132b0:	4b09      	ldr	r3, [pc, #36]	; (900132d8 <_ZN8touchgfx11Application4drawEv+0x28>)
900132b2:	b507      	push	{r0, r1, r2, lr}
900132b4:	f9b3 2000 	ldrsh.w	r2, [r3]
900132b8:	2100      	movs	r1, #0
900132ba:	4b08      	ldr	r3, [pc, #32]	; (900132dc <_ZN8touchgfx11Application4drawEv+0x2c>)
900132bc:	9100      	str	r1, [sp, #0]
900132be:	4669      	mov	r1, sp
900132c0:	f9b3 3000 	ldrsh.w	r3, [r3]
900132c4:	f8ad 2004 	strh.w	r2, [sp, #4]
900132c8:	f8ad 3006 	strh.w	r3, [sp, #6]
900132cc:	6803      	ldr	r3, [r0, #0]
900132ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
900132d0:	4798      	blx	r3
900132d2:	b003      	add	sp, #12
900132d4:	f85d fb04 	ldr.w	pc, [sp], #4
900132d8:	24021c08 	.word	0x24021c08
900132dc:	24021c0a 	.word	0x24021c0a

900132e0 <_ZN8touchgfx11Application10invalidateEv>:
900132e0:	4b09      	ldr	r3, [pc, #36]	; (90013308 <_ZN8touchgfx11Application10invalidateEv+0x28>)
900132e2:	b082      	sub	sp, #8
900132e4:	2100      	movs	r1, #0
900132e6:	f9b3 2000 	ldrsh.w	r2, [r3]
900132ea:	4b08      	ldr	r3, [pc, #32]	; (9001330c <_ZN8touchgfx11Application10invalidateEv+0x2c>)
900132ec:	f8ad 2004 	strh.w	r2, [sp, #4]
900132f0:	aa02      	add	r2, sp, #8
900132f2:	f9b3 3000 	ldrsh.w	r3, [r3]
900132f6:	9100      	str	r1, [sp, #0]
900132f8:	f8ad 3006 	strh.w	r3, [sp, #6]
900132fc:	6803      	ldr	r3, [r0, #0]
900132fe:	e912 0006 	ldmdb	r2, {r1, r2}
90013302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90013304:	b002      	add	sp, #8
90013306:	4718      	bx	r3
90013308:	24021c08 	.word	0x24021c08
9001330c:	24021c0a 	.word	0x24021c0a

90013310 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
90013310:	4b03      	ldr	r3, [pc, #12]	; (90013320 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
90013312:	6818      	ldr	r0, [r3, #0]
90013314:	b110      	cbz	r0, 9001331c <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
90013316:	6803      	ldr	r3, [r0, #0]
90013318:	69db      	ldr	r3, [r3, #28]
9001331a:	4718      	bx	r3
9001331c:	4770      	bx	lr
9001331e:	bf00      	nop
90013320:	24021c50 	.word	0x24021c50

90013324 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
90013324:	4b03      	ldr	r3, [pc, #12]	; (90013334 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
90013326:	6818      	ldr	r0, [r3, #0]
90013328:	b110      	cbz	r0, 90013330 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
9001332a:	6803      	ldr	r3, [r0, #0]
9001332c:	6a1b      	ldr	r3, [r3, #32]
9001332e:	4718      	bx	r3
90013330:	4770      	bx	lr
90013332:	bf00      	nop
90013334:	24021c50 	.word	0x24021c50

90013338 <_ZN8touchgfx11Application16clearCachedAreasEv>:
90013338:	2300      	movs	r3, #0
9001333a:	f8a0 30ec 	strh.w	r3, [r0, #236]	; 0xec
9001333e:	4770      	bx	lr

90013340 <_ZN8touchgfx11Application14handleKeyEventEh>:
90013340:	4b03      	ldr	r3, [pc, #12]	; (90013350 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
90013342:	6818      	ldr	r0, [r3, #0]
90013344:	b110      	cbz	r0, 9001334c <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
90013346:	6803      	ldr	r3, [r0, #0]
90013348:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9001334a:	4718      	bx	r3
9001334c:	4770      	bx	lr
9001334e:	bf00      	nop
90013350:	24021c50 	.word	0x24021c50

90013354 <_ZN8touchgfx11ApplicationD1Ev>:
90013354:	4770      	bx	lr

90013356 <_ZN8touchgfx11ApplicationD0Ev>:
90013356:	b510      	push	{r4, lr}
90013358:	4604      	mov	r4, r0
9001335a:	f44f 719e 	mov.w	r1, #316	; 0x13c
9001335e:	f010 fa7a 	bl	90023856 <_ZdlPvj>
90013362:	4620      	mov	r0, r4
90013364:	bd10      	pop	{r4, pc}

90013366 <_ZNK8touchgfx4Rect9intersectERKS0_>:
90013366:	b510      	push	{r4, lr}
90013368:	f9b1 4000 	ldrsh.w	r4, [r1]
9001336c:	888a      	ldrh	r2, [r1, #4]
9001336e:	f9b0 3000 	ldrsh.w	r3, [r0]
90013372:	4422      	add	r2, r4
90013374:	b212      	sxth	r2, r2
90013376:	4293      	cmp	r3, r2
90013378:	da15      	bge.n	900133a6 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
9001337a:	8882      	ldrh	r2, [r0, #4]
9001337c:	4413      	add	r3, r2
9001337e:	b21b      	sxth	r3, r3
90013380:	429c      	cmp	r4, r3
90013382:	da10      	bge.n	900133a6 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
90013384:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
90013388:	88c9      	ldrh	r1, [r1, #6]
9001338a:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
9001338e:	4419      	add	r1, r3
90013390:	b209      	sxth	r1, r1
90013392:	428a      	cmp	r2, r1
90013394:	da07      	bge.n	900133a6 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
90013396:	88c0      	ldrh	r0, [r0, #6]
90013398:	4410      	add	r0, r2
9001339a:	b200      	sxth	r0, r0
9001339c:	4283      	cmp	r3, r0
9001339e:	bfac      	ite	ge
900133a0:	2000      	movge	r0, #0
900133a2:	2001      	movlt	r0, #1
900133a4:	bd10      	pop	{r4, pc}
900133a6:	2000      	movs	r0, #0
900133a8:	e7fc      	b.n	900133a4 <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

900133aa <_ZN8touchgfx4Rect10restrictToEss>:
900133aa:	f9b0 3000 	ldrsh.w	r3, [r0]
900133ae:	2b00      	cmp	r3, #0
900133b0:	b510      	push	{r4, lr}
900133b2:	da04      	bge.n	900133be <_ZN8touchgfx4Rect10restrictToEss+0x14>
900133b4:	8884      	ldrh	r4, [r0, #4]
900133b6:	4423      	add	r3, r4
900133b8:	8083      	strh	r3, [r0, #4]
900133ba:	2300      	movs	r3, #0
900133bc:	8003      	strh	r3, [r0, #0]
900133be:	f9b0 4000 	ldrsh.w	r4, [r0]
900133c2:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
900133c6:	1b09      	subs	r1, r1, r4
900133c8:	428b      	cmp	r3, r1
900133ca:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
900133ce:	bfc8      	it	gt
900133d0:	8081      	strhgt	r1, [r0, #4]
900133d2:	2b00      	cmp	r3, #0
900133d4:	da04      	bge.n	900133e0 <_ZN8touchgfx4Rect10restrictToEss+0x36>
900133d6:	88c1      	ldrh	r1, [r0, #6]
900133d8:	440b      	add	r3, r1
900133da:	80c3      	strh	r3, [r0, #6]
900133dc:	2300      	movs	r3, #0
900133de:	8043      	strh	r3, [r0, #2]
900133e0:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
900133e4:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
900133e8:	1a52      	subs	r2, r2, r1
900133ea:	4293      	cmp	r3, r2
900133ec:	bfc8      	it	gt
900133ee:	80c2      	strhgt	r2, [r0, #6]
900133f0:	bd10      	pop	{r4, pc}
	...

900133f4 <_ZN8touchgfx11Application4drawERNS_4RectE>:
900133f4:	4b10      	ldr	r3, [pc, #64]	; (90013438 <_ZN8touchgfx11Application4drawERNS_4RectE+0x44>)
900133f6:	b510      	push	{r4, lr}
900133f8:	460c      	mov	r4, r1
900133fa:	f9b3 2000 	ldrsh.w	r2, [r3]
900133fe:	4b0f      	ldr	r3, [pc, #60]	; (9001343c <_ZN8touchgfx11Application4drawERNS_4RectE+0x48>)
90013400:	4620      	mov	r0, r4
90013402:	f9b3 1000 	ldrsh.w	r1, [r3]
90013406:	f7ff ffd0 	bl	900133aa <_ZN8touchgfx4Rect10restrictToEss>
9001340a:	4b0d      	ldr	r3, [pc, #52]	; (90013440 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4c>)
9001340c:	6818      	ldr	r0, [r3, #0]
9001340e:	b190      	cbz	r0, 90013436 <_ZN8touchgfx11Application4drawERNS_4RectE+0x42>
90013410:	6803      	ldr	r3, [r0, #0]
90013412:	4621      	mov	r1, r4
90013414:	689b      	ldr	r3, [r3, #8]
90013416:	4798      	blx	r3
90013418:	4b0a      	ldr	r3, [pc, #40]	; (90013444 <_ZN8touchgfx11Application4drawERNS_4RectE+0x50>)
9001341a:	6818      	ldr	r0, [r3, #0]
9001341c:	b118      	cbz	r0, 90013426 <_ZN8touchgfx11Application4drawERNS_4RectE+0x32>
9001341e:	6803      	ldr	r3, [r0, #0]
90013420:	4621      	mov	r1, r4
90013422:	689b      	ldr	r3, [r3, #8]
90013424:	4798      	blx	r3
90013426:	4b08      	ldr	r3, [pc, #32]	; (90013448 <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>)
90013428:	4621      	mov	r1, r4
9001342a:	6818      	ldr	r0, [r3, #0]
9001342c:	6803      	ldr	r3, [r0, #0]
9001342e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
90013432:	69db      	ldr	r3, [r3, #28]
90013434:	4718      	bx	r3
90013436:	bd10      	pop	{r4, pc}
90013438:	24021c0a 	.word	0x24021c0a
9001343c:	24021c08 	.word	0x24021c08
90013440:	24021c50 	.word	0x24021c50
90013444:	24021c4c 	.word	0x24021c4c
90013448:	24021c14 	.word	0x24021c14

9001344c <_ZNK8touchgfx4Rect8includesERKS0_>:
9001344c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
9001344e:	4606      	mov	r6, r0
90013450:	4608      	mov	r0, r1
90013452:	460f      	mov	r7, r1
90013454:	f7fd ff41 	bl	900112da <_ZNK8touchgfx4Rect7isEmptyEv>
90013458:	b9e8      	cbnz	r0, 90013496 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
9001345a:	f9b7 5000 	ldrsh.w	r5, [r7]
9001345e:	f9b6 4000 	ldrsh.w	r4, [r6]
90013462:	42a5      	cmp	r5, r4
90013464:	db17      	blt.n	90013496 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
90013466:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
9001346a:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
9001346e:	429a      	cmp	r2, r3
90013470:	db11      	blt.n	90013496 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
90013472:	88b9      	ldrh	r1, [r7, #4]
90013474:	440d      	add	r5, r1
90013476:	88b1      	ldrh	r1, [r6, #4]
90013478:	440c      	add	r4, r1
9001347a:	b22d      	sxth	r5, r5
9001347c:	b224      	sxth	r4, r4
9001347e:	42a5      	cmp	r5, r4
90013480:	dc09      	bgt.n	90013496 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
90013482:	88f8      	ldrh	r0, [r7, #6]
90013484:	4410      	add	r0, r2
90013486:	88f2      	ldrh	r2, [r6, #6]
90013488:	4413      	add	r3, r2
9001348a:	b200      	sxth	r0, r0
9001348c:	b21b      	sxth	r3, r3
9001348e:	4298      	cmp	r0, r3
90013490:	bfcc      	ite	gt
90013492:	2000      	movgt	r0, #0
90013494:	2001      	movle	r0, #1
90013496:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

90013498 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
90013498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
9001349a:	4604      	mov	r4, r0
9001349c:	4608      	mov	r0, r1
9001349e:	460d      	mov	r5, r1
900134a0:	f7fd ff1b 	bl	900112da <_ZNK8touchgfx4Rect7isEmptyEv>
900134a4:	b978      	cbnz	r0, 900134c6 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
900134a6:	4620      	mov	r0, r4
900134a8:	f7fd ff17 	bl	900112da <_ZNK8touchgfx4Rect7isEmptyEv>
900134ac:	f9b5 6000 	ldrsh.w	r6, [r5]
900134b0:	b150      	cbz	r0, 900134c8 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
900134b2:	8026      	strh	r6, [r4, #0]
900134b4:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
900134b8:	8063      	strh	r3, [r4, #2]
900134ba:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
900134be:	80a3      	strh	r3, [r4, #4]
900134c0:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
900134c4:	80e3      	strh	r3, [r4, #6]
900134c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
900134c8:	f9b4 1000 	ldrsh.w	r1, [r4]
900134cc:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
900134d0:	42b1      	cmp	r1, r6
900134d2:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
900134d6:	f8b5 c004 	ldrh.w	ip, [r5, #4]
900134da:	460f      	mov	r7, r1
900134dc:	88ed      	ldrh	r5, [r5, #6]
900134de:	bfa8      	it	ge
900134e0:	4637      	movge	r7, r6
900134e2:	4293      	cmp	r3, r2
900134e4:	4618      	mov	r0, r3
900134e6:	4466      	add	r6, ip
900134e8:	f8b4 c004 	ldrh.w	ip, [r4, #4]
900134ec:	bfa8      	it	ge
900134ee:	4610      	movge	r0, r2
900134f0:	442a      	add	r2, r5
900134f2:	88e5      	ldrh	r5, [r4, #6]
900134f4:	4461      	add	r1, ip
900134f6:	b236      	sxth	r6, r6
900134f8:	8027      	strh	r7, [r4, #0]
900134fa:	442b      	add	r3, r5
900134fc:	b209      	sxth	r1, r1
900134fe:	b212      	sxth	r2, r2
90013500:	8060      	strh	r0, [r4, #2]
90013502:	b21b      	sxth	r3, r3
90013504:	428e      	cmp	r6, r1
90013506:	bfac      	ite	ge
90013508:	ebc7 0106 	rsbge	r1, r7, r6
9001350c:	ebc7 0101 	rsblt	r1, r7, r1
90013510:	429a      	cmp	r2, r3
90013512:	bfac      	ite	ge
90013514:	ebc0 0202 	rsbge	r2, r0, r2
90013518:	ebc0 0203 	rsblt	r2, r0, r3
9001351c:	80a1      	strh	r1, [r4, #4]
9001351e:	80e2      	strh	r2, [r4, #6]
90013520:	e7d1      	b.n	900134c6 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

90013524 <_ZN8touchgfx11Application11getInstanceEv>:
90013524:	4b01      	ldr	r3, [pc, #4]	; (9001352c <_ZN8touchgfx11Application11getInstanceEv+0x8>)
90013526:	6818      	ldr	r0, [r3, #0]
90013528:	4770      	bx	lr
9001352a:	bf00      	nop
9001352c:	24021c60 	.word	0x24021c60

90013530 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>:
90013530:	2300      	movs	r3, #0
90013532:	b510      	push	{r4, lr}
90013534:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
90013538:	4604      	mov	r4, r0
9001353a:	f8b0 3080 	ldrh.w	r3, [r0, #128]	; 0x80
9001353e:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
90013542:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
90013546:	f8b4 20a6 	ldrh.w	r2, [r4, #166]	; 0xa6
9001354a:	429a      	cmp	r2, r3
9001354c:	d90e      	bls.n	9001356c <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x3c>
9001354e:	18e2      	adds	r2, r4, r3
90013550:	f892 2084 	ldrb.w	r2, [r2, #132]	; 0x84
90013554:	b122      	cbz	r2, 90013560 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x30>
90013556:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
9001355a:	6803      	ldr	r3, [r0, #0]
9001355c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
9001355e:	4798      	blx	r3
90013560:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
90013564:	3301      	adds	r3, #1
90013566:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
9001356a:	e7ea      	b.n	90013542 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x12>
9001356c:	bd10      	pop	{r4, pc}

9001356e <_ZN8touchgfx11Application12TimerWidgets5clearEv>:
9001356e:	2300      	movs	r3, #0
90013570:	f100 0284 	add.w	r2, r0, #132	; 0x84
90013574:	30a4      	adds	r0, #164	; 0xa4
90013576:	f820 3c24 	strh.w	r3, [r0, #-36]
9001357a:	f802 3b01 	strb.w	r3, [r2], #1
9001357e:	4282      	cmp	r2, r0
90013580:	d1fb      	bne.n	9001357a <_ZN8touchgfx11Application12TimerWidgets5clearEv+0xc>
90013582:	4770      	bx	lr

90013584 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
90013584:	b570      	push	{r4, r5, r6, lr}
90013586:	4c0b      	ldr	r4, [pc, #44]	; (900135b4 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x30>)
90013588:	4605      	mov	r5, r0
9001358a:	460e      	mov	r6, r1
9001358c:	6820      	ldr	r0, [r4, #0]
9001358e:	b110      	cbz	r0, 90013596 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x12>
90013590:	6803      	ldr	r3, [r0, #0]
90013592:	695b      	ldr	r3, [r3, #20]
90013594:	4798      	blx	r3
90013596:	1d28      	adds	r0, r5, #4
90013598:	f7ff ffe9 	bl	9001356e <_ZN8touchgfx11Application12TimerWidgets5clearEv>
9001359c:	6026      	str	r6, [r4, #0]
9001359e:	6833      	ldr	r3, [r6, #0]
900135a0:	4630      	mov	r0, r6
900135a2:	68db      	ldr	r3, [r3, #12]
900135a4:	4798      	blx	r3
900135a6:	682b      	ldr	r3, [r5, #0]
900135a8:	4628      	mov	r0, r5
900135aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
900135ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
900135b0:	4718      	bx	r3
900135b2:	bf00      	nop
900135b4:	24021c50 	.word	0x24021c50

900135b8 <_ZN8touchgfx11Application12TimerWidgets7compactEv>:
900135b8:	2300      	movs	r3, #0
900135ba:	f8b0 c080 	ldrh.w	ip, [r0, #128]	; 0x80
900135be:	f8b0 10a4 	ldrh.w	r1, [r0, #164]	; 0xa4
900135c2:	461a      	mov	r2, r3
900135c4:	b5f0      	push	{r4, r5, r6, r7, lr}
900135c6:	461c      	mov	r4, r3
900135c8:	461d      	mov	r5, r3
900135ca:	459c      	cmp	ip, r3
900135cc:	dd1a      	ble.n	90013604 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x4c>
900135ce:	18c6      	adds	r6, r0, r3
900135d0:	f896 6084 	ldrb.w	r6, [r6, #132]	; 0x84
900135d4:	b16e      	cbz	r6, 900135f2 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x3a>
900135d6:	429a      	cmp	r2, r3
900135d8:	d008      	beq.n	900135ec <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x34>
900135da:	f850 7023 	ldr.w	r7, [r0, r3, lsl #2]
900135de:	fa1f fe82 	uxth.w	lr, r2
900135e2:	f840 702e 	str.w	r7, [r0, lr, lsl #2]
900135e6:	1887      	adds	r7, r0, r2
900135e8:	f887 6084 	strb.w	r6, [r7, #132]	; 0x84
900135ec:	3201      	adds	r2, #1
900135ee:	3301      	adds	r3, #1
900135f0:	e7eb      	b.n	900135ca <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x12>
900135f2:	4299      	cmp	r1, r3
900135f4:	f8b0 60a6 	ldrh.w	r6, [r0, #166]	; 0xa6
900135f8:	bfa8      	it	ge
900135fa:	3501      	addge	r5, #1
900135fc:	429e      	cmp	r6, r3
900135fe:	bfc8      	it	gt
90013600:	3401      	addgt	r4, #1
90013602:	e7f4      	b.n	900135ee <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x36>
90013604:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	; 0xa6
90013608:	1b49      	subs	r1, r1, r5
9001360a:	1b1b      	subs	r3, r3, r4
9001360c:	f8a0 10a4 	strh.w	r1, [r0, #164]	; 0xa4
90013610:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
90013614:	f8b0 3080 	ldrh.w	r3, [r0, #128]	; 0x80
90013618:	4293      	cmp	r3, r2
9001361a:	dd03      	ble.n	90013624 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x6c>
9001361c:	3b01      	subs	r3, #1
9001361e:	f8a0 3080 	strh.w	r3, [r0, #128]	; 0x80
90013622:	e7f7      	b.n	90013614 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x5c>
90013624:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

90013628 <_ZN8touchgfx11Application15handleTickEventEv>:
90013628:	b570      	push	{r4, r5, r6, lr}
9001362a:	4d16      	ldr	r5, [pc, #88]	; (90013684 <_ZN8touchgfx11Application15handleTickEventEv+0x5c>)
9001362c:	4604      	mov	r4, r0
9001362e:	6828      	ldr	r0, [r5, #0]
90013630:	b140      	cbz	r0, 90013644 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
90013632:	7a03      	ldrb	r3, [r0, #8]
90013634:	b933      	cbnz	r3, 90013644 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
90013636:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
9001363a:	6803      	ldr	r3, [r0, #0]
9001363c:	689b      	ldr	r3, [r3, #8]
9001363e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90013642:	4718      	bx	r3
90013644:	f894 3138 	ldrb.w	r3, [r4, #312]	; 0x138
90013648:	4e0f      	ldr	r6, [pc, #60]	; (90013688 <_ZN8touchgfx11Application15handleTickEventEv+0x60>)
9001364a:	b973      	cbnz	r3, 9001366a <_ZN8touchgfx11Application15handleTickEventEv+0x42>
9001364c:	b168      	cbz	r0, 9001366a <_ZN8touchgfx11Application15handleTickEventEv+0x42>
9001364e:	7a03      	ldrb	r3, [r0, #8]
90013650:	b15b      	cbz	r3, 9001366a <_ZN8touchgfx11Application15handleTickEventEv+0x42>
90013652:	6830      	ldr	r0, [r6, #0]
90013654:	b110      	cbz	r0, 9001365c <_ZN8touchgfx11Application15handleTickEventEv+0x34>
90013656:	6803      	ldr	r3, [r0, #0]
90013658:	691b      	ldr	r3, [r3, #16]
9001365a:	4798      	blx	r3
9001365c:	6828      	ldr	r0, [r5, #0]
9001365e:	6803      	ldr	r3, [r0, #0]
90013660:	68db      	ldr	r3, [r3, #12]
90013662:	4798      	blx	r3
90013664:	2301      	movs	r3, #1
90013666:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
9001366a:	3404      	adds	r4, #4
9001366c:	4620      	mov	r0, r4
9001366e:	f7ff ff5f 	bl	90013530 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>
90013672:	4620      	mov	r0, r4
90013674:	f7ff ffa0 	bl	900135b8 <_ZN8touchgfx11Application12TimerWidgets7compactEv>
90013678:	6830      	ldr	r0, [r6, #0]
9001367a:	b110      	cbz	r0, 90013682 <_ZN8touchgfx11Application15handleTickEventEv+0x5a>
9001367c:	6803      	ldr	r3, [r0, #0]
9001367e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90013680:	e7dd      	b.n	9001363e <_ZN8touchgfx11Application15handleTickEventEv+0x16>
90013682:	bd70      	pop	{r4, r5, r6, pc}
90013684:	24021c54 	.word	0x24021c54
90013688:	24021c50 	.word	0x24021c50

9001368c <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
9001368c:	4603      	mov	r3, r0
9001368e:	f100 0140 	add.w	r1, r0, #64	; 0x40
90013692:	2200      	movs	r2, #0
90013694:	801a      	strh	r2, [r3, #0]
90013696:	3308      	adds	r3, #8
90013698:	f823 2c06 	strh.w	r2, [r3, #-6]
9001369c:	f823 2c04 	strh.w	r2, [r3, #-4]
900136a0:	f823 2c02 	strh.w	r2, [r3, #-2]
900136a4:	428b      	cmp	r3, r1
900136a6:	d1f5      	bne.n	90013694 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
900136a8:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
900136ac:	4770      	bx	lr
	...

900136b0 <_ZN8touchgfx11ApplicationC1Ev>:
900136b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
900136b2:	4b1d      	ldr	r3, [pc, #116]	; (90013728 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
900136b4:	4606      	mov	r6, r0
900136b6:	4604      	mov	r4, r0
900136b8:	2500      	movs	r5, #0
900136ba:	f846 3b04 	str.w	r3, [r6], #4
900136be:	22a8      	movs	r2, #168	; 0xa8
900136c0:	2100      	movs	r1, #0
900136c2:	4630      	mov	r0, r6
900136c4:	f010 ffec 	bl	900246a0 <memset>
900136c8:	f8a4 5084 	strh.w	r5, [r4, #132]	; 0x84
900136cc:	f104 00ac 	add.w	r0, r4, #172	; 0xac
900136d0:	4f16      	ldr	r7, [pc, #88]	; (9001372c <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
900136d2:	f7ff ffdb 	bl	9001368c <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
900136d6:	f104 00ee 	add.w	r0, r4, #238	; 0xee
900136da:	f7ff ffd7 	bl	9001368c <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
900136de:	f8a4 5130 	strh.w	r5, [r4, #304]	; 0x130
900136e2:	f8a4 5132 	strh.w	r5, [r4, #306]	; 0x132
900136e6:	f8a4 5134 	strh.w	r5, [r4, #308]	; 0x134
900136ea:	f8a4 5136 	strh.w	r5, [r4, #310]	; 0x136
900136ee:	f884 5138 	strb.w	r5, [r4, #312]	; 0x138
900136f2:	490f      	ldr	r1, [pc, #60]	; (90013730 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
900136f4:	480f      	ldr	r0, [pc, #60]	; (90013734 <_ZN8touchgfx11ApplicationC1Ev+0x84>)
900136f6:	f00f fedb 	bl	900234b0 <CRC_Lock>
900136fa:	4b0f      	ldr	r3, [pc, #60]	; (90013738 <_ZN8touchgfx11ApplicationC1Ev+0x88>)
900136fc:	b158      	cbz	r0, 90013716 <_ZN8touchgfx11ApplicationC1Ev+0x66>
900136fe:	801d      	strh	r5, [r3, #0]
90013700:	2300      	movs	r3, #0
90013702:	4a0e      	ldr	r2, [pc, #56]	; (9001373c <_ZN8touchgfx11ApplicationC1Ev+0x8c>)
90013704:	4630      	mov	r0, r6
90013706:	6013      	str	r3, [r2, #0]
90013708:	4a0d      	ldr	r2, [pc, #52]	; (90013740 <_ZN8touchgfx11ApplicationC1Ev+0x90>)
9001370a:	603b      	str	r3, [r7, #0]
9001370c:	6013      	str	r3, [r2, #0]
9001370e:	f7ff ff2e 	bl	9001356e <_ZN8touchgfx11Application12TimerWidgets5clearEv>
90013712:	4620      	mov	r0, r4
90013714:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
90013716:	f44f 6280 	mov.w	r2, #1024	; 0x400
9001371a:	2002      	movs	r0, #2
9001371c:	801a      	strh	r2, [r3, #0]
9001371e:	6038      	str	r0, [r7, #0]
90013720:	f001 fa5a 	bl	90014bd8 <_ZN8touchgfx6Screen4drawEv>
90013724:	e7ec      	b.n	90013700 <_ZN8touchgfx11ApplicationC1Ev+0x50>
90013726:	bf00      	nop
90013728:	90028de4 	.word	0x90028de4
9001372c:	24021c50 	.word	0x24021c50
90013730:	b5e8b5cd 	.word	0xb5e8b5cd
90013734:	f407a5c2 	.word	0xf407a5c2
90013738:	2400007c 	.word	0x2400007c
9001373c:	24021c60 	.word	0x24021c60
90013740:	24021c54 	.word	0x24021c54

90013744 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
90013744:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
90013748:	3b01      	subs	r3, #1
9001374a:	b29b      	uxth	r3, r3
9001374c:	428b      	cmp	r3, r1
9001374e:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
90013752:	b510      	push	{r4, lr}
90013754:	d908      	bls.n	90013768 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x24>
90013756:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
9001375a:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
9001375e:	681a      	ldr	r2, [r3, #0]
90013760:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
90013764:	685a      	ldr	r2, [r3, #4]
90013766:	6062      	str	r2, [r4, #4]
90013768:	bd10      	pop	{r4, pc}
	...

9001376c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
9001376c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90013770:	b08f      	sub	sp, #60	; 0x3c
90013772:	4b8f      	ldr	r3, [pc, #572]	; (900139b0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x244>)
90013774:	4683      	mov	fp, r0
90013776:	ac0a      	add	r4, sp, #40	; 0x28
90013778:	e884 0006 	stmia.w	r4, {r1, r2}
9001377c:	f9b3 2000 	ldrsh.w	r2, [r3]
90013780:	4620      	mov	r0, r4
90013782:	4b8c      	ldr	r3, [pc, #560]	; (900139b4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x248>)
90013784:	f9b3 1000 	ldrsh.w	r1, [r3]
90013788:	f7ff fe0f 	bl	900133aa <_ZN8touchgfx4Rect10restrictToEss>
9001378c:	4620      	mov	r0, r4
9001378e:	f7fd fda4 	bl	900112da <_ZNK8touchgfx4Rect7isEmptyEv>
90013792:	2800      	cmp	r0, #0
90013794:	d16a      	bne.n	9001386c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
90013796:	9403      	str	r4, [sp, #12]
90013798:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	; 0xec
9001379c:	f10b 03ac 	add.w	r3, fp, #172	; 0xac
900137a0:	eb0b 05c4 	add.w	r5, fp, r4, lsl #3
900137a4:	9301      	str	r3, [sp, #4]
900137a6:	35a4      	adds	r5, #164	; 0xa4
900137a8:	b15c      	cbz	r4, 900137c2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
900137aa:	4629      	mov	r1, r5
900137ac:	9803      	ldr	r0, [sp, #12]
900137ae:	f7ff fe4d 	bl	9001344c <_ZNK8touchgfx4Rect8includesERKS0_>
900137b2:	3c01      	subs	r4, #1
900137b4:	b118      	cbz	r0, 900137be <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52>
900137b6:	b2a1      	uxth	r1, r4
900137b8:	9801      	ldr	r0, [sp, #4]
900137ba:	f7ff ffc3 	bl	90013744 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
900137be:	3d08      	subs	r5, #8
900137c0:	e7f2      	b.n	900137a8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c>
900137c2:	f8bb a0ec 	ldrh.w	sl, [fp, #236]	; 0xec
900137c6:	f10a 33ff 	add.w	r3, sl, #4294967295
900137ca:	f8cd a010 	str.w	sl, [sp, #16]
900137ce:	9302      	str	r3, [sp, #8]
900137d0:	ea4f 03ca 	mov.w	r3, sl, lsl #3
900137d4:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
900137d8:	9306      	str	r3, [sp, #24]
900137da:	445c      	add	r4, fp
900137dc:	2500      	movs	r5, #0
900137de:	4626      	mov	r6, r4
900137e0:	f8cd a014 	str.w	sl, [sp, #20]
900137e4:	462f      	mov	r7, r5
900137e6:	9b05      	ldr	r3, [sp, #20]
900137e8:	2b00      	cmp	r3, #0
900137ea:	d073      	beq.n	900138d4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
900137ec:	9903      	ldr	r1, [sp, #12]
900137ee:	4630      	mov	r0, r6
900137f0:	f7ff fdb9 	bl	90013366 <_ZNK8touchgfx4Rect9intersectERKS0_>
900137f4:	b350      	cbz	r0, 9001384c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
900137f6:	f9bd e028 	ldrsh.w	lr, [sp, #40]	; 0x28
900137fa:	f9b6 c000 	ldrsh.w	ip, [r6]
900137fe:	f9bd 802a 	ldrsh.w	r8, [sp, #42]	; 0x2a
90013802:	45e6      	cmp	lr, ip
90013804:	f9b6 9002 	ldrsh.w	r9, [r6, #2]
90013808:	db33      	blt.n	90013872 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
9001380a:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
9001380e:	88b3      	ldrh	r3, [r6, #4]
90013810:	4472      	add	r2, lr
90013812:	4463      	add	r3, ip
90013814:	b212      	sxth	r2, r2
90013816:	b21b      	sxth	r3, r3
90013818:	429a      	cmp	r2, r3
9001381a:	dc2a      	bgt.n	90013872 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
9001381c:	fa1f f289 	uxth.w	r2, r9
90013820:	88f3      	ldrh	r3, [r6, #6]
90013822:	45c8      	cmp	r8, r9
90013824:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
90013828:	4413      	add	r3, r2
9001382a:	fa1f fc88 	uxth.w	ip, r8
9001382e:	b29b      	uxth	r3, r3
90013830:	fa0f fe83 	sxth.w	lr, r3
90013834:	db0f      	blt.n	90013856 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
90013836:	eba3 030c 	sub.w	r3, r3, ip
9001383a:	1ac9      	subs	r1, r1, r3
9001383c:	b209      	sxth	r1, r1
9001383e:	2900      	cmp	r1, #0
90013840:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
90013844:	dd12      	ble.n	9001386c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
90013846:	f8ad e02a 	strh.w	lr, [sp, #42]	; 0x2a
9001384a:	4605      	mov	r5, r0
9001384c:	9b05      	ldr	r3, [sp, #20]
9001384e:	3e08      	subs	r6, #8
90013850:	3b01      	subs	r3, #1
90013852:	9305      	str	r3, [sp, #20]
90013854:	e7c7      	b.n	900137e6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
90013856:	4461      	add	r1, ip
90013858:	b209      	sxth	r1, r1
9001385a:	4571      	cmp	r1, lr
9001385c:	dc38      	bgt.n	900138d0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
9001385e:	eba2 020c 	sub.w	r2, r2, ip
90013862:	b212      	sxth	r2, r2
90013864:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
90013868:	2a00      	cmp	r2, #0
9001386a:	dcee      	bgt.n	9001384a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
9001386c:	b00f      	add	sp, #60	; 0x3c
9001386e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90013872:	45c8      	cmp	r8, r9
90013874:	db2c      	blt.n	900138d0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
90013876:	88f3      	ldrh	r3, [r6, #6]
90013878:	4499      	add	r9, r3
9001387a:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
9001387e:	4498      	add	r8, r3
90013880:	fa0f f989 	sxth.w	r9, r9
90013884:	fa0f f888 	sxth.w	r8, r8
90013888:	45c1      	cmp	r9, r8
9001388a:	db21      	blt.n	900138d0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
9001388c:	fa1f f28c 	uxth.w	r2, ip
90013890:	88b3      	ldrh	r3, [r6, #4]
90013892:	45e6      	cmp	lr, ip
90013894:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
90013898:	4413      	add	r3, r2
9001389a:	fa1f f88e 	uxth.w	r8, lr
9001389e:	b29b      	uxth	r3, r3
900138a0:	fa0f f983 	sxth.w	r9, r3
900138a4:	db0a      	blt.n	900138bc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x150>
900138a6:	eba3 0308 	sub.w	r3, r3, r8
900138aa:	1ac9      	subs	r1, r1, r3
900138ac:	b209      	sxth	r1, r1
900138ae:	2900      	cmp	r1, #0
900138b0:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
900138b4:	ddda      	ble.n	9001386c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
900138b6:	f8ad 9028 	strh.w	r9, [sp, #40]	; 0x28
900138ba:	e7c6      	b.n	9001384a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
900138bc:	4441      	add	r1, r8
900138be:	b209      	sxth	r1, r1
900138c0:	4549      	cmp	r1, r9
900138c2:	dc05      	bgt.n	900138d0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
900138c4:	eba2 0208 	sub.w	r2, r2, r8
900138c8:	b212      	sxth	r2, r2
900138ca:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
900138ce:	e7cb      	b.n	90013868 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xfc>
900138d0:	4607      	mov	r7, r0
900138d2:	e7bb      	b.n	9001384c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
900138d4:	2d00      	cmp	r5, #0
900138d6:	d181      	bne.n	900137dc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x70>
900138d8:	2f00      	cmp	r7, #0
900138da:	f000 81dd 	beq.w	90013c98 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
900138de:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	; 0x28
900138e2:	f9bd 702a 	ldrsh.w	r7, [sp, #42]	; 0x2a
900138e6:	b2b3      	uxth	r3, r6
900138e8:	f8bd a02e 	ldrh.w	sl, [sp, #46]	; 0x2e
900138ec:	9305      	str	r3, [sp, #20]
900138ee:	9a05      	ldr	r2, [sp, #20]
900138f0:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
900138f4:	4413      	add	r3, r2
900138f6:	b2ba      	uxth	r2, r7
900138f8:	4492      	add	sl, r2
900138fa:	b29b      	uxth	r3, r3
900138fc:	fa1f fa8a 	uxth.w	sl, sl
90013900:	fa0f f883 	sxth.w	r8, r3
90013904:	fa0f f98a 	sxth.w	r9, sl
90013908:	e9cd 2307 	strd	r2, r3, [sp, #28]
9001390c:	9b04      	ldr	r3, [sp, #16]
9001390e:	2b00      	cmp	r3, #0
90013910:	d052      	beq.n	900139b8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24c>
90013912:	9903      	ldr	r1, [sp, #12]
90013914:	4620      	mov	r0, r4
90013916:	f7ff fd26 	bl	90013366 <_ZNK8touchgfx4Rect9intersectERKS0_>
9001391a:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
9001391e:	b1c0      	cbz	r0, 90013952 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
90013920:	f9b4 e000 	ldrsh.w	lr, [r4]
90013924:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
90013928:	4576      	cmp	r6, lr
9001392a:	dc22      	bgt.n	90013972 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
9001392c:	f8b4 c004 	ldrh.w	ip, [r4, #4]
90013930:	44f4      	add	ip, lr
90013932:	fa0f fc8c 	sxth.w	ip, ip
90013936:	45e0      	cmp	r8, ip
90013938:	db1b      	blt.n	90013972 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
9001393a:	428f      	cmp	r7, r1
9001393c:	fa1f fc81 	uxth.w	ip, r1
90013940:	88e1      	ldrh	r1, [r4, #6]
90013942:	dc0d      	bgt.n	90013960 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f4>
90013944:	ebaa 0c0c 	sub.w	ip, sl, ip
90013948:	f8a4 9002 	strh.w	r9, [r4, #2]
9001394c:	eba1 010c 	sub.w	r1, r1, ip
90013950:	80e1      	strh	r1, [r4, #6]
90013952:	4628      	mov	r0, r5
90013954:	9904      	ldr	r1, [sp, #16]
90013956:	3c08      	subs	r4, #8
90013958:	4605      	mov	r5, r0
9001395a:	3901      	subs	r1, #1
9001395c:	9104      	str	r1, [sp, #16]
9001395e:	e7d3      	b.n	90013908 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x19c>
90013960:	4461      	add	r1, ip
90013962:	b209      	sxth	r1, r1
90013964:	4549      	cmp	r1, r9
90013966:	dcf5      	bgt.n	90013954 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
90013968:	eba2 0c0c 	sub.w	ip, r2, ip
9001396c:	f8a4 c006 	strh.w	ip, [r4, #6]
90013970:	e7ef      	b.n	90013952 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
90013972:	428f      	cmp	r7, r1
90013974:	dcee      	bgt.n	90013954 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
90013976:	f8b4 c006 	ldrh.w	ip, [r4, #6]
9001397a:	4461      	add	r1, ip
9001397c:	b209      	sxth	r1, r1
9001397e:	4589      	cmp	r9, r1
90013980:	dbe8      	blt.n	90013954 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
90013982:	4576      	cmp	r6, lr
90013984:	fa1f fc8e 	uxth.w	ip, lr
90013988:	88a1      	ldrh	r1, [r4, #4]
9001398a:	dc07      	bgt.n	9001399c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x230>
9001398c:	eba3 0c0c 	sub.w	ip, r3, ip
90013990:	f8a4 8000 	strh.w	r8, [r4]
90013994:	eba1 010c 	sub.w	r1, r1, ip
90013998:	80a1      	strh	r1, [r4, #4]
9001399a:	e7da      	b.n	90013952 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
9001399c:	4461      	add	r1, ip
9001399e:	b209      	sxth	r1, r1
900139a0:	4588      	cmp	r8, r1
900139a2:	dbd7      	blt.n	90013954 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
900139a4:	9905      	ldr	r1, [sp, #20]
900139a6:	eba1 0c0c 	sub.w	ip, r1, ip
900139aa:	f8a4 c004 	strh.w	ip, [r4, #4]
900139ae:	e7d0      	b.n	90013952 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
900139b0:	24021c0a 	.word	0x24021c0a
900139b4:	24021c08 	.word	0x24021c08
900139b8:	2d00      	cmp	r5, #0
900139ba:	f000 816d 	beq.w	90013c98 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
900139be:	9b06      	ldr	r3, [sp, #24]
900139c0:	445b      	add	r3, fp
900139c2:	461c      	mov	r4, r3
900139c4:	9b02      	ldr	r3, [sp, #8]
900139c6:	3301      	adds	r3, #1
900139c8:	f000 8166 	beq.w	90013c98 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
900139cc:	f104 05a4 	add.w	r5, r4, #164	; 0xa4
900139d0:	9803      	ldr	r0, [sp, #12]
900139d2:	4629      	mov	r1, r5
900139d4:	f7ff fd3a 	bl	9001344c <_ZNK8touchgfx4Rect8includesERKS0_>
900139d8:	b120      	cbz	r0, 900139e4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x278>
900139da:	f8bd 1008 	ldrh.w	r1, [sp, #8]
900139de:	9801      	ldr	r0, [sp, #4]
900139e0:	f7ff feb0 	bl	90013744 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
900139e4:	9903      	ldr	r1, [sp, #12]
900139e6:	4628      	mov	r0, r5
900139e8:	f7ff fcbd 	bl	90013366 <_ZNK8touchgfx4Rect9intersectERKS0_>
900139ec:	2800      	cmp	r0, #0
900139ee:	f000 809c 	beq.w	90013b2a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
900139f2:	f9b4 90a4 	ldrsh.w	r9, [r4, #164]	; 0xa4
900139f6:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	; 0xa8
900139fa:	fa1f f189 	uxth.w	r1, r9
900139fe:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
90013a02:	9309      	str	r3, [sp, #36]	; 0x24
90013a04:	eb01 0c03 	add.w	ip, r1, r3
90013a08:	b283      	uxth	r3, r0
90013a0a:	4548      	cmp	r0, r9
90013a0c:	f9bd e02a 	ldrsh.w	lr, [sp, #42]	; 0x2a
90013a10:	fa1f fa8c 	uxth.w	sl, ip
90013a14:	f8bd c02c 	ldrh.w	ip, [sp, #44]	; 0x2c
90013a18:	f9b4 20a6 	ldrsh.w	r2, [r4, #166]	; 0xa6
90013a1c:	eb03 050c 	add.w	r5, r3, ip
90013a20:	b2ad      	uxth	r5, r5
90013a22:	9505      	str	r5, [sp, #20]
90013a24:	f9bd 5014 	ldrsh.w	r5, [sp, #20]
90013a28:	9504      	str	r5, [sp, #16]
90013a2a:	f8bb 50ec 	ldrh.w	r5, [fp, #236]	; 0xec
90013a2e:	f340 8099 	ble.w	90013b64 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3f8>
90013a32:	1a5b      	subs	r3, r3, r1
90013a34:	4596      	cmp	lr, r2
90013a36:	fa0f f08a 	sxth.w	r0, sl
90013a3a:	b29b      	uxth	r3, r3
90013a3c:	b21e      	sxth	r6, r3
90013a3e:	dd2e      	ble.n	90013a9e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x332>
90013a40:	9f02      	ldr	r7, [sp, #8]
90013a42:	fa1f fe8e 	uxth.w	lr, lr
90013a46:	b292      	uxth	r2, r2
90013a48:	f8bd 402e 	ldrh.w	r4, [sp, #46]	; 0x2e
90013a4c:	eb0b 08c7 	add.w	r8, fp, r7, lsl #3
90013a50:	9f04      	ldr	r7, [sp, #16]
90013a52:	ebae 0102 	sub.w	r1, lr, r2
90013a56:	44a6      	add	lr, r4
90013a58:	1a3f      	subs	r7, r7, r0
90013a5a:	f8b8 00b2 	ldrh.w	r0, [r8, #178]	; 0xb2
90013a5e:	b289      	uxth	r1, r1
90013a60:	4402      	add	r2, r0
90013a62:	fa0f fe8e 	sxth.w	lr, lr
90013a66:	b20d      	sxth	r5, r1
90013a68:	b212      	sxth	r2, r2
90013a6a:	436f      	muls	r7, r5
90013a6c:	ebae 0202 	sub.w	r2, lr, r2
90013a70:	4372      	muls	r2, r6
90013a72:	4297      	cmp	r7, r2
90013a74:	db09      	blt.n	90013a8a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x31e>
90013a76:	f8b8 20ac 	ldrh.w	r2, [r8, #172]	; 0xac
90013a7a:	f8a8 50b2 	strh.w	r5, [r8, #178]	; 0xb2
90013a7e:	449c      	add	ip, r3
90013a80:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
90013a84:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
90013a88:	e686      	b.n	90013798 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
90013a8a:	4421      	add	r1, r4
90013a8c:	f8b8 30ae 	ldrh.w	r3, [r8, #174]	; 0xae
90013a90:	f8a8 60b0 	strh.w	r6, [r8, #176]	; 0xb0
90013a94:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
90013a98:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
90013a9c:	e67c      	b.n	90013798 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
90013a9e:	9f04      	ldr	r7, [sp, #16]
90013aa0:	42b8      	cmp	r0, r7
90013aa2:	da27      	bge.n	90013af4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x388>
90013aa4:	9902      	ldr	r1, [sp, #8]
90013aa6:	1a3f      	subs	r7, r7, r0
90013aa8:	f8bd 502e 	ldrh.w	r5, [sp, #46]	; 0x2e
90013aac:	eb0b 04c1 	add.w	r4, fp, r1, lsl #3
90013ab0:	eb05 010e 	add.w	r1, r5, lr
90013ab4:	fa1f f881 	uxth.w	r8, r1
90013ab8:	f8b4 10b2 	ldrh.w	r1, [r4, #178]	; 0xb2
90013abc:	4411      	add	r1, r2
90013abe:	fa0f f988 	sxth.w	r9, r8
90013ac2:	eba2 020e 	sub.w	r2, r2, lr
90013ac6:	eba1 0108 	sub.w	r1, r1, r8
90013aca:	4372      	muls	r2, r6
90013acc:	b289      	uxth	r1, r1
90013ace:	fa0f f881 	sxth.w	r8, r1
90013ad2:	fb08 f707 	mul.w	r7, r8, r7
90013ad6:	42ba      	cmp	r2, r7
90013ad8:	dc06      	bgt.n	90013ae8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x37c>
90013ada:	f8a4 90ae 	strh.w	r9, [r4, #174]	; 0xae
90013ade:	f8a4 80b2 	strh.w	r8, [r4, #178]	; 0xb2
90013ae2:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
90013ae6:	e7ca      	b.n	90013a7e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x312>
90013ae8:	4429      	add	r1, r5
90013aea:	f8a4 60b0 	strh.w	r6, [r4, #176]	; 0xb0
90013aee:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
90013af2:	e651      	b.n	90013798 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
90013af4:	9805      	ldr	r0, [sp, #20]
90013af6:	2d06      	cmp	r5, #6
90013af8:	ebaa 0000 	sub.w	r0, sl, r0
90013afc:	b280      	uxth	r0, r0
90013afe:	fa0f fe80 	sxth.w	lr, r0
90013b02:	d817      	bhi.n	90013b34 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c8>
90013b04:	9b04      	ldr	r3, [sp, #16]
90013b06:	f9b4 10aa 	ldrsh.w	r1, [r4, #170]	; 0xaa
90013b0a:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
90013b0e:	1c6b      	adds	r3, r5, #1
90013b10:	f8a4 e0a8 	strh.w	lr, [r4, #168]	; 0xa8
90013b14:	f8ab 30ec 	strh.w	r3, [fp, #236]	; 0xec
90013b18:	9b01      	ldr	r3, [sp, #4]
90013b1a:	9801      	ldr	r0, [sp, #4]
90013b1c:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
90013b20:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
90013b24:	805a      	strh	r2, [r3, #2]
90013b26:	809e      	strh	r6, [r3, #4]
90013b28:	80d9      	strh	r1, [r3, #6]
90013b2a:	9b02      	ldr	r3, [sp, #8]
90013b2c:	3c08      	subs	r4, #8
90013b2e:	3b01      	subs	r3, #1
90013b30:	9302      	str	r3, [sp, #8]
90013b32:	e747      	b.n	900139c4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x258>
90013b34:	9a02      	ldr	r2, [sp, #8]
90013b36:	45b6      	cmp	lr, r6
90013b38:	ea4f 02c2 	mov.w	r2, r2, lsl #3
90013b3c:	db0d      	blt.n	90013b5a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ee>
90013b3e:	449c      	add	ip, r3
90013b40:	445a      	add	r2, fp
90013b42:	f8ad 9028 	strh.w	r9, [sp, #40]	; 0x28
90013b46:	fa1f fc8c 	uxth.w	ip, ip
90013b4a:	f8a2 e0b0 	strh.w	lr, [r2, #176]	; 0xb0
90013b4e:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
90013b52:	448c      	add	ip, r1
90013b54:	f8a2 c0ac 	strh.w	ip, [r2, #172]	; 0xac
90013b58:	e61e      	b.n	90013798 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
90013b5a:	445a      	add	r2, fp
90013b5c:	4484      	add	ip, r0
90013b5e:	f8a2 60b0 	strh.w	r6, [r2, #176]	; 0xb0
90013b62:	e78f      	b.n	90013a84 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
90013b64:	fa1f f18e 	uxth.w	r1, lr
90013b68:	f8bd 602e 	ldrh.w	r6, [sp, #46]	; 0x2e
90013b6c:	b293      	uxth	r3, r2
90013b6e:	4596      	cmp	lr, r2
90013b70:	eb01 0806 	add.w	r8, r1, r6
90013b74:	9306      	str	r3, [sp, #24]
90013b76:	fa1f f888 	uxth.w	r8, r8
90013b7a:	9f06      	ldr	r7, [sp, #24]
90013b7c:	fa0f f388 	sxth.w	r3, r8
90013b80:	9307      	str	r3, [sp, #28]
90013b82:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
90013b86:	443b      	add	r3, r7
90013b88:	b29b      	uxth	r3, r3
90013b8a:	9308      	str	r3, [sp, #32]
90013b8c:	da24      	bge.n	90013bd8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x46c>
90013b8e:	9905      	ldr	r1, [sp, #20]
90013b90:	eba3 0308 	sub.w	r3, r3, r8
90013b94:	eba2 020e 	sub.w	r2, r2, lr
90013b98:	eba9 0000 	sub.w	r0, r9, r0
90013b9c:	ebaa 0401 	sub.w	r4, sl, r1
90013ba0:	b29b      	uxth	r3, r3
90013ba2:	b2a4      	uxth	r4, r4
90013ba4:	b219      	sxth	r1, r3
90013ba6:	b225      	sxth	r5, r4
90013ba8:	4348      	muls	r0, r1
90013baa:	436a      	muls	r2, r5
90013bac:	4282      	cmp	r2, r0
90013bae:	9a02      	ldr	r2, [sp, #8]
90013bb0:	ea4f 02c2 	mov.w	r2, r2, lsl #3
90013bb4:	445a      	add	r2, fp
90013bb6:	dc06      	bgt.n	90013bc6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x45a>
90013bb8:	9b07      	ldr	r3, [sp, #28]
90013bba:	44a4      	add	ip, r4
90013bbc:	f8a2 10b2 	strh.w	r1, [r2, #178]	; 0xb2
90013bc0:	f8a2 30ae 	strh.w	r3, [r2, #174]	; 0xae
90013bc4:	e75e      	b.n	90013a84 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
90013bc6:	9904      	ldr	r1, [sp, #16]
90013bc8:	f8a2 50b0 	strh.w	r5, [r2, #176]	; 0xb0
90013bcc:	f8a2 10ac 	strh.w	r1, [r2, #172]	; 0xac
90013bd0:	4433      	add	r3, r6
90013bd2:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
90013bd6:	e5df      	b.n	90013798 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
90013bd8:	9f06      	ldr	r7, [sp, #24]
90013bda:	9b04      	ldr	r3, [sp, #16]
90013bdc:	1bc9      	subs	r1, r1, r7
90013bde:	fa0f f78a 	sxth.w	r7, sl
90013be2:	b289      	uxth	r1, r1
90013be4:	429f      	cmp	r7, r3
90013be6:	fa0f fe81 	sxth.w	lr, r1
90013bea:	dd23      	ble.n	90013c34 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c8>
90013bec:	9a05      	ldr	r2, [sp, #20]
90013bee:	eba9 0000 	sub.w	r0, r9, r0
90013bf2:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
90013bf6:	ebaa 0202 	sub.w	r2, sl, r2
90013bfa:	9d07      	ldr	r5, [sp, #28]
90013bfc:	fb0e f000 	mul.w	r0, lr, r0
90013c00:	b292      	uxth	r2, r2
90013c02:	eba5 0a03 	sub.w	sl, r5, r3
90013c06:	9b02      	ldr	r3, [sp, #8]
90013c08:	b214      	sxth	r4, r2
90013c0a:	00db      	lsls	r3, r3, #3
90013c0c:	fb04 fa0a 	mul.w	sl, r4, sl
90013c10:	445b      	add	r3, fp
90013c12:	4550      	cmp	r0, sl
90013c14:	db03      	blt.n	90013c1e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4b2>
90013c16:	f8a3 e0b2 	strh.w	lr, [r3, #178]	; 0xb2
90013c1a:	4494      	add	ip, r2
90013c1c:	e732      	b.n	90013a84 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
90013c1e:	9a04      	ldr	r2, [sp, #16]
90013c20:	4431      	add	r1, r6
90013c22:	f8a3 40b0 	strh.w	r4, [r3, #176]	; 0xb0
90013c26:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
90013c2a:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	; 0xae
90013c2e:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
90013c32:	e75c      	b.n	90013aee <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x382>
90013c34:	9b08      	ldr	r3, [sp, #32]
90013c36:	2d06      	cmp	r5, #6
90013c38:	eba3 0308 	sub.w	r3, r3, r8
90013c3c:	b29b      	uxth	r3, r3
90013c3e:	b218      	sxth	r0, r3
90013c40:	d813      	bhi.n	90013c6a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4fe>
90013c42:	9b07      	ldr	r3, [sp, #28]
90013c44:	f8a4 00aa 	strh.w	r0, [r4, #170]	; 0xaa
90013c48:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
90013c4c:	1c6b      	adds	r3, r5, #1
90013c4e:	9901      	ldr	r1, [sp, #4]
90013c50:	f8ab 30ec 	strh.w	r3, [fp, #236]	; 0xec
90013c54:	9b01      	ldr	r3, [sp, #4]
90013c56:	f821 9035 	strh.w	r9, [r1, r5, lsl #3]
90013c5a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
90013c5e:	805a      	strh	r2, [r3, #2]
90013c60:	9a09      	ldr	r2, [sp, #36]	; 0x24
90013c62:	f8a3 e006 	strh.w	lr, [r3, #6]
90013c66:	809a      	strh	r2, [r3, #4]
90013c68:	e75f      	b.n	90013b2a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
90013c6a:	9c02      	ldr	r4, [sp, #8]
90013c6c:	4570      	cmp	r0, lr
90013c6e:	ea4f 04c4 	mov.w	r4, r4, lsl #3
90013c72:	db0d      	blt.n	90013c90 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x524>
90013c74:	4431      	add	r1, r6
90013c76:	9b06      	ldr	r3, [sp, #24]
90013c78:	445c      	add	r4, fp
90013c7a:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
90013c7e:	b289      	uxth	r1, r1
90013c80:	f8a4 00b2 	strh.w	r0, [r4, #178]	; 0xb2
90013c84:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
90013c88:	4419      	add	r1, r3
90013c8a:	f8a4 10ae 	strh.w	r1, [r4, #174]	; 0xae
90013c8e:	e583      	b.n	90013798 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
90013c90:	445c      	add	r4, fp
90013c92:	f8a4 e0b2 	strh.w	lr, [r4, #178]	; 0xb2
90013c96:	e79b      	b.n	90013bd0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x464>
90013c98:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	; 0xec
90013c9c:	f64f 76ff 	movw	r6, #65535	; 0xffff
90013ca0:	1e65      	subs	r5, r4, #1
90013ca2:	eb0b 04c4 	add.w	r4, fp, r4, lsl #3
90013ca6:	b2ad      	uxth	r5, r5
90013ca8:	42b5      	cmp	r5, r6
90013caa:	d044      	beq.n	90013d36 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5ca>
90013cac:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
90013cb0:	f9b4 00a6 	ldrsh.w	r0, [r4, #166]	; 0xa6
90013cb4:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
90013cb8:	4282      	cmp	r2, r0
90013cba:	f9b4 70a4 	ldrsh.w	r7, [r4, #164]	; 0xa4
90013cbe:	d11f      	bne.n	90013d00 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x594>
90013cc0:	f9bd c02e 	ldrsh.w	ip, [sp, #46]	; 0x2e
90013cc4:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	; 0xaa
90013cc8:	459c      	cmp	ip, r3
90013cca:	d119      	bne.n	90013d00 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x594>
90013ccc:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	; 0xa8
90013cd0:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
90013cd4:	19d8      	adds	r0, r3, r7
90013cd6:	b200      	sxth	r0, r0
90013cd8:	4288      	cmp	r0, r1
90013cda:	d109      	bne.n	90013cf0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x584>
90013cdc:	f8ad 7028 	strh.w	r7, [sp, #40]	; 0x28
90013ce0:	4413      	add	r3, r2
90013ce2:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
90013ce6:	4629      	mov	r1, r5
90013ce8:	9801      	ldr	r0, [sp, #4]
90013cea:	f7ff fd2b 	bl	90013744 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
90013cee:	e003      	b.n	90013cf8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
90013cf0:	4411      	add	r1, r2
90013cf2:	b209      	sxth	r1, r1
90013cf4:	42b9      	cmp	r1, r7
90013cf6:	d0f3      	beq.n	90013ce0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x574>
90013cf8:	3d01      	subs	r5, #1
90013cfa:	3c08      	subs	r4, #8
90013cfc:	b2ad      	uxth	r5, r5
90013cfe:	e7d3      	b.n	90013ca8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53c>
90013d00:	42b9      	cmp	r1, r7
90013d02:	d1f9      	bne.n	90013cf8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
90013d04:	f9bd 102c 	ldrsh.w	r1, [sp, #44]	; 0x2c
90013d08:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	; 0xa8
90013d0c:	4299      	cmp	r1, r3
90013d0e:	d1f3      	bne.n	90013cf8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
90013d10:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
90013d14:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
90013d18:	181f      	adds	r7, r3, r0
90013d1a:	b23f      	sxth	r7, r7
90013d1c:	42ba      	cmp	r2, r7
90013d1e:	d105      	bne.n	90013d2c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c0>
90013d20:	f8ad 002a 	strh.w	r0, [sp, #42]	; 0x2a
90013d24:	440b      	add	r3, r1
90013d26:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
90013d2a:	e7dc      	b.n	90013ce6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x57a>
90013d2c:	440a      	add	r2, r1
90013d2e:	b212      	sxth	r2, r2
90013d30:	4290      	cmp	r0, r2
90013d32:	d1e1      	bne.n	90013cf8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
90013d34:	e7f6      	b.n	90013d24 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5b8>
90013d36:	f8bb 60ec 	ldrh.w	r6, [fp, #236]	; 0xec
90013d3a:	2e07      	cmp	r6, #7
90013d3c:	ea4f 04c6 	mov.w	r4, r6, lsl #3
90013d40:	d812      	bhi.n	90013d68 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fc>
90013d42:	1c75      	adds	r5, r6, #1
90013d44:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
90013d48:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
90013d4c:	f8ab 50ec 	strh.w	r5, [fp, #236]	; 0xec
90013d50:	9d01      	ldr	r5, [sp, #4]
90013d52:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
90013d56:	442c      	add	r4, r5
90013d58:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
90013d5c:	f825 0036 	strh.w	r0, [r5, r6, lsl #3]
90013d60:	8061      	strh	r1, [r4, #2]
90013d62:	80a2      	strh	r2, [r4, #4]
90013d64:	80e3      	strh	r3, [r4, #6]
90013d66:	e581      	b.n	9001386c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
90013d68:	f10b 03ac 	add.w	r3, fp, #172	; 0xac
90013d6c:	3e01      	subs	r6, #1
90013d6e:	445c      	add	r4, fp
90013d70:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
90013d74:	f04f 37ff 	mov.w	r7, #4294967295
90013d78:	2500      	movs	r5, #0
90013d7a:	9305      	str	r3, [sp, #20]
90013d7c:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	; 0xa8
90013d80:	1e72      	subs	r2, r6, #1
90013d82:	9302      	str	r3, [sp, #8]
90013d84:	4691      	mov	r9, r2
90013d86:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	; 0xaa
90013d8a:	9304      	str	r3, [sp, #16]
90013d8c:	f104 03a4 	add.w	r3, r4, #164	; 0xa4
90013d90:	f1b9 3fff 	cmp.w	r9, #4294967295
90013d94:	6818      	ldr	r0, [r3, #0]
90013d96:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
90013d9a:	9207      	str	r2, [sp, #28]
90013d9c:	bf16      	itet	ne
90013d9e:	9905      	ldrne	r1, [sp, #20]
90013da0:	f8dd e00c 	ldreq.w	lr, [sp, #12]
90013da4:	eb01 0ec9 	addne.w	lr, r1, r9, lsl #3
90013da8:	9306      	str	r3, [sp, #24]
90013daa:	f8be 1006 	ldrh.w	r1, [lr, #6]
90013dae:	f8be 8004 	ldrh.w	r8, [lr, #4]
90013db2:	fb18 f801 	smulbb	r8, r8, r1
90013db6:	6859      	ldr	r1, [r3, #4]
90013db8:	e8ac 0003 	stmia.w	ip!, {r0, r1}
90013dbc:	4671      	mov	r1, lr
90013dbe:	a80c      	add	r0, sp, #48	; 0x30
90013dc0:	f7ff fb6a 	bl	90013498 <_ZN8touchgfx4Rect11expandToFitERKS0_>
90013dc4:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
90013dc8:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
90013dcc:	f04f 0c08 	mov.w	ip, #8
90013dd0:	9b04      	ldr	r3, [sp, #16]
90013dd2:	9a02      	ldr	r2, [sp, #8]
90013dd4:	fb10 f001 	smulbb	r0, r0, r1
90013dd8:	fb02 8803 	mla	r8, r2, r3, r8
90013ddc:	eba0 0108 	sub.w	r1, r0, r8
90013de0:	fb90 f0fc 	sdiv	r0, r0, ip
90013de4:	4288      	cmp	r0, r1
90013de6:	dc20      	bgt.n	90013e2a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6be>
90013de8:	4551      	cmp	r1, sl
90013dea:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
90013dee:	da03      	bge.n	90013df8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x68c>
90013df0:	b1d9      	cbz	r1, 90013e2a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6be>
90013df2:	468a      	mov	sl, r1
90013df4:	464f      	mov	r7, r9
90013df6:	4635      	mov	r5, r6
90013df8:	f109 39ff 	add.w	r9, r9, #4294967295
90013dfc:	f119 0f02 	cmn.w	r9, #2
90013e00:	d1c6      	bne.n	90013d90 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x624>
90013e02:	4616      	mov	r6, r2
90013e04:	3201      	adds	r2, #1
90013e06:	f1a4 0408 	sub.w	r4, r4, #8
90013e0a:	d1b7      	bne.n	90013d7c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x610>
90013e0c:	9b01      	ldr	r3, [sp, #4]
90013e0e:	b2ac      	uxth	r4, r5
90013e10:	00ed      	lsls	r5, r5, #3
90013e12:	1958      	adds	r0, r3, r5
90013e14:	1c7b      	adds	r3, r7, #1
90013e16:	d10b      	bne.n	90013e30 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6c4>
90013e18:	4601      	mov	r1, r0
90013e1a:	9803      	ldr	r0, [sp, #12]
90013e1c:	f7ff fb3c 	bl	90013498 <_ZN8touchgfx4Rect11expandToFitERKS0_>
90013e20:	4621      	mov	r1, r4
90013e22:	9801      	ldr	r0, [sp, #4]
90013e24:	f7ff fc8e 	bl	90013744 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
90013e28:	e4b6      	b.n	90013798 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
90013e2a:	464f      	mov	r7, r9
90013e2c:	4635      	mov	r5, r6
90013e2e:	e7ed      	b.n	90013e0c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6a0>
90013e30:	9b01      	ldr	r3, [sp, #4]
90013e32:	00ff      	lsls	r7, r7, #3
90013e34:	445d      	add	r5, fp
90013e36:	19d9      	adds	r1, r3, r7
90013e38:	445f      	add	r7, fp
90013e3a:	f7ff fb2d 	bl	90013498 <_ZN8touchgfx4Rect11expandToFitERKS0_>
90013e3e:	9b03      	ldr	r3, [sp, #12]
90013e40:	cb03      	ldmia	r3!, {r0, r1}
90013e42:	9b03      	ldr	r3, [sp, #12]
90013e44:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
90013e48:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
90013e4c:	f855 0fac 	ldr.w	r0, [r5, #172]!
90013e50:	6869      	ldr	r1, [r5, #4]
90013e52:	c303      	stmia	r3!, {r0, r1}
90013e54:	e7e4      	b.n	90013e20 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6b4>
90013e56:	bf00      	nop

90013e58 <_ZN8touchgfx11Application15drawCachedAreasEv>:
90013e58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90013e5c:	f500 7698 	add.w	r6, r0, #304	; 0x130
90013e60:	b09b      	sub	sp, #108	; 0x6c
90013e62:	4604      	mov	r4, r0
90013e64:	4630      	mov	r0, r6
90013e66:	f7fd fa38 	bl	900112da <_ZNK8touchgfx4Rect7isEmptyEv>
90013e6a:	4605      	mov	r5, r0
90013e6c:	b948      	cbnz	r0, 90013e82 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2a>
90013e6e:	6823      	ldr	r3, [r4, #0]
90013e70:	4620      	mov	r0, r4
90013e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90013e74:	e896 0006 	ldmia.w	r6, {r1, r2}
90013e78:	4798      	blx	r3
90013e7a:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
90013e7e:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
90013e82:	4bc5      	ldr	r3, [pc, #788]	; (90014198 <_ZN8touchgfx11Application15drawCachedAreasEv+0x340>)
90013e84:	681b      	ldr	r3, [r3, #0]
90013e86:	2b00      	cmp	r3, #0
90013e88:	d03f      	beq.n	90013f0a <_ZN8touchgfx11Application15drawCachedAreasEv+0xb2>
90013e8a:	4dc4      	ldr	r5, [pc, #784]	; (9001419c <_ZN8touchgfx11Application15drawCachedAreasEv+0x344>)
90013e8c:	4628      	mov	r0, r5
90013e8e:	f7fd fa24 	bl	900112da <_ZNK8touchgfx4Rect7isEmptyEv>
90013e92:	4606      	mov	r6, r0
90013e94:	2800      	cmp	r0, #0
90013e96:	d138      	bne.n	90013f0a <_ZN8touchgfx11Application15drawCachedAreasEv+0xb2>
90013e98:	4628      	mov	r0, r5
90013e9a:	f7ff f98f 	bl	900131bc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
90013e9e:	6823      	ldr	r3, [r4, #0]
90013ea0:	6829      	ldr	r1, [r5, #0]
90013ea2:	4620      	mov	r0, r4
90013ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90013ea6:	686a      	ldr	r2, [r5, #4]
90013ea8:	4798      	blx	r3
90013eaa:	802e      	strh	r6, [r5, #0]
90013eac:	806e      	strh	r6, [r5, #2]
90013eae:	80ae      	strh	r6, [r5, #4]
90013eb0:	80ee      	strh	r6, [r5, #6]
90013eb2:	f10d 0824 	add.w	r8, sp, #36	; 0x24
90013eb6:	4dba      	ldr	r5, [pc, #744]	; (900141a0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x348>)
90013eb8:	4640      	mov	r0, r8
90013eba:	f7ff fbe7 	bl	9001368c <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
90013ebe:	882e      	ldrh	r6, [r5, #0]
90013ec0:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	; 0xec
90013ec4:	f104 00ac 	add.w	r0, r4, #172	; 0xac
90013ec8:	4633      	mov	r3, r6
90013eca:	42bb      	cmp	r3, r7
90013ecc:	d224      	bcs.n	90013f18 <_ZN8touchgfx11Application15drawCachedAreasEv+0xc0>
90013ece:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
90013ed2:	2907      	cmp	r1, #7
90013ed4:	d816      	bhi.n	90013f04 <_ZN8touchgfx11Application15drawCachedAreasEv+0xac>
90013ed6:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
90013eda:	f930 9033 	ldrsh.w	r9, [r0, r3, lsl #3]
90013ede:	f9b2 a002 	ldrsh.w	sl, [r2, #2]
90013ee2:	f9b2 e004 	ldrsh.w	lr, [r2, #4]
90013ee6:	f9b2 c006 	ldrsh.w	ip, [r2, #6]
90013eea:	1c4a      	adds	r2, r1, #1
90013eec:	f8ad 2064 	strh.w	r2, [sp, #100]	; 0x64
90013ef0:	eb08 02c1 	add.w	r2, r8, r1, lsl #3
90013ef4:	f828 9031 	strh.w	r9, [r8, r1, lsl #3]
90013ef8:	f8a2 a002 	strh.w	sl, [r2, #2]
90013efc:	f8a2 e004 	strh.w	lr, [r2, #4]
90013f00:	f8a2 c006 	strh.w	ip, [r2, #6]
90013f04:	3301      	adds	r3, #1
90013f06:	b29b      	uxth	r3, r3
90013f08:	e7df      	b.n	90013eca <_ZN8touchgfx11Application15drawCachedAreasEv+0x72>
90013f0a:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
90013f0e:	2b00      	cmp	r3, #0
90013f10:	d1cf      	bne.n	90013eb2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x5a>
90013f12:	b01b      	add	sp, #108	; 0x6c
90013f14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90013f18:	f8b4 312e 	ldrh.w	r3, [r4, #302]	; 0x12e
90013f1c:	42b3      	cmp	r3, r6
90013f1e:	d90c      	bls.n	90013f3a <_ZN8touchgfx11Application15drawCachedAreasEv+0xe2>
90013f20:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
90013f24:	6822      	ldr	r2, [r4, #0]
90013f26:	3601      	adds	r6, #1
90013f28:	4620      	mov	r0, r4
90013f2a:	6c17      	ldr	r7, [r2, #64]	; 0x40
90013f2c:	f8d3 10ee 	ldr.w	r1, [r3, #238]	; 0xee
90013f30:	b2b6      	uxth	r6, r6
90013f32:	f8d3 20f2 	ldr.w	r2, [r3, #242]	; 0xf2
90013f36:	47b8      	blx	r7
90013f38:	e7ee      	b.n	90013f18 <_ZN8touchgfx11Application15drawCachedAreasEv+0xc0>
90013f3a:	4a9a      	ldr	r2, [pc, #616]	; (900141a4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
90013f3c:	6813      	ldr	r3, [r2, #0]
90013f3e:	4691      	mov	r9, r2
90013f40:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
90013f44:	2b01      	cmp	r3, #1
90013f46:	f040 80e0 	bne.w	9001410a <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b2>
90013f4a:	8829      	ldrh	r1, [r5, #0]
90013f4c:	2600      	movs	r6, #0
90013f4e:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	; 0xec
90013f52:	eb04 03c1 	add.w	r3, r4, r1, lsl #3
90013f56:	33ae      	adds	r3, #174	; 0xae
90013f58:	428f      	cmp	r7, r1
90013f5a:	f103 0308 	add.w	r3, r3, #8
90013f5e:	dd0a      	ble.n	90013f76 <_ZN8touchgfx11Application15drawCachedAreasEv+0x11e>
90013f60:	f833 2c04 	ldrh.w	r2, [r3, #-4]
90013f64:	3101      	adds	r1, #1
90013f66:	f833 0c08 	ldrh.w	r0, [r3, #-8]
90013f6a:	4402      	add	r2, r0
90013f6c:	b212      	sxth	r2, r2
90013f6e:	4296      	cmp	r6, r2
90013f70:	bfb8      	it	lt
90013f72:	4616      	movlt	r6, r2
90013f74:	e7f0      	b.n	90013f58 <_ZN8touchgfx11Application15drawCachedAreasEv+0x100>
90013f76:	4b8c      	ldr	r3, [pc, #560]	; (900141a8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
90013f78:	f8df 9228 	ldr.w	r9, [pc, #552]	; 900141a4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>
90013f7c:	881b      	ldrh	r3, [r3, #0]
90013f7e:	2b0f      	cmp	r3, #15
90013f80:	bf8c      	ite	hi
90013f82:	ea4f 0bd3 	movhi.w	fp, r3, lsr #3
90013f86:	f04f 0b01 	movls.w	fp, #1
90013f8a:	2300      	movs	r3, #0
90013f8c:	e9cd 3305 	strd	r3, r3, [sp, #20]
90013f90:	f8bd 7016 	ldrh.w	r7, [sp, #22]
90013f94:	f8bd 001a 	ldrh.w	r0, [sp, #26]
90013f98:	4b82      	ldr	r3, [pc, #520]	; (900141a4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
90013f9a:	4438      	add	r0, r7
90013f9c:	b207      	sxth	r7, r0
90013f9e:	6818      	ldr	r0, [r3, #0]
90013fa0:	42b7      	cmp	r7, r6
90013fa2:	6803      	ldr	r3, [r0, #0]
90013fa4:	f280 8083 	bge.w	900140ae <_ZN8touchgfx11Application15drawCachedAreasEv+0x256>
90013fa8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
90013fac:	4798      	blx	r3
90013fae:	eb07 030b 	add.w	r3, r7, fp
90013fb2:	4298      	cmp	r0, r3
90013fb4:	da07      	bge.n	90013fc6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16e>
90013fb6:	42b0      	cmp	r0, r6
90013fb8:	da05      	bge.n	90013fc6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16e>
90013fba:	4287      	cmp	r7, r0
90013fbc:	dd6c      	ble.n	90014098 <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
90013fbe:	2f00      	cmp	r7, #0
90013fc0:	dd6a      	ble.n	90014098 <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
90013fc2:	4630      	mov	r0, r6
90013fc4:	e004      	b.n	90013fd0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x178>
90013fc6:	4287      	cmp	r7, r0
90013fc8:	dcfb      	bgt.n	90013fc2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16a>
90013fca:	42b0      	cmp	r0, r6
90013fcc:	bfa8      	it	ge
90013fce:	4630      	movge	r0, r6
90013fd0:	4b76      	ldr	r3, [pc, #472]	; (900141ac <_ZN8touchgfx11Application15drawCachedAreasEv+0x354>)
90013fd2:	1bc0      	subs	r0, r0, r7
90013fd4:	2200      	movs	r2, #0
90013fd6:	f8ad 7016 	strh.w	r7, [sp, #22]
90013fda:	f9b3 3000 	ldrsh.w	r3, [r3]
90013fde:	882f      	ldrh	r7, [r5, #0]
90013fe0:	f8ad 2014 	strh.w	r2, [sp, #20]
90013fe4:	f8ad 3018 	strh.w	r3, [sp, #24]
90013fe8:	f8ad 001a 	strh.w	r0, [sp, #26]
90013fec:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
90013ff0:	42bb      	cmp	r3, r7
90013ff2:	d9cd      	bls.n	90013f90 <_ZN8touchgfx11Application15drawCachedAreasEv+0x138>
90013ff4:	eb04 02c7 	add.w	r2, r4, r7, lsl #3
90013ff8:	ab07      	add	r3, sp, #28
90013ffa:	f852 0fac 	ldr.w	r0, [r2, #172]!
90013ffe:	6851      	ldr	r1, [r2, #4]
90014000:	c303      	stmia	r3!, {r0, r1}
90014002:	a905      	add	r1, sp, #20
90014004:	a807      	add	r0, sp, #28
90014006:	f7ff f9ae 	bl	90013366 <_ZNK8touchgfx4Rect9intersectERKS0_>
9001400a:	2800      	cmp	r0, #0
9001400c:	d04c      	beq.n	900140a8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x250>
9001400e:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
90014012:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
90014016:	f8bd a020 	ldrh.w	sl, [sp, #32]
9001401a:	4686      	mov	lr, r0
9001401c:	4290      	cmp	r0, r2
9001401e:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
90014022:	4450      	add	r0, sl
90014024:	f8bd a018 	ldrh.w	sl, [sp, #24]
90014028:	bfb8      	it	lt
9001402a:	4696      	movlt	lr, r2
9001402c:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
90014030:	4452      	add	r2, sl
90014032:	b280      	uxth	r0, r0
90014034:	4299      	cmp	r1, r3
90014036:	468c      	mov	ip, r1
90014038:	b292      	uxth	r2, r2
9001403a:	9302      	str	r3, [sp, #8]
9001403c:	bfb8      	it	lt
9001403e:	469c      	movlt	ip, r3
90014040:	b203      	sxth	r3, r0
90014042:	fa0f fa82 	sxth.w	sl, r2
90014046:	f8ad e01c 	strh.w	lr, [sp, #28]
9001404a:	f8ad c01e 	strh.w	ip, [sp, #30]
9001404e:	4553      	cmp	r3, sl
90014050:	bfb8      	it	lt
90014052:	4602      	movlt	r2, r0
90014054:	9b02      	ldr	r3, [sp, #8]
90014056:	eba2 020e 	sub.w	r2, r2, lr
9001405a:	f8ad 2020 	strh.w	r2, [sp, #32]
9001405e:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
90014062:	4411      	add	r1, r2
90014064:	f8bd 201a 	ldrh.w	r2, [sp, #26]
90014068:	4413      	add	r3, r2
9001406a:	b289      	uxth	r1, r1
9001406c:	b29b      	uxth	r3, r3
9001406e:	b208      	sxth	r0, r1
90014070:	b21a      	sxth	r2, r3
90014072:	4290      	cmp	r0, r2
90014074:	bfb8      	it	lt
90014076:	460b      	movlt	r3, r1
90014078:	eba3 030c 	sub.w	r3, r3, ip
9001407c:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
90014080:	a807      	add	r0, sp, #28
90014082:	f7fd f92a 	bl	900112da <_ZNK8touchgfx4Rect7isEmptyEv>
90014086:	b920      	cbnz	r0, 90014092 <_ZN8touchgfx11Application15drawCachedAreasEv+0x23a>
90014088:	6823      	ldr	r3, [r4, #0]
9001408a:	a907      	add	r1, sp, #28
9001408c:	4620      	mov	r0, r4
9001408e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
90014090:	4798      	blx	r3
90014092:	3701      	adds	r7, #1
90014094:	b2bf      	uxth	r7, r7
90014096:	e7a9      	b.n	90013fec <_ZN8touchgfx11Application15drawCachedAreasEv+0x194>
90014098:	f8d9 0000 	ldr.w	r0, [r9]
9001409c:	2101      	movs	r1, #1
9001409e:	6803      	ldr	r3, [r0, #0]
900140a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
900140a4:	4798      	blx	r3
900140a6:	e773      	b.n	90013f90 <_ZN8touchgfx11Application15drawCachedAreasEv+0x138>
900140a8:	e9cd 0007 	strd	r0, r0, [sp, #28]
900140ac:	e7e8      	b.n	90014080 <_ZN8touchgfx11Application15drawCachedAreasEv+0x228>
900140ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
900140b0:	4798      	blx	r3
900140b2:	4b3f      	ldr	r3, [pc, #252]	; (900141b0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>)
900140b4:	781b      	ldrb	r3, [r3, #0]
900140b6:	2b00      	cmp	r3, #0
900140b8:	f43f af2b 	beq.w	90013f12 <_ZN8touchgfx11Application15drawCachedAreasEv+0xba>
900140bc:	2300      	movs	r3, #0
900140be:	f104 00ee 	add.w	r0, r4, #238	; 0xee
900140c2:	f8a4 312e 	strh.w	r3, [r4, #302]	; 0x12e
900140c6:	882b      	ldrh	r3, [r5, #0]
900140c8:	f8bd 5064 	ldrh.w	r5, [sp, #100]	; 0x64
900140cc:	42ab      	cmp	r3, r5
900140ce:	f4bf af20 	bcs.w	90013f12 <_ZN8touchgfx11Application15drawCachedAreasEv+0xba>
900140d2:	f8b4 112e 	ldrh.w	r1, [r4, #302]	; 0x12e
900140d6:	2907      	cmp	r1, #7
900140d8:	d814      	bhi.n	90014104 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ac>
900140da:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
900140de:	f938 e033 	ldrsh.w	lr, [r8, r3, lsl #3]
900140e2:	f9b2 c002 	ldrsh.w	ip, [r2, #2]
900140e6:	f9b2 7004 	ldrsh.w	r7, [r2, #4]
900140ea:	f9b2 6006 	ldrsh.w	r6, [r2, #6]
900140ee:	1c4a      	adds	r2, r1, #1
900140f0:	f8a4 212e 	strh.w	r2, [r4, #302]	; 0x12e
900140f4:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
900140f8:	f820 e031 	strh.w	lr, [r0, r1, lsl #3]
900140fc:	f8a2 c002 	strh.w	ip, [r2, #2]
90014100:	8097      	strh	r7, [r2, #4]
90014102:	80d6      	strh	r6, [r2, #6]
90014104:	3301      	adds	r3, #1
90014106:	b29b      	uxth	r3, r3
90014108:	e7e0      	b.n	900140cc <_ZN8touchgfx11Application15drawCachedAreasEv+0x274>
9001410a:	2b02      	cmp	r3, #2
9001410c:	f040 8133 	bne.w	90014376 <_ZN8touchgfx11Application15drawCachedAreasEv+0x51e>
90014110:	4b28      	ldr	r3, [pc, #160]	; (900141b4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>)
90014112:	f104 0aac 	add.w	sl, r4, #172	; 0xac
90014116:	781b      	ldrb	r3, [r3, #0]
90014118:	2b01      	cmp	r3, #1
9001411a:	f000 8098 	beq.w	9001424e <_ZN8touchgfx11Application15drawCachedAreasEv+0x3f6>
9001411e:	882a      	ldrh	r2, [r5, #0]
90014120:	f8b4 10ec 	ldrh.w	r1, [r4, #236]	; 0xec
90014124:	3201      	adds	r2, #1
90014126:	b292      	uxth	r2, r2
90014128:	2900      	cmp	r1, #0
9001412a:	d0c2      	beq.n	900140b2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
9001412c:	f8b4 60ae 	ldrh.w	r6, [r4, #174]	; 0xae
90014130:	4694      	mov	ip, r2
90014132:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	; 0xb2
90014136:	f04f 0900 	mov.w	r9, #0
9001413a:	441e      	add	r6, r3
9001413c:	b236      	sxth	r6, r6
9001413e:	fa1f f38c 	uxth.w	r3, ip
90014142:	ea4f 07c9 	mov.w	r7, r9, lsl #3
90014146:	4299      	cmp	r1, r3
90014148:	f240 80be 	bls.w	900142c8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x470>
9001414c:	4427      	add	r7, r4
9001414e:	eb04 0ecc 	add.w	lr, r4, ip, lsl #3
90014152:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	; 0xae
90014156:	f9be 00ae 	ldrsh.w	r0, [lr, #174]	; 0xae
9001415a:	4283      	cmp	r3, r0
9001415c:	f340 80a0 	ble.w	900142a0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x448>
90014160:	f8be 60b2 	ldrh.w	r6, [lr, #178]	; 0xb2
90014164:	46e1      	mov	r9, ip
90014166:	4406      	add	r6, r0
90014168:	b236      	sxth	r6, r6
9001416a:	429e      	cmp	r6, r3
9001416c:	bfa8      	it	ge
9001416e:	461e      	movge	r6, r3
90014170:	f10c 0c01 	add.w	ip, ip, #1
90014174:	e7e3      	b.n	9001413e <_ZN8touchgfx11Application15drawCachedAreasEv+0x2e6>
90014176:	d10a      	bne.n	9001418e <_ZN8touchgfx11Application15drawCachedAreasEv+0x336>
90014178:	4562      	cmp	r2, ip
9001417a:	f9b6 00b2 	ldrsh.w	r0, [r6, #178]	; 0xb2
9001417e:	f9be 10b2 	ldrsh.w	r1, [lr, #178]	; 0xb2
90014182:	bfb8      	it	lt
90014184:	4662      	movlt	r2, ip
90014186:	4288      	cmp	r0, r1
90014188:	bfb8      	it	lt
9001418a:	461f      	movlt	r7, r3
9001418c:	e086      	b.n	9001429c <_ZN8touchgfx11Application15drawCachedAreasEv+0x444>
9001418e:	428a      	cmp	r2, r1
90014190:	bfb8      	it	lt
90014192:	460a      	movlt	r2, r1
90014194:	e082      	b.n	9001429c <_ZN8touchgfx11Application15drawCachedAreasEv+0x444>
90014196:	bf00      	nop
90014198:	24021c4c 	.word	0x24021c4c
9001419c:	24021c58 	.word	0x24021c58
900141a0:	2400007c 	.word	0x2400007c
900141a4:	24021c14 	.word	0x24021c14
900141a8:	24021c0a 	.word	0x24021c0a
900141ac:	24021c08 	.word	0x24021c08
900141b0:	24021c12 	.word	0x24021c12
900141b4:	24021c0c 	.word	0x24021c0c
900141b8:	19a1      	adds	r1, r4, r6
900141ba:	ab07      	add	r3, sp, #28
900141bc:	f851 0fac 	ldr.w	r0, [r1, #172]!
900141c0:	6849      	ldr	r1, [r1, #4]
900141c2:	c303      	stmia	r3!, {r0, r1}
900141c4:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
900141c8:	a807      	add	r0, sp, #28
900141ca:	f8bd 101c 	ldrh.w	r1, [sp, #28]
900141ce:	2b13      	cmp	r3, #19
900141d0:	440b      	add	r3, r1
900141d2:	bfd8      	it	le
900141d4:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
900141d8:	1a9b      	subs	r3, r3, r2
900141da:	f8ad 201c 	strh.w	r2, [sp, #28]
900141de:	f8ad 3020 	strh.w	r3, [sp, #32]
900141e2:	f7ff f805 	bl	900131f0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
900141e6:	a807      	add	r0, sp, #28
900141e8:	f7fd f877 	bl	900112da <_ZNK8touchgfx4Rect7isEmptyEv>
900141ec:	bb78      	cbnz	r0, 9001424e <_ZN8touchgfx11Application15drawCachedAreasEv+0x3f6>
900141ee:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
900141f2:	4426      	add	r6, r4
900141f4:	f8d9 0000 	ldr.w	r0, [r9]
900141f8:	f1bc 0f14 	cmp.w	ip, #20
900141fc:	f8bd 3020 	ldrh.w	r3, [sp, #32]
90014200:	f8d0 e000 	ldr.w	lr, [r0]
90014204:	bfa8      	it	ge
90014206:	f04f 0c14 	movge.w	ip, #20
9001420a:	f8bd 201e 	ldrh.w	r2, [sp, #30]
9001420e:	f8bd 101c 	ldrh.w	r1, [sp, #28]
90014212:	fa1f fc8c 	uxth.w	ip, ip
90014216:	f8cd c000 	str.w	ip, [sp]
9001421a:	f8de b090 	ldr.w	fp, [lr, #144]	; 0x90
9001421e:	47d8      	blx	fp
90014220:	4683      	mov	fp, r0
90014222:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
90014226:	a807      	add	r0, sp, #28
90014228:	f7fe ffc8 	bl	900131bc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
9001422c:	6823      	ldr	r3, [r4, #0]
9001422e:	4620      	mov	r0, r4
90014230:	a907      	add	r1, sp, #28
90014232:	6c9b      	ldr	r3, [r3, #72]	; 0x48
90014234:	4798      	blx	r3
90014236:	f8b6 00b0 	ldrh.w	r0, [r6, #176]	; 0xb0
9001423a:	eba0 000b 	sub.w	r0, r0, fp
9001423e:	b200      	sxth	r0, r0
90014240:	f8a6 00b0 	strh.w	r0, [r6, #176]	; 0xb0
90014244:	b918      	cbnz	r0, 9001424e <_ZN8touchgfx11Application15drawCachedAreasEv+0x3f6>
90014246:	b2b9      	uxth	r1, r7
90014248:	4650      	mov	r0, sl
9001424a:	f7ff fa7b 	bl	90013744 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
9001424e:	f8b4 b0ec 	ldrh.w	fp, [r4, #236]	; 0xec
90014252:	f1bb 0f00 	cmp.w	fp, #0
90014256:	f43f af2c 	beq.w	900140b2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
9001425a:	882b      	ldrh	r3, [r5, #0]
9001425c:	2700      	movs	r7, #0
9001425e:	f9b4 20ac 	ldrsh.w	r2, [r4, #172]	; 0xac
90014262:	3301      	adds	r3, #1
90014264:	b29b      	uxth	r3, r3
90014266:	b299      	uxth	r1, r3
90014268:	00fe      	lsls	r6, r7, #3
9001426a:	458b      	cmp	fp, r1
9001426c:	d9a4      	bls.n	900141b8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x360>
9001426e:	4426      	add	r6, r4
90014270:	eb04 0ec3 	add.w	lr, r4, r3, lsl #3
90014274:	f8b6 10ac 	ldrh.w	r1, [r6, #172]	; 0xac
90014278:	f8b6 00b0 	ldrh.w	r0, [r6, #176]	; 0xb0
9001427c:	f9be c0ac 	ldrsh.w	ip, [lr, #172]	; 0xac
90014280:	4408      	add	r0, r1
90014282:	f8be 10b0 	ldrh.w	r1, [lr, #176]	; 0xb0
90014286:	4461      	add	r1, ip
90014288:	b200      	sxth	r0, r0
9001428a:	b209      	sxth	r1, r1
9001428c:	4288      	cmp	r0, r1
9001428e:	f6bf af72 	bge.w	90014176 <_ZN8touchgfx11Application15drawCachedAreasEv+0x31e>
90014292:	4584      	cmp	ip, r0
90014294:	4662      	mov	r2, ip
90014296:	461f      	mov	r7, r3
90014298:	bfb8      	it	lt
9001429a:	4602      	movlt	r2, r0
9001429c:	3301      	adds	r3, #1
9001429e:	e7e2      	b.n	90014266 <_ZN8touchgfx11Application15drawCachedAreasEv+0x40e>
900142a0:	d10e      	bne.n	900142c0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x468>
900142a2:	f9be 00b0 	ldrsh.w	r0, [lr, #176]	; 0xb0
900142a6:	f8be e0b2 	ldrh.w	lr, [lr, #178]	; 0xb2
900142aa:	f9b7 70b0 	ldrsh.w	r7, [r7, #176]	; 0xb0
900142ae:	4473      	add	r3, lr
900142b0:	b21b      	sxth	r3, r3
900142b2:	429e      	cmp	r6, r3
900142b4:	bfa8      	it	ge
900142b6:	461e      	movge	r6, r3
900142b8:	4287      	cmp	r7, r0
900142ba:	bfb8      	it	lt
900142bc:	46e1      	movlt	r9, ip
900142be:	e757      	b.n	90014170 <_ZN8touchgfx11Application15drawCachedAreasEv+0x318>
900142c0:	4286      	cmp	r6, r0
900142c2:	bfa8      	it	ge
900142c4:	4606      	movge	r6, r0
900142c6:	e753      	b.n	90014170 <_ZN8touchgfx11Application15drawCachedAreasEv+0x318>
900142c8:	eb0a 0007 	add.w	r0, sl, r7
900142cc:	4427      	add	r7, r4
900142ce:	f9b7 b0b2 	ldrsh.w	fp, [r7, #178]	; 0xb2
900142d2:	f1bb 0f13 	cmp.w	fp, #19
900142d6:	bfdc      	itt	le
900142d8:	f8b7 60ae 	ldrhle.w	r6, [r7, #174]	; 0xae
900142dc:	445e      	addle	r6, fp
900142de:	e9cd 2102 	strd	r2, r1, [sp, #8]
900142e2:	bfd8      	it	le
900142e4:	b236      	sxthle	r6, r6
900142e6:	f7fc fff8 	bl	900112da <_ZNK8touchgfx4Rect7isEmptyEv>
900142ea:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
900142ee:	2800      	cmp	r0, #0
900142f0:	f47f af1a 	bne.w	90014128 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2d0>
900142f4:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	; 0xae
900142f8:	fa1f fb8b 	uxth.w	fp, fp
900142fc:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
90014300:	1ab6      	subs	r6, r6, r2
90014302:	4829      	ldr	r0, [pc, #164]	; (900143a8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x550>)
90014304:	f9b7 10ac 	ldrsh.w	r1, [r7, #172]	; 0xac
90014308:	2e14      	cmp	r6, #20
9001430a:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	; 0xb0
9001430e:	6800      	ldr	r0, [r0, #0]
90014310:	bfa8      	it	ge
90014312:	2614      	movge	r6, #20
90014314:	f8ad 101c 	strh.w	r1, [sp, #28]
90014318:	f8ad 201e 	strh.w	r2, [sp, #30]
9001431c:	b289      	uxth	r1, r1
9001431e:	f8ad 3020 	strh.w	r3, [sp, #32]
90014322:	b2b6      	uxth	r6, r6
90014324:	f8d0 c000 	ldr.w	ip, [r0]
90014328:	b292      	uxth	r2, r2
9001432a:	455e      	cmp	r6, fp
9001432c:	bf94      	ite	ls
9001432e:	9600      	strls	r6, [sp, #0]
90014330:	f8cd b000 	strhi.w	fp, [sp]
90014334:	b29b      	uxth	r3, r3
90014336:	f8dc 6090 	ldr.w	r6, [ip, #144]	; 0x90
9001433a:	47b0      	blx	r6
9001433c:	6823      	ldr	r3, [r4, #0]
9001433e:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
90014342:	a907      	add	r1, sp, #28
90014344:	6c9b      	ldr	r3, [r3, #72]	; 0x48
90014346:	4620      	mov	r0, r4
90014348:	4798      	blx	r3
9001434a:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
9001434e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
90014352:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	; 0xae
90014356:	1a5b      	subs	r3, r3, r1
90014358:	440a      	add	r2, r1
9001435a:	b21b      	sxth	r3, r3
9001435c:	f8a7 20ae 	strh.w	r2, [r7, #174]	; 0xae
90014360:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
90014364:	2b00      	cmp	r3, #0
90014366:	f47f aeda 	bne.w	9001411e <_ZN8touchgfx11Application15drawCachedAreasEv+0x2c6>
9001436a:	fa1f f189 	uxth.w	r1, r9
9001436e:	4650      	mov	r0, sl
90014370:	f7ff f9e8 	bl	90013744 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
90014374:	e6d3      	b.n	9001411e <_ZN8touchgfx11Application15drawCachedAreasEv+0x2c6>
90014376:	882e      	ldrh	r6, [r5, #0]
90014378:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
9001437c:	42b3      	cmp	r3, r6
9001437e:	f67f ae98 	bls.w	900140b2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
90014382:	eb04 02c6 	add.w	r2, r4, r6, lsl #3
90014386:	ab07      	add	r3, sp, #28
90014388:	f852 0fac 	ldr.w	r0, [r2, #172]!
9001438c:	6851      	ldr	r1, [r2, #4]
9001438e:	c303      	stmia	r3!, {r0, r1}
90014390:	a807      	add	r0, sp, #28
90014392:	f7fc ffa2 	bl	900112da <_ZNK8touchgfx4Rect7isEmptyEv>
90014396:	b920      	cbnz	r0, 900143a2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x54a>
90014398:	6823      	ldr	r3, [r4, #0]
9001439a:	a907      	add	r1, sp, #28
9001439c:	4620      	mov	r0, r4
9001439e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
900143a0:	4798      	blx	r3
900143a2:	3601      	adds	r6, #1
900143a4:	b2b6      	uxth	r6, r6
900143a6:	e7e7      	b.n	90014378 <_ZN8touchgfx11Application15drawCachedAreasEv+0x520>
900143a8:	24021c14 	.word	0x24021c14

900143ac <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
900143ac:	4b03      	ldr	r3, [pc, #12]	; (900143bc <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
900143ae:	2200      	movs	r2, #0
900143b0:	801a      	strh	r2, [r3, #0]
900143b2:	805a      	strh	r2, [r3, #2]
900143b4:	809a      	strh	r2, [r3, #4]
900143b6:	80da      	strh	r2, [r3, #6]
900143b8:	4770      	bx	lr
900143ba:	bf00      	nop
900143bc:	24021c58 	.word	0x24021c58

900143c0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
900143c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900143c4:	b09d      	sub	sp, #116	; 0x74
900143c6:	4606      	mov	r6, r0
900143c8:	4614      	mov	r4, r2
900143ca:	468a      	mov	sl, r1
900143cc:	a803      	add	r0, sp, #12
900143ce:	461d      	mov	r5, r3
900143d0:	f000 fd7c 	bl	90014ecc <_ZN8touchgfx12TextProviderC1Ev>
900143d4:	6833      	ldr	r3, [r6, #0]
900143d6:	4630      	mov	r0, r6
900143d8:	f242 0b0b 	movw	fp, #8203	; 0x200b
900143dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
900143de:	4798      	blx	r3
900143e0:	6833      	ldr	r3, [r6, #0]
900143e2:	4607      	mov	r7, r0
900143e4:	4630      	mov	r0, r6
900143e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
900143e8:	4798      	blx	r3
900143ea:	462a      	mov	r2, r5
900143ec:	2500      	movs	r5, #0
900143ee:	4621      	mov	r1, r4
900143f0:	9000      	str	r0, [sp, #0]
900143f2:	463b      	mov	r3, r7
900143f4:	462c      	mov	r4, r5
900143f6:	46a9      	mov	r9, r5
900143f8:	46a8      	mov	r8, r5
900143fa:	a803      	add	r0, sp, #12
900143fc:	f000 fdb9 	bl	90014f72 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
90014400:	2300      	movs	r3, #0
90014402:	9302      	str	r3, [sp, #8]
90014404:	f64f 63ff 	movw	r3, #65279	; 0xfeff
90014408:	429c      	cmp	r4, r3
9001440a:	d002      	beq.n	90014412 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
9001440c:	455c      	cmp	r4, fp
9001440e:	bf18      	it	ne
90014410:	4625      	movne	r5, r4
90014412:	ab02      	add	r3, sp, #8
90014414:	4632      	mov	r2, r6
90014416:	4651      	mov	r1, sl
90014418:	a803      	add	r0, sp, #12
9001441a:	f001 f89f 	bl	9001555c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
9001441e:	4604      	mov	r4, r0
90014420:	b108      	cbz	r0, 90014426 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
90014422:	280a      	cmp	r0, #10
90014424:	d10a      	bne.n	9001443c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
90014426:	45c1      	cmp	r9, r8
90014428:	bf38      	it	cc
9001442a:	46c1      	movcc	r9, r8
9001442c:	f04f 0800 	mov.w	r8, #0
90014430:	2c00      	cmp	r4, #0
90014432:	d1e5      	bne.n	90014400 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
90014434:	4648      	mov	r0, r9
90014436:	b01d      	add	sp, #116	; 0x74
90014438:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001443c:	9a02      	ldr	r2, [sp, #8]
9001443e:	2a00      	cmp	r2, #0
90014440:	d0de      	beq.n	90014400 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
90014442:	7b57      	ldrb	r7, [r2, #13]
90014444:	4629      	mov	r1, r5
90014446:	6833      	ldr	r3, [r6, #0]
90014448:	007f      	lsls	r7, r7, #1
9001444a:	8894      	ldrh	r4, [r2, #4]
9001444c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
9001444e:	f407 7080 	and.w	r0, r7, #256	; 0x100
90014452:	7a97      	ldrb	r7, [r2, #10]
90014454:	4307      	orrs	r7, r0
90014456:	4630      	mov	r0, r6
90014458:	4798      	blx	r3
9001445a:	4438      	add	r0, r7
9001445c:	4480      	add	r8, r0
9001445e:	fa1f f888 	uxth.w	r8, r8
90014462:	e7e5      	b.n	90014430 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

90014464 <_ZNK8touchgfx4Font12getCharWidthEt>:
90014464:	b508      	push	{r3, lr}
90014466:	6803      	ldr	r3, [r0, #0]
90014468:	68db      	ldr	r3, [r3, #12]
9001446a:	4798      	blx	r3
9001446c:	b128      	cbz	r0, 9001447a <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
9001446e:	7b43      	ldrb	r3, [r0, #13]
90014470:	7a80      	ldrb	r0, [r0, #10]
90014472:	005b      	lsls	r3, r3, #1
90014474:	f403 7380 	and.w	r3, r3, #256	; 0x100
90014478:	4318      	orrs	r0, r3
9001447a:	bd08      	pop	{r3, pc}

9001447c <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
9001447c:	b40e      	push	{r1, r2, r3}
9001447e:	b5f0      	push	{r4, r5, r6, r7, lr}
90014480:	b09e      	sub	sp, #120	; 0x78
90014482:	4605      	mov	r5, r0
90014484:	ab23      	add	r3, sp, #140	; 0x8c
90014486:	a805      	add	r0, sp, #20
90014488:	f853 4b04 	ldr.w	r4, [r3], #4
9001448c:	9303      	str	r3, [sp, #12]
9001448e:	f000 fd1d 	bl	90014ecc <_ZN8touchgfx12TextProviderC1Ev>
90014492:	682b      	ldr	r3, [r5, #0]
90014494:	4628      	mov	r0, r5
90014496:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
90014498:	4798      	blx	r3
9001449a:	682b      	ldr	r3, [r5, #0]
9001449c:	4606      	mov	r6, r0
9001449e:	4628      	mov	r0, r5
900144a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
900144a2:	4798      	blx	r3
900144a4:	4633      	mov	r3, r6
900144a6:	4621      	mov	r1, r4
900144a8:	ae1e      	add	r6, sp, #120	; 0x78
900144aa:	2400      	movs	r4, #0
900144ac:	9000      	str	r0, [sp, #0]
900144ae:	9a03      	ldr	r2, [sp, #12]
900144b0:	a805      	add	r0, sp, #20
900144b2:	f000 fd5e 	bl	90014f72 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
900144b6:	f846 4d68 	str.w	r4, [r6, #-104]!
900144ba:	462a      	mov	r2, r5
900144bc:	4633      	mov	r3, r6
900144be:	4621      	mov	r1, r4
900144c0:	a805      	add	r0, sp, #20
900144c2:	f001 f84b 	bl	9001555c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
900144c6:	b300      	cbz	r0, 9001450a <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
900144c8:	280a      	cmp	r0, #10
900144ca:	d01a      	beq.n	90014502 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
900144cc:	9f04      	ldr	r7, [sp, #16]
900144ce:	b1c7      	cbz	r7, 90014502 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
900144d0:	7b78      	ldrb	r0, [r7, #13]
900144d2:	7a3b      	ldrb	r3, [r7, #8]
900144d4:	00c1      	lsls	r1, r0, #3
900144d6:	88ea      	ldrh	r2, [r5, #6]
900144d8:	f401 7180 	and.w	r1, r1, #256	; 0x100
900144dc:	4319      	orrs	r1, r3
900144de:	0643      	lsls	r3, r0, #25
900144e0:	ea4f 1000 	mov.w	r0, r0, lsl #4
900144e4:	bf48      	it	mi
900144e6:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
900144ea:	f400 7080 	and.w	r0, r0, #256	; 0x100
900144ee:	bf48      	it	mi
900144f0:	b219      	sxthmi	r1, r3
900144f2:	79fb      	ldrb	r3, [r7, #7]
900144f4:	4303      	orrs	r3, r0
900144f6:	4413      	add	r3, r2
900144f8:	1a5b      	subs	r3, r3, r1
900144fa:	b21b      	sxth	r3, r3
900144fc:	429c      	cmp	r4, r3
900144fe:	bfb8      	it	lt
90014500:	461c      	movlt	r4, r3
90014502:	4633      	mov	r3, r6
90014504:	462a      	mov	r2, r5
90014506:	2100      	movs	r1, #0
90014508:	e7da      	b.n	900144c0 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
9001450a:	b2a0      	uxth	r0, r4
9001450c:	b01e      	add	sp, #120	; 0x78
9001450e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
90014512:	b003      	add	sp, #12
90014514:	4770      	bx	lr

90014516 <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
90014516:	7a43      	ldrb	r3, [r0, #9]
90014518:	8880      	ldrh	r0, [r0, #4]
9001451a:	4418      	add	r0, r3
9001451c:	b280      	uxth	r0, r0
9001451e:	4770      	bx	lr

90014520 <_ZNK8touchgfx4Font13getFontHeightEv>:
90014520:	6803      	ldr	r3, [r0, #0]
90014522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90014524:	4718      	bx	r3

90014526 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
90014526:	b40e      	push	{r1, r2, r3}
90014528:	b570      	push	{r4, r5, r6, lr}
9001452a:	b09d      	sub	sp, #116	; 0x74
9001452c:	4604      	mov	r4, r0
9001452e:	ab21      	add	r3, sp, #132	; 0x84
90014530:	a803      	add	r0, sp, #12
90014532:	f853 5b04 	ldr.w	r5, [r3], #4
90014536:	9302      	str	r3, [sp, #8]
90014538:	f000 fcc8 	bl	90014ecc <_ZN8touchgfx12TextProviderC1Ev>
9001453c:	6823      	ldr	r3, [r4, #0]
9001453e:	4620      	mov	r0, r4
90014540:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
90014542:	4798      	blx	r3
90014544:	6823      	ldr	r3, [r4, #0]
90014546:	4606      	mov	r6, r0
90014548:	4620      	mov	r0, r4
9001454a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
9001454c:	2401      	movs	r4, #1
9001454e:	4798      	blx	r3
90014550:	4633      	mov	r3, r6
90014552:	9000      	str	r0, [sp, #0]
90014554:	4629      	mov	r1, r5
90014556:	9a02      	ldr	r2, [sp, #8]
90014558:	a803      	add	r0, sp, #12
9001455a:	f000 fd0a 	bl	90014f72 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
9001455e:	a803      	add	r0, sp, #12
90014560:	f001 f87c 	bl	9001565c <_ZN8touchgfx12TextProvider11getNextCharEv>
90014564:	b2a3      	uxth	r3, r4
90014566:	b138      	cbz	r0, 90014578 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x52>
90014568:	280a      	cmp	r0, #10
9001456a:	a803      	add	r0, sp, #12
9001456c:	bf04      	itt	eq
9001456e:	3301      	addeq	r3, #1
90014570:	b21c      	sxtheq	r4, r3
90014572:	f001 f873 	bl	9001565c <_ZN8touchgfx12TextProvider11getNextCharEv>
90014576:	e7f5      	b.n	90014564 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
90014578:	4618      	mov	r0, r3
9001457a:	b01d      	add	sp, #116	; 0x74
9001457c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90014580:	b003      	add	sp, #12
90014582:	4770      	bx	lr

90014584 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
90014584:	b40e      	push	{r1, r2, r3}
90014586:	b5f0      	push	{r4, r5, r6, r7, lr}
90014588:	b09e      	sub	sp, #120	; 0x78
9001458a:	4604      	mov	r4, r0
9001458c:	ab23      	add	r3, sp, #140	; 0x8c
9001458e:	a805      	add	r0, sp, #20
90014590:	f853 5b04 	ldr.w	r5, [r3], #4
90014594:	9303      	str	r3, [sp, #12]
90014596:	f000 fc99 	bl	90014ecc <_ZN8touchgfx12TextProviderC1Ev>
9001459a:	6823      	ldr	r3, [r4, #0]
9001459c:	4620      	mov	r0, r4
9001459e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
900145a0:	4798      	blx	r3
900145a2:	6823      	ldr	r3, [r4, #0]
900145a4:	4606      	mov	r6, r0
900145a6:	4620      	mov	r0, r4
900145a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
900145aa:	4798      	blx	r3
900145ac:	4633      	mov	r3, r6
900145ae:	4629      	mov	r1, r5
900145b0:	9000      	str	r0, [sp, #0]
900145b2:	9a03      	ldr	r2, [sp, #12]
900145b4:	a805      	add	r0, sp, #20
900145b6:	f000 fcdc 	bl	90014f72 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
900145ba:	ad1e      	add	r5, sp, #120	; 0x78
900145bc:	2100      	movs	r1, #0
900145be:	f647 76ff 	movw	r6, #32767	; 0x7fff
900145c2:	4622      	mov	r2, r4
900145c4:	a805      	add	r0, sp, #20
900145c6:	f845 1d68 	str.w	r1, [r5, #-104]!
900145ca:	462b      	mov	r3, r5
900145cc:	f000 ffc6 	bl	9001555c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
900145d0:	b1d8      	cbz	r0, 9001460a <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x86>
900145d2:	280a      	cmp	r0, #10
900145d4:	d012      	beq.n	900145fc <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
900145d6:	9804      	ldr	r0, [sp, #16]
900145d8:	b180      	cbz	r0, 900145fc <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
900145da:	7b47      	ldrb	r7, [r0, #13]
900145dc:	88e2      	ldrh	r2, [r4, #6]
900145de:	00fb      	lsls	r3, r7, #3
900145e0:	f403 7180 	and.w	r1, r3, #256	; 0x100
900145e4:	7a03      	ldrb	r3, [r0, #8]
900145e6:	430b      	orrs	r3, r1
900145e8:	0679      	lsls	r1, r7, #25
900145ea:	bf44      	itt	mi
900145ec:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
900145f0:	b21b      	sxthmi	r3, r3
900145f2:	1ad3      	subs	r3, r2, r3
900145f4:	b21b      	sxth	r3, r3
900145f6:	429e      	cmp	r6, r3
900145f8:	bfa8      	it	ge
900145fa:	461e      	movge	r6, r3
900145fc:	462b      	mov	r3, r5
900145fe:	4622      	mov	r2, r4
90014600:	2100      	movs	r1, #0
90014602:	a805      	add	r0, sp, #20
90014604:	f000 ffaa 	bl	9001555c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
90014608:	e7e2      	b.n	900145d0 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4c>
9001460a:	4630      	mov	r0, r6
9001460c:	b01e      	add	sp, #120	; 0x78
9001460e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
90014612:	b003      	add	sp, #12
90014614:	4770      	bx	lr

90014616 <_ZNK8touchgfx8Drawable10invalidateEv>:
90014616:	b513      	push	{r0, r1, r4, lr}
90014618:	6803      	ldr	r3, [r0, #0]
9001461a:	2400      	movs	r4, #0
9001461c:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
90014620:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
90014624:	f8ad 1004 	strh.w	r1, [sp, #4]
90014628:	4669      	mov	r1, sp
9001462a:	691b      	ldr	r3, [r3, #16]
9001462c:	9400      	str	r4, [sp, #0]
9001462e:	f8ad 2006 	strh.w	r2, [sp, #6]
90014632:	4798      	blx	r3
90014634:	b002      	add	sp, #8
90014636:	bd10      	pop	{r4, pc}

90014638 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
90014638:	b538      	push	{r3, r4, r5, lr}
9001463a:	680b      	ldr	r3, [r1, #0]
9001463c:	460c      	mov	r4, r1
9001463e:	4605      	mov	r5, r0
90014640:	68db      	ldr	r3, [r3, #12]
90014642:	4798      	blx	r3
90014644:	6823      	ldr	r3, [r4, #0]
90014646:	4620      	mov	r0, r4
90014648:	4629      	mov	r1, r5
9001464a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9001464c:	4798      	blx	r3
9001464e:	4628      	mov	r0, r5
90014650:	bd38      	pop	{r3, r4, r5, pc}

90014652 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
90014652:	b410      	push	{r4}
90014654:	880a      	ldrh	r2, [r1, #0]
90014656:	8884      	ldrh	r4, [r0, #4]
90014658:	4422      	add	r2, r4
9001465a:	800a      	strh	r2, [r1, #0]
9001465c:	884a      	ldrh	r2, [r1, #2]
9001465e:	88c4      	ldrh	r4, [r0, #6]
90014660:	4422      	add	r2, r4
90014662:	804a      	strh	r2, [r1, #2]
90014664:	6940      	ldr	r0, [r0, #20]
90014666:	b120      	cbz	r0, 90014672 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
90014668:	6803      	ldr	r3, [r0, #0]
9001466a:	f85d 4b04 	ldr.w	r4, [sp], #4
9001466e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90014670:	4718      	bx	r3
90014672:	f85d 4b04 	ldr.w	r4, [sp], #4
90014676:	4770      	bx	lr

90014678 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
90014678:	b570      	push	{r4, r5, r6, lr}
9001467a:	8882      	ldrh	r2, [r0, #4]
9001467c:	460c      	mov	r4, r1
9001467e:	880b      	ldrh	r3, [r1, #0]
90014680:	4605      	mov	r5, r0
90014682:	4413      	add	r3, r2
90014684:	800b      	strh	r3, [r1, #0]
90014686:	884b      	ldrh	r3, [r1, #2]
90014688:	88c2      	ldrh	r2, [r0, #6]
9001468a:	4413      	add	r3, r2
9001468c:	804b      	strh	r3, [r1, #2]
9001468e:	1d01      	adds	r1, r0, #4
90014690:	4620      	mov	r0, r4
90014692:	f7fc fddf 	bl	90011254 <_ZN8touchgfx4RectaNERKS0_>
90014696:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
9001469a:	2b00      	cmp	r3, #0
9001469c:	dd0b      	ble.n	900146b6 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
9001469e:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
900146a2:	2b00      	cmp	r3, #0
900146a4:	dd07      	ble.n	900146b6 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
900146a6:	6968      	ldr	r0, [r5, #20]
900146a8:	b128      	cbz	r0, 900146b6 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
900146aa:	6803      	ldr	r3, [r0, #0]
900146ac:	4621      	mov	r1, r4
900146ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
900146b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
900146b4:	4718      	bx	r3
900146b6:	bd70      	pop	{r4, r5, r6, pc}

900146b8 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
900146b8:	b570      	push	{r4, r5, r6, lr}
900146ba:	8882      	ldrh	r2, [r0, #4]
900146bc:	460c      	mov	r4, r1
900146be:	880b      	ldrh	r3, [r1, #0]
900146c0:	4605      	mov	r5, r0
900146c2:	4413      	add	r3, r2
900146c4:	800b      	strh	r3, [r1, #0]
900146c6:	884b      	ldrh	r3, [r1, #2]
900146c8:	88c2      	ldrh	r2, [r0, #6]
900146ca:	4413      	add	r3, r2
900146cc:	804b      	strh	r3, [r1, #2]
900146ce:	1d01      	adds	r1, r0, #4
900146d0:	4620      	mov	r0, r4
900146d2:	f7fc fdbf 	bl	90011254 <_ZN8touchgfx4RectaNERKS0_>
900146d6:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
900146da:	2b00      	cmp	r3, #0
900146dc:	dd19      	ble.n	90014712 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
900146de:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
900146e2:	2b00      	cmp	r3, #0
900146e4:	dd15      	ble.n	90014712 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
900146e6:	6968      	ldr	r0, [r5, #20]
900146e8:	b128      	cbz	r0, 900146f6 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
900146ea:	6803      	ldr	r3, [r0, #0]
900146ec:	4621      	mov	r1, r4
900146ee:	691b      	ldr	r3, [r3, #16]
900146f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
900146f4:	4718      	bx	r3
900146f6:	4b07      	ldr	r3, [pc, #28]	; (90014714 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5c>)
900146f8:	681b      	ldr	r3, [r3, #0]
900146fa:	3304      	adds	r3, #4
900146fc:	429d      	cmp	r5, r3
900146fe:	d108      	bne.n	90014712 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
90014700:	f7fe ff10 	bl	90013524 <_ZN8touchgfx11Application11getInstanceEv>
90014704:	6803      	ldr	r3, [r0, #0]
90014706:	6821      	ldr	r1, [r4, #0]
90014708:	6862      	ldr	r2, [r4, #4]
9001470a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
9001470c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90014710:	4718      	bx	r3
90014712:	bd70      	pop	{r4, r5, r6, pc}
90014714:	24021c50 	.word	0x24021c50

90014718 <_ZN8touchgfx8Drawable12moveRelativeEss>:
90014718:	b570      	push	{r4, r5, r6, lr}
9001471a:	4604      	mov	r4, r0
9001471c:	4616      	mov	r6, r2
9001471e:	460d      	mov	r5, r1
90014720:	b901      	cbnz	r1, 90014724 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
90014722:	b192      	cbz	r2, 9001474a <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
90014724:	6823      	ldr	r3, [r4, #0]
90014726:	4620      	mov	r0, r4
90014728:	699b      	ldr	r3, [r3, #24]
9001472a:	4798      	blx	r3
9001472c:	88e2      	ldrh	r2, [r4, #6]
9001472e:	88a1      	ldrh	r1, [r4, #4]
90014730:	4620      	mov	r0, r4
90014732:	4432      	add	r2, r6
90014734:	4429      	add	r1, r5
90014736:	b212      	sxth	r2, r2
90014738:	b209      	sxth	r1, r1
9001473a:	f7fd f861 	bl	90011800 <_ZN8touchgfx8Drawable5setXYEss>
9001473e:	6823      	ldr	r3, [r4, #0]
90014740:	4620      	mov	r0, r4
90014742:	699b      	ldr	r3, [r3, #24]
90014744:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90014748:	4718      	bx	r3
9001474a:	bd70      	pop	{r4, r5, r6, pc}

9001474c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
9001474c:	b510      	push	{r4, lr}
9001474e:	2300      	movs	r3, #0
90014750:	4604      	mov	r4, r0
90014752:	4608      	mov	r0, r1
90014754:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
90014758:	8023      	strh	r3, [r4, #0]
9001475a:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
9001475e:	8063      	strh	r3, [r4, #2]
90014760:	6803      	ldr	r3, [r0, #0]
90014762:	80a1      	strh	r1, [r4, #4]
90014764:	4621      	mov	r1, r4
90014766:	80e2      	strh	r2, [r4, #6]
90014768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9001476a:	4798      	blx	r3
9001476c:	4620      	mov	r0, r4
9001476e:	bd10      	pop	{r4, pc}

90014770 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>:
90014770:	b530      	push	{r4, r5, lr}
90014772:	8083      	strh	r3, [r0, #4]
90014774:	f8bd 300c 	ldrh.w	r3, [sp, #12]
90014778:	f89d 5018 	ldrb.w	r5, [sp, #24]
9001477c:	80c3      	strh	r3, [r0, #6]
9001477e:	f89d 3010 	ldrb.w	r3, [sp, #16]
90014782:	6141      	str	r1, [r0, #20]
90014784:	7203      	strb	r3, [r0, #8]
90014786:	f89d 3014 	ldrb.w	r3, [sp, #20]
9001478a:	8302      	strh	r2, [r0, #24]
9001478c:	7243      	strb	r3, [r0, #9]
9001478e:	7a83      	ldrb	r3, [r0, #10]
90014790:	f365 0306 	bfi	r3, r5, #0, #7
90014794:	f89d 501c 	ldrb.w	r5, [sp, #28]
90014798:	f365 13c7 	bfi	r3, r5, #7, #1
9001479c:	7283      	strb	r3, [r0, #10]
9001479e:	f89d 3020 	ldrb.w	r3, [sp, #32]
900147a2:	72c3      	strb	r3, [r0, #11]
900147a4:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
900147a8:	7303      	strb	r3, [r0, #12]
900147aa:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
900147ae:	81c3      	strh	r3, [r0, #14]
900147b0:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
900147b4:	8203      	strh	r3, [r0, #16]
900147b6:	4b01      	ldr	r3, [pc, #4]	; (900147bc <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt+0x4c>)
900147b8:	6003      	str	r3, [r0, #0]
900147ba:	bd30      	pop	{r4, r5, pc}
900147bc:	90028e38 	.word	0x90028e38

900147c0 <_ZNK8touchgfx9ConstFont4findEt>:
900147c0:	b5f0      	push	{r4, r5, r6, r7, lr}
900147c2:	6944      	ldr	r4, [r0, #20]
900147c4:	b3bc      	cbz	r4, 90014836 <_ZNK8touchgfx9ConstFont4findEt+0x76>
900147c6:	88a3      	ldrh	r3, [r4, #4]
900147c8:	8b02      	ldrh	r2, [r0, #24]
900147ca:	1acb      	subs	r3, r1, r3
900147cc:	f102 32ff 	add.w	r2, r2, #4294967295
900147d0:	d431      	bmi.n	90014836 <_ZNK8touchgfx9ConstFont4findEt+0x76>
900147d2:	4293      	cmp	r3, r2
900147d4:	dd0c      	ble.n	900147f0 <_ZNK8touchgfx9ConstFont4findEt+0x30>
900147d6:	230e      	movs	r3, #14
900147d8:	fb03 4302 	mla	r3, r3, r2, r4
900147dc:	889b      	ldrh	r3, [r3, #4]
900147de:	1a5b      	subs	r3, r3, r1
900147e0:	1ad3      	subs	r3, r2, r3
900147e2:	429a      	cmp	r2, r3
900147e4:	db27      	blt.n	90014836 <_ZNK8touchgfx9ConstFont4findEt+0x76>
900147e6:	2b00      	cmp	r3, #0
900147e8:	bfbc      	itt	lt
900147ea:	2302      	movlt	r3, #2
900147ec:	fb92 f3f3 	sdivlt	r3, r2, r3
900147f0:	2500      	movs	r5, #0
900147f2:	260e      	movs	r6, #14
900147f4:	4295      	cmp	r5, r2
900147f6:	dc1e      	bgt.n	90014836 <_ZNK8touchgfx9ConstFont4findEt+0x76>
900147f8:	fb06 4003 	mla	r0, r6, r3, r4
900147fc:	8887      	ldrh	r7, [r0, #4]
900147fe:	42b9      	cmp	r1, r7
90014800:	d01a      	beq.n	90014838 <_ZNK8touchgfx9ConstFont4findEt+0x78>
90014802:	d20d      	bcs.n	90014820 <_ZNK8touchgfx9ConstFont4findEt+0x60>
90014804:	1e5a      	subs	r2, r3, #1
90014806:	4295      	cmp	r5, r2
90014808:	dc15      	bgt.n	90014836 <_ZNK8touchgfx9ConstFont4findEt+0x76>
9001480a:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
9001480e:	1a5b      	subs	r3, r3, r1
90014810:	1ad3      	subs	r3, r2, r3
90014812:	429a      	cmp	r2, r3
90014814:	db0f      	blt.n	90014836 <_ZNK8touchgfx9ConstFont4findEt+0x76>
90014816:	429d      	cmp	r5, r3
90014818:	ddec      	ble.n	900147f4 <_ZNK8touchgfx9ConstFont4findEt+0x34>
9001481a:	1953      	adds	r3, r2, r5
9001481c:	105b      	asrs	r3, r3, #1
9001481e:	e7e9      	b.n	900147f4 <_ZNK8touchgfx9ConstFont4findEt+0x34>
90014820:	1c5d      	adds	r5, r3, #1
90014822:	42aa      	cmp	r2, r5
90014824:	db07      	blt.n	90014836 <_ZNK8touchgfx9ConstFont4findEt+0x76>
90014826:	8a43      	ldrh	r3, [r0, #18]
90014828:	1acb      	subs	r3, r1, r3
9001482a:	442b      	add	r3, r5
9001482c:	429d      	cmp	r5, r3
9001482e:	dc02      	bgt.n	90014836 <_ZNK8touchgfx9ConstFont4findEt+0x76>
90014830:	429a      	cmp	r2, r3
90014832:	dadf      	bge.n	900147f4 <_ZNK8touchgfx9ConstFont4findEt+0x34>
90014834:	e7f1      	b.n	9001481a <_ZNK8touchgfx9ConstFont4findEt+0x5a>
90014836:	2000      	movs	r0, #0
90014838:	bdf0      	pop	{r4, r5, r6, r7, pc}

9001483a <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
9001483a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
9001483c:	4604      	mov	r4, r0
9001483e:	4617      	mov	r7, r2
90014840:	461e      	mov	r6, r3
90014842:	b911      	cbnz	r1, 9001484a <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
90014844:	2500      	movs	r5, #0
90014846:	4628      	mov	r0, r5
90014848:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
9001484a:	290a      	cmp	r1, #10
9001484c:	d0fa      	beq.n	90014844 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
9001484e:	f64f 62ff 	movw	r2, #65279	; 0xfeff
90014852:	4291      	cmp	r1, r2
90014854:	d0f6      	beq.n	90014844 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
90014856:	f242 020b 	movw	r2, #8203	; 0x200b
9001485a:	4291      	cmp	r1, r2
9001485c:	d0f2      	beq.n	90014844 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
9001485e:	f7ff ffaf 	bl	900147c0 <_ZNK8touchgfx9ConstFont4findEt>
90014862:	4605      	mov	r5, r0
90014864:	b950      	cbnz	r0, 9001487c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
90014866:	6823      	ldr	r3, [r4, #0]
90014868:	4620      	mov	r0, r4
9001486a:	691b      	ldr	r3, [r3, #16]
9001486c:	4798      	blx	r3
9001486e:	4601      	mov	r1, r0
90014870:	4620      	mov	r0, r4
90014872:	f7ff ffa5 	bl	900147c0 <_ZNK8touchgfx9ConstFont4findEt>
90014876:	4605      	mov	r5, r0
90014878:	2800      	cmp	r0, #0
9001487a:	d0e3      	beq.n	90014844 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
9001487c:	6823      	ldr	r3, [r4, #0]
9001487e:	4629      	mov	r1, r5
90014880:	4620      	mov	r0, r4
90014882:	6d5b      	ldr	r3, [r3, #84]	; 0x54
90014884:	4798      	blx	r3
90014886:	6038      	str	r0, [r7, #0]
90014888:	6823      	ldr	r3, [r4, #0]
9001488a:	4620      	mov	r0, r4
9001488c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
9001488e:	4798      	blx	r3
90014890:	7030      	strb	r0, [r6, #0]
90014892:	e7d8      	b.n	90014846 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

90014894 <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
90014894:	2000      	movs	r0, #0
90014896:	4770      	bx	lr

90014898 <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
90014898:	2001      	movs	r0, #1
9001489a:	4770      	bx	lr

9001489c <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
9001489c:	2002      	movs	r0, #2
9001489e:	4770      	bx	lr

900148a0 <_ZN8touchgfx6ScreenD1Ev>:
900148a0:	4770      	bx	lr

900148a2 <_ZN8touchgfx6Screen11setupScreenEv>:
900148a2:	4770      	bx	lr

900148a4 <_ZN8touchgfx12GestureEventD1Ev>:
900148a4:	4770      	bx	lr

900148a6 <_ZN8touchgfx9DragEventD1Ev>:
900148a6:	4770      	bx	lr

900148a8 <_ZN8touchgfx10ClickEventD1Ev>:
900148a8:	4770      	bx	lr

900148aa <_ZN8touchgfx10ClickEventD0Ev>:
900148aa:	b510      	push	{r4, lr}
900148ac:	4604      	mov	r4, r0
900148ae:	210c      	movs	r1, #12
900148b0:	f00e ffd1 	bl	90023856 <_ZdlPvj>
900148b4:	4620      	mov	r0, r4
900148b6:	bd10      	pop	{r4, pc}

900148b8 <_ZN8touchgfx9DragEventD0Ev>:
900148b8:	b510      	push	{r4, lr}
900148ba:	4604      	mov	r4, r0
900148bc:	2110      	movs	r1, #16
900148be:	f00e ffca 	bl	90023856 <_ZdlPvj>
900148c2:	4620      	mov	r0, r4
900148c4:	bd10      	pop	{r4, pc}

900148c6 <_ZN8touchgfx12GestureEventD0Ev>:
900148c6:	b510      	push	{r4, lr}
900148c8:	4604      	mov	r4, r0
900148ca:	210c      	movs	r1, #12
900148cc:	f00e ffc3 	bl	90023856 <_ZdlPvj>
900148d0:	4620      	mov	r0, r4
900148d2:	bd10      	pop	{r4, pc}

900148d4 <_ZN8touchgfx6ScreenD0Ev>:
900148d4:	b510      	push	{r4, lr}
900148d6:	4604      	mov	r4, r0
900148d8:	213c      	movs	r1, #60	; 0x3c
900148da:	f00e ffbc 	bl	90023856 <_ZdlPvj>
900148de:	4620      	mov	r0, r4
900148e0:	bd10      	pop	{r4, pc}
	...

900148e4 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
900148e4:	b530      	push	{r4, r5, lr}
900148e6:	460d      	mov	r5, r1
900148e8:	6b01      	ldr	r1, [r0, #48]	; 0x30
900148ea:	b087      	sub	sp, #28
900148ec:	4604      	mov	r4, r0
900148ee:	b301      	cbz	r1, 90014932 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
900148f0:	a801      	add	r0, sp, #4
900148f2:	f7ff ff2b 	bl	9001474c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
900148f6:	892a      	ldrh	r2, [r5, #8]
900148f8:	f8bd 3004 	ldrh.w	r3, [sp, #4]
900148fc:	7928      	ldrb	r0, [r5, #4]
900148fe:	1ad2      	subs	r2, r2, r3
90014900:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
90014902:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
90014906:	441a      	add	r2, r3
90014908:	896b      	ldrh	r3, [r5, #10]
9001490a:	f8bd 5006 	ldrh.w	r5, [sp, #6]
9001490e:	f88d 0010 	strb.w	r0, [sp, #16]
90014912:	1b5b      	subs	r3, r3, r5
90014914:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
90014916:	6b20      	ldr	r0, [r4, #48]	; 0x30
90014918:	442b      	add	r3, r5
9001491a:	4d07      	ldr	r5, [pc, #28]	; (90014938 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
9001491c:	f8ad 1012 	strh.w	r1, [sp, #18]
90014920:	a903      	add	r1, sp, #12
90014922:	9503      	str	r5, [sp, #12]
90014924:	f8ad 2014 	strh.w	r2, [sp, #20]
90014928:	f8ad 3016 	strh.w	r3, [sp, #22]
9001492c:	6803      	ldr	r3, [r0, #0]
9001492e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
90014930:	4798      	blx	r3
90014932:	b007      	add	sp, #28
90014934:	bd30      	pop	{r4, r5, pc}
90014936:	bf00      	nop
90014938:	90028ec0 	.word	0x90028ec0

9001493c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
9001493c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90014940:	6b03      	ldr	r3, [r0, #48]	; 0x30
90014942:	b08a      	sub	sp, #40	; 0x28
90014944:	4604      	mov	r4, r0
90014946:	460d      	mov	r5, r1
90014948:	b113      	cbz	r3, 90014950 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
9001494a:	790b      	ldrb	r3, [r1, #4]
9001494c:	2b00      	cmp	r3, #0
9001494e:	d044      	beq.n	900149da <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
90014950:	f104 0804 	add.w	r8, r4, #4
90014954:	a803      	add	r0, sp, #12
90014956:	4641      	mov	r1, r8
90014958:	f7ff fef8 	bl	9001474c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
9001495c:	792b      	ldrb	r3, [r5, #4]
9001495e:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
90014962:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
90014966:	b983      	cbnz	r3, 9001498a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
90014968:	f104 0336 	add.w	r3, r4, #54	; 0x36
9001496c:	892a      	ldrh	r2, [r5, #8]
9001496e:	88e9      	ldrh	r1, [r5, #6]
90014970:	4640      	mov	r0, r8
90014972:	1b92      	subs	r2, r2, r6
90014974:	9301      	str	r3, [sp, #4]
90014976:	1bc9      	subs	r1, r1, r7
90014978:	f104 0334 	add.w	r3, r4, #52	; 0x34
9001497c:	b212      	sxth	r2, r2
9001497e:	9300      	str	r3, [sp, #0]
90014980:	b209      	sxth	r1, r1
90014982:	f104 0330 	add.w	r3, r4, #48	; 0x30
90014986:	f7fc fb83 	bl	90011090 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
9001498a:	6b21      	ldr	r1, [r4, #48]	; 0x30
9001498c:	b329      	cbz	r1, 900149da <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
9001498e:	a805      	add	r0, sp, #20
90014990:	f7ff fedc 	bl	9001474c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
90014994:	f8bd 2014 	ldrh.w	r2, [sp, #20]
90014998:	792b      	ldrb	r3, [r5, #4]
9001499a:	a907      	add	r1, sp, #28
9001499c:	1abf      	subs	r7, r7, r2
9001499e:	88ea      	ldrh	r2, [r5, #6]
900149a0:	6b20      	ldr	r0, [r4, #48]	; 0x30
900149a2:	4417      	add	r7, r2
900149a4:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
900149a6:	f88d 3020 	strb.w	r3, [sp, #32]
900149aa:	4417      	add	r7, r2
900149ac:	f8bd 2016 	ldrh.w	r2, [sp, #22]
900149b0:	1ab6      	subs	r6, r6, r2
900149b2:	892a      	ldrh	r2, [r5, #8]
900149b4:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
900149b8:	4416      	add	r6, r2
900149ba:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
900149bc:	4416      	add	r6, r2
900149be:	4a08      	ldr	r2, [pc, #32]	; (900149e0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
900149c0:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
900149c4:	2600      	movs	r6, #0
900149c6:	9207      	str	r2, [sp, #28]
900149c8:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
900149cc:	6803      	ldr	r3, [r0, #0]
900149ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
900149d0:	4798      	blx	r3
900149d2:	792b      	ldrb	r3, [r5, #4]
900149d4:	b10b      	cbz	r3, 900149da <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
900149d6:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
900149da:	b00a      	add	sp, #40	; 0x28
900149dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
900149e0:	90028e98 	.word	0x90028e98

900149e4 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
900149e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
900149e8:	460c      	mov	r4, r1
900149ea:	6b01      	ldr	r1, [r0, #48]	; 0x30
900149ec:	b088      	sub	sp, #32
900149ee:	4605      	mov	r5, r0
900149f0:	2900      	cmp	r1, #0
900149f2:	d06d      	beq.n	90014ad0 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
900149f4:	4668      	mov	r0, sp
900149f6:	f7ff fea9 	bl	9001474c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
900149fa:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
900149fc:	88e3      	ldrh	r3, [r4, #6]
900149fe:	f9bd 8000 	ldrsh.w	r8, [sp]
90014a02:	440b      	add	r3, r1
90014a04:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
90014a08:	b21b      	sxth	r3, r3
90014a0a:	4543      	cmp	r3, r8
90014a0c:	db31      	blt.n	90014a72 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
90014a0e:	f8bd c004 	ldrh.w	ip, [sp, #4]
90014a12:	44c4      	add	ip, r8
90014a14:	fa0f fc8c 	sxth.w	ip, ip
90014a18:	4563      	cmp	r3, ip
90014a1a:	da2a      	bge.n	90014a72 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
90014a1c:	8eea      	ldrh	r2, [r5, #54]	; 0x36
90014a1e:	8926      	ldrh	r6, [r4, #8]
90014a20:	4416      	add	r6, r2
90014a22:	b236      	sxth	r6, r6
90014a24:	42be      	cmp	r6, r7
90014a26:	db24      	blt.n	90014a72 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
90014a28:	f8bd 0006 	ldrh.w	r0, [sp, #6]
90014a2c:	4438      	add	r0, r7
90014a2e:	b200      	sxth	r0, r0
90014a30:	4286      	cmp	r6, r0
90014a32:	da1e      	bge.n	90014a72 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
90014a34:	8963      	ldrh	r3, [r4, #10]
90014a36:	4419      	add	r1, r3
90014a38:	b209      	sxth	r1, r1
90014a3a:	4541      	cmp	r1, r8
90014a3c:	db08      	blt.n	90014a50 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
90014a3e:	4561      	cmp	r1, ip
90014a40:	da06      	bge.n	90014a50 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
90014a42:	89a3      	ldrh	r3, [r4, #12]
90014a44:	441a      	add	r2, r3
90014a46:	b212      	sxth	r2, r2
90014a48:	42ba      	cmp	r2, r7
90014a4a:	db01      	blt.n	90014a50 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
90014a4c:	4282      	cmp	r2, r0
90014a4e:	db10      	blt.n	90014a72 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
90014a50:	4b21      	ldr	r3, [pc, #132]	; (90014ad8 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
90014a52:	a904      	add	r1, sp, #16
90014a54:	6b28      	ldr	r0, [r5, #48]	; 0x30
90014a56:	9304      	str	r3, [sp, #16]
90014a58:	2302      	movs	r3, #2
90014a5a:	f88d 3014 	strb.w	r3, [sp, #20]
90014a5e:	2300      	movs	r3, #0
90014a60:	f8ad 3016 	strh.w	r3, [sp, #22]
90014a64:	f8ad 3018 	strh.w	r3, [sp, #24]
90014a68:	f8ad 301a 	strh.w	r3, [sp, #26]
90014a6c:	6803      	ldr	r3, [r0, #0]
90014a6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
90014a70:	4798      	blx	r3
90014a72:	1d29      	adds	r1, r5, #4
90014a74:	a802      	add	r0, sp, #8
90014a76:	f7ff fe69 	bl	9001474c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
90014a7a:	f8bd 3008 	ldrh.w	r3, [sp, #8]
90014a7e:	88e0      	ldrh	r0, [r4, #6]
90014a80:	eba3 0808 	sub.w	r8, r3, r8
90014a84:	f8bd 300a 	ldrh.w	r3, [sp, #10]
90014a88:	7921      	ldrb	r1, [r4, #4]
90014a8a:	fa1f f888 	uxth.w	r8, r8
90014a8e:	1bdf      	subs	r7, r3, r7
90014a90:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
90014a94:	b2bb      	uxth	r3, r7
90014a96:	4440      	add	r0, r8
90014a98:	8922      	ldrh	r2, [r4, #8]
90014a9a:	8967      	ldrh	r7, [r4, #10]
90014a9c:	4460      	add	r0, ip
90014a9e:	89a4      	ldrh	r4, [r4, #12]
90014aa0:	441a      	add	r2, r3
90014aa2:	8eee      	ldrh	r6, [r5, #54]	; 0x36
90014aa4:	44b8      	add	r8, r7
90014aa6:	4423      	add	r3, r4
90014aa8:	f8ad 0016 	strh.w	r0, [sp, #22]
90014aac:	4432      	add	r2, r6
90014aae:	44e0      	add	r8, ip
90014ab0:	4433      	add	r3, r6
90014ab2:	4c0a      	ldr	r4, [pc, #40]	; (90014adc <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
90014ab4:	6b28      	ldr	r0, [r5, #48]	; 0x30
90014ab6:	f88d 1014 	strb.w	r1, [sp, #20]
90014aba:	a904      	add	r1, sp, #16
90014abc:	9404      	str	r4, [sp, #16]
90014abe:	f8ad 2018 	strh.w	r2, [sp, #24]
90014ac2:	f8ad 801a 	strh.w	r8, [sp, #26]
90014ac6:	f8ad 301c 	strh.w	r3, [sp, #28]
90014aca:	6803      	ldr	r3, [r0, #0]
90014acc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
90014ace:	4798      	blx	r3
90014ad0:	b008      	add	sp, #32
90014ad2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
90014ad6:	bf00      	nop
90014ad8:	90028e98 	.word	0x90028e98
90014adc:	90028eac 	.word	0x90028eac

90014ae0 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
90014ae0:	b537      	push	{r0, r1, r2, r4, r5, lr}
90014ae2:	4604      	mov	r4, r0
90014ae4:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
90014ae8:	3201      	adds	r2, #1
90014aea:	d112      	bne.n	90014b12 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
90014aec:	2500      	movs	r5, #0
90014aee:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
90014af2:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
90014af6:	6803      	ldr	r3, [r0, #0]
90014af8:	9500      	str	r5, [sp, #0]
90014afa:	466d      	mov	r5, sp
90014afc:	f8ad 1004 	strh.w	r1, [sp, #4]
90014b00:	f8ad 2006 	strh.w	r2, [sp, #6]
90014b04:	4629      	mov	r1, r5
90014b06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90014b08:	4798      	blx	r3
90014b0a:	e895 0003 	ldmia.w	r5, {r0, r1}
90014b0e:	e884 0003 	stmia.w	r4, {r0, r1}
90014b12:	4620      	mov	r0, r4
90014b14:	b003      	add	sp, #12
90014b16:	bd30      	pop	{r4, r5, pc}

90014b18 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
90014b18:	b513      	push	{r0, r1, r4, lr}
90014b1a:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
90014b1e:	4604      	mov	r4, r0
90014b20:	3301      	adds	r3, #1
90014b22:	d109      	bne.n	90014b38 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
90014b24:	4601      	mov	r1, r0
90014b26:	4668      	mov	r0, sp
90014b28:	f7ff fe10 	bl	9001474c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
90014b2c:	f8bd 3000 	ldrh.w	r3, [sp]
90014b30:	8423      	strh	r3, [r4, #32]
90014b32:	f8bd 3002 	ldrh.w	r3, [sp, #2]
90014b36:	8463      	strh	r3, [r4, #34]	; 0x22
90014b38:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
90014b3c:	b002      	add	sp, #8
90014b3e:	bd10      	pop	{r4, pc}

90014b40 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
90014b40:	b513      	push	{r0, r1, r4, lr}
90014b42:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
90014b46:	4604      	mov	r4, r0
90014b48:	3301      	adds	r3, #1
90014b4a:	d109      	bne.n	90014b60 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
90014b4c:	4601      	mov	r1, r0
90014b4e:	4668      	mov	r0, sp
90014b50:	f7ff fdfc 	bl	9001474c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
90014b54:	f8bd 3000 	ldrh.w	r3, [sp]
90014b58:	8423      	strh	r3, [r4, #32]
90014b5a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
90014b5e:	8463      	strh	r3, [r4, #34]	; 0x22
90014b60:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
90014b64:	b002      	add	sp, #8
90014b66:	bd10      	pop	{r4, pc}

90014b68 <_ZN8touchgfx6ScreenC1Ev>:
90014b68:	b570      	push	{r4, r5, r6, lr}
90014b6a:	4b17      	ldr	r3, [pc, #92]	; (90014bc8 <_ZN8touchgfx6ScreenC1Ev+0x60>)
90014b6c:	4605      	mov	r5, r0
90014b6e:	4a17      	ldr	r2, [pc, #92]	; (90014bcc <_ZN8touchgfx6ScreenC1Ev+0x64>)
90014b70:	2101      	movs	r1, #1
90014b72:	f845 3b04 	str.w	r3, [r5], #4
90014b76:	2300      	movs	r3, #0
90014b78:	6042      	str	r2, [r0, #4]
90014b7a:	4604      	mov	r4, r0
90014b7c:	8103      	strh	r3, [r0, #8]
90014b7e:	8143      	strh	r3, [r0, #10]
90014b80:	8183      	strh	r3, [r0, #12]
90014b82:	81c3      	strh	r3, [r0, #14]
90014b84:	8203      	strh	r3, [r0, #16]
90014b86:	8243      	strh	r3, [r0, #18]
90014b88:	8283      	strh	r3, [r0, #20]
90014b8a:	82c3      	strh	r3, [r0, #22]
90014b8c:	6203      	str	r3, [r0, #32]
90014b8e:	8483      	strh	r3, [r0, #36]	; 0x24
90014b90:	84c3      	strh	r3, [r0, #38]	; 0x26
90014b92:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
90014b96:	6343      	str	r3, [r0, #52]	; 0x34
90014b98:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
90014b9c:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
90014ba0:	e9c0 3306 	strd	r3, r3, [r0, #24]
90014ba4:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
90014ba8:	4b09      	ldr	r3, [pc, #36]	; (90014bd0 <_ZN8touchgfx6ScreenC1Ev+0x68>)
90014baa:	4628      	mov	r0, r5
90014bac:	f9b3 6000 	ldrsh.w	r6, [r3]
90014bb0:	6b93      	ldr	r3, [r2, #56]	; 0x38
90014bb2:	4a08      	ldr	r2, [pc, #32]	; (90014bd4 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
90014bb4:	f9b2 1000 	ldrsh.w	r1, [r2]
90014bb8:	4798      	blx	r3
90014bba:	6863      	ldr	r3, [r4, #4]
90014bbc:	4628      	mov	r0, r5
90014bbe:	4631      	mov	r1, r6
90014bc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
90014bc2:	4798      	blx	r3
90014bc4:	4620      	mov	r0, r4
90014bc6:	bd70      	pop	{r4, r5, r6, pc}
90014bc8:	90028ed4 	.word	0x90028ed4
90014bcc:	90028c44 	.word	0x90028c44
90014bd0:	24021c0a 	.word	0x24021c0a
90014bd4:	24021c08 	.word	0x24021c08

90014bd8 <_ZN8touchgfx6Screen4drawEv>:
90014bd8:	4b09      	ldr	r3, [pc, #36]	; (90014c00 <_ZN8touchgfx6Screen4drawEv+0x28>)
90014bda:	b507      	push	{r0, r1, r2, lr}
90014bdc:	f9b3 2000 	ldrsh.w	r2, [r3]
90014be0:	2100      	movs	r1, #0
90014be2:	4b08      	ldr	r3, [pc, #32]	; (90014c04 <_ZN8touchgfx6Screen4drawEv+0x2c>)
90014be4:	9100      	str	r1, [sp, #0]
90014be6:	4669      	mov	r1, sp
90014be8:	f9b3 3000 	ldrsh.w	r3, [r3]
90014bec:	f8ad 2004 	strh.w	r2, [sp, #4]
90014bf0:	f8ad 3006 	strh.w	r3, [sp, #6]
90014bf4:	6803      	ldr	r3, [r0, #0]
90014bf6:	689b      	ldr	r3, [r3, #8]
90014bf8:	4798      	blx	r3
90014bfa:	b003      	add	sp, #12
90014bfc:	f85d fb04 	ldr.w	pc, [sp], #4
90014c00:	24021c08 	.word	0x24021c08
90014c04:	24021c0a 	.word	0x24021c0a

90014c08 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
90014c08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90014c0c:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
90014c10:	b089      	sub	sp, #36	; 0x24
90014c12:	4680      	mov	r8, r0
90014c14:	460c      	mov	r4, r1
90014c16:	2b00      	cmp	r3, #0
90014c18:	4615      	mov	r5, r2
90014c1a:	dd0e      	ble.n	90014c3a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
90014c1c:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
90014c20:	2b00      	cmp	r3, #0
90014c22:	dd0a      	ble.n	90014c3a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
90014c24:	4628      	mov	r0, r5
90014c26:	f7ff ff5b 	bl	90014ae0 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
90014c2a:	4621      	mov	r1, r4
90014c2c:	f7fe fb9b 	bl	90013366 <_ZNK8touchgfx4Rect9intersectERKS0_>
90014c30:	69eb      	ldr	r3, [r5, #28]
90014c32:	b928      	cbnz	r0, 90014c40 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
90014c34:	461d      	mov	r5, r3
90014c36:	2b00      	cmp	r3, #0
90014c38:	d1f4      	bne.n	90014c24 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
90014c3a:	b009      	add	sp, #36	; 0x24
90014c3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90014c40:	ae04      	add	r6, sp, #16
90014c42:	2b00      	cmp	r3, #0
90014c44:	f000 80b5 	beq.w	90014db2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
90014c48:	682b      	ldr	r3, [r5, #0]
90014c4a:	4629      	mov	r1, r5
90014c4c:	a802      	add	r0, sp, #8
90014c4e:	68db      	ldr	r3, [r3, #12]
90014c50:	4798      	blx	r3
90014c52:	4628      	mov	r0, r5
90014c54:	f7ff ff60 	bl	90014b18 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
90014c58:	f8bd 7008 	ldrh.w	r7, [sp, #8]
90014c5c:	4407      	add	r7, r0
90014c5e:	4628      	mov	r0, r5
90014c60:	f7ff ff6e 	bl	90014b40 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
90014c64:	f8bd 300a 	ldrh.w	r3, [sp, #10]
90014c68:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
90014c6c:	b23f      	sxth	r7, r7
90014c6e:	4418      	add	r0, r3
90014c70:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
90014c74:	4621      	mov	r1, r4
90014c76:	f8ad 2014 	strh.w	r2, [sp, #20]
90014c7a:	f8ad 0012 	strh.w	r0, [sp, #18]
90014c7e:	4630      	mov	r0, r6
90014c80:	f8ad 3016 	strh.w	r3, [sp, #22]
90014c84:	f8ad 7010 	strh.w	r7, [sp, #16]
90014c88:	f7fc fae4 	bl	90011254 <_ZN8touchgfx4RectaNERKS0_>
90014c8c:	4628      	mov	r0, r5
90014c8e:	f7ff ff27 	bl	90014ae0 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
90014c92:	ab06      	add	r3, sp, #24
90014c94:	4602      	mov	r2, r0
90014c96:	e896 0003 	ldmia.w	r6, {r0, r1}
90014c9a:	e883 0003 	stmia.w	r3, {r0, r1}
90014c9e:	4611      	mov	r1, r2
90014ca0:	4618      	mov	r0, r3
90014ca2:	f7fc fad7 	bl	90011254 <_ZN8touchgfx4RectaNERKS0_>
90014ca6:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
90014caa:	f9b4 1000 	ldrsh.w	r1, [r4]
90014cae:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
90014cb2:	4299      	cmp	r1, r3
90014cb4:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
90014cb8:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
90014cbc:	d10b      	bne.n	90014cd6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
90014cbe:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
90014cc2:	4552      	cmp	r2, sl
90014cc4:	d107      	bne.n	90014cd6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
90014cc6:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
90014cca:	455a      	cmp	r2, fp
90014ccc:	d103      	bne.n	90014cd6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
90014cce:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
90014cd2:	454a      	cmp	r2, r9
90014cd4:	d06d      	beq.n	90014db2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
90014cd6:	f1bb 0f00 	cmp.w	fp, #0
90014cda:	dd65      	ble.n	90014da8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
90014cdc:	f1b9 0f00 	cmp.w	r9, #0
90014ce0:	dd62      	ble.n	90014da8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
90014ce2:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
90014ce6:	fa1f f08a 	uxth.w	r0, sl
90014cea:	4552      	cmp	r2, sl
90014cec:	9000      	str	r0, [sp, #0]
90014cee:	da12      	bge.n	90014d16 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
90014cf0:	9301      	str	r3, [sp, #4]
90014cf2:	9b00      	ldr	r3, [sp, #0]
90014cf4:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
90014cf8:	f8ad 2012 	strh.w	r2, [sp, #18]
90014cfc:	1a9a      	subs	r2, r3, r2
90014cfe:	f8ad 1010 	strh.w	r1, [sp, #16]
90014d02:	4631      	mov	r1, r6
90014d04:	f8ad 0014 	strh.w	r0, [sp, #20]
90014d08:	4640      	mov	r0, r8
90014d0a:	f8ad 2016 	strh.w	r2, [sp, #22]
90014d0e:	69ea      	ldr	r2, [r5, #28]
90014d10:	f7ff ff7a 	bl	90014c08 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
90014d14:	9b01      	ldr	r3, [sp, #4]
90014d16:	f9b4 2000 	ldrsh.w	r2, [r4]
90014d1a:	b29f      	uxth	r7, r3
90014d1c:	429a      	cmp	r2, r3
90014d1e:	da0d      	bge.n	90014d3c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
90014d20:	f8ad 2010 	strh.w	r2, [sp, #16]
90014d24:	1aba      	subs	r2, r7, r2
90014d26:	f8ad a012 	strh.w	sl, [sp, #18]
90014d2a:	4631      	mov	r1, r6
90014d2c:	f8ad 2014 	strh.w	r2, [sp, #20]
90014d30:	4640      	mov	r0, r8
90014d32:	f8ad 9016 	strh.w	r9, [sp, #22]
90014d36:	69ea      	ldr	r2, [r5, #28]
90014d38:	f7ff ff66 	bl	90014c08 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
90014d3c:	8822      	ldrh	r2, [r4, #0]
90014d3e:	445f      	add	r7, fp
90014d40:	88a3      	ldrh	r3, [r4, #4]
90014d42:	b2bf      	uxth	r7, r7
90014d44:	4413      	add	r3, r2
90014d46:	b23a      	sxth	r2, r7
90014d48:	b29b      	uxth	r3, r3
90014d4a:	b219      	sxth	r1, r3
90014d4c:	4291      	cmp	r1, r2
90014d4e:	dd0d      	ble.n	90014d6c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
90014d50:	1bdb      	subs	r3, r3, r7
90014d52:	f8ad 2010 	strh.w	r2, [sp, #16]
90014d56:	f8ad a012 	strh.w	sl, [sp, #18]
90014d5a:	4631      	mov	r1, r6
90014d5c:	f8ad 3014 	strh.w	r3, [sp, #20]
90014d60:	4640      	mov	r0, r8
90014d62:	f8ad 9016 	strh.w	r9, [sp, #22]
90014d66:	69ea      	ldr	r2, [r5, #28]
90014d68:	f7ff ff4e 	bl	90014c08 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
90014d6c:	88e2      	ldrh	r2, [r4, #6]
90014d6e:	8863      	ldrh	r3, [r4, #2]
90014d70:	4413      	add	r3, r2
90014d72:	9a00      	ldr	r2, [sp, #0]
90014d74:	444a      	add	r2, r9
90014d76:	b29b      	uxth	r3, r3
90014d78:	fa1f f982 	uxth.w	r9, r2
90014d7c:	b219      	sxth	r1, r3
90014d7e:	fa0f f289 	sxth.w	r2, r9
90014d82:	428a      	cmp	r2, r1
90014d84:	da15      	bge.n	90014db2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
90014d86:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
90014d8a:	eba3 0309 	sub.w	r3, r3, r9
90014d8e:	f9b4 0000 	ldrsh.w	r0, [r4]
90014d92:	f8ad 1014 	strh.w	r1, [sp, #20]
90014d96:	4631      	mov	r1, r6
90014d98:	f8ad 0010 	strh.w	r0, [sp, #16]
90014d9c:	f8ad 2012 	strh.w	r2, [sp, #18]
90014da0:	f8ad 3016 	strh.w	r3, [sp, #22]
90014da4:	69ea      	ldr	r2, [r5, #28]
90014da6:	e001      	b.n	90014dac <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
90014da8:	69ea      	ldr	r2, [r5, #28]
90014daa:	4621      	mov	r1, r4
90014dac:	4640      	mov	r0, r8
90014dae:	f7ff ff2b 	bl	90014c08 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
90014db2:	4628      	mov	r0, r5
90014db4:	f7ff fe94 	bl	90014ae0 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
90014db8:	6861      	ldr	r1, [r4, #4]
90014dba:	4602      	mov	r2, r0
90014dbc:	4633      	mov	r3, r6
90014dbe:	6820      	ldr	r0, [r4, #0]
90014dc0:	c303      	stmia	r3!, {r0, r1}
90014dc2:	4611      	mov	r1, r2
90014dc4:	4630      	mov	r0, r6
90014dc6:	f7fc fa45 	bl	90011254 <_ZN8touchgfx4RectaNERKS0_>
90014dca:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
90014dce:	2b00      	cmp	r3, #0
90014dd0:	f77f af33 	ble.w	90014c3a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
90014dd4:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
90014dd8:	2b00      	cmp	r3, #0
90014dda:	f77f af2e 	ble.w	90014c3a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
90014dde:	4628      	mov	r0, r5
90014de0:	f7ff fe9a 	bl	90014b18 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
90014de4:	f8bd 3010 	ldrh.w	r3, [sp, #16]
90014de8:	1a18      	subs	r0, r3, r0
90014dea:	f8ad 0010 	strh.w	r0, [sp, #16]
90014dee:	4628      	mov	r0, r5
90014df0:	f7ff fea6 	bl	90014b40 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
90014df4:	f8bd 3012 	ldrh.w	r3, [sp, #18]
90014df8:	4631      	mov	r1, r6
90014dfa:	1a18      	subs	r0, r3, r0
90014dfc:	f8ad 0012 	strh.w	r0, [sp, #18]
90014e00:	4628      	mov	r0, r5
90014e02:	682b      	ldr	r3, [r5, #0]
90014e04:	689b      	ldr	r3, [r3, #8]
90014e06:	4798      	blx	r3
90014e08:	e717      	b.n	90014c3a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

90014e0a <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
90014e0a:	b570      	push	{r4, r5, r6, lr}
90014e0c:	1d06      	adds	r6, r0, #4
90014e0e:	b086      	sub	sp, #24
90014e10:	460c      	mov	r4, r1
90014e12:	2300      	movs	r3, #0
90014e14:	4631      	mov	r1, r6
90014e16:	4605      	mov	r5, r0
90014e18:	a802      	add	r0, sp, #8
90014e1a:	9301      	str	r3, [sp, #4]
90014e1c:	f7ff fc96 	bl	9001474c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
90014e20:	f8bd 3008 	ldrh.w	r3, [sp, #8]
90014e24:	8822      	ldrh	r2, [r4, #0]
90014e26:	f8bd 100a 	ldrh.w	r1, [sp, #10]
90014e2a:	1ad2      	subs	r2, r2, r3
90014e2c:	8863      	ldrh	r3, [r4, #2]
90014e2e:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
90014e32:	1a5b      	subs	r3, r3, r1
90014e34:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
90014e38:	f8ad 2010 	strh.w	r2, [sp, #16]
90014e3c:	aa01      	add	r2, sp, #4
90014e3e:	f8ad 0014 	strh.w	r0, [sp, #20]
90014e42:	4630      	mov	r0, r6
90014e44:	f8ad 1016 	strh.w	r1, [sp, #22]
90014e48:	a904      	add	r1, sp, #16
90014e4a:	f8ad 3012 	strh.w	r3, [sp, #18]
90014e4e:	f7fc fad9 	bl	90011404 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
90014e52:	9a01      	ldr	r2, [sp, #4]
90014e54:	b11a      	cbz	r2, 90014e5e <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
90014e56:	4621      	mov	r1, r4
90014e58:	4628      	mov	r0, r5
90014e5a:	f7ff fed5 	bl	90014c08 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
90014e5e:	b006      	add	sp, #24
90014e60:	bd70      	pop	{r4, r5, r6, pc}

90014e62 <_ZN8touchgfx6Screen4drawERNS_4RectE>:
90014e62:	4602      	mov	r2, r0
90014e64:	b530      	push	{r4, r5, lr}
90014e66:	4604      	mov	r4, r0
90014e68:	b085      	sub	sp, #20
90014e6a:	f852 0f08 	ldr.w	r0, [r2, #8]!
90014e6e:	460d      	mov	r5, r1
90014e70:	466b      	mov	r3, sp
90014e72:	6851      	ldr	r1, [r2, #4]
90014e74:	c303      	stmia	r3!, {r0, r1}
90014e76:	4629      	mov	r1, r5
90014e78:	4668      	mov	r0, sp
90014e7a:	f7fc f9eb 	bl	90011254 <_ZN8touchgfx4RectaNERKS0_>
90014e7e:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
90014e82:	b12b      	cbz	r3, 90014e90 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
90014e84:	4669      	mov	r1, sp
90014e86:	4620      	mov	r0, r4
90014e88:	f7ff ffbf 	bl	90014e0a <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
90014e8c:	b005      	add	sp, #20
90014e8e:	bd30      	pop	{r4, r5, pc}
90014e90:	3404      	adds	r4, #4
90014e92:	a802      	add	r0, sp, #8
90014e94:	4621      	mov	r1, r4
90014e96:	f7ff fc59 	bl	9001474c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
90014e9a:	f8bd 3000 	ldrh.w	r3, [sp]
90014e9e:	f8bd 2008 	ldrh.w	r2, [sp, #8]
90014ea2:	4669      	mov	r1, sp
90014ea4:	4620      	mov	r0, r4
90014ea6:	1a9b      	subs	r3, r3, r2
90014ea8:	f8bd 200a 	ldrh.w	r2, [sp, #10]
90014eac:	f8ad 3000 	strh.w	r3, [sp]
90014eb0:	f8bd 3002 	ldrh.w	r3, [sp, #2]
90014eb4:	1a9b      	subs	r3, r3, r2
90014eb6:	f8ad 3002 	strh.w	r3, [sp, #2]
90014eba:	f7fc fa6a 	bl	90011392 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
90014ebe:	e7e5      	b.n	90014e8c <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

90014ec0 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
90014ec0:	460b      	mov	r3, r1
90014ec2:	680a      	ldr	r2, [r1, #0]
90014ec4:	1d01      	adds	r1, r0, #4
90014ec6:	6992      	ldr	r2, [r2, #24]
90014ec8:	4618      	mov	r0, r3
90014eca:	4710      	bx	r2

90014ecc <_ZN8touchgfx12TextProviderC1Ev>:
90014ecc:	b538      	push	{r3, r4, r5, lr}
90014ece:	2500      	movs	r5, #0
90014ed0:	2302      	movs	r3, #2
90014ed2:	4604      	mov	r4, r0
90014ed4:	220e      	movs	r2, #14
90014ed6:	7403      	strb	r3, [r0, #16]
90014ed8:	4629      	mov	r1, r5
90014eda:	6145      	str	r5, [r0, #20]
90014edc:	7605      	strb	r5, [r0, #24]
90014ede:	83c5      	strh	r5, [r0, #30]
90014ee0:	8405      	strh	r5, [r0, #32]
90014ee2:	86c5      	strh	r5, [r0, #54]	; 0x36
90014ee4:	8705      	strh	r5, [r0, #56]	; 0x38
90014ee6:	87c5      	strh	r5, [r0, #62]	; 0x3e
90014ee8:	f8a0 5040 	strh.w	r5, [r0, #64]	; 0x40
90014eec:	e9c0 5500 	strd	r5, r5, [r0]
90014ef0:	e9c0 5511 	strd	r5, r5, [r0, #68]	; 0x44
90014ef4:	304c      	adds	r0, #76	; 0x4c
90014ef6:	f00f fbd3 	bl	900246a0 <memset>
90014efa:	2301      	movs	r3, #1
90014efc:	4620      	mov	r0, r4
90014efe:	f8a4 505a 	strh.w	r5, [r4, #90]	; 0x5a
90014f02:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
90014f06:	f8a4 505e 	strh.w	r5, [r4, #94]	; 0x5e
90014f0a:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
90014f0e:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
90014f12:	f7ef ff25 	bl	90004d60 <_ZN8touchgfx12TextProvider18initializeInternalEv>
90014f16:	4620      	mov	r0, r4
90014f18:	bd38      	pop	{r3, r4, r5, pc}

90014f1a <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
90014f1a:	b530      	push	{r4, r5, lr}
90014f1c:	2500      	movs	r5, #0
90014f1e:	2401      	movs	r4, #1
90014f20:	6843      	ldr	r3, [r0, #4]
90014f22:	b913      	cbnz	r3, 90014f2a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
90014f24:	6803      	ldr	r3, [r0, #0]
90014f26:	b313      	cbz	r3, 90014f6e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
90014f28:	6043      	str	r3, [r0, #4]
90014f2a:	7e03      	ldrb	r3, [r0, #24]
90014f2c:	b143      	cbz	r3, 90014f40 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
90014f2e:	6943      	ldr	r3, [r0, #20]
90014f30:	b12b      	cbz	r3, 90014f3e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
90014f32:	881a      	ldrh	r2, [r3, #0]
90014f34:	b11a      	cbz	r2, 90014f3e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
90014f36:	1c9a      	adds	r2, r3, #2
90014f38:	6142      	str	r2, [r0, #20]
90014f3a:	8818      	ldrh	r0, [r3, #0]
90014f3c:	bd30      	pop	{r4, r5, pc}
90014f3e:	7605      	strb	r5, [r0, #24]
90014f40:	6843      	ldr	r3, [r0, #4]
90014f42:	8819      	ldrh	r1, [r3, #0]
90014f44:	b199      	cbz	r1, 90014f6e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
90014f46:	1c9a      	adds	r2, r3, #2
90014f48:	2902      	cmp	r1, #2
90014f4a:	6042      	str	r2, [r0, #4]
90014f4c:	d1f5      	bne.n	90014f3a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
90014f4e:	7c03      	ldrb	r3, [r0, #16]
90014f50:	2b01      	cmp	r3, #1
90014f52:	d8e5      	bhi.n	90014f20 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
90014f54:	1c5a      	adds	r2, r3, #1
90014f56:	3302      	adds	r3, #2
90014f58:	7402      	strb	r2, [r0, #16]
90014f5a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
90014f5e:	6143      	str	r3, [r0, #20]
90014f60:	2b00      	cmp	r3, #0
90014f62:	d0dd      	beq.n	90014f20 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
90014f64:	881b      	ldrh	r3, [r3, #0]
90014f66:	2b00      	cmp	r3, #0
90014f68:	d0da      	beq.n	90014f20 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
90014f6a:	7604      	strb	r4, [r0, #24]
90014f6c:	e7d8      	b.n	90014f20 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
90014f6e:	2000      	movs	r0, #0
90014f70:	e7e4      	b.n	90014f3c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

90014f72 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
90014f72:	6001      	str	r1, [r0, #0]
90014f74:	2100      	movs	r1, #0
90014f76:	b430      	push	{r4, r5}
90014f78:	6041      	str	r1, [r0, #4]
90014f7a:	6815      	ldr	r5, [r2, #0]
90014f7c:	6085      	str	r5, [r0, #8]
90014f7e:	6852      	ldr	r2, [r2, #4]
90014f80:	6443      	str	r3, [r0, #68]	; 0x44
90014f82:	9b02      	ldr	r3, [sp, #8]
90014f84:	60c2      	str	r2, [r0, #12]
90014f86:	7401      	strb	r1, [r0, #16]
90014f88:	6141      	str	r1, [r0, #20]
90014f8a:	7601      	strb	r1, [r0, #24]
90014f8c:	8701      	strh	r1, [r0, #56]	; 0x38
90014f8e:	8401      	strh	r1, [r0, #32]
90014f90:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
90014f94:	6483      	str	r3, [r0, #72]	; 0x48
90014f96:	bc30      	pop	{r4, r5}
90014f98:	f7ef bee2 	b.w	90004d60 <_ZN8touchgfx12TextProvider18initializeInternalEv>

90014f9c <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
90014f9c:	b5f0      	push	{r4, r5, r6, r7, lr}
90014f9e:	4605      	mov	r5, r0
90014fa0:	4608      	mov	r0, r1
90014fa2:	b1f1      	cbz	r1, 90014fe2 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
90014fa4:	f105 044c 	add.w	r4, r5, #76	; 0x4c
90014fa8:	460b      	mov	r3, r1
90014faa:	f101 0708 	add.w	r7, r1, #8
90014fae:	4622      	mov	r2, r4
90014fb0:	6818      	ldr	r0, [r3, #0]
90014fb2:	3308      	adds	r3, #8
90014fb4:	f853 1c04 	ldr.w	r1, [r3, #-4]
90014fb8:	4626      	mov	r6, r4
90014fba:	42bb      	cmp	r3, r7
90014fbc:	c603      	stmia	r6!, {r0, r1}
90014fbe:	4634      	mov	r4, r6
90014fc0:	d1f6      	bne.n	90014fb0 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
90014fc2:	6818      	ldr	r0, [r3, #0]
90014fc4:	6030      	str	r0, [r6, #0]
90014fc6:	4610      	mov	r0, r2
90014fc8:	889b      	ldrh	r3, [r3, #4]
90014fca:	80b3      	strh	r3, [r6, #4]
90014fcc:	f895 3059 	ldrb.w	r3, [r5, #89]	; 0x59
90014fd0:	015b      	lsls	r3, r3, #5
90014fd2:	f403 7180 	and.w	r1, r3, #256	; 0x100
90014fd6:	f895 3052 	ldrb.w	r3, [r5, #82]	; 0x52
90014fda:	430b      	orrs	r3, r1
90014fdc:	425b      	negs	r3, r3
90014fde:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
90014fe2:	bdf0      	pop	{r4, r5, r6, r7, pc}

90014fe4 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
90014fe4:	b538      	push	{r3, r4, r5, lr}
90014fe6:	460c      	mov	r4, r1
90014fe8:	6811      	ldr	r1, [r2, #0]
90014fea:	4610      	mov	r0, r2
90014fec:	68cd      	ldr	r5, [r1, #12]
90014fee:	4619      	mov	r1, r3
90014ff0:	47a8      	blx	r5
90014ff2:	2800      	cmp	r0, #0
90014ff4:	bf08      	it	eq
90014ff6:	4620      	moveq	r0, r4
90014ff8:	bd38      	pop	{r3, r4, r5, pc}
	...

90014ffc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
90014ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
90014ffe:	4604      	mov	r4, r0
90015000:	4615      	mov	r5, r2
90015002:	4608      	mov	r0, r1
90015004:	b93a      	cbnz	r2, 90015016 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
90015006:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
9001500a:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
9001500e:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
90015012:	4628      	mov	r0, r5
90015014:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
90015016:	f892 c00d 	ldrb.w	ip, [r2, #13]
9001501a:	f46f 6763 	mvn.w	r7, #3632	; 0xe30
9001501e:	8893      	ldrh	r3, [r2, #4]
90015020:	ea4f 160c 	mov.w	r6, ip, lsl #4
90015024:	f406 7280 	and.w	r2, r6, #256	; 0x100
90015028:	79ee      	ldrb	r6, [r5, #7]
9001502a:	4316      	orrs	r6, r2
9001502c:	19da      	adds	r2, r3, r7
9001502e:	b291      	uxth	r1, r2
90015030:	b2b7      	uxth	r7, r6
90015032:	291d      	cmp	r1, #29
90015034:	d87b      	bhi.n	9001512e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x132>
90015036:	2201      	movs	r2, #1
90015038:	10f6      	asrs	r6, r6, #3
9001503a:	408a      	lsls	r2, r1
9001503c:	4974      	ldr	r1, [pc, #464]	; (90015210 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x214>)
9001503e:	420a      	tst	r2, r1
90015040:	d12e      	bne.n	900150a0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa4>
90015042:	f412 7f60 	tst.w	r2, #896	; 0x380
90015046:	d072      	beq.n	9001512e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x132>
90015048:	f104 024c 	add.w	r2, r4, #76	; 0x4c
9001504c:	462b      	mov	r3, r5
9001504e:	f105 0e08 	add.w	lr, r5, #8
90015052:	4615      	mov	r5, r2
90015054:	6818      	ldr	r0, [r3, #0]
90015056:	3308      	adds	r3, #8
90015058:	f853 1c04 	ldr.w	r1, [r3, #-4]
9001505c:	4694      	mov	ip, r2
9001505e:	4573      	cmp	r3, lr
90015060:	e8ac 0003 	stmia.w	ip!, {r0, r1}
90015064:	4662      	mov	r2, ip
90015066:	d1f5      	bne.n	90015054 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x58>
90015068:	6818      	ldr	r0, [r3, #0]
9001506a:	f8cc 0000 	str.w	r0, [ip]
9001506e:	889b      	ldrh	r3, [r3, #4]
90015070:	f8ac 3004 	strh.w	r3, [ip, #4]
90015074:	b2b3      	uxth	r3, r6
90015076:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
9001507a:	f894 0059 	ldrb.w	r0, [r4, #89]	; 0x59
9001507e:	1aca      	subs	r2, r1, r3
90015080:	1bcf      	subs	r7, r1, r7
90015082:	f020 0060 	bic.w	r0, r0, #96	; 0x60
90015086:	b292      	uxth	r2, r2
90015088:	1afb      	subs	r3, r7, r3
9001508a:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
9001508e:	10d2      	asrs	r2, r2, #3
90015090:	f002 0260 	and.w	r2, r2, #96	; 0x60
90015094:	4302      	orrs	r2, r0
90015096:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
9001509a:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
9001509e:	e7b8      	b.n	90015012 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
900150a0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
900150a2:	eb04 0343 	add.w	r3, r4, r3, lsl #1
900150a6:	8c59      	ldrh	r1, [r3, #34]	; 0x22
900150a8:	f640 6333 	movw	r3, #3635	; 0xe33
900150ac:	4299      	cmp	r1, r3
900150ae:	d110      	bne.n	900150d2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xd6>
900150b0:	6803      	ldr	r3, [r0, #0]
900150b2:	68db      	ldr	r3, [r3, #12]
900150b4:	4798      	blx	r3
900150b6:	7b41      	ldrb	r1, [r0, #13]
900150b8:	00cb      	lsls	r3, r1, #3
900150ba:	f403 7280 	and.w	r2, r3, #256	; 0x100
900150be:	7a03      	ldrb	r3, [r0, #8]
900150c0:	0648      	lsls	r0, r1, #25
900150c2:	ea43 0302 	orr.w	r3, r3, r2
900150c6:	bf44      	itt	mi
900150c8:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
900150cc:	b21b      	sxthmi	r3, r3
900150ce:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
900150d2:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
900150d6:	462a      	mov	r2, r5
900150d8:	f105 0c08 	add.w	ip, r5, #8
900150dc:	443b      	add	r3, r7
900150de:	4433      	add	r3, r6
900150e0:	f104 064c 	add.w	r6, r4, #76	; 0x4c
900150e4:	b29b      	uxth	r3, r3
900150e6:	4635      	mov	r5, r6
900150e8:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
900150ec:	6810      	ldr	r0, [r2, #0]
900150ee:	3208      	adds	r2, #8
900150f0:	f852 1c04 	ldr.w	r1, [r2, #-4]
900150f4:	4637      	mov	r7, r6
900150f6:	4562      	cmp	r2, ip
900150f8:	c703      	stmia	r7!, {r0, r1}
900150fa:	463e      	mov	r6, r7
900150fc:	d1f6      	bne.n	900150ec <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xf0>
900150fe:	6810      	ldr	r0, [r2, #0]
90015100:	6038      	str	r0, [r7, #0]
90015102:	8892      	ldrh	r2, [r2, #4]
90015104:	80ba      	strh	r2, [r7, #4]
90015106:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
9001510a:	10db      	asrs	r3, r3, #3
9001510c:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
90015110:	f003 0360 	and.w	r3, r3, #96	; 0x60
90015114:	f022 0260 	bic.w	r2, r2, #96	; 0x60
90015118:	4313      	orrs	r3, r2
9001511a:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
9001511e:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
90015122:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
90015126:	1a9b      	subs	r3, r3, r2
90015128:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
9001512c:	e771      	b.n	90015012 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
9001512e:	f023 0204 	bic.w	r2, r3, #4
90015132:	f640 611b 	movw	r1, #3611	; 0xe1b
90015136:	428a      	cmp	r2, r1
90015138:	d003      	beq.n	90015142 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x146>
9001513a:	f640 621d 	movw	r2, #3613	; 0xe1d
9001513e:	4293      	cmp	r3, r2
90015140:	d120      	bne.n	90015184 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x188>
90015142:	3b01      	subs	r3, #1
90015144:	4602      	mov	r2, r0
90015146:	4629      	mov	r1, r5
90015148:	4620      	mov	r0, r4
9001514a:	b29b      	uxth	r3, r3
9001514c:	f7ff ff4a 	bl	90014fe4 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
90015150:	7b41      	ldrb	r1, [r0, #13]
90015152:	00cb      	lsls	r3, r1, #3
90015154:	0649      	lsls	r1, r1, #25
90015156:	f403 7280 	and.w	r2, r3, #256	; 0x100
9001515a:	7a03      	ldrb	r3, [r0, #8]
9001515c:	ea43 0302 	orr.w	r3, r3, r2
90015160:	bf44      	itt	mi
90015162:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
90015166:	b21b      	sxthmi	r3, r3
90015168:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
9001516c:	7b6b      	ldrb	r3, [r5, #13]
9001516e:	7aaa      	ldrb	r2, [r5, #10]
90015170:	005b      	lsls	r3, r3, #1
90015172:	f403 7380 	and.w	r3, r3, #256	; 0x100
90015176:	4313      	orrs	r3, r2
90015178:	115a      	asrs	r2, r3, #5
9001517a:	eb02 0393 	add.w	r3, r2, r3, lsr #2
9001517e:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
90015182:	e035      	b.n	900151f0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f4>
90015184:	ea4f 02cc 	mov.w	r2, ip, lsl #3
90015188:	f01c 0f40 	tst.w	ip, #64	; 0x40
9001518c:	f402 7180 	and.w	r1, r2, #256	; 0x100
90015190:	7a2a      	ldrb	r2, [r5, #8]
90015192:	ea42 0201 	orr.w	r2, r2, r1
90015196:	f640 6109 	movw	r1, #3593	; 0xe09
9001519a:	bf1c      	itt	ne
9001519c:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
900151a0:	b212      	sxthne	r2, r2
900151a2:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
900151a6:	f023 0210 	bic.w	r2, r3, #16
900151aa:	428a      	cmp	r2, r1
900151ac:	d003      	beq.n	900151b6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ba>
900151ae:	f640 6213 	movw	r2, #3603	; 0xe13
900151b2:	4293      	cmp	r3, r2
900151b4:	d129      	bne.n	9001520a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x20e>
900151b6:	7b6e      	ldrb	r6, [r5, #13]
900151b8:	4629      	mov	r1, r5
900151ba:	0076      	lsls	r6, r6, #1
900151bc:	f406 7280 	and.w	r2, r6, #256	; 0x100
900151c0:	7aae      	ldrb	r6, [r5, #10]
900151c2:	4316      	orrs	r6, r2
900151c4:	f640 6213 	movw	r2, #3603	; 0xe13
900151c8:	4293      	cmp	r3, r2
900151ca:	4602      	mov	r2, r0
900151cc:	4620      	mov	r0, r4
900151ce:	bf16      	itet	ne
900151d0:	f103 33ff 	addne.w	r3, r3, #4294967295
900151d4:	f640 630c 	movweq	r3, #3596	; 0xe0c
900151d8:	b29b      	uxthne	r3, r3
900151da:	f7ff ff03 	bl	90014fe4 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
900151de:	7b43      	ldrb	r3, [r0, #13]
900151e0:	7a82      	ldrb	r2, [r0, #10]
900151e2:	005b      	lsls	r3, r3, #1
900151e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
900151e8:	4313      	orrs	r3, r2
900151ea:	1af6      	subs	r6, r6, r3
900151ec:	f8a4 605e 	strh.w	r6, [r4, #94]	; 0x5e
900151f0:	7b69      	ldrb	r1, [r5, #13]
900151f2:	00cb      	lsls	r3, r1, #3
900151f4:	f403 7280 	and.w	r2, r3, #256	; 0x100
900151f8:	7a2b      	ldrb	r3, [r5, #8]
900151fa:	4313      	orrs	r3, r2
900151fc:	064a      	lsls	r2, r1, #25
900151fe:	bf44      	itt	mi
90015200:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
90015204:	b21b      	sxthmi	r3, r3
90015206:	1bdb      	subs	r3, r3, r7
90015208:	e747      	b.n	9001509a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9e>
9001520a:	2300      	movs	r3, #0
9001520c:	e7b7      	b.n	9001517e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x182>
9001520e:	bf00      	nop
90015210:	3fc00079 	.word	0x3fc00079

90015214 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
90015214:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
90015218:	4604      	mov	r4, r0
9001521a:	b942      	cbnz	r2, 9001522e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
9001521c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
90015220:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
90015224:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
90015228:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
9001522c:	e047      	b.n	900152be <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
9001522e:	7b51      	ldrb	r1, [r2, #13]
90015230:	8893      	ldrh	r3, [r2, #4]
90015232:	010d      	lsls	r5, r1, #4
90015234:	f405 7080 	and.w	r0, r5, #256	; 0x100
90015238:	79d5      	ldrb	r5, [r2, #7]
9001523a:	4305      	orrs	r5, r0
9001523c:	2d04      	cmp	r5, #4
9001523e:	bfcc      	ite	gt
90015240:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
90015244:	f04f 0e01 	movle.w	lr, #1
90015248:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
9001524c:	f200 80ab 	bhi.w	900153a6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
90015250:	f240 60e7 	movw	r0, #1767	; 0x6e7
90015254:	4283      	cmp	r3, r0
90015256:	d216      	bcs.n	90015286 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
90015258:	f240 605b 	movw	r0, #1627	; 0x65b
9001525c:	4283      	cmp	r3, r0
9001525e:	d859      	bhi.n	90015314 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
90015260:	f240 6057 	movw	r0, #1623	; 0x657
90015264:	4283      	cmp	r3, r0
90015266:	d20e      	bcs.n	90015286 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
90015268:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
9001526c:	d24a      	bcs.n	90015304 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
9001526e:	f240 604e 	movw	r0, #1614	; 0x64e
90015272:	4283      	cmp	r3, r0
90015274:	d207      	bcs.n	90015286 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
90015276:	f240 601a 	movw	r0, #1562	; 0x61a
9001527a:	4283      	cmp	r3, r0
9001527c:	d02a      	beq.n	900152d4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
9001527e:	d821      	bhi.n	900152c4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
90015280:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
90015284:	d35b      	bcc.n	9001533e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
90015286:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	; 0x5a
9001528a:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
9001528e:	f040 80d0 	bne.w	90015432 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
90015292:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	; 0x5c
90015296:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
9001529a:	f040 80ca 	bne.w	90015432 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
9001529e:	00cb      	lsls	r3, r1, #3
900152a0:	0649      	lsls	r1, r1, #25
900152a2:	f403 7080 	and.w	r0, r3, #256	; 0x100
900152a6:	7a13      	ldrb	r3, [r2, #8]
900152a8:	ea43 0300 	orr.w	r3, r3, r0
900152ac:	bf44      	itt	mi
900152ae:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
900152b2:	b21b      	sxthmi	r3, r3
900152b4:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
900152b8:	1b5d      	subs	r5, r3, r5
900152ba:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
900152be:	4610      	mov	r0, r2
900152c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
900152c4:	f240 604b 	movw	r0, #1611	; 0x64b
900152c8:	4283      	cmp	r3, r0
900152ca:	d338      	bcc.n	9001533e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
900152cc:	f240 604c 	movw	r0, #1612	; 0x64c
900152d0:	4283      	cmp	r3, r0
900152d2:	d9d8      	bls.n	90015286 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
900152d4:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	; 0x5a
900152d8:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	; 0x5c
900152dc:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
900152e0:	f040 80f3 	bne.w	900154ca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
900152e4:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
900152e8:	f040 80ef 	bne.w	900154ca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
900152ec:	00cb      	lsls	r3, r1, #3
900152ee:	064e      	lsls	r6, r1, #25
900152f0:	f403 7080 	and.w	r0, r3, #256	; 0x100
900152f4:	7a13      	ldrb	r3, [r2, #8]
900152f6:	ea43 0300 	orr.w	r3, r3, r0
900152fa:	bf44      	itt	mi
900152fc:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
90015300:	b21b      	sxthmi	r3, r3
90015302:	e7d9      	b.n	900152b8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
90015304:	f240 6054 	movw	r0, #1620	; 0x654
90015308:	4283      	cmp	r3, r0
9001530a:	d8e3      	bhi.n	900152d4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
9001530c:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
90015310:	d9e0      	bls.n	900152d4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
90015312:	e7b8      	b.n	90015286 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
90015314:	f240 6074 	movw	r0, #1652	; 0x674
90015318:	4283      	cmp	r3, r0
9001531a:	d0b4      	beq.n	90015286 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
9001531c:	d82d      	bhi.n	9001537a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
9001531e:	f240 605e 	movw	r0, #1630	; 0x65e
90015322:	4283      	cmp	r3, r0
90015324:	d804      	bhi.n	90015330 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
90015326:	f240 605d 	movw	r0, #1629	; 0x65d
9001532a:	4283      	cmp	r3, r0
9001532c:	d3d2      	bcc.n	900152d4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
9001532e:	e7aa      	b.n	90015286 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
90015330:	f240 605f 	movw	r0, #1631	; 0x65f
90015334:	4283      	cmp	r3, r0
90015336:	d0cd      	beq.n	900152d4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
90015338:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
9001533c:	d0a3      	beq.n	90015286 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
9001533e:	00cb      	lsls	r3, r1, #3
90015340:	0649      	lsls	r1, r1, #25
90015342:	f403 7080 	and.w	r0, r3, #256	; 0x100
90015346:	7a13      	ldrb	r3, [r2, #8]
90015348:	ea43 0300 	orr.w	r3, r3, r0
9001534c:	bf44      	itt	mi
9001534e:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
90015352:	b21b      	sxthmi	r3, r3
90015354:	1b5d      	subs	r5, r3, r5
90015356:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
9001535a:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
9001535e:	7b53      	ldrb	r3, [r2, #13]
90015360:	015b      	lsls	r3, r3, #5
90015362:	f403 7180 	and.w	r1, r3, #256	; 0x100
90015366:	7993      	ldrb	r3, [r2, #6]
90015368:	430b      	orrs	r3, r1
9001536a:	2105      	movs	r1, #5
9001536c:	005b      	lsls	r3, r3, #1
9001536e:	fb93 f3f1 	sdiv	r3, r3, r1
90015372:	f992 1009 	ldrsb.w	r1, [r2, #9]
90015376:	440b      	add	r3, r1
90015378:	e756      	b.n	90015228 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
9001537a:	f240 60e2 	movw	r0, #1762	; 0x6e2
9001537e:	4283      	cmp	r3, r0
90015380:	d809      	bhi.n	90015396 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
90015382:	f240 60df 	movw	r0, #1759	; 0x6df
90015386:	4283      	cmp	r3, r0
90015388:	f4bf af7d 	bcs.w	90015286 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
9001538c:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
90015390:	2b05      	cmp	r3, #5
90015392:	d8d4      	bhi.n	9001533e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
90015394:	e777      	b.n	90015286 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
90015396:	f240 60e3 	movw	r0, #1763	; 0x6e3
9001539a:	4283      	cmp	r3, r0
9001539c:	d09a      	beq.n	900152d4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
9001539e:	f240 60e4 	movw	r0, #1764	; 0x6e4
900153a2:	4283      	cmp	r3, r0
900153a4:	e7ca      	b.n	9001533c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
900153a6:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
900153aa:	d22b      	bcs.n	90015404 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
900153ac:	f640 00ed 	movw	r0, #2285	; 0x8ed
900153b0:	4283      	cmp	r3, r0
900153b2:	d28f      	bcs.n	900152d4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
900153b4:	f640 00e5 	movw	r0, #2277	; 0x8e5
900153b8:	4283      	cmp	r3, r0
900153ba:	d816      	bhi.n	900153ea <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
900153bc:	f640 00e4 	movw	r0, #2276	; 0x8e4
900153c0:	4283      	cmp	r3, r0
900153c2:	f4bf af60 	bcs.w	90015286 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
900153c6:	f240 60ec 	movw	r0, #1772	; 0x6ec
900153ca:	4283      	cmp	r3, r0
900153cc:	d80a      	bhi.n	900153e4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
900153ce:	f240 60eb 	movw	r0, #1771	; 0x6eb
900153d2:	4283      	cmp	r3, r0
900153d4:	f4bf af57 	bcs.w	90015286 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
900153d8:	f240 60ea 	movw	r0, #1770	; 0x6ea
900153dc:	4283      	cmp	r3, r0
900153de:	f43f af79 	beq.w	900152d4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
900153e2:	e7ac      	b.n	9001533e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
900153e4:	f240 60ed 	movw	r0, #1773	; 0x6ed
900153e8:	e7f8      	b.n	900153dc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
900153ea:	f640 00e8 	movw	r0, #2280	; 0x8e8
900153ee:	4283      	cmp	r3, r0
900153f0:	d802      	bhi.n	900153f8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
900153f2:	f640 00e7 	movw	r0, #2279	; 0x8e7
900153f6:	e798      	b.n	9001532a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
900153f8:	f640 00e9 	movw	r0, #2281	; 0x8e9
900153fc:	4283      	cmp	r3, r0
900153fe:	f47f af42 	bne.w	90015286 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
90015402:	e767      	b.n	900152d4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
90015404:	f640 00f6 	movw	r0, #2294	; 0x8f6
90015408:	4283      	cmp	r3, r0
9001540a:	f43f af63 	beq.w	900152d4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
9001540e:	d802      	bhi.n	90015416 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
90015410:	f640 00f2 	movw	r0, #2290	; 0x8f2
90015414:	e7f2      	b.n	900153fc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
90015416:	f640 00fa 	movw	r0, #2298	; 0x8fa
9001541a:	4283      	cmp	r3, r0
9001541c:	d805      	bhi.n	9001542a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
9001541e:	f640 00f9 	movw	r0, #2297	; 0x8f9
90015422:	4283      	cmp	r3, r0
90015424:	f4ff af2f 	bcc.w	90015286 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
90015428:	e754      	b.n	900152d4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
9001542a:	f640 00fe 	movw	r0, #2302	; 0x8fe
9001542e:	4283      	cmp	r3, r0
90015430:	e7af      	b.n	90015392 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
90015432:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
90015436:	4617      	mov	r7, r2
90015438:	f102 0808 	add.w	r8, r2, #8
9001543c:	4666      	mov	r6, ip
9001543e:	6838      	ldr	r0, [r7, #0]
90015440:	3708      	adds	r7, #8
90015442:	f857 1c04 	ldr.w	r1, [r7, #-4]
90015446:	46e6      	mov	lr, ip
90015448:	4547      	cmp	r7, r8
9001544a:	e8ae 0003 	stmia.w	lr!, {r0, r1}
9001544e:	46f4      	mov	ip, lr
90015450:	d1f5      	bne.n	9001543e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
90015452:	6838      	ldr	r0, [r7, #0]
90015454:	f8ce 0000 	str.w	r0, [lr]
90015458:	88b9      	ldrh	r1, [r7, #4]
9001545a:	f8ae 1004 	strh.w	r1, [lr, #4]
9001545e:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
90015462:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
90015466:	d009      	beq.n	9001547c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x268>
90015468:	7b51      	ldrb	r1, [r2, #13]
9001546a:	7992      	ldrb	r2, [r2, #6]
9001546c:	0149      	lsls	r1, r1, #5
9001546e:	f401 7180 	and.w	r1, r1, #256	; 0x100
90015472:	4311      	orrs	r1, r2
90015474:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
90015478:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
9001547c:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
90015480:	b2ad      	uxth	r5, r5
90015482:	d00d      	beq.n	900154a0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28c>
90015484:	442b      	add	r3, r5
90015486:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
9001548a:	b29b      	uxth	r3, r3
9001548c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
90015490:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
90015494:	10db      	asrs	r3, r3, #3
90015496:	f003 0360 	and.w	r3, r3, #96	; 0x60
9001549a:	4313      	orrs	r3, r2
9001549c:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
900154a0:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
900154a4:	00cb      	lsls	r3, r1, #3
900154a6:	064f      	lsls	r7, r1, #25
900154a8:	f403 7280 	and.w	r2, r3, #256	; 0x100
900154ac:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
900154b0:	ea43 0302 	orr.w	r3, r3, r2
900154b4:	bf44      	itt	mi
900154b6:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
900154ba:	b21b      	sxthmi	r3, r3
900154bc:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
900154c0:	1b5b      	subs	r3, r3, r5
900154c2:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
900154c6:	4632      	mov	r2, r6
900154c8:	e6f9      	b.n	900152be <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
900154ca:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
900154ce:	4617      	mov	r7, r2
900154d0:	f102 0908 	add.w	r9, r2, #8
900154d4:	4666      	mov	r6, ip
900154d6:	6838      	ldr	r0, [r7, #0]
900154d8:	3708      	adds	r7, #8
900154da:	f857 1c04 	ldr.w	r1, [r7, #-4]
900154de:	46e0      	mov	r8, ip
900154e0:	454f      	cmp	r7, r9
900154e2:	e8a8 0003 	stmia.w	r8!, {r0, r1}
900154e6:	46c4      	mov	ip, r8
900154e8:	d1f5      	bne.n	900154d6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c2>
900154ea:	6838      	ldr	r0, [r7, #0]
900154ec:	f8c8 0000 	str.w	r0, [r8]
900154f0:	88b9      	ldrh	r1, [r7, #4]
900154f2:	f8a8 1004 	strh.w	r1, [r8, #4]
900154f6:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
900154fa:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
900154fe:	d009      	beq.n	90015514 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x300>
90015500:	7b51      	ldrb	r1, [r2, #13]
90015502:	7992      	ldrb	r2, [r2, #6]
90015504:	0149      	lsls	r1, r1, #5
90015506:	f401 7180 	and.w	r1, r1, #256	; 0x100
9001550a:	4311      	orrs	r1, r2
9001550c:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
90015510:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
90015514:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
90015518:	d00e      	beq.n	90015538 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x324>
9001551a:	eba3 030e 	sub.w	r3, r3, lr
9001551e:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
90015522:	b29b      	uxth	r3, r3
90015524:	f022 0260 	bic.w	r2, r2, #96	; 0x60
90015528:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
9001552c:	10db      	asrs	r3, r3, #3
9001552e:	f003 0360 	and.w	r3, r3, #96	; 0x60
90015532:	4313      	orrs	r3, r2
90015534:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
90015538:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
9001553c:	00cb      	lsls	r3, r1, #3
9001553e:	0648      	lsls	r0, r1, #25
90015540:	f403 7280 	and.w	r2, r3, #256	; 0x100
90015544:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
90015548:	ea43 0302 	orr.w	r3, r3, r2
9001554c:	bf44      	itt	mi
9001554e:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
90015552:	b21b      	sxthmi	r3, r3
90015554:	1b5d      	subs	r5, r3, r5
90015556:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
9001555a:	e7b4      	b.n	900154c6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>

9001555c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
9001555c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90015560:	461e      	mov	r6, r3
90015562:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
90015564:	4604      	mov	r4, r0
90015566:	4617      	mov	r7, r2
90015568:	eb00 0343 	add.w	r3, r0, r3, lsl #1
9001556c:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
90015570:	f7ef fba6 	bl	90004cc0 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
90015574:	4605      	mov	r5, r0
90015576:	b918      	cbnz	r0, 90015580 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
90015578:	6030      	str	r0, [r6, #0]
9001557a:	4628      	mov	r0, r5
9001557c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
90015580:	683b      	ldr	r3, [r7, #0]
90015582:	4601      	mov	r1, r0
90015584:	4638      	mov	r0, r7
90015586:	68db      	ldr	r3, [r3, #12]
90015588:	4798      	blx	r3
9001558a:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
9001558e:	4602      	mov	r2, r0
90015590:	6030      	str	r0, [r6, #0]
90015592:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
90015596:	d213      	bcs.n	900155c0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
90015598:	4643      	mov	r3, r8
9001559a:	4639      	mov	r1, r7
9001559c:	4620      	mov	r0, r4
9001559e:	f7ff fe39 	bl	90015214 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
900155a2:	6030      	str	r0, [r6, #0]
900155a4:	6833      	ldr	r3, [r6, #0]
900155a6:	b143      	cbz	r3, 900155ba <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
900155a8:	7b5a      	ldrb	r2, [r3, #13]
900155aa:	7a9b      	ldrb	r3, [r3, #10]
900155ac:	0052      	lsls	r2, r2, #1
900155ae:	f402 7280 	and.w	r2, r2, #256	; 0x100
900155b2:	4313      	orrs	r3, r2
900155b4:	bf0c      	ite	eq
900155b6:	2301      	moveq	r3, #1
900155b8:	2300      	movne	r3, #0
900155ba:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
900155be:	e7dc      	b.n	9001557a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
900155c0:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
900155c4:	b29b      	uxth	r3, r3
900155c6:	2b7f      	cmp	r3, #127	; 0x7f
900155c8:	d804      	bhi.n	900155d4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
900155ca:	4639      	mov	r1, r7
900155cc:	4620      	mov	r0, r4
900155ce:	f7ff fd15 	bl	90014ffc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
900155d2:	e7e6      	b.n	900155a2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
900155d4:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
900155d8:	2b00      	cmp	r3, #0
900155da:	d0e3      	beq.n	900155a4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
900155dc:	f640 1302 	movw	r3, #2306	; 0x902
900155e0:	429d      	cmp	r5, r3
900155e2:	d1df      	bne.n	900155a4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
900155e4:	4601      	mov	r1, r0
900155e6:	4620      	mov	r0, r4
900155e8:	f7ff fcd8 	bl	90014f9c <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
900155ec:	e7d9      	b.n	900155a2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

900155ee <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
900155ee:	b510      	push	{r4, lr}
900155f0:	4604      	mov	r4, r0
900155f2:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
900155f6:	8f23      	ldrh	r3, [r4, #56]	; 0x38
900155f8:	b1e1      	cbz	r1, 90015634 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
900155fa:	2b0a      	cmp	r3, #10
900155fc:	d02d      	beq.n	9001565a <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
900155fe:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
90015600:	3901      	subs	r1, #1
90015602:	eb04 0042 	add.w	r0, r4, r2, lsl #1
90015606:	8f40      	ldrh	r0, [r0, #58]	; 0x3a
90015608:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
9001560c:	1c51      	adds	r1, r2, #1
9001560e:	b289      	uxth	r1, r1
90015610:	2901      	cmp	r1, #1
90015612:	bf8a      	itet	hi
90015614:	f102 32ff 	addhi.w	r2, r2, #4294967295
90015618:	87e1      	strhls	r1, [r4, #62]	; 0x3e
9001561a:	87e2      	strhhi	r2, [r4, #62]	; 0x3e
9001561c:	1c5a      	adds	r2, r3, #1
9001561e:	8722      	strh	r2, [r4, #56]	; 0x38
90015620:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
90015622:	4413      	add	r3, r2
90015624:	b29b      	uxth	r3, r3
90015626:	2b09      	cmp	r3, #9
90015628:	bf88      	it	hi
9001562a:	3b0a      	subhi	r3, #10
9001562c:	eb04 0343 	add.w	r3, r4, r3, lsl #1
90015630:	8458      	strh	r0, [r3, #34]	; 0x22
90015632:	e7de      	b.n	900155f2 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
90015634:	8f23      	ldrh	r3, [r4, #56]	; 0x38
90015636:	2b0a      	cmp	r3, #10
90015638:	d00f      	beq.n	9001565a <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
9001563a:	4620      	mov	r0, r4
9001563c:	f7ff fc6d 	bl	90014f1a <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
90015640:	8f23      	ldrh	r3, [r4, #56]	; 0x38
90015642:	1c5a      	adds	r2, r3, #1
90015644:	8722      	strh	r2, [r4, #56]	; 0x38
90015646:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
90015648:	4413      	add	r3, r2
9001564a:	b29b      	uxth	r3, r3
9001564c:	2b09      	cmp	r3, #9
9001564e:	bf88      	it	hi
90015650:	3b0a      	subhi	r3, #10
90015652:	eb04 0343 	add.w	r3, r4, r3, lsl #1
90015656:	8458      	strh	r0, [r3, #34]	; 0x22
90015658:	e7ec      	b.n	90015634 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
9001565a:	bd10      	pop	{r4, pc}

9001565c <_ZN8touchgfx12TextProvider11getNextCharEv>:
9001565c:	b538      	push	{r3, r4, r5, lr}
9001565e:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
90015660:	4604      	mov	r4, r0
90015662:	eb00 0243 	add.w	r2, r0, r3, lsl #1
90015666:	8c55      	ldrh	r5, [r2, #34]	; 0x22
90015668:	8f02      	ldrh	r2, [r0, #56]	; 0x38
9001566a:	3a01      	subs	r2, #1
9001566c:	8702      	strh	r2, [r0, #56]	; 0x38
9001566e:	1c5a      	adds	r2, r3, #1
90015670:	b292      	uxth	r2, r2
90015672:	2a09      	cmp	r2, #9
90015674:	bf8a      	itet	hi
90015676:	3b09      	subhi	r3, #9
90015678:	86c2      	strhls	r2, [r0, #54]	; 0x36
9001567a:	86c3      	strhhi	r3, [r0, #54]	; 0x36
9001567c:	f7ff ffb7 	bl	900155ee <_ZN8touchgfx12TextProvider15fillInputBufferEv>
90015680:	8c23      	ldrh	r3, [r4, #32]
90015682:	2b01      	cmp	r3, #1
90015684:	bf9c      	itt	ls
90015686:	3301      	addls	r3, #1
90015688:	8423      	strhls	r3, [r4, #32]
9001568a:	8be3      	ldrh	r3, [r4, #30]
9001568c:	b90b      	cbnz	r3, 90015692 <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
9001568e:	2302      	movs	r3, #2
90015690:	83e3      	strh	r3, [r4, #30]
90015692:	8be3      	ldrh	r3, [r4, #30]
90015694:	4628      	mov	r0, r5
90015696:	3b01      	subs	r3, #1
90015698:	b29b      	uxth	r3, r3
9001569a:	83e3      	strh	r3, [r4, #30]
9001569c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
900156a0:	8365      	strh	r5, [r4, #26]
900156a2:	bd38      	pop	{r3, r4, r5, pc}

900156a4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
900156a4:	428a      	cmp	r2, r1
900156a6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
900156aa:	8ec7      	ldrh	r7, [r0, #54]	; 0x36
900156ac:	d932      	bls.n	90015714 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x70>
900156ae:	8f05      	ldrh	r5, [r0, #56]	; 0x38
900156b0:	1a54      	subs	r4, r2, r1
900156b2:	f8b0 8040 	ldrh.w	r8, [r0, #64]	; 0x40
900156b6:	19ee      	adds	r6, r5, r7
900156b8:	fa1f fe84 	uxth.w	lr, r4
900156bc:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	; 0x3e
900156c0:	3e01      	subs	r6, #1
900156c2:	b2b4      	uxth	r4, r6
900156c4:	eba4 090e 	sub.w	r9, r4, lr
900156c8:	fa1f f989 	uxth.w	r9, r9
900156cc:	2c09      	cmp	r4, #9
900156ce:	4626      	mov	r6, r4
900156d0:	bf88      	it	hi
900156d2:	f1a4 060a 	subhi.w	r6, r4, #10
900156d6:	f1bc 0f00 	cmp.w	ip, #0
900156da:	f104 34ff 	add.w	r4, r4, #4294967295
900156de:	bf08      	it	eq
900156e0:	f04f 0c02 	moveq.w	ip, #2
900156e4:	eb00 0646 	add.w	r6, r0, r6, lsl #1
900156e8:	b2a4      	uxth	r4, r4
900156ea:	f10c 3cff 	add.w	ip, ip, #4294967295
900156ee:	f8b6 a022 	ldrh.w	sl, [r6, #34]	; 0x22
900156f2:	454c      	cmp	r4, r9
900156f4:	fa1f fc8c 	uxth.w	ip, ip
900156f8:	eb00 064c 	add.w	r6, r0, ip, lsl #1
900156fc:	f8a6 a03a 	strh.w	sl, [r6, #58]	; 0x3a
90015700:	d1e4      	bne.n	900156cc <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
90015702:	eba5 050e 	sub.w	r5, r5, lr
90015706:	eb0e 0408 	add.w	r4, lr, r8
9001570a:	f8a0 c03e 	strh.w	ip, [r0, #62]	; 0x3e
9001570e:	8705      	strh	r5, [r0, #56]	; 0x38
90015710:	f8a0 4040 	strh.w	r4, [r0, #64]	; 0x40
90015714:	8f04      	ldrh	r4, [r0, #56]	; 0x38
90015716:	250a      	movs	r5, #10
90015718:	1a64      	subs	r4, r4, r1
9001571a:	4439      	add	r1, r7
9001571c:	b289      	uxth	r1, r1
9001571e:	8704      	strh	r4, [r0, #56]	; 0x38
90015720:	2909      	cmp	r1, #9
90015722:	bf88      	it	hi
90015724:	390a      	subhi	r1, #10
90015726:	86c1      	strh	r1, [r0, #54]	; 0x36
90015728:	b18a      	cbz	r2, 9001574e <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xaa>
9001572a:	8f01      	ldrh	r1, [r0, #56]	; 0x38
9001572c:	3a01      	subs	r2, #1
9001572e:	3101      	adds	r1, #1
90015730:	b292      	uxth	r2, r2
90015732:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
90015736:	8701      	strh	r1, [r0, #56]	; 0x38
90015738:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
9001573a:	b901      	cbnz	r1, 9001573e <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9a>
9001573c:	86c5      	strh	r5, [r0, #54]	; 0x36
9001573e:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
90015740:	3901      	subs	r1, #1
90015742:	b289      	uxth	r1, r1
90015744:	86c1      	strh	r1, [r0, #54]	; 0x36
90015746:	eb00 0141 	add.w	r1, r0, r1, lsl #1
9001574a:	844c      	strh	r4, [r1, #34]	; 0x22
9001574c:	e7ec      	b.n	90015728 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>
9001574e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
90015752:	f7ff bf4c 	b.w	900155ee <_ZN8touchgfx12TextProvider15fillInputBufferEv>

90015756 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
90015756:	b570      	push	{r4, r5, r6, lr}
90015758:	2500      	movs	r5, #0
9001575a:	4295      	cmp	r5, r2
9001575c:	d011      	beq.n	90015782 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
9001575e:	8bc4      	ldrh	r4, [r0, #30]
90015760:	f831 6b02 	ldrh.w	r6, [r1], #2
90015764:	4414      	add	r4, r2
90015766:	3c01      	subs	r4, #1
90015768:	1b64      	subs	r4, r4, r5
9001576a:	b2a4      	uxth	r4, r4
9001576c:	2c01      	cmp	r4, #1
9001576e:	bf88      	it	hi
90015770:	3c02      	subhi	r4, #2
90015772:	eb00 0444 	add.w	r4, r0, r4, lsl #1
90015776:	8b64      	ldrh	r4, [r4, #26]
90015778:	42b4      	cmp	r4, r6
9001577a:	d117      	bne.n	900157ac <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
9001577c:	3501      	adds	r5, #1
9001577e:	b2ad      	uxth	r5, r5
90015780:	e7eb      	b.n	9001575a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
90015782:	f8bd 2010 	ldrh.w	r2, [sp, #16]
90015786:	2400      	movs	r4, #0
90015788:	4413      	add	r3, r2
9001578a:	b2a2      	uxth	r2, r4
9001578c:	429a      	cmp	r2, r3
9001578e:	da0f      	bge.n	900157b0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
90015790:	8ec6      	ldrh	r6, [r0, #54]	; 0x36
90015792:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
90015796:	3401      	adds	r4, #1
90015798:	4432      	add	r2, r6
9001579a:	b292      	uxth	r2, r2
9001579c:	2a09      	cmp	r2, #9
9001579e:	bf88      	it	hi
900157a0:	3a0a      	subhi	r2, #10
900157a2:	eb00 0242 	add.w	r2, r0, r2, lsl #1
900157a6:	8c52      	ldrh	r2, [r2, #34]	; 0x22
900157a8:	42aa      	cmp	r2, r5
900157aa:	d0ee      	beq.n	9001578a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
900157ac:	2000      	movs	r0, #0
900157ae:	bd70      	pop	{r4, r5, r6, pc}
900157b0:	2001      	movs	r0, #1
900157b2:	e7fc      	b.n	900157ae <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

900157b4 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
900157b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
900157b8:	4605      	mov	r5, r0
900157ba:	4616      	mov	r6, r2
900157bc:	1c8c      	adds	r4, r1, #2
900157be:	8809      	ldrh	r1, [r1, #0]
900157c0:	ea4f 3a11 	mov.w	sl, r1, lsr #12
900157c4:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
900157c8:	42b3      	cmp	r3, r6
900157ca:	d124      	bne.n	90015816 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
900157cc:	f3c1 2903 	ubfx	r9, r1, #8, #4
900157d0:	f3c1 1803 	ubfx	r8, r1, #4, #4
900157d4:	f001 070f 	and.w	r7, r1, #15
900157d8:	4652      	mov	r2, sl
900157da:	f8cd 8000 	str.w	r8, [sp]
900157de:	464b      	mov	r3, r9
900157e0:	4621      	mov	r1, r4
900157e2:	4628      	mov	r0, r5
900157e4:	f7ff ffb7 	bl	90015756 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
900157e8:	4683      	mov	fp, r0
900157ea:	b168      	cbz	r0, 90015808 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
900157ec:	eb0a 0109 	add.w	r1, sl, r9
900157f0:	463a      	mov	r2, r7
900157f2:	4628      	mov	r0, r5
900157f4:	4441      	add	r1, r8
900157f6:	eb04 0341 	add.w	r3, r4, r1, lsl #1
900157fa:	4649      	mov	r1, r9
900157fc:	f7ff ff52 	bl	900156a4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
90015800:	4658      	mov	r0, fp
90015802:	b003      	add	sp, #12
90015804:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90015808:	eb07 010a 	add.w	r1, r7, sl
9001580c:	4449      	add	r1, r9
9001580e:	4441      	add	r1, r8
90015810:	eb04 0141 	add.w	r1, r4, r1, lsl #1
90015814:	e7d2      	b.n	900157bc <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
90015816:	f04f 0b00 	mov.w	fp, #0
9001581a:	e7f1      	b.n	90015800 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

9001581c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
9001581c:	b570      	push	{r4, r5, r6, lr}
9001581e:	8810      	ldrh	r0, [r2, #0]
90015820:	4298      	cmp	r0, r3
90015822:	d817      	bhi.n	90015854 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
90015824:	1e48      	subs	r0, r1, #1
90015826:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
9001582a:	4298      	cmp	r0, r3
9001582c:	d312      	bcc.n	90015854 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
9001582e:	2400      	movs	r4, #0
90015830:	428c      	cmp	r4, r1
90015832:	d20f      	bcs.n	90015854 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
90015834:	1860      	adds	r0, r4, r1
90015836:	1040      	asrs	r0, r0, #1
90015838:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
9001583c:	0085      	lsls	r5, r0, #2
9001583e:	42b3      	cmp	r3, r6
90015840:	d902      	bls.n	90015848 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
90015842:	3001      	adds	r0, #1
90015844:	b284      	uxth	r4, r0
90015846:	e7f3      	b.n	90015830 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
90015848:	d201      	bcs.n	9001584e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
9001584a:	b281      	uxth	r1, r0
9001584c:	e7f0      	b.n	90015830 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
9001584e:	442a      	add	r2, r5
90015850:	8850      	ldrh	r0, [r2, #2]
90015852:	bd70      	pop	{r4, r5, r6, pc}
90015854:	2000      	movs	r0, #0
90015856:	e7fc      	b.n	90015852 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

90015858 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
90015858:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9001585c:	6c45      	ldr	r5, [r0, #68]	; 0x44
9001585e:	4604      	mov	r4, r0
90015860:	260b      	movs	r6, #11
90015862:	886f      	ldrh	r7, [r5, #2]
90015864:	087f      	lsrs	r7, r7, #1
90015866:	3e01      	subs	r6, #1
90015868:	d013      	beq.n	90015892 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
9001586a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
9001586c:	462a      	mov	r2, r5
9001586e:	4639      	mov	r1, r7
90015870:	4620      	mov	r0, r4
90015872:	eb04 0343 	add.w	r3, r4, r3, lsl #1
90015876:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
9001587a:	4643      	mov	r3, r8
9001587c:	f7ff ffce 	bl	9001581c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
90015880:	b138      	cbz	r0, 90015892 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
90015882:	eb05 0140 	add.w	r1, r5, r0, lsl #1
90015886:	4642      	mov	r2, r8
90015888:	4620      	mov	r0, r4
9001588a:	f7ff ff93 	bl	900157b4 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
9001588e:	2800      	cmp	r0, #0
90015890:	d1e9      	bne.n	90015866 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
90015892:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

90015898 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
90015898:	b570      	push	{r4, r5, r6, lr}
9001589a:	694a      	ldr	r2, [r1, #20]
9001589c:	6a8d      	ldr	r5, [r1, #40]	; 0x28
9001589e:	684b      	ldr	r3, [r1, #4]
900158a0:	1b54      	subs	r4, r2, r5
900158a2:	6ace      	ldr	r6, [r1, #44]	; 0x2c
900158a4:	f000 8106 	beq.w	90015ab4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
900158a8:	1b9b      	subs	r3, r3, r6
900158aa:	d003      	beq.n	900158b4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
900158ac:	4363      	muls	r3, r4
900158ae:	2210      	movs	r2, #16
900158b0:	fb93 f3f2 	sdiv	r3, r3, r2
900158b4:	680c      	ldr	r4, [r1, #0]
900158b6:	698a      	ldr	r2, [r1, #24]
900158b8:	1b65      	subs	r5, r4, r5
900158ba:	f000 80fd 	beq.w	90015ab8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
900158be:	1b92      	subs	r2, r2, r6
900158c0:	d003      	beq.n	900158ca <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
900158c2:	436a      	muls	r2, r5
900158c4:	2410      	movs	r4, #16
900158c6:	fb92 f2f4 	sdiv	r2, r2, r4
900158ca:	1a9b      	subs	r3, r3, r2
900158cc:	ed9f 4a89 	vldr	s8, [pc, #548]	; 90015af4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
900158d0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
900158d4:	460a      	mov	r2, r1
900158d6:	ee07 3a90 	vmov	s15, r3
900158da:	f100 040c 	add.w	r4, r0, #12
900158de:	4603      	mov	r3, r0
900158e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
900158e4:	ee67 7a84 	vmul.f32	s15, s15, s8
900158e8:	ee87 3a27 	vdiv.f32	s6, s14, s15
900158ec:	eeb1 6a43 	vneg.f32	s12, s6
900158f0:	edd2 7a02 	vldr	s15, [r2, #8]
900158f4:	3214      	adds	r2, #20
900158f6:	eec7 6a27 	vdiv.f32	s13, s14, s15
900158fa:	ece3 6a01 	vstmia	r3!, {s13}
900158fe:	429c      	cmp	r4, r3
90015900:	ed52 7a02 	vldr	s15, [r2, #-8]
90015904:	ee67 7aa6 	vmul.f32	s15, s15, s13
90015908:	edc3 7a02 	vstr	s15, [r3, #8]
9001590c:	ed52 7a01 	vldr	s15, [r2, #-4]
90015910:	ee67 7aa6 	vmul.f32	s15, s15, s13
90015914:	edc3 7a05 	vstr	s15, [r3, #20]
90015918:	d1ea      	bne.n	900158f0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
9001591a:	6aca      	ldr	r2, [r1, #44]	; 0x2c
9001591c:	698b      	ldr	r3, [r1, #24]
9001591e:	edd0 4a02 	vldr	s9, [r0, #8]
90015922:	1a9b      	subs	r3, r3, r2
90015924:	edd0 3a00 	vldr	s7, [r0]
90015928:	edd0 6a01 	vldr	s13, [r0, #4]
9001592c:	ee07 3a90 	vmov	s15, r3
90015930:	684b      	ldr	r3, [r1, #4]
90015932:	ee76 6ae4 	vsub.f32	s13, s13, s9
90015936:	ed90 5a05 	vldr	s10, [r0, #20]
9001593a:	1a9b      	subs	r3, r3, r2
9001593c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
90015940:	ee73 4ae4 	vsub.f32	s9, s7, s9
90015944:	ed90 2a03 	vldr	s4, [r0, #12]
90015948:	ee07 3a10 	vmov	s14, r3
9001594c:	edd0 5a04 	vldr	s11, [r0, #16]
90015950:	ee67 7a84 	vmul.f32	s15, s15, s8
90015954:	ed90 1a07 	vldr	s2, [r0, #28]
90015958:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
9001595c:	edd0 2a06 	vldr	s5, [r0, #24]
90015960:	ee75 5ac5 	vsub.f32	s11, s11, s10
90015964:	ee64 7ae7 	vnmul.f32	s15, s9, s15
90015968:	ee27 7a04 	vmul.f32	s14, s14, s8
9001596c:	ee32 5a45 	vsub.f32	s10, s4, s10
90015970:	eee6 7a87 	vfma.f32	s15, s13, s14
90015974:	ee67 7a83 	vmul.f32	s15, s15, s6
90015978:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
9001597c:	6a8c      	ldr	r4, [r1, #40]	; 0x28
9001597e:	694a      	ldr	r2, [r1, #20]
90015980:	1b13      	subs	r3, r2, r4
90015982:	ee07 3a10 	vmov	s14, r3
90015986:	680b      	ldr	r3, [r1, #0]
90015988:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
9001598c:	1b1b      	subs	r3, r3, r4
9001598e:	ee27 7a04 	vmul.f32	s14, s14, s8
90015992:	ee64 4ac7 	vnmul.f32	s9, s9, s14
90015996:	ee07 3a10 	vmov	s14, r3
9001599a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
9001599e:	ee27 7a04 	vmul.f32	s14, s14, s8
900159a2:	eee6 4a87 	vfma.f32	s9, s13, s14
900159a6:	ee64 4a86 	vmul.f32	s9, s9, s12
900159aa:	edc0 4a0a 	vstr	s9, [r0, #40]	; 0x28
900159ae:	6aca      	ldr	r2, [r1, #44]	; 0x2c
900159b0:	698b      	ldr	r3, [r1, #24]
900159b2:	1a9b      	subs	r3, r3, r2
900159b4:	ee06 3a90 	vmov	s13, r3
900159b8:	684b      	ldr	r3, [r1, #4]
900159ba:	1a9b      	subs	r3, r3, r2
900159bc:	eef8 6ae6 	vcvt.f32.s32	s13, s13
900159c0:	ee07 3a10 	vmov	s14, r3
900159c4:	ee66 6a84 	vmul.f32	s13, s13, s8
900159c8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
900159cc:	ee65 6a66 	vnmul.f32	s13, s10, s13
900159d0:	ee27 7a04 	vmul.f32	s14, s14, s8
900159d4:	eee5 6a87 	vfma.f32	s13, s11, s14
900159d8:	ee66 6a83 	vmul.f32	s13, s13, s6
900159dc:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
900159e0:	6a8c      	ldr	r4, [r1, #40]	; 0x28
900159e2:	694a      	ldr	r2, [r1, #20]
900159e4:	1b13      	subs	r3, r2, r4
900159e6:	ee07 3a10 	vmov	s14, r3
900159ea:	680b      	ldr	r3, [r1, #0]
900159ec:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
900159f0:	1b1b      	subs	r3, r3, r4
900159f2:	ee27 7a04 	vmul.f32	s14, s14, s8
900159f6:	ee25 5a47 	vnmul.f32	s10, s10, s14
900159fa:	ee07 3a10 	vmov	s14, r3
900159fe:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
90015a02:	ee27 7a04 	vmul.f32	s14, s14, s8
90015a06:	eea5 5a87 	vfma.f32	s10, s11, s14
90015a0a:	edd0 5a08 	vldr	s11, [r0, #32]
90015a0e:	ee31 1a65 	vsub.f32	s2, s2, s11
90015a12:	ee72 5ae5 	vsub.f32	s11, s5, s11
90015a16:	ee25 5a06 	vmul.f32	s10, s10, s12
90015a1a:	ed80 5a0c 	vstr	s10, [r0, #48]	; 0x30
90015a1e:	6aca      	ldr	r2, [r1, #44]	; 0x2c
90015a20:	698b      	ldr	r3, [r1, #24]
90015a22:	1a9b      	subs	r3, r3, r2
90015a24:	ee07 3a10 	vmov	s14, r3
90015a28:	684b      	ldr	r3, [r1, #4]
90015a2a:	1a9b      	subs	r3, r3, r2
90015a2c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
90015a30:	ee01 3a90 	vmov	s3, r3
90015a34:	ee27 7a04 	vmul.f32	s14, s14, s8
90015a38:	eef8 1ae1 	vcvt.f32.s32	s3, s3
90015a3c:	ee25 7ac7 	vnmul.f32	s14, s11, s14
90015a40:	ee61 1a84 	vmul.f32	s3, s3, s8
90015a44:	eea1 7a21 	vfma.f32	s14, s2, s3
90015a48:	ee27 7a03 	vmul.f32	s14, s14, s6
90015a4c:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
90015a50:	6a8c      	ldr	r4, [r1, #40]	; 0x28
90015a52:	694a      	ldr	r2, [r1, #20]
90015a54:	1b13      	subs	r3, r2, r4
90015a56:	ee03 3a10 	vmov	s6, r3
90015a5a:	680b      	ldr	r3, [r1, #0]
90015a5c:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
90015a60:	1b1b      	subs	r3, r3, r4
90015a62:	ee23 3a04 	vmul.f32	s6, s6, s8
90015a66:	ee65 5ac3 	vnmul.f32	s11, s11, s6
90015a6a:	ee03 3a10 	vmov	s6, r3
90015a6e:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
90015a72:	ee23 4a04 	vmul.f32	s8, s6, s8
90015a76:	eee1 5a04 	vfma.f32	s11, s2, s8
90015a7a:	ee25 6a86 	vmul.f32	s12, s11, s12
90015a7e:	ee62 5a67 	vnmul.f32	s11, s4, s15
90015a82:	ed80 6a0e 	vstr	s12, [r0, #56]	; 0x38
90015a86:	eee3 5aa6 	vfma.f32	s11, s7, s13
90015a8a:	eef5 5ac0 	vcmpe.f32	s11, #0.0
90015a8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
90015a92:	dd13      	ble.n	90015abc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
90015a94:	f44f 4300 	mov.w	r3, #32768	; 0x8000
90015a98:	ee62 7ae7 	vnmul.f32	s15, s5, s15
90015a9c:	63c3      	str	r3, [r0, #60]	; 0x3c
90015a9e:	eee3 7a87 	vfma.f32	s15, s7, s14
90015aa2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
90015aa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
90015aaa:	dd15      	ble.n	90015ad8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
90015aac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
90015ab0:	6403      	str	r3, [r0, #64]	; 0x40
90015ab2:	bd70      	pop	{r4, r5, r6, pc}
90015ab4:	4623      	mov	r3, r4
90015ab6:	e6fd      	b.n	900158b4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
90015ab8:	462a      	mov	r2, r5
90015aba:	e706      	b.n	900158ca <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
90015abc:	d502      	bpl.n	90015ac4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
90015abe:	f647 73ff 	movw	r3, #32767	; 0x7fff
90015ac2:	e7e9      	b.n	90015a98 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
90015ac4:	ee22 2a64 	vnmul.f32	s4, s4, s9
90015ac8:	eea3 2a85 	vfma.f32	s4, s7, s10
90015acc:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
90015ad0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
90015ad4:	dade      	bge.n	90015a94 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
90015ad6:	e7f2      	b.n	90015abe <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
90015ad8:	d502      	bpl.n	90015ae0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
90015ada:	f647 73ff 	movw	r3, #32767	; 0x7fff
90015ade:	e7e7      	b.n	90015ab0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
90015ae0:	ee62 4ae4 	vnmul.f32	s9, s5, s9
90015ae4:	eee3 4a86 	vfma.f32	s9, s7, s12
90015ae8:	eef5 4ac0 	vcmpe.f32	s9, #0.0
90015aec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
90015af0:	dadc      	bge.n	90015aac <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
90015af2:	e7f2      	b.n	90015ada <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
90015af4:	3d800000 	.word	0x3d800000

90015af8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
90015af8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
90015afc:	2714      	movs	r7, #20
90015afe:	435f      	muls	r7, r3
90015b00:	eb02 0c07 	add.w	ip, r2, r7
90015b04:	f8dc 5004 	ldr.w	r5, [ip, #4]
90015b08:	f115 0e0f 	adds.w	lr, r5, #15
90015b0c:	f100 80a2 	bmi.w	90015c54 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
90015b10:	ea4f 1e2e 	mov.w	lr, lr, asr #4
90015b14:	9c08      	ldr	r4, [sp, #32]
90015b16:	2614      	movs	r6, #20
90015b18:	f8c0 e014 	str.w	lr, [r0, #20]
90015b1c:	4366      	muls	r6, r4
90015b1e:	eb02 0806 	add.w	r8, r2, r6
90015b22:	f8d8 5004 	ldr.w	r5, [r8, #4]
90015b26:	f115 040f 	adds.w	r4, r5, #15
90015b2a:	f100 809f 	bmi.w	90015c6c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x174>
90015b2e:	1124      	asrs	r4, r4, #4
90015b30:	eba4 040e 	sub.w	r4, r4, lr
90015b34:	6184      	str	r4, [r0, #24]
90015b36:	2c00      	cmp	r4, #0
90015b38:	f000 808a 	beq.w	90015c50 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x158>
90015b3c:	f8dc 9004 	ldr.w	r9, [ip, #4]
90015b40:	f8d8 4004 	ldr.w	r4, [r8, #4]
90015b44:	5995      	ldr	r5, [r2, r6]
90015b46:	eba4 0809 	sub.w	r8, r4, r9
90015b4a:	59d4      	ldr	r4, [r2, r7]
90015b4c:	eba5 0a04 	sub.w	sl, r5, r4
90015b50:	ea4f 1608 	mov.w	r6, r8, lsl #4
90015b54:	ea4f 150a 	mov.w	r5, sl, lsl #4
90015b58:	fb0e fe05 	mul.w	lr, lr, r5
90015b5c:	fb0a ee19 	mls	lr, sl, r9, lr
90015b60:	fb08 e404 	mla	r4, r8, r4, lr
90015b64:	3c01      	subs	r4, #1
90015b66:	19a4      	adds	r4, r4, r6
90015b68:	f100 808c 	bmi.w	90015c84 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x18c>
90015b6c:	fb94 fef6 	sdiv	lr, r4, r6
90015b70:	fb06 441e 	mls	r4, r6, lr, r4
90015b74:	f8c0 e000 	str.w	lr, [r0]
90015b78:	6104      	str	r4, [r0, #16]
90015b7a:	2d00      	cmp	r5, #0
90015b7c:	f2c0 8095 	blt.w	90015caa <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1b2>
90015b80:	fb95 f4f6 	sdiv	r4, r5, r6
90015b84:	fb06 5514 	mls	r5, r6, r4, r5
90015b88:	6044      	str	r4, [r0, #4]
90015b8a:	6085      	str	r5, [r0, #8]
90015b8c:	60c6      	str	r6, [r0, #12]
90015b8e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
90015b92:	f8dc 4004 	ldr.w	r4, [ip, #4]
90015b96:	6945      	ldr	r5, [r0, #20]
90015b98:	59d2      	ldr	r2, [r2, r7]
90015b9a:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
90015b9e:	eddf 6a4b 	vldr	s13, [pc, #300]	; 90015ccc <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1d4>
90015ba2:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
90015ba6:	ee07 4a10 	vmov	s14, r4
90015baa:	6804      	ldr	r4, [r0, #0]
90015bac:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
90015bb0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
90015bb4:	ee07 2a90 	vmov	s15, r2
90015bb8:	ee27 7a26 	vmul.f32	s14, s14, s13
90015bbc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
90015bc0:	ee67 7aa6 	vmul.f32	s15, s15, s13
90015bc4:	edd3 6a00 	vldr	s13, [r3]
90015bc8:	eee6 6a07 	vfma.f32	s13, s12, s14
90015bcc:	ed91 6a09 	vldr	s12, [r1, #36]	; 0x24
90015bd0:	eee6 6a27 	vfma.f32	s13, s12, s15
90015bd4:	edc0 6a07 	vstr	s13, [r0, #28]
90015bd8:	edd0 6a01 	vldr	s13, [r0, #4]
90015bdc:	edd1 5a09 	vldr	s11, [r1, #36]	; 0x24
90015be0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
90015be4:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
90015be8:	eea6 6aa5 	vfma.f32	s12, s13, s11
90015bec:	ed80 6a08 	vstr	s12, [r0, #32]
90015bf0:	6a4a      	ldr	r2, [r1, #36]	; 0x24
90015bf2:	6242      	str	r2, [r0, #36]	; 0x24
90015bf4:	edd1 5a0c 	vldr	s11, [r1, #48]	; 0x30
90015bf8:	ed93 6a03 	vldr	s12, [r3, #12]
90015bfc:	eea5 6a87 	vfma.f32	s12, s11, s14
90015c00:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
90015c04:	eea5 6aa7 	vfma.f32	s12, s11, s15
90015c08:	ed80 6a0a 	vstr	s12, [r0, #40]	; 0x28
90015c0c:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
90015c10:	ed91 6a0c 	vldr	s12, [r1, #48]	; 0x30
90015c14:	eea6 6aa5 	vfma.f32	s12, s13, s11
90015c18:	ed80 6a0b 	vstr	s12, [r0, #44]	; 0x2c
90015c1c:	6aca      	ldr	r2, [r1, #44]	; 0x2c
90015c1e:	6302      	str	r2, [r0, #48]	; 0x30
90015c20:	ed93 6a06 	vldr	s12, [r3, #24]
90015c24:	edd1 5a0e 	vldr	s11, [r1, #56]	; 0x38
90015c28:	eea5 6a87 	vfma.f32	s12, s11, s14
90015c2c:	eeb0 7a46 	vmov.f32	s14, s12
90015c30:	ed91 6a0d 	vldr	s12, [r1, #52]	; 0x34
90015c34:	eea6 7a27 	vfma.f32	s14, s12, s15
90015c38:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
90015c3c:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
90015c40:	edd1 7a0e 	vldr	s15, [r1, #56]	; 0x38
90015c44:	eee6 7a87 	vfma.f32	s15, s13, s14
90015c48:	edc0 7a0e 	vstr	s15, [r0, #56]	; 0x38
90015c4c:	6b4b      	ldr	r3, [r1, #52]	; 0x34
90015c4e:	63c3      	str	r3, [r0, #60]	; 0x3c
90015c50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
90015c54:	2410      	movs	r4, #16
90015c56:	f1c5 0501 	rsb	r5, r5, #1
90015c5a:	fb9e fef4 	sdiv	lr, lr, r4
90015c5e:	f015 050f 	ands.w	r5, r5, #15
90015c62:	bf18      	it	ne
90015c64:	2501      	movne	r5, #1
90015c66:	ebae 0e05 	sub.w	lr, lr, r5
90015c6a:	e753      	b.n	90015b14 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1c>
90015c6c:	f04f 0910 	mov.w	r9, #16
90015c70:	f1c5 0501 	rsb	r5, r5, #1
90015c74:	fb94 f4f9 	sdiv	r4, r4, r9
90015c78:	f015 050f 	ands.w	r5, r5, #15
90015c7c:	bf18      	it	ne
90015c7e:	2501      	movne	r5, #1
90015c80:	1b64      	subs	r4, r4, r5
90015c82:	e755      	b.n	90015b30 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x38>
90015c84:	4264      	negs	r4, r4
90015c86:	fb94 fef6 	sdiv	lr, r4, r6
90015c8a:	f1ce 0800 	rsb	r8, lr, #0
90015c8e:	fb06 441e 	mls	r4, r6, lr, r4
90015c92:	f8c0 8000 	str.w	r8, [r0]
90015c96:	6104      	str	r4, [r0, #16]
90015c98:	2c00      	cmp	r4, #0
90015c9a:	f43f af6e 	beq.w	90015b7a <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x82>
90015c9e:	ea6f 0e0e 	mvn.w	lr, lr
90015ca2:	1b34      	subs	r4, r6, r4
90015ca4:	f8c0 e000 	str.w	lr, [r0]
90015ca8:	e766      	b.n	90015b78 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x80>
90015caa:	426d      	negs	r5, r5
90015cac:	fb95 f4f6 	sdiv	r4, r5, r6
90015cb0:	f1c4 0e00 	rsb	lr, r4, #0
90015cb4:	fb06 5514 	mls	r5, r6, r4, r5
90015cb8:	f8c0 e004 	str.w	lr, [r0, #4]
90015cbc:	6085      	str	r5, [r0, #8]
90015cbe:	2d00      	cmp	r5, #0
90015cc0:	f43f af64 	beq.w	90015b8c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x94>
90015cc4:	43e4      	mvns	r4, r4
90015cc6:	1b75      	subs	r5, r6, r5
90015cc8:	6044      	str	r4, [r0, #4]
90015cca:	e75e      	b.n	90015b8a <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x92>
90015ccc:	3d800000 	.word	0x3d800000

90015cd0 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
90015cd0:	4b01      	ldr	r3, [pc, #4]	; (90015cd8 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
90015cd2:	6018      	str	r0, [r3, #0]
90015cd4:	4770      	bx	lr
90015cd6:	bf00      	nop
90015cd8:	24021c74 	.word	0x24021c74

90015cdc <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
90015cdc:	4b06      	ldr	r3, [pc, #24]	; (90015cf8 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
90015cde:	881a      	ldrh	r2, [r3, #0]
90015ce0:	4282      	cmp	r2, r0
90015ce2:	d807      	bhi.n	90015cf4 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
90015ce4:	4b05      	ldr	r3, [pc, #20]	; (90015cfc <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
90015ce6:	881b      	ldrh	r3, [r3, #0]
90015ce8:	4413      	add	r3, r2
90015cea:	4298      	cmp	r0, r3
90015cec:	bfac      	ite	ge
90015cee:	2000      	movge	r0, #0
90015cf0:	2001      	movlt	r0, #1
90015cf2:	4770      	bx	lr
90015cf4:	2000      	movs	r0, #0
90015cf6:	4770      	bx	lr
90015cf8:	24021c94 	.word	0x24021c94
90015cfc:	24021c98 	.word	0x24021c98

90015d00 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
90015d00:	b508      	push	{r3, lr}
90015d02:	4601      	mov	r1, r0
90015d04:	f7ff ffea 	bl	90015cdc <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
90015d08:	b118      	cbz	r0, 90015d12 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
90015d0a:	4b02      	ldr	r3, [pc, #8]	; (90015d14 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
90015d0c:	681b      	ldr	r3, [r3, #0]
90015d0e:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
90015d12:	bd08      	pop	{r3, pc}
90015d14:	24021c78 	.word	0x24021c78

90015d18 <_ZN8touchgfx6Bitmap10clearCacheEv>:
90015d18:	b5f0      	push	{r4, r5, r6, r7, lr}
90015d1a:	4c24      	ldr	r4, [pc, #144]	; (90015dac <_ZN8touchgfx6Bitmap10clearCacheEv+0x94>)
90015d1c:	6823      	ldr	r3, [r4, #0]
90015d1e:	2b00      	cmp	r3, #0
90015d20:	d042      	beq.n	90015da8 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
90015d22:	4a23      	ldr	r2, [pc, #140]	; (90015db0 <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
90015d24:	4d23      	ldr	r5, [pc, #140]	; (90015db4 <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
90015d26:	8811      	ldrh	r1, [r2, #0]
90015d28:	f8b5 c000 	ldrh.w	ip, [r5]
90015d2c:	4822      	ldr	r0, [pc, #136]	; (90015db8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
90015d2e:	4461      	add	r1, ip
90015d30:	1c4a      	adds	r2, r1, #1
90015d32:	008f      	lsls	r7, r1, #2
90015d34:	f022 0201 	bic.w	r2, r2, #1
90015d38:	19de      	adds	r6, r3, r7
90015d3a:	0412      	lsls	r2, r2, #16
90015d3c:	6006      	str	r6, [r0, #0]
90015d3e:	4e1f      	ldr	r6, [pc, #124]	; (90015dbc <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
90015d40:	0c12      	lsrs	r2, r2, #16
90015d42:	eb07 0742 	add.w	r7, r7, r2, lsl #1
90015d46:	19da      	adds	r2, r3, r7
90015d48:	6032      	str	r2, [r6, #0]
90015d4a:	220e      	movs	r2, #14
90015d4c:	fb02 f20c 	mul.w	r2, r2, ip
90015d50:	3203      	adds	r2, #3
90015d52:	f022 0203 	bic.w	r2, r2, #3
90015d56:	443a      	add	r2, r7
90015d58:	4f19      	ldr	r7, [pc, #100]	; (90015dc0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
90015d5a:	4413      	add	r3, r2
90015d5c:	603b      	str	r3, [r7, #0]
90015d5e:	2300      	movs	r3, #0
90015d60:	4f18      	ldr	r7, [pc, #96]	; (90015dc4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
90015d62:	469c      	mov	ip, r3
90015d64:	803b      	strh	r3, [r7, #0]
90015d66:	4f18      	ldr	r7, [pc, #96]	; (90015dc8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
90015d68:	683f      	ldr	r7, [r7, #0]
90015d6a:	1aba      	subs	r2, r7, r2
90015d6c:	4f17      	ldr	r7, [pc, #92]	; (90015dcc <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
90015d6e:	603a      	str	r2, [r7, #0]
90015d70:	f64f 77ff 	movw	r7, #65535	; 0xffff
90015d74:	4a16      	ldr	r2, [pc, #88]	; (90015dd0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
90015d76:	8013      	strh	r3, [r2, #0]
90015d78:	428b      	cmp	r3, r1
90015d7a:	d10d      	bne.n	90015d98 <_ZN8touchgfx6Bitmap10clearCacheEv+0x80>
90015d7c:	882d      	ldrh	r5, [r5, #0]
90015d7e:	2300      	movs	r3, #0
90015d80:	6830      	ldr	r0, [r6, #0]
90015d82:	240e      	movs	r4, #14
90015d84:	429d      	cmp	r5, r3
90015d86:	d90f      	bls.n	90015da8 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
90015d88:	fb04 0203 	mla	r2, r4, r3, r0
90015d8c:	3301      	adds	r3, #1
90015d8e:	7b11      	ldrb	r1, [r2, #12]
90015d90:	f36f 1145 	bfc	r1, #5, #1
90015d94:	7311      	strb	r1, [r2, #12]
90015d96:	e7f5      	b.n	90015d84 <_ZN8touchgfx6Bitmap10clearCacheEv+0x6c>
90015d98:	6822      	ldr	r2, [r4, #0]
90015d9a:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
90015d9e:	6802      	ldr	r2, [r0, #0]
90015da0:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
90015da4:	3301      	adds	r3, #1
90015da6:	e7e7      	b.n	90015d78 <_ZN8touchgfx6Bitmap10clearCacheEv+0x60>
90015da8:	bdf0      	pop	{r4, r5, r6, r7, pc}
90015daa:	bf00      	nop
90015dac:	24021c78 	.word	0x24021c78
90015db0:	24021c94 	.word	0x24021c94
90015db4:	24021c98 	.word	0x24021c98
90015db8:	24021c8c 	.word	0x24021c8c
90015dbc:	24021c7c 	.word	0x24021c7c
90015dc0:	24021c84 	.word	0x24021c84
90015dc4:	24021c96 	.word	0x24021c96
90015dc8:	24021c80 	.word	0x24021c80
90015dcc:	24021c90 	.word	0x24021c90
90015dd0:	24021c88 	.word	0x24021c88

90015dd4 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
90015dd4:	4b06      	ldr	r3, [pc, #24]	; (90015df0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x1c>)
90015dd6:	681b      	ldr	r3, [r3, #0]
90015dd8:	b943      	cbnz	r3, 90015dec <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
90015dda:	b139      	cbz	r1, 90015dec <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
90015ddc:	4b05      	ldr	r3, [pc, #20]	; (90015df4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x20>)
90015dde:	801a      	strh	r2, [r3, #0]
90015de0:	4b05      	ldr	r3, [pc, #20]	; (90015df8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x24>)
90015de2:	6019      	str	r1, [r3, #0]
90015de4:	4b05      	ldr	r3, [pc, #20]	; (90015dfc <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x28>)
90015de6:	6018      	str	r0, [r3, #0]
90015de8:	f7ff bf96 	b.w	90015d18 <_ZN8touchgfx6Bitmap10clearCacheEv>
90015dec:	4770      	bx	lr
90015dee:	bf00      	nop
90015df0:	24021c84 	.word	0x24021c84
90015df4:	24021c98 	.word	0x24021c98
90015df8:	24021c80 	.word	0x24021c80
90015dfc:	24021c78 	.word	0x24021c78

90015e00 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
90015e00:	b470      	push	{r4, r5, r6}
90015e02:	4c07      	ldr	r4, [pc, #28]	; (90015e20 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
90015e04:	4605      	mov	r5, r0
90015e06:	4610      	mov	r0, r2
90015e08:	9a03      	ldr	r2, [sp, #12]
90015e0a:	6826      	ldr	r6, [r4, #0]
90015e0c:	b936      	cbnz	r6, 90015e1c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
90015e0e:	6025      	str	r5, [r4, #0]
90015e10:	4c04      	ldr	r4, [pc, #16]	; (90015e24 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
90015e12:	8021      	strh	r1, [r4, #0]
90015e14:	4619      	mov	r1, r3
90015e16:	bc70      	pop	{r4, r5, r6}
90015e18:	f7ff bfdc 	b.w	90015dd4 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
90015e1c:	bc70      	pop	{r4, r5, r6}
90015e1e:	4770      	bx	lr
90015e20:	24021c9c 	.word	0x24021c9c
90015e24:	24021c94 	.word	0x24021c94

90015e28 <_ZNK8touchgfx6Bitmap8getWidthEv>:
90015e28:	4a12      	ldr	r2, [pc, #72]	; (90015e74 <_ZNK8touchgfx6Bitmap8getWidthEv+0x4c>)
90015e2a:	8803      	ldrh	r3, [r0, #0]
90015e2c:	8812      	ldrh	r2, [r2, #0]
90015e2e:	4293      	cmp	r3, r2
90015e30:	d207      	bcs.n	90015e42 <_ZNK8touchgfx6Bitmap8getWidthEv+0x1a>
90015e32:	4a11      	ldr	r2, [pc, #68]	; (90015e78 <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
90015e34:	2114      	movs	r1, #20
90015e36:	6812      	ldr	r2, [r2, #0]
90015e38:	fb01 2303 	mla	r3, r1, r3, r2
90015e3c:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
90015e40:	4770      	bx	lr
90015e42:	490e      	ldr	r1, [pc, #56]	; (90015e7c <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
90015e44:	8809      	ldrh	r1, [r1, #0]
90015e46:	4411      	add	r1, r2
90015e48:	428b      	cmp	r3, r1
90015e4a:	da04      	bge.n	90015e56 <_ZNK8touchgfx6Bitmap8getWidthEv+0x2e>
90015e4c:	1a9b      	subs	r3, r3, r2
90015e4e:	4a0c      	ldr	r2, [pc, #48]	; (90015e80 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
90015e50:	210e      	movs	r1, #14
90015e52:	6812      	ldr	r2, [r2, #0]
90015e54:	e7f0      	b.n	90015e38 <_ZNK8touchgfx6Bitmap8getWidthEv+0x10>
90015e56:	f64f 72fe 	movw	r2, #65534	; 0xfffe
90015e5a:	4293      	cmp	r3, r2
90015e5c:	d108      	bne.n	90015e70 <_ZNK8touchgfx6Bitmap8getWidthEv+0x48>
90015e5e:	4b09      	ldr	r3, [pc, #36]	; (90015e84 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
90015e60:	781b      	ldrb	r3, [r3, #0]
90015e62:	b91b      	cbnz	r3, 90015e6c <_ZNK8touchgfx6Bitmap8getWidthEv+0x44>
90015e64:	4b08      	ldr	r3, [pc, #32]	; (90015e88 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
90015e66:	f9b3 0000 	ldrsh.w	r0, [r3]
90015e6a:	4770      	bx	lr
90015e6c:	4b07      	ldr	r3, [pc, #28]	; (90015e8c <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
90015e6e:	e7fa      	b.n	90015e66 <_ZNK8touchgfx6Bitmap8getWidthEv+0x3e>
90015e70:	2000      	movs	r0, #0
90015e72:	4770      	bx	lr
90015e74:	24021c94 	.word	0x24021c94
90015e78:	24021c9c 	.word	0x24021c9c
90015e7c:	24021c98 	.word	0x24021c98
90015e80:	24021c7c 	.word	0x24021c7c
90015e84:	24021c0c 	.word	0x24021c0c
90015e88:	24021c0e 	.word	0x24021c0e
90015e8c:	24021c10 	.word	0x24021c10

90015e90 <_ZNK8touchgfx6Bitmap9getHeightEv>:
90015e90:	4a12      	ldr	r2, [pc, #72]	; (90015edc <_ZNK8touchgfx6Bitmap9getHeightEv+0x4c>)
90015e92:	8803      	ldrh	r3, [r0, #0]
90015e94:	8812      	ldrh	r2, [r2, #0]
90015e96:	4293      	cmp	r3, r2
90015e98:	d207      	bcs.n	90015eaa <_ZNK8touchgfx6Bitmap9getHeightEv+0x1a>
90015e9a:	4a11      	ldr	r2, [pc, #68]	; (90015ee0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
90015e9c:	2114      	movs	r1, #20
90015e9e:	6812      	ldr	r2, [r2, #0]
90015ea0:	fb01 2303 	mla	r3, r1, r3, r2
90015ea4:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
90015ea8:	4770      	bx	lr
90015eaa:	490e      	ldr	r1, [pc, #56]	; (90015ee4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
90015eac:	8809      	ldrh	r1, [r1, #0]
90015eae:	4411      	add	r1, r2
90015eb0:	428b      	cmp	r3, r1
90015eb2:	da04      	bge.n	90015ebe <_ZNK8touchgfx6Bitmap9getHeightEv+0x2e>
90015eb4:	1a9b      	subs	r3, r3, r2
90015eb6:	4a0c      	ldr	r2, [pc, #48]	; (90015ee8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
90015eb8:	210e      	movs	r1, #14
90015eba:	6812      	ldr	r2, [r2, #0]
90015ebc:	e7f0      	b.n	90015ea0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x10>
90015ebe:	f64f 72fe 	movw	r2, #65534	; 0xfffe
90015ec2:	4293      	cmp	r3, r2
90015ec4:	d108      	bne.n	90015ed8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x48>
90015ec6:	4b09      	ldr	r3, [pc, #36]	; (90015eec <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
90015ec8:	781b      	ldrb	r3, [r3, #0]
90015eca:	b91b      	cbnz	r3, 90015ed4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x44>
90015ecc:	4b08      	ldr	r3, [pc, #32]	; (90015ef0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
90015ece:	f9b3 0000 	ldrsh.w	r0, [r3]
90015ed2:	4770      	bx	lr
90015ed4:	4b07      	ldr	r3, [pc, #28]	; (90015ef4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
90015ed6:	e7fa      	b.n	90015ece <_ZNK8touchgfx6Bitmap9getHeightEv+0x3e>
90015ed8:	2000      	movs	r0, #0
90015eda:	4770      	bx	lr
90015edc:	24021c94 	.word	0x24021c94
90015ee0:	24021c9c 	.word	0x24021c9c
90015ee4:	24021c98 	.word	0x24021c98
90015ee8:	24021c7c 	.word	0x24021c7c
90015eec:	24021c0c 	.word	0x24021c0c
90015ef0:	24021c10 	.word	0x24021c10
90015ef4:	24021c0e 	.word	0x24021c0e

90015ef8 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
90015ef8:	4a1f      	ldr	r2, [pc, #124]	; (90015f78 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x80>)
90015efa:	b510      	push	{r4, lr}
90015efc:	880b      	ldrh	r3, [r1, #0]
90015efe:	8812      	ldrh	r2, [r2, #0]
90015f00:	4293      	cmp	r3, r2
90015f02:	d213      	bcs.n	90015f2c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x34>
90015f04:	4a1d      	ldr	r2, [pc, #116]	; (90015f7c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>)
90015f06:	2114      	movs	r1, #20
90015f08:	6812      	ldr	r2, [r2, #0]
90015f0a:	fb01 2303 	mla	r3, r1, r3, r2
90015f0e:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
90015f12:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
90015f16:	8a1a      	ldrh	r2, [r3, #16]
90015f18:	8a5b      	ldrh	r3, [r3, #18]
90015f1a:	f3c2 020c 	ubfx	r2, r2, #0, #13
90015f1e:	8004      	strh	r4, [r0, #0]
90015f20:	f3c3 030c 	ubfx	r3, r3, #0, #13
90015f24:	8041      	strh	r1, [r0, #2]
90015f26:	8082      	strh	r2, [r0, #4]
90015f28:	80c3      	strh	r3, [r0, #6]
90015f2a:	e00e      	b.n	90015f4a <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
90015f2c:	4914      	ldr	r1, [pc, #80]	; (90015f80 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x88>)
90015f2e:	8809      	ldrh	r1, [r1, #0]
90015f30:	4411      	add	r1, r2
90015f32:	428b      	cmp	r3, r1
90015f34:	da0a      	bge.n	90015f4c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x54>
90015f36:	1a9b      	subs	r3, r3, r2
90015f38:	4a12      	ldr	r2, [pc, #72]	; (90015f84 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x8c>)
90015f3a:	210e      	movs	r1, #14
90015f3c:	6812      	ldr	r2, [r2, #0]
90015f3e:	fb01 2303 	mla	r3, r1, r3, r2
90015f42:	681a      	ldr	r2, [r3, #0]
90015f44:	6002      	str	r2, [r0, #0]
90015f46:	685a      	ldr	r2, [r3, #4]
90015f48:	6042      	str	r2, [r0, #4]
90015f4a:	bd10      	pop	{r4, pc}
90015f4c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
90015f50:	4293      	cmp	r3, r2
90015f52:	d10b      	bne.n	90015f6c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x74>
90015f54:	4b0c      	ldr	r3, [pc, #48]	; (90015f88 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
90015f56:	f9b3 1000 	ldrsh.w	r1, [r3]
90015f5a:	4b0c      	ldr	r3, [pc, #48]	; (90015f8c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
90015f5c:	8081      	strh	r1, [r0, #4]
90015f5e:	f9b3 2000 	ldrsh.w	r2, [r3]
90015f62:	2300      	movs	r3, #0
90015f64:	80c2      	strh	r2, [r0, #6]
90015f66:	8003      	strh	r3, [r0, #0]
90015f68:	8043      	strh	r3, [r0, #2]
90015f6a:	e7ee      	b.n	90015f4a <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
90015f6c:	2300      	movs	r3, #0
90015f6e:	8003      	strh	r3, [r0, #0]
90015f70:	8043      	strh	r3, [r0, #2]
90015f72:	8083      	strh	r3, [r0, #4]
90015f74:	e7d8      	b.n	90015f28 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
90015f76:	bf00      	nop
90015f78:	24021c94 	.word	0x24021c94
90015f7c:	24021c9c 	.word	0x24021c9c
90015f80:	24021c98 	.word	0x24021c98
90015f84:	24021c7c 	.word	0x24021c7c
90015f88:	24021c08 	.word	0x24021c08
90015f8c:	24021c0a 	.word	0x24021c0a

90015f90 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
90015f90:	4a17      	ldr	r2, [pc, #92]	; (90015ff0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x60>)
90015f92:	8803      	ldrh	r3, [r0, #0]
90015f94:	8812      	ldrh	r2, [r2, #0]
90015f96:	4293      	cmp	r3, r2
90015f98:	d213      	bcs.n	90015fc2 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x32>
90015f9a:	4a16      	ldr	r2, [pc, #88]	; (90015ff4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
90015f9c:	2114      	movs	r1, #20
90015f9e:	6812      	ldr	r2, [r2, #0]
90015fa0:	fb01 2303 	mla	r3, r1, r3, r2
90015fa4:	8a1a      	ldrh	r2, [r3, #16]
90015fa6:	8919      	ldrh	r1, [r3, #8]
90015fa8:	f3c2 020c 	ubfx	r2, r2, #0, #13
90015fac:	428a      	cmp	r2, r1
90015fae:	db1d      	blt.n	90015fec <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
90015fb0:	8a58      	ldrh	r0, [r3, #18]
90015fb2:	f3c0 000c 	ubfx	r0, r0, #0, #13
90015fb6:	895b      	ldrh	r3, [r3, #10]
90015fb8:	4298      	cmp	r0, r3
90015fba:	bfac      	ite	ge
90015fbc:	2000      	movge	r0, #0
90015fbe:	2001      	movlt	r0, #1
90015fc0:	4770      	bx	lr
90015fc2:	490d      	ldr	r1, [pc, #52]	; (90015ff8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
90015fc4:	8809      	ldrh	r1, [r1, #0]
90015fc6:	4411      	add	r1, r2
90015fc8:	428b      	cmp	r3, r1
90015fca:	da0d      	bge.n	90015fe8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x58>
90015fcc:	1a9b      	subs	r3, r3, r2
90015fce:	4a0b      	ldr	r2, [pc, #44]	; (90015ffc <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
90015fd0:	210e      	movs	r1, #14
90015fd2:	6812      	ldr	r2, [r2, #0]
90015fd4:	fb01 2303 	mla	r3, r1, r3, r2
90015fd8:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
90015fdc:	891a      	ldrh	r2, [r3, #8]
90015fde:	4291      	cmp	r1, r2
90015fe0:	db04      	blt.n	90015fec <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
90015fe2:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
90015fe6:	e7e6      	b.n	90015fb6 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x26>
90015fe8:	2000      	movs	r0, #0
90015fea:	4770      	bx	lr
90015fec:	2001      	movs	r0, #1
90015fee:	4770      	bx	lr
90015ff0:	24021c94 	.word	0x24021c94
90015ff4:	24021c9c 	.word	0x24021c9c
90015ff8:	24021c98 	.word	0x24021c98
90015ffc:	24021c7c 	.word	0x24021c7c

90016000 <_ZNK8touchgfx6Bitmap7getDataEv>:
90016000:	4a12      	ldr	r2, [pc, #72]	; (9001604c <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
90016002:	8803      	ldrh	r3, [r0, #0]
90016004:	8811      	ldrh	r1, [r2, #0]
90016006:	428b      	cmp	r3, r1
90016008:	d20b      	bcs.n	90016022 <_ZNK8touchgfx6Bitmap7getDataEv+0x22>
9001600a:	4a11      	ldr	r2, [pc, #68]	; (90016050 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
9001600c:	6812      	ldr	r2, [r2, #0]
9001600e:	b112      	cbz	r2, 90016016 <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
90016010:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
90016014:	b9c0      	cbnz	r0, 90016048 <_ZNK8touchgfx6Bitmap7getDataEv+0x48>
90016016:	4a0f      	ldr	r2, [pc, #60]	; (90016054 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
90016018:	6811      	ldr	r1, [r2, #0]
9001601a:	2214      	movs	r2, #20
9001601c:	4353      	muls	r3, r2
9001601e:	58c8      	ldr	r0, [r1, r3]
90016020:	4770      	bx	lr
90016022:	4a0d      	ldr	r2, [pc, #52]	; (90016058 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
90016024:	8812      	ldrh	r2, [r2, #0]
90016026:	440a      	add	r2, r1
90016028:	4293      	cmp	r3, r2
9001602a:	da04      	bge.n	90016036 <_ZNK8touchgfx6Bitmap7getDataEv+0x36>
9001602c:	4a08      	ldr	r2, [pc, #32]	; (90016050 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
9001602e:	6812      	ldr	r2, [r2, #0]
90016030:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
90016034:	4770      	bx	lr
90016036:	f64f 72fe 	movw	r2, #65534	; 0xfffe
9001603a:	4293      	cmp	r3, r2
9001603c:	d103      	bne.n	90016046 <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
9001603e:	4b07      	ldr	r3, [pc, #28]	; (9001605c <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
90016040:	681b      	ldr	r3, [r3, #0]
90016042:	6c58      	ldr	r0, [r3, #68]	; 0x44
90016044:	4770      	bx	lr
90016046:	2000      	movs	r0, #0
90016048:	4770      	bx	lr
9001604a:	bf00      	nop
9001604c:	24021c94 	.word	0x24021c94
90016050:	24021c78 	.word	0x24021c78
90016054:	24021c9c 	.word	0x24021c9c
90016058:	24021c98 	.word	0x24021c98
9001605c:	24021c14 	.word	0x24021c14

90016060 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
90016060:	4b24      	ldr	r3, [pc, #144]	; (900160f4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
90016062:	8802      	ldrh	r2, [r0, #0]
90016064:	8818      	ldrh	r0, [r3, #0]
90016066:	4282      	cmp	r2, r0
90016068:	d221      	bcs.n	900160ae <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
9001606a:	4b23      	ldr	r3, [pc, #140]	; (900160f8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
9001606c:	6819      	ldr	r1, [r3, #0]
9001606e:	2314      	movs	r3, #20
90016070:	fb03 1302 	mla	r3, r3, r2, r1
90016074:	6858      	ldr	r0, [r3, #4]
90016076:	2800      	cmp	r0, #0
90016078:	d03a      	beq.n	900160f0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
9001607a:	4920      	ldr	r1, [pc, #128]	; (900160fc <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
9001607c:	6809      	ldr	r1, [r1, #0]
9001607e:	2900      	cmp	r1, #0
90016080:	d036      	beq.n	900160f0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
90016082:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
90016086:	2900      	cmp	r1, #0
90016088:	d032      	beq.n	900160f0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
9001608a:	891a      	ldrh	r2, [r3, #8]
9001608c:	8958      	ldrh	r0, [r3, #10]
9001608e:	4350      	muls	r0, r2
90016090:	7c5a      	ldrb	r2, [r3, #17]
90016092:	7cdb      	ldrb	r3, [r3, #19]
90016094:	0952      	lsrs	r2, r2, #5
90016096:	f3c3 1342 	ubfx	r3, r3, #5, #3
9001609a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
9001609e:	2b0b      	cmp	r3, #11
900160a0:	bf18      	it	ne
900160a2:	0040      	lslne	r0, r0, #1
900160a4:	3003      	adds	r0, #3
900160a6:	f020 0003 	bic.w	r0, r0, #3
900160aa:	4408      	add	r0, r1
900160ac:	4770      	bx	lr
900160ae:	4b14      	ldr	r3, [pc, #80]	; (90016100 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
900160b0:	881b      	ldrh	r3, [r3, #0]
900160b2:	4403      	add	r3, r0
900160b4:	429a      	cmp	r2, r3
900160b6:	da1a      	bge.n	900160ee <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
900160b8:	4b12      	ldr	r3, [pc, #72]	; (90016104 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
900160ba:	1a10      	subs	r0, r2, r0
900160bc:	210e      	movs	r1, #14
900160be:	681b      	ldr	r3, [r3, #0]
900160c0:	fb01 3000 	mla	r0, r1, r0, r3
900160c4:	7b03      	ldrb	r3, [r0, #12]
900160c6:	f003 031f 	and.w	r3, r3, #31
900160ca:	2b0b      	cmp	r3, #11
900160cc:	d10b      	bne.n	900160e6 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x86>
900160ce:	8903      	ldrh	r3, [r0, #8]
900160d0:	8940      	ldrh	r0, [r0, #10]
900160d2:	4358      	muls	r0, r3
900160d4:	4b09      	ldr	r3, [pc, #36]	; (900160fc <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
900160d6:	3003      	adds	r0, #3
900160d8:	6819      	ldr	r1, [r3, #0]
900160da:	f020 0303 	bic.w	r3, r0, #3
900160de:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
900160e2:	4418      	add	r0, r3
900160e4:	4770      	bx	lr
900160e6:	2b0d      	cmp	r3, #13
900160e8:	d101      	bne.n	900160ee <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
900160ea:	300d      	adds	r0, #13
900160ec:	4770      	bx	lr
900160ee:	2000      	movs	r0, #0
900160f0:	4770      	bx	lr
900160f2:	bf00      	nop
900160f4:	24021c94 	.word	0x24021c94
900160f8:	24021c9c 	.word	0x24021c9c
900160fc:	24021c78 	.word	0x24021c78
90016100:	24021c98 	.word	0x24021c98
90016104:	24021c7c 	.word	0x24021c7c

90016108 <_ZNK8touchgfx6Bitmap9getFormatEv>:
90016108:	4a17      	ldr	r2, [pc, #92]	; (90016168 <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>)
9001610a:	b510      	push	{r4, lr}
9001610c:	8803      	ldrh	r3, [r0, #0]
9001610e:	8812      	ldrh	r2, [r2, #0]
90016110:	4293      	cmp	r3, r2
90016112:	d20c      	bcs.n	9001612e <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
90016114:	4a15      	ldr	r2, [pc, #84]	; (9001616c <_ZNK8touchgfx6Bitmap9getFormatEv+0x64>)
90016116:	2114      	movs	r1, #20
90016118:	6812      	ldr	r2, [r2, #0]
9001611a:	fb01 2303 	mla	r3, r1, r3, r2
9001611e:	7c58      	ldrb	r0, [r3, #17]
90016120:	0942      	lsrs	r2, r0, #5
90016122:	7cd8      	ldrb	r0, [r3, #19]
90016124:	f3c0 1042 	ubfx	r0, r0, #5, #3
90016128:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
9001612c:	bd10      	pop	{r4, pc}
9001612e:	4910      	ldr	r1, [pc, #64]	; (90016170 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
90016130:	8809      	ldrh	r1, [r1, #0]
90016132:	4411      	add	r1, r2
90016134:	428b      	cmp	r3, r1
90016136:	da09      	bge.n	9001614c <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
90016138:	1a9b      	subs	r3, r3, r2
9001613a:	4a0e      	ldr	r2, [pc, #56]	; (90016174 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
9001613c:	210e      	movs	r1, #14
9001613e:	6812      	ldr	r2, [r2, #0]
90016140:	fb01 2303 	mla	r3, r1, r3, r2
90016144:	7b18      	ldrb	r0, [r3, #12]
90016146:	f000 001f 	and.w	r0, r0, #31
9001614a:	e7ef      	b.n	9001612c <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
9001614c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
90016150:	4293      	cmp	r3, r2
90016152:	d106      	bne.n	90016162 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
90016154:	f7fb fb62 	bl	9001181c <_ZN8touchgfx3HAL3lcdEv>
90016158:	6803      	ldr	r3, [r0, #0]
9001615a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9001615e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90016160:	4718      	bx	r3
90016162:	2000      	movs	r0, #0
90016164:	e7e2      	b.n	9001612c <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
90016166:	bf00      	nop
90016168:	24021c94 	.word	0x24021c94
9001616c:	24021c9c 	.word	0x24021c9c
90016170:	24021c98 	.word	0x24021c98
90016174:	24021c7c 	.word	0x24021c7c

90016178 <_ZNK8touchgfx8LCD16bpp8bitDepthEv>:
90016178:	2010      	movs	r0, #16
9001617a:	4770      	bx	lr

9001617c <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv>:
9001617c:	4b02      	ldr	r3, [pc, #8]	; (90016188 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0xc>)
9001617e:	8818      	ldrh	r0, [r3, #0]
90016180:	0040      	lsls	r0, r0, #1
90016182:	b280      	uxth	r0, r0
90016184:	4770      	bx	lr
90016186:	bf00      	nop
90016188:	24021c0e 	.word	0x24021c0e

9001618c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
9001618c:	2bff      	cmp	r3, #255	; 0xff
9001618e:	d050      	beq.n	90016232 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
90016190:	2a0b      	cmp	r2, #11
90016192:	d04a      	beq.n	9001622a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
90016194:	d80e      	bhi.n	900161b4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
90016196:	2a03      	cmp	r2, #3
90016198:	d03f      	beq.n	9001621a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
9001619a:	d804      	bhi.n	900161a6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
9001619c:	2a01      	cmp	r2, #1
9001619e:	d03e      	beq.n	9001621e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
900161a0:	d93f      	bls.n	90016222 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
900161a2:	6b80      	ldr	r0, [r0, #56]	; 0x38
900161a4:	4770      	bx	lr
900161a6:	2a09      	cmp	r2, #9
900161a8:	d03f      	beq.n	9001622a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
900161aa:	d83c      	bhi.n	90016226 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
900161ac:	2a08      	cmp	r2, #8
900161ae:	d03a      	beq.n	90016226 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
900161b0:	2000      	movs	r0, #0
900161b2:	4770      	bx	lr
900161b4:	2a2f      	cmp	r2, #47	; 0x2f
900161b6:	d024      	beq.n	90016202 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
900161b8:	d80d      	bhi.n	900161d6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4a>
900161ba:	2a2d      	cmp	r2, #45	; 0x2d
900161bc:	d014      	beq.n	900161e8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x5c>
900161be:	d826      	bhi.n	9001620e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
900161c0:	2a2c      	cmp	r2, #44	; 0x2c
900161c2:	d1f5      	bne.n	900161b0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
900161c4:	684b      	ldr	r3, [r1, #4]
900161c6:	781b      	ldrb	r3, [r3, #0]
900161c8:	2b01      	cmp	r3, #1
900161ca:	d018      	beq.n	900161fe <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x72>
900161cc:	d323      	bcc.n	90016216 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8a>
900161ce:	2b02      	cmp	r3, #2
900161d0:	d1ee      	bne.n	900161b0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
900161d2:	6880      	ldr	r0, [r0, #8]
900161d4:	4770      	bx	lr
900161d6:	2a31      	cmp	r2, #49	; 0x31
900161d8:	d004      	beq.n	900161e4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x58>
900161da:	d328      	bcc.n	9001622e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
900161dc:	2a32      	cmp	r2, #50	; 0x32
900161de:	d026      	beq.n	9001622e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
900161e0:	2a33      	cmp	r2, #51	; 0x33
900161e2:	d1e5      	bne.n	900161b0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
900161e4:	6f00      	ldr	r0, [r0, #112]	; 0x70
900161e6:	4770      	bx	lr
900161e8:	684b      	ldr	r3, [r1, #4]
900161ea:	781b      	ldrb	r3, [r3, #0]
900161ec:	2b01      	cmp	r3, #1
900161ee:	d004      	beq.n	900161fa <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
900161f0:	d30b      	bcc.n	9001620a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
900161f2:	2b02      	cmp	r3, #2
900161f4:	d1dc      	bne.n	900161b0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
900161f6:	6900      	ldr	r0, [r0, #16]
900161f8:	4770      	bx	lr
900161fa:	6a00      	ldr	r0, [r0, #32]
900161fc:	4770      	bx	lr
900161fe:	6980      	ldr	r0, [r0, #24]
90016200:	4770      	bx	lr
90016202:	684b      	ldr	r3, [r1, #4]
90016204:	781b      	ldrb	r3, [r3, #0]
90016206:	2b00      	cmp	r3, #0
90016208:	d1d2      	bne.n	900161b0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
9001620a:	6b00      	ldr	r0, [r0, #48]	; 0x30
9001620c:	4770      	bx	lr
9001620e:	684b      	ldr	r3, [r1, #4]
90016210:	781b      	ldrb	r3, [r3, #0]
90016212:	2b00      	cmp	r3, #0
90016214:	d1cc      	bne.n	900161b0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
90016216:	6a80      	ldr	r0, [r0, #40]	; 0x28
90016218:	4770      	bx	lr
9001621a:	6c80      	ldr	r0, [r0, #72]	; 0x48
9001621c:	4770      	bx	lr
9001621e:	6d00      	ldr	r0, [r0, #80]	; 0x50
90016220:	4770      	bx	lr
90016222:	6c00      	ldr	r0, [r0, #64]	; 0x40
90016224:	4770      	bx	lr
90016226:	6d80      	ldr	r0, [r0, #88]	; 0x58
90016228:	4770      	bx	lr
9001622a:	6e00      	ldr	r0, [r0, #96]	; 0x60
9001622c:	4770      	bx	lr
9001622e:	6e80      	ldr	r0, [r0, #104]	; 0x68
90016230:	4770      	bx	lr
90016232:	2a0b      	cmp	r2, #11
90016234:	d049      	beq.n	900162ca <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
90016236:	d80e      	bhi.n	90016256 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xca>
90016238:	2a03      	cmp	r2, #3
9001623a:	d040      	beq.n	900162be <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
9001623c:	d804      	bhi.n	90016248 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbc>
9001623e:	2a01      	cmp	r2, #1
90016240:	d03f      	beq.n	900162c2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
90016242:	d940      	bls.n	900162c6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
90016244:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
90016246:	4770      	bx	lr
90016248:	2a09      	cmp	r2, #9
9001624a:	d03e      	beq.n	900162ca <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
9001624c:	d801      	bhi.n	90016252 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc6>
9001624e:	2a08      	cmp	r2, #8
90016250:	d1ae      	bne.n	900161b0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
90016252:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
90016254:	4770      	bx	lr
90016256:	2a2f      	cmp	r2, #47	; 0x2f
90016258:	d024      	beq.n	900162a4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x118>
9001625a:	d80d      	bhi.n	90016278 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xec>
9001625c:	2a2d      	cmp	r2, #45	; 0x2d
9001625e:	d014      	beq.n	9001628a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfe>
90016260:	d826      	bhi.n	900162b0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x124>
90016262:	2a2c      	cmp	r2, #44	; 0x2c
90016264:	d1a4      	bne.n	900161b0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
90016266:	684b      	ldr	r3, [r1, #4]
90016268:	781b      	ldrb	r3, [r3, #0]
9001626a:	2b01      	cmp	r3, #1
9001626c:	d018      	beq.n	900162a0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x114>
9001626e:	d324      	bcc.n	900162ba <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12e>
90016270:	2b02      	cmp	r3, #2
90016272:	d19d      	bne.n	900161b0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
90016274:	68c0      	ldr	r0, [r0, #12]
90016276:	4770      	bx	lr
90016278:	2a31      	cmp	r2, #49	; 0x31
9001627a:	d004      	beq.n	90016286 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfa>
9001627c:	d327      	bcc.n	900162ce <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
9001627e:	2a32      	cmp	r2, #50	; 0x32
90016280:	d025      	beq.n	900162ce <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
90016282:	2a33      	cmp	r2, #51	; 0x33
90016284:	d194      	bne.n	900161b0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
90016286:	6f40      	ldr	r0, [r0, #116]	; 0x74
90016288:	4770      	bx	lr
9001628a:	684b      	ldr	r3, [r1, #4]
9001628c:	781b      	ldrb	r3, [r3, #0]
9001628e:	2b01      	cmp	r3, #1
90016290:	d004      	beq.n	9001629c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x110>
90016292:	d30b      	bcc.n	900162ac <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x120>
90016294:	2b02      	cmp	r3, #2
90016296:	d18b      	bne.n	900161b0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
90016298:	6940      	ldr	r0, [r0, #20]
9001629a:	4770      	bx	lr
9001629c:	6a40      	ldr	r0, [r0, #36]	; 0x24
9001629e:	4770      	bx	lr
900162a0:	69c0      	ldr	r0, [r0, #28]
900162a2:	4770      	bx	lr
900162a4:	684b      	ldr	r3, [r1, #4]
900162a6:	781b      	ldrb	r3, [r3, #0]
900162a8:	2b00      	cmp	r3, #0
900162aa:	d181      	bne.n	900161b0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
900162ac:	6b40      	ldr	r0, [r0, #52]	; 0x34
900162ae:	4770      	bx	lr
900162b0:	684b      	ldr	r3, [r1, #4]
900162b2:	781b      	ldrb	r3, [r3, #0]
900162b4:	2b00      	cmp	r3, #0
900162b6:	f47f af7b 	bne.w	900161b0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
900162ba:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
900162bc:	4770      	bx	lr
900162be:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
900162c0:	4770      	bx	lr
900162c2:	6d40      	ldr	r0, [r0, #84]	; 0x54
900162c4:	4770      	bx	lr
900162c6:	6c40      	ldr	r0, [r0, #68]	; 0x44
900162c8:	4770      	bx	lr
900162ca:	6e40      	ldr	r0, [r0, #100]	; 0x64
900162cc:	4770      	bx	lr
900162ce:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
900162d0:	4770      	bx	lr

900162d2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
900162d2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900162d6:	b087      	sub	sp, #28
900162d8:	9815      	ldr	r0, [sp, #84]	; 0x54
900162da:	9205      	str	r2, [sp, #20]
900162dc:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
900162e0:	9101      	str	r1, [sp, #4]
900162e2:	9202      	str	r2, [sp, #8]
900162e4:	6841      	ldr	r1, [r0, #4]
900162e6:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
900162ea:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
900162ee:	fb01 2404 	mla	r4, r1, r4, r2
900162f2:	6802      	ldr	r2, [r0, #0]
900162f4:	eb02 0444 	add.w	r4, r2, r4, lsl #1
900162f8:	f8de 2000 	ldr.w	r2, [lr]
900162fc:	9203      	str	r2, [sp, #12]
900162fe:	f8de 2004 	ldr.w	r2, [lr, #4]
90016302:	3204      	adds	r2, #4
90016304:	9204      	str	r2, [sp, #16]
90016306:	9a02      	ldr	r2, [sp, #8]
90016308:	43d6      	mvns	r6, r2
9001630a:	b2f6      	uxtb	r6, r6
9001630c:	9a01      	ldr	r2, [sp, #4]
9001630e:	2a00      	cmp	r2, #0
90016310:	dc03      	bgt.n	9001631a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
90016312:	9a05      	ldr	r2, [sp, #20]
90016314:	2a00      	cmp	r2, #0
90016316:	f340 8129 	ble.w	9001656c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
9001631a:	9a11      	ldr	r2, [sp, #68]	; 0x44
9001631c:	f9be c008 	ldrsh.w	ip, [lr, #8]
90016320:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
90016324:	9a12      	ldr	r2, [sp, #72]	; 0x48
90016326:	f9be 700c 	ldrsh.w	r7, [lr, #12]
9001632a:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
9001632e:	2b00      	cmp	r3, #0
90016330:	dd0e      	ble.n	90016350 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
90016332:	1408      	asrs	r0, r1, #16
90016334:	d405      	bmi.n	90016342 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
90016336:	4560      	cmp	r0, ip
90016338:	da03      	bge.n	90016342 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
9001633a:	1410      	asrs	r0, r2, #16
9001633c:	d401      	bmi.n	90016342 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
9001633e:	42b8      	cmp	r0, r7
90016340:	db07      	blt.n	90016352 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
90016342:	9813      	ldr	r0, [sp, #76]	; 0x4c
90016344:	3b01      	subs	r3, #1
90016346:	3402      	adds	r4, #2
90016348:	4401      	add	r1, r0
9001634a:	9814      	ldr	r0, [sp, #80]	; 0x50
9001634c:	4402      	add	r2, r0
9001634e:	e7ee      	b.n	9001632e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
90016350:	d071      	beq.n	90016436 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
90016352:	1e58      	subs	r0, r3, #1
90016354:	9d13      	ldr	r5, [sp, #76]	; 0x4c
90016356:	fb05 1500 	mla	r5, r5, r0, r1
9001635a:	142d      	asrs	r5, r5, #16
9001635c:	d45f      	bmi.n	9001641e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
9001635e:	4565      	cmp	r5, ip
90016360:	da5d      	bge.n	9001641e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
90016362:	9d14      	ldr	r5, [sp, #80]	; 0x50
90016364:	fb05 2000 	mla	r0, r5, r0, r2
90016368:	1400      	asrs	r0, r0, #16
9001636a:	d458      	bmi.n	9001641e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
9001636c:	42b8      	cmp	r0, r7
9001636e:	da56      	bge.n	9001641e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
90016370:	4699      	mov	r9, r3
90016372:	46a2      	mov	sl, r4
90016374:	f8bd b008 	ldrh.w	fp, [sp, #8]
90016378:	f1b9 0f00 	cmp.w	r9, #0
9001637c:	dd57      	ble.n	9001642e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
9001637e:	ea4f 4c22 	mov.w	ip, r2, asr #16
90016382:	f9be 7008 	ldrsh.w	r7, [lr, #8]
90016386:	9803      	ldr	r0, [sp, #12]
90016388:	140d      	asrs	r5, r1, #16
9001638a:	f109 39ff 	add.w	r9, r9, #4294967295
9001638e:	fb07 000c 	mla	r0, r7, ip, r0
90016392:	5d40      	ldrb	r0, [r0, r5]
90016394:	9d04      	ldr	r5, [sp, #16]
90016396:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
9001639a:	f8ba 5000 	ldrh.w	r5, [sl]
9001639e:	ea4f 2c20 	mov.w	ip, r0, asr #8
900163a2:	122f      	asrs	r7, r5, #8
900163a4:	ea4f 08e5 	mov.w	r8, r5, asr #3
900163a8:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
900163ac:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
900163b0:	00ed      	lsls	r5, r5, #3
900163b2:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
900163b6:	fb17 f706 	smulbb	r7, r7, r6
900163ba:	b2ed      	uxtb	r5, r5
900163bc:	fb18 f806 	smulbb	r8, r8, r6
900163c0:	fb0c 7c0b 	mla	ip, ip, fp, r7
900163c4:	10c7      	asrs	r7, r0, #3
900163c6:	fb15 f506 	smulbb	r5, r5, r6
900163ca:	00c0      	lsls	r0, r0, #3
900163cc:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
900163d0:	fa1f fc8c 	uxth.w	ip, ip
900163d4:	b2c0      	uxtb	r0, r0
900163d6:	fb07 870b 	mla	r7, r7, fp, r8
900163da:	fb00 500b 	mla	r0, r0, fp, r5
900163de:	f10c 0501 	add.w	r5, ip, #1
900163e2:	b2bf      	uxth	r7, r7
900163e4:	b280      	uxth	r0, r0
900163e6:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
900163ea:	f107 0801 	add.w	r8, r7, #1
900163ee:	1c45      	adds	r5, r0, #1
900163f0:	eb08 2817 	add.w	r8, r8, r7, lsr #8
900163f4:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
900163f8:	eb05 2510 	add.w	r5, r5, r0, lsr #8
900163fc:	9813      	ldr	r0, [sp, #76]	; 0x4c
900163fe:	ea4f 1858 	mov.w	r8, r8, lsr #5
90016402:	f3c5 25c4 	ubfx	r5, r5, #11, #5
90016406:	4401      	add	r1, r0
90016408:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
9001640c:	9814      	ldr	r0, [sp, #80]	; 0x50
9001640e:	ea45 0c0c 	orr.w	ip, r5, ip
90016412:	4402      	add	r2, r0
90016414:	ea4c 0c08 	orr.w	ip, ip, r8
90016418:	f82a cb02 	strh.w	ip, [sl], #2
9001641c:	e7ac      	b.n	90016378 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
9001641e:	f04f 0800 	mov.w	r8, #0
90016422:	f8bd a008 	ldrh.w	sl, [sp, #8]
90016426:	eb03 0008 	add.w	r0, r3, r8
9001642a:	2800      	cmp	r0, #0
9001642c:	dc41      	bgt.n	900164b2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
9001642e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
90016432:	eb04 0443 	add.w	r4, r4, r3, lsl #1
90016436:	9b01      	ldr	r3, [sp, #4]
90016438:	2b00      	cmp	r3, #0
9001643a:	f340 8097 	ble.w	9001656c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
9001643e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
90016442:	9b10      	ldr	r3, [sp, #64]	; 0x40
90016444:	ee30 0a04 	vadd.f32	s0, s0, s8
90016448:	ee70 0aa4 	vadd.f32	s1, s1, s9
9001644c:	eef0 6a62 	vmov.f32	s13, s5
90016450:	eec7 7a00 	vdiv.f32	s15, s14, s0
90016454:	ee31 1a05 	vadd.f32	s2, s2, s10
90016458:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9001645c:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
90016460:	eef0 6a43 	vmov.f32	s13, s6
90016464:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
90016468:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
9001646c:	ee20 7aa7 	vmul.f32	s14, s1, s15
90016470:	ee61 7a27 	vmul.f32	s15, s2, s15
90016474:	ee77 2a62 	vsub.f32	s5, s14, s5
90016478:	ee37 3ac3 	vsub.f32	s6, s15, s6
9001647c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
90016480:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
90016484:	ee12 2a90 	vmov	r2, s5
90016488:	eef0 2a47 	vmov.f32	s5, s14
9001648c:	fb92 f3f3 	sdiv	r3, r2, r3
90016490:	ee13 2a10 	vmov	r2, s6
90016494:	9313      	str	r3, [sp, #76]	; 0x4c
90016496:	9b10      	ldr	r3, [sp, #64]	; 0x40
90016498:	eeb0 3a67 	vmov.f32	s6, s15
9001649c:	fb92 f3f3 	sdiv	r3, r2, r3
900164a0:	9314      	str	r3, [sp, #80]	; 0x50
900164a2:	9b01      	ldr	r3, [sp, #4]
900164a4:	9a05      	ldr	r2, [sp, #20]
900164a6:	3b01      	subs	r3, #1
900164a8:	9301      	str	r3, [sp, #4]
900164aa:	9b10      	ldr	r3, [sp, #64]	; 0x40
900164ac:	bf08      	it	eq
900164ae:	4613      	moveq	r3, r2
900164b0:	e72c      	b.n	9001630c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
900164b2:	140f      	asrs	r7, r1, #16
900164b4:	d453      	bmi.n	9001655e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
900164b6:	f8de 5008 	ldr.w	r5, [lr, #8]
900164ba:	42bd      	cmp	r5, r7
900164bc:	dd4f      	ble.n	9001655e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
900164be:	ea5f 4c22 	movs.w	ip, r2, asr #16
900164c2:	d44c      	bmi.n	9001655e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
900164c4:	f8de 000c 	ldr.w	r0, [lr, #12]
900164c8:	4560      	cmp	r0, ip
900164ca:	dd48      	ble.n	9001655e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
900164cc:	9803      	ldr	r0, [sp, #12]
900164ce:	b22d      	sxth	r5, r5
900164d0:	fb0c 0505 	mla	r5, ip, r5, r0
900164d4:	5de8      	ldrb	r0, [r5, r7]
900164d6:	9d04      	ldr	r5, [sp, #16]
900164d8:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
900164dc:	f06f 0501 	mvn.w	r5, #1
900164e0:	fb05 fb08 	mul.w	fp, r5, r8
900164e4:	ea4f 2c20 	mov.w	ip, r0, asr #8
900164e8:	f834 500b 	ldrh.w	r5, [r4, fp]
900164ec:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
900164f0:	122f      	asrs	r7, r5, #8
900164f2:	ea4f 09e5 	mov.w	r9, r5, asr #3
900164f6:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
900164fa:	00ed      	lsls	r5, r5, #3
900164fc:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
90016500:	fb17 f706 	smulbb	r7, r7, r6
90016504:	b2ed      	uxtb	r5, r5
90016506:	fb19 f906 	smulbb	r9, r9, r6
9001650a:	fb0c 7c0a 	mla	ip, ip, sl, r7
9001650e:	10c7      	asrs	r7, r0, #3
90016510:	fb15 f506 	smulbb	r5, r5, r6
90016514:	00c0      	lsls	r0, r0, #3
90016516:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
9001651a:	fa1f fc8c 	uxth.w	ip, ip
9001651e:	b2c0      	uxtb	r0, r0
90016520:	fb07 970a 	mla	r7, r7, sl, r9
90016524:	fb00 500a 	mla	r0, r0, sl, r5
90016528:	f10c 0501 	add.w	r5, ip, #1
9001652c:	b2bf      	uxth	r7, r7
9001652e:	b280      	uxth	r0, r0
90016530:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
90016534:	f107 0901 	add.w	r9, r7, #1
90016538:	1c45      	adds	r5, r0, #1
9001653a:	eb09 2917 	add.w	r9, r9, r7, lsr #8
9001653e:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
90016542:	eb05 2510 	add.w	r5, r5, r0, lsr #8
90016546:	ea4f 1959 	mov.w	r9, r9, lsr #5
9001654a:	f3c5 25c4 	ubfx	r5, r5, #11, #5
9001654e:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
90016552:	ea45 0c0c 	orr.w	ip, r5, ip
90016556:	ea4c 0c09 	orr.w	ip, ip, r9
9001655a:	f824 c00b 	strh.w	ip, [r4, fp]
9001655e:	9813      	ldr	r0, [sp, #76]	; 0x4c
90016560:	f108 38ff 	add.w	r8, r8, #4294967295
90016564:	4401      	add	r1, r0
90016566:	9814      	ldr	r0, [sp, #80]	; 0x50
90016568:	4402      	add	r2, r0
9001656a:	e75c      	b.n	90016426 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
9001656c:	b007      	add	sp, #28
9001656e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

90016572 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
90016572:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90016576:	b085      	sub	sp, #20
90016578:	4693      	mov	fp, r2
9001657a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
9001657e:	9e13      	ldr	r6, [sp, #76]	; 0x4c
90016580:	9d16      	ldr	r5, [sp, #88]	; 0x58
90016582:	6870      	ldr	r0, [r6, #4]
90016584:	9100      	str	r1, [sp, #0]
90016586:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
9001658a:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	; 0x44
9001658e:	fb00 2404 	mla	r4, r0, r4, r2
90016592:	6832      	ldr	r2, [r6, #0]
90016594:	eb02 0444 	add.w	r4, r2, r4, lsl #1
90016598:	682a      	ldr	r2, [r5, #0]
9001659a:	9201      	str	r2, [sp, #4]
9001659c:	686a      	ldr	r2, [r5, #4]
9001659e:	3204      	adds	r2, #4
900165a0:	9202      	str	r2, [sp, #8]
900165a2:	9a00      	ldr	r2, [sp, #0]
900165a4:	2a00      	cmp	r2, #0
900165a6:	dc03      	bgt.n	900165b0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
900165a8:	f1bb 0f00 	cmp.w	fp, #0
900165ac:	f340 80a0 	ble.w	900166f0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
900165b0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
900165b2:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
900165b6:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
900165ba:	9a10      	ldr	r2, [sp, #64]	; 0x40
900165bc:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
900165c0:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
900165c4:	2b00      	cmp	r3, #0
900165c6:	dd0c      	ble.n	900165e2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
900165c8:	1406      	asrs	r6, r0, #16
900165ca:	d405      	bmi.n	900165d8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
900165cc:	454e      	cmp	r6, r9
900165ce:	da03      	bge.n	900165d8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
900165d0:	1416      	asrs	r6, r2, #16
900165d2:	d401      	bmi.n	900165d8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
900165d4:	4546      	cmp	r6, r8
900165d6:	db05      	blt.n	900165e4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
900165d8:	4470      	add	r0, lr
900165da:	4462      	add	r2, ip
900165dc:	3b01      	subs	r3, #1
900165de:	3402      	adds	r4, #2
900165e0:	e7f0      	b.n	900165c4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
900165e2:	d00f      	beq.n	90016604 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
900165e4:	1e5e      	subs	r6, r3, #1
900165e6:	fb0e 0706 	mla	r7, lr, r6, r0
900165ea:	143f      	asrs	r7, r7, #16
900165ec:	d541      	bpl.n	90016672 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x100>
900165ee:	eb04 0643 	add.w	r6, r4, r3, lsl #1
900165f2:	4698      	mov	r8, r3
900165f4:	9603      	str	r6, [sp, #12]
900165f6:	f1b8 0f00 	cmp.w	r8, #0
900165fa:	dc59      	bgt.n	900166b0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
900165fc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
90016600:	eb04 0443 	add.w	r4, r4, r3, lsl #1
90016604:	9b00      	ldr	r3, [sp, #0]
90016606:	2b00      	cmp	r3, #0
90016608:	dd72      	ble.n	900166f0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
9001660a:	ee30 0a04 	vadd.f32	s0, s0, s8
9001660e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
90016610:	ee70 0aa4 	vadd.f32	s1, s1, s9
90016614:	eeb0 6a62 	vmov.f32	s12, s5
90016618:	eec6 7a80 	vdiv.f32	s15, s13, s0
9001661c:	ee31 1a05 	vadd.f32	s2, s2, s10
90016620:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
90016624:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
90016628:	eeb0 6a43 	vmov.f32	s12, s6
9001662c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
90016630:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
90016634:	ee20 7aa7 	vmul.f32	s14, s1, s15
90016638:	ee61 7a27 	vmul.f32	s15, s2, s15
9001663c:	ee77 2a62 	vsub.f32	s5, s14, s5
90016640:	ee37 3ac3 	vsub.f32	s6, s15, s6
90016644:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
90016648:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9001664c:	ee12 2a90 	vmov	r2, s5
90016650:	eef0 2a47 	vmov.f32	s5, s14
90016654:	fb92 fef3 	sdiv	lr, r2, r3
90016658:	ee13 2a10 	vmov	r2, s6
9001665c:	eeb0 3a67 	vmov.f32	s6, s15
90016660:	fb92 fcf3 	sdiv	ip, r2, r3
90016664:	9b00      	ldr	r3, [sp, #0]
90016666:	3b01      	subs	r3, #1
90016668:	9300      	str	r3, [sp, #0]
9001666a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001666c:	bf08      	it	eq
9001666e:	465b      	moveq	r3, fp
90016670:	e797      	b.n	900165a2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
90016672:	454f      	cmp	r7, r9
90016674:	dabb      	bge.n	900165ee <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
90016676:	fb0c 2606 	mla	r6, ip, r6, r2
9001667a:	1436      	asrs	r6, r6, #16
9001667c:	d4b7      	bmi.n	900165ee <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
9001667e:	4546      	cmp	r6, r8
90016680:	dab5      	bge.n	900165ee <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
90016682:	461e      	mov	r6, r3
90016684:	46a0      	mov	r8, r4
90016686:	2e00      	cmp	r6, #0
90016688:	ddb8      	ble.n	900165fc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
9001668a:	1417      	asrs	r7, r2, #16
9001668c:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
90016690:	9901      	ldr	r1, [sp, #4]
90016692:	ea4f 4920 	mov.w	r9, r0, asr #16
90016696:	4462      	add	r2, ip
90016698:	4470      	add	r0, lr
9001669a:	fb0a 1707 	mla	r7, sl, r7, r1
9001669e:	9902      	ldr	r1, [sp, #8]
900166a0:	3e01      	subs	r6, #1
900166a2:	f817 7009 	ldrb.w	r7, [r7, r9]
900166a6:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
900166aa:	f828 7b02 	strh.w	r7, [r8], #2
900166ae:	e7ea      	b.n	90016686 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
900166b0:	ea5f 4920 	movs.w	r9, r0, asr #16
900166b4:	d417      	bmi.n	900166e6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
900166b6:	68ae      	ldr	r6, [r5, #8]
900166b8:	454e      	cmp	r6, r9
900166ba:	dd14      	ble.n	900166e6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
900166bc:	ea5f 4a22 	movs.w	sl, r2, asr #16
900166c0:	d411      	bmi.n	900166e6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
900166c2:	68ef      	ldr	r7, [r5, #12]
900166c4:	4557      	cmp	r7, sl
900166c6:	dd0e      	ble.n	900166e6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
900166c8:	9f01      	ldr	r7, [sp, #4]
900166ca:	b236      	sxth	r6, r6
900166cc:	f06f 0101 	mvn.w	r1, #1
900166d0:	fb0a 7606 	mla	r6, sl, r6, r7
900166d4:	9f02      	ldr	r7, [sp, #8]
900166d6:	f816 6009 	ldrb.w	r6, [r6, r9]
900166da:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
900166de:	fb01 f608 	mul.w	r6, r1, r8
900166e2:	9903      	ldr	r1, [sp, #12]
900166e4:	538f      	strh	r7, [r1, r6]
900166e6:	4470      	add	r0, lr
900166e8:	4462      	add	r2, ip
900166ea:	f108 38ff 	add.w	r8, r8, #4294967295
900166ee:	e782      	b.n	900165f6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
900166f0:	b005      	add	sp, #20
900166f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

900166f6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
900166f6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900166fa:	b087      	sub	sp, #28
900166fc:	9c15      	ldr	r4, [sp, #84]	; 0x54
900166fe:	9205      	str	r2, [sp, #20]
90016700:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
90016704:	9102      	str	r1, [sp, #8]
90016706:	9203      	str	r2, [sp, #12]
90016708:	6861      	ldr	r1, [r4, #4]
9001670a:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
9001670e:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
90016712:	fb01 2000 	mla	r0, r1, r0, r2
90016716:	6822      	ldr	r2, [r4, #0]
90016718:	eb02 0240 	add.w	r2, r2, r0, lsl #1
9001671c:	9200      	str	r2, [sp, #0]
9001671e:	f8dc 2000 	ldr.w	r2, [ip]
90016722:	9204      	str	r2, [sp, #16]
90016724:	f8dc 2004 	ldr.w	r2, [ip, #4]
90016728:	3204      	adds	r2, #4
9001672a:	9201      	str	r2, [sp, #4]
9001672c:	9a03      	ldr	r2, [sp, #12]
9001672e:	43d5      	mvns	r5, r2
90016730:	b2ed      	uxtb	r5, r5
90016732:	9a02      	ldr	r2, [sp, #8]
90016734:	2a00      	cmp	r2, #0
90016736:	dc03      	bgt.n	90016740 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
90016738:	9a05      	ldr	r2, [sp, #20]
9001673a:	2a00      	cmp	r2, #0
9001673c:	f340 812c 	ble.w	90016998 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
90016740:	9a11      	ldr	r2, [sp, #68]	; 0x44
90016742:	f9bc e008 	ldrsh.w	lr, [ip, #8]
90016746:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
9001674a:	9a12      	ldr	r2, [sp, #72]	; 0x48
9001674c:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
90016750:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
90016754:	2b00      	cmp	r3, #0
90016756:	dd10      	ble.n	9001677a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
90016758:	140c      	asrs	r4, r1, #16
9001675a:	d405      	bmi.n	90016768 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
9001675c:	4574      	cmp	r4, lr
9001675e:	da03      	bge.n	90016768 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
90016760:	1414      	asrs	r4, r2, #16
90016762:	d401      	bmi.n	90016768 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
90016764:	42bc      	cmp	r4, r7
90016766:	db09      	blt.n	9001677c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
90016768:	9c13      	ldr	r4, [sp, #76]	; 0x4c
9001676a:	3b01      	subs	r3, #1
9001676c:	9800      	ldr	r0, [sp, #0]
9001676e:	4421      	add	r1, r4
90016770:	9c14      	ldr	r4, [sp, #80]	; 0x50
90016772:	3002      	adds	r0, #2
90016774:	4422      	add	r2, r4
90016776:	9000      	str	r0, [sp, #0]
90016778:	e7ec      	b.n	90016754 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
9001677a:	d071      	beq.n	90016860 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
9001677c:	1e5c      	subs	r4, r3, #1
9001677e:	9e13      	ldr	r6, [sp, #76]	; 0x4c
90016780:	fb06 1604 	mla	r6, r6, r4, r1
90016784:	1436      	asrs	r6, r6, #16
90016786:	d45d      	bmi.n	90016844 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
90016788:	4576      	cmp	r6, lr
9001678a:	da5b      	bge.n	90016844 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
9001678c:	9e14      	ldr	r6, [sp, #80]	; 0x50
9001678e:	fb06 2404 	mla	r4, r6, r4, r2
90016792:	1424      	asrs	r4, r4, #16
90016794:	d456      	bmi.n	90016844 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
90016796:	42bc      	cmp	r4, r7
90016798:	da54      	bge.n	90016844 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
9001679a:	4698      	mov	r8, r3
9001679c:	f8dd 9000 	ldr.w	r9, [sp]
900167a0:	f8bd a00c 	ldrh.w	sl, [sp, #12]
900167a4:	f1b8 0f00 	cmp.w	r8, #0
900167a8:	dd54      	ble.n	90016854 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
900167aa:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
900167ae:	1414      	asrs	r4, r2, #16
900167b0:	9804      	ldr	r0, [sp, #16]
900167b2:	140e      	asrs	r6, r1, #16
900167b4:	f108 38ff 	add.w	r8, r8, #4294967295
900167b8:	fb07 0404 	mla	r4, r7, r4, r0
900167bc:	9801      	ldr	r0, [sp, #4]
900167be:	f814 e006 	ldrb.w	lr, [r4, r6]
900167c2:	f8b9 4000 	ldrh.w	r4, [r9]
900167c6:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
900167ca:	1227      	asrs	r7, r4, #8
900167cc:	eb00 0b0e 	add.w	fp, r0, lr
900167d0:	f810 e00e 	ldrb.w	lr, [r0, lr]
900167d4:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
900167d8:	9813      	ldr	r0, [sp, #76]	; 0x4c
900167da:	f89b 6002 	ldrb.w	r6, [fp, #2]
900167de:	f89b b001 	ldrb.w	fp, [fp, #1]
900167e2:	4401      	add	r1, r0
900167e4:	fb16 f60a 	smulbb	r6, r6, sl
900167e8:	9814      	ldr	r0, [sp, #80]	; 0x50
900167ea:	fb1b fb0a 	smulbb	fp, fp, sl
900167ee:	fb07 6705 	mla	r7, r7, r5, r6
900167f2:	10e6      	asrs	r6, r4, #3
900167f4:	00e4      	lsls	r4, r4, #3
900167f6:	4402      	add	r2, r0
900167f8:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
900167fc:	b2bf      	uxth	r7, r7
900167fe:	b2e4      	uxtb	r4, r4
90016800:	fb06 b605 	mla	r6, r6, r5, fp
90016804:	fb14 f405 	smulbb	r4, r4, r5
90016808:	b2b6      	uxth	r6, r6
9001680a:	fb0e 4e0a 	mla	lr, lr, sl, r4
9001680e:	1c7c      	adds	r4, r7, #1
90016810:	f106 0b01 	add.w	fp, r6, #1
90016814:	fa1f fe8e 	uxth.w	lr, lr
90016818:	eb04 2717 	add.w	r7, r4, r7, lsr #8
9001681c:	f10e 0401 	add.w	r4, lr, #1
90016820:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
90016824:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
90016828:	eb04 241e 	add.w	r4, r4, lr, lsr #8
9001682c:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
90016830:	f3c4 24c4 	ubfx	r4, r4, #11, #5
90016834:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
90016838:	4327      	orrs	r7, r4
9001683a:	ea47 070b 	orr.w	r7, r7, fp
9001683e:	f829 7b02 	strh.w	r7, [r9], #2
90016842:	e7af      	b.n	900167a4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
90016844:	f04f 0e00 	mov.w	lr, #0
90016848:	f8bd 900c 	ldrh.w	r9, [sp, #12]
9001684c:	eb03 040e 	add.w	r4, r3, lr
90016850:	2c00      	cmp	r4, #0
90016852:	dc43      	bgt.n	900168dc <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
90016854:	9a00      	ldr	r2, [sp, #0]
90016856:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
9001685a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
9001685e:	9300      	str	r3, [sp, #0]
90016860:	9b02      	ldr	r3, [sp, #8]
90016862:	2b00      	cmp	r3, #0
90016864:	f340 8098 	ble.w	90016998 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
90016868:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
9001686c:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001686e:	ee30 0a04 	vadd.f32	s0, s0, s8
90016872:	ee70 0aa4 	vadd.f32	s1, s1, s9
90016876:	eef0 6a62 	vmov.f32	s13, s5
9001687a:	eec7 7a00 	vdiv.f32	s15, s14, s0
9001687e:	ee31 1a05 	vadd.f32	s2, s2, s10
90016882:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
90016886:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
9001688a:	eef0 6a43 	vmov.f32	s13, s6
9001688e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
90016892:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
90016896:	ee20 7aa7 	vmul.f32	s14, s1, s15
9001689a:	ee61 7a27 	vmul.f32	s15, s2, s15
9001689e:	ee77 2a62 	vsub.f32	s5, s14, s5
900168a2:	ee37 3ac3 	vsub.f32	s6, s15, s6
900168a6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
900168aa:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
900168ae:	ee12 2a90 	vmov	r2, s5
900168b2:	eef0 2a47 	vmov.f32	s5, s14
900168b6:	fb92 f3f3 	sdiv	r3, r2, r3
900168ba:	ee13 2a10 	vmov	r2, s6
900168be:	9313      	str	r3, [sp, #76]	; 0x4c
900168c0:	9b10      	ldr	r3, [sp, #64]	; 0x40
900168c2:	eeb0 3a67 	vmov.f32	s6, s15
900168c6:	fb92 f3f3 	sdiv	r3, r2, r3
900168ca:	9314      	str	r3, [sp, #80]	; 0x50
900168cc:	9b02      	ldr	r3, [sp, #8]
900168ce:	9a05      	ldr	r2, [sp, #20]
900168d0:	3b01      	subs	r3, #1
900168d2:	9302      	str	r3, [sp, #8]
900168d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
900168d6:	bf08      	it	eq
900168d8:	4613      	moveq	r3, r2
900168da:	e72a      	b.n	90016732 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
900168dc:	140f      	asrs	r7, r1, #16
900168de:	d454      	bmi.n	9001698a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
900168e0:	f8dc 6008 	ldr.w	r6, [ip, #8]
900168e4:	42be      	cmp	r6, r7
900168e6:	dd50      	ble.n	9001698a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
900168e8:	ea5f 4822 	movs.w	r8, r2, asr #16
900168ec:	d44d      	bmi.n	9001698a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
900168ee:	f8dc 400c 	ldr.w	r4, [ip, #12]
900168f2:	4544      	cmp	r4, r8
900168f4:	dd49      	ble.n	9001698a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
900168f6:	9c04      	ldr	r4, [sp, #16]
900168f8:	b236      	sxth	r6, r6
900168fa:	f06f 0001 	mvn.w	r0, #1
900168fe:	fb08 4606 	mla	r6, r8, r6, r4
90016902:	9c01      	ldr	r4, [sp, #4]
90016904:	fb00 fa0e 	mul.w	sl, r0, lr
90016908:	9800      	ldr	r0, [sp, #0]
9001690a:	f816 8007 	ldrb.w	r8, [r6, r7]
9001690e:	eb08 0848 	add.w	r8, r8, r8, lsl #1
90016912:	eb04 0b08 	add.w	fp, r4, r8
90016916:	f830 400a 	ldrh.w	r4, [r0, sl]
9001691a:	9801      	ldr	r0, [sp, #4]
9001691c:	f89b 6002 	ldrb.w	r6, [fp, #2]
90016920:	1227      	asrs	r7, r4, #8
90016922:	f89b b001 	ldrb.w	fp, [fp, #1]
90016926:	fb16 f609 	smulbb	r6, r6, r9
9001692a:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
9001692e:	f810 8008 	ldrb.w	r8, [r0, r8]
90016932:	fb1b fb09 	smulbb	fp, fp, r9
90016936:	fb07 6705 	mla	r7, r7, r5, r6
9001693a:	10e6      	asrs	r6, r4, #3
9001693c:	00e4      	lsls	r4, r4, #3
9001693e:	9800      	ldr	r0, [sp, #0]
90016940:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
90016944:	b2bf      	uxth	r7, r7
90016946:	b2e4      	uxtb	r4, r4
90016948:	fb06 b605 	mla	r6, r6, r5, fp
9001694c:	fb14 f405 	smulbb	r4, r4, r5
90016950:	b2b6      	uxth	r6, r6
90016952:	fb08 4809 	mla	r8, r8, r9, r4
90016956:	1c7c      	adds	r4, r7, #1
90016958:	f106 0b01 	add.w	fp, r6, #1
9001695c:	fa1f f888 	uxth.w	r8, r8
90016960:	eb04 2717 	add.w	r7, r4, r7, lsr #8
90016964:	f108 0401 	add.w	r4, r8, #1
90016968:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
9001696c:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
90016970:	eb04 2418 	add.w	r4, r4, r8, lsr #8
90016974:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
90016978:	f3c4 24c4 	ubfx	r4, r4, #11, #5
9001697c:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
90016980:	4327      	orrs	r7, r4
90016982:	ea47 070b 	orr.w	r7, r7, fp
90016986:	f820 700a 	strh.w	r7, [r0, sl]
9001698a:	9813      	ldr	r0, [sp, #76]	; 0x4c
9001698c:	f10e 3eff 	add.w	lr, lr, #4294967295
90016990:	4401      	add	r1, r0
90016992:	9814      	ldr	r0, [sp, #80]	; 0x50
90016994:	4402      	add	r2, r0
90016996:	e759      	b.n	9001684c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
90016998:	b007      	add	sp, #28
9001699a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

900169a0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
900169a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900169a4:	b085      	sub	sp, #20
900169a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
900169aa:	9e13      	ldr	r6, [sp, #76]	; 0x4c
900169ac:	9d16      	ldr	r5, [sp, #88]	; 0x58
900169ae:	9203      	str	r2, [sp, #12]
900169b0:	6870      	ldr	r0, [r6, #4]
900169b2:	686f      	ldr	r7, [r5, #4]
900169b4:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
900169b8:	3704      	adds	r7, #4
900169ba:	9101      	str	r1, [sp, #4]
900169bc:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
900169c0:	fb00 2404 	mla	r4, r0, r4, r2
900169c4:	6832      	ldr	r2, [r6, #0]
900169c6:	eb02 0444 	add.w	r4, r2, r4, lsl #1
900169ca:	682a      	ldr	r2, [r5, #0]
900169cc:	9202      	str	r2, [sp, #8]
900169ce:	9a01      	ldr	r2, [sp, #4]
900169d0:	2a00      	cmp	r2, #0
900169d2:	dc03      	bgt.n	900169dc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
900169d4:	9a03      	ldr	r2, [sp, #12]
900169d6:	2a00      	cmp	r2, #0
900169d8:	f340 80cc 	ble.w	90016b74 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
900169dc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
900169de:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
900169e2:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
900169e6:	9a10      	ldr	r2, [sp, #64]	; 0x40
900169e8:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
900169ec:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
900169f0:	2b00      	cmp	r3, #0
900169f2:	dd0d      	ble.n	90016a10 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
900169f4:	1406      	asrs	r6, r0, #16
900169f6:	d405      	bmi.n	90016a04 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
900169f8:	454e      	cmp	r6, r9
900169fa:	da03      	bge.n	90016a04 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
900169fc:	1416      	asrs	r6, r2, #16
900169fe:	d401      	bmi.n	90016a04 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
90016a00:	4546      	cmp	r6, r8
90016a02:	db06      	blt.n	90016a12 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
90016a04:	9e12      	ldr	r6, [sp, #72]	; 0x48
90016a06:	4460      	add	r0, ip
90016a08:	3b01      	subs	r3, #1
90016a0a:	3402      	adds	r4, #2
90016a0c:	4432      	add	r2, r6
90016a0e:	e7ef      	b.n	900169f0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
90016a10:	d00f      	beq.n	90016a32 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
90016a12:	1e5e      	subs	r6, r3, #1
90016a14:	fb0c 0e06 	mla	lr, ip, r6, r0
90016a18:	ea5f 4e2e 	movs.w	lr, lr, asr #16
90016a1c:	d543      	bpl.n	90016aa6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x106>
90016a1e:	4698      	mov	r8, r3
90016a20:	eb04 0a43 	add.w	sl, r4, r3, lsl #1
90016a24:	f1b8 0f00 	cmp.w	r8, #0
90016a28:	dc71      	bgt.n	90016b0e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16e>
90016a2a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
90016a2e:	eb04 0443 	add.w	r4, r4, r3, lsl #1
90016a32:	9b01      	ldr	r3, [sp, #4]
90016a34:	2b00      	cmp	r3, #0
90016a36:	f340 809d 	ble.w	90016b74 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
90016a3a:	ee30 0a04 	vadd.f32	s0, s0, s8
90016a3e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
90016a40:	ee70 0aa4 	vadd.f32	s1, s1, s9
90016a44:	eeb0 6a62 	vmov.f32	s12, s5
90016a48:	eec6 7a80 	vdiv.f32	s15, s13, s0
90016a4c:	ee31 1a05 	vadd.f32	s2, s2, s10
90016a50:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
90016a54:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
90016a58:	eeb0 6a43 	vmov.f32	s12, s6
90016a5c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
90016a60:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
90016a64:	ee20 7aa7 	vmul.f32	s14, s1, s15
90016a68:	ee61 7a27 	vmul.f32	s15, s2, s15
90016a6c:	ee77 2a62 	vsub.f32	s5, s14, s5
90016a70:	ee37 3ac3 	vsub.f32	s6, s15, s6
90016a74:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
90016a78:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
90016a7c:	ee12 2a90 	vmov	r2, s5
90016a80:	eef0 2a47 	vmov.f32	s5, s14
90016a84:	fb92 fcf3 	sdiv	ip, r2, r3
90016a88:	ee13 2a10 	vmov	r2, s6
90016a8c:	eeb0 3a67 	vmov.f32	s6, s15
90016a90:	fb92 f3f3 	sdiv	r3, r2, r3
90016a94:	9312      	str	r3, [sp, #72]	; 0x48
90016a96:	9b01      	ldr	r3, [sp, #4]
90016a98:	9a03      	ldr	r2, [sp, #12]
90016a9a:	3b01      	subs	r3, #1
90016a9c:	9301      	str	r3, [sp, #4]
90016a9e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
90016aa0:	bf08      	it	eq
90016aa2:	4613      	moveq	r3, r2
90016aa4:	e793      	b.n	900169ce <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
90016aa6:	45ce      	cmp	lr, r9
90016aa8:	dab9      	bge.n	90016a1e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
90016aaa:	9912      	ldr	r1, [sp, #72]	; 0x48
90016aac:	fb01 2606 	mla	r6, r1, r6, r2
90016ab0:	1436      	asrs	r6, r6, #16
90016ab2:	d4b4      	bmi.n	90016a1e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
90016ab4:	4546      	cmp	r6, r8
90016ab6:	dab2      	bge.n	90016a1e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
90016ab8:	4698      	mov	r8, r3
90016aba:	46a2      	mov	sl, r4
90016abc:	f1b8 0f00 	cmp.w	r8, #0
90016ac0:	ddb3      	ble.n	90016a2a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
90016ac2:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
90016ac6:	1416      	asrs	r6, r2, #16
90016ac8:	9902      	ldr	r1, [sp, #8]
90016aca:	ea4f 4e20 	mov.w	lr, r0, asr #16
90016ace:	f108 38ff 	add.w	r8, r8, #4294967295
90016ad2:	4460      	add	r0, ip
90016ad4:	fb09 1606 	mla	r6, r9, r6, r1
90016ad8:	4928      	ldr	r1, [pc, #160]	; (90016b7c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>)
90016ada:	f816 e00e 	ldrb.w	lr, [r6, lr]
90016ade:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
90016ae2:	eb07 0b0e 	add.w	fp, r7, lr
90016ae6:	f89b 6001 	ldrb.w	r6, [fp, #1]
90016aea:	f89b 9002 	ldrb.w	r9, [fp, #2]
90016aee:	00f6      	lsls	r6, r6, #3
90016af0:	ea01 2909 	and.w	r9, r1, r9, lsl #8
90016af4:	9912      	ldr	r1, [sp, #72]	; 0x48
90016af6:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
90016afa:	440a      	add	r2, r1
90016afc:	ea49 0606 	orr.w	r6, r9, r6
90016b00:	f817 900e 	ldrb.w	r9, [r7, lr]
90016b04:	ea46 06d9 	orr.w	r6, r6, r9, lsr #3
90016b08:	f82a 6b02 	strh.w	r6, [sl], #2
90016b0c:	e7d6      	b.n	90016abc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
90016b0e:	ea5f 4920 	movs.w	r9, r0, asr #16
90016b12:	d429      	bmi.n	90016b68 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
90016b14:	68ae      	ldr	r6, [r5, #8]
90016b16:	454e      	cmp	r6, r9
90016b18:	dd26      	ble.n	90016b68 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
90016b1a:	ea5f 4b22 	movs.w	fp, r2, asr #16
90016b1e:	d423      	bmi.n	90016b68 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
90016b20:	68e9      	ldr	r1, [r5, #12]
90016b22:	4559      	cmp	r1, fp
90016b24:	dd20      	ble.n	90016b68 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
90016b26:	fa0f fe86 	sxth.w	lr, r6
90016b2a:	9902      	ldr	r1, [sp, #8]
90016b2c:	fb0b 1e0e 	mla	lr, fp, lr, r1
90016b30:	f06f 0101 	mvn.w	r1, #1
90016b34:	f81e e009 	ldrb.w	lr, [lr, r9]
90016b38:	fb01 f908 	mul.w	r9, r1, r8
90016b3c:	f2a1 71fe 	subw	r1, r1, #2046	; 0x7fe
90016b40:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
90016b44:	eb07 060e 	add.w	r6, r7, lr
90016b48:	f896 b002 	ldrb.w	fp, [r6, #2]
90016b4c:	7876      	ldrb	r6, [r6, #1]
90016b4e:	ea01 2b0b 	and.w	fp, r1, fp, lsl #8
90016b52:	00f6      	lsls	r6, r6, #3
90016b54:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
90016b58:	ea4b 0606 	orr.w	r6, fp, r6
90016b5c:	f817 b00e 	ldrb.w	fp, [r7, lr]
90016b60:	ea46 06db 	orr.w	r6, r6, fp, lsr #3
90016b64:	f82a 6009 	strh.w	r6, [sl, r9]
90016b68:	9912      	ldr	r1, [sp, #72]	; 0x48
90016b6a:	4460      	add	r0, ip
90016b6c:	f108 38ff 	add.w	r8, r8, #4294967295
90016b70:	440a      	add	r2, r1
90016b72:	e757      	b.n	90016a24 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
90016b74:	b005      	add	sp, #20
90016b76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90016b7a:	bf00      	nop
90016b7c:	fffff800 	.word	0xfffff800

90016b80 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
90016b80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90016b84:	b087      	sub	sp, #28
90016b86:	468b      	mov	fp, r1
90016b88:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
90016b8c:	9815      	ldr	r0, [sp, #84]	; 0x54
90016b8e:	9204      	str	r2, [sp, #16]
90016b90:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
90016b94:	6841      	ldr	r1, [r0, #4]
90016b96:	9205      	str	r2, [sp, #20]
90016b98:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
90016b9c:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
90016ba0:	fb01 2404 	mla	r4, r1, r4, r2
90016ba4:	6802      	ldr	r2, [r0, #0]
90016ba6:	eb02 0444 	add.w	r4, r2, r4, lsl #1
90016baa:	f8dc 2000 	ldr.w	r2, [ip]
90016bae:	9201      	str	r2, [sp, #4]
90016bb0:	f8dc 2004 	ldr.w	r2, [ip, #4]
90016bb4:	3204      	adds	r2, #4
90016bb6:	9202      	str	r2, [sp, #8]
90016bb8:	f1bb 0f00 	cmp.w	fp, #0
90016bbc:	dc03      	bgt.n	90016bc6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
90016bbe:	9a04      	ldr	r2, [sp, #16]
90016bc0:	2a00      	cmp	r2, #0
90016bc2:	f340 8138 	ble.w	90016e36 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
90016bc6:	9a11      	ldr	r2, [sp, #68]	; 0x44
90016bc8:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
90016bcc:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
90016bd0:	9a12      	ldr	r2, [sp, #72]	; 0x48
90016bd2:	f9bc 600c 	ldrsh.w	r6, [ip, #12]
90016bd6:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
90016bda:	2b00      	cmp	r3, #0
90016bdc:	dd0e      	ble.n	90016bfc <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
90016bde:	1402      	asrs	r2, r0, #16
90016be0:	d405      	bmi.n	90016bee <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
90016be2:	42ba      	cmp	r2, r7
90016be4:	da03      	bge.n	90016bee <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
90016be6:	140a      	asrs	r2, r1, #16
90016be8:	d401      	bmi.n	90016bee <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
90016bea:	42b2      	cmp	r2, r6
90016bec:	db07      	blt.n	90016bfe <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
90016bee:	9a13      	ldr	r2, [sp, #76]	; 0x4c
90016bf0:	3b01      	subs	r3, #1
90016bf2:	3402      	adds	r4, #2
90016bf4:	4410      	add	r0, r2
90016bf6:	9a14      	ldr	r2, [sp, #80]	; 0x50
90016bf8:	4411      	add	r1, r2
90016bfa:	e7ee      	b.n	90016bda <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
90016bfc:	d019      	beq.n	90016c32 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
90016bfe:	1e5a      	subs	r2, r3, #1
90016c00:	9d13      	ldr	r5, [sp, #76]	; 0x4c
90016c02:	fb05 0502 	mla	r5, r5, r2, r0
90016c06:	142d      	asrs	r5, r5, #16
90016c08:	d409      	bmi.n	90016c1e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
90016c0a:	42bd      	cmp	r5, r7
90016c0c:	da07      	bge.n	90016c1e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
90016c0e:	9d14      	ldr	r5, [sp, #80]	; 0x50
90016c10:	fb05 1202 	mla	r2, r5, r2, r1
90016c14:	1412      	asrs	r2, r2, #16
90016c16:	d402      	bmi.n	90016c1e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
90016c18:	42b2      	cmp	r2, r6
90016c1a:	f2c0 80ac 	blt.w	90016d76 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
90016c1e:	f04f 0e00 	mov.w	lr, #0
90016c22:	eb03 020e 	add.w	r2, r3, lr
90016c26:	2a00      	cmp	r2, #0
90016c28:	dc3e      	bgt.n	90016ca8 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
90016c2a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
90016c2e:	eb04 0443 	add.w	r4, r4, r3, lsl #1
90016c32:	f1bb 0f00 	cmp.w	fp, #0
90016c36:	f340 80fe 	ble.w	90016e36 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
90016c3a:	ee30 0a04 	vadd.f32	s0, s0, s8
90016c3e:	9b10      	ldr	r3, [sp, #64]	; 0x40
90016c40:	ee70 0aa4 	vadd.f32	s1, s1, s9
90016c44:	f1bb 0b01 	subs.w	fp, fp, #1
90016c48:	eeb0 6a62 	vmov.f32	s12, s5
90016c4c:	eec6 7a80 	vdiv.f32	s15, s13, s0
90016c50:	ee31 1a05 	vadd.f32	s2, s2, s10
90016c54:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
90016c58:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
90016c5c:	eeb0 6a43 	vmov.f32	s12, s6
90016c60:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
90016c64:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
90016c68:	ee20 7aa7 	vmul.f32	s14, s1, s15
90016c6c:	ee61 7a27 	vmul.f32	s15, s2, s15
90016c70:	ee77 2a62 	vsub.f32	s5, s14, s5
90016c74:	ee37 3ac3 	vsub.f32	s6, s15, s6
90016c78:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
90016c7c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
90016c80:	ee12 2a90 	vmov	r2, s5
90016c84:	eef0 2a47 	vmov.f32	s5, s14
90016c88:	fb92 f3f3 	sdiv	r3, r2, r3
90016c8c:	ee13 2a10 	vmov	r2, s6
90016c90:	9313      	str	r3, [sp, #76]	; 0x4c
90016c92:	9b10      	ldr	r3, [sp, #64]	; 0x40
90016c94:	eeb0 3a67 	vmov.f32	s6, s15
90016c98:	fb92 f3f3 	sdiv	r3, r2, r3
90016c9c:	9a04      	ldr	r2, [sp, #16]
90016c9e:	9314      	str	r3, [sp, #80]	; 0x50
90016ca0:	9b10      	ldr	r3, [sp, #64]	; 0x40
90016ca2:	bf08      	it	eq
90016ca4:	4613      	moveq	r3, r2
90016ca6:	e787      	b.n	90016bb8 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
90016ca8:	1406      	asrs	r6, r0, #16
90016caa:	d45d      	bmi.n	90016d68 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
90016cac:	f8dc 5008 	ldr.w	r5, [ip, #8]
90016cb0:	42b5      	cmp	r5, r6
90016cb2:	dd59      	ble.n	90016d68 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
90016cb4:	140f      	asrs	r7, r1, #16
90016cb6:	d457      	bmi.n	90016d68 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
90016cb8:	f8dc 200c 	ldr.w	r2, [ip, #12]
90016cbc:	42ba      	cmp	r2, r7
90016cbe:	dd53      	ble.n	90016d68 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
90016cc0:	9a01      	ldr	r2, [sp, #4]
90016cc2:	b22d      	sxth	r5, r5
90016cc4:	fb07 2505 	mla	r5, r7, r5, r2
90016cc8:	5daa      	ldrb	r2, [r5, r6]
90016cca:	9d02      	ldr	r5, [sp, #8]
90016ccc:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
90016cd0:	0e2e      	lsrs	r6, r5, #24
90016cd2:	d049      	beq.n	90016d68 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
90016cd4:	f06f 0201 	mvn.w	r2, #1
90016cd8:	f3c5 2a07 	ubfx	sl, r5, #8, #8
90016cdc:	fb02 f20e 	mul.w	r2, r2, lr
90016ce0:	f834 8002 	ldrh.w	r8, [r4, r2]
90016ce4:	9203      	str	r2, [sp, #12]
90016ce6:	9a05      	ldr	r2, [sp, #20]
90016ce8:	ea4f 2728 	mov.w	r7, r8, asr #8
90016cec:	4356      	muls	r6, r2
90016cee:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
90016cf2:	1c72      	adds	r2, r6, #1
90016cf4:	eb02 2226 	add.w	r2, r2, r6, asr #8
90016cf8:	f3c5 4607 	ubfx	r6, r5, #16, #8
90016cfc:	b2ed      	uxtb	r5, r5
90016cfe:	1212      	asrs	r2, r2, #8
90016d00:	fa1f f982 	uxth.w	r9, r2
90016d04:	43d2      	mvns	r2, r2
90016d06:	fb16 f609 	smulbb	r6, r6, r9
90016d0a:	b2d2      	uxtb	r2, r2
90016d0c:	fb15 f509 	smulbb	r5, r5, r9
90016d10:	fb07 6702 	mla	r7, r7, r2, r6
90016d14:	ea4f 06e8 	mov.w	r6, r8, asr #3
90016d18:	fb1a fa09 	smulbb	sl, sl, r9
90016d1c:	ea4f 08c8 	mov.w	r8, r8, lsl #3
90016d20:	b2bf      	uxth	r7, r7
90016d22:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
90016d26:	fa5f f888 	uxtb.w	r8, r8
90016d2a:	fb06 a602 	mla	r6, r6, r2, sl
90016d2e:	fb08 5502 	mla	r5, r8, r2, r5
90016d32:	1c7a      	adds	r2, r7, #1
90016d34:	b2b6      	uxth	r6, r6
90016d36:	b2ad      	uxth	r5, r5
90016d38:	eb02 2717 	add.w	r7, r2, r7, lsr #8
90016d3c:	9a03      	ldr	r2, [sp, #12]
90016d3e:	f105 0a01 	add.w	sl, r5, #1
90016d42:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
90016d46:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
90016d4a:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
90016d4e:	ea4a 0707 	orr.w	r7, sl, r7
90016d52:	f106 0a01 	add.w	sl, r6, #1
90016d56:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
90016d5a:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
90016d5e:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
90016d62:	ea47 070a 	orr.w	r7, r7, sl
90016d66:	52a7      	strh	r7, [r4, r2]
90016d68:	9a13      	ldr	r2, [sp, #76]	; 0x4c
90016d6a:	f10e 3eff 	add.w	lr, lr, #4294967295
90016d6e:	4410      	add	r0, r2
90016d70:	9a14      	ldr	r2, [sp, #80]	; 0x50
90016d72:	4411      	add	r1, r2
90016d74:	e755      	b.n	90016c22 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
90016d76:	f04f 0800 	mov.w	r8, #0
90016d7a:	eba3 0208 	sub.w	r2, r3, r8
90016d7e:	2a00      	cmp	r2, #0
90016d80:	f77f af53 	ble.w	90016c2a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
90016d84:	f9bc 6008 	ldrsh.w	r6, [ip, #8]
90016d88:	140a      	asrs	r2, r1, #16
90016d8a:	9f01      	ldr	r7, [sp, #4]
90016d8c:	1405      	asrs	r5, r0, #16
90016d8e:	fb06 7202 	mla	r2, r6, r2, r7
90016d92:	5d52      	ldrb	r2, [r2, r5]
90016d94:	9d02      	ldr	r5, [sp, #8]
90016d96:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
90016d9a:	0e2e      	lsrs	r6, r5, #24
90016d9c:	d044      	beq.n	90016e28 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
90016d9e:	9a05      	ldr	r2, [sp, #20]
90016da0:	f3c5 2a07 	ubfx	sl, r5, #8, #8
90016da4:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
90016da8:	4356      	muls	r6, r2
90016daa:	ea4f 272e 	mov.w	r7, lr, asr #8
90016dae:	1c72      	adds	r2, r6, #1
90016db0:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
90016db4:	eb02 2226 	add.w	r2, r2, r6, asr #8
90016db8:	f3c5 4607 	ubfx	r6, r5, #16, #8
90016dbc:	b2ed      	uxtb	r5, r5
90016dbe:	1212      	asrs	r2, r2, #8
90016dc0:	fa1f f982 	uxth.w	r9, r2
90016dc4:	43d2      	mvns	r2, r2
90016dc6:	fb16 f609 	smulbb	r6, r6, r9
90016dca:	b2d2      	uxtb	r2, r2
90016dcc:	fb15 f509 	smulbb	r5, r5, r9
90016dd0:	fb07 6702 	mla	r7, r7, r2, r6
90016dd4:	ea4f 06ee 	mov.w	r6, lr, asr #3
90016dd8:	fb1a fa09 	smulbb	sl, sl, r9
90016ddc:	ea4f 0ece 	mov.w	lr, lr, lsl #3
90016de0:	b2bf      	uxth	r7, r7
90016de2:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
90016de6:	fa5f fe8e 	uxtb.w	lr, lr
90016dea:	fb06 a602 	mla	r6, r6, r2, sl
90016dee:	fb0e 5502 	mla	r5, lr, r2, r5
90016df2:	1c7a      	adds	r2, r7, #1
90016df4:	b2b6      	uxth	r6, r6
90016df6:	b2ad      	uxth	r5, r5
90016df8:	eb02 2717 	add.w	r7, r2, r7, lsr #8
90016dfc:	f105 0a01 	add.w	sl, r5, #1
90016e00:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
90016e04:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
90016e08:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
90016e0c:	ea4a 0707 	orr.w	r7, sl, r7
90016e10:	f106 0a01 	add.w	sl, r6, #1
90016e14:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
90016e18:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
90016e1c:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
90016e20:	ea47 070a 	orr.w	r7, r7, sl
90016e24:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
90016e28:	9a13      	ldr	r2, [sp, #76]	; 0x4c
90016e2a:	f108 0801 	add.w	r8, r8, #1
90016e2e:	4410      	add	r0, r2
90016e30:	9a14      	ldr	r2, [sp, #80]	; 0x50
90016e32:	4411      	add	r1, r2
90016e34:	e7a1      	b.n	90016d7a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
90016e36:	b007      	add	sp, #28
90016e38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

90016e3c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
90016e3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90016e40:	b085      	sub	sp, #20
90016e42:	468b      	mov	fp, r1
90016e44:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
90016e48:	9813      	ldr	r0, [sp, #76]	; 0x4c
90016e4a:	9203      	str	r2, [sp, #12]
90016e4c:	6841      	ldr	r1, [r0, #4]
90016e4e:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
90016e52:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
90016e56:	fb01 2404 	mla	r4, r1, r4, r2
90016e5a:	6802      	ldr	r2, [r0, #0]
90016e5c:	eb02 0444 	add.w	r4, r2, r4, lsl #1
90016e60:	f8de 2000 	ldr.w	r2, [lr]
90016e64:	9200      	str	r2, [sp, #0]
90016e66:	f8de 2004 	ldr.w	r2, [lr, #4]
90016e6a:	3204      	adds	r2, #4
90016e6c:	9201      	str	r2, [sp, #4]
90016e6e:	f1bb 0f00 	cmp.w	fp, #0
90016e72:	dc03      	bgt.n	90016e7c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
90016e74:	9a03      	ldr	r2, [sp, #12]
90016e76:	2a00      	cmp	r2, #0
90016e78:	f340 8153 	ble.w	90017122 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
90016e7c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
90016e7e:	f9be 7008 	ldrsh.w	r7, [lr, #8]
90016e82:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
90016e86:	9a10      	ldr	r2, [sp, #64]	; 0x40
90016e88:	f9be 600c 	ldrsh.w	r6, [lr, #12]
90016e8c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
90016e90:	2b00      	cmp	r3, #0
90016e92:	dd0e      	ble.n	90016eb2 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
90016e94:	1408      	asrs	r0, r1, #16
90016e96:	d405      	bmi.n	90016ea4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
90016e98:	42b8      	cmp	r0, r7
90016e9a:	da03      	bge.n	90016ea4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
90016e9c:	1410      	asrs	r0, r2, #16
90016e9e:	d401      	bmi.n	90016ea4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
90016ea0:	42b0      	cmp	r0, r6
90016ea2:	db07      	blt.n	90016eb4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
90016ea4:	9811      	ldr	r0, [sp, #68]	; 0x44
90016ea6:	3b01      	subs	r3, #1
90016ea8:	3402      	adds	r4, #2
90016eaa:	4401      	add	r1, r0
90016eac:	9812      	ldr	r0, [sp, #72]	; 0x48
90016eae:	4402      	add	r2, r0
90016eb0:	e7ee      	b.n	90016e90 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
90016eb2:	d017      	beq.n	90016ee4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
90016eb4:	1e58      	subs	r0, r3, #1
90016eb6:	9d11      	ldr	r5, [sp, #68]	; 0x44
90016eb8:	fb05 1500 	mla	r5, r5, r0, r1
90016ebc:	142d      	asrs	r5, r5, #16
90016ebe:	d409      	bmi.n	90016ed4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
90016ec0:	42bd      	cmp	r5, r7
90016ec2:	da07      	bge.n	90016ed4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
90016ec4:	9d12      	ldr	r5, [sp, #72]	; 0x48
90016ec6:	fb05 2000 	mla	r0, r5, r0, r2
90016eca:	1400      	asrs	r0, r0, #16
90016ecc:	d402      	bmi.n	90016ed4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
90016ece:	42b0      	cmp	r0, r6
90016ed0:	f2c0 80bc 	blt.w	9001704c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
90016ed4:	2600      	movs	r6, #0
90016ed6:	1998      	adds	r0, r3, r6
90016ed8:	2800      	cmp	r0, #0
90016eda:	dc3e      	bgt.n	90016f5a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
90016edc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
90016ee0:	eb04 0443 	add.w	r4, r4, r3, lsl #1
90016ee4:	f1bb 0f00 	cmp.w	fp, #0
90016ee8:	f340 811b 	ble.w	90017122 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
90016eec:	ee30 0a04 	vadd.f32	s0, s0, s8
90016ef0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
90016ef2:	ee70 0aa4 	vadd.f32	s1, s1, s9
90016ef6:	f1bb 0b01 	subs.w	fp, fp, #1
90016efa:	eeb0 6a62 	vmov.f32	s12, s5
90016efe:	eec6 7a80 	vdiv.f32	s15, s13, s0
90016f02:	ee31 1a05 	vadd.f32	s2, s2, s10
90016f06:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
90016f0a:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
90016f0e:	eeb0 6a43 	vmov.f32	s12, s6
90016f12:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
90016f16:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
90016f1a:	ee20 7aa7 	vmul.f32	s14, s1, s15
90016f1e:	ee61 7a27 	vmul.f32	s15, s2, s15
90016f22:	ee77 2a62 	vsub.f32	s5, s14, s5
90016f26:	ee37 3ac3 	vsub.f32	s6, s15, s6
90016f2a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
90016f2e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
90016f32:	ee12 2a90 	vmov	r2, s5
90016f36:	eef0 2a47 	vmov.f32	s5, s14
90016f3a:	fb92 f3f3 	sdiv	r3, r2, r3
90016f3e:	ee13 2a10 	vmov	r2, s6
90016f42:	9311      	str	r3, [sp, #68]	; 0x44
90016f44:	9b0e      	ldr	r3, [sp, #56]	; 0x38
90016f46:	eeb0 3a67 	vmov.f32	s6, s15
90016f4a:	fb92 f3f3 	sdiv	r3, r2, r3
90016f4e:	9a03      	ldr	r2, [sp, #12]
90016f50:	9312      	str	r3, [sp, #72]	; 0x48
90016f52:	9b0e      	ldr	r3, [sp, #56]	; 0x38
90016f54:	bf08      	it	eq
90016f56:	4613      	moveq	r3, r2
90016f58:	e789      	b.n	90016e6e <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
90016f5a:	140f      	asrs	r7, r1, #16
90016f5c:	d426      	bmi.n	90016fac <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
90016f5e:	f8de 5008 	ldr.w	r5, [lr, #8]
90016f62:	42bd      	cmp	r5, r7
90016f64:	dd22      	ble.n	90016fac <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
90016f66:	ea5f 4c22 	movs.w	ip, r2, asr #16
90016f6a:	d41f      	bmi.n	90016fac <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
90016f6c:	f8de 000c 	ldr.w	r0, [lr, #12]
90016f70:	4560      	cmp	r0, ip
90016f72:	dd1b      	ble.n	90016fac <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
90016f74:	9800      	ldr	r0, [sp, #0]
90016f76:	b22d      	sxth	r5, r5
90016f78:	fb0c 0505 	mla	r5, ip, r5, r0
90016f7c:	5de8      	ldrb	r0, [r5, r7]
90016f7e:	9d01      	ldr	r5, [sp, #4]
90016f80:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
90016f84:	0e07      	lsrs	r7, r0, #24
90016f86:	2fff      	cmp	r7, #255	; 0xff
90016f88:	d116      	bne.n	90016fb8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
90016f8a:	f06f 0501 	mvn.w	r5, #1
90016f8e:	fb05 f706 	mul.w	r7, r5, r6
90016f92:	f2a5 75fe 	subw	r5, r5, #2046	; 0x7fe
90016f96:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
90016f9a:	0945      	lsrs	r5, r0, #5
90016f9c:	f3c0 00c4 	ubfx	r0, r0, #3, #5
90016fa0:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
90016fa4:	ea4c 0505 	orr.w	r5, ip, r5
90016fa8:	4305      	orrs	r5, r0
90016faa:	53e5      	strh	r5, [r4, r7]
90016fac:	9811      	ldr	r0, [sp, #68]	; 0x44
90016fae:	3e01      	subs	r6, #1
90016fb0:	4401      	add	r1, r0
90016fb2:	9812      	ldr	r0, [sp, #72]	; 0x48
90016fb4:	4402      	add	r2, r0
90016fb6:	e78e      	b.n	90016ed6 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
90016fb8:	b2fd      	uxtb	r5, r7
90016fba:	2f00      	cmp	r7, #0
90016fbc:	d0f6      	beq.n	90016fac <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
90016fbe:	f06f 0701 	mvn.w	r7, #1
90016fc2:	fa1f f985 	uxth.w	r9, r5
90016fc6:	43ed      	mvns	r5, r5
90016fc8:	f3c0 2a07 	ubfx	sl, r0, #8, #8
90016fcc:	4377      	muls	r7, r6
90016fce:	fb1a fa09 	smulbb	sl, sl, r9
90016fd2:	b2ed      	uxtb	r5, r5
90016fd4:	f834 8007 	ldrh.w	r8, [r4, r7]
90016fd8:	9702      	str	r7, [sp, #8]
90016fda:	f3c0 4707 	ubfx	r7, r0, #16, #8
90016fde:	ea4f 2c28 	mov.w	ip, r8, asr #8
90016fe2:	fb17 f709 	smulbb	r7, r7, r9
90016fe6:	b2c0      	uxtb	r0, r0
90016fe8:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
90016fec:	fb10 f009 	smulbb	r0, r0, r9
90016ff0:	fb0c 7c05 	mla	ip, ip, r5, r7
90016ff4:	ea4f 07e8 	mov.w	r7, r8, asr #3
90016ff8:	ea4f 08c8 	mov.w	r8, r8, lsl #3
90016ffc:	fa1f fc8c 	uxth.w	ip, ip
90017000:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
90017004:	fa5f f888 	uxtb.w	r8, r8
90017008:	fb07 a705 	mla	r7, r7, r5, sl
9001700c:	fb08 0005 	mla	r0, r8, r5, r0
90017010:	f10c 0501 	add.w	r5, ip, #1
90017014:	b2bf      	uxth	r7, r7
90017016:	b280      	uxth	r0, r0
90017018:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
9001701c:	f100 0a01 	add.w	sl, r0, #1
90017020:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
90017024:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
90017028:	9802      	ldr	r0, [sp, #8]
9001702a:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
9001702e:	ea4a 0c0c 	orr.w	ip, sl, ip
90017032:	f107 0a01 	add.w	sl, r7, #1
90017036:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
9001703a:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
9001703e:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
90017042:	ea4c 0c0a 	orr.w	ip, ip, sl
90017046:	f824 c000 	strh.w	ip, [r4, r0]
9001704a:	e7af      	b.n	90016fac <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
9001704c:	f04f 0800 	mov.w	r8, #0
90017050:	eba3 0008 	sub.w	r0, r3, r8
90017054:	2800      	cmp	r0, #0
90017056:	f77f af41 	ble.w	90016edc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
9001705a:	f9be 6008 	ldrsh.w	r6, [lr, #8]
9001705e:	1410      	asrs	r0, r2, #16
90017060:	9f00      	ldr	r7, [sp, #0]
90017062:	140d      	asrs	r5, r1, #16
90017064:	fb06 7000 	mla	r0, r6, r0, r7
90017068:	5d40      	ldrb	r0, [r0, r5]
9001706a:	9d01      	ldr	r5, [sp, #4]
9001706c:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
90017070:	0e2e      	lsrs	r6, r5, #24
90017072:	2eff      	cmp	r6, #255	; 0xff
90017074:	d112      	bne.n	9001709c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x260>
90017076:	482c      	ldr	r0, [pc, #176]	; (90017128 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ec>)
90017078:	ea00 2615 	and.w	r6, r0, r5, lsr #8
9001707c:	0968      	lsrs	r0, r5, #5
9001707e:	f3c5 05c4 	ubfx	r5, r5, #3, #5
90017082:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
90017086:	4330      	orrs	r0, r6
90017088:	4328      	orrs	r0, r5
9001708a:	f824 0018 	strh.w	r0, [r4, r8, lsl #1]
9001708e:	9811      	ldr	r0, [sp, #68]	; 0x44
90017090:	f108 0801 	add.w	r8, r8, #1
90017094:	4401      	add	r1, r0
90017096:	9812      	ldr	r0, [sp, #72]	; 0x48
90017098:	4402      	add	r2, r0
9001709a:	e7d9      	b.n	90017050 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
9001709c:	b2f0      	uxtb	r0, r6
9001709e:	2e00      	cmp	r6, #0
900170a0:	d0f5      	beq.n	9001708e <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
900170a2:	f834 c018 	ldrh.w	ip, [r4, r8, lsl #1]
900170a6:	fa1f f980 	uxth.w	r9, r0
900170aa:	f3c5 4607 	ubfx	r6, r5, #16, #8
900170ae:	43c0      	mvns	r0, r0
900170b0:	ea4f 272c 	mov.w	r7, ip, asr #8
900170b4:	f3c5 2a07 	ubfx	sl, r5, #8, #8
900170b8:	fb16 f609 	smulbb	r6, r6, r9
900170bc:	b2c0      	uxtb	r0, r0
900170be:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
900170c2:	b2ed      	uxtb	r5, r5
900170c4:	fb1a fa09 	smulbb	sl, sl, r9
900170c8:	fb07 6700 	mla	r7, r7, r0, r6
900170cc:	ea4f 06ec 	mov.w	r6, ip, asr #3
900170d0:	fb15 f509 	smulbb	r5, r5, r9
900170d4:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
900170d8:	b2bf      	uxth	r7, r7
900170da:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
900170de:	fa5f fc8c 	uxtb.w	ip, ip
900170e2:	fb06 a600 	mla	r6, r6, r0, sl
900170e6:	fb0c 5500 	mla	r5, ip, r0, r5
900170ea:	1c78      	adds	r0, r7, #1
900170ec:	b2b6      	uxth	r6, r6
900170ee:	b2ad      	uxth	r5, r5
900170f0:	eb00 2717 	add.w	r7, r0, r7, lsr #8
900170f4:	f105 0a01 	add.w	sl, r5, #1
900170f8:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
900170fc:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
90017100:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
90017104:	ea4a 0707 	orr.w	r7, sl, r7
90017108:	f106 0a01 	add.w	sl, r6, #1
9001710c:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
90017110:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
90017114:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
90017118:	ea47 070a 	orr.w	r7, r7, sl
9001711c:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
90017120:	e7b5      	b.n	9001708e <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
90017122:	b005      	add	sp, #20
90017124:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90017128:	fffff800 	.word	0xfffff800

9001712c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
9001712c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90017130:	b087      	sub	sp, #28
90017132:	468b      	mov	fp, r1
90017134:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
90017138:	9c15      	ldr	r4, [sp, #84]	; 0x54
9001713a:	9204      	str	r2, [sp, #16]
9001713c:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
90017140:	6861      	ldr	r1, [r4, #4]
90017142:	9205      	str	r2, [sp, #20]
90017144:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
90017148:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
9001714c:	fb01 2000 	mla	r0, r1, r0, r2
90017150:	6822      	ldr	r2, [r4, #0]
90017152:	eb02 0040 	add.w	r0, r2, r0, lsl #1
90017156:	f8de 2000 	ldr.w	r2, [lr]
9001715a:	9201      	str	r2, [sp, #4]
9001715c:	f8de 2004 	ldr.w	r2, [lr, #4]
90017160:	9202      	str	r2, [sp, #8]
90017162:	f1bb 0f00 	cmp.w	fp, #0
90017166:	dc03      	bgt.n	90017170 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
90017168:	9a04      	ldr	r2, [sp, #16]
9001716a:	2a00      	cmp	r2, #0
9001716c:	f340 8142 	ble.w	900173f4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
90017170:	9a11      	ldr	r2, [sp, #68]	; 0x44
90017172:	f9be 7008 	ldrsh.w	r7, [lr, #8]
90017176:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
9001717a:	9a12      	ldr	r2, [sp, #72]	; 0x48
9001717c:	f9be 600c 	ldrsh.w	r6, [lr, #12]
90017180:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
90017184:	2b00      	cmp	r3, #0
90017186:	dd0e      	ble.n	900171a6 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
90017188:	140c      	asrs	r4, r1, #16
9001718a:	d405      	bmi.n	90017198 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
9001718c:	42bc      	cmp	r4, r7
9001718e:	da03      	bge.n	90017198 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
90017190:	1414      	asrs	r4, r2, #16
90017192:	d401      	bmi.n	90017198 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
90017194:	42b4      	cmp	r4, r6
90017196:	db07      	blt.n	900171a8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
90017198:	9c13      	ldr	r4, [sp, #76]	; 0x4c
9001719a:	3b01      	subs	r3, #1
9001719c:	3002      	adds	r0, #2
9001719e:	4421      	add	r1, r4
900171a0:	9c14      	ldr	r4, [sp, #80]	; 0x50
900171a2:	4422      	add	r2, r4
900171a4:	e7ee      	b.n	90017184 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
900171a6:	d019      	beq.n	900171dc <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
900171a8:	1e5c      	subs	r4, r3, #1
900171aa:	9d13      	ldr	r5, [sp, #76]	; 0x4c
900171ac:	fb05 1504 	mla	r5, r5, r4, r1
900171b0:	142d      	asrs	r5, r5, #16
900171b2:	d409      	bmi.n	900171c8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
900171b4:	42bd      	cmp	r5, r7
900171b6:	da07      	bge.n	900171c8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
900171b8:	9d14      	ldr	r5, [sp, #80]	; 0x50
900171ba:	fb05 2404 	mla	r4, r5, r4, r2
900171be:	1424      	asrs	r4, r4, #16
900171c0:	d402      	bmi.n	900171c8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
900171c2:	42b4      	cmp	r4, r6
900171c4:	f2c0 80b1 	blt.w	9001732a <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
900171c8:	f04f 0800 	mov.w	r8, #0
900171cc:	eb03 0408 	add.w	r4, r3, r8
900171d0:	2c00      	cmp	r4, #0
900171d2:	dc3e      	bgt.n	90017252 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
900171d4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
900171d8:	eb00 0043 	add.w	r0, r0, r3, lsl #1
900171dc:	f1bb 0f00 	cmp.w	fp, #0
900171e0:	f340 8108 	ble.w	900173f4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
900171e4:	ee30 0a04 	vadd.f32	s0, s0, s8
900171e8:	9b10      	ldr	r3, [sp, #64]	; 0x40
900171ea:	ee70 0aa4 	vadd.f32	s1, s1, s9
900171ee:	f1bb 0b01 	subs.w	fp, fp, #1
900171f2:	eeb0 6a62 	vmov.f32	s12, s5
900171f6:	eec6 7a80 	vdiv.f32	s15, s13, s0
900171fa:	ee31 1a05 	vadd.f32	s2, s2, s10
900171fe:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
90017202:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
90017206:	eeb0 6a43 	vmov.f32	s12, s6
9001720a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
9001720e:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
90017212:	ee20 7aa7 	vmul.f32	s14, s1, s15
90017216:	ee61 7a27 	vmul.f32	s15, s2, s15
9001721a:	ee77 2a62 	vsub.f32	s5, s14, s5
9001721e:	ee37 3ac3 	vsub.f32	s6, s15, s6
90017222:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
90017226:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9001722a:	ee12 2a90 	vmov	r2, s5
9001722e:	eef0 2a47 	vmov.f32	s5, s14
90017232:	fb92 f3f3 	sdiv	r3, r2, r3
90017236:	ee13 2a10 	vmov	r2, s6
9001723a:	9313      	str	r3, [sp, #76]	; 0x4c
9001723c:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001723e:	eeb0 3a67 	vmov.f32	s6, s15
90017242:	fb92 f3f3 	sdiv	r3, r2, r3
90017246:	9a04      	ldr	r2, [sp, #16]
90017248:	9314      	str	r3, [sp, #80]	; 0x50
9001724a:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001724c:	bf08      	it	eq
9001724e:	4613      	moveq	r3, r2
90017250:	e787      	b.n	90017162 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
90017252:	140e      	asrs	r6, r1, #16
90017254:	d462      	bmi.n	9001731c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
90017256:	f8de 5008 	ldr.w	r5, [lr, #8]
9001725a:	42b5      	cmp	r5, r6
9001725c:	dd5e      	ble.n	9001731c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
9001725e:	1417      	asrs	r7, r2, #16
90017260:	d45c      	bmi.n	9001731c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
90017262:	f8de 400c 	ldr.w	r4, [lr, #12]
90017266:	42bc      	cmp	r4, r7
90017268:	dd58      	ble.n	9001731c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
9001726a:	b22d      	sxth	r5, r5
9001726c:	9c02      	ldr	r4, [sp, #8]
9001726e:	fb07 6505 	mla	r5, r7, r5, r6
90017272:	5d66      	ldrb	r6, [r4, r5]
90017274:	2e00      	cmp	r6, #0
90017276:	d051      	beq.n	9001731c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
90017278:	9c01      	ldr	r4, [sp, #4]
9001727a:	f834 9015 	ldrh.w	r9, [r4, r5, lsl #1]
9001727e:	f06f 0401 	mvn.w	r4, #1
90017282:	fb04 f408 	mul.w	r4, r4, r8
90017286:	ea4f 2c29 	mov.w	ip, r9, asr #8
9001728a:	5b05      	ldrh	r5, [r0, r4]
9001728c:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
90017290:	9403      	str	r4, [sp, #12]
90017292:	9c05      	ldr	r4, [sp, #20]
90017294:	ea4f 0ae5 	mov.w	sl, r5, asr #3
90017298:	4366      	muls	r6, r4
9001729a:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
9001729e:	1c74      	adds	r4, r6, #1
900172a0:	eb04 2416 	add.w	r4, r4, r6, lsr #8
900172a4:	122e      	asrs	r6, r5, #8
900172a6:	1224      	asrs	r4, r4, #8
900172a8:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
900172ac:	00ed      	lsls	r5, r5, #3
900172ae:	b2a7      	uxth	r7, r4
900172b0:	43e4      	mvns	r4, r4
900172b2:	b2ed      	uxtb	r5, r5
900172b4:	b2e4      	uxtb	r4, r4
900172b6:	fb16 f604 	smulbb	r6, r6, r4
900172ba:	fb15 f504 	smulbb	r5, r5, r4
900172be:	fb0c 6c07 	mla	ip, ip, r7, r6
900172c2:	ea4f 06e9 	mov.w	r6, r9, asr #3
900172c6:	fb1a fa04 	smulbb	sl, sl, r4
900172ca:	ea4f 09c9 	mov.w	r9, r9, lsl #3
900172ce:	fa1f fc8c 	uxth.w	ip, ip
900172d2:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
900172d6:	fa5f f989 	uxtb.w	r9, r9
900172da:	fb06 a607 	mla	r6, r6, r7, sl
900172de:	f10c 0401 	add.w	r4, ip, #1
900172e2:	fb09 5507 	mla	r5, r9, r7, r5
900172e6:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
900172ea:	9c03      	ldr	r4, [sp, #12]
900172ec:	b2ad      	uxth	r5, r5
900172ee:	b2b6      	uxth	r6, r6
900172f0:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
900172f4:	f105 0a01 	add.w	sl, r5, #1
900172f8:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
900172fc:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
90017300:	ea4a 0c0c 	orr.w	ip, sl, ip
90017304:	f106 0a01 	add.w	sl, r6, #1
90017308:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
9001730c:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
90017310:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
90017314:	ea4c 0c0a 	orr.w	ip, ip, sl
90017318:	f820 c004 	strh.w	ip, [r0, r4]
9001731c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
9001731e:	f108 38ff 	add.w	r8, r8, #4294967295
90017322:	4421      	add	r1, r4
90017324:	9c14      	ldr	r4, [sp, #80]	; 0x50
90017326:	4422      	add	r2, r4
90017328:	e750      	b.n	900171cc <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
9001732a:	f04f 0900 	mov.w	r9, #0
9001732e:	eba3 0409 	sub.w	r4, r3, r9
90017332:	2c00      	cmp	r4, #0
90017334:	f77f af4e 	ble.w	900171d4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
90017338:	f9be 6008 	ldrsh.w	r6, [lr, #8]
9001733c:	140d      	asrs	r5, r1, #16
9001733e:	1414      	asrs	r4, r2, #16
90017340:	fb06 5404 	mla	r4, r6, r4, r5
90017344:	9d02      	ldr	r5, [sp, #8]
90017346:	5d2e      	ldrb	r6, [r5, r4]
90017348:	2e00      	cmp	r6, #0
9001734a:	d04c      	beq.n	900173e6 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
9001734c:	9d01      	ldr	r5, [sp, #4]
9001734e:	f835 8014 	ldrh.w	r8, [r5, r4, lsl #1]
90017352:	9c05      	ldr	r4, [sp, #20]
90017354:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
90017358:	ea4f 2c28 	mov.w	ip, r8, asr #8
9001735c:	4366      	muls	r6, r4
9001735e:	ea4f 0ae5 	mov.w	sl, r5, asr #3
90017362:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
90017366:	1c74      	adds	r4, r6, #1
90017368:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
9001736c:	eb04 2416 	add.w	r4, r4, r6, lsr #8
90017370:	122e      	asrs	r6, r5, #8
90017372:	1224      	asrs	r4, r4, #8
90017374:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
90017378:	00ed      	lsls	r5, r5, #3
9001737a:	b2a7      	uxth	r7, r4
9001737c:	43e4      	mvns	r4, r4
9001737e:	b2ed      	uxtb	r5, r5
90017380:	b2e4      	uxtb	r4, r4
90017382:	fb16 f604 	smulbb	r6, r6, r4
90017386:	fb15 f504 	smulbb	r5, r5, r4
9001738a:	fb0c 6c07 	mla	ip, ip, r7, r6
9001738e:	ea4f 06e8 	mov.w	r6, r8, asr #3
90017392:	fb1a fa04 	smulbb	sl, sl, r4
90017396:	ea4f 08c8 	mov.w	r8, r8, lsl #3
9001739a:	fa1f fc8c 	uxth.w	ip, ip
9001739e:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
900173a2:	fa5f f888 	uxtb.w	r8, r8
900173a6:	fb06 a607 	mla	r6, r6, r7, sl
900173aa:	f10c 0401 	add.w	r4, ip, #1
900173ae:	fb08 5507 	mla	r5, r8, r7, r5
900173b2:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
900173b6:	b2ad      	uxth	r5, r5
900173b8:	b2b6      	uxth	r6, r6
900173ba:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
900173be:	f105 0a01 	add.w	sl, r5, #1
900173c2:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
900173c6:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
900173ca:	ea4a 0c0c 	orr.w	ip, sl, ip
900173ce:	f106 0a01 	add.w	sl, r6, #1
900173d2:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
900173d6:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
900173da:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
900173de:	ea4c 0c0a 	orr.w	ip, ip, sl
900173e2:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
900173e6:	9c13      	ldr	r4, [sp, #76]	; 0x4c
900173e8:	f109 0901 	add.w	r9, r9, #1
900173ec:	4421      	add	r1, r4
900173ee:	9c14      	ldr	r4, [sp, #80]	; 0x50
900173f0:	4422      	add	r2, r4
900173f2:	e79c      	b.n	9001732e <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
900173f4:	b007      	add	sp, #28
900173f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

900173fa <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
900173fa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900173fe:	b085      	sub	sp, #20
90017400:	468b      	mov	fp, r1
90017402:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
90017406:	9c13      	ldr	r4, [sp, #76]	; 0x4c
90017408:	9203      	str	r2, [sp, #12]
9001740a:	6861      	ldr	r1, [r4, #4]
9001740c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
90017410:	e9dd 2014 	ldrd	r2, r0, [sp, #80]	; 0x50
90017414:	fb01 2000 	mla	r0, r1, r0, r2
90017418:	6822      	ldr	r2, [r4, #0]
9001741a:	eb02 0040 	add.w	r0, r2, r0, lsl #1
9001741e:	f8d8 2000 	ldr.w	r2, [r8]
90017422:	9200      	str	r2, [sp, #0]
90017424:	f8d8 2004 	ldr.w	r2, [r8, #4]
90017428:	9201      	str	r2, [sp, #4]
9001742a:	f1bb 0f00 	cmp.w	fp, #0
9001742e:	dc03      	bgt.n	90017438 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
90017430:	9a03      	ldr	r2, [sp, #12]
90017432:	2a00      	cmp	r2, #0
90017434:	f340 8146 	ble.w	900176c4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
90017438:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
9001743a:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
9001743e:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
90017442:	9a10      	ldr	r2, [sp, #64]	; 0x40
90017444:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
90017448:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
9001744c:	2b00      	cmp	r3, #0
9001744e:	dd0e      	ble.n	9001746e <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
90017450:	140c      	asrs	r4, r1, #16
90017452:	d405      	bmi.n	90017460 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
90017454:	42bc      	cmp	r4, r7
90017456:	da03      	bge.n	90017460 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
90017458:	1414      	asrs	r4, r2, #16
9001745a:	d401      	bmi.n	90017460 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
9001745c:	42b4      	cmp	r4, r6
9001745e:	db07      	blt.n	90017470 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
90017460:	9c11      	ldr	r4, [sp, #68]	; 0x44
90017462:	3b01      	subs	r3, #1
90017464:	3002      	adds	r0, #2
90017466:	4421      	add	r1, r4
90017468:	9c12      	ldr	r4, [sp, #72]	; 0x48
9001746a:	4422      	add	r2, r4
9001746c:	e7ee      	b.n	9001744c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
9001746e:	d017      	beq.n	900174a0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
90017470:	1e5c      	subs	r4, r3, #1
90017472:	9d11      	ldr	r5, [sp, #68]	; 0x44
90017474:	fb05 1504 	mla	r5, r5, r4, r1
90017478:	142d      	asrs	r5, r5, #16
9001747a:	d409      	bmi.n	90017490 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
9001747c:	42bd      	cmp	r5, r7
9001747e:	da07      	bge.n	90017490 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
90017480:	9d12      	ldr	r5, [sp, #72]	; 0x48
90017482:	fb05 2404 	mla	r4, r5, r4, r2
90017486:	1424      	asrs	r4, r4, #16
90017488:	d402      	bmi.n	90017490 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
9001748a:	42b4      	cmp	r4, r6
9001748c:	f2c0 80b3 	blt.w	900175f6 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
90017490:	2600      	movs	r6, #0
90017492:	199c      	adds	r4, r3, r6
90017494:	2c00      	cmp	r4, #0
90017496:	dc3e      	bgt.n	90017516 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
90017498:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
9001749c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
900174a0:	f1bb 0f00 	cmp.w	fp, #0
900174a4:	f340 810e 	ble.w	900176c4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
900174a8:	ee30 0a04 	vadd.f32	s0, s0, s8
900174ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
900174ae:	ee70 0aa4 	vadd.f32	s1, s1, s9
900174b2:	f1bb 0b01 	subs.w	fp, fp, #1
900174b6:	eeb0 6a62 	vmov.f32	s12, s5
900174ba:	eec6 7a80 	vdiv.f32	s15, s13, s0
900174be:	ee31 1a05 	vadd.f32	s2, s2, s10
900174c2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
900174c6:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
900174ca:	eeb0 6a43 	vmov.f32	s12, s6
900174ce:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
900174d2:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
900174d6:	ee20 7aa7 	vmul.f32	s14, s1, s15
900174da:	ee61 7a27 	vmul.f32	s15, s2, s15
900174de:	ee77 2a62 	vsub.f32	s5, s14, s5
900174e2:	ee37 3ac3 	vsub.f32	s6, s15, s6
900174e6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
900174ea:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
900174ee:	ee12 2a90 	vmov	r2, s5
900174f2:	eef0 2a47 	vmov.f32	s5, s14
900174f6:	fb92 f3f3 	sdiv	r3, r2, r3
900174fa:	ee13 2a10 	vmov	r2, s6
900174fe:	9311      	str	r3, [sp, #68]	; 0x44
90017500:	9b0e      	ldr	r3, [sp, #56]	; 0x38
90017502:	eeb0 3a67 	vmov.f32	s6, s15
90017506:	fb92 f3f3 	sdiv	r3, r2, r3
9001750a:	9a03      	ldr	r2, [sp, #12]
9001750c:	9312      	str	r3, [sp, #72]	; 0x48
9001750e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
90017510:	bf08      	it	eq
90017512:	4613      	moveq	r3, r2
90017514:	e789      	b.n	9001742a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
90017516:	140f      	asrs	r7, r1, #16
90017518:	d418      	bmi.n	9001754c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
9001751a:	f8d8 5008 	ldr.w	r5, [r8, #8]
9001751e:	42bd      	cmp	r5, r7
90017520:	dd14      	ble.n	9001754c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
90017522:	ea5f 4c22 	movs.w	ip, r2, asr #16
90017526:	d411      	bmi.n	9001754c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
90017528:	f8d8 400c 	ldr.w	r4, [r8, #12]
9001752c:	4564      	cmp	r4, ip
9001752e:	dd0d      	ble.n	9001754c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
90017530:	b22d      	sxth	r5, r5
90017532:	9c01      	ldr	r4, [sp, #4]
90017534:	fb0c 7505 	mla	r5, ip, r5, r7
90017538:	5d64      	ldrb	r4, [r4, r5]
9001753a:	2cff      	cmp	r4, #255	; 0xff
9001753c:	d10c      	bne.n	90017558 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
9001753e:	9c00      	ldr	r4, [sp, #0]
90017540:	f834 5015 	ldrh.w	r5, [r4, r5, lsl #1]
90017544:	f06f 0401 	mvn.w	r4, #1
90017548:	4374      	muls	r4, r6
9001754a:	5305      	strh	r5, [r0, r4]
9001754c:	9c11      	ldr	r4, [sp, #68]	; 0x44
9001754e:	3e01      	subs	r6, #1
90017550:	4421      	add	r1, r4
90017552:	9c12      	ldr	r4, [sp, #72]	; 0x48
90017554:	4422      	add	r2, r4
90017556:	e79c      	b.n	90017492 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
90017558:	2c00      	cmp	r4, #0
9001755a:	d0f7      	beq.n	9001754c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
9001755c:	9f00      	ldr	r7, [sp, #0]
9001755e:	fa1f fc84 	uxth.w	ip, r4
90017562:	43e4      	mvns	r4, r4
90017564:	f837 9015 	ldrh.w	r9, [r7, r5, lsl #1]
90017568:	f06f 0501 	mvn.w	r5, #1
9001756c:	b2e4      	uxtb	r4, r4
9001756e:	4375      	muls	r5, r6
90017570:	ea4f 2e29 	mov.w	lr, r9, asr #8
90017574:	9502      	str	r5, [sp, #8]
90017576:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
9001757a:	5b45      	ldrh	r5, [r0, r5]
9001757c:	122f      	asrs	r7, r5, #8
9001757e:	ea4f 0ae5 	mov.w	sl, r5, asr #3
90017582:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
90017586:	00ed      	lsls	r5, r5, #3
90017588:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
9001758c:	fb17 f704 	smulbb	r7, r7, r4
90017590:	b2ed      	uxtb	r5, r5
90017592:	fb1a fa04 	smulbb	sl, sl, r4
90017596:	fb0e 7e0c 	mla	lr, lr, ip, r7
9001759a:	ea4f 07e9 	mov.w	r7, r9, asr #3
9001759e:	fb15 f504 	smulbb	r5, r5, r4
900175a2:	ea4f 09c9 	mov.w	r9, r9, lsl #3
900175a6:	fa1f fe8e 	uxth.w	lr, lr
900175aa:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
900175ae:	fa5f f989 	uxtb.w	r9, r9
900175b2:	fb07 a70c 	mla	r7, r7, ip, sl
900175b6:	f10e 0401 	add.w	r4, lr, #1
900175ba:	fb09 550c 	mla	r5, r9, ip, r5
900175be:	eb04 2e1e 	add.w	lr, r4, lr, lsr #8
900175c2:	9c02      	ldr	r4, [sp, #8]
900175c4:	b2ad      	uxth	r5, r5
900175c6:	b2bf      	uxth	r7, r7
900175c8:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
900175cc:	f105 0a01 	add.w	sl, r5, #1
900175d0:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
900175d4:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
900175d8:	ea4a 0e0e 	orr.w	lr, sl, lr
900175dc:	f107 0a01 	add.w	sl, r7, #1
900175e0:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
900175e4:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
900175e8:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
900175ec:	ea4e 0e0a 	orr.w	lr, lr, sl
900175f0:	f820 e004 	strh.w	lr, [r0, r4]
900175f4:	e7aa      	b.n	9001754c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
900175f6:	f04f 0900 	mov.w	r9, #0
900175fa:	eba3 0409 	sub.w	r4, r3, r9
900175fe:	2c00      	cmp	r4, #0
90017600:	f77f af4a 	ble.w	90017498 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
90017604:	1414      	asrs	r4, r2, #16
90017606:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
9001760a:	140d      	asrs	r5, r1, #16
9001760c:	fb06 5504 	mla	r5, r6, r4, r5
90017610:	9c01      	ldr	r4, [sp, #4]
90017612:	5d64      	ldrb	r4, [r4, r5]
90017614:	2cff      	cmp	r4, #255	; 0xff
90017616:	d10b      	bne.n	90017630 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
90017618:	9c00      	ldr	r4, [sp, #0]
9001761a:	f834 4015 	ldrh.w	r4, [r4, r5, lsl #1]
9001761e:	f820 4019 	strh.w	r4, [r0, r9, lsl #1]
90017622:	9c11      	ldr	r4, [sp, #68]	; 0x44
90017624:	f109 0901 	add.w	r9, r9, #1
90017628:	4421      	add	r1, r4
9001762a:	9c12      	ldr	r4, [sp, #72]	; 0x48
9001762c:	4422      	add	r2, r4
9001762e:	e7e4      	b.n	900175fa <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
90017630:	2c00      	cmp	r4, #0
90017632:	d0f6      	beq.n	90017622 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
90017634:	9e00      	ldr	r6, [sp, #0]
90017636:	b2a7      	uxth	r7, r4
90017638:	43e4      	mvns	r4, r4
9001763a:	f836 e015 	ldrh.w	lr, [r6, r5, lsl #1]
9001763e:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
90017642:	b2e4      	uxtb	r4, r4
90017644:	ea4f 2c2e 	mov.w	ip, lr, asr #8
90017648:	122e      	asrs	r6, r5, #8
9001764a:	ea4f 0ae5 	mov.w	sl, r5, asr #3
9001764e:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
90017652:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
90017656:	00ed      	lsls	r5, r5, #3
90017658:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
9001765c:	fb16 f604 	smulbb	r6, r6, r4
90017660:	b2ed      	uxtb	r5, r5
90017662:	fb1a fa04 	smulbb	sl, sl, r4
90017666:	fb0c 6c07 	mla	ip, ip, r7, r6
9001766a:	ea4f 06ee 	mov.w	r6, lr, asr #3
9001766e:	fb15 f504 	smulbb	r5, r5, r4
90017672:	ea4f 0ece 	mov.w	lr, lr, lsl #3
90017676:	fa1f fc8c 	uxth.w	ip, ip
9001767a:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
9001767e:	fa5f fe8e 	uxtb.w	lr, lr
90017682:	fb06 a607 	mla	r6, r6, r7, sl
90017686:	f10c 0401 	add.w	r4, ip, #1
9001768a:	fb0e 5507 	mla	r5, lr, r7, r5
9001768e:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
90017692:	b2ad      	uxth	r5, r5
90017694:	b2b6      	uxth	r6, r6
90017696:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
9001769a:	f105 0a01 	add.w	sl, r5, #1
9001769e:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
900176a2:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
900176a6:	ea4a 0c0c 	orr.w	ip, sl, ip
900176aa:	f106 0a01 	add.w	sl, r6, #1
900176ae:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
900176b2:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
900176b6:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
900176ba:	ea4c 0c0a 	orr.w	ip, ip, sl
900176be:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
900176c2:	e7ae      	b.n	90017622 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
900176c4:	b005      	add	sp, #20
900176c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

900176ca <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
900176ca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900176ce:	b085      	sub	sp, #20
900176d0:	9813      	ldr	r0, [sp, #76]	; 0x4c
900176d2:	9203      	str	r2, [sp, #12]
900176d4:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
900176d8:	9100      	str	r1, [sp, #0]
900176da:	9201      	str	r2, [sp, #4]
900176dc:	6841      	ldr	r1, [r0, #4]
900176de:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
900176e2:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
900176e6:	fb01 2404 	mla	r4, r1, r4, r2
900176ea:	6802      	ldr	r2, [r0, #0]
900176ec:	eb02 0444 	add.w	r4, r2, r4, lsl #1
900176f0:	f8de 2000 	ldr.w	r2, [lr]
900176f4:	9202      	str	r2, [sp, #8]
900176f6:	9a01      	ldr	r2, [sp, #4]
900176f8:	43d6      	mvns	r6, r2
900176fa:	b2f6      	uxtb	r6, r6
900176fc:	9a00      	ldr	r2, [sp, #0]
900176fe:	2a00      	cmp	r2, #0
90017700:	dc03      	bgt.n	9001770a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
90017702:	9a03      	ldr	r2, [sp, #12]
90017704:	2a00      	cmp	r2, #0
90017706:	f340 8124 	ble.w	90017952 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
9001770a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
9001770c:	f9be c008 	ldrsh.w	ip, [lr, #8]
90017710:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
90017714:	9a10      	ldr	r2, [sp, #64]	; 0x40
90017716:	f9be 700c 	ldrsh.w	r7, [lr, #12]
9001771a:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
9001771e:	2b00      	cmp	r3, #0
90017720:	dd0e      	ble.n	90017740 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
90017722:	1408      	asrs	r0, r1, #16
90017724:	d405      	bmi.n	90017732 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
90017726:	4560      	cmp	r0, ip
90017728:	da03      	bge.n	90017732 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
9001772a:	1410      	asrs	r0, r2, #16
9001772c:	d401      	bmi.n	90017732 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
9001772e:	42b8      	cmp	r0, r7
90017730:	db07      	blt.n	90017742 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
90017732:	9811      	ldr	r0, [sp, #68]	; 0x44
90017734:	3b01      	subs	r3, #1
90017736:	3402      	adds	r4, #2
90017738:	4401      	add	r1, r0
9001773a:	9812      	ldr	r0, [sp, #72]	; 0x48
9001773c:	4402      	add	r2, r0
9001773e:	e7ee      	b.n	9001771e <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
90017740:	d06e      	beq.n	90017820 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
90017742:	1e58      	subs	r0, r3, #1
90017744:	9d11      	ldr	r5, [sp, #68]	; 0x44
90017746:	fb05 1500 	mla	r5, r5, r0, r1
9001774a:	142d      	asrs	r5, r5, #16
9001774c:	d45c      	bmi.n	90017808 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
9001774e:	4565      	cmp	r5, ip
90017750:	da5a      	bge.n	90017808 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
90017752:	9d12      	ldr	r5, [sp, #72]	; 0x48
90017754:	fb05 2000 	mla	r0, r5, r0, r2
90017758:	1400      	asrs	r0, r0, #16
9001775a:	d455      	bmi.n	90017808 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
9001775c:	42b8      	cmp	r0, r7
9001775e:	da53      	bge.n	90017808 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
90017760:	4699      	mov	r9, r3
90017762:	46a2      	mov	sl, r4
90017764:	f8bd b004 	ldrh.w	fp, [sp, #4]
90017768:	f1b9 0f00 	cmp.w	r9, #0
9001776c:	dd54      	ble.n	90017818 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
9001776e:	f9be 7008 	ldrsh.w	r7, [lr, #8]
90017772:	140d      	asrs	r5, r1, #16
90017774:	1410      	asrs	r0, r2, #16
90017776:	f109 39ff 	add.w	r9, r9, #4294967295
9001777a:	fb07 5000 	mla	r0, r7, r0, r5
9001777e:	9d02      	ldr	r5, [sp, #8]
90017780:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
90017784:	f8ba 5000 	ldrh.w	r5, [sl]
90017788:	ea4f 2c20 	mov.w	ip, r0, asr #8
9001778c:	122f      	asrs	r7, r5, #8
9001778e:	ea4f 08e5 	mov.w	r8, r5, asr #3
90017792:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
90017796:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
9001779a:	00ed      	lsls	r5, r5, #3
9001779c:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
900177a0:	fb17 f706 	smulbb	r7, r7, r6
900177a4:	b2ed      	uxtb	r5, r5
900177a6:	fb18 f806 	smulbb	r8, r8, r6
900177aa:	fb0c 7c0b 	mla	ip, ip, fp, r7
900177ae:	10c7      	asrs	r7, r0, #3
900177b0:	fb15 f506 	smulbb	r5, r5, r6
900177b4:	00c0      	lsls	r0, r0, #3
900177b6:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
900177ba:	fa1f fc8c 	uxth.w	ip, ip
900177be:	b2c0      	uxtb	r0, r0
900177c0:	fb07 870b 	mla	r7, r7, fp, r8
900177c4:	fb00 500b 	mla	r0, r0, fp, r5
900177c8:	f10c 0501 	add.w	r5, ip, #1
900177cc:	b2bf      	uxth	r7, r7
900177ce:	b280      	uxth	r0, r0
900177d0:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
900177d4:	f107 0801 	add.w	r8, r7, #1
900177d8:	1c45      	adds	r5, r0, #1
900177da:	eb08 2817 	add.w	r8, r8, r7, lsr #8
900177de:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
900177e2:	eb05 2510 	add.w	r5, r5, r0, lsr #8
900177e6:	9811      	ldr	r0, [sp, #68]	; 0x44
900177e8:	ea4f 1858 	mov.w	r8, r8, lsr #5
900177ec:	f3c5 25c4 	ubfx	r5, r5, #11, #5
900177f0:	4401      	add	r1, r0
900177f2:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
900177f6:	9812      	ldr	r0, [sp, #72]	; 0x48
900177f8:	ea45 0c0c 	orr.w	ip, r5, ip
900177fc:	4402      	add	r2, r0
900177fe:	ea4c 0c08 	orr.w	ip, ip, r8
90017802:	f82a cb02 	strh.w	ip, [sl], #2
90017806:	e7af      	b.n	90017768 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
90017808:	f04f 0800 	mov.w	r8, #0
9001780c:	f8bd a004 	ldrh.w	sl, [sp, #4]
90017810:	eb03 0008 	add.w	r0, r3, r8
90017814:	2800      	cmp	r0, #0
90017816:	dc41      	bgt.n	9001789c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
90017818:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
9001781c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
90017820:	9b00      	ldr	r3, [sp, #0]
90017822:	2b00      	cmp	r3, #0
90017824:	f340 8095 	ble.w	90017952 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
90017828:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
9001782c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001782e:	ee30 0a04 	vadd.f32	s0, s0, s8
90017832:	ee70 0aa4 	vadd.f32	s1, s1, s9
90017836:	eef0 6a62 	vmov.f32	s13, s5
9001783a:	eec7 7a00 	vdiv.f32	s15, s14, s0
9001783e:	ee31 1a05 	vadd.f32	s2, s2, s10
90017842:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
90017846:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
9001784a:	eef0 6a43 	vmov.f32	s13, s6
9001784e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
90017852:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
90017856:	ee20 7aa7 	vmul.f32	s14, s1, s15
9001785a:	ee61 7a27 	vmul.f32	s15, s2, s15
9001785e:	ee77 2a62 	vsub.f32	s5, s14, s5
90017862:	ee37 3ac3 	vsub.f32	s6, s15, s6
90017866:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9001786a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9001786e:	ee12 2a90 	vmov	r2, s5
90017872:	eef0 2a47 	vmov.f32	s5, s14
90017876:	fb92 f3f3 	sdiv	r3, r2, r3
9001787a:	ee13 2a10 	vmov	r2, s6
9001787e:	9311      	str	r3, [sp, #68]	; 0x44
90017880:	9b0e      	ldr	r3, [sp, #56]	; 0x38
90017882:	eeb0 3a67 	vmov.f32	s6, s15
90017886:	fb92 f3f3 	sdiv	r3, r2, r3
9001788a:	9312      	str	r3, [sp, #72]	; 0x48
9001788c:	9b00      	ldr	r3, [sp, #0]
9001788e:	9a03      	ldr	r2, [sp, #12]
90017890:	3b01      	subs	r3, #1
90017892:	9300      	str	r3, [sp, #0]
90017894:	9b0e      	ldr	r3, [sp, #56]	; 0x38
90017896:	bf08      	it	eq
90017898:	4613      	moveq	r3, r2
9001789a:	e72f      	b.n	900176fc <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
9001789c:	140f      	asrs	r7, r1, #16
9001789e:	d451      	bmi.n	90017944 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
900178a0:	f8de 5008 	ldr.w	r5, [lr, #8]
900178a4:	42bd      	cmp	r5, r7
900178a6:	dd4d      	ble.n	90017944 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
900178a8:	ea5f 4c22 	movs.w	ip, r2, asr #16
900178ac:	d44a      	bmi.n	90017944 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
900178ae:	f8de 000c 	ldr.w	r0, [lr, #12]
900178b2:	4560      	cmp	r0, ip
900178b4:	dd46      	ble.n	90017944 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
900178b6:	b22d      	sxth	r5, r5
900178b8:	9802      	ldr	r0, [sp, #8]
900178ba:	fb0c 7505 	mla	r5, ip, r5, r7
900178be:	f830 0015 	ldrh.w	r0, [r0, r5, lsl #1]
900178c2:	f06f 0501 	mvn.w	r5, #1
900178c6:	fb05 fb08 	mul.w	fp, r5, r8
900178ca:	ea4f 2c20 	mov.w	ip, r0, asr #8
900178ce:	f834 500b 	ldrh.w	r5, [r4, fp]
900178d2:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
900178d6:	122f      	asrs	r7, r5, #8
900178d8:	ea4f 09e5 	mov.w	r9, r5, asr #3
900178dc:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
900178e0:	00ed      	lsls	r5, r5, #3
900178e2:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
900178e6:	fb17 f706 	smulbb	r7, r7, r6
900178ea:	b2ed      	uxtb	r5, r5
900178ec:	fb19 f906 	smulbb	r9, r9, r6
900178f0:	fb0c 7c0a 	mla	ip, ip, sl, r7
900178f4:	10c7      	asrs	r7, r0, #3
900178f6:	fb15 f506 	smulbb	r5, r5, r6
900178fa:	00c0      	lsls	r0, r0, #3
900178fc:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
90017900:	fa1f fc8c 	uxth.w	ip, ip
90017904:	b2c0      	uxtb	r0, r0
90017906:	fb07 970a 	mla	r7, r7, sl, r9
9001790a:	fb00 500a 	mla	r0, r0, sl, r5
9001790e:	f10c 0501 	add.w	r5, ip, #1
90017912:	b2bf      	uxth	r7, r7
90017914:	b280      	uxth	r0, r0
90017916:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
9001791a:	f107 0901 	add.w	r9, r7, #1
9001791e:	1c45      	adds	r5, r0, #1
90017920:	eb09 2917 	add.w	r9, r9, r7, lsr #8
90017924:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
90017928:	eb05 2510 	add.w	r5, r5, r0, lsr #8
9001792c:	ea4f 1959 	mov.w	r9, r9, lsr #5
90017930:	f3c5 25c4 	ubfx	r5, r5, #11, #5
90017934:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
90017938:	ea45 0c0c 	orr.w	ip, r5, ip
9001793c:	ea4c 0c09 	orr.w	ip, ip, r9
90017940:	f824 c00b 	strh.w	ip, [r4, fp]
90017944:	9811      	ldr	r0, [sp, #68]	; 0x44
90017946:	f108 38ff 	add.w	r8, r8, #4294967295
9001794a:	4401      	add	r1, r0
9001794c:	9812      	ldr	r0, [sp, #72]	; 0x48
9001794e:	4402      	add	r2, r0
90017950:	e75e      	b.n	90017810 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
90017952:	b005      	add	sp, #20
90017954:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

90017958 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
90017958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001795c:	b085      	sub	sp, #20
9001795e:	4693      	mov	fp, r2
90017960:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
90017964:	9e13      	ldr	r6, [sp, #76]	; 0x4c
90017966:	9d16      	ldr	r5, [sp, #88]	; 0x58
90017968:	6870      	ldr	r0, [r6, #4]
9001796a:	9101      	str	r1, [sp, #4]
9001796c:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
90017970:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	; 0x44
90017974:	fb00 2404 	mla	r4, r0, r4, r2
90017978:	6832      	ldr	r2, [r6, #0]
9001797a:	eb02 0444 	add.w	r4, r2, r4, lsl #1
9001797e:	682a      	ldr	r2, [r5, #0]
90017980:	9202      	str	r2, [sp, #8]
90017982:	9a01      	ldr	r2, [sp, #4]
90017984:	2a00      	cmp	r2, #0
90017986:	dc03      	bgt.n	90017990 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
90017988:	f1bb 0f00 	cmp.w	fp, #0
9001798c:	f340 809a 	ble.w	90017ac4 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
90017990:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
90017992:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
90017996:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
9001799a:	9a10      	ldr	r2, [sp, #64]	; 0x40
9001799c:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
900179a0:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
900179a4:	2b00      	cmp	r3, #0
900179a6:	dd0c      	ble.n	900179c2 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
900179a8:	1406      	asrs	r6, r0, #16
900179aa:	d405      	bmi.n	900179b8 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
900179ac:	454e      	cmp	r6, r9
900179ae:	da03      	bge.n	900179b8 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
900179b0:	1416      	asrs	r6, r2, #16
900179b2:	d401      	bmi.n	900179b8 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
900179b4:	4546      	cmp	r6, r8
900179b6:	db05      	blt.n	900179c4 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
900179b8:	4470      	add	r0, lr
900179ba:	4462      	add	r2, ip
900179bc:	3b01      	subs	r3, #1
900179be:	3402      	adds	r4, #2
900179c0:	e7f0      	b.n	900179a4 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
900179c2:	d00f      	beq.n	900179e4 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
900179c4:	1e5e      	subs	r6, r3, #1
900179c6:	fb0e 0706 	mla	r7, lr, r6, r0
900179ca:	143f      	asrs	r7, r7, #16
900179cc:	d541      	bpl.n	90017a52 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfa>
900179ce:	eb04 0643 	add.w	r6, r4, r3, lsl #1
900179d2:	4698      	mov	r8, r3
900179d4:	9603      	str	r6, [sp, #12]
900179d6:	f1b8 0f00 	cmp.w	r8, #0
900179da:	dc56      	bgt.n	90017a8a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x132>
900179dc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
900179e0:	eb04 0443 	add.w	r4, r4, r3, lsl #1
900179e4:	9b01      	ldr	r3, [sp, #4]
900179e6:	2b00      	cmp	r3, #0
900179e8:	dd6c      	ble.n	90017ac4 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
900179ea:	ee30 0a04 	vadd.f32	s0, s0, s8
900179ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
900179f0:	ee70 0aa4 	vadd.f32	s1, s1, s9
900179f4:	eeb0 6a62 	vmov.f32	s12, s5
900179f8:	eec6 7a80 	vdiv.f32	s15, s13, s0
900179fc:	ee31 1a05 	vadd.f32	s2, s2, s10
90017a00:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
90017a04:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
90017a08:	eeb0 6a43 	vmov.f32	s12, s6
90017a0c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
90017a10:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
90017a14:	ee20 7aa7 	vmul.f32	s14, s1, s15
90017a18:	ee61 7a27 	vmul.f32	s15, s2, s15
90017a1c:	ee77 2a62 	vsub.f32	s5, s14, s5
90017a20:	ee37 3ac3 	vsub.f32	s6, s15, s6
90017a24:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
90017a28:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
90017a2c:	ee12 2a90 	vmov	r2, s5
90017a30:	eef0 2a47 	vmov.f32	s5, s14
90017a34:	fb92 fef3 	sdiv	lr, r2, r3
90017a38:	ee13 2a10 	vmov	r2, s6
90017a3c:	eeb0 3a67 	vmov.f32	s6, s15
90017a40:	fb92 fcf3 	sdiv	ip, r2, r3
90017a44:	9b01      	ldr	r3, [sp, #4]
90017a46:	3b01      	subs	r3, #1
90017a48:	9301      	str	r3, [sp, #4]
90017a4a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
90017a4c:	bf08      	it	eq
90017a4e:	465b      	moveq	r3, fp
90017a50:	e797      	b.n	90017982 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
90017a52:	454f      	cmp	r7, r9
90017a54:	dabb      	bge.n	900179ce <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
90017a56:	fb0c 2606 	mla	r6, ip, r6, r2
90017a5a:	1436      	asrs	r6, r6, #16
90017a5c:	d4b7      	bmi.n	900179ce <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
90017a5e:	4546      	cmp	r6, r8
90017a60:	dab5      	bge.n	900179ce <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
90017a62:	461e      	mov	r6, r3
90017a64:	46a0      	mov	r8, r4
90017a66:	2e00      	cmp	r6, #0
90017a68:	ddb8      	ble.n	900179dc <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
90017a6a:	1417      	asrs	r7, r2, #16
90017a6c:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
90017a70:	ea4f 4920 	mov.w	r9, r0, asr #16
90017a74:	9902      	ldr	r1, [sp, #8]
90017a76:	4470      	add	r0, lr
90017a78:	4462      	add	r2, ip
90017a7a:	fb0a 9707 	mla	r7, sl, r7, r9
90017a7e:	3e01      	subs	r6, #1
90017a80:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
90017a84:	f828 7b02 	strh.w	r7, [r8], #2
90017a88:	e7ed      	b.n	90017a66 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10e>
90017a8a:	ea5f 4920 	movs.w	r9, r0, asr #16
90017a8e:	d414      	bmi.n	90017aba <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
90017a90:	68ae      	ldr	r6, [r5, #8]
90017a92:	454e      	cmp	r6, r9
90017a94:	dd11      	ble.n	90017aba <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
90017a96:	ea5f 4a22 	movs.w	sl, r2, asr #16
90017a9a:	d40e      	bmi.n	90017aba <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
90017a9c:	68ef      	ldr	r7, [r5, #12]
90017a9e:	4557      	cmp	r7, sl
90017aa0:	dd0b      	ble.n	90017aba <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
90017aa2:	b236      	sxth	r6, r6
90017aa4:	f06f 0101 	mvn.w	r1, #1
90017aa8:	9f02      	ldr	r7, [sp, #8]
90017aaa:	fb0a 9606 	mla	r6, sl, r6, r9
90017aae:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
90017ab2:	fb01 f608 	mul.w	r6, r1, r8
90017ab6:	9903      	ldr	r1, [sp, #12]
90017ab8:	538f      	strh	r7, [r1, r6]
90017aba:	4470      	add	r0, lr
90017abc:	4462      	add	r2, ip
90017abe:	f108 38ff 	add.w	r8, r8, #4294967295
90017ac2:	e788      	b.n	900179d6 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
90017ac4:	b005      	add	sp, #20
90017ac6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

90017aca <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
90017aca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90017ace:	b087      	sub	sp, #28
90017ad0:	468b      	mov	fp, r1
90017ad2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
90017ad6:	9815      	ldr	r0, [sp, #84]	; 0x54
90017ad8:	9203      	str	r2, [sp, #12]
90017ada:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
90017ade:	6841      	ldr	r1, [r0, #4]
90017ae0:	9204      	str	r2, [sp, #16]
90017ae2:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
90017ae6:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
90017aea:	fb01 2505 	mla	r5, r1, r5, r2
90017aee:	6802      	ldr	r2, [r0, #0]
90017af0:	eb02 0545 	add.w	r5, r2, r5, lsl #1
90017af4:	f8d9 2000 	ldr.w	r2, [r9]
90017af8:	9201      	str	r2, [sp, #4]
90017afa:	f1bb 0f00 	cmp.w	fp, #0
90017afe:	dc03      	bgt.n	90017b08 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
90017b00:	9a03      	ldr	r2, [sp, #12]
90017b02:	2a00      	cmp	r2, #0
90017b04:	f340 8158 	ble.w	90017db8 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ee>
90017b08:	9a11      	ldr	r2, [sp, #68]	; 0x44
90017b0a:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
90017b0e:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
90017b12:	9a12      	ldr	r2, [sp, #72]	; 0x48
90017b14:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
90017b18:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
90017b1c:	2b00      	cmp	r3, #0
90017b1e:	dd0e      	ble.n	90017b3e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
90017b20:	1402      	asrs	r2, r0, #16
90017b22:	d405      	bmi.n	90017b30 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
90017b24:	42ba      	cmp	r2, r7
90017b26:	da03      	bge.n	90017b30 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
90017b28:	140a      	asrs	r2, r1, #16
90017b2a:	d401      	bmi.n	90017b30 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
90017b2c:	42b2      	cmp	r2, r6
90017b2e:	db07      	blt.n	90017b40 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
90017b30:	9a13      	ldr	r2, [sp, #76]	; 0x4c
90017b32:	3b01      	subs	r3, #1
90017b34:	3502      	adds	r5, #2
90017b36:	4410      	add	r0, r2
90017b38:	9a14      	ldr	r2, [sp, #80]	; 0x50
90017b3a:	4411      	add	r1, r2
90017b3c:	e7ee      	b.n	90017b1c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
90017b3e:	d017      	beq.n	90017b70 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
90017b40:	1e5a      	subs	r2, r3, #1
90017b42:	9c13      	ldr	r4, [sp, #76]	; 0x4c
90017b44:	fb04 0402 	mla	r4, r4, r2, r0
90017b48:	1424      	asrs	r4, r4, #16
90017b4a:	d409      	bmi.n	90017b60 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
90017b4c:	42bc      	cmp	r4, r7
90017b4e:	da07      	bge.n	90017b60 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
90017b50:	9c14      	ldr	r4, [sp, #80]	; 0x50
90017b52:	fb04 1202 	mla	r2, r4, r2, r1
90017b56:	1412      	asrs	r2, r2, #16
90017b58:	d402      	bmi.n	90017b60 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
90017b5a:	42b2      	cmp	r2, r6
90017b5c:	f2c0 80bf 	blt.w	90017cde <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
90017b60:	2700      	movs	r7, #0
90017b62:	19da      	adds	r2, r3, r7
90017b64:	2a00      	cmp	r2, #0
90017b66:	dc3e      	bgt.n	90017be6 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
90017b68:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
90017b6c:	eb05 0543 	add.w	r5, r5, r3, lsl #1
90017b70:	f1bb 0f00 	cmp.w	fp, #0
90017b74:	f340 8120 	ble.w	90017db8 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ee>
90017b78:	ee30 0a04 	vadd.f32	s0, s0, s8
90017b7c:	9b10      	ldr	r3, [sp, #64]	; 0x40
90017b7e:	ee70 0aa4 	vadd.f32	s1, s1, s9
90017b82:	f1bb 0b01 	subs.w	fp, fp, #1
90017b86:	eeb0 6a62 	vmov.f32	s12, s5
90017b8a:	eec6 7a80 	vdiv.f32	s15, s13, s0
90017b8e:	ee31 1a05 	vadd.f32	s2, s2, s10
90017b92:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
90017b96:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
90017b9a:	eeb0 6a43 	vmov.f32	s12, s6
90017b9e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
90017ba2:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
90017ba6:	ee20 7aa7 	vmul.f32	s14, s1, s15
90017baa:	ee61 7a27 	vmul.f32	s15, s2, s15
90017bae:	ee77 2a62 	vsub.f32	s5, s14, s5
90017bb2:	ee37 3ac3 	vsub.f32	s6, s15, s6
90017bb6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
90017bba:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
90017bbe:	ee12 2a90 	vmov	r2, s5
90017bc2:	eef0 2a47 	vmov.f32	s5, s14
90017bc6:	fb92 f3f3 	sdiv	r3, r2, r3
90017bca:	ee13 2a10 	vmov	r2, s6
90017bce:	9313      	str	r3, [sp, #76]	; 0x4c
90017bd0:	9b10      	ldr	r3, [sp, #64]	; 0x40
90017bd2:	eeb0 3a67 	vmov.f32	s6, s15
90017bd6:	fb92 f3f3 	sdiv	r3, r2, r3
90017bda:	9a03      	ldr	r2, [sp, #12]
90017bdc:	9314      	str	r3, [sp, #80]	; 0x50
90017bde:	9b10      	ldr	r3, [sp, #64]	; 0x40
90017be0:	bf08      	it	eq
90017be2:	4613      	moveq	r3, r2
90017be4:	e789      	b.n	90017afa <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
90017be6:	1406      	asrs	r6, r0, #16
90017be8:	d42d      	bmi.n	90017c46 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
90017bea:	f8d9 4008 	ldr.w	r4, [r9, #8]
90017bee:	42b4      	cmp	r4, r6
90017bf0:	dd29      	ble.n	90017c46 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
90017bf2:	ea5f 4c21 	movs.w	ip, r1, asr #16
90017bf6:	d426      	bmi.n	90017c46 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
90017bf8:	f8d9 200c 	ldr.w	r2, [r9, #12]
90017bfc:	4562      	cmp	r2, ip
90017bfe:	dd22      	ble.n	90017c46 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
90017c00:	b224      	sxth	r4, r4
90017c02:	9a01      	ldr	r2, [sp, #4]
90017c04:	fb0c 6404 	mla	r4, ip, r4, r6
90017c08:	f852 4024 	ldr.w	r4, [r2, r4, lsl #2]
90017c0c:	0e22      	lsrs	r2, r4, #24
90017c0e:	d01a      	beq.n	90017c46 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
90017c10:	9e04      	ldr	r6, [sp, #16]
90017c12:	4372      	muls	r2, r6
90017c14:	1c56      	adds	r6, r2, #1
90017c16:	eb06 2222 	add.w	r2, r6, r2, asr #8
90017c1a:	0a26      	lsrs	r6, r4, #8
90017c1c:	1212      	asrs	r2, r2, #8
90017c1e:	9605      	str	r6, [sp, #20]
90017c20:	2aff      	cmp	r2, #255	; 0xff
90017c22:	d116      	bne.n	90017c52 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
90017c24:	f06f 0201 	mvn.w	r2, #1
90017c28:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
90017c2c:	fb02 fc07 	mul.w	ip, r2, r7
90017c30:	0962      	lsrs	r2, r4, #5
90017c32:	f026 0607 	bic.w	r6, r6, #7
90017c36:	f3c4 04c4 	ubfx	r4, r4, #3, #5
90017c3a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
90017c3e:	4316      	orrs	r6, r2
90017c40:	4326      	orrs	r6, r4
90017c42:	f825 600c 	strh.w	r6, [r5, ip]
90017c46:	9a13      	ldr	r2, [sp, #76]	; 0x4c
90017c48:	3f01      	subs	r7, #1
90017c4a:	4410      	add	r0, r2
90017c4c:	9a14      	ldr	r2, [sp, #80]	; 0x50
90017c4e:	4411      	add	r1, r2
90017c50:	e787      	b.n	90017b62 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
90017c52:	f06f 0601 	mvn.w	r6, #1
90017c56:	fa1f fa82 	uxth.w	sl, r2
90017c5a:	f3c4 4c07 	ubfx	ip, r4, #16, #8
90017c5e:	43d2      	mvns	r2, r2
90017c60:	437e      	muls	r6, r7
90017c62:	b2e4      	uxtb	r4, r4
90017c64:	fb1c fc0a 	smulbb	ip, ip, sl
90017c68:	b2d2      	uxtb	r2, r2
90017c6a:	f835 8006 	ldrh.w	r8, [r5, r6]
90017c6e:	fb14 f40a 	smulbb	r4, r4, sl
90017c72:	9602      	str	r6, [sp, #8]
90017c74:	ea4f 2e28 	mov.w	lr, r8, asr #8
90017c78:	f89d 6014 	ldrb.w	r6, [sp, #20]
90017c7c:	fb16 f60a 	smulbb	r6, r6, sl
90017c80:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
90017c84:	fb0e ce02 	mla	lr, lr, r2, ip
90017c88:	ea4f 0ce8 	mov.w	ip, r8, asr #3
90017c8c:	ea4f 08c8 	mov.w	r8, r8, lsl #3
90017c90:	fa1f fe8e 	uxth.w	lr, lr
90017c94:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
90017c98:	fa5f f888 	uxtb.w	r8, r8
90017c9c:	fb0c 6c02 	mla	ip, ip, r2, r6
90017ca0:	fb08 4402 	mla	r4, r8, r2, r4
90017ca4:	f10e 0201 	add.w	r2, lr, #1
90017ca8:	fa1f fc8c 	uxth.w	ip, ip
90017cac:	b2a4      	uxth	r4, r4
90017cae:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
90017cb2:	9a02      	ldr	r2, [sp, #8]
90017cb4:	1c66      	adds	r6, r4, #1
90017cb6:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
90017cba:	eb06 2614 	add.w	r6, r6, r4, lsr #8
90017cbe:	f3c6 26c4 	ubfx	r6, r6, #11, #5
90017cc2:	ea46 0e0e 	orr.w	lr, r6, lr
90017cc6:	f10c 0601 	add.w	r6, ip, #1
90017cca:	eb06 261c 	add.w	r6, r6, ip, lsr #8
90017cce:	0976      	lsrs	r6, r6, #5
90017cd0:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
90017cd4:	ea4e 0e06 	orr.w	lr, lr, r6
90017cd8:	f825 e002 	strh.w	lr, [r5, r2]
90017cdc:	e7b3      	b.n	90017c46 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
90017cde:	f04f 0800 	mov.w	r8, #0
90017ce2:	eba3 0208 	sub.w	r2, r3, r8
90017ce6:	2a00      	cmp	r2, #0
90017ce8:	f77f af3e 	ble.w	90017b68 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
90017cec:	1404      	asrs	r4, r0, #16
90017cee:	f9b9 6008 	ldrsh.w	r6, [r9, #8]
90017cf2:	140a      	asrs	r2, r1, #16
90017cf4:	fb06 4202 	mla	r2, r6, r2, r4
90017cf8:	9c01      	ldr	r4, [sp, #4]
90017cfa:	f854 4022 	ldr.w	r4, [r4, r2, lsl #2]
90017cfe:	0e22      	lsrs	r2, r4, #24
90017d00:	d015      	beq.n	90017d2e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
90017d02:	9e04      	ldr	r6, [sp, #16]
90017d04:	4372      	muls	r2, r6
90017d06:	1c56      	adds	r6, r2, #1
90017d08:	eb06 2222 	add.w	r2, r6, r2, asr #8
90017d0c:	0a26      	lsrs	r6, r4, #8
90017d0e:	1212      	asrs	r2, r2, #8
90017d10:	2aff      	cmp	r2, #255	; 0xff
90017d12:	d113      	bne.n	90017d3c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
90017d14:	0962      	lsrs	r2, r4, #5
90017d16:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
90017d1a:	f3c4 04c4 	ubfx	r4, r4, #3, #5
90017d1e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
90017d22:	f026 0607 	bic.w	r6, r6, #7
90017d26:	4316      	orrs	r6, r2
90017d28:	4326      	orrs	r6, r4
90017d2a:	f825 6018 	strh.w	r6, [r5, r8, lsl #1]
90017d2e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
90017d30:	f108 0801 	add.w	r8, r8, #1
90017d34:	4410      	add	r0, r2
90017d36:	9a14      	ldr	r2, [sp, #80]	; 0x50
90017d38:	4411      	add	r1, r2
90017d3a:	e7d2      	b.n	90017ce2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
90017d3c:	f835 e018 	ldrh.w	lr, [r5, r8, lsl #1]
90017d40:	fa1f fa82 	uxth.w	sl, r2
90017d44:	f3c4 4707 	ubfx	r7, r4, #16, #8
90017d48:	43d2      	mvns	r2, r2
90017d4a:	ea4f 2c2e 	mov.w	ip, lr, asr #8
90017d4e:	fb17 f70a 	smulbb	r7, r7, sl
90017d52:	b2d2      	uxtb	r2, r2
90017d54:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
90017d58:	b2e4      	uxtb	r4, r4
90017d5a:	b2f6      	uxtb	r6, r6
90017d5c:	fb0c 7c02 	mla	ip, ip, r2, r7
90017d60:	ea4f 07ee 	mov.w	r7, lr, asr #3
90017d64:	fb14 f40a 	smulbb	r4, r4, sl
90017d68:	ea4f 0ece 	mov.w	lr, lr, lsl #3
90017d6c:	fa1f fc8c 	uxth.w	ip, ip
90017d70:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
90017d74:	fb16 f60a 	smulbb	r6, r6, sl
90017d78:	fa5f fe8e 	uxtb.w	lr, lr
90017d7c:	fb0e 4402 	mla	r4, lr, r2, r4
90017d80:	fb07 6702 	mla	r7, r7, r2, r6
90017d84:	f10c 0201 	add.w	r2, ip, #1
90017d88:	b2a4      	uxth	r4, r4
90017d8a:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
90017d8e:	1c66      	adds	r6, r4, #1
90017d90:	b2bf      	uxth	r7, r7
90017d92:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
90017d96:	eb06 2614 	add.w	r6, r6, r4, lsr #8
90017d9a:	f3c6 26c4 	ubfx	r6, r6, #11, #5
90017d9e:	ea46 0c0c 	orr.w	ip, r6, ip
90017da2:	1c7e      	adds	r6, r7, #1
90017da4:	eb06 2617 	add.w	r6, r6, r7, lsr #8
90017da8:	0976      	lsrs	r6, r6, #5
90017daa:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
90017dae:	ea4c 0c06 	orr.w	ip, ip, r6
90017db2:	f825 c018 	strh.w	ip, [r5, r8, lsl #1]
90017db6:	e7ba      	b.n	90017d2e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
90017db8:	b007      	add	sp, #28
90017dba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

90017dc0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
90017dc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90017dc4:	b085      	sub	sp, #20
90017dc6:	468b      	mov	fp, r1
90017dc8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
90017dcc:	9813      	ldr	r0, [sp, #76]	; 0x4c
90017dce:	9203      	str	r2, [sp, #12]
90017dd0:	6841      	ldr	r1, [r0, #4]
90017dd2:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
90017dd6:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
90017dda:	fb01 2404 	mla	r4, r1, r4, r2
90017dde:	6802      	ldr	r2, [r0, #0]
90017de0:	eb02 0444 	add.w	r4, r2, r4, lsl #1
90017de4:	f8d8 2000 	ldr.w	r2, [r8]
90017de8:	9201      	str	r2, [sp, #4]
90017dea:	f1bb 0f00 	cmp.w	fp, #0
90017dee:	dc03      	bgt.n	90017df8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
90017df0:	9a03      	ldr	r2, [sp, #12]
90017df2:	2a00      	cmp	r2, #0
90017df4:	f340 814f 	ble.w	90018096 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
90017df8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
90017dfa:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
90017dfe:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
90017e02:	9a10      	ldr	r2, [sp, #64]	; 0x40
90017e04:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
90017e08:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
90017e0c:	2b00      	cmp	r3, #0
90017e0e:	dd0e      	ble.n	90017e2e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
90017e10:	1408      	asrs	r0, r1, #16
90017e12:	d405      	bmi.n	90017e20 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
90017e14:	42b8      	cmp	r0, r7
90017e16:	da03      	bge.n	90017e20 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
90017e18:	1410      	asrs	r0, r2, #16
90017e1a:	d401      	bmi.n	90017e20 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
90017e1c:	42b0      	cmp	r0, r6
90017e1e:	db07      	blt.n	90017e30 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
90017e20:	9811      	ldr	r0, [sp, #68]	; 0x44
90017e22:	3b01      	subs	r3, #1
90017e24:	3402      	adds	r4, #2
90017e26:	4401      	add	r1, r0
90017e28:	9812      	ldr	r0, [sp, #72]	; 0x48
90017e2a:	4402      	add	r2, r0
90017e2c:	e7ee      	b.n	90017e0c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
90017e2e:	d017      	beq.n	90017e60 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
90017e30:	1e58      	subs	r0, r3, #1
90017e32:	9d11      	ldr	r5, [sp, #68]	; 0x44
90017e34:	fb05 1500 	mla	r5, r5, r0, r1
90017e38:	142d      	asrs	r5, r5, #16
90017e3a:	d409      	bmi.n	90017e50 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
90017e3c:	42bd      	cmp	r5, r7
90017e3e:	da07      	bge.n	90017e50 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
90017e40:	9d12      	ldr	r5, [sp, #72]	; 0x48
90017e42:	fb05 2000 	mla	r0, r5, r0, r2
90017e46:	1400      	asrs	r0, r0, #16
90017e48:	d402      	bmi.n	90017e50 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
90017e4a:	42b0      	cmp	r0, r6
90017e4c:	f2c0 80ba 	blt.w	90017fc4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
90017e50:	2600      	movs	r6, #0
90017e52:	1998      	adds	r0, r3, r6
90017e54:	2800      	cmp	r0, #0
90017e56:	dc3e      	bgt.n	90017ed6 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
90017e58:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
90017e5c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
90017e60:	f1bb 0f00 	cmp.w	fp, #0
90017e64:	f340 8117 	ble.w	90018096 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
90017e68:	ee30 0a04 	vadd.f32	s0, s0, s8
90017e6c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
90017e6e:	ee70 0aa4 	vadd.f32	s1, s1, s9
90017e72:	f1bb 0b01 	subs.w	fp, fp, #1
90017e76:	eeb0 6a62 	vmov.f32	s12, s5
90017e7a:	eec6 7a80 	vdiv.f32	s15, s13, s0
90017e7e:	ee31 1a05 	vadd.f32	s2, s2, s10
90017e82:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
90017e86:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
90017e8a:	eeb0 6a43 	vmov.f32	s12, s6
90017e8e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
90017e92:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
90017e96:	ee20 7aa7 	vmul.f32	s14, s1, s15
90017e9a:	ee61 7a27 	vmul.f32	s15, s2, s15
90017e9e:	ee77 2a62 	vsub.f32	s5, s14, s5
90017ea2:	ee37 3ac3 	vsub.f32	s6, s15, s6
90017ea6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
90017eaa:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
90017eae:	ee12 2a90 	vmov	r2, s5
90017eb2:	eef0 2a47 	vmov.f32	s5, s14
90017eb6:	fb92 f3f3 	sdiv	r3, r2, r3
90017eba:	ee13 2a10 	vmov	r2, s6
90017ebe:	9311      	str	r3, [sp, #68]	; 0x44
90017ec0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
90017ec2:	eeb0 3a67 	vmov.f32	s6, s15
90017ec6:	fb92 f3f3 	sdiv	r3, r2, r3
90017eca:	9a03      	ldr	r2, [sp, #12]
90017ecc:	9312      	str	r3, [sp, #72]	; 0x48
90017ece:	9b0e      	ldr	r3, [sp, #56]	; 0x38
90017ed0:	bf08      	it	eq
90017ed2:	4613      	moveq	r3, r2
90017ed4:	e789      	b.n	90017dea <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
90017ed6:	140f      	asrs	r7, r1, #16
90017ed8:	d424      	bmi.n	90017f24 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
90017eda:	f8d8 5008 	ldr.w	r5, [r8, #8]
90017ede:	42bd      	cmp	r5, r7
90017ee0:	dd20      	ble.n	90017f24 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
90017ee2:	ea5f 4c22 	movs.w	ip, r2, asr #16
90017ee6:	d41d      	bmi.n	90017f24 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
90017ee8:	f8d8 000c 	ldr.w	r0, [r8, #12]
90017eec:	4560      	cmp	r0, ip
90017eee:	dd19      	ble.n	90017f24 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
90017ef0:	b22d      	sxth	r5, r5
90017ef2:	9801      	ldr	r0, [sp, #4]
90017ef4:	fb0c 7505 	mla	r5, ip, r5, r7
90017ef8:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
90017efc:	0e07      	lsrs	r7, r0, #24
90017efe:	2fff      	cmp	r7, #255	; 0xff
90017f00:	d116      	bne.n	90017f30 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
90017f02:	f06f 0501 	mvn.w	r5, #1
90017f06:	fb05 f706 	mul.w	r7, r5, r6
90017f0a:	f2a5 75fe 	subw	r5, r5, #2046	; 0x7fe
90017f0e:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
90017f12:	0945      	lsrs	r5, r0, #5
90017f14:	f3c0 00c4 	ubfx	r0, r0, #3, #5
90017f18:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
90017f1c:	ea4c 0505 	orr.w	r5, ip, r5
90017f20:	4305      	orrs	r5, r0
90017f22:	53e5      	strh	r5, [r4, r7]
90017f24:	9811      	ldr	r0, [sp, #68]	; 0x44
90017f26:	3e01      	subs	r6, #1
90017f28:	4401      	add	r1, r0
90017f2a:	9812      	ldr	r0, [sp, #72]	; 0x48
90017f2c:	4402      	add	r2, r0
90017f2e:	e790      	b.n	90017e52 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
90017f30:	b2fd      	uxtb	r5, r7
90017f32:	2f00      	cmp	r7, #0
90017f34:	d0f6      	beq.n	90017f24 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
90017f36:	f06f 0701 	mvn.w	r7, #1
90017f3a:	fa1f f985 	uxth.w	r9, r5
90017f3e:	43ed      	mvns	r5, r5
90017f40:	f3c0 2a07 	ubfx	sl, r0, #8, #8
90017f44:	4377      	muls	r7, r6
90017f46:	fb1a fa09 	smulbb	sl, sl, r9
90017f4a:	b2ed      	uxtb	r5, r5
90017f4c:	f834 e007 	ldrh.w	lr, [r4, r7]
90017f50:	9702      	str	r7, [sp, #8]
90017f52:	f3c0 4707 	ubfx	r7, r0, #16, #8
90017f56:	ea4f 2c2e 	mov.w	ip, lr, asr #8
90017f5a:	fb17 f709 	smulbb	r7, r7, r9
90017f5e:	b2c0      	uxtb	r0, r0
90017f60:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
90017f64:	fb10 f009 	smulbb	r0, r0, r9
90017f68:	fb0c 7c05 	mla	ip, ip, r5, r7
90017f6c:	ea4f 07ee 	mov.w	r7, lr, asr #3
90017f70:	ea4f 0ece 	mov.w	lr, lr, lsl #3
90017f74:	fa1f fc8c 	uxth.w	ip, ip
90017f78:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
90017f7c:	fa5f fe8e 	uxtb.w	lr, lr
90017f80:	fb07 a705 	mla	r7, r7, r5, sl
90017f84:	fb0e 0005 	mla	r0, lr, r5, r0
90017f88:	f10c 0501 	add.w	r5, ip, #1
90017f8c:	b2bf      	uxth	r7, r7
90017f8e:	b280      	uxth	r0, r0
90017f90:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
90017f94:	f100 0a01 	add.w	sl, r0, #1
90017f98:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
90017f9c:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
90017fa0:	9802      	ldr	r0, [sp, #8]
90017fa2:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
90017fa6:	ea4a 0c0c 	orr.w	ip, sl, ip
90017faa:	f107 0a01 	add.w	sl, r7, #1
90017fae:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
90017fb2:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
90017fb6:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
90017fba:	ea4c 0c0a 	orr.w	ip, ip, sl
90017fbe:	f824 c000 	strh.w	ip, [r4, r0]
90017fc2:	e7af      	b.n	90017f24 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
90017fc4:	f04f 0e00 	mov.w	lr, #0
90017fc8:	eba3 000e 	sub.w	r0, r3, lr
90017fcc:	2800      	cmp	r0, #0
90017fce:	f77f af43 	ble.w	90017e58 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
90017fd2:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
90017fd6:	140d      	asrs	r5, r1, #16
90017fd8:	1410      	asrs	r0, r2, #16
90017fda:	fb06 5000 	mla	r0, r6, r0, r5
90017fde:	9d01      	ldr	r5, [sp, #4]
90017fe0:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
90017fe4:	0e2e      	lsrs	r6, r5, #24
90017fe6:	2eff      	cmp	r6, #255	; 0xff
90017fe8:	d112      	bne.n	90018010 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
90017fea:	482c      	ldr	r0, [pc, #176]	; (9001809c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2dc>)
90017fec:	ea00 2615 	and.w	r6, r0, r5, lsr #8
90017ff0:	0968      	lsrs	r0, r5, #5
90017ff2:	f3c5 05c4 	ubfx	r5, r5, #3, #5
90017ff6:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
90017ffa:	4330      	orrs	r0, r6
90017ffc:	4328      	orrs	r0, r5
90017ffe:	f824 001e 	strh.w	r0, [r4, lr, lsl #1]
90018002:	9811      	ldr	r0, [sp, #68]	; 0x44
90018004:	f10e 0e01 	add.w	lr, lr, #1
90018008:	4401      	add	r1, r0
9001800a:	9812      	ldr	r0, [sp, #72]	; 0x48
9001800c:	4402      	add	r2, r0
9001800e:	e7db      	b.n	90017fc8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
90018010:	b2f0      	uxtb	r0, r6
90018012:	2e00      	cmp	r6, #0
90018014:	d0f5      	beq.n	90018002 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
90018016:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
9001801a:	fa1f f980 	uxth.w	r9, r0
9001801e:	f3c5 4607 	ubfx	r6, r5, #16, #8
90018022:	43c0      	mvns	r0, r0
90018024:	ea4f 272c 	mov.w	r7, ip, asr #8
90018028:	f3c5 2a07 	ubfx	sl, r5, #8, #8
9001802c:	fb16 f609 	smulbb	r6, r6, r9
90018030:	b2c0      	uxtb	r0, r0
90018032:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
90018036:	b2ed      	uxtb	r5, r5
90018038:	fb1a fa09 	smulbb	sl, sl, r9
9001803c:	fb07 6700 	mla	r7, r7, r0, r6
90018040:	ea4f 06ec 	mov.w	r6, ip, asr #3
90018044:	fb15 f509 	smulbb	r5, r5, r9
90018048:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
9001804c:	b2bf      	uxth	r7, r7
9001804e:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
90018052:	fa5f fc8c 	uxtb.w	ip, ip
90018056:	fb06 a600 	mla	r6, r6, r0, sl
9001805a:	fb0c 5500 	mla	r5, ip, r0, r5
9001805e:	1c78      	adds	r0, r7, #1
90018060:	b2b6      	uxth	r6, r6
90018062:	b2ad      	uxth	r5, r5
90018064:	eb00 2717 	add.w	r7, r0, r7, lsr #8
90018068:	f105 0a01 	add.w	sl, r5, #1
9001806c:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
90018070:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
90018074:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
90018078:	ea4a 0707 	orr.w	r7, sl, r7
9001807c:	f106 0a01 	add.w	sl, r6, #1
90018080:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
90018084:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
90018088:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
9001808c:	ea47 070a 	orr.w	r7, r7, sl
90018090:	f824 701e 	strh.w	r7, [r4, lr, lsl #1]
90018094:	e7b5      	b.n	90018002 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
90018096:	b005      	add	sp, #20
90018098:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001809c:	fffff800 	.word	0xfffff800

900180a0 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
900180a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900180a4:	b087      	sub	sp, #28
900180a6:	468b      	mov	fp, r1
900180a8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
900180ac:	9815      	ldr	r0, [sp, #84]	; 0x54
900180ae:	9203      	str	r2, [sp, #12]
900180b0:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
900180b4:	6841      	ldr	r1, [r0, #4]
900180b6:	9204      	str	r2, [sp, #16]
900180b8:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
900180bc:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
900180c0:	fb01 2404 	mla	r4, r1, r4, r2
900180c4:	6802      	ldr	r2, [r0, #0]
900180c6:	eb02 0444 	add.w	r4, r2, r4, lsl #1
900180ca:	f8d9 2008 	ldr.w	r2, [r9, #8]
900180ce:	3201      	adds	r2, #1
900180d0:	f022 0201 	bic.w	r2, r2, #1
900180d4:	9200      	str	r2, [sp, #0]
900180d6:	f8d9 2000 	ldr.w	r2, [r9]
900180da:	9201      	str	r2, [sp, #4]
900180dc:	f1bb 0f00 	cmp.w	fp, #0
900180e0:	dc03      	bgt.n	900180ea <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
900180e2:	9a03      	ldr	r2, [sp, #12]
900180e4:	2a00      	cmp	r2, #0
900180e6:	f340 816a 	ble.w	900183be <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
900180ea:	9a11      	ldr	r2, [sp, #68]	; 0x44
900180ec:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
900180f0:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
900180f4:	9a12      	ldr	r2, [sp, #72]	; 0x48
900180f6:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
900180fa:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
900180fe:	2b00      	cmp	r3, #0
90018100:	dd0e      	ble.n	90018120 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
90018102:	1402      	asrs	r2, r0, #16
90018104:	d405      	bmi.n	90018112 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
90018106:	42ba      	cmp	r2, r7
90018108:	da03      	bge.n	90018112 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
9001810a:	140a      	asrs	r2, r1, #16
9001810c:	d401      	bmi.n	90018112 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
9001810e:	42b2      	cmp	r2, r6
90018110:	db07      	blt.n	90018122 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
90018112:	9a13      	ldr	r2, [sp, #76]	; 0x4c
90018114:	3b01      	subs	r3, #1
90018116:	3402      	adds	r4, #2
90018118:	4410      	add	r0, r2
9001811a:	9a14      	ldr	r2, [sp, #80]	; 0x50
9001811c:	4411      	add	r1, r2
9001811e:	e7ee      	b.n	900180fe <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
90018120:	d017      	beq.n	90018152 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
90018122:	1e5a      	subs	r2, r3, #1
90018124:	9d13      	ldr	r5, [sp, #76]	; 0x4c
90018126:	fb05 0502 	mla	r5, r5, r2, r0
9001812a:	142d      	asrs	r5, r5, #16
9001812c:	d409      	bmi.n	90018142 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
9001812e:	42bd      	cmp	r5, r7
90018130:	da07      	bge.n	90018142 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
90018132:	9d14      	ldr	r5, [sp, #80]	; 0x50
90018134:	fb05 1202 	mla	r2, r5, r2, r1
90018138:	1412      	asrs	r2, r2, #16
9001813a:	d402      	bmi.n	90018142 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
9001813c:	42b2      	cmp	r2, r6
9001813e:	f2c0 80c8 	blt.w	900182d2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
90018142:	2700      	movs	r7, #0
90018144:	19da      	adds	r2, r3, r7
90018146:	2a00      	cmp	r2, #0
90018148:	dc3e      	bgt.n	900181c8 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
9001814a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
9001814e:	eb04 0443 	add.w	r4, r4, r3, lsl #1
90018152:	f1bb 0f00 	cmp.w	fp, #0
90018156:	f340 8132 	ble.w	900183be <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
9001815a:	ee30 0a04 	vadd.f32	s0, s0, s8
9001815e:	9b10      	ldr	r3, [sp, #64]	; 0x40
90018160:	ee70 0aa4 	vadd.f32	s1, s1, s9
90018164:	f1bb 0b01 	subs.w	fp, fp, #1
90018168:	eeb0 6a62 	vmov.f32	s12, s5
9001816c:	eec6 7a80 	vdiv.f32	s15, s13, s0
90018170:	ee31 1a05 	vadd.f32	s2, s2, s10
90018174:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
90018178:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
9001817c:	eeb0 6a43 	vmov.f32	s12, s6
90018180:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
90018184:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
90018188:	ee20 7aa7 	vmul.f32	s14, s1, s15
9001818c:	ee61 7a27 	vmul.f32	s15, s2, s15
90018190:	ee77 2a62 	vsub.f32	s5, s14, s5
90018194:	ee37 3ac3 	vsub.f32	s6, s15, s6
90018198:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9001819c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
900181a0:	ee12 2a90 	vmov	r2, s5
900181a4:	eef0 2a47 	vmov.f32	s5, s14
900181a8:	fb92 f3f3 	sdiv	r3, r2, r3
900181ac:	ee13 2a10 	vmov	r2, s6
900181b0:	9313      	str	r3, [sp, #76]	; 0x4c
900181b2:	9b10      	ldr	r3, [sp, #64]	; 0x40
900181b4:	eeb0 3a67 	vmov.f32	s6, s15
900181b8:	fb92 f3f3 	sdiv	r3, r2, r3
900181bc:	9a03      	ldr	r2, [sp, #12]
900181be:	9314      	str	r3, [sp, #80]	; 0x50
900181c0:	9b10      	ldr	r3, [sp, #64]	; 0x40
900181c2:	bf08      	it	eq
900181c4:	4613      	moveq	r3, r2
900181c6:	e789      	b.n	900180dc <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
900181c8:	1405      	asrs	r5, r0, #16
900181ca:	d436      	bmi.n	9001823a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
900181cc:	f8d9 2008 	ldr.w	r2, [r9, #8]
900181d0:	42aa      	cmp	r2, r5
900181d2:	dd32      	ble.n	9001823a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
900181d4:	140e      	asrs	r6, r1, #16
900181d6:	d430      	bmi.n	9001823a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
900181d8:	f8d9 200c 	ldr.w	r2, [r9, #12]
900181dc:	42b2      	cmp	r2, r6
900181de:	dd2c      	ble.n	9001823a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
900181e0:	9a00      	ldr	r2, [sp, #0]
900181e2:	fb06 5502 	mla	r5, r6, r2, r5
900181e6:	9e01      	ldr	r6, [sp, #4]
900181e8:	086a      	lsrs	r2, r5, #1
900181ea:	5cb2      	ldrb	r2, [r6, r2]
900181ec:	07ee      	lsls	r6, r5, #31
900181ee:	bf54      	ite	pl
900181f0:	f002 020f 	andpl.w	r2, r2, #15
900181f4:	1112      	asrmi	r2, r2, #4
900181f6:	eb02 1202 	add.w	r2, r2, r2, lsl #4
900181fa:	b2d2      	uxtb	r2, r2
900181fc:	b1ea      	cbz	r2, 9001823a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
900181fe:	9d04      	ldr	r5, [sp, #16]
90018200:	436a      	muls	r2, r5
90018202:	1c55      	adds	r5, r2, #1
90018204:	eb05 2222 	add.w	r2, r5, r2, asr #8
90018208:	4d6e      	ldr	r5, [pc, #440]	; (900183c4 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
9001820a:	1212      	asrs	r2, r2, #8
9001820c:	682d      	ldr	r5, [r5, #0]
9001820e:	2aff      	cmp	r2, #255	; 0xff
90018210:	ea4f 2615 	mov.w	r6, r5, lsr #8
90018214:	9605      	str	r6, [sp, #20]
90018216:	d116      	bne.n	90018246 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
90018218:	f06f 0201 	mvn.w	r2, #1
9001821c:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
90018220:	fb02 fc07 	mul.w	ip, r2, r7
90018224:	096a      	lsrs	r2, r5, #5
90018226:	f026 0607 	bic.w	r6, r6, #7
9001822a:	f3c5 05c4 	ubfx	r5, r5, #3, #5
9001822e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
90018232:	4316      	orrs	r6, r2
90018234:	432e      	orrs	r6, r5
90018236:	f824 600c 	strh.w	r6, [r4, ip]
9001823a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
9001823c:	3f01      	subs	r7, #1
9001823e:	4410      	add	r0, r2
90018240:	9a14      	ldr	r2, [sp, #80]	; 0x50
90018242:	4411      	add	r1, r2
90018244:	e77e      	b.n	90018144 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
90018246:	f06f 0601 	mvn.w	r6, #1
9001824a:	fa1f fa82 	uxth.w	sl, r2
9001824e:	f3c5 4c07 	ubfx	ip, r5, #16, #8
90018252:	43d2      	mvns	r2, r2
90018254:	437e      	muls	r6, r7
90018256:	b2ed      	uxtb	r5, r5
90018258:	fb1c fc0a 	smulbb	ip, ip, sl
9001825c:	b2d2      	uxtb	r2, r2
9001825e:	f834 8006 	ldrh.w	r8, [r4, r6]
90018262:	fb15 f50a 	smulbb	r5, r5, sl
90018266:	9602      	str	r6, [sp, #8]
90018268:	ea4f 2e28 	mov.w	lr, r8, asr #8
9001826c:	f89d 6014 	ldrb.w	r6, [sp, #20]
90018270:	fb16 f60a 	smulbb	r6, r6, sl
90018274:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
90018278:	fb0e ce02 	mla	lr, lr, r2, ip
9001827c:	ea4f 0ce8 	mov.w	ip, r8, asr #3
90018280:	ea4f 08c8 	mov.w	r8, r8, lsl #3
90018284:	fa1f fe8e 	uxth.w	lr, lr
90018288:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
9001828c:	fa5f f888 	uxtb.w	r8, r8
90018290:	fb0c 6c02 	mla	ip, ip, r2, r6
90018294:	fb08 5502 	mla	r5, r8, r2, r5
90018298:	f10e 0201 	add.w	r2, lr, #1
9001829c:	fa1f fc8c 	uxth.w	ip, ip
900182a0:	b2ad      	uxth	r5, r5
900182a2:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
900182a6:	9a02      	ldr	r2, [sp, #8]
900182a8:	1c6e      	adds	r6, r5, #1
900182aa:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
900182ae:	eb06 2615 	add.w	r6, r6, r5, lsr #8
900182b2:	f3c6 26c4 	ubfx	r6, r6, #11, #5
900182b6:	ea46 0e0e 	orr.w	lr, r6, lr
900182ba:	f10c 0601 	add.w	r6, ip, #1
900182be:	eb06 261c 	add.w	r6, r6, ip, lsr #8
900182c2:	0976      	lsrs	r6, r6, #5
900182c4:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
900182c8:	ea4e 0e06 	orr.w	lr, lr, r6
900182cc:	f824 e002 	strh.w	lr, [r4, r2]
900182d0:	e7b3      	b.n	9001823a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
900182d2:	f04f 0800 	mov.w	r8, #0
900182d6:	eba3 0208 	sub.w	r2, r3, r8
900182da:	2a00      	cmp	r2, #0
900182dc:	f77f af35 	ble.w	9001814a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
900182e0:	1402      	asrs	r2, r0, #16
900182e2:	9e00      	ldr	r6, [sp, #0]
900182e4:	140d      	asrs	r5, r1, #16
900182e6:	fb06 2505 	mla	r5, r6, r5, r2
900182ea:	9e01      	ldr	r6, [sp, #4]
900182ec:	086a      	lsrs	r2, r5, #1
900182ee:	07ed      	lsls	r5, r5, #31
900182f0:	5cb2      	ldrb	r2, [r6, r2]
900182f2:	bf54      	ite	pl
900182f4:	f002 020f 	andpl.w	r2, r2, #15
900182f8:	1112      	asrmi	r2, r2, #4
900182fa:	eb02 1202 	add.w	r2, r2, r2, lsl #4
900182fe:	b2d2      	uxtb	r2, r2
90018300:	b1c2      	cbz	r2, 90018334 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
90018302:	9d04      	ldr	r5, [sp, #16]
90018304:	436a      	muls	r2, r5
90018306:	1c55      	adds	r5, r2, #1
90018308:	eb05 2222 	add.w	r2, r5, r2, asr #8
9001830c:	4d2d      	ldr	r5, [pc, #180]	; (900183c4 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
9001830e:	1212      	asrs	r2, r2, #8
90018310:	682e      	ldr	r6, [r5, #0]
90018312:	2aff      	cmp	r2, #255	; 0xff
90018314:	ea4f 2516 	mov.w	r5, r6, lsr #8
90018318:	d113      	bne.n	90018342 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
9001831a:	0972      	lsrs	r2, r6, #5
9001831c:	f425 65ff 	bic.w	r5, r5, #2040	; 0x7f8
90018320:	f3c6 06c4 	ubfx	r6, r6, #3, #5
90018324:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
90018328:	f025 0507 	bic.w	r5, r5, #7
9001832c:	4315      	orrs	r5, r2
9001832e:	4335      	orrs	r5, r6
90018330:	f824 5018 	strh.w	r5, [r4, r8, lsl #1]
90018334:	9a13      	ldr	r2, [sp, #76]	; 0x4c
90018336:	f108 0801 	add.w	r8, r8, #1
9001833a:	4410      	add	r0, r2
9001833c:	9a14      	ldr	r2, [sp, #80]	; 0x50
9001833e:	4411      	add	r1, r2
90018340:	e7c9      	b.n	900182d6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
90018342:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
90018346:	fa1f fa82 	uxth.w	sl, r2
9001834a:	f3c6 4707 	ubfx	r7, r6, #16, #8
9001834e:	43d2      	mvns	r2, r2
90018350:	ea4f 2c2e 	mov.w	ip, lr, asr #8
90018354:	fb17 f70a 	smulbb	r7, r7, sl
90018358:	b2d2      	uxtb	r2, r2
9001835a:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
9001835e:	b2f6      	uxtb	r6, r6
90018360:	b2ed      	uxtb	r5, r5
90018362:	fb0c 7c02 	mla	ip, ip, r2, r7
90018366:	ea4f 07ee 	mov.w	r7, lr, asr #3
9001836a:	fb16 f60a 	smulbb	r6, r6, sl
9001836e:	ea4f 0ece 	mov.w	lr, lr, lsl #3
90018372:	fa1f fc8c 	uxth.w	ip, ip
90018376:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
9001837a:	fb15 f50a 	smulbb	r5, r5, sl
9001837e:	fa5f fe8e 	uxtb.w	lr, lr
90018382:	fb0e 6602 	mla	r6, lr, r2, r6
90018386:	fb07 5702 	mla	r7, r7, r2, r5
9001838a:	f10c 0201 	add.w	r2, ip, #1
9001838e:	b2b6      	uxth	r6, r6
90018390:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
90018394:	1c75      	adds	r5, r6, #1
90018396:	b2bf      	uxth	r7, r7
90018398:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
9001839c:	eb05 2516 	add.w	r5, r5, r6, lsr #8
900183a0:	f3c5 25c4 	ubfx	r5, r5, #11, #5
900183a4:	ea45 0c0c 	orr.w	ip, r5, ip
900183a8:	1c7d      	adds	r5, r7, #1
900183aa:	eb05 2517 	add.w	r5, r5, r7, lsr #8
900183ae:	096d      	lsrs	r5, r5, #5
900183b0:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
900183b4:	ea4c 0c05 	orr.w	ip, ip, r5
900183b8:	f824 c018 	strh.w	ip, [r4, r8, lsl #1]
900183bc:	e7ba      	b.n	90018334 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
900183be:	b007      	add	sp, #28
900183c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
900183c4:	24021c1c 	.word	0x24021c1c

900183c8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
900183c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900183cc:	b087      	sub	sp, #28
900183ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
900183d2:	f8df 8308 	ldr.w	r8, [pc, #776]	; 900186dc <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x314>
900183d6:	9815      	ldr	r0, [sp, #84]	; 0x54
900183d8:	9101      	str	r1, [sp, #4]
900183da:	9205      	str	r2, [sp, #20]
900183dc:	6841      	ldr	r1, [r0, #4]
900183de:	f8dd b060 	ldr.w	fp, [sp, #96]	; 0x60
900183e2:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
900183e6:	fb01 2404 	mla	r4, r1, r4, r2
900183ea:	6802      	ldr	r2, [r0, #0]
900183ec:	eb02 0444 	add.w	r4, r2, r4, lsl #1
900183f0:	f8db 2008 	ldr.w	r2, [fp, #8]
900183f4:	3201      	adds	r2, #1
900183f6:	f022 0201 	bic.w	r2, r2, #1
900183fa:	9202      	str	r2, [sp, #8]
900183fc:	f8db 2000 	ldr.w	r2, [fp]
90018400:	9203      	str	r2, [sp, #12]
90018402:	9a01      	ldr	r2, [sp, #4]
90018404:	2a00      	cmp	r2, #0
90018406:	dc03      	bgt.n	90018410 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
90018408:	9a05      	ldr	r2, [sp, #20]
9001840a:	2a00      	cmp	r2, #0
9001840c:	f340 8162 	ble.w	900186d4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
90018410:	9a11      	ldr	r2, [sp, #68]	; 0x44
90018412:	f9bb 7008 	ldrsh.w	r7, [fp, #8]
90018416:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
9001841a:	9a12      	ldr	r2, [sp, #72]	; 0x48
9001841c:	f9bb 600c 	ldrsh.w	r6, [fp, #12]
90018420:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
90018424:	2b00      	cmp	r3, #0
90018426:	dd0e      	ble.n	90018446 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
90018428:	1402      	asrs	r2, r0, #16
9001842a:	d405      	bmi.n	90018438 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
9001842c:	42ba      	cmp	r2, r7
9001842e:	da03      	bge.n	90018438 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
90018430:	140a      	asrs	r2, r1, #16
90018432:	d401      	bmi.n	90018438 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
90018434:	42b2      	cmp	r2, r6
90018436:	db07      	blt.n	90018448 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
90018438:	9a13      	ldr	r2, [sp, #76]	; 0x4c
9001843a:	3b01      	subs	r3, #1
9001843c:	3402      	adds	r4, #2
9001843e:	4410      	add	r0, r2
90018440:	9a14      	ldr	r2, [sp, #80]	; 0x50
90018442:	4411      	add	r1, r2
90018444:	e7ee      	b.n	90018424 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
90018446:	d017      	beq.n	90018478 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
90018448:	1e5a      	subs	r2, r3, #1
9001844a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
9001844c:	fb05 0502 	mla	r5, r5, r2, r0
90018450:	142d      	asrs	r5, r5, #16
90018452:	d409      	bmi.n	90018468 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
90018454:	42bd      	cmp	r5, r7
90018456:	da07      	bge.n	90018468 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
90018458:	9d14      	ldr	r5, [sp, #80]	; 0x50
9001845a:	fb05 1202 	mla	r2, r5, r2, r1
9001845e:	1412      	asrs	r2, r2, #16
90018460:	d402      	bmi.n	90018468 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
90018462:	42b2      	cmp	r2, r6
90018464:	f2c0 80c3 	blt.w	900185ee <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x226>
90018468:	2500      	movs	r5, #0
9001846a:	195a      	adds	r2, r3, r5
9001846c:	2a00      	cmp	r2, #0
9001846e:	dc3f      	bgt.n	900184f0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
90018470:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
90018474:	eb04 0443 	add.w	r4, r4, r3, lsl #1
90018478:	9b01      	ldr	r3, [sp, #4]
9001847a:	2b00      	cmp	r3, #0
9001847c:	f340 812a 	ble.w	900186d4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
90018480:	ee30 0a04 	vadd.f32	s0, s0, s8
90018484:	9b10      	ldr	r3, [sp, #64]	; 0x40
90018486:	ee70 0aa4 	vadd.f32	s1, s1, s9
9001848a:	eeb0 6a62 	vmov.f32	s12, s5
9001848e:	eec6 7a80 	vdiv.f32	s15, s13, s0
90018492:	ee31 1a05 	vadd.f32	s2, s2, s10
90018496:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
9001849a:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
9001849e:	eeb0 6a43 	vmov.f32	s12, s6
900184a2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
900184a6:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
900184aa:	ee20 7aa7 	vmul.f32	s14, s1, s15
900184ae:	ee61 7a27 	vmul.f32	s15, s2, s15
900184b2:	ee77 2a62 	vsub.f32	s5, s14, s5
900184b6:	ee37 3ac3 	vsub.f32	s6, s15, s6
900184ba:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
900184be:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
900184c2:	ee12 2a90 	vmov	r2, s5
900184c6:	eef0 2a47 	vmov.f32	s5, s14
900184ca:	fb92 f3f3 	sdiv	r3, r2, r3
900184ce:	ee13 2a10 	vmov	r2, s6
900184d2:	9313      	str	r3, [sp, #76]	; 0x4c
900184d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
900184d6:	eeb0 3a67 	vmov.f32	s6, s15
900184da:	fb92 f3f3 	sdiv	r3, r2, r3
900184de:	9314      	str	r3, [sp, #80]	; 0x50
900184e0:	9b01      	ldr	r3, [sp, #4]
900184e2:	9a05      	ldr	r2, [sp, #20]
900184e4:	3b01      	subs	r3, #1
900184e6:	9301      	str	r3, [sp, #4]
900184e8:	9b10      	ldr	r3, [sp, #64]	; 0x40
900184ea:	bf08      	it	eq
900184ec:	4613      	moveq	r3, r2
900184ee:	e788      	b.n	90018402 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
900184f0:	1406      	asrs	r6, r0, #16
900184f2:	d42c      	bmi.n	9001854e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
900184f4:	f8db 2008 	ldr.w	r2, [fp, #8]
900184f8:	42b2      	cmp	r2, r6
900184fa:	dd28      	ble.n	9001854e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
900184fc:	140f      	asrs	r7, r1, #16
900184fe:	d426      	bmi.n	9001854e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
90018500:	f8db 200c 	ldr.w	r2, [fp, #12]
90018504:	42ba      	cmp	r2, r7
90018506:	dd22      	ble.n	9001854e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
90018508:	9a02      	ldr	r2, [sp, #8]
9001850a:	fb07 6602 	mla	r6, r7, r2, r6
9001850e:	9f03      	ldr	r7, [sp, #12]
90018510:	0872      	lsrs	r2, r6, #1
90018512:	07f6      	lsls	r6, r6, #31
90018514:	5cba      	ldrb	r2, [r7, r2]
90018516:	bf54      	ite	pl
90018518:	f002 020f 	andpl.w	r2, r2, #15
9001851c:	1112      	asrmi	r2, r2, #4
9001851e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
90018522:	b2d2      	uxtb	r2, r2
90018524:	2aff      	cmp	r2, #255	; 0xff
90018526:	d118      	bne.n	9001855a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
90018528:	f06f 0601 	mvn.w	r6, #1
9001852c:	f8d8 2000 	ldr.w	r2, [r8]
90018530:	fb06 f705 	mul.w	r7, r6, r5
90018534:	f2a6 76fe 	subw	r6, r6, #2046	; 0x7fe
90018538:	ea06 2c12 	and.w	ip, r6, r2, lsr #8
9001853c:	0956      	lsrs	r6, r2, #5
9001853e:	f3c2 02c4 	ubfx	r2, r2, #3, #5
90018542:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
90018546:	ea4c 0606 	orr.w	r6, ip, r6
9001854a:	4316      	orrs	r6, r2
9001854c:	53e6      	strh	r6, [r4, r7]
9001854e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
90018550:	3d01      	subs	r5, #1
90018552:	4410      	add	r0, r2
90018554:	9a14      	ldr	r2, [sp, #80]	; 0x50
90018556:	4411      	add	r1, r2
90018558:	e787      	b.n	9001846a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
9001855a:	2a00      	cmp	r2, #0
9001855c:	d0f7      	beq.n	9001854e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
9001855e:	f06f 0601 	mvn.w	r6, #1
90018562:	f8d8 c000 	ldr.w	ip, [r8]
90018566:	fa1f f982 	uxth.w	r9, r2
9001856a:	43d2      	mvns	r2, r2
9001856c:	436e      	muls	r6, r5
9001856e:	f3cc 2a07 	ubfx	sl, ip, #8, #8
90018572:	b2d2      	uxtb	r2, r2
90018574:	f834 e006 	ldrh.w	lr, [r4, r6]
90018578:	fb1a fa09 	smulbb	sl, sl, r9
9001857c:	9604      	str	r6, [sp, #16]
9001857e:	f3cc 4607 	ubfx	r6, ip, #16, #8
90018582:	ea4f 272e 	mov.w	r7, lr, asr #8
90018586:	fb16 f609 	smulbb	r6, r6, r9
9001858a:	fa5f fc8c 	uxtb.w	ip, ip
9001858e:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
90018592:	fb1c fc09 	smulbb	ip, ip, r9
90018596:	fb07 6702 	mla	r7, r7, r2, r6
9001859a:	ea4f 06ee 	mov.w	r6, lr, asr #3
9001859e:	ea4f 0ece 	mov.w	lr, lr, lsl #3
900185a2:	b2bf      	uxth	r7, r7
900185a4:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
900185a8:	fa5f fe8e 	uxtb.w	lr, lr
900185ac:	fb06 a602 	mla	r6, r6, r2, sl
900185b0:	fb0e cc02 	mla	ip, lr, r2, ip
900185b4:	1c7a      	adds	r2, r7, #1
900185b6:	b2b6      	uxth	r6, r6
900185b8:	fa1f fc8c 	uxth.w	ip, ip
900185bc:	eb02 2717 	add.w	r7, r2, r7, lsr #8
900185c0:	9a04      	ldr	r2, [sp, #16]
900185c2:	f10c 0a01 	add.w	sl, ip, #1
900185c6:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
900185ca:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
900185ce:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
900185d2:	ea4a 0707 	orr.w	r7, sl, r7
900185d6:	f106 0a01 	add.w	sl, r6, #1
900185da:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
900185de:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
900185e2:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
900185e6:	ea47 070a 	orr.w	r7, r7, sl
900185ea:	52a7      	strh	r7, [r4, r2]
900185ec:	e7af      	b.n	9001854e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
900185ee:	f04f 0e00 	mov.w	lr, #0
900185f2:	eba3 020e 	sub.w	r2, r3, lr
900185f6:	2a00      	cmp	r2, #0
900185f8:	f77f af3a 	ble.w	90018470 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
900185fc:	1402      	asrs	r2, r0, #16
900185fe:	9e02      	ldr	r6, [sp, #8]
90018600:	140d      	asrs	r5, r1, #16
90018602:	fb06 2505 	mla	r5, r6, r5, r2
90018606:	9e03      	ldr	r6, [sp, #12]
90018608:	086a      	lsrs	r2, r5, #1
9001860a:	07ed      	lsls	r5, r5, #31
9001860c:	5cb2      	ldrb	r2, [r6, r2]
9001860e:	bf54      	ite	pl
90018610:	f002 020f 	andpl.w	r2, r2, #15
90018614:	1112      	asrmi	r2, r2, #4
90018616:	eb02 1202 	add.w	r2, r2, r2, lsl #4
9001861a:	b2d2      	uxtb	r2, r2
9001861c:	2aff      	cmp	r2, #255	; 0xff
9001861e:	d115      	bne.n	9001864c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
90018620:	f8d8 5000 	ldr.w	r5, [r8]
90018624:	f6a2 02ff 	subw	r2, r2, #2303	; 0x8ff
90018628:	ea02 2615 	and.w	r6, r2, r5, lsr #8
9001862c:	096a      	lsrs	r2, r5, #5
9001862e:	f3c5 05c4 	ubfx	r5, r5, #3, #5
90018632:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
90018636:	4332      	orrs	r2, r6
90018638:	432a      	orrs	r2, r5
9001863a:	f824 201e 	strh.w	r2, [r4, lr, lsl #1]
9001863e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
90018640:	f10e 0e01 	add.w	lr, lr, #1
90018644:	4410      	add	r0, r2
90018646:	9a14      	ldr	r2, [sp, #80]	; 0x50
90018648:	4411      	add	r1, r2
9001864a:	e7d2      	b.n	900185f2 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
9001864c:	2a00      	cmp	r2, #0
9001864e:	d0f6      	beq.n	9001863e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
90018650:	f8d8 7000 	ldr.w	r7, [r8]
90018654:	fa1f f982 	uxth.w	r9, r2
90018658:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
9001865c:	43d2      	mvns	r2, r2
9001865e:	f3c7 4507 	ubfx	r5, r7, #16, #8
90018662:	f3c7 2a07 	ubfx	sl, r7, #8, #8
90018666:	ea4f 262c 	mov.w	r6, ip, asr #8
9001866a:	fb15 f509 	smulbb	r5, r5, r9
9001866e:	b2d2      	uxtb	r2, r2
90018670:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
90018674:	b2ff      	uxtb	r7, r7
90018676:	fb1a fa09 	smulbb	sl, sl, r9
9001867a:	fb06 5602 	mla	r6, r6, r2, r5
9001867e:	ea4f 05ec 	mov.w	r5, ip, asr #3
90018682:	fb17 f709 	smulbb	r7, r7, r9
90018686:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
9001868a:	b2b6      	uxth	r6, r6
9001868c:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
90018690:	fa5f fc8c 	uxtb.w	ip, ip
90018694:	fb05 a502 	mla	r5, r5, r2, sl
90018698:	fb0c 7702 	mla	r7, ip, r2, r7
9001869c:	1c72      	adds	r2, r6, #1
9001869e:	b2ad      	uxth	r5, r5
900186a0:	b2bf      	uxth	r7, r7
900186a2:	eb02 2616 	add.w	r6, r2, r6, lsr #8
900186a6:	f107 0a01 	add.w	sl, r7, #1
900186aa:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
900186ae:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
900186b2:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
900186b6:	ea4a 0606 	orr.w	r6, sl, r6
900186ba:	f105 0a01 	add.w	sl, r5, #1
900186be:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
900186c2:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
900186c6:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
900186ca:	ea46 060a 	orr.w	r6, r6, sl
900186ce:	f824 601e 	strh.w	r6, [r4, lr, lsl #1]
900186d2:	e7b4      	b.n	9001863e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
900186d4:	b007      	add	sp, #28
900186d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
900186da:	bf00      	nop
900186dc:	24021c1c 	.word	0x24021c1c

900186e0 <_ZN8touchgfx8LCD16bppD1Ev>:
900186e0:	4770      	bx	lr

900186e2 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW9D1Ev>:
900186e2:	4770      	bx	lr

900186e4 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLED1Ev>:
900186e4:	4770      	bx	lr

900186e6 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L4D1Ev>:
900186e6:	4770      	bx	lr

900186e8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
900186e8:	4770      	bx	lr

900186ea <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
900186ea:	4770      	bx	lr

900186ec <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
900186ec:	4770      	bx	lr

900186ee <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
900186ee:	4770      	bx	lr

900186f0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
900186f0:	4770      	bx	lr

900186f2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
900186f2:	4770      	bx	lr

900186f4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
900186f4:	4770      	bx	lr

900186f6 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
900186f6:	4770      	bx	lr

900186f8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
900186f8:	4770      	bx	lr

900186fa <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
900186fa:	4770      	bx	lr

900186fc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
900186fc:	4770      	bx	lr

900186fe <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD1Ev>:
900186fe:	4770      	bx	lr

90018700 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
90018700:	4770      	bx	lr

90018702 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
90018702:	4770      	bx	lr

90018704 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD1Ev>:
90018704:	4770      	bx	lr

90018706 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD1Ev>:
90018706:	4770      	bx	lr

90018708 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
90018708:	4770      	bx	lr

9001870a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
9001870a:	4770      	bx	lr

9001870c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
9001870c:	4770      	bx	lr

9001870e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
9001870e:	4770      	bx	lr

90018710 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
90018710:	4770      	bx	lr

90018712 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
90018712:	4770      	bx	lr

90018714 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
90018714:	4770      	bx	lr

90018716 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
90018716:	4770      	bx	lr

90018718 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
90018718:	4770      	bx	lr

9001871a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
9001871a:	4770      	bx	lr

9001871c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
9001871c:	4770      	bx	lr

9001871e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
9001871e:	4770      	bx	lr

90018720 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
90018720:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
90018724:	b088      	sub	sp, #32
90018726:	4606      	mov	r6, r0
90018728:	4688      	mov	r8, r1
9001872a:	4691      	mov	r9, r2
9001872c:	ac08      	add	r4, sp, #32
9001872e:	f824 3d0c 	strh.w	r3, [r4, #-12]!
90018732:	4620      	mov	r0, r4
90018734:	f7fd fc64 	bl	90016000 <_ZNK8touchgfx6Bitmap7getDataEv>
90018738:	6833      	ldr	r3, [r6, #0]
9001873a:	4605      	mov	r5, r0
9001873c:	4620      	mov	r0, r4
9001873e:	699f      	ldr	r7, [r3, #24]
90018740:	f7fd fb72 	bl	90015e28 <_ZNK8touchgfx6Bitmap8getWidthEv>
90018744:	4682      	mov	sl, r0
90018746:	4620      	mov	r0, r4
90018748:	f7fd fba2 	bl	90015e90 <_ZNK8touchgfx6Bitmap9getHeightEv>
9001874c:	9500      	str	r5, [sp, #0]
9001874e:	464b      	mov	r3, r9
90018750:	4642      	mov	r2, r8
90018752:	4631      	mov	r1, r6
90018754:	e9cd a001 	strd	sl, r0, [sp, #4]
90018758:	a806      	add	r0, sp, #24
9001875a:	47b8      	blx	r7
9001875c:	4628      	mov	r0, r5
9001875e:	b008      	add	sp, #32
90018760:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

90018764 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE>:
90018764:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
90018768:	2300      	movs	r3, #0
9001876a:	9300      	str	r3, [sp, #0]
9001876c:	4b3d      	ldr	r3, [pc, #244]	; (90018864 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x100>)
9001876e:	781b      	ldrb	r3, [r3, #0]
90018770:	2b00      	cmp	r3, #0
90018772:	d137      	bne.n	900187e4 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x80>
90018774:	4a3c      	ldr	r2, [pc, #240]	; (90018868 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
90018776:	f9b2 2000 	ldrsh.w	r2, [r2]
9001877a:	f8ad 2004 	strh.w	r2, [sp, #4]
9001877e:	2b00      	cmp	r3, #0
90018780:	d132      	bne.n	900187e8 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x84>
90018782:	4b3a      	ldr	r3, [pc, #232]	; (9001886c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
90018784:	f9b3 3000 	ldrsh.w	r3, [r3]
90018788:	ac02      	add	r4, sp, #8
9001878a:	6808      	ldr	r0, [r1, #0]
9001878c:	f8ad 3006 	strh.w	r3, [sp, #6]
90018790:	ab02      	add	r3, sp, #8
90018792:	6849      	ldr	r1, [r1, #4]
90018794:	4d36      	ldr	r5, [pc, #216]	; (90018870 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x10c>)
90018796:	c303      	stmia	r3!, {r0, r1}
90018798:	4669      	mov	r1, sp
9001879a:	4620      	mov	r0, r4
9001879c:	f7fa fd50 	bl	90013240 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
900187a0:	4668      	mov	r0, sp
900187a2:	f7fa fd25 	bl	900131f0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
900187a6:	f8bd 3008 	ldrh.w	r3, [sp, #8]
900187aa:	f8bd 2000 	ldrh.w	r2, [sp]
900187ae:	462f      	mov	r7, r5
900187b0:	6828      	ldr	r0, [r5, #0]
900187b2:	4413      	add	r3, r2
900187b4:	f8bd 2002 	ldrh.w	r2, [sp, #2]
900187b8:	f8ad 3008 	strh.w	r3, [sp, #8]
900187bc:	f8bd 300a 	ldrh.w	r3, [sp, #10]
900187c0:	4413      	add	r3, r2
900187c2:	f8ad 300a 	strh.w	r3, [sp, #10]
900187c6:	6803      	ldr	r3, [r0, #0]
900187c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
900187ca:	4798      	blx	r3
900187cc:	f010 0f01 	tst.w	r0, #1
900187d0:	d00c      	beq.n	900187ec <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x88>
900187d2:	6828      	ldr	r0, [r5, #0]
900187d4:	6803      	ldr	r3, [r0, #0]
900187d6:	e894 0006 	ldmia.w	r4, {r1, r2}
900187da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
900187dc:	4798      	blx	r3
900187de:	b004      	add	sp, #16
900187e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
900187e4:	4a21      	ldr	r2, [pc, #132]	; (9001886c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
900187e6:	e7c6      	b.n	90018776 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x12>
900187e8:	4b1f      	ldr	r3, [pc, #124]	; (90018868 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
900187ea:	e7cb      	b.n	90018784 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x20>
900187ec:	6838      	ldr	r0, [r7, #0]
900187ee:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
900187f2:	6803      	ldr	r3, [r0, #0]
900187f4:	f9bd 500e 	ldrsh.w	r5, [sp, #14]
900187f8:	ea4f 0848 	mov.w	r8, r8, lsl #1
900187fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
900187fe:	4798      	blx	r3
90018800:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
90018804:	f8bd 200a 	ldrh.w	r2, [sp, #10]
90018808:	f8bd 6004 	ldrh.w	r6, [sp, #4]
9001880c:	fb16 3602 	smlabb	r6, r6, r2, r3
90018810:	eb00 0646 	add.w	r6, r0, r6, lsl #1
90018814:	6838      	ldr	r0, [r7, #0]
90018816:	6803      	ldr	r3, [r0, #0]
90018818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9001881a:	4798      	blx	r3
9001881c:	4a12      	ldr	r2, [pc, #72]	; (90018868 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
9001881e:	f9bd 400a 	ldrsh.w	r4, [sp, #10]
90018822:	8813      	ldrh	r3, [r2, #0]
90018824:	4691      	mov	r9, r2
90018826:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
9001882a:	435d      	muls	r5, r3
9001882c:	fb03 1404 	mla	r4, r3, r4, r1
90018830:	eb00 0444 	add.w	r4, r0, r4, lsl #1
90018834:	eb04 0545 	add.w	r5, r4, r5, lsl #1
90018838:	6838      	ldr	r0, [r7, #0]
9001883a:	42ac      	cmp	r4, r5
9001883c:	6803      	ldr	r3, [r0, #0]
9001883e:	d20e      	bcs.n	9001885e <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xfa>
90018840:	f8d3 a034 	ldr.w	sl, [r3, #52]	; 0x34
90018844:	4632      	mov	r2, r6
90018846:	4643      	mov	r3, r8
90018848:	4621      	mov	r1, r4
9001884a:	47d0      	blx	sl
9001884c:	f8b9 3000 	ldrh.w	r3, [r9]
90018850:	eb04 0443 	add.w	r4, r4, r3, lsl #1
90018854:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
90018858:	eb06 0643 	add.w	r6, r6, r3, lsl #1
9001885c:	e7ec      	b.n	90018838 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xd4>
9001885e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90018860:	4798      	blx	r3
90018862:	e7bc      	b.n	900187de <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7a>
90018864:	24021c0c 	.word	0x24021c0c
90018868:	24021c0e 	.word	0x24021c0e
9001886c:	24021c10 	.word	0x24021c10
90018870:	24021c14 	.word	0x24021c14

90018874 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb>:
90018874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90018878:	b08b      	sub	sp, #44	; 0x2c
9001887a:	460f      	mov	r7, r1
9001887c:	4616      	mov	r6, r2
9001887e:	f89d b050 	ldrb.w	fp, [sp, #80]	; 0x50
90018882:	f89d 4054 	ldrb.w	r4, [sp, #84]	; 0x54
90018886:	f1bb 0f00 	cmp.w	fp, #0
9001888a:	d04a      	beq.n	90018922 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xae>
9001888c:	6810      	ldr	r0, [r2, #0]
9001888e:	ad06      	add	r5, sp, #24
90018890:	6851      	ldr	r1, [r2, #4]
90018892:	c503      	stmia	r5!, {r0, r1}
90018894:	6818      	ldr	r0, [r3, #0]
90018896:	ad08      	add	r5, sp, #32
90018898:	6859      	ldr	r1, [r3, #4]
9001889a:	c503      	stmia	r5!, {r0, r1}
9001889c:	a806      	add	r0, sp, #24
9001889e:	f7fa fca7 	bl	900131f0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
900188a2:	4631      	mov	r1, r6
900188a4:	a808      	add	r0, sp, #32
900188a6:	f7fa fccb 	bl	90013240 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
900188aa:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
900188ae:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
900188b2:	f8bd 601c 	ldrh.w	r6, [sp, #28]
900188b6:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
900188ba:	fb16 2103 	smlabb	r1, r6, r3, r2
900188be:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
900188c2:	eb07 0641 	add.w	r6, r7, r1, lsl #1
900188c6:	f8bd 1018 	ldrh.w	r1, [sp, #24]
900188ca:	4f5f      	ldr	r7, [pc, #380]	; (90018a48 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
900188cc:	440a      	add	r2, r1
900188ce:	6838      	ldr	r0, [r7, #0]
900188d0:	46b9      	mov	r9, r7
900188d2:	f8ad 2020 	strh.w	r2, [sp, #32]
900188d6:	f8bd 201a 	ldrh.w	r2, [sp, #26]
900188da:	4413      	add	r3, r2
900188dc:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
900188e0:	6803      	ldr	r3, [r0, #0]
900188e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
900188e4:	4798      	blx	r3
900188e6:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
900188ea:	d11d      	bne.n	90018928 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb4>
900188ec:	b9fc      	cbnz	r4, 9001892e <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
900188ee:	f010 0f01 	tst.w	r0, #1
900188f2:	d01c      	beq.n	9001892e <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
900188f4:	f8d9 0000 	ldr.w	r0, [r9]
900188f8:	2700      	movs	r7, #0
900188fa:	b2ad      	uxth	r5, r5
900188fc:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
90018900:	6801      	ldr	r1, [r0, #0]
90018902:	f8bd 2020 	ldrh.w	r2, [sp, #32]
90018906:	f8cd b00c 	str.w	fp, [sp, #12]
9001890a:	9501      	str	r5, [sp, #4]
9001890c:	e9cd 4704 	strd	r4, r7, [sp, #16]
90018910:	f8bd 401c 	ldrh.w	r4, [sp, #28]
90018914:	9402      	str	r4, [sp, #8]
90018916:	fa1f f488 	uxth.w	r4, r8
9001891a:	9400      	str	r4, [sp, #0]
9001891c:	6c4c      	ldr	r4, [r1, #68]	; 0x44
9001891e:	4631      	mov	r1, r6
90018920:	47a0      	blx	r4
90018922:	b00b      	add	sp, #44	; 0x2c
90018924:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90018928:	f010 0f04 	tst.w	r0, #4
9001892c:	e7e1      	b.n	900188f2 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x7e>
9001892e:	f8d9 0000 	ldr.w	r0, [r9]
90018932:	ea4f 0748 	mov.w	r7, r8, lsl #1
90018936:	6803      	ldr	r3, [r0, #0]
90018938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9001893a:	4798      	blx	r3
9001893c:	4b43      	ldr	r3, [pc, #268]	; (90018a4c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d8>)
9001893e:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	; 0x22
90018942:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
90018946:	881a      	ldrh	r2, [r3, #0]
90018948:	469a      	mov	sl, r3
9001894a:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
9001894e:	fb05 f502 	mul.w	r5, r5, r2
90018952:	fb02 1404 	mla	r4, r2, r4, r1
90018956:	eb00 0444 	add.w	r4, r0, r4, lsl #1
9001895a:	d059      	beq.n	90018a10 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x19c>
9001895c:	f1cb 09ff 	rsb	r9, fp, #255	; 0xff
90018960:	eb04 0545 	add.w	r5, r4, r5, lsl #1
90018964:	fa1f f28b 	uxth.w	r2, fp
90018968:	469e      	mov	lr, r3
9001896a:	fa1f f989 	uxth.w	r9, r9
9001896e:	42ac      	cmp	r4, r5
90018970:	d264      	bcs.n	90018a3c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
90018972:	eb04 0a07 	add.w	sl, r4, r7
90018976:	4554      	cmp	r4, sl
90018978:	d23d      	bcs.n	900189f6 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x182>
9001897a:	8821      	ldrh	r1, [r4, #0]
9001897c:	f836 3b02 	ldrh.w	r3, [r6], #2
90018980:	1208      	asrs	r0, r1, #8
90018982:	ea4f 2c23 	mov.w	ip, r3, asr #8
90018986:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
9001898a:	ea4f 0be1 	mov.w	fp, r1, asr #3
9001898e:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
90018992:	00c9      	lsls	r1, r1, #3
90018994:	fb10 f009 	smulbb	r0, r0, r9
90018998:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
9001899c:	b2c9      	uxtb	r1, r1
9001899e:	fb0c 0c02 	mla	ip, ip, r2, r0
900189a2:	10d8      	asrs	r0, r3, #3
900189a4:	fb1b fb09 	smulbb	fp, fp, r9
900189a8:	00db      	lsls	r3, r3, #3
900189aa:	fa1f fc8c 	uxth.w	ip, ip
900189ae:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
900189b2:	fb11 f109 	smulbb	r1, r1, r9
900189b6:	b2db      	uxtb	r3, r3
900189b8:	fb00 b002 	mla	r0, r0, r2, fp
900189bc:	f10c 0b01 	add.w	fp, ip, #1
900189c0:	fb03 1302 	mla	r3, r3, r2, r1
900189c4:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
900189c8:	b29b      	uxth	r3, r3
900189ca:	b280      	uxth	r0, r0
900189cc:	f40c 4b78 	and.w	fp, ip, #63488	; 0xf800
900189d0:	f103 0c01 	add.w	ip, r3, #1
900189d4:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
900189d8:	1c43      	adds	r3, r0, #1
900189da:	eb03 2010 	add.w	r0, r3, r0, lsr #8
900189de:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
900189e2:	0940      	lsrs	r0, r0, #5
900189e4:	ea4c 0c0b 	orr.w	ip, ip, fp
900189e8:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
900189ec:	ea4c 0c00 	orr.w	ip, ip, r0
900189f0:	f824 cb02 	strh.w	ip, [r4], #2
900189f4:	e7bf      	b.n	90018976 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x102>
900189f6:	f8be 3000 	ldrh.w	r3, [lr]
900189fa:	eba3 0308 	sub.w	r3, r3, r8
900189fe:	eb04 0443 	add.w	r4, r4, r3, lsl #1
90018a02:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
90018a06:	eba3 0308 	sub.w	r3, r3, r8
90018a0a:	eb06 0643 	add.w	r6, r6, r3, lsl #1
90018a0e:	e7ae      	b.n	9001896e <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfa>
90018a10:	eb04 0545 	add.w	r5, r4, r5, lsl #1
90018a14:	f8d9 0000 	ldr.w	r0, [r9]
90018a18:	42ac      	cmp	r4, r5
90018a1a:	6803      	ldr	r3, [r0, #0]
90018a1c:	d20e      	bcs.n	90018a3c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
90018a1e:	f8d3 8034 	ldr.w	r8, [r3, #52]	; 0x34
90018a22:	4632      	mov	r2, r6
90018a24:	463b      	mov	r3, r7
90018a26:	4621      	mov	r1, r4
90018a28:	47c0      	blx	r8
90018a2a:	f8ba 3000 	ldrh.w	r3, [sl]
90018a2e:	eb04 0443 	add.w	r4, r4, r3, lsl #1
90018a32:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
90018a36:	eb06 0643 	add.w	r6, r6, r3, lsl #1
90018a3a:	e7eb      	b.n	90018a14 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1a0>
90018a3c:	4b02      	ldr	r3, [pc, #8]	; (90018a48 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
90018a3e:	6818      	ldr	r0, [r3, #0]
90018a40:	6803      	ldr	r3, [r0, #0]
90018a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90018a44:	4798      	blx	r3
90018a46:	e76c      	b.n	90018922 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xae>
90018a48:	24021c14 	.word	0x24021c14
90018a4c:	24021c0e 	.word	0x24021c0e

90018a50 <_ZN8touchgfx8LCD16bppD0Ev>:
90018a50:	b510      	push	{r4, lr}
90018a52:	4604      	mov	r4, r0
90018a54:	2184      	movs	r1, #132	; 0x84
90018a56:	f00a fefe 	bl	90023856 <_ZdlPvj>
90018a5a:	4620      	mov	r0, r4
90018a5c:	bd10      	pop	{r4, pc}

90018a5e <_ZN8touchgfx8LCD16bpp17DecompressorL8_L4D0Ev>:
90018a5e:	b510      	push	{r4, lr}
90018a60:	4604      	mov	r4, r0
90018a62:	2104      	movs	r1, #4
90018a64:	f00a fef7 	bl	90023856 <_ZdlPvj>
90018a68:	4620      	mov	r0, r4
90018a6a:	bd10      	pop	{r4, pc}

90018a6c <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLED0Ev>:
90018a6c:	b510      	push	{r4, lr}
90018a6e:	4604      	mov	r4, r0
90018a70:	2104      	movs	r1, #4
90018a72:	f00a fef0 	bl	90023856 <_ZdlPvj>
90018a76:	4620      	mov	r0, r4
90018a78:	bd10      	pop	{r4, pc}

90018a7a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW9D0Ev>:
90018a7a:	b510      	push	{r4, lr}
90018a7c:	4604      	mov	r4, r0
90018a7e:	f640 0144 	movw	r1, #2116	; 0x844
90018a82:	f00a fee8 	bl	90023856 <_ZdlPvj>
90018a86:	4620      	mov	r0, r4
90018a88:	bd10      	pop	{r4, pc}

90018a8a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
90018a8a:	b510      	push	{r4, lr}
90018a8c:	4604      	mov	r4, r0
90018a8e:	2104      	movs	r1, #4
90018a90:	f00a fee1 	bl	90023856 <_ZdlPvj>
90018a94:	4620      	mov	r0, r4
90018a96:	bd10      	pop	{r4, pc}

90018a98 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
90018a98:	b510      	push	{r4, lr}
90018a9a:	4604      	mov	r4, r0
90018a9c:	2104      	movs	r1, #4
90018a9e:	f00a feda 	bl	90023856 <_ZdlPvj>
90018aa2:	4620      	mov	r0, r4
90018aa4:	bd10      	pop	{r4, pc}

90018aa6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
90018aa6:	b510      	push	{r4, lr}
90018aa8:	4604      	mov	r4, r0
90018aaa:	2104      	movs	r1, #4
90018aac:	f00a fed3 	bl	90023856 <_ZdlPvj>
90018ab0:	4620      	mov	r0, r4
90018ab2:	bd10      	pop	{r4, pc}

90018ab4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
90018ab4:	b510      	push	{r4, lr}
90018ab6:	4604      	mov	r4, r0
90018ab8:	2104      	movs	r1, #4
90018aba:	f00a fecc 	bl	90023856 <_ZdlPvj>
90018abe:	4620      	mov	r0, r4
90018ac0:	bd10      	pop	{r4, pc}

90018ac2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
90018ac2:	b510      	push	{r4, lr}
90018ac4:	4604      	mov	r4, r0
90018ac6:	2104      	movs	r1, #4
90018ac8:	f00a fec5 	bl	90023856 <_ZdlPvj>
90018acc:	4620      	mov	r0, r4
90018ace:	bd10      	pop	{r4, pc}

90018ad0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
90018ad0:	b510      	push	{r4, lr}
90018ad2:	4604      	mov	r4, r0
90018ad4:	2104      	movs	r1, #4
90018ad6:	f00a febe 	bl	90023856 <_ZdlPvj>
90018ada:	4620      	mov	r0, r4
90018adc:	bd10      	pop	{r4, pc}

90018ade <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
90018ade:	b510      	push	{r4, lr}
90018ae0:	4604      	mov	r4, r0
90018ae2:	2104      	movs	r1, #4
90018ae4:	f00a feb7 	bl	90023856 <_ZdlPvj>
90018ae8:	4620      	mov	r0, r4
90018aea:	bd10      	pop	{r4, pc}

90018aec <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
90018aec:	b510      	push	{r4, lr}
90018aee:	4604      	mov	r4, r0
90018af0:	2104      	movs	r1, #4
90018af2:	f00a feb0 	bl	90023856 <_ZdlPvj>
90018af6:	4620      	mov	r0, r4
90018af8:	bd10      	pop	{r4, pc}

90018afa <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
90018afa:	b510      	push	{r4, lr}
90018afc:	4604      	mov	r4, r0
90018afe:	2104      	movs	r1, #4
90018b00:	f00a fea9 	bl	90023856 <_ZdlPvj>
90018b04:	4620      	mov	r0, r4
90018b06:	bd10      	pop	{r4, pc}

90018b08 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
90018b08:	b510      	push	{r4, lr}
90018b0a:	4604      	mov	r4, r0
90018b0c:	2104      	movs	r1, #4
90018b0e:	f00a fea2 	bl	90023856 <_ZdlPvj>
90018b12:	4620      	mov	r0, r4
90018b14:	bd10      	pop	{r4, pc}

90018b16 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
90018b16:	b510      	push	{r4, lr}
90018b18:	4604      	mov	r4, r0
90018b1a:	2104      	movs	r1, #4
90018b1c:	f00a fe9b 	bl	90023856 <_ZdlPvj>
90018b20:	4620      	mov	r0, r4
90018b22:	bd10      	pop	{r4, pc}

90018b24 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
90018b24:	b510      	push	{r4, lr}
90018b26:	4604      	mov	r4, r0
90018b28:	2104      	movs	r1, #4
90018b2a:	f00a fe94 	bl	90023856 <_ZdlPvj>
90018b2e:	4620      	mov	r0, r4
90018b30:	bd10      	pop	{r4, pc}

90018b32 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
90018b32:	b510      	push	{r4, lr}
90018b34:	4604      	mov	r4, r0
90018b36:	2104      	movs	r1, #4
90018b38:	f00a fe8d 	bl	90023856 <_ZdlPvj>
90018b3c:	4620      	mov	r0, r4
90018b3e:	bd10      	pop	{r4, pc}

90018b40 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
90018b40:	b510      	push	{r4, lr}
90018b42:	4604      	mov	r4, r0
90018b44:	2104      	movs	r1, #4
90018b46:	f00a fe86 	bl	90023856 <_ZdlPvj>
90018b4a:	4620      	mov	r0, r4
90018b4c:	bd10      	pop	{r4, pc}

90018b4e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
90018b4e:	b510      	push	{r4, lr}
90018b50:	4604      	mov	r4, r0
90018b52:	2104      	movs	r1, #4
90018b54:	f00a fe7f 	bl	90023856 <_ZdlPvj>
90018b58:	4620      	mov	r0, r4
90018b5a:	bd10      	pop	{r4, pc}

90018b5c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD0Ev>:
90018b5c:	b510      	push	{r4, lr}
90018b5e:	4604      	mov	r4, r0
90018b60:	2104      	movs	r1, #4
90018b62:	f00a fe78 	bl	90023856 <_ZdlPvj>
90018b66:	4620      	mov	r0, r4
90018b68:	bd10      	pop	{r4, pc}

90018b6a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
90018b6a:	b510      	push	{r4, lr}
90018b6c:	4604      	mov	r4, r0
90018b6e:	2104      	movs	r1, #4
90018b70:	f00a fe71 	bl	90023856 <_ZdlPvj>
90018b74:	4620      	mov	r0, r4
90018b76:	bd10      	pop	{r4, pc}

90018b78 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
90018b78:	b510      	push	{r4, lr}
90018b7a:	4604      	mov	r4, r0
90018b7c:	2104      	movs	r1, #4
90018b7e:	f00a fe6a 	bl	90023856 <_ZdlPvj>
90018b82:	4620      	mov	r0, r4
90018b84:	bd10      	pop	{r4, pc}

90018b86 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD0Ev>:
90018b86:	b510      	push	{r4, lr}
90018b88:	4604      	mov	r4, r0
90018b8a:	2104      	movs	r1, #4
90018b8c:	f00a fe63 	bl	90023856 <_ZdlPvj>
90018b90:	4620      	mov	r0, r4
90018b92:	bd10      	pop	{r4, pc}

90018b94 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD0Ev>:
90018b94:	b510      	push	{r4, lr}
90018b96:	4604      	mov	r4, r0
90018b98:	2104      	movs	r1, #4
90018b9a:	f00a fe5c 	bl	90023856 <_ZdlPvj>
90018b9e:	4620      	mov	r0, r4
90018ba0:	bd10      	pop	{r4, pc}

90018ba2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
90018ba2:	b510      	push	{r4, lr}
90018ba4:	4604      	mov	r4, r0
90018ba6:	2104      	movs	r1, #4
90018ba8:	f00a fe55 	bl	90023856 <_ZdlPvj>
90018bac:	4620      	mov	r0, r4
90018bae:	bd10      	pop	{r4, pc}

90018bb0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
90018bb0:	b510      	push	{r4, lr}
90018bb2:	4604      	mov	r4, r0
90018bb4:	2104      	movs	r1, #4
90018bb6:	f00a fe4e 	bl	90023856 <_ZdlPvj>
90018bba:	4620      	mov	r0, r4
90018bbc:	bd10      	pop	{r4, pc}

90018bbe <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
90018bbe:	b510      	push	{r4, lr}
90018bc0:	4604      	mov	r4, r0
90018bc2:	2104      	movs	r1, #4
90018bc4:	f00a fe47 	bl	90023856 <_ZdlPvj>
90018bc8:	4620      	mov	r0, r4
90018bca:	bd10      	pop	{r4, pc}

90018bcc <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
90018bcc:	b510      	push	{r4, lr}
90018bce:	4604      	mov	r4, r0
90018bd0:	2104      	movs	r1, #4
90018bd2:	f00a fe40 	bl	90023856 <_ZdlPvj>
90018bd6:	4620      	mov	r0, r4
90018bd8:	bd10      	pop	{r4, pc}

90018bda <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
90018bda:	b510      	push	{r4, lr}
90018bdc:	4604      	mov	r4, r0
90018bde:	2104      	movs	r1, #4
90018be0:	f00a fe39 	bl	90023856 <_ZdlPvj>
90018be4:	4620      	mov	r0, r4
90018be6:	bd10      	pop	{r4, pc}

90018be8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
90018be8:	b510      	push	{r4, lr}
90018bea:	4604      	mov	r4, r0
90018bec:	2104      	movs	r1, #4
90018bee:	f00a fe32 	bl	90023856 <_ZdlPvj>
90018bf2:	4620      	mov	r0, r4
90018bf4:	bd10      	pop	{r4, pc}

90018bf6 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
90018bf6:	b510      	push	{r4, lr}
90018bf8:	4604      	mov	r4, r0
90018bfa:	2104      	movs	r1, #4
90018bfc:	f00a fe2b 	bl	90023856 <_ZdlPvj>
90018c00:	4620      	mov	r0, r4
90018c02:	bd10      	pop	{r4, pc}

90018c04 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
90018c04:	b510      	push	{r4, lr}
90018c06:	4604      	mov	r4, r0
90018c08:	2104      	movs	r1, #4
90018c0a:	f00a fe24 	bl	90023856 <_ZdlPvj>
90018c0e:	4620      	mov	r0, r4
90018c10:	bd10      	pop	{r4, pc}
	...

90018c14 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h>:
90018c14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90018c18:	b08f      	sub	sp, #60	; 0x3c
90018c1a:	461c      	mov	r4, r3
90018c1c:	9205      	str	r2, [sp, #20]
90018c1e:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
90018c22:	9100      	str	r1, [sp, #0]
90018c24:	9b18      	ldr	r3, [sp, #96]	; 0x60
90018c26:	9201      	str	r2, [sp, #4]
90018c28:	2a00      	cmp	r2, #0
90018c2a:	f000 8116 	beq.w	90018e5a <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x246>
90018c2e:	6820      	ldr	r0, [r4, #0]
90018c30:	aa0a      	add	r2, sp, #40	; 0x28
90018c32:	6861      	ldr	r1, [r4, #4]
90018c34:	c203      	stmia	r2!, {r0, r1}
90018c36:	6818      	ldr	r0, [r3, #0]
90018c38:	aa0c      	add	r2, sp, #48	; 0x30
90018c3a:	6859      	ldr	r1, [r3, #4]
90018c3c:	c203      	stmia	r2!, {r0, r1}
90018c3e:	a80a      	add	r0, sp, #40	; 0x28
90018c40:	f7fa fad6 	bl	900131f0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
90018c44:	4621      	mov	r1, r4
90018c46:	a80c      	add	r0, sp, #48	; 0x30
90018c48:	f7fa fafa 	bl	90013240 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
90018c4c:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	; 0x2c
90018c50:	f9bd 502e 	ldrsh.w	r5, [sp, #46]	; 0x2e
90018c54:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
90018c58:	f8bd 0030 	ldrh.w	r0, [sp, #48]	; 0x30
90018c5c:	bfdb      	ittet	le
90018c5e:	b2b3      	uxthle	r3, r6
90018c60:	f44f 6280 	movle.w	r2, #1024	; 0x400
90018c64:	2301      	movgt	r3, #1
90018c66:	fb92 f3f3 	sdivle	r3, r2, r3
90018c6a:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
90018c6e:	441d      	add	r5, r3
90018c70:	fb92 f1f3 	sdiv	r1, r2, r3
90018c74:	fa1f fc81 	uxth.w	ip, r1
90018c78:	3d01      	subs	r5, #1
90018c7a:	fb0c 2413 	mls	r4, ip, r3, r2
90018c7e:	4661      	mov	r1, ip
90018c80:	fb14 f406 	smulbb	r4, r4, r6
90018c84:	4404      	add	r4, r0
90018c86:	fb95 f5f3 	sdiv	r5, r5, r3
90018c8a:	b2a4      	uxth	r4, r4
90018c8c:	b131      	cbz	r1, 90018c9c <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x88>
90018c8e:	9b05      	ldr	r3, [sp, #20]
90018c90:	9900      	ldr	r1, [sp, #0]
90018c92:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
90018c96:	ba1b      	rev	r3, r3
90018c98:	4419      	add	r1, r3
90018c9a:	9100      	str	r1, [sp, #0]
90018c9c:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
90018ca0:	b2ad      	uxth	r5, r5
90018ca2:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	; 0x34
90018ca6:	4418      	add	r0, r3
90018ca8:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
90018cac:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	; 0x36
90018cb0:	00ad      	lsls	r5, r5, #2
90018cb2:	441a      	add	r2, r3
90018cb4:	4b6a      	ldr	r3, [pc, #424]	; (90018e60 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x24c>)
90018cb6:	f8ad 0030 	strh.w	r0, [sp, #48]	; 0x30
90018cba:	6818      	ldr	r0, [r3, #0]
90018cbc:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
90018cc0:	6803      	ldr	r3, [r0, #0]
90018cc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90018cc4:	4798      	blx	r3
90018cc6:	4967      	ldr	r1, [pc, #412]	; (90018e64 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x250>)
90018cc8:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
90018ccc:	2c00      	cmp	r4, #0
90018cce:	880b      	ldrh	r3, [r1, #0]
90018cd0:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
90018cd4:	bf0c      	ite	eq
90018cd6:	46c6      	moveq	lr, r8
90018cd8:	f04f 0e00 	movne.w	lr, #0
90018cdc:	9109      	str	r1, [sp, #36]	; 0x24
90018cde:	fb03 c202 	mla	r2, r3, r2, ip
90018ce2:	f8bd 1004 	ldrh.w	r1, [sp, #4]
90018ce6:	4373      	muls	r3, r6
90018ce8:	fa1f fe8e 	uxth.w	lr, lr
90018cec:	eb00 0042 	add.w	r0, r0, r2, lsl #1
90018cf0:	9103      	str	r1, [sp, #12]
90018cf2:	eb00 0343 	add.w	r3, r0, r3, lsl #1
90018cf6:	9306      	str	r3, [sp, #24]
90018cf8:	1d2b      	adds	r3, r5, #4
90018cfa:	9307      	str	r3, [sp, #28]
90018cfc:	9b01      	ldr	r3, [sp, #4]
90018cfe:	f1c3 02ff 	rsb	r2, r3, #255	; 0xff
90018d02:	2300      	movs	r3, #0
90018d04:	b292      	uxth	r2, r2
90018d06:	9302      	str	r3, [sp, #8]
90018d08:	9204      	str	r2, [sp, #16]
90018d0a:	9a06      	ldr	r2, [sp, #24]
90018d0c:	4282      	cmp	r2, r0
90018d0e:	f240 809f 	bls.w	90018e50 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x23c>
90018d12:	b963      	cbnz	r3, 90018d2e <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x11a>
90018d14:	9b00      	ldr	r3, [sp, #0]
90018d16:	781a      	ldrb	r2, [r3, #0]
90018d18:	0993      	lsrs	r3, r2, #6
90018d1a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
90018d1e:	9202      	str	r2, [sp, #8]
90018d20:	1e5a      	subs	r2, r3, #1
90018d22:	2a02      	cmp	r2, #2
90018d24:	d815      	bhi.n	90018d52 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x13e>
90018d26:	9a00      	ldr	r2, [sp, #0]
90018d28:	b29b      	uxth	r3, r3
90018d2a:	3201      	adds	r2, #1
90018d2c:	9200      	str	r2, [sp, #0]
90018d2e:	b1b4      	cbz	r4, 90018d5e <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x14a>
90018d30:	429c      	cmp	r4, r3
90018d32:	bf91      	iteee	ls
90018d34:	1b1c      	subls	r4, r3, r4
90018d36:	1ae4      	subhi	r4, r4, r3
90018d38:	4671      	movhi	r1, lr
90018d3a:	f04f 0a00 	movhi.w	sl, #0
90018d3e:	bf9b      	ittet	ls
90018d40:	fa1f fa84 	uxthls.w	sl, r4
90018d44:	2400      	movls	r4, #0
90018d46:	b2a4      	uxthhi	r4, r4
90018d48:	fa1f f188 	uxthls.w	r1, r8
90018d4c:	4653      	mov	r3, sl
90018d4e:	468e      	mov	lr, r1
90018d50:	e7db      	b.n	90018d0a <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0xf6>
90018d52:	9a00      	ldr	r2, [sp, #0]
90018d54:	9b00      	ldr	r3, [sp, #0]
90018d56:	3202      	adds	r2, #2
90018d58:	785b      	ldrb	r3, [r3, #1]
90018d5a:	9200      	str	r2, [sp, #0]
90018d5c:	e7e7      	b.n	90018d2e <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x11a>
90018d5e:	2202      	movs	r2, #2
90018d60:	9907      	ldr	r1, [sp, #28]
90018d62:	4573      	cmp	r3, lr
90018d64:	4615      	mov	r5, r2
90018d66:	9a02      	ldr	r2, [sp, #8]
90018d68:	bf24      	itt	cs
90018d6a:	eba3 0a0e 	subcs.w	sl, r3, lr
90018d6e:	46f1      	movcs	r9, lr
90018d70:	fb15 1202 	smlabb	r2, r5, r2, r1
90018d74:	9905      	ldr	r1, [sp, #20]
90018d76:	bf34      	ite	cc
90018d78:	4699      	movcc	r9, r3
90018d7a:	fa1f fa8a 	uxthcs.w	sl, sl
90018d7e:	f831 c002 	ldrh.w	ip, [r1, r2]
90018d82:	bf38      	it	cc
90018d84:	ebae 0103 	subcc.w	r1, lr, r3
90018d88:	9a01      	ldr	r2, [sp, #4]
90018d8a:	bf2e      	itee	cs
90018d8c:	4621      	movcs	r1, r4
90018d8e:	b289      	uxthcc	r1, r1
90018d90:	46a2      	movcc	sl, r4
90018d92:	2aff      	cmp	r2, #255	; 0xff
90018d94:	ea4f 0949 	mov.w	r9, r9, lsl #1
90018d98:	d105      	bne.n	90018da6 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x192>
90018d9a:	4481      	add	r9, r0
90018d9c:	4581      	cmp	r9, r0
90018d9e:	d045      	beq.n	90018e2c <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x218>
90018da0:	f820 cb02 	strh.w	ip, [r0], #2
90018da4:	e7fa      	b.n	90018d9c <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x188>
90018da6:	ea4f 222c 	mov.w	r2, ip, asr #8
90018daa:	9d03      	ldr	r5, [sp, #12]
90018dac:	ea4f 0bec 	mov.w	fp, ip, asr #3
90018db0:	4481      	add	r9, r0
90018db2:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
90018db6:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
90018dba:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
90018dbe:	fa5f fc8c 	uxtb.w	ip, ip
90018dc2:	436a      	muls	r2, r5
90018dc4:	fb0b fb05 	mul.w	fp, fp, r5
90018dc8:	fb0c fc05 	mul.w	ip, ip, r5
90018dcc:	9208      	str	r2, [sp, #32]
90018dce:	4581      	cmp	r9, r0
90018dd0:	d02c      	beq.n	90018e2c <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x218>
90018dd2:	8802      	ldrh	r2, [r0, #0]
90018dd4:	9d04      	ldr	r5, [sp, #16]
90018dd6:	1216      	asrs	r6, r2, #8
90018dd8:	9f04      	ldr	r7, [sp, #16]
90018dda:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
90018dde:	fb16 f605 	smulbb	r6, r6, r5
90018de2:	9d08      	ldr	r5, [sp, #32]
90018de4:	442e      	add	r6, r5
90018de6:	10d5      	asrs	r5, r2, #3
90018de8:	00d2      	lsls	r2, r2, #3
90018dea:	b2b6      	uxth	r6, r6
90018dec:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
90018df0:	b2d2      	uxtb	r2, r2
90018df2:	fb15 f507 	smulbb	r5, r5, r7
90018df6:	fb12 f207 	smulbb	r2, r2, r7
90018dfa:	1c77      	adds	r7, r6, #1
90018dfc:	445d      	add	r5, fp
90018dfe:	4462      	add	r2, ip
90018e00:	eb07 2616 	add.w	r6, r7, r6, lsr #8
90018e04:	b2ad      	uxth	r5, r5
90018e06:	b292      	uxth	r2, r2
90018e08:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
90018e0c:	1c57      	adds	r7, r2, #1
90018e0e:	eb07 2212 	add.w	r2, r7, r2, lsr #8
90018e12:	f3c2 22c4 	ubfx	r2, r2, #11, #5
90018e16:	4316      	orrs	r6, r2
90018e18:	1c6a      	adds	r2, r5, #1
90018e1a:	eb02 2515 	add.w	r5, r2, r5, lsr #8
90018e1e:	096d      	lsrs	r5, r5, #5
90018e20:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
90018e24:	432e      	orrs	r6, r5
90018e26:	f820 6b02 	strh.w	r6, [r0], #2
90018e2a:	e7d0      	b.n	90018dce <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1ba>
90018e2c:	4573      	cmp	r3, lr
90018e2e:	d38d      	bcc.n	90018d4c <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x138>
90018e30:	fa1f f188 	uxth.w	r1, r8
90018e34:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
90018e38:	9b09      	ldr	r3, [sp, #36]	; 0x24
90018e3a:	1a64      	subs	r4, r4, r1
90018e3c:	881b      	ldrh	r3, [r3, #0]
90018e3e:	b2a4      	uxth	r4, r4
90018e40:	eba3 0308 	sub.w	r3, r3, r8
90018e44:	2c00      	cmp	r4, #0
90018e46:	eb00 0043 	add.w	r0, r0, r3, lsl #1
90018e4a:	bf18      	it	ne
90018e4c:	2100      	movne	r1, #0
90018e4e:	e77d      	b.n	90018d4c <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x138>
90018e50:	4b03      	ldr	r3, [pc, #12]	; (90018e60 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x24c>)
90018e52:	6818      	ldr	r0, [r3, #0]
90018e54:	6803      	ldr	r3, [r0, #0]
90018e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90018e58:	4798      	blx	r3
90018e5a:	b00f      	add	sp, #60	; 0x3c
90018e5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90018e60:	24021c14 	.word	0x24021c14
90018e64:	24021c0e 	.word	0x24021c0e

90018e68 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h>:
90018e68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90018e6c:	b09f      	sub	sp, #124	; 0x7c
90018e6e:	461d      	mov	r5, r3
90018e70:	4604      	mov	r4, r0
90018e72:	9b28      	ldr	r3, [sp, #160]	; 0xa0
90018e74:	e9cd 1213 	strd	r1, r2, [sp, #76]	; 0x4c
90018e78:	f89d 20a4 	ldrb.w	r2, [sp, #164]	; 0xa4
90018e7c:	9209      	str	r2, [sp, #36]	; 0x24
90018e7e:	2a00      	cmp	r2, #0
90018e80:	f000 81ed 	beq.w	9001925e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x3f6>
90018e84:	6828      	ldr	r0, [r5, #0]
90018e86:	aa1a      	add	r2, sp, #104	; 0x68
90018e88:	6869      	ldr	r1, [r5, #4]
90018e8a:	c203      	stmia	r2!, {r0, r1}
90018e8c:	6818      	ldr	r0, [r3, #0]
90018e8e:	aa1c      	add	r2, sp, #112	; 0x70
90018e90:	6859      	ldr	r1, [r3, #4]
90018e92:	c203      	stmia	r2!, {r0, r1}
90018e94:	a81a      	add	r0, sp, #104	; 0x68
90018e96:	f7fa f9ab 	bl	900131f0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
90018e9a:	4629      	mov	r1, r5
90018e9c:	a81c      	add	r0, sp, #112	; 0x70
90018e9e:	f7fa f9cf 	bl	90013240 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
90018ea2:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	; 0x6c
90018ea6:	f9bd 806e 	ldrsh.w	r8, [sp, #110]	; 0x6e
90018eaa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
90018eae:	f9bd 6076 	ldrsh.w	r6, [sp, #118]	; 0x76
90018eb2:	bfdb      	ittet	le
90018eb4:	b29a      	uxthle	r2, r3
90018eb6:	f44f 6180 	movle.w	r1, #1024	; 0x400
90018eba:	2201      	movgt	r2, #1
90018ebc:	fb91 f2f2 	sdivle	r2, r1, r2
90018ec0:	9202      	str	r2, [sp, #8]
90018ec2:	9802      	ldr	r0, [sp, #8]
90018ec4:	f9bd 2072 	ldrsh.w	r2, [sp, #114]	; 0x72
90018ec8:	9902      	ldr	r1, [sp, #8]
90018eca:	fb92 f0f0 	sdiv	r0, r2, r0
90018ece:	b280      	uxth	r0, r0
90018ed0:	4488      	add	r8, r1
90018ed2:	9010      	str	r0, [sp, #64]	; 0x40
90018ed4:	f108 38ff 	add.w	r8, r8, #4294967295
90018ed8:	9802      	ldr	r0, [sp, #8]
90018eda:	9d10      	ldr	r5, [sp, #64]	; 0x40
90018edc:	fb05 2510 	mls	r5, r5, r0, r2
90018ee0:	fb98 f8f1 	sdiv	r8, r8, r1
90018ee4:	fb15 f503 	smulbb	r5, r5, r3
90018ee8:	f8bd 1070 	ldrh.w	r1, [sp, #112]	; 0x70
90018eec:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
90018ef0:	f108 0801 	add.w	r8, r8, #1
90018ef4:	440d      	add	r5, r1
90018ef6:	4419      	add	r1, r3
90018ef8:	f8bd 306a 	ldrh.w	r3, [sp, #106]	; 0x6a
90018efc:	fa1f f888 	uxth.w	r8, r8
90018f00:	441a      	add	r2, r3
90018f02:	f9bd 3074 	ldrsh.w	r3, [sp, #116]	; 0x74
90018f06:	f8ad 1070 	strh.w	r1, [sp, #112]	; 0x70
90018f0a:	b2ad      	uxth	r5, r5
90018f0c:	9304      	str	r3, [sp, #16]
90018f0e:	4b94      	ldr	r3, [pc, #592]	; (90019160 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x2f8>)
90018f10:	f8ad 2072 	strh.w	r2, [sp, #114]	; 0x72
90018f14:	6818      	ldr	r0, [r3, #0]
90018f16:	6803      	ldr	r3, [r0, #0]
90018f18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90018f1a:	4798      	blx	r3
90018f1c:	4b91      	ldr	r3, [pc, #580]	; (90019164 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x2fc>)
90018f1e:	f9bd 1072 	ldrsh.w	r1, [sp, #114]	; 0x72
90018f22:	2d00      	cmp	r5, #0
90018f24:	881a      	ldrh	r2, [r3, #0]
90018f26:	f9bd 7070 	ldrsh.w	r7, [sp, #112]	; 0x70
90018f2a:	fb02 f606 	mul.w	r6, r2, r6
90018f2e:	fb02 7101 	mla	r1, r2, r1, r7
90018f32:	9318      	str	r3, [sp, #96]	; 0x60
90018f34:	eb00 0041 	add.w	r0, r0, r1, lsl #1
90018f38:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
90018f3c:	f04f 0100 	mov.w	r1, #0
90018f40:	eb00 0246 	add.w	r2, r0, r6, lsl #1
90018f44:	930f      	str	r3, [sp, #60]	; 0x3c
90018f46:	4b88      	ldr	r3, [pc, #544]	; (90019168 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x300>)
90018f48:	920a      	str	r2, [sp, #40]	; 0x28
90018f4a:	9a14      	ldr	r2, [sp, #80]	; 0x50
90018f4c:	eba3 0304 	sub.w	r3, r3, r4
90018f50:	910d      	str	r1, [sp, #52]	; 0x34
90018f52:	eb02 0888 	add.w	r8, r2, r8, lsl #2
90018f56:	9319      	str	r3, [sp, #100]	; 0x64
90018f58:	f108 0204 	add.w	r2, r8, #4
90018f5c:	9211      	str	r2, [sp, #68]	; 0x44
90018f5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
90018f60:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
90018f64:	9215      	str	r2, [sp, #84]	; 0x54
90018f66:	9a04      	ldr	r2, [sp, #16]
90018f68:	bf18      	it	ne
90018f6a:	2200      	movne	r2, #0
90018f6c:	b292      	uxth	r2, r2
90018f6e:	9910      	ldr	r1, [sp, #64]	; 0x40
90018f70:	9b0d      	ldr	r3, [sp, #52]	; 0x34
90018f72:	fa11 f383 	uxtah	r3, r1, r3
90018f76:	9914      	ldr	r1, [sp, #80]	; 0x50
90018f78:	eb01 0383 	add.w	r3, r1, r3, lsl #2
90018f7c:	3304      	adds	r3, #4
90018f7e:	9306      	str	r3, [sp, #24]
90018f80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
90018f82:	4283      	cmp	r3, r0
90018f84:	f240 8166 	bls.w	90019254 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x3ec>
90018f88:	f8bd 306c 	ldrh.w	r3, [sp, #108]	; 0x6c
90018f8c:	f04f 0a01 	mov.w	sl, #1
90018f90:	9902      	ldr	r1, [sp, #8]
90018f92:	9e06      	ldr	r6, [sp, #24]
90018f94:	46d3      	mov	fp, sl
90018f96:	4657      	mov	r7, sl
90018f98:	7836      	ldrb	r6, [r6, #0]
90018f9a:	fbb5 f3f3 	udiv	r3, r5, r3
90018f9e:	1acb      	subs	r3, r1, r3
90018fa0:	9612      	str	r6, [sp, #72]	; 0x48
90018fa2:	3601      	adds	r6, #1
90018fa4:	b29b      	uxth	r3, r3
90018fa6:	9605      	str	r6, [sp, #20]
90018fa8:	9316      	str	r3, [sp, #88]	; 0x58
90018faa:	9b06      	ldr	r3, [sp, #24]
90018fac:	7859      	ldrb	r1, [r3, #1]
90018fae:	789b      	ldrb	r3, [r3, #2]
90018fb0:	021b      	lsls	r3, r3, #8
90018fb2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
90018fb6:	9906      	ldr	r1, [sp, #24]
90018fb8:	78c9      	ldrb	r1, [r1, #3]
90018fba:	430b      	orrs	r3, r1
90018fbc:	9913      	ldr	r1, [sp, #76]	; 0x4c
90018fbe:	4419      	add	r1, r3
90018fc0:	1c4e      	adds	r6, r1, #1
90018fc2:	7849      	ldrb	r1, [r1, #1]
90018fc4:	9603      	str	r6, [sp, #12]
90018fc6:	0209      	lsls	r1, r1, #8
90018fc8:	9e13      	ldr	r6, [sp, #76]	; 0x4c
90018fca:	f401 71ff 	and.w	r1, r1, #510	; 0x1fe
90018fce:	5cf3      	ldrb	r3, [r6, r3]
90018fd0:	4319      	orrs	r1, r3
90018fd2:	b28b      	uxth	r3, r1
90018fd4:	f884 1804 	strb.w	r1, [r4, #2052]	; 0x804
90018fd8:	930c      	str	r3, [sp, #48]	; 0x30
90018fda:	2300      	movs	r3, #0
90018fdc:	9307      	str	r3, [sp, #28]
90018fde:	469c      	mov	ip, r3
90018fe0:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
90018fe4:	930e      	str	r3, [sp, #56]	; 0x38
90018fe6:	2d00      	cmp	r5, #0
90018fe8:	d07e      	beq.n	900190e8 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x280>
90018fea:	42af      	cmp	r7, r5
90018fec:	d26e      	bcs.n	900190cc <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x264>
90018fee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
90018ff0:	1bed      	subs	r5, r5, r7
90018ff2:	9201      	str	r2, [sp, #4]
90018ff4:	4283      	cmp	r3, r0
90018ff6:	b2ad      	uxth	r5, r5
90018ff8:	d802      	bhi.n	90019000 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x198>
90018ffa:	e073      	b.n	900190e4 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x27c>
90018ffc:	2b00      	cmp	r3, #0
90018ffe:	d15f      	bne.n	900190c0 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x258>
90019000:	9b03      	ldr	r3, [sp, #12]
90019002:	f1cb 0207 	rsb	r2, fp, #7
90019006:	785b      	ldrb	r3, [r3, #1]
90019008:	4093      	lsls	r3, r2
9001900a:	005b      	lsls	r3, r3, #1
9001900c:	f403 72ff 	and.w	r2, r3, #510	; 0x1fe
90019010:	9b03      	ldr	r3, [sp, #12]
90019012:	781b      	ldrb	r3, [r3, #0]
90019014:	fa43 f30b 	asr.w	r3, r3, fp
90019018:	b2db      	uxtb	r3, r3
9001901a:	4313      	orrs	r3, r2
9001901c:	f10b 0201 	add.w	r2, fp, #1
90019020:	fa5f fb82 	uxtb.w	fp, r2
90019024:	9a03      	ldr	r2, [sp, #12]
90019026:	b29f      	uxth	r7, r3
90019028:	f1bb 0f08 	cmp.w	fp, #8
9001902c:	bf13      	iteet	ne
9001902e:	3201      	addne	r2, #1
90019030:	3202      	addeq	r2, #2
90019032:	f04f 0b00 	moveq.w	fp, #0
90019036:	9203      	strne	r2, [sp, #12]
90019038:	bf08      	it	eq
9001903a:	9203      	streq	r2, [sp, #12]
9001903c:	9a12      	ldr	r2, [sp, #72]	; 0x48
9001903e:	42ba      	cmp	r2, r7
90019040:	d309      	bcc.n	90019056 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1ee>
90019042:	f884 3804 	strb.w	r3, [r4, #2052]	; 0x804
90019046:	2301      	movs	r3, #1
90019048:	9a05      	ldr	r2, [sp, #20]
9001904a:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
9001904e:	d30e      	bcc.n	9001906e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x206>
90019050:	469a      	mov	sl, r3
90019052:	2600      	movs	r6, #0
90019054:	e035      	b.n	900190c2 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x25a>
90019056:	9b05      	ldr	r3, [sp, #20]
90019058:	429f      	cmp	r7, r3
9001905a:	d318      	bcc.n	9001908e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x226>
9001905c:	eb04 030a 	add.w	r3, r4, sl
90019060:	f894 2804 	ldrb.w	r2, [r4, #2052]	; 0x804
90019064:	f883 2804 	strb.w	r2, [r3, #2052]	; 0x804
90019068:	f10a 0301 	add.w	r3, sl, #1
9001906c:	b29b      	uxth	r3, r3
9001906e:	9a05      	ldr	r2, [sp, #20]
90019070:	f894 6804 	ldrb.w	r6, [r4, #2052]	; 0x804
90019074:	eb04 0282 	add.w	r2, r4, r2, lsl #2
90019078:	990c      	ldr	r1, [sp, #48]	; 0x30
9001907a:	7116      	strb	r6, [r2, #4]
9001907c:	f10a 0601 	add.w	r6, sl, #1
90019080:	80d1      	strh	r1, [r2, #6]
90019082:	7156      	strb	r6, [r2, #5]
90019084:	9a05      	ldr	r2, [sp, #20]
90019086:	3201      	adds	r2, #1
90019088:	b292      	uxth	r2, r2
9001908a:	9205      	str	r2, [sp, #20]
9001908c:	e7e0      	b.n	90019050 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1e8>
9001908e:	eb04 0387 	add.w	r3, r4, r7, lsl #2
90019092:	463a      	mov	r2, r7
90019094:	795b      	ldrb	r3, [r3, #5]
90019096:	f603 0604 	addw	r6, r3, #2052	; 0x804
9001909a:	4426      	add	r6, r4
9001909c:	9919      	ldr	r1, [sp, #100]	; 0x64
9001909e:	eb01 0c06 	add.w	ip, r1, r6
900190a2:	f1bc 0f00 	cmp.w	ip, #0
900190a6:	dd07      	ble.n	900190b8 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x250>
900190a8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
900190ac:	f892 c004 	ldrb.w	ip, [r2, #4]
900190b0:	f806 cd01 	strb.w	ip, [r6, #-1]!
900190b4:	88d2      	ldrh	r2, [r2, #6]
900190b6:	e7f1      	b.n	9001909c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x234>
900190b8:	f884 2804 	strb.w	r2, [r4, #2052]	; 0x804
900190bc:	b29b      	uxth	r3, r3
900190be:	e7c3      	b.n	90019048 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1e0>
900190c0:	9f0c      	ldr	r7, [sp, #48]	; 0x30
900190c2:	970c      	str	r7, [sp, #48]	; 0x30
900190c4:	46b4      	mov	ip, r6
900190c6:	9a01      	ldr	r2, [sp, #4]
900190c8:	461f      	mov	r7, r3
900190ca:	e78c      	b.n	90018fe6 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x17e>
900190cc:	1b7b      	subs	r3, r7, r5
900190ce:	eb0c 0605 	add.w	r6, ip, r5
900190d2:	f8bd 2010 	ldrh.w	r2, [sp, #16]
900190d6:	b29b      	uxth	r3, r3
900190d8:	b2b6      	uxth	r6, r6
900190da:	9201      	str	r2, [sp, #4]
900190dc:	2500      	movs	r5, #0
900190de:	9a0a      	ldr	r2, [sp, #40]	; 0x28
900190e0:	4282      	cmp	r2, r0
900190e2:	d88b      	bhi.n	90018ffc <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x194>
900190e4:	9a01      	ldr	r2, [sp, #4]
900190e6:	e74b      	b.n	90018f80 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x118>
900190e8:	4297      	cmp	r7, r2
900190ea:	d332      	bcc.n	90019152 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x2ea>
900190ec:	1abb      	subs	r3, r7, r2
900190ee:	9208      	str	r2, [sp, #32]
900190f0:	9501      	str	r5, [sp, #4]
900190f2:	b29b      	uxth	r3, r3
900190f4:	9909      	ldr	r1, [sp, #36]	; 0x24
900190f6:	29ff      	cmp	r1, #255	; 0xff
900190f8:	9908      	ldr	r1, [sp, #32]
900190fa:	eb0c 0601 	add.w	r6, ip, r1
900190fe:	d135      	bne.n	9001916c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x304>
90019100:	f1a0 0e02 	sub.w	lr, r0, #2
90019104:	b2b6      	uxth	r6, r6
90019106:	45b4      	cmp	ip, r6
90019108:	f040 808c 	bne.w	90019224 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x3bc>
9001910c:	9908      	ldr	r1, [sp, #32]
9001910e:	4297      	cmp	r7, r2
90019110:	eb00 0041 	add.w	r0, r0, r1, lsl #1
90019114:	d3e2      	bcc.n	900190dc <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x274>
90019116:	9a18      	ldr	r2, [sp, #96]	; 0x60
90019118:	9904      	ldr	r1, [sp, #16]
9001911a:	8812      	ldrh	r2, [r2, #0]
9001911c:	1a52      	subs	r2, r2, r1
9001911e:	9916      	ldr	r1, [sp, #88]	; 0x58
90019120:	eb00 0042 	add.w	r0, r0, r2, lsl #1
90019124:	9a07      	ldr	r2, [sp, #28]
90019126:	3201      	adds	r2, #1
90019128:	428a      	cmp	r2, r1
9001912a:	9207      	str	r2, [sp, #28]
9001912c:	f040 8087 	bne.w	9001923e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x3d6>
90019130:	f8bd 5070 	ldrh.w	r5, [sp, #112]	; 0x70
90019134:	f8bd 7068 	ldrh.w	r7, [sp, #104]	; 0x68
90019138:	9b04      	ldr	r3, [sp, #16]
9001913a:	1bed      	subs	r5, r5, r7
9001913c:	b2ad      	uxth	r5, r5
9001913e:	2d00      	cmp	r5, #0
90019140:	bf08      	it	eq
90019142:	461a      	moveq	r2, r3
90019144:	9b0d      	ldr	r3, [sp, #52]	; 0x34
90019146:	bf18      	it	ne
90019148:	2200      	movne	r2, #0
9001914a:	3301      	adds	r3, #1
9001914c:	b292      	uxth	r2, r2
9001914e:	930d      	str	r3, [sp, #52]	; 0x34
90019150:	e70d      	b.n	90018f6e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x106>
90019152:	1bd1      	subs	r1, r2, r7
90019154:	9708      	str	r7, [sp, #32]
90019156:	b28b      	uxth	r3, r1
90019158:	9301      	str	r3, [sp, #4]
9001915a:	462b      	mov	r3, r5
9001915c:	e7ca      	b.n	900190f4 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x28c>
9001915e:	bf00      	nop
90019160:	24021c14 	.word	0x24021c14
90019164:	24021c0e 	.word	0x24021c0e
90019168:	fffff7fb 	.word	0xfffff7fb
9001916c:	b2b6      	uxth	r6, r6
9001916e:	900b      	str	r0, [sp, #44]	; 0x2c
90019170:	45b4      	cmp	ip, r6
90019172:	d0cb      	beq.n	9001910c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x2a4>
90019174:	f10c 0101 	add.w	r1, ip, #1
90019178:	44a4      	add	ip, r4
9001917a:	9117      	str	r1, [sp, #92]	; 0x5c
9001917c:	f89c 5804 	ldrb.w	r5, [ip, #2052]	; 0x804
90019180:	9911      	ldr	r1, [sp, #68]	; 0x44
90019182:	f831 5015 	ldrh.w	r5, [r1, r5, lsl #1]
90019186:	990b      	ldr	r1, [sp, #44]	; 0x2c
90019188:	ea4f 2825 	mov.w	r8, r5, asr #8
9001918c:	f8b1 c000 	ldrh.w	ip, [r1]
90019190:	990e      	ldr	r1, [sp, #56]	; 0x38
90019192:	f008 08f8 	and.w	r8, r8, #248	; 0xf8
90019196:	ea4f 2e2c 	mov.w	lr, ip, asr #8
9001919a:	ea4f 09ec 	mov.w	r9, ip, asr #3
9001919e:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
900191a2:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
900191a6:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
900191aa:	fb1e fe01 	smulbb	lr, lr, r1
900191ae:	990f      	ldr	r1, [sp, #60]	; 0x3c
900191b0:	fa5f fc8c 	uxtb.w	ip, ip
900191b4:	fb08 e801 	mla	r8, r8, r1, lr
900191b8:	ea4f 0ee5 	mov.w	lr, r5, asr #3
900191bc:	990e      	ldr	r1, [sp, #56]	; 0x38
900191be:	00ed      	lsls	r5, r5, #3
900191c0:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
900191c4:	fa1f f888 	uxth.w	r8, r8
900191c8:	fb19 f901 	smulbb	r9, r9, r1
900191cc:	990f      	ldr	r1, [sp, #60]	; 0x3c
900191ce:	b2ed      	uxtb	r5, r5
900191d0:	fb0e 9e01 	mla	lr, lr, r1, r9
900191d4:	990e      	ldr	r1, [sp, #56]	; 0x38
900191d6:	fb1c fc01 	smulbb	ip, ip, r1
900191da:	990f      	ldr	r1, [sp, #60]	; 0x3c
900191dc:	fa1f fe8e 	uxth.w	lr, lr
900191e0:	fb05 c501 	mla	r5, r5, r1, ip
900191e4:	f108 0c01 	add.w	ip, r8, #1
900191e8:	f10e 0901 	add.w	r9, lr, #1
900191ec:	990b      	ldr	r1, [sp, #44]	; 0x2c
900191ee:	b2ad      	uxth	r5, r5
900191f0:	eb0c 2818 	add.w	r8, ip, r8, lsr #8
900191f4:	f105 0c01 	add.w	ip, r5, #1
900191f8:	eb09 291e 	add.w	r9, r9, lr, lsr #8
900191fc:	f408 4878 	and.w	r8, r8, #63488	; 0xf800
90019200:	eb0c 2c15 	add.w	ip, ip, r5, lsr #8
90019204:	ea4f 1959 	mov.w	r9, r9, lsr #5
90019208:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
9001920c:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
90019210:	ea4c 0808 	orr.w	r8, ip, r8
90019214:	f8bd c05c 	ldrh.w	ip, [sp, #92]	; 0x5c
90019218:	ea48 0809 	orr.w	r8, r8, r9
9001921c:	f821 8b02 	strh.w	r8, [r1], #2
90019220:	910b      	str	r1, [sp, #44]	; 0x2c
90019222:	e7a5      	b.n	90019170 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x308>
90019224:	f10c 0801 	add.w	r8, ip, #1
90019228:	44a4      	add	ip, r4
9001922a:	9911      	ldr	r1, [sp, #68]	; 0x44
9001922c:	f89c 5804 	ldrb.w	r5, [ip, #2052]	; 0x804
90019230:	fa1f fc88 	uxth.w	ip, r8
90019234:	f831 5015 	ldrh.w	r5, [r1, r5, lsl #1]
90019238:	f82e 5f02 	strh.w	r5, [lr, #2]!
9001923c:	e763      	b.n	90019106 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x29e>
9001923e:	f8bd 2010 	ldrh.w	r2, [sp, #16]
90019242:	f8bd 506c 	ldrh.w	r5, [sp, #108]	; 0x6c
90019246:	1aad      	subs	r5, r5, r2
90019248:	b2ad      	uxth	r5, r5
9001924a:	2d00      	cmp	r5, #0
9001924c:	bf18      	it	ne
9001924e:	2200      	movne	r2, #0
90019250:	9201      	str	r2, [sp, #4]
90019252:	e744      	b.n	900190de <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x276>
90019254:	4b03      	ldr	r3, [pc, #12]	; (90019264 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x3fc>)
90019256:	6818      	ldr	r0, [r3, #0]
90019258:	6803      	ldr	r3, [r0, #0]
9001925a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9001925c:	4798      	blx	r3
9001925e:	b01f      	add	sp, #124	; 0x7c
90019260:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90019264:	24021c14 	.word	0x24021c14

90019268 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
90019268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001926c:	b08f      	sub	sp, #60	; 0x3c
9001926e:	461c      	mov	r4, r3
90019270:	460f      	mov	r7, r1
90019272:	9203      	str	r2, [sp, #12]
90019274:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
90019278:	9b18      	ldr	r3, [sp, #96]	; 0x60
9001927a:	9202      	str	r2, [sp, #8]
9001927c:	2a00      	cmp	r2, #0
9001927e:	f000 8128 	beq.w	900194d2 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x26a>
90019282:	6820      	ldr	r0, [r4, #0]
90019284:	aa0a      	add	r2, sp, #40	; 0x28
90019286:	6861      	ldr	r1, [r4, #4]
90019288:	c203      	stmia	r2!, {r0, r1}
9001928a:	6818      	ldr	r0, [r3, #0]
9001928c:	aa0c      	add	r2, sp, #48	; 0x30
9001928e:	6859      	ldr	r1, [r3, #4]
90019290:	c203      	stmia	r2!, {r0, r1}
90019292:	a80a      	add	r0, sp, #40	; 0x28
90019294:	f7f9 ffac 	bl	900131f0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
90019298:	4621      	mov	r1, r4
9001929a:	a80c      	add	r0, sp, #48	; 0x30
9001929c:	f7f9 ffd0 	bl	90013240 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
900192a0:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	; 0x2c
900192a4:	f9bd 502e 	ldrsh.w	r5, [sp, #46]	; 0x2e
900192a8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
900192ac:	f8bd 0030 	ldrh.w	r0, [sp, #48]	; 0x30
900192b0:	bfdb      	ittet	le
900192b2:	b2b3      	uxthle	r3, r6
900192b4:	f44f 6280 	movle.w	r2, #1024	; 0x400
900192b8:	2301      	movgt	r3, #1
900192ba:	fb92 f3f3 	sdivle	r3, r2, r3
900192be:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
900192c2:	441d      	add	r5, r3
900192c4:	fb92 f1f3 	sdiv	r1, r2, r3
900192c8:	fa1f fc81 	uxth.w	ip, r1
900192cc:	3d01      	subs	r5, #1
900192ce:	fb0c 2413 	mls	r4, ip, r3, r2
900192d2:	4661      	mov	r1, ip
900192d4:	fb14 f406 	smulbb	r4, r4, r6
900192d8:	4404      	add	r4, r0
900192da:	fb95 f5f3 	sdiv	r5, r5, r3
900192de:	b2a4      	uxth	r4, r4
900192e0:	b121      	cbz	r1, 900192ec <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x84>
900192e2:	9b03      	ldr	r3, [sp, #12]
900192e4:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
900192e8:	ba1b      	rev	r3, r3
900192ea:	441f      	add	r7, r3
900192ec:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
900192f0:	b2ad      	uxth	r5, r5
900192f2:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
900192f6:	4418      	add	r0, r3
900192f8:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
900192fc:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	; 0x36
90019300:	00ad      	lsls	r5, r5, #2
90019302:	441a      	add	r2, r3
90019304:	4b74      	ldr	r3, [pc, #464]	; (900194d8 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x270>)
90019306:	f8ad 0030 	strh.w	r0, [sp, #48]	; 0x30
9001930a:	6818      	ldr	r0, [r3, #0]
9001930c:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
90019310:	6803      	ldr	r3, [r0, #0]
90019312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90019314:	4798      	blx	r3
90019316:	4a71      	ldr	r2, [pc, #452]	; (900194dc <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x274>)
90019318:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	; 0x32
9001931c:	2c00      	cmp	r4, #0
9001931e:	8813      	ldrh	r3, [r2, #0]
90019320:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
90019324:	bf0c      	ite	eq
90019326:	46c8      	moveq	r8, r9
90019328:	f04f 0800 	movne.w	r8, #0
9001932c:	9209      	str	r2, [sp, #36]	; 0x24
9001932e:	fb03 c101 	mla	r1, r3, r1, ip
90019332:	4373      	muls	r3, r6
90019334:	fa1f f888 	uxth.w	r8, r8
90019338:	eb00 0041 	add.w	r0, r0, r1, lsl #1
9001933c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
90019340:	9304      	str	r3, [sp, #16]
90019342:	1d2b      	adds	r3, r5, #4
90019344:	9305      	str	r3, [sp, #20]
90019346:	2300      	movs	r3, #0
90019348:	9301      	str	r3, [sp, #4]
9001934a:	9a04      	ldr	r2, [sp, #16]
9001934c:	4282      	cmp	r2, r0
9001934e:	f240 80bb 	bls.w	900194c8 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x260>
90019352:	b95b      	cbnz	r3, 9001936c <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x104>
90019354:	783a      	ldrb	r2, [r7, #0]
90019356:	0993      	lsrs	r3, r2, #6
90019358:	f002 023f 	and.w	r2, r2, #63	; 0x3f
9001935c:	9201      	str	r2, [sp, #4]
9001935e:	1e5a      	subs	r2, r3, #1
90019360:	2a02      	cmp	r2, #2
90019362:	bf8d      	iteet	hi
90019364:	787b      	ldrbhi	r3, [r7, #1]
90019366:	3701      	addls	r7, #1
90019368:	b29b      	uxthls	r3, r3
9001936a:	3702      	addhi	r7, #2
9001936c:	b184      	cbz	r4, 90019390 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x128>
9001936e:	429c      	cmp	r4, r3
90019370:	bf91      	iteee	ls
90019372:	1b1c      	subls	r4, r3, r4
90019374:	1ae4      	subhi	r4, r4, r3
90019376:	46c4      	movhi	ip, r8
90019378:	f04f 0a00 	movhi.w	sl, #0
9001937c:	bf9b      	ittet	ls
9001937e:	fa1f fa84 	uxthls.w	sl, r4
90019382:	2400      	movls	r4, #0
90019384:	b2a4      	uxthhi	r4, r4
90019386:	fa1f fc89 	uxthls.w	ip, r9
9001938a:	4653      	mov	r3, sl
9001938c:	46e0      	mov	r8, ip
9001938e:	e7dc      	b.n	9001934a <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xe2>
90019390:	2204      	movs	r2, #4
90019392:	9905      	ldr	r1, [sp, #20]
90019394:	4543      	cmp	r3, r8
90019396:	4615      	mov	r5, r2
90019398:	9a01      	ldr	r2, [sp, #4]
9001939a:	bf24      	itt	cs
9001939c:	eba3 0a08 	subcs.w	sl, r3, r8
900193a0:	46c6      	movcs	lr, r8
900193a2:	fb15 1202 	smlabb	r2, r5, r2, r1
900193a6:	9903      	ldr	r1, [sp, #12]
900193a8:	bf3c      	itt	cc
900193aa:	eba8 0c03 	subcc.w	ip, r8, r3
900193ae:	469e      	movcc	lr, r3
900193b0:	588a      	ldr	r2, [r1, r2]
900193b2:	bf26      	itte	cs
900193b4:	fa1f fa8a 	uxthcs.w	sl, sl
900193b8:	46a4      	movcs	ip, r4
900193ba:	fa1f fc8c 	uxthcc.w	ip, ip
900193be:	ea4f 6112 	mov.w	r1, r2, lsr #24
900193c2:	bf38      	it	cc
900193c4:	46a2      	movcc	sl, r4
900193c6:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
900193ca:	2900      	cmp	r1, #0
900193cc:	d066      	beq.n	9001949c <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x234>
900193ce:	29ff      	cmp	r1, #255	; 0xff
900193d0:	ea4f 2612 	mov.w	r6, r2, lsr #8
900193d4:	d114      	bne.n	90019400 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x198>
900193d6:	9d02      	ldr	r5, [sp, #8]
900193d8:	2dff      	cmp	r5, #255	; 0xff
900193da:	d111      	bne.n	90019400 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x198>
900193dc:	0951      	lsrs	r1, r2, #5
900193de:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
900193e2:	f3c2 02c4 	ubfx	r2, r2, #3, #5
900193e6:	4486      	add	lr, r0
900193e8:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
900193ec:	f026 0607 	bic.w	r6, r6, #7
900193f0:	430e      	orrs	r6, r1
900193f2:	4316      	orrs	r6, r2
900193f4:	b2b6      	uxth	r6, r6
900193f6:	4586      	cmp	lr, r0
900193f8:	d051      	beq.n	9001949e <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x236>
900193fa:	f820 6b02 	strh.w	r6, [r0], #2
900193fe:	e7fa      	b.n	900193f6 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x18e>
90019400:	9d02      	ldr	r5, [sp, #8]
90019402:	b2f6      	uxtb	r6, r6
90019404:	4486      	add	lr, r0
90019406:	4369      	muls	r1, r5
90019408:	1c4d      	adds	r5, r1, #1
9001940a:	eb05 2521 	add.w	r5, r5, r1, asr #8
9001940e:	f3c2 4107 	ubfx	r1, r2, #16, #8
90019412:	b2d2      	uxtb	r2, r2
90019414:	122d      	asrs	r5, r5, #8
90019416:	ea6f 0b05 	mvn.w	fp, r5
9001941a:	b2ad      	uxth	r5, r5
9001941c:	fb11 f105 	smulbb	r1, r1, r5
90019420:	fa5f fb8b 	uxtb.w	fp, fp
90019424:	fb16 f605 	smulbb	r6, r6, r5
90019428:	fb12 f205 	smulbb	r2, r2, r5
9001942c:	b289      	uxth	r1, r1
9001942e:	b2b6      	uxth	r6, r6
90019430:	b292      	uxth	r2, r2
90019432:	9106      	str	r1, [sp, #24]
90019434:	9607      	str	r6, [sp, #28]
90019436:	9208      	str	r2, [sp, #32]
90019438:	4586      	cmp	lr, r0
9001943a:	d030      	beq.n	9001949e <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x236>
9001943c:	8802      	ldrh	r2, [r0, #0]
9001943e:	9906      	ldr	r1, [sp, #24]
90019440:	1216      	asrs	r6, r2, #8
90019442:	10d5      	asrs	r5, r2, #3
90019444:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
90019448:	00d2      	lsls	r2, r2, #3
9001944a:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
9001944e:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
90019452:	b2d2      	uxtb	r2, r2
90019454:	fb06 160b 	mla	r6, r6, fp, r1
90019458:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
9001945c:	9907      	ldr	r1, [sp, #28]
9001945e:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
90019462:	b2b6      	uxth	r6, r6
90019464:	fb05 150b 	mla	r5, r5, fp, r1
90019468:	9908      	ldr	r1, [sp, #32]
9001946a:	fb02 120b 	mla	r2, r2, fp, r1
9001946e:	1c71      	adds	r1, r6, #1
90019470:	b2ad      	uxth	r5, r5
90019472:	b292      	uxth	r2, r2
90019474:	eb01 2616 	add.w	r6, r1, r6, lsr #8
90019478:	1c51      	adds	r1, r2, #1
9001947a:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
9001947e:	eb01 2212 	add.w	r2, r1, r2, lsr #8
90019482:	f3c2 22c4 	ubfx	r2, r2, #11, #5
90019486:	4316      	orrs	r6, r2
90019488:	1c6a      	adds	r2, r5, #1
9001948a:	eb02 2515 	add.w	r5, r2, r5, lsr #8
9001948e:	096d      	lsrs	r5, r5, #5
90019490:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
90019494:	432e      	orrs	r6, r5
90019496:	f820 6b02 	strh.w	r6, [r0], #2
9001949a:	e7cd      	b.n	90019438 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d0>
9001949c:	4470      	add	r0, lr
9001949e:	4543      	cmp	r3, r8
900194a0:	f4ff af73 	bcc.w	9001938a <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x122>
900194a4:	fa1f fc89 	uxth.w	ip, r9
900194a8:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
900194ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
900194ae:	eba4 040c 	sub.w	r4, r4, ip
900194b2:	881b      	ldrh	r3, [r3, #0]
900194b4:	b2a4      	uxth	r4, r4
900194b6:	eba3 0309 	sub.w	r3, r3, r9
900194ba:	2c00      	cmp	r4, #0
900194bc:	eb00 0043 	add.w	r0, r0, r3, lsl #1
900194c0:	bf18      	it	ne
900194c2:	f04f 0c00 	movne.w	ip, #0
900194c6:	e760      	b.n	9001938a <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x122>
900194c8:	4b03      	ldr	r3, [pc, #12]	; (900194d8 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x270>)
900194ca:	6818      	ldr	r0, [r3, #0]
900194cc:	6803      	ldr	r3, [r0, #0]
900194ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900194d0:	4798      	blx	r3
900194d2:	b00f      	add	sp, #60	; 0x3c
900194d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
900194d8:	24021c14 	.word	0x24021c14
900194dc:	24021c0e 	.word	0x24021c0e

900194e0 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
900194e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900194e4:	b093      	sub	sp, #76	; 0x4c
900194e6:	461c      	mov	r4, r3
900194e8:	9205      	str	r2, [sp, #20]
900194ea:	f89d 2074 	ldrb.w	r2, [sp, #116]	; 0x74
900194ee:	9101      	str	r1, [sp, #4]
900194f0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
900194f2:	9202      	str	r2, [sp, #8]
900194f4:	2a00      	cmp	r2, #0
900194f6:	f000 812e 	beq.w	90019756 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x276>
900194fa:	6820      	ldr	r0, [r4, #0]
900194fc:	aa0e      	add	r2, sp, #56	; 0x38
900194fe:	6861      	ldr	r1, [r4, #4]
90019500:	c203      	stmia	r2!, {r0, r1}
90019502:	6818      	ldr	r0, [r3, #0]
90019504:	aa10      	add	r2, sp, #64	; 0x40
90019506:	6859      	ldr	r1, [r3, #4]
90019508:	c203      	stmia	r2!, {r0, r1}
9001950a:	a80e      	add	r0, sp, #56	; 0x38
9001950c:	f7f9 fe70 	bl	900131f0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
90019510:	4621      	mov	r1, r4
90019512:	a810      	add	r0, sp, #64	; 0x40
90019514:	f7f9 fe94 	bl	90013240 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
90019518:	f9bd 603c 	ldrsh.w	r6, [sp, #60]	; 0x3c
9001951c:	f9bd 503e 	ldrsh.w	r5, [sp, #62]	; 0x3e
90019520:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
90019524:	f8bd 0040 	ldrh.w	r0, [sp, #64]	; 0x40
90019528:	bfdb      	ittet	le
9001952a:	b2b3      	uxthle	r3, r6
9001952c:	f44f 6280 	movle.w	r2, #1024	; 0x400
90019530:	2301      	movgt	r3, #1
90019532:	fb92 f3f3 	sdivle	r3, r2, r3
90019536:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	; 0x42
9001953a:	441d      	add	r5, r3
9001953c:	fb92 f1f3 	sdiv	r1, r2, r3
90019540:	fa1f fc81 	uxth.w	ip, r1
90019544:	3d01      	subs	r5, #1
90019546:	fb0c 2413 	mls	r4, ip, r3, r2
9001954a:	4661      	mov	r1, ip
9001954c:	fb14 f406 	smulbb	r4, r4, r6
90019550:	4404      	add	r4, r0
90019552:	fb95 f5f3 	sdiv	r5, r5, r3
90019556:	b2a4      	uxth	r4, r4
90019558:	b131      	cbz	r1, 90019568 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x88>
9001955a:	9b05      	ldr	r3, [sp, #20]
9001955c:	9901      	ldr	r1, [sp, #4]
9001955e:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
90019562:	ba1b      	rev	r3, r3
90019564:	4419      	add	r1, r3
90019566:	9101      	str	r1, [sp, #4]
90019568:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
9001956c:	b2ad      	uxth	r5, r5
9001956e:	f9bd b044 	ldrsh.w	fp, [sp, #68]	; 0x44
90019572:	4418      	add	r0, r3
90019574:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
90019578:	f9bd 6046 	ldrsh.w	r6, [sp, #70]	; 0x46
9001957c:	00ad      	lsls	r5, r5, #2
9001957e:	441a      	add	r2, r3
90019580:	4b76      	ldr	r3, [pc, #472]	; (9001975c <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x27c>)
90019582:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
90019586:	6818      	ldr	r0, [r3, #0]
90019588:	f8ad 2042 	strh.w	r2, [sp, #66]	; 0x42
9001958c:	6803      	ldr	r3, [r0, #0]
9001958e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90019590:	4798      	blx	r3
90019592:	4973      	ldr	r1, [pc, #460]	; (90019760 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x280>)
90019594:	f9bd c040 	ldrsh.w	ip, [sp, #64]	; 0x40
90019598:	2c00      	cmp	r4, #0
9001959a:	880b      	ldrh	r3, [r1, #0]
9001959c:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	; 0x42
900195a0:	910d      	str	r1, [sp, #52]	; 0x34
900195a2:	fb03 c202 	mla	r2, r3, r2, ip
900195a6:	bf08      	it	eq
900195a8:	46dc      	moveq	ip, fp
900195aa:	fb03 f306 	mul.w	r3, r3, r6
900195ae:	bf18      	it	ne
900195b0:	f04f 0c00 	movne.w	ip, #0
900195b4:	eb00 0042 	add.w	r0, r0, r2, lsl #1
900195b8:	f8bd 1008 	ldrh.w	r1, [sp, #8]
900195bc:	fa1f fc8c 	uxth.w	ip, ip
900195c0:	eb00 0343 	add.w	r3, r0, r3, lsl #1
900195c4:	9106      	str	r1, [sp, #24]
900195c6:	9308      	str	r3, [sp, #32]
900195c8:	1d2b      	adds	r3, r5, #4
900195ca:	9309      	str	r3, [sp, #36]	; 0x24
900195cc:	9b02      	ldr	r3, [sp, #8]
900195ce:	43da      	mvns	r2, r3
900195d0:	2300      	movs	r3, #0
900195d2:	b2d2      	uxtb	r2, r2
900195d4:	9303      	str	r3, [sp, #12]
900195d6:	9207      	str	r2, [sp, #28]
900195d8:	9a08      	ldr	r2, [sp, #32]
900195da:	4282      	cmp	r2, r0
900195dc:	f240 80b6 	bls.w	9001974c <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x26c>
900195e0:	b963      	cbnz	r3, 900195fc <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x11c>
900195e2:	9b01      	ldr	r3, [sp, #4]
900195e4:	781a      	ldrb	r2, [r3, #0]
900195e6:	0993      	lsrs	r3, r2, #6
900195e8:	f002 023f 	and.w	r2, r2, #63	; 0x3f
900195ec:	9203      	str	r2, [sp, #12]
900195ee:	1e5a      	subs	r2, r3, #1
900195f0:	2a02      	cmp	r2, #2
900195f2:	d815      	bhi.n	90019620 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x140>
900195f4:	9a01      	ldr	r2, [sp, #4]
900195f6:	b29b      	uxth	r3, r3
900195f8:	3201      	adds	r2, #1
900195fa:	9201      	str	r2, [sp, #4]
900195fc:	b1b4      	cbz	r4, 9001962c <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x14c>
900195fe:	429c      	cmp	r4, r3
90019600:	bf91      	iteee	ls
90019602:	1b1c      	subls	r4, r3, r4
90019604:	1ae4      	subhi	r4, r4, r3
90019606:	4666      	movhi	r6, ip
90019608:	f04f 0800 	movhi.w	r8, #0
9001960c:	bf9b      	ittet	ls
9001960e:	fa1f f884 	uxthls.w	r8, r4
90019612:	2400      	movls	r4, #0
90019614:	b2a4      	uxthhi	r4, r4
90019616:	fa1f f68b 	uxthls.w	r6, fp
9001961a:	4643      	mov	r3, r8
9001961c:	46b4      	mov	ip, r6
9001961e:	e7db      	b.n	900195d8 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xf8>
90019620:	9a01      	ldr	r2, [sp, #4]
90019622:	9b01      	ldr	r3, [sp, #4]
90019624:	3202      	adds	r2, #2
90019626:	785b      	ldrb	r3, [r3, #1]
90019628:	9201      	str	r2, [sp, #4]
9001962a:	e7e7      	b.n	900195fc <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x11c>
9001962c:	2203      	movs	r2, #3
9001962e:	9909      	ldr	r1, [sp, #36]	; 0x24
90019630:	4563      	cmp	r3, ip
90019632:	4615      	mov	r5, r2
90019634:	9a03      	ldr	r2, [sp, #12]
90019636:	bf2c      	ite	cs
90019638:	eba3 080c 	subcs.w	r8, r3, ip
9001963c:	ebac 0603 	subcc.w	r6, ip, r3
90019640:	fb15 1202 	smlabb	r2, r5, r2, r1
90019644:	9905      	ldr	r1, [sp, #20]
90019646:	bf24      	itt	cs
90019648:	fa1f f888 	uxthcs.w	r8, r8
9001964c:	46e1      	movcs	r9, ip
9001964e:	eb01 0502 	add.w	r5, r1, r2
90019652:	9902      	ldr	r1, [sp, #8]
90019654:	bf2f      	iteee	cs
90019656:	4626      	movcs	r6, r4
90019658:	b2b6      	uxthcc	r6, r6
9001965a:	4699      	movcc	r9, r3
9001965c:	46a0      	movcc	r8, r4
9001965e:	29ff      	cmp	r1, #255	; 0xff
90019660:	d04a      	beq.n	900196f8 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x218>
90019662:	9f06      	ldr	r7, [sp, #24]
90019664:	46ca      	mov	sl, r9
90019666:	78a9      	ldrb	r1, [r5, #2]
90019668:	9004      	str	r0, [sp, #16]
9001966a:	4379      	muls	r1, r7
9001966c:	910a      	str	r1, [sp, #40]	; 0x28
9001966e:	7869      	ldrb	r1, [r5, #1]
90019670:	4379      	muls	r1, r7
90019672:	910b      	str	r1, [sp, #44]	; 0x2c
90019674:	9905      	ldr	r1, [sp, #20]
90019676:	5c8a      	ldrb	r2, [r1, r2]
90019678:	437a      	muls	r2, r7
9001967a:	920c      	str	r2, [sp, #48]	; 0x30
9001967c:	f1ba 0f00 	cmp.w	sl, #0
90019680:	d03d      	beq.n	900196fe <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x21e>
90019682:	9a04      	ldr	r2, [sp, #16]
90019684:	f10a 3aff 	add.w	sl, sl, #4294967295
90019688:	9f07      	ldr	r7, [sp, #28]
9001968a:	8812      	ldrh	r2, [r2, #0]
9001968c:	fa1f fa8a 	uxth.w	sl, sl
90019690:	46be      	mov	lr, r7
90019692:	9f0a      	ldr	r7, [sp, #40]	; 0x28
90019694:	1215      	asrs	r5, r2, #8
90019696:	10d1      	asrs	r1, r2, #3
90019698:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
9001969c:	00d2      	lsls	r2, r2, #3
9001969e:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
900196a2:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
900196a6:	b2d2      	uxtb	r2, r2
900196a8:	fb05 750e 	mla	r5, r5, lr, r7
900196ac:	ea41 1191 	orr.w	r1, r1, r1, lsr #6
900196b0:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
900196b2:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
900196b6:	b2ad      	uxth	r5, r5
900196b8:	fb01 710e 	mla	r1, r1, lr, r7
900196bc:	9f0c      	ldr	r7, [sp, #48]	; 0x30
900196be:	fb02 720e 	mla	r2, r2, lr, r7
900196c2:	f105 0e01 	add.w	lr, r5, #1
900196c6:	b289      	uxth	r1, r1
900196c8:	b292      	uxth	r2, r2
900196ca:	eb0e 2515 	add.w	r5, lr, r5, lsr #8
900196ce:	f102 0e01 	add.w	lr, r2, #1
900196d2:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
900196d6:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
900196da:	f3c2 22c4 	ubfx	r2, r2, #11, #5
900196de:	4315      	orrs	r5, r2
900196e0:	1c4a      	adds	r2, r1, #1
900196e2:	eb02 2111 	add.w	r1, r2, r1, lsr #8
900196e6:	9a04      	ldr	r2, [sp, #16]
900196e8:	0949      	lsrs	r1, r1, #5
900196ea:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
900196ee:	430d      	orrs	r5, r1
900196f0:	f822 5b02 	strh.w	r5, [r2], #2
900196f4:	9204      	str	r2, [sp, #16]
900196f6:	e7c1      	b.n	9001967c <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x19c>
900196f8:	4649      	mov	r1, r9
900196fa:	4686      	mov	lr, r0
900196fc:	b999      	cbnz	r1, 90019726 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x246>
900196fe:	4563      	cmp	r3, ip
90019700:	eb00 0049 	add.w	r0, r0, r9, lsl #1
90019704:	d389      	bcc.n	9001961a <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x13a>
90019706:	fa1f f68b 	uxth.w	r6, fp
9001970a:	f8bd 403c 	ldrh.w	r4, [sp, #60]	; 0x3c
9001970e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
90019710:	1ba4      	subs	r4, r4, r6
90019712:	881b      	ldrh	r3, [r3, #0]
90019714:	b2a4      	uxth	r4, r4
90019716:	eba3 030b 	sub.w	r3, r3, fp
9001971a:	2c00      	cmp	r4, #0
9001971c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
90019720:	bf18      	it	ne
90019722:	2600      	movne	r6, #0
90019724:	e779      	b.n	9001961a <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x13a>
90019726:	78aa      	ldrb	r2, [r5, #2]
90019728:	3901      	subs	r1, #1
9001972a:	4f0e      	ldr	r7, [pc, #56]	; (90019764 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x284>)
9001972c:	b289      	uxth	r1, r1
9001972e:	ea07 2a02 	and.w	sl, r7, r2, lsl #8
90019732:	786a      	ldrb	r2, [r5, #1]
90019734:	00d2      	lsls	r2, r2, #3
90019736:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
9001973a:	ea4a 0202 	orr.w	r2, sl, r2
9001973e:	f895 a000 	ldrb.w	sl, [r5]
90019742:	ea42 02da 	orr.w	r2, r2, sl, lsr #3
90019746:	f82e 2b02 	strh.w	r2, [lr], #2
9001974a:	e7d7      	b.n	900196fc <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x21c>
9001974c:	4b03      	ldr	r3, [pc, #12]	; (9001975c <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x27c>)
9001974e:	6818      	ldr	r0, [r3, #0]
90019750:	6803      	ldr	r3, [r0, #0]
90019752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90019754:	4798      	blx	r3
90019756:	b013      	add	sp, #76	; 0x4c
90019758:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001975c:	24021c14 	.word	0x24021c14
90019760:	24021c0e 	.word	0x24021c0e
90019764:	fffff800 	.word	0xfffff800

90019768 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
90019768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001976c:	b09d      	sub	sp, #116	; 0x74
9001976e:	461c      	mov	r4, r3
90019770:	4683      	mov	fp, r0
90019772:	9b26      	ldr	r3, [sp, #152]	; 0x98
90019774:	e9cd 1211 	strd	r1, r2, [sp, #68]	; 0x44
90019778:	f89d 209c 	ldrb.w	r2, [sp, #156]	; 0x9c
9001977c:	920e      	str	r2, [sp, #56]	; 0x38
9001977e:	2a00      	cmp	r2, #0
90019780:	f000 81e4 	beq.w	90019b4c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3e4>
90019784:	6820      	ldr	r0, [r4, #0]
90019786:	aa18      	add	r2, sp, #96	; 0x60
90019788:	6861      	ldr	r1, [r4, #4]
9001978a:	c203      	stmia	r2!, {r0, r1}
9001978c:	6818      	ldr	r0, [r3, #0]
9001978e:	aa1a      	add	r2, sp, #104	; 0x68
90019790:	6859      	ldr	r1, [r3, #4]
90019792:	c203      	stmia	r2!, {r0, r1}
90019794:	a818      	add	r0, sp, #96	; 0x60
90019796:	f7f9 fd2b 	bl	900131f0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
9001979a:	4621      	mov	r1, r4
9001979c:	a81a      	add	r0, sp, #104	; 0x68
9001979e:	f7f9 fd4f 	bl	90013240 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
900197a2:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	; 0x64
900197a6:	f9bd 4066 	ldrsh.w	r4, [sp, #102]	; 0x66
900197aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
900197ae:	f9bd 606e 	ldrsh.w	r6, [sp, #110]	; 0x6e
900197b2:	bfdb      	ittet	le
900197b4:	b29a      	uxthle	r2, r3
900197b6:	f44f 6180 	movle.w	r1, #1024	; 0x400
900197ba:	2201      	movgt	r2, #1
900197bc:	fb91 f2f2 	sdivle	r2, r1, r2
900197c0:	9202      	str	r2, [sp, #8]
900197c2:	9802      	ldr	r0, [sp, #8]
900197c4:	f9bd 206a 	ldrsh.w	r2, [sp, #106]	; 0x6a
900197c8:	9902      	ldr	r1, [sp, #8]
900197ca:	fb92 f0f0 	sdiv	r0, r2, r0
900197ce:	b280      	uxth	r0, r0
900197d0:	440c      	add	r4, r1
900197d2:	900f      	str	r0, [sp, #60]	; 0x3c
900197d4:	3c01      	subs	r4, #1
900197d6:	9802      	ldr	r0, [sp, #8]
900197d8:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
900197da:	fb05 2510 	mls	r5, r5, r0, r2
900197de:	fb94 f4f1 	sdiv	r4, r4, r1
900197e2:	fb15 f503 	smulbb	r5, r5, r3
900197e6:	f8bd 1068 	ldrh.w	r1, [sp, #104]	; 0x68
900197ea:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
900197ee:	3401      	adds	r4, #1
900197f0:	440d      	add	r5, r1
900197f2:	4419      	add	r1, r3
900197f4:	f8bd 3062 	ldrh.w	r3, [sp, #98]	; 0x62
900197f8:	b2a4      	uxth	r4, r4
900197fa:	441a      	add	r2, r3
900197fc:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	; 0x6c
90019800:	f8ad 1068 	strh.w	r1, [sp, #104]	; 0x68
90019804:	00a4      	lsls	r4, r4, #2
90019806:	9306      	str	r3, [sp, #24]
90019808:	b2ad      	uxth	r5, r5
9001980a:	4bb3      	ldr	r3, [pc, #716]	; (90019ad8 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x370>)
9001980c:	f8ad 206a 	strh.w	r2, [sp, #106]	; 0x6a
90019810:	6818      	ldr	r0, [r3, #0]
90019812:	6803      	ldr	r3, [r0, #0]
90019814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90019816:	4798      	blx	r3
90019818:	4bb0      	ldr	r3, [pc, #704]	; (90019adc <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x374>)
9001981a:	f9bd 106a 	ldrsh.w	r1, [sp, #106]	; 0x6a
9001981e:	2d00      	cmp	r5, #0
90019820:	881a      	ldrh	r2, [r3, #0]
90019822:	f9bd 7068 	ldrsh.w	r7, [sp, #104]	; 0x68
90019826:	fb02 f606 	mul.w	r6, r2, r6
9001982a:	fb02 7101 	mla	r1, r2, r1, r7
9001982e:	9316      	str	r3, [sp, #88]	; 0x58
90019830:	eb00 0841 	add.w	r8, r0, r1, lsl #1
90019834:	4baa      	ldr	r3, [pc, #680]	; (90019ae0 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x378>)
90019836:	bf18      	it	ne
90019838:	2100      	movne	r1, #0
9001983a:	eb08 0246 	add.w	r2, r8, r6, lsl #1
9001983e:	eba3 030b 	sub.w	r3, r3, fp
90019842:	920a      	str	r2, [sp, #40]	; 0x28
90019844:	f104 0204 	add.w	r2, r4, #4
90019848:	9317      	str	r3, [sp, #92]	; 0x5c
9001984a:	9213      	str	r2, [sp, #76]	; 0x4c
9001984c:	9a06      	ldr	r2, [sp, #24]
9001984e:	bf08      	it	eq
90019850:	4611      	moveq	r1, r2
90019852:	2200      	movs	r2, #0
90019854:	b289      	uxth	r1, r1
90019856:	920d      	str	r2, [sp, #52]	; 0x34
90019858:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
9001985a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
9001985c:	fa12 f383 	uxtah	r3, r2, r3
90019860:	9a12      	ldr	r2, [sp, #72]	; 0x48
90019862:	eb02 0383 	add.w	r3, r2, r3, lsl #2
90019866:	3304      	adds	r3, #4
90019868:	9308      	str	r3, [sp, #32]
9001986a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
9001986c:	4543      	cmp	r3, r8
9001986e:	f240 8168 	bls.w	90019b42 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3da>
90019872:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
90019876:	f04f 0e01 	mov.w	lr, #1
9001987a:	9a02      	ldr	r2, [sp, #8]
9001987c:	9808      	ldr	r0, [sp, #32]
9001987e:	fbb5 f3f3 	udiv	r3, r5, r3
90019882:	1ad3      	subs	r3, r2, r3
90019884:	7800      	ldrb	r0, [r0, #0]
90019886:	b29b      	uxth	r3, r3
90019888:	9010      	str	r0, [sp, #64]	; 0x40
9001988a:	3001      	adds	r0, #1
9001988c:	9314      	str	r3, [sp, #80]	; 0x50
9001988e:	9b08      	ldr	r3, [sp, #32]
90019890:	9007      	str	r0, [sp, #28]
90019892:	785a      	ldrb	r2, [r3, #1]
90019894:	789b      	ldrb	r3, [r3, #2]
90019896:	021b      	lsls	r3, r3, #8
90019898:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
9001989c:	9a08      	ldr	r2, [sp, #32]
9001989e:	78d2      	ldrb	r2, [r2, #3]
900198a0:	4313      	orrs	r3, r2
900198a2:	9a11      	ldr	r2, [sp, #68]	; 0x44
900198a4:	441a      	add	r2, r3
900198a6:	1c50      	adds	r0, r2, #1
900198a8:	7852      	ldrb	r2, [r2, #1]
900198aa:	9005      	str	r0, [sp, #20]
900198ac:	0212      	lsls	r2, r2, #8
900198ae:	9811      	ldr	r0, [sp, #68]	; 0x44
900198b0:	f402 72ff 	and.w	r2, r2, #510	; 0x1fe
900198b4:	5cc3      	ldrb	r3, [r0, r3]
900198b6:	431a      	orrs	r2, r3
900198b8:	b293      	uxth	r3, r2
900198ba:	f88b 2804 	strb.w	r2, [fp, #2052]	; 0x804
900198be:	930b      	str	r3, [sp, #44]	; 0x2c
900198c0:	2300      	movs	r3, #0
900198c2:	9309      	str	r3, [sp, #36]	; 0x24
900198c4:	2301      	movs	r3, #1
900198c6:	9301      	str	r3, [sp, #4]
900198c8:	9304      	str	r3, [sp, #16]
900198ca:	2300      	movs	r3, #0
900198cc:	9303      	str	r3, [sp, #12]
900198ce:	2d00      	cmp	r5, #0
900198d0:	d07d      	beq.n	900199ce <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x266>
900198d2:	45ae      	cmp	lr, r5
900198d4:	d26c      	bcs.n	900199b0 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x248>
900198d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
900198d8:	eba5 050e 	sub.w	r5, r5, lr
900198dc:	460c      	mov	r4, r1
900198de:	4543      	cmp	r3, r8
900198e0:	b2ad      	uxth	r5, r5
900198e2:	d802      	bhi.n	900198ea <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x182>
900198e4:	e071      	b.n	900199ca <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x262>
900198e6:	2b00      	cmp	r3, #0
900198e8:	d15d      	bne.n	900199a6 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x23e>
900198ea:	9b05      	ldr	r3, [sp, #20]
900198ec:	9a04      	ldr	r2, [sp, #16]
900198ee:	785b      	ldrb	r3, [r3, #1]
900198f0:	f1c2 0207 	rsb	r2, r2, #7
900198f4:	9904      	ldr	r1, [sp, #16]
900198f6:	4093      	lsls	r3, r2
900198f8:	005b      	lsls	r3, r3, #1
900198fa:	f403 72ff 	and.w	r2, r3, #510	; 0x1fe
900198fe:	9b05      	ldr	r3, [sp, #20]
90019900:	781b      	ldrb	r3, [r3, #0]
90019902:	410b      	asrs	r3, r1
90019904:	3101      	adds	r1, #1
90019906:	b2c9      	uxtb	r1, r1
90019908:	b2db      	uxtb	r3, r3
9001990a:	2908      	cmp	r1, #8
9001990c:	9104      	str	r1, [sp, #16]
9001990e:	9905      	ldr	r1, [sp, #20]
90019910:	ea43 0302 	orr.w	r3, r3, r2
90019914:	bf0c      	ite	eq
90019916:	3102      	addeq	r1, #2
90019918:	3101      	addne	r1, #1
9001991a:	b29a      	uxth	r2, r3
9001991c:	bf05      	ittet	eq
9001991e:	9105      	streq	r1, [sp, #20]
90019920:	2100      	moveq	r1, #0
90019922:	9105      	strne	r1, [sp, #20]
90019924:	9104      	streq	r1, [sp, #16]
90019926:	9910      	ldr	r1, [sp, #64]	; 0x40
90019928:	4291      	cmp	r1, r2
9001992a:	d30a      	bcc.n	90019942 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1da>
9001992c:	f88b 3804 	strb.w	r3, [fp, #2052]	; 0x804
90019930:	2301      	movs	r3, #1
90019932:	9907      	ldr	r1, [sp, #28]
90019934:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
90019938:	d30f      	bcc.n	9001995a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1f2>
9001993a:	2100      	movs	r1, #0
9001993c:	9301      	str	r3, [sp, #4]
9001993e:	9103      	str	r1, [sp, #12]
90019940:	e032      	b.n	900199a8 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x240>
90019942:	9b07      	ldr	r3, [sp, #28]
90019944:	429a      	cmp	r2, r3
90019946:	d318      	bcc.n	9001997a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x212>
90019948:	9b01      	ldr	r3, [sp, #4]
9001994a:	f89b 1804 	ldrb.w	r1, [fp, #2052]	; 0x804
9001994e:	445b      	add	r3, fp
90019950:	f883 1804 	strb.w	r1, [r3, #2052]	; 0x804
90019954:	9b01      	ldr	r3, [sp, #4]
90019956:	3301      	adds	r3, #1
90019958:	b29b      	uxth	r3, r3
9001995a:	9907      	ldr	r1, [sp, #28]
9001995c:	f89b 0804 	ldrb.w	r0, [fp, #2052]	; 0x804
90019960:	eb0b 0181 	add.w	r1, fp, r1, lsl #2
90019964:	7108      	strb	r0, [r1, #4]
90019966:	980b      	ldr	r0, [sp, #44]	; 0x2c
90019968:	80c8      	strh	r0, [r1, #6]
9001996a:	9801      	ldr	r0, [sp, #4]
9001996c:	3001      	adds	r0, #1
9001996e:	7148      	strb	r0, [r1, #5]
90019970:	9907      	ldr	r1, [sp, #28]
90019972:	3101      	adds	r1, #1
90019974:	b289      	uxth	r1, r1
90019976:	9107      	str	r1, [sp, #28]
90019978:	e7df      	b.n	9001993a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d2>
9001997a:	eb0b 0382 	add.w	r3, fp, r2, lsl #2
9001997e:	4611      	mov	r1, r2
90019980:	795b      	ldrb	r3, [r3, #5]
90019982:	f603 0004 	addw	r0, r3, #2052	; 0x804
90019986:	4458      	add	r0, fp
90019988:	9e17      	ldr	r6, [sp, #92]	; 0x5c
9001998a:	4406      	add	r6, r0
9001998c:	2e00      	cmp	r6, #0
9001998e:	dd06      	ble.n	9001999e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x236>
90019990:	eb0b 0181 	add.w	r1, fp, r1, lsl #2
90019994:	790e      	ldrb	r6, [r1, #4]
90019996:	f800 6d01 	strb.w	r6, [r0, #-1]!
9001999a:	88c9      	ldrh	r1, [r1, #6]
9001999c:	e7f4      	b.n	90019988 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x220>
9001999e:	f88b 1804 	strb.w	r1, [fp, #2052]	; 0x804
900199a2:	b29b      	uxth	r3, r3
900199a4:	e7c5      	b.n	90019932 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1ca>
900199a6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
900199a8:	4621      	mov	r1, r4
900199aa:	920b      	str	r2, [sp, #44]	; 0x2c
900199ac:	469e      	mov	lr, r3
900199ae:	e78e      	b.n	900198ce <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x166>
900199b0:	9a03      	ldr	r2, [sp, #12]
900199b2:	ebae 0305 	sub.w	r3, lr, r5
900199b6:	f8bd 4018 	ldrh.w	r4, [sp, #24]
900199ba:	442a      	add	r2, r5
900199bc:	b29b      	uxth	r3, r3
900199be:	b292      	uxth	r2, r2
900199c0:	9203      	str	r2, [sp, #12]
900199c2:	2500      	movs	r5, #0
900199c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
900199c6:	4542      	cmp	r2, r8
900199c8:	d88d      	bhi.n	900198e6 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x17e>
900199ca:	4621      	mov	r1, r4
900199cc:	e74d      	b.n	9001986a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x102>
900199ce:	458e      	cmp	lr, r1
900199d0:	f04f 0900 	mov.w	r9, #0
900199d4:	bf2b      	itete	cs
900199d6:	ebae 0301 	subcs.w	r3, lr, r1
900199da:	eba1 040e 	subcc.w	r4, r1, lr
900199de:	462c      	movcs	r4, r5
900199e0:	462b      	movcc	r3, r5
900199e2:	bf27      	ittee	cs
900199e4:	b29b      	uxthcs	r3, r3
900199e6:	910c      	strcs	r1, [sp, #48]	; 0x30
900199e8:	b2a4      	uxthcc	r4, r4
900199ea:	f8cd e030 	strcc.w	lr, [sp, #48]	; 0x30
900199ee:	9a03      	ldr	r2, [sp, #12]
900199f0:	980c      	ldr	r0, [sp, #48]	; 0x30
900199f2:	444a      	add	r2, r9
900199f4:	4548      	cmp	r0, r9
900199f6:	b292      	uxth	r2, r2
900199f8:	d074      	beq.n	90019ae4 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x37c>
900199fa:	2004      	movs	r0, #4
900199fc:	445a      	add	r2, fp
900199fe:	4605      	mov	r5, r0
90019a00:	f892 2804 	ldrb.w	r2, [r2, #2052]	; 0x804
90019a04:	9813      	ldr	r0, [sp, #76]	; 0x4c
90019a06:	fb15 0202 	smlabb	r2, r5, r2, r0
90019a0a:	9812      	ldr	r0, [sp, #72]	; 0x48
90019a0c:	5880      	ldr	r0, [r0, r2]
90019a0e:	ea5f 6a10 	movs.w	sl, r0, lsr #24
90019a12:	d014      	beq.n	90019a3e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2d6>
90019a14:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
90019a18:	ea4f 2510 	mov.w	r5, r0, lsr #8
90019a1c:	d112      	bne.n	90019a44 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2dc>
90019a1e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
90019a20:	2aff      	cmp	r2, #255	; 0xff
90019a22:	d10f      	bne.n	90019a44 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2dc>
90019a24:	0942      	lsrs	r2, r0, #5
90019a26:	f425 65ff 	bic.w	r5, r5, #2040	; 0x7f8
90019a2a:	f3c0 00c4 	ubfx	r0, r0, #3, #5
90019a2e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
90019a32:	f025 0507 	bic.w	r5, r5, #7
90019a36:	4315      	orrs	r5, r2
90019a38:	4305      	orrs	r5, r0
90019a3a:	f828 5019 	strh.w	r5, [r8, r9, lsl #1]
90019a3e:	f109 0901 	add.w	r9, r9, #1
90019a42:	e7d4      	b.n	900199ee <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x286>
90019a44:	f838 c019 	ldrh.w	ip, [r8, r9, lsl #1]
90019a48:	b2ed      	uxtb	r5, r5
90019a4a:	ea4f 06ec 	mov.w	r6, ip, asr #3
90019a4e:	ea4f 272c 	mov.w	r7, ip, asr #8
90019a52:	f006 02fc 	and.w	r2, r6, #252	; 0xfc
90019a56:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
90019a5a:	f3c0 4607 	ubfx	r6, r0, #16, #8
90019a5e:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
90019a62:	9215      	str	r2, [sp, #84]	; 0x54
90019a64:	fa5f fc8c 	uxtb.w	ip, ip
90019a68:	9a0e      	ldr	r2, [sp, #56]	; 0x38
90019a6a:	b2c0      	uxtb	r0, r0
90019a6c:	ea47 1757 	orr.w	r7, r7, r7, lsr #5
90019a70:	fb02 fa0a 	mul.w	sl, r2, sl
90019a74:	ea4c 1c5c 	orr.w	ip, ip, ip, lsr #5
90019a78:	f10a 0201 	add.w	r2, sl, #1
90019a7c:	eb02 222a 	add.w	r2, r2, sl, asr #8
90019a80:	1212      	asrs	r2, r2, #8
90019a82:	fa1f fa82 	uxth.w	sl, r2
90019a86:	43d2      	mvns	r2, r2
90019a88:	fb16 f60a 	smulbb	r6, r6, sl
90019a8c:	b2d2      	uxtb	r2, r2
90019a8e:	fb10 f00a 	smulbb	r0, r0, sl
90019a92:	fb07 6702 	mla	r7, r7, r2, r6
90019a96:	9e15      	ldr	r6, [sp, #84]	; 0x54
90019a98:	fb0c 0002 	mla	r0, ip, r2, r0
90019a9c:	fb15 f50a 	smulbb	r5, r5, sl
90019aa0:	b2bf      	uxth	r7, r7
90019aa2:	b280      	uxth	r0, r0
90019aa4:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
90019aa8:	fb06 5602 	mla	r6, r6, r2, r5
90019aac:	1c7a      	adds	r2, r7, #1
90019aae:	1c45      	adds	r5, r0, #1
90019ab0:	eb02 2717 	add.w	r7, r2, r7, lsr #8
90019ab4:	eb05 2510 	add.w	r5, r5, r0, lsr #8
90019ab8:	b2b6      	uxth	r6, r6
90019aba:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
90019abe:	f3c5 25c4 	ubfx	r5, r5, #11, #5
90019ac2:	432f      	orrs	r7, r5
90019ac4:	1c75      	adds	r5, r6, #1
90019ac6:	eb05 2516 	add.w	r5, r5, r6, lsr #8
90019aca:	096d      	lsrs	r5, r5, #5
90019acc:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
90019ad0:	432f      	orrs	r7, r5
90019ad2:	f828 7019 	strh.w	r7, [r8, r9, lsl #1]
90019ad6:	e7b2      	b.n	90019a3e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2d6>
90019ad8:	24021c14 	.word	0x24021c14
90019adc:	24021c0e 	.word	0x24021c0e
90019ae0:	fffff7fb 	.word	0xfffff7fb
90019ae4:	9203      	str	r2, [sp, #12]
90019ae6:	458e      	cmp	lr, r1
90019ae8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
90019aea:	eb08 0842 	add.w	r8, r8, r2, lsl #1
90019aee:	f4ff af68 	bcc.w	900199c2 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x25a>
90019af2:	9a16      	ldr	r2, [sp, #88]	; 0x58
90019af4:	9906      	ldr	r1, [sp, #24]
90019af6:	8812      	ldrh	r2, [r2, #0]
90019af8:	1a52      	subs	r2, r2, r1
90019afa:	9914      	ldr	r1, [sp, #80]	; 0x50
90019afc:	eb08 0842 	add.w	r8, r8, r2, lsl #1
90019b00:	9a09      	ldr	r2, [sp, #36]	; 0x24
90019b02:	3201      	adds	r2, #1
90019b04:	428a      	cmp	r2, r1
90019b06:	9209      	str	r2, [sp, #36]	; 0x24
90019b08:	d111      	bne.n	90019b2e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3c6>
90019b0a:	f8bd 5068 	ldrh.w	r5, [sp, #104]	; 0x68
90019b0e:	f8bd 9060 	ldrh.w	r9, [sp, #96]	; 0x60
90019b12:	9b06      	ldr	r3, [sp, #24]
90019b14:	eba5 0509 	sub.w	r5, r5, r9
90019b18:	b2ad      	uxth	r5, r5
90019b1a:	2d00      	cmp	r5, #0
90019b1c:	bf08      	it	eq
90019b1e:	4619      	moveq	r1, r3
90019b20:	9b0d      	ldr	r3, [sp, #52]	; 0x34
90019b22:	bf18      	it	ne
90019b24:	2100      	movne	r1, #0
90019b26:	3301      	adds	r3, #1
90019b28:	b289      	uxth	r1, r1
90019b2a:	930d      	str	r3, [sp, #52]	; 0x34
90019b2c:	e694      	b.n	90019858 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xf0>
90019b2e:	f8bd 4018 	ldrh.w	r4, [sp, #24]
90019b32:	f8bd 5064 	ldrh.w	r5, [sp, #100]	; 0x64
90019b36:	1b2d      	subs	r5, r5, r4
90019b38:	b2ad      	uxth	r5, r5
90019b3a:	2d00      	cmp	r5, #0
90019b3c:	bf18      	it	ne
90019b3e:	2400      	movne	r4, #0
90019b40:	e740      	b.n	900199c4 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x25c>
90019b42:	4b04      	ldr	r3, [pc, #16]	; (90019b54 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3ec>)
90019b44:	6818      	ldr	r0, [r3, #0]
90019b46:	6803      	ldr	r3, [r0, #0]
90019b48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90019b4a:	4798      	blx	r3
90019b4c:	b01d      	add	sp, #116	; 0x74
90019b4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90019b52:	bf00      	nop
90019b54:	24021c14 	.word	0x24021c14

90019b58 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
90019b58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90019b5c:	b09f      	sub	sp, #124	; 0x7c
90019b5e:	461d      	mov	r5, r3
90019b60:	4604      	mov	r4, r0
90019b62:	9b28      	ldr	r3, [sp, #160]	; 0xa0
90019b64:	e9cd 1213 	strd	r1, r2, [sp, #76]	; 0x4c
90019b68:	f89d 20a4 	ldrb.w	r2, [sp, #164]	; 0xa4
90019b6c:	920a      	str	r2, [sp, #40]	; 0x28
90019b6e:	2a00      	cmp	r2, #0
90019b70:	f000 81fe 	beq.w	90019f70 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x418>
90019b74:	6828      	ldr	r0, [r5, #0]
90019b76:	aa1a      	add	r2, sp, #104	; 0x68
90019b78:	6869      	ldr	r1, [r5, #4]
90019b7a:	c203      	stmia	r2!, {r0, r1}
90019b7c:	6818      	ldr	r0, [r3, #0]
90019b7e:	aa1c      	add	r2, sp, #112	; 0x70
90019b80:	6859      	ldr	r1, [r3, #4]
90019b82:	c203      	stmia	r2!, {r0, r1}
90019b84:	a81a      	add	r0, sp, #104	; 0x68
90019b86:	f7f9 fb33 	bl	900131f0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
90019b8a:	4629      	mov	r1, r5
90019b8c:	a81c      	add	r0, sp, #112	; 0x70
90019b8e:	f7f9 fb57 	bl	90013240 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
90019b92:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	; 0x6c
90019b96:	f9bd 606e 	ldrsh.w	r6, [sp, #110]	; 0x6e
90019b9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
90019b9e:	f9bd 7076 	ldrsh.w	r7, [sp, #118]	; 0x76
90019ba2:	bfdb      	ittet	le
90019ba4:	b29a      	uxthle	r2, r3
90019ba6:	f44f 6180 	movle.w	r1, #1024	; 0x400
90019baa:	2201      	movgt	r2, #1
90019bac:	fb91 f2f2 	sdivle	r2, r1, r2
90019bb0:	9201      	str	r2, [sp, #4]
90019bb2:	9801      	ldr	r0, [sp, #4]
90019bb4:	f9bd 2072 	ldrsh.w	r2, [sp, #114]	; 0x72
90019bb8:	9901      	ldr	r1, [sp, #4]
90019bba:	fb92 f0f0 	sdiv	r0, r2, r0
90019bbe:	b280      	uxth	r0, r0
90019bc0:	440e      	add	r6, r1
90019bc2:	9010      	str	r0, [sp, #64]	; 0x40
90019bc4:	3e01      	subs	r6, #1
90019bc6:	9801      	ldr	r0, [sp, #4]
90019bc8:	9d10      	ldr	r5, [sp, #64]	; 0x40
90019bca:	fb05 2510 	mls	r5, r5, r0, r2
90019bce:	fb96 f6f1 	sdiv	r6, r6, r1
90019bd2:	fb15 f503 	smulbb	r5, r5, r3
90019bd6:	f8bd 1070 	ldrh.w	r1, [sp, #112]	; 0x70
90019bda:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
90019bde:	3601      	adds	r6, #1
90019be0:	440d      	add	r5, r1
90019be2:	4419      	add	r1, r3
90019be4:	f8bd 306a 	ldrh.w	r3, [sp, #106]	; 0x6a
90019be8:	b2b6      	uxth	r6, r6
90019bea:	441a      	add	r2, r3
90019bec:	f9bd 3074 	ldrsh.w	r3, [sp, #116]	; 0x74
90019bf0:	f8ad 1070 	strh.w	r1, [sp, #112]	; 0x70
90019bf4:	b2ad      	uxth	r5, r5
90019bf6:	9304      	str	r3, [sp, #16]
90019bf8:	4b96      	ldr	r3, [pc, #600]	; (90019e54 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2fc>)
90019bfa:	f8ad 2072 	strh.w	r2, [sp, #114]	; 0x72
90019bfe:	6818      	ldr	r0, [r3, #0]
90019c00:	6803      	ldr	r3, [r0, #0]
90019c02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90019c04:	4798      	blx	r3
90019c06:	4b94      	ldr	r3, [pc, #592]	; (90019e58 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x300>)
90019c08:	f9bd 1072 	ldrsh.w	r1, [sp, #114]	; 0x72
90019c0c:	2d00      	cmp	r5, #0
90019c0e:	881a      	ldrh	r2, [r3, #0]
90019c10:	f9bd c070 	ldrsh.w	ip, [sp, #112]	; 0x70
90019c14:	fb02 f707 	mul.w	r7, r2, r7
90019c18:	fb02 c101 	mla	r1, r2, r1, ip
90019c1c:	9318      	str	r3, [sp, #96]	; 0x60
90019c1e:	eb00 0b41 	add.w	fp, r0, r1, lsl #1
90019c22:	4b8e      	ldr	r3, [pc, #568]	; (90019e5c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x304>)
90019c24:	bf18      	it	ne
90019c26:	2100      	movne	r1, #0
90019c28:	eb0b 0247 	add.w	r2, fp, r7, lsl #1
90019c2c:	eba3 0304 	sub.w	r3, r3, r4
90019c30:	920b      	str	r2, [sp, #44]	; 0x2c
90019c32:	9a14      	ldr	r2, [sp, #80]	; 0x50
90019c34:	9319      	str	r3, [sp, #100]	; 0x64
90019c36:	eb02 0686 	add.w	r6, r2, r6, lsl #2
90019c3a:	f106 0204 	add.w	r2, r6, #4
90019c3e:	9206      	str	r2, [sp, #24]
90019c40:	9a0a      	ldr	r2, [sp, #40]	; 0x28
90019c42:	ea6f 0202 	mvn.w	r2, r2
90019c46:	b2d2      	uxtb	r2, r2
90019c48:	9215      	str	r2, [sp, #84]	; 0x54
90019c4a:	9a04      	ldr	r2, [sp, #16]
90019c4c:	bf08      	it	eq
90019c4e:	4611      	moveq	r1, r2
90019c50:	2200      	movs	r2, #0
90019c52:	b289      	uxth	r1, r1
90019c54:	920d      	str	r2, [sp, #52]	; 0x34
90019c56:	9a10      	ldr	r2, [sp, #64]	; 0x40
90019c58:	9b0d      	ldr	r3, [sp, #52]	; 0x34
90019c5a:	fa12 f383 	uxtah	r3, r2, r3
90019c5e:	9a14      	ldr	r2, [sp, #80]	; 0x50
90019c60:	eb02 0383 	add.w	r3, r2, r3, lsl #2
90019c64:	3304      	adds	r3, #4
90019c66:	9307      	str	r3, [sp, #28]
90019c68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
90019c6a:	455b      	cmp	r3, fp
90019c6c:	f240 817b 	bls.w	90019f66 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x40e>
90019c70:	f8bd 306c 	ldrh.w	r3, [sp, #108]	; 0x6c
90019c74:	f04f 0801 	mov.w	r8, #1
90019c78:	9a01      	ldr	r2, [sp, #4]
90019c7a:	9807      	ldr	r0, [sp, #28]
90019c7c:	46c4      	mov	ip, r8
90019c7e:	f8cd 8008 	str.w	r8, [sp, #8]
90019c82:	7800      	ldrb	r0, [r0, #0]
90019c84:	fbb5 f3f3 	udiv	r3, r5, r3
90019c88:	1ad3      	subs	r3, r2, r3
90019c8a:	9011      	str	r0, [sp, #68]	; 0x44
90019c8c:	3001      	adds	r0, #1
90019c8e:	b29b      	uxth	r3, r3
90019c90:	9005      	str	r0, [sp, #20]
90019c92:	9316      	str	r3, [sp, #88]	; 0x58
90019c94:	9b07      	ldr	r3, [sp, #28]
90019c96:	785a      	ldrb	r2, [r3, #1]
90019c98:	789b      	ldrb	r3, [r3, #2]
90019c9a:	021b      	lsls	r3, r3, #8
90019c9c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
90019ca0:	9a07      	ldr	r2, [sp, #28]
90019ca2:	78d2      	ldrb	r2, [r2, #3]
90019ca4:	4313      	orrs	r3, r2
90019ca6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
90019ca8:	441a      	add	r2, r3
90019caa:	1c50      	adds	r0, r2, #1
90019cac:	7852      	ldrb	r2, [r2, #1]
90019cae:	9003      	str	r0, [sp, #12]
90019cb0:	0212      	lsls	r2, r2, #8
90019cb2:	9813      	ldr	r0, [sp, #76]	; 0x4c
90019cb4:	f402 72ff 	and.w	r2, r2, #510	; 0x1fe
90019cb8:	5cc3      	ldrb	r3, [r0, r3]
90019cba:	431a      	orrs	r2, r3
90019cbc:	b293      	uxth	r3, r2
90019cbe:	f884 2804 	strb.w	r2, [r4, #2052]	; 0x804
90019cc2:	930c      	str	r3, [sp, #48]	; 0x30
90019cc4:	2300      	movs	r3, #0
90019cc6:	9308      	str	r3, [sp, #32]
90019cc8:	461a      	mov	r2, r3
90019cca:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
90019cce:	930e      	str	r3, [sp, #56]	; 0x38
90019cd0:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
90019cd4:	930f      	str	r3, [sp, #60]	; 0x3c
90019cd6:	2d00      	cmp	r5, #0
90019cd8:	d07d      	beq.n	90019dd6 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x27e>
90019cda:	45ac      	cmp	ip, r5
90019cdc:	d26d      	bcs.n	90019dba <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x262>
90019cde:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
90019ce0:	eba5 050c 	sub.w	r5, r5, ip
90019ce4:	4608      	mov	r0, r1
90019ce6:	455b      	cmp	r3, fp
90019ce8:	b2ad      	uxth	r5, r5
90019cea:	d802      	bhi.n	90019cf2 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x19a>
90019cec:	e071      	b.n	90019dd2 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x27a>
90019cee:	2b00      	cmp	r3, #0
90019cf0:	d15d      	bne.n	90019dae <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x256>
90019cf2:	9b03      	ldr	r3, [sp, #12]
90019cf4:	9a02      	ldr	r2, [sp, #8]
90019cf6:	785b      	ldrb	r3, [r3, #1]
90019cf8:	f1c2 0207 	rsb	r2, r2, #7
90019cfc:	9902      	ldr	r1, [sp, #8]
90019cfe:	4093      	lsls	r3, r2
90019d00:	005b      	lsls	r3, r3, #1
90019d02:	f403 72ff 	and.w	r2, r3, #510	; 0x1fe
90019d06:	9b03      	ldr	r3, [sp, #12]
90019d08:	781b      	ldrb	r3, [r3, #0]
90019d0a:	410b      	asrs	r3, r1
90019d0c:	3101      	adds	r1, #1
90019d0e:	b2c9      	uxtb	r1, r1
90019d10:	b2db      	uxtb	r3, r3
90019d12:	2908      	cmp	r1, #8
90019d14:	9102      	str	r1, [sp, #8]
90019d16:	9903      	ldr	r1, [sp, #12]
90019d18:	ea43 0302 	orr.w	r3, r3, r2
90019d1c:	bf0c      	ite	eq
90019d1e:	3102      	addeq	r1, #2
90019d20:	3101      	addne	r1, #1
90019d22:	b29a      	uxth	r2, r3
90019d24:	bf05      	ittet	eq
90019d26:	9103      	streq	r1, [sp, #12]
90019d28:	2100      	moveq	r1, #0
90019d2a:	9103      	strne	r1, [sp, #12]
90019d2c:	9102      	streq	r1, [sp, #8]
90019d2e:	9911      	ldr	r1, [sp, #68]	; 0x44
90019d30:	4291      	cmp	r1, r2
90019d32:	d30a      	bcc.n	90019d4a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1f2>
90019d34:	f884 3804 	strb.w	r3, [r4, #2052]	; 0x804
90019d38:	2301      	movs	r3, #1
90019d3a:	9905      	ldr	r1, [sp, #20]
90019d3c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
90019d40:	d30f      	bcc.n	90019d62 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x20a>
90019d42:	2100      	movs	r1, #0
90019d44:	4698      	mov	r8, r3
90019d46:	9100      	str	r1, [sp, #0]
90019d48:	e032      	b.n	90019db0 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x258>
90019d4a:	9b05      	ldr	r3, [sp, #20]
90019d4c:	429a      	cmp	r2, r3
90019d4e:	d318      	bcc.n	90019d82 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x22a>
90019d50:	eb04 0308 	add.w	r3, r4, r8
90019d54:	f894 1804 	ldrb.w	r1, [r4, #2052]	; 0x804
90019d58:	f883 1804 	strb.w	r1, [r3, #2052]	; 0x804
90019d5c:	f108 0301 	add.w	r3, r8, #1
90019d60:	b29b      	uxth	r3, r3
90019d62:	9905      	ldr	r1, [sp, #20]
90019d64:	f894 6804 	ldrb.w	r6, [r4, #2052]	; 0x804
90019d68:	eb04 0181 	add.w	r1, r4, r1, lsl #2
90019d6c:	710e      	strb	r6, [r1, #4]
90019d6e:	9e0c      	ldr	r6, [sp, #48]	; 0x30
90019d70:	80ce      	strh	r6, [r1, #6]
90019d72:	f108 0601 	add.w	r6, r8, #1
90019d76:	714e      	strb	r6, [r1, #5]
90019d78:	9905      	ldr	r1, [sp, #20]
90019d7a:	3101      	adds	r1, #1
90019d7c:	b289      	uxth	r1, r1
90019d7e:	9105      	str	r1, [sp, #20]
90019d80:	e7df      	b.n	90019d42 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1ea>
90019d82:	eb04 0382 	add.w	r3, r4, r2, lsl #2
90019d86:	4611      	mov	r1, r2
90019d88:	795b      	ldrb	r3, [r3, #5]
90019d8a:	f603 0604 	addw	r6, r3, #2052	; 0x804
90019d8e:	4426      	add	r6, r4
90019d90:	9f19      	ldr	r7, [sp, #100]	; 0x64
90019d92:	4437      	add	r7, r6
90019d94:	2f00      	cmp	r7, #0
90019d96:	dd06      	ble.n	90019da6 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x24e>
90019d98:	eb04 0181 	add.w	r1, r4, r1, lsl #2
90019d9c:	790f      	ldrb	r7, [r1, #4]
90019d9e:	f806 7d01 	strb.w	r7, [r6, #-1]!
90019da2:	88c9      	ldrh	r1, [r1, #6]
90019da4:	e7f4      	b.n	90019d90 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x238>
90019da6:	f884 1804 	strb.w	r1, [r4, #2052]	; 0x804
90019daa:	b29b      	uxth	r3, r3
90019dac:	e7c5      	b.n	90019d3a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1e2>
90019dae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
90019db0:	920c      	str	r2, [sp, #48]	; 0x30
90019db2:	4601      	mov	r1, r0
90019db4:	9a00      	ldr	r2, [sp, #0]
90019db6:	469c      	mov	ip, r3
90019db8:	e78d      	b.n	90019cd6 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x17e>
90019dba:	ebac 0305 	sub.w	r3, ip, r5
90019dbe:	1957      	adds	r7, r2, r5
90019dc0:	f8bd 0010 	ldrh.w	r0, [sp, #16]
90019dc4:	b2ba      	uxth	r2, r7
90019dc6:	b29b      	uxth	r3, r3
90019dc8:	9200      	str	r2, [sp, #0]
90019dca:	2500      	movs	r5, #0
90019dcc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
90019dce:	455a      	cmp	r2, fp
90019dd0:	d88d      	bhi.n	90019cee <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x196>
90019dd2:	4601      	mov	r1, r0
90019dd4:	e748      	b.n	90019c68 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x110>
90019dd6:	458c      	cmp	ip, r1
90019dd8:	bf27      	ittee	cs
90019dda:	ebac 0301 	subcs.w	r3, ip, r1
90019dde:	4628      	movcs	r0, r5
90019de0:	eba1 000c 	subcc.w	r0, r1, ip
90019de4:	462b      	movcc	r3, r5
90019de6:	9d0a      	ldr	r5, [sp, #40]	; 0x28
90019de8:	bf27      	ittee	cs
90019dea:	b29b      	uxthcs	r3, r3
90019dec:	9109      	strcs	r1, [sp, #36]	; 0x24
90019dee:	b280      	uxthcc	r0, r0
90019df0:	f8cd c024 	strcc.w	ip, [sp, #36]	; 0x24
90019df4:	2dff      	cmp	r5, #255	; 0xff
90019df6:	9d09      	ldr	r5, [sp, #36]	; 0x24
90019df8:	eb02 0705 	add.w	r7, r2, r5
90019dfc:	b2bd      	uxth	r5, r7
90019dfe:	9500      	str	r5, [sp, #0]
90019e00:	d12e      	bne.n	90019e60 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x308>
90019e02:	465e      	mov	r6, fp
90019e04:	9d00      	ldr	r5, [sp, #0]
90019e06:	42aa      	cmp	r2, r5
90019e08:	f040 8083 	bne.w	90019f12 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3ba>
90019e0c:	9a09      	ldr	r2, [sp, #36]	; 0x24
90019e0e:	458c      	cmp	ip, r1
90019e10:	eb0b 0b42 	add.w	fp, fp, r2, lsl #1
90019e14:	d3d9      	bcc.n	90019dca <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x272>
90019e16:	9a18      	ldr	r2, [sp, #96]	; 0x60
90019e18:	9904      	ldr	r1, [sp, #16]
90019e1a:	8812      	ldrh	r2, [r2, #0]
90019e1c:	1a52      	subs	r2, r2, r1
90019e1e:	9916      	ldr	r1, [sp, #88]	; 0x58
90019e20:	eb0b 0b42 	add.w	fp, fp, r2, lsl #1
90019e24:	9a08      	ldr	r2, [sp, #32]
90019e26:	3201      	adds	r2, #1
90019e28:	428a      	cmp	r2, r1
90019e2a:	9208      	str	r2, [sp, #32]
90019e2c:	f040 8091 	bne.w	90019f52 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3fa>
90019e30:	f8bd 5070 	ldrh.w	r5, [sp, #112]	; 0x70
90019e34:	f8bd c068 	ldrh.w	ip, [sp, #104]	; 0x68
90019e38:	9b04      	ldr	r3, [sp, #16]
90019e3a:	eba5 050c 	sub.w	r5, r5, ip
90019e3e:	b2ad      	uxth	r5, r5
90019e40:	2d00      	cmp	r5, #0
90019e42:	bf08      	it	eq
90019e44:	4619      	moveq	r1, r3
90019e46:	9b0d      	ldr	r3, [sp, #52]	; 0x34
90019e48:	bf18      	it	ne
90019e4a:	2100      	movne	r1, #0
90019e4c:	3301      	adds	r3, #1
90019e4e:	b289      	uxth	r1, r1
90019e50:	930d      	str	r3, [sp, #52]	; 0x34
90019e52:	e700      	b.n	90019c56 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xfe>
90019e54:	24021c14 	.word	0x24021c14
90019e58:	24021c0e 	.word	0x24021c0e
90019e5c:	fffff7fb 	.word	0xfffff7fb
90019e60:	46d9      	mov	r9, fp
90019e62:	9d00      	ldr	r5, [sp, #0]
90019e64:	42aa      	cmp	r2, r5
90019e66:	d0d1      	beq.n	90019e0c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2b4>
90019e68:	1c55      	adds	r5, r2, #1
90019e6a:	4422      	add	r2, r4
90019e6c:	f892 e804 	ldrb.w	lr, [r2, #2052]	; 0x804
90019e70:	9a06      	ldr	r2, [sp, #24]
90019e72:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
90019e76:	9517      	str	r5, [sp, #92]	; 0x5c
90019e78:	4472      	add	r2, lr
90019e7a:	9212      	str	r2, [sp, #72]	; 0x48
90019e7c:	f8b9 2000 	ldrh.w	r2, [r9]
90019e80:	9f12      	ldr	r7, [sp, #72]	; 0x48
90019e82:	1216      	asrs	r6, r2, #8
90019e84:	f897 a002 	ldrb.w	sl, [r7, #2]
90019e88:	10d5      	asrs	r5, r2, #3
90019e8a:	9f0e      	ldr	r7, [sp, #56]	; 0x38
90019e8c:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
90019e90:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
90019e94:	00d2      	lsls	r2, r2, #3
90019e96:	fb1a fa07 	smulbb	sl, sl, r7
90019e9a:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
90019e9e:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
90019ea0:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
90019ea4:	b2d2      	uxtb	r2, r2
90019ea6:	fb06 a607 	mla	r6, r6, r7, sl
90019eaa:	9f12      	ldr	r7, [sp, #72]	; 0x48
90019eac:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
90019eb0:	f897 a001 	ldrb.w	sl, [r7, #1]
90019eb4:	b2b6      	uxth	r6, r6
90019eb6:	9f0e      	ldr	r7, [sp, #56]	; 0x38
90019eb8:	fb1a fa07 	smulbb	sl, sl, r7
90019ebc:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
90019ebe:	fb05 a507 	mla	r5, r5, r7, sl
90019ec2:	9f06      	ldr	r7, [sp, #24]
90019ec4:	f106 0a01 	add.w	sl, r6, #1
90019ec8:	f817 e00e 	ldrb.w	lr, [r7, lr]
90019ecc:	b2ad      	uxth	r5, r5
90019ece:	9f0e      	ldr	r7, [sp, #56]	; 0x38
90019ed0:	eb0a 2616 	add.w	r6, sl, r6, lsr #8
90019ed4:	f105 0a01 	add.w	sl, r5, #1
90019ed8:	fb1e fe07 	smulbb	lr, lr, r7
90019edc:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
90019ede:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
90019ee2:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
90019ee6:	fb02 e207 	mla	r2, r2, r7, lr
90019eea:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
90019eee:	b292      	uxth	r2, r2
90019ef0:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
90019ef4:	f102 0e01 	add.w	lr, r2, #1
90019ef8:	eb0e 2e12 	add.w	lr, lr, r2, lsr #8
90019efc:	f8bd 205c 	ldrh.w	r2, [sp, #92]	; 0x5c
90019f00:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
90019f04:	ea4e 0606 	orr.w	r6, lr, r6
90019f08:	ea46 060a 	orr.w	r6, r6, sl
90019f0c:	f829 6b02 	strh.w	r6, [r9], #2
90019f10:	e7a7      	b.n	90019e62 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x30a>
90019f12:	f102 0e01 	add.w	lr, r2, #1
90019f16:	4422      	add	r2, r4
90019f18:	9f06      	ldr	r7, [sp, #24]
90019f1a:	f892 5804 	ldrb.w	r5, [r2, #2052]	; 0x804
90019f1e:	9a06      	ldr	r2, [sp, #24]
90019f20:	eb05 0545 	add.w	r5, r5, r5, lsl #1
90019f24:	eb02 0a05 	add.w	sl, r2, r5
90019f28:	4a13      	ldr	r2, [pc, #76]	; (90019f78 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x420>)
90019f2a:	f89a 9002 	ldrb.w	r9, [sl, #2]
90019f2e:	ea02 2909 	and.w	r9, r2, r9, lsl #8
90019f32:	f89a 2001 	ldrb.w	r2, [sl, #1]
90019f36:	00d2      	lsls	r2, r2, #3
90019f38:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
90019f3c:	ea49 0202 	orr.w	r2, r9, r2
90019f40:	f817 9005 	ldrb.w	r9, [r7, r5]
90019f44:	ea42 02d9 	orr.w	r2, r2, r9, lsr #3
90019f48:	f826 2b02 	strh.w	r2, [r6], #2
90019f4c:	fa1f f28e 	uxth.w	r2, lr
90019f50:	e758      	b.n	90019e04 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2ac>
90019f52:	f8bd 0010 	ldrh.w	r0, [sp, #16]
90019f56:	f8bd 506c 	ldrh.w	r5, [sp, #108]	; 0x6c
90019f5a:	1a2d      	subs	r5, r5, r0
90019f5c:	b2ad      	uxth	r5, r5
90019f5e:	2d00      	cmp	r5, #0
90019f60:	bf18      	it	ne
90019f62:	2000      	movne	r0, #0
90019f64:	e732      	b.n	90019dcc <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x274>
90019f66:	4b05      	ldr	r3, [pc, #20]	; (90019f7c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x424>)
90019f68:	6818      	ldr	r0, [r3, #0]
90019f6a:	6803      	ldr	r3, [r0, #0]
90019f6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90019f6e:	4798      	blx	r3
90019f70:	b01f      	add	sp, #124	; 0x7c
90019f72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90019f76:	bf00      	nop
90019f78:	fffff800 	.word	0xfffff800
90019f7c:	24021c14 	.word	0x24021c14

90019f80 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
90019f80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90019f84:	b091      	sub	sp, #68	; 0x44
90019f86:	469b      	mov	fp, r3
90019f88:	4616      	mov	r6, r2
90019f8a:	f9b3 2000 	ldrsh.w	r2, [r3]
90019f8e:	f10d 0828 	add.w	r8, sp, #40	; 0x28
90019f92:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
90019f96:	f9bd 906c 	ldrsh.w	r9, [sp, #108]	; 0x6c
90019f9a:	4604      	mov	r4, r0
90019f9c:	f9bd 7070 	ldrsh.w	r7, [sp, #112]	; 0x70
90019fa0:	4640      	mov	r0, r8
90019fa2:	460d      	mov	r5, r1
90019fa4:	4659      	mov	r1, fp
90019fa6:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
90019faa:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
90019fae:	f8ad 902c 	strh.w	r9, [sp, #44]	; 0x2c
90019fb2:	f8ad 702e 	strh.w	r7, [sp, #46]	; 0x2e
90019fb6:	f7f7 f94d 	bl	90011254 <_ZN8touchgfx4RectaNERKS0_>
90019fba:	4631      	mov	r1, r6
90019fbc:	4640      	mov	r0, r8
90019fbe:	f7f7 f949 	bl	90011254 <_ZN8touchgfx4RectaNERKS0_>
90019fc2:	4b74      	ldr	r3, [pc, #464]	; (9001a194 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x214>)
90019fc4:	8818      	ldrh	r0, [r3, #0]
90019fc6:	4b74      	ldr	r3, [pc, #464]	; (9001a198 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x218>)
90019fc8:	b202      	sxth	r2, r0
90019fca:	8819      	ldrh	r1, [r3, #0]
90019fcc:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
90019fd0:	b20e      	sxth	r6, r1
90019fd2:	2b00      	cmp	r3, #0
90019fd4:	da07      	bge.n	90019fe6 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x66>
90019fd6:	f8bd c02c 	ldrh.w	ip, [sp, #44]	; 0x2c
90019fda:	4463      	add	r3, ip
90019fdc:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
90019fe0:	2300      	movs	r3, #0
90019fe2:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
90019fe6:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
90019fea:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	; 0x2c
90019fee:	1ad2      	subs	r2, r2, r3
90019ff0:	4594      	cmp	ip, r2
90019ff2:	bfc4      	itt	gt
90019ff4:	1ac2      	subgt	r2, r0, r3
90019ff6:	f8ad 202c 	strhgt.w	r2, [sp, #44]	; 0x2c
90019ffa:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
90019ffe:	2a00      	cmp	r2, #0
9001a000:	da07      	bge.n	9001a012 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x92>
9001a002:	f8bd c02e 	ldrh.w	ip, [sp, #46]	; 0x2e
9001a006:	4462      	add	r2, ip
9001a008:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
9001a00c:	2200      	movs	r2, #0
9001a00e:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
9001a012:	f9bd a02a 	ldrsh.w	sl, [sp, #42]	; 0x2a
9001a016:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	; 0x2e
9001a01a:	eba6 060a 	sub.w	r6, r6, sl
9001a01e:	42b2      	cmp	r2, r6
9001a020:	bfc4      	itt	gt
9001a022:	eba1 020a 	subgt.w	r2, r1, sl
9001a026:	f8ad 202e 	strhgt.w	r2, [sp, #46]	; 0x2e
9001a02a:	4a5c      	ldr	r2, [pc, #368]	; (9001a19c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x21c>)
9001a02c:	7812      	ldrb	r2, [r2, #0]
9001a02e:	b9a2      	cbnz	r2, 9001a05a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xda>
9001a030:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	; 0x2c
9001a034:	4286      	cmp	r6, r0
9001a036:	4640      	mov	r0, r8
9001a038:	9303      	str	r3, [sp, #12]
9001a03a:	bf14      	ite	ne
9001a03c:	2600      	movne	r6, #0
9001a03e:	2601      	moveq	r6, #1
9001a040:	f7f7 f94b 	bl	900112da <_ZNK8touchgfx4Rect7isEmptyEv>
9001a044:	9b03      	ldr	r3, [sp, #12]
9001a046:	b160      	cbz	r0, 9001a062 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xe2>
9001a048:	2300      	movs	r3, #0
9001a04a:	8023      	strh	r3, [r4, #0]
9001a04c:	8063      	strh	r3, [r4, #2]
9001a04e:	80a3      	strh	r3, [r4, #4]
9001a050:	4620      	mov	r0, r4
9001a052:	80e3      	strh	r3, [r4, #6]
9001a054:	b011      	add	sp, #68	; 0x44
9001a056:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001a05a:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
9001a05e:	428e      	cmp	r6, r1
9001a060:	e7e9      	b.n	9001a036 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xb6>
9001a062:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
9001a066:	a90e      	add	r1, sp, #56	; 0x38
9001a068:	900e      	str	r0, [sp, #56]	; 0x38
9001a06a:	a80c      	add	r0, sp, #48	; 0x30
9001a06c:	9205      	str	r2, [sp, #20]
9001a06e:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	; 0x2e
9001a072:	f8ad 903c 	strh.w	r9, [sp, #60]	; 0x3c
9001a076:	9206      	str	r2, [sp, #24]
9001a078:	f8bb 2000 	ldrh.w	r2, [fp]
9001a07c:	f8ad 703e 	strh.w	r7, [sp, #62]	; 0x3e
9001a080:	1a9b      	subs	r3, r3, r2
9001a082:	b21b      	sxth	r3, r3
9001a084:	9303      	str	r3, [sp, #12]
9001a086:	f8bb 3002 	ldrh.w	r3, [fp, #2]
9001a08a:	f8df b118 	ldr.w	fp, [pc, #280]	; 9001a1a4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>
9001a08e:	ebaa 0a03 	sub.w	sl, sl, r3
9001a092:	fa0f f38a 	sxth.w	r3, sl
9001a096:	9304      	str	r3, [sp, #16]
9001a098:	9b03      	ldr	r3, [sp, #12]
9001a09a:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
9001a09e:	9b04      	ldr	r3, [sp, #16]
9001a0a0:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
9001a0a4:	9b05      	ldr	r3, [sp, #20]
9001a0a6:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
9001a0aa:	9b06      	ldr	r3, [sp, #24]
9001a0ac:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
9001a0b0:	f7f9 f8c6 	bl	90013240 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
9001a0b4:	4640      	mov	r0, r8
9001a0b6:	f7f9 f89b 	bl	900131f0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
9001a0ba:	a80e      	add	r0, sp, #56	; 0x38
9001a0bc:	f7f9 f898 	bl	900131f0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
9001a0c0:	4b37      	ldr	r3, [pc, #220]	; (9001a1a0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x220>)
9001a0c2:	4628      	mov	r0, r5
9001a0c4:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
9001a0c8:	881b      	ldrh	r3, [r3, #0]
9001a0ca:	9307      	str	r3, [sp, #28]
9001a0cc:	682b      	ldr	r3, [r5, #0]
9001a0ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
9001a0d0:	4798      	blx	r3
9001a0d2:	f8bd 5032 	ldrh.w	r5, [sp, #50]	; 0x32
9001a0d6:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
9001a0da:	4681      	mov	r9, r0
9001a0dc:	f8db 0000 	ldr.w	r0, [fp]
9001a0e0:	fb1a 3305 	smlabb	r3, sl, r5, r3
9001a0e4:	9d1a      	ldr	r5, [sp, #104]	; 0x68
9001a0e6:	eb05 0543 	add.w	r5, r5, r3, lsl #1
9001a0ea:	6803      	ldr	r3, [r0, #0]
9001a0ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
9001a0ee:	4798      	blx	r3
9001a0f0:	4607      	mov	r7, r0
9001a0f2:	f8db 0000 	ldr.w	r0, [fp]
9001a0f6:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
9001a0fa:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
9001a0fe:	6803      	ldr	r3, [r0, #0]
9001a100:	9109      	str	r1, [sp, #36]	; 0x24
9001a102:	9208      	str	r2, [sp, #32]
9001a104:	6b9b      	ldr	r3, [r3, #56]	; 0x38
9001a106:	4798      	blx	r3
9001a108:	f010 0f01 	tst.w	r0, #1
9001a10c:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
9001a110:	d012      	beq.n	9001a138 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1b8>
9001a112:	f8db 0000 	ldr.w	r0, [fp]
9001a116:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
9001a11a:	6803      	ldr	r3, [r0, #0]
9001a11c:	9200      	str	r2, [sp, #0]
9001a11e:	6ede      	ldr	r6, [r3, #108]	; 0x6c
9001a120:	462b      	mov	r3, r5
9001a122:	e898 0006 	ldmia.w	r8, {r1, r2}
9001a126:	47b0      	blx	r6
9001a128:	9b03      	ldr	r3, [sp, #12]
9001a12a:	8023      	strh	r3, [r4, #0]
9001a12c:	9b04      	ldr	r3, [sp, #16]
9001a12e:	8063      	strh	r3, [r4, #2]
9001a130:	9b05      	ldr	r3, [sp, #20]
9001a132:	80a3      	strh	r3, [r4, #4]
9001a134:	9b06      	ldr	r3, [sp, #24]
9001a136:	e78b      	b.n	9001a050 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xd0>
9001a138:	fb09 f202 	mul.w	r2, r9, r2
9001a13c:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
9001a140:	eb02 0141 	add.w	r1, r2, r1, lsl #1
9001a144:	440f      	add	r7, r1
9001a146:	b166      	cbz	r6, 9001a162 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e2>
9001a148:	9a07      	ldr	r2, [sp, #28]
9001a14a:	4592      	cmp	sl, r2
9001a14c:	d109      	bne.n	9001a162 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e2>
9001a14e:	f8db 0000 	ldr.w	r0, [fp]
9001a152:	fb09 f303 	mul.w	r3, r9, r3
9001a156:	4629      	mov	r1, r5
9001a158:	6802      	ldr	r2, [r0, #0]
9001a15a:	6b56      	ldr	r6, [r2, #52]	; 0x34
9001a15c:	463a      	mov	r2, r7
9001a15e:	47b0      	blx	r6
9001a160:	e7e2      	b.n	9001a128 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
9001a162:	fb0a f303 	mul.w	r3, sl, r3
9001a166:	ea4f 064a 	mov.w	r6, sl, lsl #1
9001a16a:	f8df b038 	ldr.w	fp, [pc, #56]	; 9001a1a4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>
9001a16e:	eb05 0843 	add.w	r8, r5, r3, lsl #1
9001a172:	4545      	cmp	r5, r8
9001a174:	d2d8      	bcs.n	9001a128 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
9001a176:	f8db 0000 	ldr.w	r0, [fp]
9001a17a:	4629      	mov	r1, r5
9001a17c:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
9001a180:	4435      	add	r5, r6
9001a182:	6802      	ldr	r2, [r0, #0]
9001a184:	005b      	lsls	r3, r3, #1
9001a186:	f8d2 a034 	ldr.w	sl, [r2, #52]	; 0x34
9001a18a:	463a      	mov	r2, r7
9001a18c:	47d0      	blx	sl
9001a18e:	444f      	add	r7, r9
9001a190:	e7ef      	b.n	9001a172 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f2>
9001a192:	bf00      	nop
9001a194:	24021c08 	.word	0x24021c08
9001a198:	24021c0a 	.word	0x24021c0a
9001a19c:	24021c0c 	.word	0x24021c0c
9001a1a0:	24021c0e 	.word	0x24021c0e
9001a1a4:	24021c14 	.word	0x24021c14

9001a1a8 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh>:
9001a1a8:	b5f0      	push	{r4, r5, r6, r7, lr}
9001a1aa:	4606      	mov	r6, r0
9001a1ac:	b087      	sub	sp, #28
9001a1ae:	460c      	mov	r4, r1
9001a1b0:	4617      	mov	r7, r2
9001a1b2:	461d      	mov	r5, r3
9001a1b4:	b333      	cbz	r3, 9001a204 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
9001a1b6:	4608      	mov	r0, r1
9001a1b8:	f7f7 f88f 	bl	900112da <_ZNK8touchgfx4Rect7isEmptyEv>
9001a1bc:	bb10      	cbnz	r0, 9001a204 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
9001a1be:	6820      	ldr	r0, [r4, #0]
9001a1c0:	ab04      	add	r3, sp, #16
9001a1c2:	6861      	ldr	r1, [r4, #4]
9001a1c4:	4c1b      	ldr	r4, [pc, #108]	; (9001a234 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x8c>)
9001a1c6:	c303      	stmia	r3!, {r0, r1}
9001a1c8:	a804      	add	r0, sp, #16
9001a1ca:	f7f9 f811 	bl	900131f0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
9001a1ce:	6820      	ldr	r0, [r4, #0]
9001a1d0:	6803      	ldr	r3, [r0, #0]
9001a1d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
9001a1d4:	4798      	blx	r3
9001a1d6:	2dff      	cmp	r5, #255	; 0xff
9001a1d8:	d016      	beq.n	9001a208 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x60>
9001a1da:	f010 0f08 	tst.w	r0, #8
9001a1de:	6820      	ldr	r0, [r4, #0]
9001a1e0:	d015      	beq.n	9001a20e <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
9001a1e2:	2400      	movs	r4, #0
9001a1e4:	6801      	ldr	r1, [r0, #0]
9001a1e6:	f8bd 3012 	ldrh.w	r3, [sp, #18]
9001a1ea:	f8bd 2010 	ldrh.w	r2, [sp, #16]
9001a1ee:	e9cd 5402 	strd	r5, r4, [sp, #8]
9001a1f2:	f8bd 4016 	ldrh.w	r4, [sp, #22]
9001a1f6:	9401      	str	r4, [sp, #4]
9001a1f8:	f8bd 4014 	ldrh.w	r4, [sp, #20]
9001a1fc:	9400      	str	r4, [sp, #0]
9001a1fe:	6e0c      	ldr	r4, [r1, #96]	; 0x60
9001a200:	4639      	mov	r1, r7
9001a202:	47a0      	blx	r4
9001a204:	b007      	add	sp, #28
9001a206:	bdf0      	pop	{r4, r5, r6, r7, pc}
9001a208:	f010 0f02 	tst.w	r0, #2
9001a20c:	e7e7      	b.n	9001a1de <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x36>
9001a20e:	6803      	ldr	r3, [r0, #0]
9001a210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9001a212:	4798      	blx	r3
9001a214:	4b08      	ldr	r3, [pc, #32]	; (9001a238 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
9001a216:	4601      	mov	r1, r0
9001a218:	4630      	mov	r0, r6
9001a21a:	881a      	ldrh	r2, [r3, #0]
9001a21c:	6833      	ldr	r3, [r6, #0]
9001a21e:	e9cd 7500 	strd	r7, r5, [sp]
9001a222:	6a5d      	ldr	r5, [r3, #36]	; 0x24
9001a224:	ab04      	add	r3, sp, #16
9001a226:	47a8      	blx	r5
9001a228:	6820      	ldr	r0, [r4, #0]
9001a22a:	6803      	ldr	r3, [r0, #0]
9001a22c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9001a22e:	4798      	blx	r3
9001a230:	e7e8      	b.n	9001a204 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
9001a232:	bf00      	nop
9001a234:	24021c14 	.word	0x24021c14
9001a238:	24021c0e 	.word	0x24021c0e

9001a23c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
9001a23c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
9001a240:	f89d 7024 	ldrb.w	r7, [sp, #36]	; 0x24
9001a244:	4688      	mov	r8, r1
9001a246:	4614      	mov	r4, r2
9001a248:	461d      	mov	r5, r3
9001a24a:	9e08      	ldr	r6, [sp, #32]
9001a24c:	2f00      	cmp	r7, #0
9001a24e:	f000 80ab 	beq.w	9001a3a8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
9001a252:	4618      	mov	r0, r3
9001a254:	f7f7 f841 	bl	900112da <_ZNK8touchgfx4Rect7isEmptyEv>
9001a258:	2800      	cmp	r0, #0
9001a25a:	f040 80a5 	bne.w	9001a3a8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
9001a25e:	f9b5 1000 	ldrsh.w	r1, [r5]
9001a262:	2fff      	cmp	r7, #255	; 0xff
9001a264:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
9001a268:	f9b5 0004 	ldrsh.w	r0, [r5, #4]
9001a26c:	fb04 1303 	mla	r3, r4, r3, r1
9001a270:	f9b5 5006 	ldrsh.w	r5, [r5, #6]
9001a274:	eba4 0200 	sub.w	r2, r4, r0
9001a278:	eb08 0143 	add.w	r1, r8, r3, lsl #1
9001a27c:	fb04 f505 	mul.w	r5, r4, r5
9001a280:	ea4f 2816 	mov.w	r8, r6, lsr #8
9001a284:	eb01 0545 	add.w	r5, r1, r5, lsl #1
9001a288:	d04a      	beq.n	9001a320 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe4>
9001a28a:	b2bc      	uxth	r4, r7
9001a28c:	f1c7 0cff 	rsb	ip, r7, #255	; 0xff
9001a290:	f3c6 4e07 	ubfx	lr, r6, #16, #8
9001a294:	fa5f f788 	uxtb.w	r7, r8
9001a298:	b2f3      	uxtb	r3, r6
9001a29a:	0040      	lsls	r0, r0, #1
9001a29c:	fb0e fe04 	mul.w	lr, lr, r4
9001a2a0:	4367      	muls	r7, r4
9001a2a2:	ea4f 0842 	mov.w	r8, r2, lsl #1
9001a2a6:	4363      	muls	r3, r4
9001a2a8:	fa1f fc8c 	uxth.w	ip, ip
9001a2ac:	42a9      	cmp	r1, r5
9001a2ae:	d27b      	bcs.n	9001a3a8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
9001a2b0:	eb01 0900 	add.w	r9, r1, r0
9001a2b4:	4549      	cmp	r1, r9
9001a2b6:	d231      	bcs.n	9001a31c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe0>
9001a2b8:	880a      	ldrh	r2, [r1, #0]
9001a2ba:	1214      	asrs	r4, r2, #8
9001a2bc:	10d6      	asrs	r6, r2, #3
9001a2be:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
9001a2c2:	00d2      	lsls	r2, r2, #3
9001a2c4:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
9001a2c8:	b2d2      	uxtb	r2, r2
9001a2ca:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
9001a2ce:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
9001a2d2:	fb14 f40c 	smulbb	r4, r4, ip
9001a2d6:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
9001a2da:	fb12 f20c 	smulbb	r2, r2, ip
9001a2de:	fb16 f60c 	smulbb	r6, r6, ip
9001a2e2:	4474      	add	r4, lr
9001a2e4:	441a      	add	r2, r3
9001a2e6:	b2a4      	uxth	r4, r4
9001a2e8:	443e      	add	r6, r7
9001a2ea:	b292      	uxth	r2, r2
9001a2ec:	f104 0a01 	add.w	sl, r4, #1
9001a2f0:	b2b6      	uxth	r6, r6
9001a2f2:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
9001a2f6:	f102 0a01 	add.w	sl, r2, #1
9001a2fa:	eb0a 2212 	add.w	r2, sl, r2, lsr #8
9001a2fe:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
9001a302:	f3c2 22c4 	ubfx	r2, r2, #11, #5
9001a306:	4322      	orrs	r2, r4
9001a308:	1c74      	adds	r4, r6, #1
9001a30a:	eb04 2616 	add.w	r6, r4, r6, lsr #8
9001a30e:	0976      	lsrs	r6, r6, #5
9001a310:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
9001a314:	4332      	orrs	r2, r6
9001a316:	f821 2b02 	strh.w	r2, [r1], #2
9001a31a:	e7cb      	b.n	9001a2b4 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x78>
9001a31c:	4441      	add	r1, r8
9001a31e:	e7c5      	b.n	9001a2ac <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x70>
9001a320:	0973      	lsrs	r3, r6, #5
9001a322:	4f22      	ldr	r7, [pc, #136]	; (9001a3ac <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x170>)
9001a324:	f3c6 06c4 	ubfx	r6, r6, #3, #5
9001a328:	ea08 0707 	and.w	r7, r8, r7
9001a32c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9001a330:	433b      	orrs	r3, r7
9001a332:	07e7      	lsls	r7, r4, #31
9001a334:	ea43 0306 	orr.w	r3, r3, r6
9001a338:	b29b      	uxth	r3, r3
9001a33a:	d50b      	bpl.n	9001a354 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x118>
9001a33c:	0040      	lsls	r0, r0, #1
9001a33e:	0052      	lsls	r2, r2, #1
9001a340:	42a9      	cmp	r1, r5
9001a342:	d231      	bcs.n	9001a3a8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
9001a344:	180c      	adds	r4, r1, r0
9001a346:	42a1      	cmp	r1, r4
9001a348:	d202      	bcs.n	9001a350 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x114>
9001a34a:	f821 3b02 	strh.w	r3, [r1], #2
9001a34e:	e7fa      	b.n	9001a346 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x10a>
9001a350:	4411      	add	r1, r2
9001a352:	e7f5      	b.n	9001a340 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x104>
9001a354:	078e      	lsls	r6, r1, #30
9001a356:	d008      	beq.n	9001a36a <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12e>
9001a358:	0066      	lsls	r6, r4, #1
9001a35a:	460a      	mov	r2, r1
9001a35c:	42aa      	cmp	r2, r5
9001a35e:	d202      	bcs.n	9001a366 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12a>
9001a360:	8013      	strh	r3, [r2, #0]
9001a362:	4432      	add	r2, r6
9001a364:	e7fa      	b.n	9001a35c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x120>
9001a366:	3102      	adds	r1, #2
9001a368:	3801      	subs	r0, #1
9001a36a:	07c2      	lsls	r2, r0, #31
9001a36c:	d50b      	bpl.n	9001a386 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x14a>
9001a36e:	f100 4200 	add.w	r2, r0, #2147483648	; 0x80000000
9001a372:	0066      	lsls	r6, r4, #1
9001a374:	3a01      	subs	r2, #1
9001a376:	eb01 0242 	add.w	r2, r1, r2, lsl #1
9001a37a:	42aa      	cmp	r2, r5
9001a37c:	d202      	bcs.n	9001a384 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x148>
9001a37e:	8013      	strh	r3, [r2, #0]
9001a380:	4432      	add	r2, r6
9001a382:	e7fa      	b.n	9001a37a <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x13e>
9001a384:	3801      	subs	r0, #1
9001a386:	b178      	cbz	r0, 9001a3a8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
9001a388:	1040      	asrs	r0, r0, #1
9001a38a:	ea43 4303 	orr.w	r3, r3, r3, lsl #16
9001a38e:	0080      	lsls	r0, r0, #2
9001a390:	0064      	lsls	r4, r4, #1
9001a392:	42a9      	cmp	r1, r5
9001a394:	d208      	bcs.n	9001a3a8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
9001a396:	180e      	adds	r6, r1, r0
9001a398:	460a      	mov	r2, r1
9001a39a:	42b2      	cmp	r2, r6
9001a39c:	d202      	bcs.n	9001a3a4 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
9001a39e:	f842 3b04 	str.w	r3, [r2], #4
9001a3a2:	e7fa      	b.n	9001a39a <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x15e>
9001a3a4:	4421      	add	r1, r4
9001a3a6:	e7f4      	b.n	9001a392 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x156>
9001a3a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
9001a3ac:	00fff800 	.word	0x00fff800

9001a3b0 <_ZN8touchgfx8LCD16bppC1Ev>:
9001a3b0:	2200      	movs	r2, #0
9001a3b2:	4912      	ldr	r1, [pc, #72]	; (9001a3fc <_ZN8touchgfx8LCD16bppC1Ev+0x4c>)
9001a3b4:	6042      	str	r2, [r0, #4]
9001a3b6:	6001      	str	r1, [r0, #0]
9001a3b8:	e9c0 2202 	strd	r2, r2, [r0, #8]
9001a3bc:	e9c0 2204 	strd	r2, r2, [r0, #16]
9001a3c0:	e9c0 2206 	strd	r2, r2, [r0, #24]
9001a3c4:	e9c0 2208 	strd	r2, r2, [r0, #32]
9001a3c8:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
9001a3cc:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
9001a3d0:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
9001a3d4:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
9001a3d8:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
9001a3dc:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
9001a3e0:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
9001a3e4:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
9001a3e8:	e9c0 221a 	strd	r2, r2, [r0, #104]	; 0x68
9001a3ec:	e9c0 221c 	strd	r2, r2, [r0, #112]	; 0x70
9001a3f0:	e9c0 221e 	strd	r2, r2, [r0, #120]	; 0x78
9001a3f4:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
9001a3f8:	4770      	bx	lr
9001a3fa:	bf00      	nop
9001a3fc:	9002918c 	.word	0x9002918c

9001a400 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
9001a400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001a404:	b08d      	sub	sp, #52	; 0x34
9001a406:	460d      	mov	r5, r1
9001a408:	4604      	mov	r4, r0
9001a40a:	4699      	mov	r9, r3
9001a40c:	6808      	ldr	r0, [r1, #0]
9001a40e:	ab08      	add	r3, sp, #32
9001a410:	6849      	ldr	r1, [r1, #4]
9001a412:	c303      	stmia	r3!, {r0, r1}
9001a414:	6810      	ldr	r0, [r2, #0]
9001a416:	ab0a      	add	r3, sp, #40	; 0x28
9001a418:	6851      	ldr	r1, [r2, #4]
9001a41a:	c303      	stmia	r3!, {r0, r1}
9001a41c:	a808      	add	r0, sp, #32
9001a41e:	f7f8 fee7 	bl	900131f0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
9001a422:	4629      	mov	r1, r5
9001a424:	a80a      	add	r0, sp, #40	; 0x28
9001a426:	4d67      	ldr	r5, [pc, #412]	; (9001a5c4 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
9001a428:	f7f8 ff0a 	bl	90013240 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
9001a42c:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
9001a430:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
9001a434:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
9001a438:	6828      	ldr	r0, [r5, #0]
9001a43a:	fb11 2103 	smlabb	r1, r1, r3, r2
9001a43e:	f9bd 802c 	ldrsh.w	r8, [sp, #44]	; 0x2c
9001a442:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
9001a446:	eb04 0481 	add.w	r4, r4, r1, lsl #2
9001a44a:	f8bd 1020 	ldrh.w	r1, [sp, #32]
9001a44e:	440a      	add	r2, r1
9001a450:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
9001a454:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
9001a458:	4413      	add	r3, r2
9001a45a:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
9001a45e:	6803      	ldr	r3, [r0, #0]
9001a460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
9001a462:	4798      	blx	r3
9001a464:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
9001a468:	d119      	bne.n	9001a49e <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9e>
9001a46a:	f010 0f20 	tst.w	r0, #32
9001a46e:	6828      	ldr	r0, [r5, #0]
9001a470:	d018      	beq.n	9001a4a4 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa4>
9001a472:	2500      	movs	r5, #0
9001a474:	6801      	ldr	r1, [r0, #0]
9001a476:	b2b6      	uxth	r6, r6
9001a478:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
9001a47c:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
9001a480:	9601      	str	r6, [sp, #4]
9001a482:	e9cd 9503 	strd	r9, r5, [sp, #12]
9001a486:	f8bd 5024 	ldrh.w	r5, [sp, #36]	; 0x24
9001a48a:	9502      	str	r5, [sp, #8]
9001a48c:	fa1f f588 	uxth.w	r5, r8
9001a490:	9500      	str	r5, [sp, #0]
9001a492:	6d0d      	ldr	r5, [r1, #80]	; 0x50
9001a494:	4621      	mov	r1, r4
9001a496:	47a8      	blx	r5
9001a498:	b00d      	add	sp, #52	; 0x34
9001a49a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001a49e:	f010 0f40 	tst.w	r0, #64	; 0x40
9001a4a2:	e7e4      	b.n	9001a46e <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
9001a4a4:	6803      	ldr	r3, [r0, #0]
9001a4a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9001a4a8:	4798      	blx	r3
9001a4aa:	4947      	ldr	r1, [pc, #284]	; (9001a5c8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c8>)
9001a4ac:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
9001a4b0:	880b      	ldrh	r3, [r1, #0]
9001a4b2:	468a      	mov	sl, r1
9001a4b4:	f9bd 5028 	ldrsh.w	r5, [sp, #40]	; 0x28
9001a4b8:	fb03 5202 	mla	r2, r3, r2, r5
9001a4bc:	4373      	muls	r3, r6
9001a4be:	eb00 0042 	add.w	r0, r0, r2, lsl #1
9001a4c2:	eb00 0343 	add.w	r3, r0, r3, lsl #1
9001a4c6:	9307      	str	r3, [sp, #28]
9001a4c8:	ea4f 0348 	mov.w	r3, r8, lsl #1
9001a4cc:	9306      	str	r3, [sp, #24]
9001a4ce:	9b07      	ldr	r3, [sp, #28]
9001a4d0:	4298      	cmp	r0, r3
9001a4d2:	d270      	bcs.n	9001a5b6 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b6>
9001a4d4:	9b06      	ldr	r3, [sp, #24]
9001a4d6:	4621      	mov	r1, r4
9001a4d8:	eb00 0b03 	add.w	fp, r0, r3
9001a4dc:	4558      	cmp	r0, fp
9001a4de:	d25d      	bcs.n	9001a59c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x19c>
9001a4e0:	f851 4b04 	ldr.w	r4, [r1], #4
9001a4e4:	0e23      	lsrs	r3, r4, #24
9001a4e6:	d014      	beq.n	9001a512 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
9001a4e8:	2bff      	cmp	r3, #255	; 0xff
9001a4ea:	ea4f 2c14 	mov.w	ip, r4, lsr #8
9001a4ee:	d112      	bne.n	9001a516 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
9001a4f0:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
9001a4f4:	d10f      	bne.n	9001a516 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
9001a4f6:	0963      	lsrs	r3, r4, #5
9001a4f8:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
9001a4fc:	f3c4 04c4 	ubfx	r4, r4, #3, #5
9001a500:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9001a504:	f02c 0c07 	bic.w	ip, ip, #7
9001a508:	ea43 0c0c 	orr.w	ip, r3, ip
9001a50c:	ea4c 0404 	orr.w	r4, ip, r4
9001a510:	8004      	strh	r4, [r0, #0]
9001a512:	3002      	adds	r0, #2
9001a514:	e7e2      	b.n	9001a4dc <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xdc>
9001a516:	fb09 f303 	mul.w	r3, r9, r3
9001a51a:	8807      	ldrh	r7, [r0, #0]
9001a51c:	f3c4 4e07 	ubfx	lr, r4, #16, #8
9001a520:	fa5f fc8c 	uxtb.w	ip, ip
9001a524:	1c5a      	adds	r2, r3, #1
9001a526:	123e      	asrs	r6, r7, #8
9001a528:	10fd      	asrs	r5, r7, #3
9001a52a:	eb02 2223 	add.w	r2, r2, r3, asr #8
9001a52e:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
9001a532:	00ff      	lsls	r7, r7, #3
9001a534:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
9001a538:	1212      	asrs	r2, r2, #8
9001a53a:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
9001a53e:	b293      	uxth	r3, r2
9001a540:	43d2      	mvns	r2, r2
9001a542:	b2ff      	uxtb	r7, r7
9001a544:	fb1e fe03 	smulbb	lr, lr, r3
9001a548:	b2d2      	uxtb	r2, r2
9001a54a:	fb1c fc03 	smulbb	ip, ip, r3
9001a54e:	b2e4      	uxtb	r4, r4
9001a550:	fb06 e602 	mla	r6, r6, r2, lr
9001a554:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
9001a558:	fb14 f403 	smulbb	r4, r4, r3
9001a55c:	ea47 1757 	orr.w	r7, r7, r7, lsr #5
9001a560:	b2b6      	uxth	r6, r6
9001a562:	fb05 c502 	mla	r5, r5, r2, ip
9001a566:	fb07 4702 	mla	r7, r7, r2, r4
9001a56a:	f106 0e01 	add.w	lr, r6, #1
9001a56e:	b2ad      	uxth	r5, r5
9001a570:	b2bf      	uxth	r7, r7
9001a572:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
9001a576:	f105 0c01 	add.w	ip, r5, #1
9001a57a:	f406 4e78 	and.w	lr, r6, #63488	; 0xf800
9001a57e:	1c7e      	adds	r6, r7, #1
9001a580:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
9001a584:	eb06 2617 	add.w	r6, r6, r7, lsr #8
9001a588:	096d      	lsrs	r5, r5, #5
9001a58a:	f3c6 26c4 	ubfx	r6, r6, #11, #5
9001a58e:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
9001a592:	ea46 060e 	orr.w	r6, r6, lr
9001a596:	432e      	orrs	r6, r5
9001a598:	8006      	strh	r6, [r0, #0]
9001a59a:	e7ba      	b.n	9001a512 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
9001a59c:	f8ba 3000 	ldrh.w	r3, [sl]
9001a5a0:	f9bd 4024 	ldrsh.w	r4, [sp, #36]	; 0x24
9001a5a4:	eba3 0308 	sub.w	r3, r3, r8
9001a5a8:	eba4 0408 	sub.w	r4, r4, r8
9001a5ac:	eb00 0043 	add.w	r0, r0, r3, lsl #1
9001a5b0:	eb01 0484 	add.w	r4, r1, r4, lsl #2
9001a5b4:	e78b      	b.n	9001a4ce <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xce>
9001a5b6:	4b03      	ldr	r3, [pc, #12]	; (9001a5c4 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
9001a5b8:	6818      	ldr	r0, [r3, #0]
9001a5ba:	6803      	ldr	r3, [r0, #0]
9001a5bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9001a5be:	4798      	blx	r3
9001a5c0:	e76a      	b.n	9001a498 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x98>
9001a5c2:	bf00      	nop
9001a5c4:	24021c14 	.word	0x24021c14
9001a5c8:	24021c0e 	.word	0x24021c0e

9001a5cc <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>:
9001a5cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
9001a5d0:	b085      	sub	sp, #20
9001a5d2:	6810      	ldr	r0, [r2, #0]
9001a5d4:	460c      	mov	r4, r1
9001a5d6:	6851      	ldr	r1, [r2, #4]
9001a5d8:	466d      	mov	r5, sp
9001a5da:	4616      	mov	r6, r2
9001a5dc:	c503      	stmia	r5!, {r0, r1}
9001a5de:	6818      	ldr	r0, [r3, #0]
9001a5e0:	6859      	ldr	r1, [r3, #4]
9001a5e2:	c503      	stmia	r5!, {r0, r1}
9001a5e4:	4668      	mov	r0, sp
9001a5e6:	4d2e      	ldr	r5, [pc, #184]	; (9001a6a0 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd4>)
9001a5e8:	f7f8 fe02 	bl	900131f0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
9001a5ec:	4631      	mov	r1, r6
9001a5ee:	a802      	add	r0, sp, #8
9001a5f0:	4e2c      	ldr	r6, [pc, #176]	; (9001a6a4 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd8>)
9001a5f2:	f7f8 fe25 	bl	90013240 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
9001a5f6:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
9001a5fa:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
9001a5fe:	f8bd 1004 	ldrh.w	r1, [sp, #4]
9001a602:	6828      	ldr	r0, [r5, #0]
9001a604:	fb11 2103 	smlabb	r1, r1, r3, r2
9001a608:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
9001a60c:	f9bd 800e 	ldrsh.w	r8, [sp, #14]
9001a610:	eb04 0481 	add.w	r4, r4, r1, lsl #2
9001a614:	f8bd 1000 	ldrh.w	r1, [sp]
9001a618:	440a      	add	r2, r1
9001a61a:	f8ad 2008 	strh.w	r2, [sp, #8]
9001a61e:	f8bd 2002 	ldrh.w	r2, [sp, #2]
9001a622:	4413      	add	r3, r2
9001a624:	f8ad 300a 	strh.w	r3, [sp, #10]
9001a628:	6803      	ldr	r3, [r0, #0]
9001a62a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9001a62c:	4798      	blx	r3
9001a62e:	8833      	ldrh	r3, [r6, #0]
9001a630:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
9001a634:	ea4f 0c47 	mov.w	ip, r7, lsl #1
9001a638:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
9001a63c:	f8df e068 	ldr.w	lr, [pc, #104]	; 9001a6a8 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xdc>
9001a640:	fb03 1202 	mla	r2, r3, r2, r1
9001a644:	fb08 f303 	mul.w	r3, r8, r3
9001a648:	eb00 0042 	add.w	r0, r0, r2, lsl #1
9001a64c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
9001a650:	4298      	cmp	r0, r3
9001a652:	d21d      	bcs.n	9001a690 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xc4>
9001a654:	eb00 080c 	add.w	r8, r0, ip
9001a658:	4540      	cmp	r0, r8
9001a65a:	d20f      	bcs.n	9001a67c <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xb0>
9001a65c:	f854 1b04 	ldr.w	r1, [r4], #4
9001a660:	ea4f 1951 	mov.w	r9, r1, lsr #5
9001a664:	ea0e 2211 	and.w	r2, lr, r1, lsr #8
9001a668:	f3c1 01c4 	ubfx	r1, r1, #3, #5
9001a66c:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
9001a670:	ea42 0209 	orr.w	r2, r2, r9
9001a674:	430a      	orrs	r2, r1
9001a676:	f820 2b02 	strh.w	r2, [r0], #2
9001a67a:	e7ed      	b.n	9001a658 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x8c>
9001a67c:	8832      	ldrh	r2, [r6, #0]
9001a67e:	1bd2      	subs	r2, r2, r7
9001a680:	eb00 0042 	add.w	r0, r0, r2, lsl #1
9001a684:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
9001a688:	1bd2      	subs	r2, r2, r7
9001a68a:	eb04 0482 	add.w	r4, r4, r2, lsl #2
9001a68e:	e7df      	b.n	9001a650 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x84>
9001a690:	6828      	ldr	r0, [r5, #0]
9001a692:	6803      	ldr	r3, [r0, #0]
9001a694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9001a696:	4798      	blx	r3
9001a698:	b005      	add	sp, #20
9001a69a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
9001a69e:	bf00      	nop
9001a6a0:	24021c14 	.word	0x24021c14
9001a6a4:	24021c0e 	.word	0x24021c0e
9001a6a8:	fffff800 	.word	0xfffff800

9001a6ac <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>:
9001a6ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
9001a6b0:	b08e      	sub	sp, #56	; 0x38
9001a6b2:	460e      	mov	r6, r1
9001a6b4:	4604      	mov	r4, r0
9001a6b6:	461d      	mov	r5, r3
9001a6b8:	6808      	ldr	r0, [r1, #0]
9001a6ba:	ab0a      	add	r3, sp, #40	; 0x28
9001a6bc:	6849      	ldr	r1, [r1, #4]
9001a6be:	f8df 81d4 	ldr.w	r8, [pc, #468]	; 9001a894 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>
9001a6c2:	f8df 91d4 	ldr.w	r9, [pc, #468]	; 9001a898 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1ec>
9001a6c6:	c303      	stmia	r3!, {r0, r1}
9001a6c8:	6810      	ldr	r0, [r2, #0]
9001a6ca:	ab0c      	add	r3, sp, #48	; 0x30
9001a6cc:	6851      	ldr	r1, [r2, #4]
9001a6ce:	c303      	stmia	r3!, {r0, r1}
9001a6d0:	a80a      	add	r0, sp, #40	; 0x28
9001a6d2:	f7f8 fd8d 	bl	900131f0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
9001a6d6:	4631      	mov	r1, r6
9001a6d8:	a80c      	add	r0, sp, #48	; 0x30
9001a6da:	f7f8 fdb1 	bl	90013240 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
9001a6de:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
9001a6e2:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
9001a6e6:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
9001a6ea:	f8d8 0000 	ldr.w	r0, [r8]
9001a6ee:	fb11 2103 	smlabb	r1, r1, r3, r2
9001a6f2:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	; 0x34
9001a6f6:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	; 0x36
9001a6fa:	eb01 0141 	add.w	r1, r1, r1, lsl #1
9001a6fe:	440c      	add	r4, r1
9001a700:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
9001a704:	440a      	add	r2, r1
9001a706:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
9001a70a:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
9001a70e:	4413      	add	r3, r2
9001a710:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
9001a714:	6803      	ldr	r3, [r0, #0]
9001a716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
9001a718:	4798      	blx	r3
9001a71a:	2dff      	cmp	r5, #255	; 0xff
9001a71c:	d124      	bne.n	9001a768 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xbc>
9001a71e:	f010 0f01 	tst.w	r0, #1
9001a722:	f8d8 0000 	ldr.w	r0, [r8]
9001a726:	d022      	beq.n	9001a76e <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xc2>
9001a728:	2100      	movs	r1, #0
9001a72a:	f04f 0e01 	mov.w	lr, #1
9001a72e:	f8d0 c000 	ldr.w	ip, [r0]
9001a732:	b2b6      	uxth	r6, r6
9001a734:	f8cd e018 	str.w	lr, [sp, #24]
9001a738:	b2bf      	uxth	r7, r7
9001a73a:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
9001a73e:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
9001a742:	e9cd 1107 	strd	r1, r1, [sp, #28]
9001a746:	f8b9 e000 	ldrh.w	lr, [r9]
9001a74a:	9503      	str	r5, [sp, #12]
9001a74c:	9601      	str	r6, [sp, #4]
9001a74e:	9700      	str	r7, [sp, #0]
9001a750:	e9cd 1e04 	strd	r1, lr, [sp, #16]
9001a754:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
9001a758:	9102      	str	r1, [sp, #8]
9001a75a:	4621      	mov	r1, r4
9001a75c:	f8dc 5040 	ldr.w	r5, [ip, #64]	; 0x40
9001a760:	47a8      	blx	r5
9001a762:	b00e      	add	sp, #56	; 0x38
9001a764:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
9001a768:	f010 0f04 	tst.w	r0, #4
9001a76c:	e7d9      	b.n	9001a722 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x76>
9001a76e:	6803      	ldr	r3, [r0, #0]
9001a770:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9001a772:	4798      	blx	r3
9001a774:	f8b9 3000 	ldrh.w	r3, [r9]
9001a778:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
9001a77c:	ea4f 0e47 	mov.w	lr, r7, lsl #1
9001a780:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
9001a784:	435e      	muls	r6, r3
9001a786:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	; 0x2c
9001a78a:	2dff      	cmp	r5, #255	; 0xff
9001a78c:	fb03 1202 	mla	r2, r3, r2, r1
9001a790:	ebac 0c07 	sub.w	ip, ip, r7
9001a794:	eba3 0707 	sub.w	r7, r3, r7
9001a798:	eb00 0042 	add.w	r0, r0, r2, lsl #1
9001a79c:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
9001a7a0:	eb00 0646 	add.w	r6, r0, r6, lsl #1
9001a7a4:	ea4f 0747 	mov.w	r7, r7, lsl #1
9001a7a8:	d049      	beq.n	9001a83e <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x192>
9001a7aa:	43eb      	mvns	r3, r5
9001a7ac:	fa1f f985 	uxth.w	r9, r5
9001a7b0:	b2db      	uxtb	r3, r3
9001a7b2:	42b0      	cmp	r0, r6
9001a7b4:	d266      	bcs.n	9001a884 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
9001a7b6:	eb00 0a0e 	add.w	sl, r0, lr
9001a7ba:	4550      	cmp	r0, sl
9001a7bc:	4621      	mov	r1, r4
9001a7be:	f104 0403 	add.w	r4, r4, #3
9001a7c2:	d25b      	bcs.n	9001a87c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d0>
9001a7c4:	8802      	ldrh	r2, [r0, #0]
9001a7c6:	f814 1c01 	ldrb.w	r1, [r4, #-1]
9001a7ca:	ea4f 2822 	mov.w	r8, r2, asr #8
9001a7ce:	fb11 f109 	smulbb	r1, r1, r9
9001a7d2:	10d5      	asrs	r5, r2, #3
9001a7d4:	f008 08f8 	and.w	r8, r8, #248	; 0xf8
9001a7d8:	00d2      	lsls	r2, r2, #3
9001a7da:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
9001a7de:	ea48 1858 	orr.w	r8, r8, r8, lsr #5
9001a7e2:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
9001a7e6:	fb08 1803 	mla	r8, r8, r3, r1
9001a7ea:	f814 1c02 	ldrb.w	r1, [r4, #-2]
9001a7ee:	b2d2      	uxtb	r2, r2
9001a7f0:	fb11 f109 	smulbb	r1, r1, r9
9001a7f4:	fa1f f888 	uxth.w	r8, r8
9001a7f8:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
9001a7fc:	fb05 1503 	mla	r5, r5, r3, r1
9001a800:	f814 1c03 	ldrb.w	r1, [r4, #-3]
9001a804:	fb11 f109 	smulbb	r1, r1, r9
9001a808:	b2ad      	uxth	r5, r5
9001a80a:	fb02 1203 	mla	r2, r2, r3, r1
9001a80e:	f108 0101 	add.w	r1, r8, #1
9001a812:	b292      	uxth	r2, r2
9001a814:	eb01 2818 	add.w	r8, r1, r8, lsr #8
9001a818:	1c51      	adds	r1, r2, #1
9001a81a:	f408 4878 	and.w	r8, r8, #63488	; 0xf800
9001a81e:	eb01 2212 	add.w	r2, r1, r2, lsr #8
9001a822:	1c69      	adds	r1, r5, #1
9001a824:	eb01 2515 	add.w	r5, r1, r5, lsr #8
9001a828:	f3c2 22c4 	ubfx	r2, r2, #11, #5
9001a82c:	096d      	lsrs	r5, r5, #5
9001a82e:	ea42 0208 	orr.w	r2, r2, r8
9001a832:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
9001a836:	432a      	orrs	r2, r5
9001a838:	f820 2b02 	strh.w	r2, [r0], #2
9001a83c:	e7bd      	b.n	9001a7ba <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x10e>
9001a83e:	4a14      	ldr	r2, [pc, #80]	; (9001a890 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e4>)
9001a840:	42b0      	cmp	r0, r6
9001a842:	d21f      	bcs.n	9001a884 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
9001a844:	eb00 050e 	add.w	r5, r0, lr
9001a848:	42a8      	cmp	r0, r5
9001a84a:	4621      	mov	r1, r4
9001a84c:	f104 0403 	add.w	r4, r4, #3
9001a850:	d210      	bcs.n	9001a874 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1c8>
9001a852:	f814 3c02 	ldrb.w	r3, [r4, #-2]
9001a856:	f814 1c01 	ldrb.w	r1, [r4, #-1]
9001a85a:	00db      	lsls	r3, r3, #3
9001a85c:	ea02 2101 	and.w	r1, r2, r1, lsl #8
9001a860:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9001a864:	430b      	orrs	r3, r1
9001a866:	f814 1c03 	ldrb.w	r1, [r4, #-3]
9001a86a:	ea43 03d1 	orr.w	r3, r3, r1, lsr #3
9001a86e:	f820 3b02 	strh.w	r3, [r0], #2
9001a872:	e7e9      	b.n	9001a848 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x19c>
9001a874:	4438      	add	r0, r7
9001a876:	eb01 040c 	add.w	r4, r1, ip
9001a87a:	e7e1      	b.n	9001a840 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x194>
9001a87c:	4438      	add	r0, r7
9001a87e:	eb01 040c 	add.w	r4, r1, ip
9001a882:	e796      	b.n	9001a7b2 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x106>
9001a884:	4b03      	ldr	r3, [pc, #12]	; (9001a894 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>)
9001a886:	6818      	ldr	r0, [r3, #0]
9001a888:	6803      	ldr	r3, [r0, #0]
9001a88a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9001a88c:	4798      	blx	r3
9001a88e:	e768      	b.n	9001a762 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xb6>
9001a890:	fffff800 	.word	0xfffff800
9001a894:	24021c14 	.word	0x24021c14
9001a898:	24021c0e 	.word	0x24021c0e

9001a89c <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
9001a89c:	b4f0      	push	{r4, r5, r6, r7}
9001a89e:	4616      	mov	r6, r2
9001a8a0:	461c      	mov	r4, r3
9001a8a2:	460d      	mov	r5, r1
9001a8a4:	9a04      	ldr	r2, [sp, #16]
9001a8a6:	2e01      	cmp	r6, #1
9001a8a8:	f89d 3014 	ldrb.w	r3, [sp, #20]
9001a8ac:	f89d 7018 	ldrb.w	r7, [sp, #24]
9001a8b0:	d012      	beq.n	9001a8d8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x3c>
9001a8b2:	d303      	bcc.n	9001a8bc <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x20>
9001a8b4:	2e02      	cmp	r6, #2
9001a8b6:	d00a      	beq.n	9001a8ce <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x32>
9001a8b8:	bcf0      	pop	{r4, r5, r6, r7}
9001a8ba:	4770      	bx	lr
9001a8bc:	6805      	ldr	r5, [r0, #0]
9001a8be:	e9cd 3704 	strd	r3, r7, [sp, #16]
9001a8c2:	68ed      	ldr	r5, [r5, #12]
9001a8c4:	4613      	mov	r3, r2
9001a8c6:	4622      	mov	r2, r4
9001a8c8:	46ac      	mov	ip, r5
9001a8ca:	bcf0      	pop	{r4, r5, r6, r7}
9001a8cc:	4760      	bx	ip
9001a8ce:	4621      	mov	r1, r4
9001a8d0:	4628      	mov	r0, r5
9001a8d2:	bcf0      	pop	{r4, r5, r6, r7}
9001a8d4:	f7ff bd94 	b.w	9001a400 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
9001a8d8:	4621      	mov	r1, r4
9001a8da:	4628      	mov	r0, r5
9001a8dc:	bcf0      	pop	{r4, r5, r6, r7}
9001a8de:	f7ff bee5 	b.w	9001a6ac <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
	...

9001a8e4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
9001a8e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001a8e8:	b093      	sub	sp, #76	; 0x4c
9001a8ea:	4681      	mov	r9, r0
9001a8ec:	4688      	mov	r8, r1
9001a8ee:	6810      	ldr	r0, [r2, #0]
9001a8f0:	6851      	ldr	r1, [r2, #4]
9001a8f2:	ac0e      	add	r4, sp, #56	; 0x38
9001a8f4:	4616      	mov	r6, r2
9001a8f6:	f89d a070 	ldrb.w	sl, [sp, #112]	; 0x70
9001a8fa:	4f6b      	ldr	r7, [pc, #428]	; (9001aaa8 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c4>)
9001a8fc:	c403      	stmia	r4!, {r0, r1}
9001a8fe:	6818      	ldr	r0, [r3, #0]
9001a900:	ac10      	add	r4, sp, #64	; 0x40
9001a902:	6859      	ldr	r1, [r3, #4]
9001a904:	c403      	stmia	r4!, {r0, r1}
9001a906:	a80e      	add	r0, sp, #56	; 0x38
9001a908:	f7f8 fc72 	bl	900131f0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
9001a90c:	4631      	mov	r1, r6
9001a90e:	a810      	add	r0, sp, #64	; 0x40
9001a910:	4e66      	ldr	r6, [pc, #408]	; (9001aaac <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>)
9001a912:	f7f8 fc95 	bl	90013240 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
9001a916:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
9001a91a:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
9001a91e:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
9001a922:	6830      	ldr	r0, [r6, #0]
9001a924:	fb11 2103 	smlabb	r1, r1, r3, r2
9001a928:	f9bd 4044 	ldrsh.w	r4, [sp, #68]	; 0x44
9001a92c:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	; 0x46
9001a930:	4489      	add	r9, r1
9001a932:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
9001a936:	440a      	add	r2, r1
9001a938:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
9001a93c:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
9001a940:	4413      	add	r3, r2
9001a942:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
9001a946:	6803      	ldr	r3, [r0, #0]
9001a948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
9001a94a:	4798      	blx	r3
9001a94c:	f010 0f80 	tst.w	r0, #128	; 0x80
9001a950:	6830      	ldr	r0, [r6, #0]
9001a952:	d01d      	beq.n	9001a990 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xac>
9001a954:	2200      	movs	r2, #0
9001a956:	6801      	ldr	r1, [r0, #0]
9001a958:	b2a4      	uxth	r4, r4
9001a95a:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
9001a95e:	b2ad      	uxth	r5, r5
9001a960:	e9cd 2208 	strd	r2, r2, [sp, #32]
9001a964:	220b      	movs	r2, #11
9001a966:	9207      	str	r2, [sp, #28]
9001a968:	883a      	ldrh	r2, [r7, #0]
9001a96a:	9502      	str	r5, [sp, #8]
9001a96c:	9206      	str	r2, [sp, #24]
9001a96e:	2201      	movs	r2, #1
9001a970:	9401      	str	r4, [sp, #4]
9001a972:	e9cd a204 	strd	sl, r2, [sp, #16]
9001a976:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
9001a97a:	9203      	str	r2, [sp, #12]
9001a97c:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
9001a980:	9200      	str	r2, [sp, #0]
9001a982:	4642      	mov	r2, r8
9001a984:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
9001a986:	4649      	mov	r1, r9
9001a988:	47a0      	blx	r4
9001a98a:	b013      	add	sp, #76	; 0x4c
9001a98c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001a990:	6803      	ldr	r3, [r0, #0]
9001a992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9001a994:	4798      	blx	r3
9001a996:	883b      	ldrh	r3, [r7, #0]
9001a998:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	; 0x42
9001a99c:	f04f 0e04 	mov.w	lr, #4
9001a9a0:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	; 0x40
9001a9a4:	435d      	muls	r5, r3
9001a9a6:	fb03 1202 	mla	r2, r3, r2, r1
9001a9aa:	eb00 0042 	add.w	r0, r0, r2, lsl #1
9001a9ae:	eb00 0245 	add.w	r2, r0, r5, lsl #1
9001a9b2:	920c      	str	r2, [sp, #48]	; 0x30
9001a9b4:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
9001a9b8:	1b12      	subs	r2, r2, r4
9001a9ba:	920d      	str	r2, [sp, #52]	; 0x34
9001a9bc:	0062      	lsls	r2, r4, #1
9001a9be:	1b1c      	subs	r4, r3, r4
9001a9c0:	920a      	str	r2, [sp, #40]	; 0x28
9001a9c2:	0063      	lsls	r3, r4, #1
9001a9c4:	930b      	str	r3, [sp, #44]	; 0x2c
9001a9c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
9001a9c8:	4298      	cmp	r0, r3
9001a9ca:	d266      	bcs.n	9001aa9a <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1b6>
9001a9cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
9001a9ce:	eb00 0b03 	add.w	fp, r0, r3
9001a9d2:	4558      	cmp	r0, fp
9001a9d4:	d25c      	bcs.n	9001aa90 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ac>
9001a9d6:	f819 3b01 	ldrb.w	r3, [r9], #1
9001a9da:	fb1e e303 	smlabb	r3, lr, r3, lr
9001a9de:	f858 2003 	ldr.w	r2, [r8, r3]
9001a9e2:	0e11      	lsrs	r1, r2, #24
9001a9e4:	d012      	beq.n	9001aa0c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
9001a9e6:	29ff      	cmp	r1, #255	; 0xff
9001a9e8:	ea4f 2712 	mov.w	r7, r2, lsr #8
9001a9ec:	d110      	bne.n	9001aa10 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
9001a9ee:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
9001a9f2:	d10d      	bne.n	9001aa10 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
9001a9f4:	0953      	lsrs	r3, r2, #5
9001a9f6:	f427 67ff 	bic.w	r7, r7, #2040	; 0x7f8
9001a9fa:	f3c2 02c4 	ubfx	r2, r2, #3, #5
9001a9fe:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9001aa02:	f027 0707 	bic.w	r7, r7, #7
9001aa06:	431f      	orrs	r7, r3
9001aa08:	433a      	orrs	r2, r7
9001aa0a:	8002      	strh	r2, [r0, #0]
9001aa0c:	3002      	adds	r0, #2
9001aa0e:	e7e0      	b.n	9001a9d2 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xee>
9001aa10:	fb0a f101 	mul.w	r1, sl, r1
9001aa14:	8806      	ldrh	r6, [r0, #0]
9001aa16:	f3c2 4c07 	ubfx	ip, r2, #16, #8
9001aa1a:	b2d2      	uxtb	r2, r2
9001aa1c:	1c4b      	adds	r3, r1, #1
9001aa1e:	1235      	asrs	r5, r6, #8
9001aa20:	10f4      	asrs	r4, r6, #3
9001aa22:	eb03 2321 	add.w	r3, r3, r1, asr #8
9001aa26:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
9001aa2a:	00f6      	lsls	r6, r6, #3
9001aa2c:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
9001aa30:	121b      	asrs	r3, r3, #8
9001aa32:	b2f6      	uxtb	r6, r6
9001aa34:	b299      	uxth	r1, r3
9001aa36:	43db      	mvns	r3, r3
9001aa38:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
9001aa3c:	fb1c fc01 	smulbb	ip, ip, r1
9001aa40:	b2db      	uxtb	r3, r3
9001aa42:	fb12 f201 	smulbb	r2, r2, r1
9001aa46:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
9001aa4a:	fb05 c503 	mla	r5, r5, r3, ip
9001aa4e:	b2ff      	uxtb	r7, r7
9001aa50:	fb06 2203 	mla	r2, r6, r3, r2
9001aa54:	ea44 1494 	orr.w	r4, r4, r4, lsr #6
9001aa58:	fb17 f701 	smulbb	r7, r7, r1
9001aa5c:	b2ad      	uxth	r5, r5
9001aa5e:	b292      	uxth	r2, r2
9001aa60:	fb04 7403 	mla	r4, r4, r3, r7
9001aa64:	f105 0c01 	add.w	ip, r5, #1
9001aa68:	1c57      	adds	r7, r2, #1
9001aa6a:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
9001aa6e:	eb07 2712 	add.w	r7, r7, r2, lsr #8
9001aa72:	b2a4      	uxth	r4, r4
9001aa74:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
9001aa78:	f3c7 27c4 	ubfx	r7, r7, #11, #5
9001aa7c:	433d      	orrs	r5, r7
9001aa7e:	1c67      	adds	r7, r4, #1
9001aa80:	eb07 2414 	add.w	r4, r7, r4, lsr #8
9001aa84:	0964      	lsrs	r4, r4, #5
9001aa86:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
9001aa8a:	4325      	orrs	r5, r4
9001aa8c:	8005      	strh	r5, [r0, #0]
9001aa8e:	e7bd      	b.n	9001aa0c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
9001aa90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
9001aa92:	4418      	add	r0, r3
9001aa94:	9b0d      	ldr	r3, [sp, #52]	; 0x34
9001aa96:	4499      	add	r9, r3
9001aa98:	e795      	b.n	9001a9c6 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xe2>
9001aa9a:	4b04      	ldr	r3, [pc, #16]	; (9001aaac <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>)
9001aa9c:	6818      	ldr	r0, [r3, #0]
9001aa9e:	6803      	ldr	r3, [r0, #0]
9001aaa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9001aaa2:	4798      	blx	r3
9001aaa4:	e771      	b.n	9001a98a <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xa6>
9001aaa6:	bf00      	nop
9001aaa8:	24021c0e 	.word	0x24021c0e
9001aaac:	24021c14 	.word	0x24021c14

9001aab0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>:
9001aab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001aab4:	b087      	sub	sp, #28
9001aab6:	4680      	mov	r8, r0
9001aab8:	460d      	mov	r5, r1
9001aaba:	4614      	mov	r4, r2
9001aabc:	f89d 6040 	ldrb.w	r6, [sp, #64]	; 0x40
9001aac0:	2e00      	cmp	r6, #0
9001aac2:	f000 80b9 	beq.w	9001ac38 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x188>
9001aac6:	6810      	ldr	r0, [r2, #0]
9001aac8:	af02      	add	r7, sp, #8
9001aaca:	6851      	ldr	r1, [r2, #4]
9001aacc:	c703      	stmia	r7!, {r0, r1}
9001aace:	6818      	ldr	r0, [r3, #0]
9001aad0:	af04      	add	r7, sp, #16
9001aad2:	6859      	ldr	r1, [r3, #4]
9001aad4:	c703      	stmia	r7!, {r0, r1}
9001aad6:	a802      	add	r0, sp, #8
9001aad8:	f7f8 fb8a 	bl	900131f0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
9001aadc:	4621      	mov	r1, r4
9001aade:	a804      	add	r0, sp, #16
9001aae0:	f7f8 fbae 	bl	90013240 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
9001aae4:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
9001aae8:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
9001aaec:	f8bd 400c 	ldrh.w	r4, [sp, #12]
9001aaf0:	f9bd 7016 	ldrsh.w	r7, [sp, #22]
9001aaf4:	fb14 2103 	smlabb	r1, r4, r3, r2
9001aaf8:	eb08 0401 	add.w	r4, r8, r1
9001aafc:	f8bd 1008 	ldrh.w	r1, [sp, #8]
9001ab00:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
9001ab04:	440a      	add	r2, r1
9001ab06:	ea4f 0a48 	mov.w	sl, r8, lsl #1
9001ab0a:	f8ad 2010 	strh.w	r2, [sp, #16]
9001ab0e:	f8bd 200a 	ldrh.w	r2, [sp, #10]
9001ab12:	4413      	add	r3, r2
9001ab14:	f8ad 3012 	strh.w	r3, [sp, #18]
9001ab18:	4b49      	ldr	r3, [pc, #292]	; (9001ac40 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x190>)
9001ab1a:	6818      	ldr	r0, [r3, #0]
9001ab1c:	6803      	ldr	r3, [r0, #0]
9001ab1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9001ab20:	4798      	blx	r3
9001ab22:	4b48      	ldr	r3, [pc, #288]	; (9001ac44 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x194>)
9001ab24:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
9001ab28:	2eff      	cmp	r6, #255	; 0xff
9001ab2a:	881a      	ldrh	r2, [r3, #0]
9001ab2c:	f9bd c010 	ldrsh.w	ip, [sp, #16]
9001ab30:	fb02 c101 	mla	r1, r2, r1, ip
9001ab34:	fb02 f207 	mul.w	r2, r2, r7
9001ab38:	eb00 0041 	add.w	r0, r0, r1, lsl #1
9001ab3c:	f105 0104 	add.w	r1, r5, #4
9001ab40:	461d      	mov	r5, r3
9001ab42:	d05a      	beq.n	9001abfa <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x14a>
9001ab44:	f1c6 0eff 	rsb	lr, r6, #255	; 0xff
9001ab48:	eb00 0242 	add.w	r2, r0, r2, lsl #1
9001ab4c:	b2b6      	uxth	r6, r6
9001ab4e:	9301      	str	r3, [sp, #4]
9001ab50:	fa1f fe8e 	uxth.w	lr, lr
9001ab54:	4282      	cmp	r2, r0
9001ab56:	d96a      	bls.n	9001ac2e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17e>
9001ab58:	eb00 0b0a 	add.w	fp, r0, sl
9001ab5c:	4583      	cmp	fp, r0
9001ab5e:	d940      	bls.n	9001abe2 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x132>
9001ab60:	8805      	ldrh	r5, [r0, #0]
9001ab62:	f814 3b01 	ldrb.w	r3, [r4], #1
9001ab66:	122f      	asrs	r7, r5, #8
9001ab68:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
9001ab6c:	ea4f 09e5 	mov.w	r9, r5, asr #3
9001ab70:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
9001ab74:	00ed      	lsls	r5, r5, #3
9001ab76:	ea4f 2c23 	mov.w	ip, r3, asr #8
9001ab7a:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
9001ab7e:	fb17 f70e 	smulbb	r7, r7, lr
9001ab82:	b2ed      	uxtb	r5, r5
9001ab84:	fb19 f90e 	smulbb	r9, r9, lr
9001ab88:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
9001ab8c:	fb15 f50e 	smulbb	r5, r5, lr
9001ab90:	fb0c 7c06 	mla	ip, ip, r6, r7
9001ab94:	10df      	asrs	r7, r3, #3
9001ab96:	00db      	lsls	r3, r3, #3
9001ab98:	fa1f fc8c 	uxth.w	ip, ip
9001ab9c:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
9001aba0:	b2db      	uxtb	r3, r3
9001aba2:	fb07 9706 	mla	r7, r7, r6, r9
9001aba6:	f10c 0901 	add.w	r9, ip, #1
9001abaa:	fb03 5306 	mla	r3, r3, r6, r5
9001abae:	eb09 2c1c 	add.w	ip, r9, ip, lsr #8
9001abb2:	b29b      	uxth	r3, r3
9001abb4:	f40c 4978 	and.w	r9, ip, #63488	; 0xf800
9001abb8:	b2bf      	uxth	r7, r7
9001abba:	f103 0c01 	add.w	ip, r3, #1
9001abbe:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
9001abc2:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
9001abc6:	ea4c 0c09 	orr.w	ip, ip, r9
9001abca:	f107 0901 	add.w	r9, r7, #1
9001abce:	eb09 2717 	add.w	r7, r9, r7, lsr #8
9001abd2:	097f      	lsrs	r7, r7, #5
9001abd4:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
9001abd8:	ea4c 0c07 	orr.w	ip, ip, r7
9001abdc:	f820 cb02 	strh.w	ip, [r0], #2
9001abe0:	e7bc      	b.n	9001ab5c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xac>
9001abe2:	9b01      	ldr	r3, [sp, #4]
9001abe4:	881b      	ldrh	r3, [r3, #0]
9001abe6:	eba3 0308 	sub.w	r3, r3, r8
9001abea:	eb00 0043 	add.w	r0, r0, r3, lsl #1
9001abee:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
9001abf2:	eba3 0308 	sub.w	r3, r3, r8
9001abf6:	441c      	add	r4, r3
9001abf8:	e7ac      	b.n	9001ab54 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xa4>
9001abfa:	eb00 0242 	add.w	r2, r0, r2, lsl #1
9001abfe:	4282      	cmp	r2, r0
9001ac00:	d915      	bls.n	9001ac2e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17e>
9001ac02:	eb00 060a 	add.w	r6, r0, sl
9001ac06:	4286      	cmp	r6, r0
9001ac08:	d906      	bls.n	9001ac18 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x168>
9001ac0a:	f814 3b01 	ldrb.w	r3, [r4], #1
9001ac0e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
9001ac12:	f820 3b02 	strh.w	r3, [r0], #2
9001ac16:	e7f6      	b.n	9001ac06 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x156>
9001ac18:	882b      	ldrh	r3, [r5, #0]
9001ac1a:	eba3 0308 	sub.w	r3, r3, r8
9001ac1e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
9001ac22:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
9001ac26:	eba3 0308 	sub.w	r3, r3, r8
9001ac2a:	441c      	add	r4, r3
9001ac2c:	e7e7      	b.n	9001abfe <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x14e>
9001ac2e:	4b04      	ldr	r3, [pc, #16]	; (9001ac40 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x190>)
9001ac30:	6818      	ldr	r0, [r3, #0]
9001ac32:	6803      	ldr	r3, [r0, #0]
9001ac34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9001ac36:	4798      	blx	r3
9001ac38:	b007      	add	sp, #28
9001ac3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001ac3e:	bf00      	nop
9001ac40:	24021c14 	.word	0x24021c14
9001ac44:	24021c0e 	.word	0x24021c0e

9001ac48 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
9001ac48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001ac4c:	b091      	sub	sp, #68	; 0x44
9001ac4e:	4680      	mov	r8, r0
9001ac50:	460f      	mov	r7, r1
9001ac52:	4614      	mov	r4, r2
9001ac54:	f89d 5068 	ldrb.w	r5, [sp, #104]	; 0x68
9001ac58:	2d00      	cmp	r5, #0
9001ac5a:	d051      	beq.n	9001ad00 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb8>
9001ac5c:	6810      	ldr	r0, [r2, #0]
9001ac5e:	ae0c      	add	r6, sp, #48	; 0x30
9001ac60:	6851      	ldr	r1, [r2, #4]
9001ac62:	f8df 9200 	ldr.w	r9, [pc, #512]	; 9001ae64 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>
9001ac66:	c603      	stmia	r6!, {r0, r1}
9001ac68:	6818      	ldr	r0, [r3, #0]
9001ac6a:	ae0e      	add	r6, sp, #56	; 0x38
9001ac6c:	6859      	ldr	r1, [r3, #4]
9001ac6e:	c603      	stmia	r6!, {r0, r1}
9001ac70:	a80c      	add	r0, sp, #48	; 0x30
9001ac72:	f7f8 fabd 	bl	900131f0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
9001ac76:	4621      	mov	r1, r4
9001ac78:	a80e      	add	r0, sp, #56	; 0x38
9001ac7a:	f7f8 fae1 	bl	90013240 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
9001ac7e:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
9001ac82:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
9001ac86:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
9001ac8a:	f8d9 0000 	ldr.w	r0, [r9]
9001ac8e:	fb11 2103 	smlabb	r1, r1, r3, r2
9001ac92:	f9bd 603c 	ldrsh.w	r6, [sp, #60]	; 0x3c
9001ac96:	f9bd a03e 	ldrsh.w	sl, [sp, #62]	; 0x3e
9001ac9a:	eb08 0401 	add.w	r4, r8, r1
9001ac9e:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
9001aca2:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 9001ae68 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x220>
9001aca6:	440a      	add	r2, r1
9001aca8:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
9001acac:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
9001acb0:	4413      	add	r3, r2
9001acb2:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
9001acb6:	6803      	ldr	r3, [r0, #0]
9001acb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
9001acba:	4798      	blx	r3
9001acbc:	f010 0f80 	tst.w	r0, #128	; 0x80
9001acc0:	f8d9 0000 	ldr.w	r0, [r9]
9001acc4:	d01f      	beq.n	9001ad06 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xbe>
9001acc6:	2200      	movs	r2, #0
9001acc8:	6801      	ldr	r1, [r0, #0]
9001acca:	b2b6      	uxth	r6, r6
9001accc:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
9001acd0:	e9cd 2208 	strd	r2, r2, [sp, #32]
9001acd4:	220b      	movs	r2, #11
9001acd6:	9207      	str	r2, [sp, #28]
9001acd8:	f8b8 2000 	ldrh.w	r2, [r8]
9001acdc:	9601      	str	r6, [sp, #4]
9001acde:	9206      	str	r2, [sp, #24]
9001ace0:	2201      	movs	r2, #1
9001ace2:	e9cd 5204 	strd	r5, r2, [sp, #16]
9001ace6:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
9001acea:	9203      	str	r2, [sp, #12]
9001acec:	fa1f f28a 	uxth.w	r2, sl
9001acf0:	9202      	str	r2, [sp, #8]
9001acf2:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
9001acf6:	9200      	str	r2, [sp, #0]
9001acf8:	463a      	mov	r2, r7
9001acfa:	6bcd      	ldr	r5, [r1, #60]	; 0x3c
9001acfc:	4621      	mov	r1, r4
9001acfe:	47a8      	blx	r5
9001ad00:	b011      	add	sp, #68	; 0x44
9001ad02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001ad06:	6803      	ldr	r3, [r0, #0]
9001ad08:	ea4f 0946 	mov.w	r9, r6, lsl #1
9001ad0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9001ad0e:	4798      	blx	r3
9001ad10:	f8b8 2000 	ldrh.w	r2, [r8]
9001ad14:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
9001ad18:	2dff      	cmp	r5, #255	; 0xff
9001ad1a:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
9001ad1e:	fb0a fa02 	mul.w	sl, sl, r2
9001ad22:	fb02 1303 	mla	r3, r2, r3, r1
9001ad26:	eb00 0043 	add.w	r0, r0, r3, lsl #1
9001ad2a:	d062      	beq.n	9001adf2 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1aa>
9001ad2c:	ea6f 0c05 	mvn.w	ip, r5
9001ad30:	eb00 034a 	add.w	r3, r0, sl, lsl #1
9001ad34:	b2ad      	uxth	r5, r5
9001ad36:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
9001ad3a:	fa5f fc8c 	uxtb.w	ip, ip
9001ad3e:	930a      	str	r3, [sp, #40]	; 0x28
9001ad40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
9001ad42:	4298      	cmp	r0, r3
9001ad44:	f080 8085 	bcs.w	9001ae52 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
9001ad48:	eb00 0b09 	add.w	fp, r0, r9
9001ad4c:	4558      	cmp	r0, fp
9001ad4e:	d246      	bcs.n	9001adde <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x196>
9001ad50:	f814 eb01 	ldrb.w	lr, [r4], #1
9001ad54:	2303      	movs	r3, #3
9001ad56:	2204      	movs	r2, #4
9001ad58:	fb13 2e0e 	smlabb	lr, r3, lr, r2
9001ad5c:	8803      	ldrh	r3, [r0, #0]
9001ad5e:	eb07 0a0e 	add.w	sl, r7, lr
9001ad62:	1219      	asrs	r1, r3, #8
9001ad64:	10da      	asrs	r2, r3, #3
9001ad66:	f817 e00e 	ldrb.w	lr, [r7, lr]
9001ad6a:	f89a 8002 	ldrb.w	r8, [sl, #2]
9001ad6e:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
9001ad72:	00db      	lsls	r3, r3, #3
9001ad74:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
9001ad78:	fb18 f805 	smulbb	r8, r8, r5
9001ad7c:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
9001ad80:	fb1e fe05 	smulbb	lr, lr, r5
9001ad84:	b2db      	uxtb	r3, r3
9001ad86:	fb01 810c 	mla	r1, r1, ip, r8
9001ad8a:	f89a 8001 	ldrb.w	r8, [sl, #1]
9001ad8e:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
9001ad92:	fb18 f805 	smulbb	r8, r8, r5
9001ad96:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
9001ad9a:	b289      	uxth	r1, r1
9001ad9c:	fb02 820c 	mla	r2, r2, ip, r8
9001ada0:	fb03 e30c 	mla	r3, r3, ip, lr
9001ada4:	f101 0801 	add.w	r8, r1, #1
9001ada8:	b292      	uxth	r2, r2
9001adaa:	b29b      	uxth	r3, r3
9001adac:	eb08 2111 	add.w	r1, r8, r1, lsr #8
9001adb0:	f102 0801 	add.w	r8, r2, #1
9001adb4:	f103 0e01 	add.w	lr, r3, #1
9001adb8:	eb08 2812 	add.w	r8, r8, r2, lsr #8
9001adbc:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
9001adc0:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
9001adc4:	ea4f 1858 	mov.w	r8, r8, lsr #5
9001adc8:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
9001adcc:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
9001add0:	ea4e 0101 	orr.w	r1, lr, r1
9001add4:	ea41 0108 	orr.w	r1, r1, r8
9001add8:	f820 1b02 	strh.w	r1, [r0], #2
9001addc:	e7b6      	b.n	9001ad4c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x104>
9001adde:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
9001ade0:	881b      	ldrh	r3, [r3, #0]
9001ade2:	1b9b      	subs	r3, r3, r6
9001ade4:	eb00 0043 	add.w	r0, r0, r3, lsl #1
9001ade8:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
9001adec:	1b9b      	subs	r3, r3, r6
9001adee:	441c      	add	r4, r3
9001adf0:	e7a6      	b.n	9001ad40 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xf8>
9001adf2:	eb00 0a4a 	add.w	sl, r0, sl, lsl #1
9001adf6:	2203      	movs	r2, #3
9001adf8:	2504      	movs	r5, #4
9001adfa:	4919      	ldr	r1, [pc, #100]	; (9001ae60 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x218>)
9001adfc:	4550      	cmp	r0, sl
9001adfe:	d228      	bcs.n	9001ae52 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
9001ae00:	eb00 0c09 	add.w	ip, r0, r9
9001ae04:	4560      	cmp	r0, ip
9001ae06:	4623      	mov	r3, r4
9001ae08:	d219      	bcs.n	9001ae3e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1f6>
9001ae0a:	f893 e000 	ldrb.w	lr, [r3]
9001ae0e:	3401      	adds	r4, #1
9001ae10:	fb12 5e0e 	smlabb	lr, r2, lr, r5
9001ae14:	eb07 0b0e 	add.w	fp, r7, lr
9001ae18:	f817 e00e 	ldrb.w	lr, [r7, lr]
9001ae1c:	f89b 3002 	ldrb.w	r3, [fp, #2]
9001ae20:	f89b b001 	ldrb.w	fp, [fp, #1]
9001ae24:	ea01 2303 	and.w	r3, r1, r3, lsl #8
9001ae28:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
9001ae2c:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
9001ae30:	ea43 030b 	orr.w	r3, r3, fp
9001ae34:	ea43 03de 	orr.w	r3, r3, lr, lsr #3
9001ae38:	f820 3b02 	strh.w	r3, [r0], #2
9001ae3c:	e7e2      	b.n	9001ae04 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1bc>
9001ae3e:	f8b8 3000 	ldrh.w	r3, [r8]
9001ae42:	1b9b      	subs	r3, r3, r6
9001ae44:	eb00 0043 	add.w	r0, r0, r3, lsl #1
9001ae48:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
9001ae4c:	1b9b      	subs	r3, r3, r6
9001ae4e:	441c      	add	r4, r3
9001ae50:	e7d4      	b.n	9001adfc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b4>
9001ae52:	4b04      	ldr	r3, [pc, #16]	; (9001ae64 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>)
9001ae54:	6818      	ldr	r0, [r3, #0]
9001ae56:	6803      	ldr	r3, [r0, #0]
9001ae58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9001ae5a:	4798      	blx	r3
9001ae5c:	e750      	b.n	9001ad00 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb8>
9001ae5e:	bf00      	nop
9001ae60:	fffff800 	.word	0xfffff800
9001ae64:	24021c14 	.word	0x24021c14
9001ae68:	24021c0e 	.word	0x24021c0e

9001ae6c <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
9001ae6c:	b4f0      	push	{r4, r5, r6, r7}
9001ae6e:	460c      	mov	r4, r1
9001ae70:	4611      	mov	r1, r2
9001ae72:	f89d 5014 	ldrb.w	r5, [sp, #20]
9001ae76:	461a      	mov	r2, r3
9001ae78:	780f      	ldrb	r7, [r1, #0]
9001ae7a:	9b04      	ldr	r3, [sp, #16]
9001ae7c:	2f01      	cmp	r7, #1
9001ae7e:	784e      	ldrb	r6, [r1, #1]
9001ae80:	d036      	beq.n	9001aef0 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x84>
9001ae82:	d31e      	bcc.n	9001aec2 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x56>
9001ae84:	2f02      	cmp	r7, #2
9001ae86:	d14a      	bne.n	9001af1e <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb2>
9001ae88:	2e03      	cmp	r6, #3
9001ae8a:	d848      	bhi.n	9001af1e <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb2>
9001ae8c:	e8df f006 	tbb	[pc, r6]
9001ae90:	16140702 	.word	0x16140702
9001ae94:	9504      	str	r5, [sp, #16]
9001ae96:	4620      	mov	r0, r4
9001ae98:	bcf0      	pop	{r4, r5, r6, r7}
9001ae9a:	f7ff be09 	b.w	9001aab0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>
9001ae9e:	6f80      	ldr	r0, [r0, #120]	; 0x78
9001aea0:	2800      	cmp	r0, #0
9001aea2:	d03c      	beq.n	9001af1e <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb2>
9001aea4:	6806      	ldr	r6, [r0, #0]
9001aea6:	e9cd 3504 	strd	r3, r5, [sp, #16]
9001aeaa:	68b5      	ldr	r5, [r6, #8]
9001aeac:	4613      	mov	r3, r2
9001aeae:	46ac      	mov	ip, r5
9001aeb0:	460a      	mov	r2, r1
9001aeb2:	4621      	mov	r1, r4
9001aeb4:	bcf0      	pop	{r4, r5, r6, r7}
9001aeb6:	4760      	bx	ip
9001aeb8:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
9001aeba:	e7f1      	b.n	9001aea0 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>
9001aebc:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
9001aec0:	e7ee      	b.n	9001aea0 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>
9001aec2:	2e03      	cmp	r6, #3
9001aec4:	d82b      	bhi.n	9001af1e <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb2>
9001aec6:	e8df f006 	tbb	[pc, r6]
9001aeca:	0702      	.short	0x0702
9001aecc:	100e      	.short	0x100e
9001aece:	9504      	str	r5, [sp, #16]
9001aed0:	4620      	mov	r0, r4
9001aed2:	bcf0      	pop	{r4, r5, r6, r7}
9001aed4:	f7ff bd06 	b.w	9001a8e4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
9001aed8:	6f80      	ldr	r0, [r0, #120]	; 0x78
9001aeda:	b300      	cbz	r0, 9001af1e <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb2>
9001aedc:	6806      	ldr	r6, [r0, #0]
9001aede:	e9cd 3504 	strd	r3, r5, [sp, #16]
9001aee2:	68f5      	ldr	r5, [r6, #12]
9001aee4:	e7e2      	b.n	9001aeac <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x40>
9001aee6:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
9001aee8:	e7f7      	b.n	9001aeda <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x6e>
9001aeea:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
9001aeee:	e7f4      	b.n	9001aeda <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x6e>
9001aef0:	2e03      	cmp	r6, #3
9001aef2:	d814      	bhi.n	9001af1e <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb2>
9001aef4:	e8df f006 	tbb	[pc, r6]
9001aef8:	100e0702 	.word	0x100e0702
9001aefc:	9504      	str	r5, [sp, #16]
9001aefe:	4620      	mov	r0, r4
9001af00:	bcf0      	pop	{r4, r5, r6, r7}
9001af02:	f7ff bea1 	b.w	9001ac48 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
9001af06:	6f80      	ldr	r0, [r0, #120]	; 0x78
9001af08:	b148      	cbz	r0, 9001af1e <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb2>
9001af0a:	6806      	ldr	r6, [r0, #0]
9001af0c:	e9cd 3504 	strd	r3, r5, [sp, #16]
9001af10:	6935      	ldr	r5, [r6, #16]
9001af12:	e7cb      	b.n	9001aeac <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x40>
9001af14:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
9001af16:	e7f7      	b.n	9001af08 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x9c>
9001af18:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
9001af1c:	e7f4      	b.n	9001af08 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x9c>
9001af1e:	bcf0      	pop	{r4, r5, r6, r7}
9001af20:	4770      	bx	lr
	...

9001af24 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>:
9001af24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001af28:	b087      	sub	sp, #28
9001af2a:	4604      	mov	r4, r0
9001af2c:	460e      	mov	r6, r1
9001af2e:	6810      	ldr	r0, [r2, #0]
9001af30:	6851      	ldr	r1, [r2, #4]
9001af32:	ad02      	add	r5, sp, #8
9001af34:	4617      	mov	r7, r2
9001af36:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
9001af3a:	f8df 9230 	ldr.w	r9, [pc, #560]	; 9001b16c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x248>
9001af3e:	c503      	stmia	r5!, {r0, r1}
9001af40:	6818      	ldr	r0, [r3, #0]
9001af42:	ad04      	add	r5, sp, #16
9001af44:	6859      	ldr	r1, [r3, #4]
9001af46:	c503      	stmia	r5!, {r0, r1}
9001af48:	a802      	add	r0, sp, #8
9001af4a:	f7f8 f951 	bl	900131f0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
9001af4e:	4639      	mov	r1, r7
9001af50:	a804      	add	r0, sp, #16
9001af52:	f7f8 f975 	bl	90013240 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
9001af56:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
9001af5a:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
9001af5e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
9001af62:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
9001af66:	fb11 2103 	smlabb	r1, r1, r3, r2
9001af6a:	f9bd 5016 	ldrsh.w	r5, [sp, #22]
9001af6e:	eb04 0441 	add.w	r4, r4, r1, lsl #1
9001af72:	440e      	add	r6, r1
9001af74:	f8bd 1008 	ldrh.w	r1, [sp, #8]
9001af78:	440a      	add	r2, r1
9001af7a:	f8ad 2010 	strh.w	r2, [sp, #16]
9001af7e:	f8bd 200a 	ldrh.w	r2, [sp, #10]
9001af82:	4413      	add	r3, r2
9001af84:	f8ad 3012 	strh.w	r3, [sp, #18]
9001af88:	4b77      	ldr	r3, [pc, #476]	; (9001b168 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
9001af8a:	6818      	ldr	r0, [r3, #0]
9001af8c:	6803      	ldr	r3, [r0, #0]
9001af8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9001af90:	4798      	blx	r3
9001af92:	f8b9 b000 	ldrh.w	fp, [r9]
9001af96:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
9001af9a:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
9001af9e:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
9001afa2:	fb05 f50b 	mul.w	r5, r5, fp
9001afa6:	fb0b 2303 	mla	r3, fp, r3, r2
9001afaa:	eb00 0043 	add.w	r0, r0, r3, lsl #1
9001afae:	ea4f 0348 	mov.w	r3, r8, lsl #1
9001afb2:	9300      	str	r3, [sp, #0]
9001afb4:	d069      	beq.n	9001b08a <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x166>
9001afb6:	eb00 0b45 	add.w	fp, r0, r5, lsl #1
9001afba:	4558      	cmp	r0, fp
9001afbc:	f080 80cc 	bcs.w	9001b158 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
9001afc0:	9b00      	ldr	r3, [sp, #0]
9001afc2:	4631      	mov	r1, r6
9001afc4:	18c3      	adds	r3, r0, r3
9001afc6:	9301      	str	r3, [sp, #4]
9001afc8:	9b01      	ldr	r3, [sp, #4]
9001afca:	4298      	cmp	r0, r3
9001afcc:	d24f      	bcs.n	9001b06e <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x14a>
9001afce:	f811 2b01 	ldrb.w	r2, [r1], #1
9001afd2:	2a00      	cmp	r2, #0
9001afd4:	d048      	beq.n	9001b068 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
9001afd6:	fb0a f202 	mul.w	r2, sl, r2
9001afda:	1c53      	adds	r3, r2, #1
9001afdc:	eb03 2312 	add.w	r3, r3, r2, lsr #8
9001afe0:	121b      	asrs	r3, r3, #8
9001afe2:	d041      	beq.n	9001b068 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
9001afe4:	8802      	ldrh	r2, [r0, #0]
9001afe6:	b29e      	uxth	r6, r3
9001afe8:	f8b4 c000 	ldrh.w	ip, [r4]
9001afec:	43db      	mvns	r3, r3
9001afee:	1215      	asrs	r5, r2, #8
9001aff0:	b2db      	uxtb	r3, r3
9001aff2:	ea4f 272c 	mov.w	r7, ip, asr #8
9001aff6:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
9001affa:	ea4f 0ee2 	mov.w	lr, r2, asr #3
9001affe:	fb15 f503 	smulbb	r5, r5, r3
9001b002:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
9001b006:	00d2      	lsls	r2, r2, #3
9001b008:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
9001b00c:	fb07 5706 	mla	r7, r7, r6, r5
9001b010:	ea4f 05ec 	mov.w	r5, ip, asr #3
9001b014:	b2d2      	uxtb	r2, r2
9001b016:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
9001b01a:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
9001b01e:	fb1e fe03 	smulbb	lr, lr, r3
9001b022:	b2bf      	uxth	r7, r7
9001b024:	fb12 f203 	smulbb	r2, r2, r3
9001b028:	fa5f fc8c 	uxtb.w	ip, ip
9001b02c:	fb05 e506 	mla	r5, r5, r6, lr
9001b030:	f107 0e01 	add.w	lr, r7, #1
9001b034:	fb0c 2c06 	mla	ip, ip, r6, r2
9001b038:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
9001b03c:	fa1f fc8c 	uxth.w	ip, ip
9001b040:	f407 4e78 	and.w	lr, r7, #63488	; 0xf800
9001b044:	b2ad      	uxth	r5, r5
9001b046:	f10c 0701 	add.w	r7, ip, #1
9001b04a:	eb07 271c 	add.w	r7, r7, ip, lsr #8
9001b04e:	f3c7 27c4 	ubfx	r7, r7, #11, #5
9001b052:	ea47 070e 	orr.w	r7, r7, lr
9001b056:	f105 0e01 	add.w	lr, r5, #1
9001b05a:	eb0e 2515 	add.w	r5, lr, r5, lsr #8
9001b05e:	096d      	lsrs	r5, r5, #5
9001b060:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
9001b064:	432f      	orrs	r7, r5
9001b066:	8007      	strh	r7, [r0, #0]
9001b068:	3002      	adds	r0, #2
9001b06a:	3402      	adds	r4, #2
9001b06c:	e7ac      	b.n	9001afc8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xa4>
9001b06e:	f8b9 3000 	ldrh.w	r3, [r9]
9001b072:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
9001b076:	eba3 0308 	sub.w	r3, r3, r8
9001b07a:	eba6 0608 	sub.w	r6, r6, r8
9001b07e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
9001b082:	eb04 0446 	add.w	r4, r4, r6, lsl #1
9001b086:	440e      	add	r6, r1
9001b088:	e797      	b.n	9001afba <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x96>
9001b08a:	eb00 0545 	add.w	r5, r0, r5, lsl #1
9001b08e:	42a8      	cmp	r0, r5
9001b090:	d262      	bcs.n	9001b158 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
9001b092:	9b00      	ldr	r3, [sp, #0]
9001b094:	4631      	mov	r1, r6
9001b096:	eb00 0b03 	add.w	fp, r0, r3
9001b09a:	4558      	cmp	r0, fp
9001b09c:	d24e      	bcs.n	9001b13c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x218>
9001b09e:	f811 3b01 	ldrb.w	r3, [r1], #1
9001b0a2:	b12b      	cbz	r3, 9001b0b0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
9001b0a4:	2bff      	cmp	r3, #255	; 0xff
9001b0a6:	f8b4 e000 	ldrh.w	lr, [r4]
9001b0aa:	d104      	bne.n	9001b0b6 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x192>
9001b0ac:	f8a0 e000 	strh.w	lr, [r0]
9001b0b0:	3002      	adds	r0, #2
9001b0b2:	3402      	adds	r4, #2
9001b0b4:	e7f1      	b.n	9001b09a <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x176>
9001b0b6:	8802      	ldrh	r2, [r0, #0]
9001b0b8:	b29f      	uxth	r7, r3
9001b0ba:	43db      	mvns	r3, r3
9001b0bc:	ea4f 2c2e 	mov.w	ip, lr, asr #8
9001b0c0:	1216      	asrs	r6, r2, #8
9001b0c2:	b2db      	uxtb	r3, r3
9001b0c4:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
9001b0c8:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
9001b0cc:	ea4f 0ae2 	mov.w	sl, r2, asr #3
9001b0d0:	00d2      	lsls	r2, r2, #3
9001b0d2:	fb16 f603 	smulbb	r6, r6, r3
9001b0d6:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
9001b0da:	b2d2      	uxtb	r2, r2
9001b0dc:	fb0c 6c07 	mla	ip, ip, r7, r6
9001b0e0:	ea4f 06ee 	mov.w	r6, lr, asr #3
9001b0e4:	fb1a fa03 	smulbb	sl, sl, r3
9001b0e8:	ea4f 0ece 	mov.w	lr, lr, lsl #3
9001b0ec:	fa1f fc8c 	uxth.w	ip, ip
9001b0f0:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
9001b0f4:	fb12 f303 	smulbb	r3, r2, r3
9001b0f8:	fa5f fe8e 	uxtb.w	lr, lr
9001b0fc:	fb06 a607 	mla	r6, r6, r7, sl
9001b100:	f10c 0201 	add.w	r2, ip, #1
9001b104:	fb0e 3307 	mla	r3, lr, r7, r3
9001b108:	b2b6      	uxth	r6, r6
9001b10a:	b29b      	uxth	r3, r3
9001b10c:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
9001b110:	f106 0a01 	add.w	sl, r6, #1
9001b114:	f40c 4278 	and.w	r2, ip, #63488	; 0xf800
9001b118:	f103 0c01 	add.w	ip, r3, #1
9001b11c:	eb0a 2616 	add.w	r6, sl, r6, lsr #8
9001b120:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
9001b124:	0976      	lsrs	r6, r6, #5
9001b126:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
9001b12a:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
9001b12e:	ea4c 0c02 	orr.w	ip, ip, r2
9001b132:	ea4c 0c06 	orr.w	ip, ip, r6
9001b136:	f8a0 c000 	strh.w	ip, [r0]
9001b13a:	e7b9      	b.n	9001b0b0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
9001b13c:	f8b9 3000 	ldrh.w	r3, [r9]
9001b140:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
9001b144:	eba3 0308 	sub.w	r3, r3, r8
9001b148:	eba6 0608 	sub.w	r6, r6, r8
9001b14c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
9001b150:	eb04 0446 	add.w	r4, r4, r6, lsl #1
9001b154:	440e      	add	r6, r1
9001b156:	e79a      	b.n	9001b08e <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x16a>
9001b158:	4b03      	ldr	r3, [pc, #12]	; (9001b168 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
9001b15a:	6818      	ldr	r0, [r3, #0]
9001b15c:	6803      	ldr	r3, [r0, #0]
9001b15e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9001b160:	4798      	blx	r3
9001b162:	b007      	add	sp, #28
9001b164:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001b168:	24021c14 	.word	0x24021c14
9001b16c:	24021c0e 	.word	0x24021c0e

9001b170 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
9001b170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001b174:	b089      	sub	sp, #36	; 0x24
9001b176:	4682      	mov	sl, r0
9001b178:	460f      	mov	r7, r1
9001b17a:	4691      	mov	r9, r2
9001b17c:	f89d 604c 	ldrb.w	r6, [sp, #76]	; 0x4c
9001b180:	4698      	mov	r8, r3
9001b182:	9c12      	ldr	r4, [sp, #72]	; 0x48
9001b184:	2e00      	cmp	r6, #0
9001b186:	d03d      	beq.n	9001b204 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
9001b188:	4608      	mov	r0, r1
9001b18a:	f7fa fe4d 	bl	90015e28 <_ZNK8touchgfx6Bitmap8getWidthEv>
9001b18e:	4605      	mov	r5, r0
9001b190:	4638      	mov	r0, r7
9001b192:	f7fa fe7d 	bl	90015e90 <_ZNK8touchgfx6Bitmap9getHeightEv>
9001b196:	f8ad 000e 	strh.w	r0, [sp, #14]
9001b19a:	4638      	mov	r0, r7
9001b19c:	f8ad 9008 	strh.w	r9, [sp, #8]
9001b1a0:	f8ad 500c 	strh.w	r5, [sp, #12]
9001b1a4:	f8ad 800a 	strh.w	r8, [sp, #10]
9001b1a8:	f7fa ff2a 	bl	90016000 <_ZNK8touchgfx6Bitmap7getDataEv>
9001b1ac:	4605      	mov	r5, r0
9001b1ae:	4638      	mov	r0, r7
9001b1b0:	f7fa ff56 	bl	90016060 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
9001b1b4:	4681      	mov	r9, r0
9001b1b6:	4638      	mov	r0, r7
9001b1b8:	f7fa ffa6 	bl	90016108 <_ZNK8touchgfx6Bitmap9getFormatEv>
9001b1bc:	280b      	cmp	r0, #11
9001b1be:	d821      	bhi.n	9001b204 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
9001b1c0:	e8df f000 	tbb	[pc, r0]
9001b1c4:	2006aebe 	.word	0x2006aebe
9001b1c8:	20202020 	.word	0x20202020
9001b1cc:	b5202020 	.word	0xb5202020
9001b1d0:	4bb0      	ldr	r3, [pc, #704]	; (9001b494 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x324>)
9001b1d2:	6818      	ldr	r0, [r3, #0]
9001b1d4:	6803      	ldr	r3, [r0, #0]
9001b1d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
9001b1d8:	4798      	blx	r3
9001b1da:	2eff      	cmp	r6, #255	; 0xff
9001b1dc:	d101      	bne.n	9001b1e2 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x72>
9001b1de:	0683      	lsls	r3, r0, #26
9001b1e0:	d506      	bpl.n	9001b1f0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x80>
9001b1e2:	4633      	mov	r3, r6
9001b1e4:	4622      	mov	r2, r4
9001b1e6:	a902      	add	r1, sp, #8
9001b1e8:	4628      	mov	r0, r5
9001b1ea:	f7ff f909 	bl	9001a400 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
9001b1ee:	e009      	b.n	9001b204 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
9001b1f0:	4638      	mov	r0, r7
9001b1f2:	f7fa fecd 	bl	90015f90 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
9001b1f6:	b940      	cbnz	r0, 9001b20a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x9a>
9001b1f8:	4623      	mov	r3, r4
9001b1fa:	aa02      	add	r2, sp, #8
9001b1fc:	4629      	mov	r1, r5
9001b1fe:	4650      	mov	r0, sl
9001b200:	f7ff f9e4 	bl	9001a5cc <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
9001b204:	b009      	add	sp, #36	; 0x24
9001b206:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001b20a:	f10d 0818 	add.w	r8, sp, #24
9001b20e:	4639      	mov	r1, r7
9001b210:	af04      	add	r7, sp, #16
9001b212:	4640      	mov	r0, r8
9001b214:	f7fa fe70 	bl	90015ef8 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
9001b218:	e898 0003 	ldmia.w	r8, {r0, r1}
9001b21c:	e887 0003 	stmia.w	r7, {r0, r1}
9001b220:	4638      	mov	r0, r7
9001b222:	4621      	mov	r1, r4
9001b224:	f7f6 f816 	bl	90011254 <_ZN8touchgfx4RectaNERKS0_>
9001b228:	4638      	mov	r0, r7
9001b22a:	f7f6 f856 	bl	900112da <_ZNK8touchgfx4Rect7isEmptyEv>
9001b22e:	2800      	cmp	r0, #0
9001b230:	d1d7      	bne.n	9001b1e2 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x72>
9001b232:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
9001b236:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
9001b23a:	4293      	cmp	r3, r2
9001b23c:	dd12      	ble.n	9001b264 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xf4>
9001b23e:	1a9b      	subs	r3, r3, r2
9001b240:	f9b4 0000 	ldrsh.w	r0, [r4]
9001b244:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
9001b248:	f8ad 0018 	strh.w	r0, [sp, #24]
9001b24c:	4628      	mov	r0, r5
9001b24e:	f8ad 201a 	strh.w	r2, [sp, #26]
9001b252:	4642      	mov	r2, r8
9001b254:	f8ad 101c 	strh.w	r1, [sp, #28]
9001b258:	a902      	add	r1, sp, #8
9001b25a:	f8ad 301e 	strh.w	r3, [sp, #30]
9001b25e:	4633      	mov	r3, r6
9001b260:	f7ff f8ce 	bl	9001a400 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
9001b264:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
9001b268:	f9b4 2000 	ldrsh.w	r2, [r4]
9001b26c:	4293      	cmp	r3, r2
9001b26e:	dd12      	ble.n	9001b296 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x126>
9001b270:	1a9b      	subs	r3, r3, r2
9001b272:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
9001b276:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
9001b27a:	f8ad 2018 	strh.w	r2, [sp, #24]
9001b27e:	4642      	mov	r2, r8
9001b280:	f8ad 001a 	strh.w	r0, [sp, #26]
9001b284:	4628      	mov	r0, r5
9001b286:	f8ad 301c 	strh.w	r3, [sp, #28]
9001b28a:	23ff      	movs	r3, #255	; 0xff
9001b28c:	f8ad 101e 	strh.w	r1, [sp, #30]
9001b290:	a902      	add	r1, sp, #8
9001b292:	f7ff f8b5 	bl	9001a400 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
9001b296:	463b      	mov	r3, r7
9001b298:	aa02      	add	r2, sp, #8
9001b29a:	4629      	mov	r1, r5
9001b29c:	4650      	mov	r0, sl
9001b29e:	f7ff f995 	bl	9001a5cc <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
9001b2a2:	88a2      	ldrh	r2, [r4, #4]
9001b2a4:	8823      	ldrh	r3, [r4, #0]
9001b2a6:	f8bd 1014 	ldrh.w	r1, [sp, #20]
9001b2aa:	4413      	add	r3, r2
9001b2ac:	f8bd 2010 	ldrh.w	r2, [sp, #16]
9001b2b0:	440a      	add	r2, r1
9001b2b2:	b29b      	uxth	r3, r3
9001b2b4:	b292      	uxth	r2, r2
9001b2b6:	b218      	sxth	r0, r3
9001b2b8:	b211      	sxth	r1, r2
9001b2ba:	4288      	cmp	r0, r1
9001b2bc:	dd12      	ble.n	9001b2e4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x174>
9001b2be:	1a9b      	subs	r3, r3, r2
9001b2c0:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
9001b2c4:	f9bd 6012 	ldrsh.w	r6, [sp, #18]
9001b2c8:	4642      	mov	r2, r8
9001b2ca:	f8ad 1018 	strh.w	r1, [sp, #24]
9001b2ce:	a902      	add	r1, sp, #8
9001b2d0:	f8ad 301c 	strh.w	r3, [sp, #28]
9001b2d4:	23ff      	movs	r3, #255	; 0xff
9001b2d6:	f8ad 001e 	strh.w	r0, [sp, #30]
9001b2da:	4628      	mov	r0, r5
9001b2dc:	f8ad 601a 	strh.w	r6, [sp, #26]
9001b2e0:	f7ff f88e 	bl	9001a400 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
9001b2e4:	88e2      	ldrh	r2, [r4, #6]
9001b2e6:	8863      	ldrh	r3, [r4, #2]
9001b2e8:	f8bd 1016 	ldrh.w	r1, [sp, #22]
9001b2ec:	4413      	add	r3, r2
9001b2ee:	f8bd 2012 	ldrh.w	r2, [sp, #18]
9001b2f2:	440a      	add	r2, r1
9001b2f4:	b29b      	uxth	r3, r3
9001b2f6:	b292      	uxth	r2, r2
9001b2f8:	b218      	sxth	r0, r3
9001b2fa:	b211      	sxth	r1, r2
9001b2fc:	4288      	cmp	r0, r1
9001b2fe:	dd81      	ble.n	9001b204 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
9001b300:	1a9b      	subs	r3, r3, r2
9001b302:	f9b4 6000 	ldrsh.w	r6, [r4]
9001b306:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
9001b30a:	4642      	mov	r2, r8
9001b30c:	f8ad 301e 	strh.w	r3, [sp, #30]
9001b310:	23ff      	movs	r3, #255	; 0xff
9001b312:	f8ad 6018 	strh.w	r6, [sp, #24]
9001b316:	f8ad 101a 	strh.w	r1, [sp, #26]
9001b31a:	f8ad 001c 	strh.w	r0, [sp, #28]
9001b31e:	e762      	b.n	9001b1e6 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x76>
9001b320:	4633      	mov	r3, r6
9001b322:	4622      	mov	r2, r4
9001b324:	a902      	add	r1, sp, #8
9001b326:	4628      	mov	r0, r5
9001b328:	f7ff f9c0 	bl	9001a6ac <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
9001b32c:	e76a      	b.n	9001b204 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
9001b32e:	e9cd 4600 	strd	r4, r6, [sp]
9001b332:	ab02      	add	r3, sp, #8
9001b334:	464a      	mov	r2, r9
9001b336:	4629      	mov	r1, r5
9001b338:	4650      	mov	r0, sl
9001b33a:	f7ff fd97 	bl	9001ae6c <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
9001b33e:	e761      	b.n	9001b204 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
9001b340:	4638      	mov	r0, r7
9001b342:	f7fa fe25 	bl	90015f90 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
9001b346:	b950      	cbnz	r0, 9001b35e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1ee>
9001b348:	f8da 3000 	ldr.w	r3, [sl]
9001b34c:	aa02      	add	r2, sp, #8
9001b34e:	4629      	mov	r1, r5
9001b350:	e9cd 6000 	strd	r6, r0, [sp]
9001b354:	4650      	mov	r0, sl
9001b356:	68de      	ldr	r6, [r3, #12]
9001b358:	4623      	mov	r3, r4
9001b35a:	47b0      	blx	r6
9001b35c:	e752      	b.n	9001b204 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
9001b35e:	f10d 0818 	add.w	r8, sp, #24
9001b362:	4639      	mov	r1, r7
9001b364:	af04      	add	r7, sp, #16
9001b366:	4640      	mov	r0, r8
9001b368:	f7fa fdc6 	bl	90015ef8 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
9001b36c:	e898 0003 	ldmia.w	r8, {r0, r1}
9001b370:	e887 0003 	stmia.w	r7, {r0, r1}
9001b374:	4638      	mov	r0, r7
9001b376:	4621      	mov	r1, r4
9001b378:	f7f5 ff6c 	bl	90011254 <_ZN8touchgfx4RectaNERKS0_>
9001b37c:	4638      	mov	r0, r7
9001b37e:	f7f5 ffac 	bl	900112da <_ZNK8touchgfx4Rect7isEmptyEv>
9001b382:	b138      	cbz	r0, 9001b394 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x224>
9001b384:	4623      	mov	r3, r4
9001b386:	9600      	str	r6, [sp, #0]
9001b388:	aa02      	add	r2, sp, #8
9001b38a:	4649      	mov	r1, r9
9001b38c:	4628      	mov	r0, r5
9001b38e:	f7ff fdc9 	bl	9001af24 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
9001b392:	e737      	b.n	9001b204 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
9001b394:	f8da 3000 	ldr.w	r3, [sl]
9001b398:	aa02      	add	r2, sp, #8
9001b39a:	4629      	mov	r1, r5
9001b39c:	e9cd 6000 	strd	r6, r0, [sp]
9001b3a0:	4650      	mov	r0, sl
9001b3a2:	f8d3 b00c 	ldr.w	fp, [r3, #12]
9001b3a6:	463b      	mov	r3, r7
9001b3a8:	47d8      	blx	fp
9001b3aa:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
9001b3ae:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
9001b3b2:	4293      	cmp	r3, r2
9001b3b4:	dd13      	ble.n	9001b3de <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x26e>
9001b3b6:	f9b4 0000 	ldrsh.w	r0, [r4]
9001b3ba:	1a9b      	subs	r3, r3, r2
9001b3bc:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
9001b3c0:	f8ad 0018 	strh.w	r0, [sp, #24]
9001b3c4:	4628      	mov	r0, r5
9001b3c6:	f8ad 201a 	strh.w	r2, [sp, #26]
9001b3ca:	aa02      	add	r2, sp, #8
9001b3cc:	f8ad 101c 	strh.w	r1, [sp, #28]
9001b3d0:	4649      	mov	r1, r9
9001b3d2:	f8ad 301e 	strh.w	r3, [sp, #30]
9001b3d6:	4643      	mov	r3, r8
9001b3d8:	9600      	str	r6, [sp, #0]
9001b3da:	f7ff fda3 	bl	9001af24 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
9001b3de:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
9001b3e2:	f9b4 2000 	ldrsh.w	r2, [r4]
9001b3e6:	4293      	cmp	r3, r2
9001b3e8:	dd13      	ble.n	9001b412 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2a2>
9001b3ea:	1a9b      	subs	r3, r3, r2
9001b3ec:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
9001b3f0:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
9001b3f4:	f8ad 2018 	strh.w	r2, [sp, #24]
9001b3f8:	aa02      	add	r2, sp, #8
9001b3fa:	f8ad 001a 	strh.w	r0, [sp, #26]
9001b3fe:	4628      	mov	r0, r5
9001b400:	f8ad 301c 	strh.w	r3, [sp, #28]
9001b404:	4643      	mov	r3, r8
9001b406:	f8ad 101e 	strh.w	r1, [sp, #30]
9001b40a:	4649      	mov	r1, r9
9001b40c:	9600      	str	r6, [sp, #0]
9001b40e:	f7ff fd89 	bl	9001af24 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
9001b412:	88a2      	ldrh	r2, [r4, #4]
9001b414:	8823      	ldrh	r3, [r4, #0]
9001b416:	f8bd 1014 	ldrh.w	r1, [sp, #20]
9001b41a:	4413      	add	r3, r2
9001b41c:	f8bd 2010 	ldrh.w	r2, [sp, #16]
9001b420:	440a      	add	r2, r1
9001b422:	b29b      	uxth	r3, r3
9001b424:	b292      	uxth	r2, r2
9001b426:	b218      	sxth	r0, r3
9001b428:	b211      	sxth	r1, r2
9001b42a:	4288      	cmp	r0, r1
9001b42c:	dd13      	ble.n	9001b456 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2e6>
9001b42e:	1a9b      	subs	r3, r3, r2
9001b430:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
9001b434:	f9bd 7012 	ldrsh.w	r7, [sp, #18]
9001b438:	aa02      	add	r2, sp, #8
9001b43a:	f8ad 1018 	strh.w	r1, [sp, #24]
9001b43e:	4649      	mov	r1, r9
9001b440:	f8ad 301c 	strh.w	r3, [sp, #28]
9001b444:	4643      	mov	r3, r8
9001b446:	f8ad 001e 	strh.w	r0, [sp, #30]
9001b44a:	4628      	mov	r0, r5
9001b44c:	9600      	str	r6, [sp, #0]
9001b44e:	f8ad 701a 	strh.w	r7, [sp, #26]
9001b452:	f7ff fd67 	bl	9001af24 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
9001b456:	88e2      	ldrh	r2, [r4, #6]
9001b458:	8863      	ldrh	r3, [r4, #2]
9001b45a:	f8bd 1016 	ldrh.w	r1, [sp, #22]
9001b45e:	4413      	add	r3, r2
9001b460:	f8bd 2012 	ldrh.w	r2, [sp, #18]
9001b464:	440a      	add	r2, r1
9001b466:	b29b      	uxth	r3, r3
9001b468:	b292      	uxth	r2, r2
9001b46a:	b218      	sxth	r0, r3
9001b46c:	b211      	sxth	r1, r2
9001b46e:	4288      	cmp	r0, r1
9001b470:	f77f aec8 	ble.w	9001b204 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
9001b474:	f9b4 7000 	ldrsh.w	r7, [r4]
9001b478:	1a9b      	subs	r3, r3, r2
9001b47a:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
9001b47e:	f8ad 301e 	strh.w	r3, [sp, #30]
9001b482:	4643      	mov	r3, r8
9001b484:	f8ad 7018 	strh.w	r7, [sp, #24]
9001b488:	f8ad 101a 	strh.w	r1, [sp, #26]
9001b48c:	f8ad 001c 	strh.w	r0, [sp, #28]
9001b490:	9600      	str	r6, [sp, #0]
9001b492:	e779      	b.n	9001b388 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x218>
9001b494:	24021c14 	.word	0x24021c14

9001b498 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>:
9001b498:	b180      	cbz	r0, 9001b4bc <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x24>
9001b49a:	2903      	cmp	r1, #3
9001b49c:	d81c      	bhi.n	9001b4d8 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
9001b49e:	e8df f001 	tbb	[pc, r1]
9001b4a2:	1d02      	.short	0x1d02
9001b4a4:	1f08      	.short	0x1f08
9001b4a6:	4b10      	ldr	r3, [pc, #64]	; (9001b4e8 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
9001b4a8:	8818      	ldrh	r0, [r3, #0]
9001b4aa:	f3c0 000e 	ubfx	r0, r0, #0, #15
9001b4ae:	4240      	negs	r0, r0
9001b4b0:	4770      	bx	lr
9001b4b2:	4b0d      	ldr	r3, [pc, #52]	; (9001b4e8 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
9001b4b4:	8818      	ldrh	r0, [r3, #0]
9001b4b6:	f3c0 000e 	ubfx	r0, r0, #0, #15
9001b4ba:	4770      	bx	lr
9001b4bc:	2903      	cmp	r1, #3
9001b4be:	d80b      	bhi.n	9001b4d8 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
9001b4c0:	a301      	add	r3, pc, #4	; (adr r3, 9001b4c8 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x30>)
9001b4c2:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
9001b4c6:	bf00      	nop
9001b4c8:	9001b4dd 	.word	0x9001b4dd
9001b4cc:	9001b4b3 	.word	0x9001b4b3
9001b4d0:	9001b4e1 	.word	0x9001b4e1
9001b4d4:	9001b4a7 	.word	0x9001b4a7
9001b4d8:	2000      	movs	r0, #0
9001b4da:	4770      	bx	lr
9001b4dc:	2001      	movs	r0, #1
9001b4de:	4770      	bx	lr
9001b4e0:	f04f 30ff 	mov.w	r0, #4294967295
9001b4e4:	4770      	bx	lr
9001b4e6:	bf00      	nop
9001b4e8:	24021c0e 	.word	0x24021c0e

9001b4ec <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>:
9001b4ec:	b180      	cbz	r0, 9001b510 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x24>
9001b4ee:	2903      	cmp	r1, #3
9001b4f0:	d81c      	bhi.n	9001b52c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x40>
9001b4f2:	e8df f001 	tbb	[pc, r1]
9001b4f6:	021d      	.short	0x021d
9001b4f8:	071f      	.short	0x071f
9001b4fa:	4b10      	ldr	r3, [pc, #64]	; (9001b53c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
9001b4fc:	8818      	ldrh	r0, [r3, #0]
9001b4fe:	f3c0 000e 	ubfx	r0, r0, #0, #15
9001b502:	4770      	bx	lr
9001b504:	4b0d      	ldr	r3, [pc, #52]	; (9001b53c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
9001b506:	8818      	ldrh	r0, [r3, #0]
9001b508:	f3c0 000e 	ubfx	r0, r0, #0, #15
9001b50c:	4240      	negs	r0, r0
9001b50e:	4770      	bx	lr
9001b510:	2903      	cmp	r1, #3
9001b512:	d80b      	bhi.n	9001b52c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x40>
9001b514:	a301      	add	r3, pc, #4	; (adr r3, 9001b51c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x30>)
9001b516:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
9001b51a:	bf00      	nop
9001b51c:	9001b4fb 	.word	0x9001b4fb
9001b520:	9001b535 	.word	0x9001b535
9001b524:	9001b505 	.word	0x9001b505
9001b528:	9001b531 	.word	0x9001b531
9001b52c:	2000      	movs	r0, #0
9001b52e:	4770      	bx	lr
9001b530:	2001      	movs	r0, #1
9001b532:	4770      	bx	lr
9001b534:	f04f 30ff 	mov.w	r0, #4294967295
9001b538:	4770      	bx	lr
9001b53a:	bf00      	nop
9001b53c:	24021c0e 	.word	0x24021c0e

9001b540 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
9001b540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001b544:	b099      	sub	sp, #100	; 0x64
9001b546:	910b      	str	r1, [sp, #44]	; 0x2c
9001b548:	a914      	add	r1, sp, #80	; 0x50
9001b54a:	f9bd 4088 	ldrsh.w	r4, [sp, #136]	; 0x88
9001b54e:	f8bd 5090 	ldrh.w	r5, [sp, #144]	; 0x90
9001b552:	f8bd 6094 	ldrh.w	r6, [sp, #148]	; 0x94
9001b556:	f89d 80ac 	ldrb.w	r8, [sp, #172]	; 0xac
9001b55a:	f89d a0b4 	ldrb.w	sl, [sp, #180]	; 0xb4
9001b55e:	e881 000c 	stmia.w	r1, {r2, r3}
9001b562:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	; 0x8c
9001b566:	e9dd 2126 	ldrd	r2, r1, [sp, #152]	; 0x98
9001b56a:	9309      	str	r3, [sp, #36]	; 0x24
9001b56c:	f891 900d 	ldrb.w	r9, [r1, #13]
9001b570:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
9001b574:	ea4f 1749 	mov.w	r7, r9, lsl #5
9001b578:	9310      	str	r3, [sp, #64]	; 0x40
9001b57a:	f89d 30b0 	ldrb.w	r3, [sp, #176]	; 0xb0
9001b57e:	930c      	str	r3, [sp, #48]	; 0x30
9001b580:	f407 7380 	and.w	r3, r7, #256	; 0x100
9001b584:	798f      	ldrb	r7, [r1, #6]
9001b586:	431f      	orrs	r7, r3
9001b588:	f000 8195 	beq.w	9001b8b6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
9001b58c:	ea4f 1909 	mov.w	r9, r9, lsl #4
9001b590:	f409 7380 	and.w	r3, r9, #256	; 0x100
9001b594:	f891 9007 	ldrb.w	r9, [r1, #7]
9001b598:	ea59 0903 	orrs.w	r9, r9, r3
9001b59c:	f000 818b 	beq.w	9001b8b6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
9001b5a0:	f991 3009 	ldrsb.w	r3, [r1, #9]
9001b5a4:	b29b      	uxth	r3, r3
9001b5a6:	2d00      	cmp	r5, #0
9001b5a8:	f000 812e 	beq.w	9001b808 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2c8>
9001b5ac:	1aed      	subs	r5, r5, r3
9001b5ae:	b2ad      	uxth	r5, r5
9001b5b0:	042b      	lsls	r3, r5, #16
9001b5b2:	d502      	bpl.n	9001b5ba <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
9001b5b4:	1b64      	subs	r4, r4, r5
9001b5b6:	2500      	movs	r5, #0
9001b5b8:	b224      	sxth	r4, r4
9001b5ba:	f9b2 1000 	ldrsh.w	r1, [r2]
9001b5be:	a814      	add	r0, sp, #80	; 0x50
9001b5c0:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
9001b5c4:	428c      	cmp	r4, r1
9001b5c6:	b28b      	uxth	r3, r1
9001b5c8:	bfbf      	itttt	lt
9001b5ca:	18ed      	addlt	r5, r5, r3
9001b5cc:	1b2c      	sublt	r4, r5, r4
9001b5ce:	b2a5      	uxthlt	r5, r4
9001b5d0:	460c      	movlt	r4, r1
9001b5d2:	8891      	ldrh	r1, [r2, #4]
9001b5d4:	440b      	add	r3, r1
9001b5d6:	4621      	mov	r1, r4
9001b5d8:	b21b      	sxth	r3, r3
9001b5da:	930f      	str	r3, [sp, #60]	; 0x3c
9001b5dc:	88d3      	ldrh	r3, [r2, #6]
9001b5de:	8852      	ldrh	r2, [r2, #2]
9001b5e0:	4413      	add	r3, r2
9001b5e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
9001b5e4:	b21b      	sxth	r3, r3
9001b5e6:	930d      	str	r3, [sp, #52]	; 0x34
9001b5e8:	4bbd      	ldr	r3, [pc, #756]	; (9001b8e0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a0>)
9001b5ea:	f893 b000 	ldrb.w	fp, [r3]
9001b5ee:	f10b 3cff 	add.w	ip, fp, #4294967295
9001b5f2:	f1dc 0300 	rsbs	r3, ip, #0
9001b5f6:	eb43 030c 	adc.w	r3, r3, ip
9001b5fa:	930e      	str	r3, [sp, #56]	; 0x38
9001b5fc:	4653      	mov	r3, sl
9001b5fe:	f7f7 fc6b 	bl	90012ed8 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
9001b602:	4621      	mov	r1, r4
9001b604:	f8ad 005c 	strh.w	r0, [sp, #92]	; 0x5c
9001b608:	4653      	mov	r3, sl
9001b60a:	9a09      	ldr	r2, [sp, #36]	; 0x24
9001b60c:	a814      	add	r0, sp, #80	; 0x50
9001b60e:	f7f7 fc80 	bl	90012f12 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
9001b612:	a918      	add	r1, sp, #96	; 0x60
9001b614:	f821 0d02 	strh.w	r0, [r1, #-2]!
9001b618:	a817      	add	r0, sp, #92	; 0x5c
9001b61a:	f7f7 fda7 	bl	9001316c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
9001b61e:	f1ba 0f00 	cmp.w	sl, #0
9001b622:	f040 80f4 	bne.w	9001b80e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ce>
9001b626:	f1bb 0f01 	cmp.w	fp, #1
9001b62a:	f040 80f8 	bne.w	9001b81e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2de>
9001b62e:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001b630:	2b00      	cmp	r3, #0
9001b632:	f040 8145 	bne.w	9001b8c0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>
9001b636:	b2ba      	uxth	r2, r7
9001b638:	b905      	cbnz	r5, 9001b63c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xfc>
9001b63a:	b16e      	cbz	r6, 9001b658 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x118>
9001b63c:	fb06 5302 	mla	r3, r6, r2, r5
9001b640:	9828      	ldr	r0, [sp, #160]	; 0xa0
9001b642:	4631      	mov	r1, r6
9001b644:	fb08 f303 	mul.w	r3, r8, r3
9001b648:	f003 0607 	and.w	r6, r3, #7
9001b64c:	eb00 03d3 	add.w	r3, r0, r3, lsr #3
9001b650:	9328      	str	r3, [sp, #160]	; 0xa0
9001b652:	eba9 0301 	sub.w	r3, r9, r1
9001b656:	930a      	str	r3, [sp, #40]	; 0x28
9001b658:	4651      	mov	r1, sl
9001b65a:	980e      	ldr	r0, [sp, #56]	; 0x38
9001b65c:	f7ff ff1c 	bl	9001b498 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>
9001b660:	4681      	mov	r9, r0
9001b662:	980e      	ldr	r0, [sp, #56]	; 0x38
9001b664:	f7ff ff42 	bl	9001b4ec <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>
9001b668:	9b0d      	ldr	r3, [sp, #52]	; 0x34
9001b66a:	9909      	ldr	r1, [sp, #36]	; 0x24
9001b66c:	4683      	mov	fp, r0
9001b66e:	eba3 0a01 	sub.w	sl, r3, r1
9001b672:	9b0a      	ldr	r3, [sp, #40]	; 0x28
9001b674:	459a      	cmp	sl, r3
9001b676:	bfa8      	it	ge
9001b678:	469a      	movge	sl, r3
9001b67a:	f1ba 0f00 	cmp.w	sl, #0
9001b67e:	f340 811a 	ble.w	9001b8b6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
9001b682:	1b64      	subs	r4, r4, r5
9001b684:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
9001b686:	1b1c      	subs	r4, r3, r4
9001b688:	42bc      	cmp	r4, r7
9001b68a:	bfd4      	ite	le
9001b68c:	ebc5 0504 	rsble	r5, r5, r4
9001b690:	ebc5 0507 	rsbgt	r5, r5, r7
9001b694:	2d00      	cmp	r5, #0
9001b696:	f340 810e 	ble.w	9001b8b6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
9001b69a:	1b52      	subs	r2, r2, r5
9001b69c:	fb08 f302 	mul.w	r3, r8, r2
9001b6a0:	930f      	str	r3, [sp, #60]	; 0x3c
9001b6a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
9001b6a4:	2b00      	cmp	r3, #0
9001b6a6:	f040 8116 	bne.w	9001b8d6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x396>
9001b6aa:	4b8e      	ldr	r3, [pc, #568]	; (9001b8e4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a4>)
9001b6ac:	6818      	ldr	r0, [r3, #0]
9001b6ae:	6803      	ldr	r3, [r0, #0]
9001b6b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9001b6b2:	4798      	blx	r3
9001b6b4:	2301      	movs	r3, #1
9001b6b6:	4a8c      	ldr	r2, [pc, #560]	; (9001b8e8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a8>)
9001b6b8:	fa03 f308 	lsl.w	r3, r3, r8
9001b6bc:	8811      	ldrh	r1, [r2, #0]
9001b6be:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
9001b6c2:	3b01      	subs	r3, #1
9001b6c4:	b2db      	uxtb	r3, r3
9001b6c6:	930e      	str	r3, [sp, #56]	; 0x38
9001b6c8:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
9001b6cc:	fb01 2303 	mla	r3, r1, r3, r2
9001b6d0:	eb00 0343 	add.w	r3, r0, r3, lsl #1
9001b6d4:	930a      	str	r3, [sp, #40]	; 0x28
9001b6d6:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
9001b6d8:	f3c3 4307 	ubfx	r3, r3, #16, #8
9001b6dc:	9313      	str	r3, [sp, #76]	; 0x4c
9001b6de:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
9001b6e0:	0a19      	lsrs	r1, r3, #8
9001b6e2:	b2cb      	uxtb	r3, r1
9001b6e4:	9312      	str	r3, [sp, #72]	; 0x48
9001b6e6:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
9001b6e8:	b2db      	uxtb	r3, r3
9001b6ea:	9311      	str	r3, [sp, #68]	; 0x44
9001b6ec:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
9001b6ee:	095a      	lsrs	r2, r3, #5
9001b6f0:	4b7e      	ldr	r3, [pc, #504]	; (9001b8ec <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>)
9001b6f2:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
9001b6f6:	400b      	ands	r3, r1
9001b6f8:	4313      	orrs	r3, r2
9001b6fa:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
9001b6fc:	f3c2 02c4 	ubfx	r2, r2, #3, #5
9001b700:	4313      	orrs	r3, r2
9001b702:	b29b      	uxth	r3, r3
9001b704:	9310      	str	r3, [sp, #64]	; 0x40
9001b706:	9b28      	ldr	r3, [sp, #160]	; 0xa0
9001b708:	781a      	ldrb	r2, [r3, #0]
9001b70a:	ea4f 0349 	mov.w	r3, r9, lsl #1
9001b70e:	fb05 b919 	mls	r9, r5, r9, fp
9001b712:	4132      	asrs	r2, r6
9001b714:	fb03 fb05 	mul.w	fp, r3, r5
9001b718:	930d      	str	r3, [sp, #52]	; 0x34
9001b71a:	b2d2      	uxtb	r2, r2
9001b71c:	eb0b 0b49 	add.w	fp, fp, r9, lsl #1
9001b720:	f11a 3aff 	adds.w	sl, sl, #4294967295
9001b724:	f0c0 80f5 	bcc.w	9001b912 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3d2>
9001b728:	46ae      	mov	lr, r5
9001b72a:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
9001b72e:	f11e 3eff 	adds.w	lr, lr, #4294967295
9001b732:	f0c0 80dd 	bcc.w	9001b8f0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b0>
9001b736:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001b738:	4013      	ands	r3, r2
9001b73a:	d055      	beq.n	9001b7e8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a8>
9001b73c:	20ff      	movs	r0, #255	; 0xff
9001b73e:	990e      	ldr	r1, [sp, #56]	; 0x38
9001b740:	fb90 f1f1 	sdiv	r1, r0, r1
9001b744:	434b      	muls	r3, r1
9001b746:	2bfe      	cmp	r3, #254	; 0xfe
9001b748:	dd03      	ble.n	9001b752 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x212>
9001b74a:	990c      	ldr	r1, [sp, #48]	; 0x30
9001b74c:	4281      	cmp	r1, r0
9001b74e:	f000 80c4 	beq.w	9001b8da <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39a>
9001b752:	990c      	ldr	r1, [sp, #48]	; 0x30
9001b754:	f8bc 4000 	ldrh.w	r4, [ip]
9001b758:	fb11 f303 	smulbb	r3, r1, r3
9001b75c:	1220      	asrs	r0, r4, #8
9001b75e:	b29b      	uxth	r3, r3
9001b760:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
9001b764:	1c59      	adds	r1, r3, #1
9001b766:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
9001b76a:	eb01 2313 	add.w	r3, r1, r3, lsr #8
9001b76e:	10e1      	asrs	r1, r4, #3
9001b770:	f3c3 2307 	ubfx	r3, r3, #8, #8
9001b774:	00e4      	lsls	r4, r4, #3
9001b776:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
9001b77a:	b29f      	uxth	r7, r3
9001b77c:	43db      	mvns	r3, r3
9001b77e:	ea41 1191 	orr.w	r1, r1, r1, lsr #6
9001b782:	b2db      	uxtb	r3, r3
9001b784:	b2e4      	uxtb	r4, r4
9001b786:	9309      	str	r3, [sp, #36]	; 0x24
9001b788:	9b13      	ldr	r3, [sp, #76]	; 0x4c
9001b78a:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
9001b78e:	fb13 f907 	smulbb	r9, r3, r7
9001b792:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001b794:	fb00 9003 	mla	r0, r0, r3, r9
9001b798:	9b12      	ldr	r3, [sp, #72]	; 0x48
9001b79a:	fb13 f907 	smulbb	r9, r3, r7
9001b79e:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001b7a0:	b280      	uxth	r0, r0
9001b7a2:	fb01 9103 	mla	r1, r1, r3, r9
9001b7a6:	9b11      	ldr	r3, [sp, #68]	; 0x44
9001b7a8:	fb13 f707 	smulbb	r7, r3, r7
9001b7ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001b7ae:	b289      	uxth	r1, r1
9001b7b0:	fb04 7403 	mla	r4, r4, r3, r7
9001b7b4:	1c43      	adds	r3, r0, #1
9001b7b6:	b2a4      	uxth	r4, r4
9001b7b8:	eb03 2010 	add.w	r0, r3, r0, lsr #8
9001b7bc:	f104 0901 	add.w	r9, r4, #1
9001b7c0:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
9001b7c4:	eb09 2914 	add.w	r9, r9, r4, lsr #8
9001b7c8:	f3c9 29c4 	ubfx	r9, r9, #11, #5
9001b7cc:	ea49 0000 	orr.w	r0, r9, r0
9001b7d0:	f101 0901 	add.w	r9, r1, #1
9001b7d4:	eb09 2911 	add.w	r9, r9, r1, lsr #8
9001b7d8:	ea4f 1959 	mov.w	r9, r9, lsr #5
9001b7dc:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
9001b7e0:	ea40 0009 	orr.w	r0, r0, r9
9001b7e4:	f8ac 0000 	strh.w	r0, [ip]
9001b7e8:	4446      	add	r6, r8
9001b7ea:	b2b6      	uxth	r6, r6
9001b7ec:	2e07      	cmp	r6, #7
9001b7ee:	bf89      	itett	hi
9001b7f0:	9b28      	ldrhi	r3, [sp, #160]	; 0xa0
9001b7f2:	fa42 f208 	asrls.w	r2, r2, r8
9001b7f6:	2600      	movhi	r6, #0
9001b7f8:	785a      	ldrbhi	r2, [r3, #1]
9001b7fa:	bf8a      	itet	hi
9001b7fc:	3301      	addhi	r3, #1
9001b7fe:	b2d2      	uxtbls	r2, r2
9001b800:	9328      	strhi	r3, [sp, #160]	; 0xa0
9001b802:	9b0d      	ldr	r3, [sp, #52]	; 0x34
9001b804:	449c      	add	ip, r3
9001b806:	e792      	b.n	9001b72e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1ee>
9001b808:	441c      	add	r4, r3
9001b80a:	b224      	sxth	r4, r4
9001b80c:	e6d5      	b.n	9001b5ba <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
9001b80e:	f1ba 0f01 	cmp.w	sl, #1
9001b812:	f47f af0c 	bne.w	9001b62e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
9001b816:	f1bb 0f01 	cmp.w	fp, #1
9001b81a:	f47f af08 	bne.w	9001b62e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
9001b81e:	f8df b0c4 	ldr.w	fp, [pc, #196]	; 9001b8e4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a4>
9001b822:	f8db 0000 	ldr.w	r0, [fp]
9001b826:	6803      	ldr	r3, [r0, #0]
9001b828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
9001b82a:	4798      	blx	r3
9001b82c:	f410 7380 	ands.w	r3, r0, #256	; 0x100
9001b830:	465a      	mov	r2, fp
9001b832:	d006      	beq.n	9001b842 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x302>
9001b834:	f1b8 0f04 	cmp.w	r8, #4
9001b838:	d140      	bne.n	9001b8bc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37c>
9001b83a:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001b83c:	3300      	adds	r3, #0
9001b83e:	bf18      	it	ne
9001b840:	2301      	movne	r3, #1
9001b842:	0580      	lsls	r0, r0, #22
9001b844:	d56e      	bpl.n	9001b924 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e4>
9001b846:	f1b8 0f08 	cmp.w	r8, #8
9001b84a:	d16b      	bne.n	9001b924 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e4>
9001b84c:	2b00      	cmp	r3, #0
9001b84e:	bf0c      	ite	eq
9001b850:	f44f 7100 	moveq.w	r1, #512	; 0x200
9001b854:	f44f 7180 	movne.w	r1, #256	; 0x100
9001b858:	2d00      	cmp	r5, #0
9001b85a:	f47f aee8 	bne.w	9001b62e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
9001b85e:	2e00      	cmp	r6, #0
9001b860:	f47f aee5 	bne.w	9001b62e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
9001b864:	19e3      	adds	r3, r4, r7
9001b866:	980f      	ldr	r0, [sp, #60]	; 0x3c
9001b868:	4283      	cmp	r3, r0
9001b86a:	f73f aee0 	bgt.w	9001b62e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
9001b86e:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001b870:	980d      	ldr	r0, [sp, #52]	; 0x34
9001b872:	444b      	add	r3, r9
9001b874:	4283      	cmp	r3, r0
9001b876:	f73f aeda 	bgt.w	9001b62e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
9001b87a:	b2bf      	uxth	r7, r7
9001b87c:	f1b8 0f08 	cmp.w	r8, #8
9001b880:	6810      	ldr	r0, [r2, #0]
9001b882:	f04f 0500 	mov.w	r5, #0
9001b886:	bf18      	it	ne
9001b888:	3701      	addne	r7, #1
9001b88a:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
9001b88e:	6804      	ldr	r4, [r0, #0]
9001b890:	bf18      	it	ne
9001b892:	f027 0701 	bicne.w	r7, r7, #1
9001b896:	f8bd 205c 	ldrh.w	r2, [sp, #92]	; 0x5c
9001b89a:	e9cd 1505 	strd	r1, r5, [sp, #20]
9001b89e:	990c      	ldr	r1, [sp, #48]	; 0x30
9001b8a0:	bf18      	it	ne
9001b8a2:	b2bf      	uxthne	r7, r7
9001b8a4:	9104      	str	r1, [sp, #16]
9001b8a6:	992a      	ldr	r1, [sp, #168]	; 0xa8
9001b8a8:	e9cd 7900 	strd	r7, r9, [sp]
9001b8ac:	e9cd 7102 	strd	r7, r1, [sp, #8]
9001b8b0:	9928      	ldr	r1, [sp, #160]	; 0xa0
9001b8b2:	6d64      	ldr	r4, [r4, #84]	; 0x54
9001b8b4:	47a0      	blx	r4
9001b8b6:	b019      	add	sp, #100	; 0x64
9001b8b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001b8bc:	2300      	movs	r3, #0
9001b8be:	e7c0      	b.n	9001b842 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x302>
9001b8c0:	2208      	movs	r2, #8
9001b8c2:	fb92 f3f8 	sdiv	r3, r2, r8
9001b8c6:	1e5a      	subs	r2, r3, #1
9001b8c8:	443a      	add	r2, r7
9001b8ca:	fb92 f2f3 	sdiv	r2, r2, r3
9001b8ce:	fb12 f203 	smulbb	r2, r2, r3
9001b8d2:	b292      	uxth	r2, r2
9001b8d4:	e6b0      	b.n	9001b638 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf8>
9001b8d6:	980b      	ldr	r0, [sp, #44]	; 0x2c
9001b8d8:	e6ec      	b.n	9001b6b4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x174>
9001b8da:	9810      	ldr	r0, [sp, #64]	; 0x40
9001b8dc:	e782      	b.n	9001b7e4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a4>
9001b8de:	bf00      	nop
9001b8e0:	24021c0c 	.word	0x24021c0c
9001b8e4:	24021c14 	.word	0x24021c14
9001b8e8:	24021c0e 	.word	0x24021c0e
9001b8ec:	00fff800 	.word	0x00fff800
9001b8f0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
9001b8f2:	b153      	cbz	r3, 9001b90a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ca>
9001b8f4:	441e      	add	r6, r3
9001b8f6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
9001b8f8:	b2b6      	uxth	r6, r6
9001b8fa:	eb03 03d6 	add.w	r3, r3, r6, lsr #3
9001b8fe:	f006 0607 	and.w	r6, r6, #7
9001b902:	781a      	ldrb	r2, [r3, #0]
9001b904:	9328      	str	r3, [sp, #160]	; 0xa0
9001b906:	4132      	asrs	r2, r6
9001b908:	b2d2      	uxtb	r2, r2
9001b90a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
9001b90c:	445b      	add	r3, fp
9001b90e:	930a      	str	r3, [sp, #40]	; 0x28
9001b910:	e706      	b.n	9001b720 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e0>
9001b912:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
9001b914:	2b00      	cmp	r3, #0
9001b916:	d1ce      	bne.n	9001b8b6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
9001b918:	4b05      	ldr	r3, [pc, #20]	; (9001b930 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3f0>)
9001b91a:	6818      	ldr	r0, [r3, #0]
9001b91c:	6803      	ldr	r3, [r0, #0]
9001b91e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9001b920:	4798      	blx	r3
9001b922:	e7c8      	b.n	9001b8b6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
9001b924:	2b00      	cmp	r3, #0
9001b926:	f43f ae82 	beq.w	9001b62e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
9001b92a:	f44f 7180 	mov.w	r1, #256	; 0x100
9001b92e:	e793      	b.n	9001b858 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x318>
9001b930:	24021c14 	.word	0x24021c14

9001b934 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>:
9001b934:	b538      	push	{r3, r4, r5, lr}
9001b936:	4c15      	ldr	r4, [pc, #84]	; (9001b98c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x58>)
9001b938:	4605      	mov	r5, r0
9001b93a:	7823      	ldrb	r3, [r4, #0]
9001b93c:	f3bf 8f5b 	dmb	ish
9001b940:	07da      	lsls	r2, r3, #31
9001b942:	d40b      	bmi.n	9001b95c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
9001b944:	4620      	mov	r0, r4
9001b946:	f007 ff88 	bl	9002385a <__cxa_guard_acquire>
9001b94a:	b138      	cbz	r0, 9001b95c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
9001b94c:	4620      	mov	r0, r4
9001b94e:	f007 ff90 	bl	90023872 <__cxa_guard_release>
9001b952:	4a0f      	ldr	r2, [pc, #60]	; (9001b990 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
9001b954:	490f      	ldr	r1, [pc, #60]	; (9001b994 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x60>)
9001b956:	4810      	ldr	r0, [pc, #64]	; (9001b998 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
9001b958:	f007 ff78 	bl	9002384c <__aeabi_atexit>
9001b95c:	4c0f      	ldr	r4, [pc, #60]	; (9001b99c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x68>)
9001b95e:	7823      	ldrb	r3, [r4, #0]
9001b960:	f3bf 8f5b 	dmb	ish
9001b964:	07db      	lsls	r3, r3, #31
9001b966:	d40b      	bmi.n	9001b980 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
9001b968:	4620      	mov	r0, r4
9001b96a:	f007 ff76 	bl	9002385a <__cxa_guard_acquire>
9001b96e:	b138      	cbz	r0, 9001b980 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
9001b970:	4620      	mov	r0, r4
9001b972:	f007 ff7e 	bl	90023872 <__cxa_guard_release>
9001b976:	4a06      	ldr	r2, [pc, #24]	; (9001b990 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
9001b978:	4909      	ldr	r1, [pc, #36]	; (9001b9a0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x6c>)
9001b97a:	480a      	ldr	r0, [pc, #40]	; (9001b9a4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
9001b97c:	f007 ff66 	bl	9002384c <__aeabi_atexit>
9001b980:	4b05      	ldr	r3, [pc, #20]	; (9001b998 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
9001b982:	612b      	str	r3, [r5, #16]
9001b984:	4b07      	ldr	r3, [pc, #28]	; (9001b9a4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
9001b986:	616b      	str	r3, [r5, #20]
9001b988:	bd38      	pop	{r3, r4, r5, pc}
9001b98a:	bf00      	nop
9001b98c:	24021cec 	.word	0x24021cec
9001b990:	24000000 	.word	0x24000000
9001b994:	9001871b 	.word	0x9001871b
9001b998:	240000c8 	.word	0x240000c8
9001b99c:	24021cf0 	.word	0x24021cf0
9001b9a0:	90018719 	.word	0x90018719
9001b9a4:	240000cc 	.word	0x240000cc

9001b9a8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>:
9001b9a8:	b538      	push	{r3, r4, r5, lr}
9001b9aa:	4c15      	ldr	r4, [pc, #84]	; (9001ba00 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x58>)
9001b9ac:	4605      	mov	r5, r0
9001b9ae:	7823      	ldrb	r3, [r4, #0]
9001b9b0:	f3bf 8f5b 	dmb	ish
9001b9b4:	07da      	lsls	r2, r3, #31
9001b9b6:	d40b      	bmi.n	9001b9d0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
9001b9b8:	4620      	mov	r0, r4
9001b9ba:	f007 ff4e 	bl	9002385a <__cxa_guard_acquire>
9001b9be:	b138      	cbz	r0, 9001b9d0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
9001b9c0:	4620      	mov	r0, r4
9001b9c2:	f007 ff56 	bl	90023872 <__cxa_guard_release>
9001b9c6:	4a0f      	ldr	r2, [pc, #60]	; (9001ba04 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
9001b9c8:	490f      	ldr	r1, [pc, #60]	; (9001ba08 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x60>)
9001b9ca:	4810      	ldr	r0, [pc, #64]	; (9001ba0c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
9001b9cc:	f007 ff3e 	bl	9002384c <__aeabi_atexit>
9001b9d0:	4c0f      	ldr	r4, [pc, #60]	; (9001ba10 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x68>)
9001b9d2:	7823      	ldrb	r3, [r4, #0]
9001b9d4:	f3bf 8f5b 	dmb	ish
9001b9d8:	07db      	lsls	r3, r3, #31
9001b9da:	d40b      	bmi.n	9001b9f4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
9001b9dc:	4620      	mov	r0, r4
9001b9de:	f007 ff3c 	bl	9002385a <__cxa_guard_acquire>
9001b9e2:	b138      	cbz	r0, 9001b9f4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
9001b9e4:	4620      	mov	r0, r4
9001b9e6:	f007 ff44 	bl	90023872 <__cxa_guard_release>
9001b9ea:	4a06      	ldr	r2, [pc, #24]	; (9001ba04 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
9001b9ec:	4909      	ldr	r1, [pc, #36]	; (9001ba14 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x6c>)
9001b9ee:	480a      	ldr	r0, [pc, #40]	; (9001ba18 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
9001b9f0:	f007 ff2c 	bl	9002384c <__aeabi_atexit>
9001b9f4:	4b05      	ldr	r3, [pc, #20]	; (9001ba0c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
9001b9f6:	60ab      	str	r3, [r5, #8]
9001b9f8:	4b07      	ldr	r3, [pc, #28]	; (9001ba18 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
9001b9fa:	60eb      	str	r3, [r5, #12]
9001b9fc:	bd38      	pop	{r3, r4, r5, pc}
9001b9fe:	bf00      	nop
9001ba00:	24021cc4 	.word	0x24021cc4
9001ba04:	24000000 	.word	0x24000000
9001ba08:	9001871f 	.word	0x9001871f
9001ba0c:	240000a0 	.word	0x240000a0
9001ba10:	24021cc8 	.word	0x24021cc8
9001ba14:	9001871d 	.word	0x9001871d
9001ba18:	240000a4 	.word	0x240000a4

9001ba1c <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>:
9001ba1c:	b510      	push	{r4, lr}
9001ba1e:	4604      	mov	r4, r0
9001ba20:	f7ff ff88 	bl	9001b934 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>
9001ba24:	4620      	mov	r0, r4
9001ba26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9001ba2a:	f7ff bfbd 	b.w	9001b9a8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>
	...

9001ba30 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
9001ba30:	b538      	push	{r3, r4, r5, lr}
9001ba32:	4c15      	ldr	r4, [pc, #84]	; (9001ba88 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
9001ba34:	4605      	mov	r5, r0
9001ba36:	7823      	ldrb	r3, [r4, #0]
9001ba38:	f3bf 8f5b 	dmb	ish
9001ba3c:	07da      	lsls	r2, r3, #31
9001ba3e:	d40b      	bmi.n	9001ba58 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
9001ba40:	4620      	mov	r0, r4
9001ba42:	f007 ff0a 	bl	9002385a <__cxa_guard_acquire>
9001ba46:	b138      	cbz	r0, 9001ba58 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
9001ba48:	4620      	mov	r0, r4
9001ba4a:	f007 ff12 	bl	90023872 <__cxa_guard_release>
9001ba4e:	4a0f      	ldr	r2, [pc, #60]	; (9001ba8c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
9001ba50:	490f      	ldr	r1, [pc, #60]	; (9001ba90 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
9001ba52:	4810      	ldr	r0, [pc, #64]	; (9001ba94 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
9001ba54:	f007 fefa 	bl	9002384c <__aeabi_atexit>
9001ba58:	4c0f      	ldr	r4, [pc, #60]	; (9001ba98 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
9001ba5a:	7823      	ldrb	r3, [r4, #0]
9001ba5c:	f3bf 8f5b 	dmb	ish
9001ba60:	07db      	lsls	r3, r3, #31
9001ba62:	d40b      	bmi.n	9001ba7c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
9001ba64:	4620      	mov	r0, r4
9001ba66:	f007 fef8 	bl	9002385a <__cxa_guard_acquire>
9001ba6a:	b138      	cbz	r0, 9001ba7c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
9001ba6c:	4620      	mov	r0, r4
9001ba6e:	f007 ff00 	bl	90023872 <__cxa_guard_release>
9001ba72:	4a06      	ldr	r2, [pc, #24]	; (9001ba8c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
9001ba74:	4909      	ldr	r1, [pc, #36]	; (9001ba9c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
9001ba76:	480a      	ldr	r0, [pc, #40]	; (9001baa0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
9001ba78:	f007 fee8 	bl	9002384c <__aeabi_atexit>
9001ba7c:	4b05      	ldr	r3, [pc, #20]	; (9001ba94 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
9001ba7e:	622b      	str	r3, [r5, #32]
9001ba80:	4b07      	ldr	r3, [pc, #28]	; (9001baa0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
9001ba82:	626b      	str	r3, [r5, #36]	; 0x24
9001ba84:	bd38      	pop	{r3, r4, r5, pc}
9001ba86:	bf00      	nop
9001ba88:	24021cf4 	.word	0x24021cf4
9001ba8c:	24000000 	.word	0x24000000
9001ba90:	90018713 	.word	0x90018713
9001ba94:	240000d0 	.word	0x240000d0
9001ba98:	24021cf8 	.word	0x24021cf8
9001ba9c:	90018711 	.word	0x90018711
9001baa0:	240000d4 	.word	0x240000d4

9001baa4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
9001baa4:	b538      	push	{r3, r4, r5, lr}
9001baa6:	4c15      	ldr	r4, [pc, #84]	; (9001bafc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
9001baa8:	4605      	mov	r5, r0
9001baaa:	7823      	ldrb	r3, [r4, #0]
9001baac:	f3bf 8f5b 	dmb	ish
9001bab0:	07da      	lsls	r2, r3, #31
9001bab2:	d40b      	bmi.n	9001bacc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
9001bab4:	4620      	mov	r0, r4
9001bab6:	f007 fed0 	bl	9002385a <__cxa_guard_acquire>
9001baba:	b138      	cbz	r0, 9001bacc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
9001babc:	4620      	mov	r0, r4
9001babe:	f007 fed8 	bl	90023872 <__cxa_guard_release>
9001bac2:	4a0f      	ldr	r2, [pc, #60]	; (9001bb00 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
9001bac4:	490f      	ldr	r1, [pc, #60]	; (9001bb04 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
9001bac6:	4810      	ldr	r0, [pc, #64]	; (9001bb08 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
9001bac8:	f007 fec0 	bl	9002384c <__aeabi_atexit>
9001bacc:	4c0f      	ldr	r4, [pc, #60]	; (9001bb0c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
9001bace:	7823      	ldrb	r3, [r4, #0]
9001bad0:	f3bf 8f5b 	dmb	ish
9001bad4:	07db      	lsls	r3, r3, #31
9001bad6:	d40b      	bmi.n	9001baf0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
9001bad8:	4620      	mov	r0, r4
9001bada:	f007 febe 	bl	9002385a <__cxa_guard_acquire>
9001bade:	b138      	cbz	r0, 9001baf0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
9001bae0:	4620      	mov	r0, r4
9001bae2:	f007 fec6 	bl	90023872 <__cxa_guard_release>
9001bae6:	4a06      	ldr	r2, [pc, #24]	; (9001bb00 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
9001bae8:	4909      	ldr	r1, [pc, #36]	; (9001bb10 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
9001baea:	480a      	ldr	r0, [pc, #40]	; (9001bb14 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
9001baec:	f007 feae 	bl	9002384c <__aeabi_atexit>
9001baf0:	4b05      	ldr	r3, [pc, #20]	; (9001bb08 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
9001baf2:	61ab      	str	r3, [r5, #24]
9001baf4:	4b07      	ldr	r3, [pc, #28]	; (9001bb14 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
9001baf6:	61eb      	str	r3, [r5, #28]
9001baf8:	bd38      	pop	{r3, r4, r5, pc}
9001bafa:	bf00      	nop
9001bafc:	24021ccc 	.word	0x24021ccc
9001bb00:	24000000 	.word	0x24000000
9001bb04:	90018717 	.word	0x90018717
9001bb08:	240000a8 	.word	0x240000a8
9001bb0c:	24021cd0 	.word	0x24021cd0
9001bb10:	90018715 	.word	0x90018715
9001bb14:	240000ac 	.word	0x240000ac

9001bb18 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>:
9001bb18:	b510      	push	{r4, lr}
9001bb1a:	4604      	mov	r4, r0
9001bb1c:	f7ff ff88 	bl	9001ba30 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
9001bb20:	4620      	mov	r0, r4
9001bb22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9001bb26:	f7ff bfbd 	b.w	9001baa4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

9001bb2c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
9001bb2c:	b538      	push	{r3, r4, r5, lr}
9001bb2e:	4c15      	ldr	r4, [pc, #84]	; (9001bb84 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
9001bb30:	4605      	mov	r5, r0
9001bb32:	7823      	ldrb	r3, [r4, #0]
9001bb34:	f3bf 8f5b 	dmb	ish
9001bb38:	07da      	lsls	r2, r3, #31
9001bb3a:	d40b      	bmi.n	9001bb54 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
9001bb3c:	4620      	mov	r0, r4
9001bb3e:	f007 fe8c 	bl	9002385a <__cxa_guard_acquire>
9001bb42:	b138      	cbz	r0, 9001bb54 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
9001bb44:	4620      	mov	r0, r4
9001bb46:	f007 fe94 	bl	90023872 <__cxa_guard_release>
9001bb4a:	4a0f      	ldr	r2, [pc, #60]	; (9001bb88 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
9001bb4c:	490f      	ldr	r1, [pc, #60]	; (9001bb8c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
9001bb4e:	4810      	ldr	r0, [pc, #64]	; (9001bb90 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
9001bb50:	f007 fe7c 	bl	9002384c <__aeabi_atexit>
9001bb54:	4c0f      	ldr	r4, [pc, #60]	; (9001bb94 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
9001bb56:	7823      	ldrb	r3, [r4, #0]
9001bb58:	f3bf 8f5b 	dmb	ish
9001bb5c:	07db      	lsls	r3, r3, #31
9001bb5e:	d40b      	bmi.n	9001bb78 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
9001bb60:	4620      	mov	r0, r4
9001bb62:	f007 fe7a 	bl	9002385a <__cxa_guard_acquire>
9001bb66:	b138      	cbz	r0, 9001bb78 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
9001bb68:	4620      	mov	r0, r4
9001bb6a:	f007 fe82 	bl	90023872 <__cxa_guard_release>
9001bb6e:	4a06      	ldr	r2, [pc, #24]	; (9001bb88 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
9001bb70:	4909      	ldr	r1, [pc, #36]	; (9001bb98 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
9001bb72:	480a      	ldr	r0, [pc, #40]	; (9001bb9c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
9001bb74:	f007 fe6a 	bl	9002384c <__aeabi_atexit>
9001bb78:	4b05      	ldr	r3, [pc, #20]	; (9001bb90 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
9001bb7a:	632b      	str	r3, [r5, #48]	; 0x30
9001bb7c:	4b07      	ldr	r3, [pc, #28]	; (9001bb9c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
9001bb7e:	636b      	str	r3, [r5, #52]	; 0x34
9001bb80:	bd38      	pop	{r3, r4, r5, pc}
9001bb82:	bf00      	nop
9001bb84:	24021d04 	.word	0x24021d04
9001bb88:	24000000 	.word	0x24000000
9001bb8c:	9001870b 	.word	0x9001870b
9001bb90:	240000e0 	.word	0x240000e0
9001bb94:	24021d08 	.word	0x24021d08
9001bb98:	90018709 	.word	0x90018709
9001bb9c:	240000e4 	.word	0x240000e4

9001bba0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
9001bba0:	b538      	push	{r3, r4, r5, lr}
9001bba2:	4c15      	ldr	r4, [pc, #84]	; (9001bbf8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
9001bba4:	4605      	mov	r5, r0
9001bba6:	7823      	ldrb	r3, [r4, #0]
9001bba8:	f3bf 8f5b 	dmb	ish
9001bbac:	07da      	lsls	r2, r3, #31
9001bbae:	d40b      	bmi.n	9001bbc8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
9001bbb0:	4620      	mov	r0, r4
9001bbb2:	f007 fe52 	bl	9002385a <__cxa_guard_acquire>
9001bbb6:	b138      	cbz	r0, 9001bbc8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
9001bbb8:	4620      	mov	r0, r4
9001bbba:	f007 fe5a 	bl	90023872 <__cxa_guard_release>
9001bbbe:	4a0f      	ldr	r2, [pc, #60]	; (9001bbfc <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
9001bbc0:	490f      	ldr	r1, [pc, #60]	; (9001bc00 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
9001bbc2:	4810      	ldr	r0, [pc, #64]	; (9001bc04 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
9001bbc4:	f007 fe42 	bl	9002384c <__aeabi_atexit>
9001bbc8:	4c0f      	ldr	r4, [pc, #60]	; (9001bc08 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
9001bbca:	7823      	ldrb	r3, [r4, #0]
9001bbcc:	f3bf 8f5b 	dmb	ish
9001bbd0:	07db      	lsls	r3, r3, #31
9001bbd2:	d40b      	bmi.n	9001bbec <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
9001bbd4:	4620      	mov	r0, r4
9001bbd6:	f007 fe40 	bl	9002385a <__cxa_guard_acquire>
9001bbda:	b138      	cbz	r0, 9001bbec <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
9001bbdc:	4620      	mov	r0, r4
9001bbde:	f007 fe48 	bl	90023872 <__cxa_guard_release>
9001bbe2:	4a06      	ldr	r2, [pc, #24]	; (9001bbfc <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
9001bbe4:	4909      	ldr	r1, [pc, #36]	; (9001bc0c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
9001bbe6:	480a      	ldr	r0, [pc, #40]	; (9001bc10 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
9001bbe8:	f007 fe30 	bl	9002384c <__aeabi_atexit>
9001bbec:	4b05      	ldr	r3, [pc, #20]	; (9001bc04 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
9001bbee:	62ab      	str	r3, [r5, #40]	; 0x28
9001bbf0:	4b07      	ldr	r3, [pc, #28]	; (9001bc10 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
9001bbf2:	62eb      	str	r3, [r5, #44]	; 0x2c
9001bbf4:	bd38      	pop	{r3, r4, r5, pc}
9001bbf6:	bf00      	nop
9001bbf8:	24021cd4 	.word	0x24021cd4
9001bbfc:	24000000 	.word	0x24000000
9001bc00:	9001870f 	.word	0x9001870f
9001bc04:	240000b0 	.word	0x240000b0
9001bc08:	24021cd8 	.word	0x24021cd8
9001bc0c:	9001870d 	.word	0x9001870d
9001bc10:	240000b4 	.word	0x240000b4

9001bc14 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>:
9001bc14:	b510      	push	{r4, lr}
9001bc16:	4604      	mov	r4, r0
9001bc18:	f7ff ff88 	bl	9001bb2c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
9001bc1c:	4620      	mov	r0, r4
9001bc1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9001bc22:	f7ff bfbd 	b.w	9001bba0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

9001bc28 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>:
9001bc28:	b538      	push	{r3, r4, r5, lr}
9001bc2a:	4c15      	ldr	r4, [pc, #84]	; (9001bc80 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x58>)
9001bc2c:	4605      	mov	r5, r0
9001bc2e:	7823      	ldrb	r3, [r4, #0]
9001bc30:	f3bf 8f5b 	dmb	ish
9001bc34:	07da      	lsls	r2, r3, #31
9001bc36:	d40b      	bmi.n	9001bc50 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
9001bc38:	4620      	mov	r0, r4
9001bc3a:	f007 fe0e 	bl	9002385a <__cxa_guard_acquire>
9001bc3e:	b138      	cbz	r0, 9001bc50 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
9001bc40:	4620      	mov	r0, r4
9001bc42:	f007 fe16 	bl	90023872 <__cxa_guard_release>
9001bc46:	4a0f      	ldr	r2, [pc, #60]	; (9001bc84 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
9001bc48:	490f      	ldr	r1, [pc, #60]	; (9001bc88 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x60>)
9001bc4a:	4810      	ldr	r0, [pc, #64]	; (9001bc8c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
9001bc4c:	f007 fdfe 	bl	9002384c <__aeabi_atexit>
9001bc50:	4c0f      	ldr	r4, [pc, #60]	; (9001bc90 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x68>)
9001bc52:	7823      	ldrb	r3, [r4, #0]
9001bc54:	f3bf 8f5b 	dmb	ish
9001bc58:	07db      	lsls	r3, r3, #31
9001bc5a:	d40b      	bmi.n	9001bc74 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
9001bc5c:	4620      	mov	r0, r4
9001bc5e:	f007 fdfc 	bl	9002385a <__cxa_guard_acquire>
9001bc62:	b138      	cbz	r0, 9001bc74 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
9001bc64:	4620      	mov	r0, r4
9001bc66:	f007 fe04 	bl	90023872 <__cxa_guard_release>
9001bc6a:	4a06      	ldr	r2, [pc, #24]	; (9001bc84 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
9001bc6c:	4909      	ldr	r1, [pc, #36]	; (9001bc94 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x6c>)
9001bc6e:	480a      	ldr	r0, [pc, #40]	; (9001bc98 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
9001bc70:	f007 fdec 	bl	9002384c <__aeabi_atexit>
9001bc74:	4b05      	ldr	r3, [pc, #20]	; (9001bc8c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
9001bc76:	652b      	str	r3, [r5, #80]	; 0x50
9001bc78:	4b07      	ldr	r3, [pc, #28]	; (9001bc98 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
9001bc7a:	656b      	str	r3, [r5, #84]	; 0x54
9001bc7c:	bd38      	pop	{r3, r4, r5, pc}
9001bc7e:	bf00      	nop
9001bc80:	24021d0c 	.word	0x24021d0c
9001bc84:	24000000 	.word	0x24000000
9001bc88:	900186fb 	.word	0x900186fb
9001bc8c:	240000e8 	.word	0x240000e8
9001bc90:	24021d10 	.word	0x24021d10
9001bc94:	900186f9 	.word	0x900186f9
9001bc98:	240000ec 	.word	0x240000ec

9001bc9c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>:
9001bc9c:	b538      	push	{r3, r4, r5, lr}
9001bc9e:	4c15      	ldr	r4, [pc, #84]	; (9001bcf4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x58>)
9001bca0:	4605      	mov	r5, r0
9001bca2:	7823      	ldrb	r3, [r4, #0]
9001bca4:	f3bf 8f5b 	dmb	ish
9001bca8:	07da      	lsls	r2, r3, #31
9001bcaa:	d40b      	bmi.n	9001bcc4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
9001bcac:	4620      	mov	r0, r4
9001bcae:	f007 fdd4 	bl	9002385a <__cxa_guard_acquire>
9001bcb2:	b138      	cbz	r0, 9001bcc4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
9001bcb4:	4620      	mov	r0, r4
9001bcb6:	f007 fddc 	bl	90023872 <__cxa_guard_release>
9001bcba:	4a0f      	ldr	r2, [pc, #60]	; (9001bcf8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
9001bcbc:	490f      	ldr	r1, [pc, #60]	; (9001bcfc <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x60>)
9001bcbe:	4810      	ldr	r0, [pc, #64]	; (9001bd00 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
9001bcc0:	f007 fdc4 	bl	9002384c <__aeabi_atexit>
9001bcc4:	4c0f      	ldr	r4, [pc, #60]	; (9001bd04 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x68>)
9001bcc6:	7823      	ldrb	r3, [r4, #0]
9001bcc8:	f3bf 8f5b 	dmb	ish
9001bccc:	07db      	lsls	r3, r3, #31
9001bcce:	d40b      	bmi.n	9001bce8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
9001bcd0:	4620      	mov	r0, r4
9001bcd2:	f007 fdc2 	bl	9002385a <__cxa_guard_acquire>
9001bcd6:	b138      	cbz	r0, 9001bce8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
9001bcd8:	4620      	mov	r0, r4
9001bcda:	f007 fdca 	bl	90023872 <__cxa_guard_release>
9001bcde:	4a06      	ldr	r2, [pc, #24]	; (9001bcf8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
9001bce0:	4909      	ldr	r1, [pc, #36]	; (9001bd08 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x6c>)
9001bce2:	480a      	ldr	r0, [pc, #40]	; (9001bd0c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
9001bce4:	f007 fdb2 	bl	9002384c <__aeabi_atexit>
9001bce8:	4b05      	ldr	r3, [pc, #20]	; (9001bd00 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
9001bcea:	64ab      	str	r3, [r5, #72]	; 0x48
9001bcec:	4b07      	ldr	r3, [pc, #28]	; (9001bd0c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
9001bcee:	64eb      	str	r3, [r5, #76]	; 0x4c
9001bcf0:	bd38      	pop	{r3, r4, r5, pc}
9001bcf2:	bf00      	nop
9001bcf4:	24021d14 	.word	0x24021d14
9001bcf8:	24000000 	.word	0x24000000
9001bcfc:	900186ff 	.word	0x900186ff
9001bd00:	240000f0 	.word	0x240000f0
9001bd04:	24021d18 	.word	0x24021d18
9001bd08:	900186fd 	.word	0x900186fd
9001bd0c:	240000f4 	.word	0x240000f4

9001bd10 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>:
9001bd10:	b538      	push	{r3, r4, r5, lr}
9001bd12:	4c15      	ldr	r4, [pc, #84]	; (9001bd68 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x58>)
9001bd14:	4605      	mov	r5, r0
9001bd16:	7823      	ldrb	r3, [r4, #0]
9001bd18:	f3bf 8f5b 	dmb	ish
9001bd1c:	07da      	lsls	r2, r3, #31
9001bd1e:	d40b      	bmi.n	9001bd38 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
9001bd20:	4620      	mov	r0, r4
9001bd22:	f007 fd9a 	bl	9002385a <__cxa_guard_acquire>
9001bd26:	b138      	cbz	r0, 9001bd38 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
9001bd28:	4620      	mov	r0, r4
9001bd2a:	f007 fda2 	bl	90023872 <__cxa_guard_release>
9001bd2e:	4a0f      	ldr	r2, [pc, #60]	; (9001bd6c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
9001bd30:	490f      	ldr	r1, [pc, #60]	; (9001bd70 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x60>)
9001bd32:	4810      	ldr	r0, [pc, #64]	; (9001bd74 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
9001bd34:	f007 fd8a 	bl	9002384c <__aeabi_atexit>
9001bd38:	4c0f      	ldr	r4, [pc, #60]	; (9001bd78 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x68>)
9001bd3a:	7823      	ldrb	r3, [r4, #0]
9001bd3c:	f3bf 8f5b 	dmb	ish
9001bd40:	07db      	lsls	r3, r3, #31
9001bd42:	d40b      	bmi.n	9001bd5c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
9001bd44:	4620      	mov	r0, r4
9001bd46:	f007 fd88 	bl	9002385a <__cxa_guard_acquire>
9001bd4a:	b138      	cbz	r0, 9001bd5c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
9001bd4c:	4620      	mov	r0, r4
9001bd4e:	f007 fd90 	bl	90023872 <__cxa_guard_release>
9001bd52:	4a06      	ldr	r2, [pc, #24]	; (9001bd6c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
9001bd54:	4909      	ldr	r1, [pc, #36]	; (9001bd7c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x6c>)
9001bd56:	480a      	ldr	r0, [pc, #40]	; (9001bd80 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
9001bd58:	f007 fd78 	bl	9002384c <__aeabi_atexit>
9001bd5c:	4b05      	ldr	r3, [pc, #20]	; (9001bd74 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
9001bd5e:	642b      	str	r3, [r5, #64]	; 0x40
9001bd60:	4b07      	ldr	r3, [pc, #28]	; (9001bd80 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
9001bd62:	646b      	str	r3, [r5, #68]	; 0x44
9001bd64:	bd38      	pop	{r3, r4, r5, pc}
9001bd66:	bf00      	nop
9001bd68:	24021cdc 	.word	0x24021cdc
9001bd6c:	24000000 	.word	0x24000000
9001bd70:	90018703 	.word	0x90018703
9001bd74:	240000b8 	.word	0x240000b8
9001bd78:	24021ce0 	.word	0x24021ce0
9001bd7c:	90018701 	.word	0x90018701
9001bd80:	240000bc 	.word	0x240000bc

9001bd84 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>:
9001bd84:	b538      	push	{r3, r4, r5, lr}
9001bd86:	4c15      	ldr	r4, [pc, #84]	; (9001bddc <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x58>)
9001bd88:	4605      	mov	r5, r0
9001bd8a:	7823      	ldrb	r3, [r4, #0]
9001bd8c:	f3bf 8f5b 	dmb	ish
9001bd90:	07da      	lsls	r2, r3, #31
9001bd92:	d40b      	bmi.n	9001bdac <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
9001bd94:	4620      	mov	r0, r4
9001bd96:	f007 fd60 	bl	9002385a <__cxa_guard_acquire>
9001bd9a:	b138      	cbz	r0, 9001bdac <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
9001bd9c:	4620      	mov	r0, r4
9001bd9e:	f007 fd68 	bl	90023872 <__cxa_guard_release>
9001bda2:	4a0f      	ldr	r2, [pc, #60]	; (9001bde0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
9001bda4:	490f      	ldr	r1, [pc, #60]	; (9001bde4 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x60>)
9001bda6:	4810      	ldr	r0, [pc, #64]	; (9001bde8 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
9001bda8:	f007 fd50 	bl	9002384c <__aeabi_atexit>
9001bdac:	4c0f      	ldr	r4, [pc, #60]	; (9001bdec <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x68>)
9001bdae:	7823      	ldrb	r3, [r4, #0]
9001bdb0:	f3bf 8f5b 	dmb	ish
9001bdb4:	07db      	lsls	r3, r3, #31
9001bdb6:	d40b      	bmi.n	9001bdd0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
9001bdb8:	4620      	mov	r0, r4
9001bdba:	f007 fd4e 	bl	9002385a <__cxa_guard_acquire>
9001bdbe:	b138      	cbz	r0, 9001bdd0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
9001bdc0:	4620      	mov	r0, r4
9001bdc2:	f007 fd56 	bl	90023872 <__cxa_guard_release>
9001bdc6:	4a06      	ldr	r2, [pc, #24]	; (9001bde0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
9001bdc8:	4909      	ldr	r1, [pc, #36]	; (9001bdf0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x6c>)
9001bdca:	480a      	ldr	r0, [pc, #40]	; (9001bdf4 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
9001bdcc:	f007 fd3e 	bl	9002384c <__aeabi_atexit>
9001bdd0:	4b05      	ldr	r3, [pc, #20]	; (9001bde8 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
9001bdd2:	63ab      	str	r3, [r5, #56]	; 0x38
9001bdd4:	4b07      	ldr	r3, [pc, #28]	; (9001bdf4 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
9001bdd6:	63eb      	str	r3, [r5, #60]	; 0x3c
9001bdd8:	bd38      	pop	{r3, r4, r5, pc}
9001bdda:	bf00      	nop
9001bddc:	24021cfc 	.word	0x24021cfc
9001bde0:	24000000 	.word	0x24000000
9001bde4:	90018707 	.word	0x90018707
9001bde8:	240000d8 	.word	0x240000d8
9001bdec:	24021d00 	.word	0x24021d00
9001bdf0:	90018705 	.word	0x90018705
9001bdf4:	240000dc 	.word	0x240000dc

9001bdf8 <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>:
9001bdf8:	b510      	push	{r4, lr}
9001bdfa:	4604      	mov	r4, r0
9001bdfc:	f7ff ff14 	bl	9001bc28 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>
9001be00:	4620      	mov	r0, r4
9001be02:	f7ff ff85 	bl	9001bd10 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>
9001be06:	4620      	mov	r0, r4
9001be08:	f7ff ff48 	bl	9001bc9c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>
9001be0c:	4620      	mov	r0, r4
9001be0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9001be12:	f7ff bfb7 	b.w	9001bd84 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>
	...

9001be18 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
9001be18:	b538      	push	{r3, r4, r5, lr}
9001be1a:	4c15      	ldr	r4, [pc, #84]	; (9001be70 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
9001be1c:	4605      	mov	r5, r0
9001be1e:	7823      	ldrb	r3, [r4, #0]
9001be20:	f3bf 8f5b 	dmb	ish
9001be24:	07da      	lsls	r2, r3, #31
9001be26:	d40b      	bmi.n	9001be40 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
9001be28:	4620      	mov	r0, r4
9001be2a:	f007 fd16 	bl	9002385a <__cxa_guard_acquire>
9001be2e:	b138      	cbz	r0, 9001be40 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
9001be30:	4620      	mov	r0, r4
9001be32:	f007 fd1e 	bl	90023872 <__cxa_guard_release>
9001be36:	4a0f      	ldr	r2, [pc, #60]	; (9001be74 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
9001be38:	490f      	ldr	r1, [pc, #60]	; (9001be78 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
9001be3a:	4810      	ldr	r0, [pc, #64]	; (9001be7c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
9001be3c:	f007 fd06 	bl	9002384c <__aeabi_atexit>
9001be40:	4c0f      	ldr	r4, [pc, #60]	; (9001be80 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
9001be42:	7823      	ldrb	r3, [r4, #0]
9001be44:	f3bf 8f5b 	dmb	ish
9001be48:	07db      	lsls	r3, r3, #31
9001be4a:	d40b      	bmi.n	9001be64 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
9001be4c:	4620      	mov	r0, r4
9001be4e:	f007 fd04 	bl	9002385a <__cxa_guard_acquire>
9001be52:	b138      	cbz	r0, 9001be64 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
9001be54:	4620      	mov	r0, r4
9001be56:	f007 fd0c 	bl	90023872 <__cxa_guard_release>
9001be5a:	4a06      	ldr	r2, [pc, #24]	; (9001be74 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
9001be5c:	4909      	ldr	r1, [pc, #36]	; (9001be84 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
9001be5e:	480a      	ldr	r0, [pc, #40]	; (9001be88 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
9001be60:	f007 fcf4 	bl	9002384c <__aeabi_atexit>
9001be64:	4b05      	ldr	r3, [pc, #20]	; (9001be7c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
9001be66:	662b      	str	r3, [r5, #96]	; 0x60
9001be68:	4b07      	ldr	r3, [pc, #28]	; (9001be88 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
9001be6a:	666b      	str	r3, [r5, #100]	; 0x64
9001be6c:	bd38      	pop	{r3, r4, r5, pc}
9001be6e:	bf00      	nop
9001be70:	24021ce4 	.word	0x24021ce4
9001be74:	24000000 	.word	0x24000000
9001be78:	900186f3 	.word	0x900186f3
9001be7c:	240000c0 	.word	0x240000c0
9001be80:	24021ce8 	.word	0x24021ce8
9001be84:	900186f1 	.word	0x900186f1
9001be88:	240000c4 	.word	0x240000c4

9001be8c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
9001be8c:	b538      	push	{r3, r4, r5, lr}
9001be8e:	4c15      	ldr	r4, [pc, #84]	; (9001bee4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
9001be90:	4605      	mov	r5, r0
9001be92:	7823      	ldrb	r3, [r4, #0]
9001be94:	f3bf 8f5b 	dmb	ish
9001be98:	07da      	lsls	r2, r3, #31
9001be9a:	d40b      	bmi.n	9001beb4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
9001be9c:	4620      	mov	r0, r4
9001be9e:	f007 fcdc 	bl	9002385a <__cxa_guard_acquire>
9001bea2:	b138      	cbz	r0, 9001beb4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
9001bea4:	4620      	mov	r0, r4
9001bea6:	f007 fce4 	bl	90023872 <__cxa_guard_release>
9001beaa:	4a0f      	ldr	r2, [pc, #60]	; (9001bee8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
9001beac:	490f      	ldr	r1, [pc, #60]	; (9001beec <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
9001beae:	4810      	ldr	r0, [pc, #64]	; (9001bef0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
9001beb0:	f007 fccc 	bl	9002384c <__aeabi_atexit>
9001beb4:	4c0f      	ldr	r4, [pc, #60]	; (9001bef4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
9001beb6:	7823      	ldrb	r3, [r4, #0]
9001beb8:	f3bf 8f5b 	dmb	ish
9001bebc:	07db      	lsls	r3, r3, #31
9001bebe:	d40b      	bmi.n	9001bed8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
9001bec0:	4620      	mov	r0, r4
9001bec2:	f007 fcca 	bl	9002385a <__cxa_guard_acquire>
9001bec6:	b138      	cbz	r0, 9001bed8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
9001bec8:	4620      	mov	r0, r4
9001beca:	f007 fcd2 	bl	90023872 <__cxa_guard_release>
9001bece:	4a06      	ldr	r2, [pc, #24]	; (9001bee8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
9001bed0:	4909      	ldr	r1, [pc, #36]	; (9001bef8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
9001bed2:	480a      	ldr	r0, [pc, #40]	; (9001befc <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
9001bed4:	f007 fcba 	bl	9002384c <__aeabi_atexit>
9001bed8:	4b05      	ldr	r3, [pc, #20]	; (9001bef0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
9001beda:	65ab      	str	r3, [r5, #88]	; 0x58
9001bedc:	4b07      	ldr	r3, [pc, #28]	; (9001befc <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
9001bede:	65eb      	str	r3, [r5, #92]	; 0x5c
9001bee0:	bd38      	pop	{r3, r4, r5, pc}
9001bee2:	bf00      	nop
9001bee4:	24021cbc 	.word	0x24021cbc
9001bee8:	24000000 	.word	0x24000000
9001beec:	900186f7 	.word	0x900186f7
9001bef0:	24000098 	.word	0x24000098
9001bef4:	24021cc0 	.word	0x24021cc0
9001bef8:	900186f5 	.word	0x900186f5
9001befc:	2400009c 	.word	0x2400009c

9001bf00 <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>:
9001bf00:	b510      	push	{r4, lr}
9001bf02:	4604      	mov	r4, r0
9001bf04:	f7ff ff88 	bl	9001be18 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
9001bf08:	4620      	mov	r0, r4
9001bf0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9001bf0e:	f7ff bfbd 	b.w	9001be8c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

9001bf14 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>:
9001bf14:	b538      	push	{r3, r4, r5, lr}
9001bf16:	4c15      	ldr	r4, [pc, #84]	; (9001bf6c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
9001bf18:	4605      	mov	r5, r0
9001bf1a:	7823      	ldrb	r3, [r4, #0]
9001bf1c:	f3bf 8f5b 	dmb	ish
9001bf20:	07da      	lsls	r2, r3, #31
9001bf22:	d40b      	bmi.n	9001bf3c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
9001bf24:	4620      	mov	r0, r4
9001bf26:	f007 fc98 	bl	9002385a <__cxa_guard_acquire>
9001bf2a:	b138      	cbz	r0, 9001bf3c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
9001bf2c:	4620      	mov	r0, r4
9001bf2e:	f007 fca0 	bl	90023872 <__cxa_guard_release>
9001bf32:	4a0f      	ldr	r2, [pc, #60]	; (9001bf70 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
9001bf34:	490f      	ldr	r1, [pc, #60]	; (9001bf74 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
9001bf36:	4810      	ldr	r0, [pc, #64]	; (9001bf78 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
9001bf38:	f007 fc88 	bl	9002384c <__aeabi_atexit>
9001bf3c:	4c0f      	ldr	r4, [pc, #60]	; (9001bf7c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
9001bf3e:	7823      	ldrb	r3, [r4, #0]
9001bf40:	f3bf 8f5b 	dmb	ish
9001bf44:	07db      	lsls	r3, r3, #31
9001bf46:	d40b      	bmi.n	9001bf60 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
9001bf48:	4620      	mov	r0, r4
9001bf4a:	f007 fc86 	bl	9002385a <__cxa_guard_acquire>
9001bf4e:	b138      	cbz	r0, 9001bf60 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
9001bf50:	4620      	mov	r0, r4
9001bf52:	f007 fc8e 	bl	90023872 <__cxa_guard_release>
9001bf56:	4a06      	ldr	r2, [pc, #24]	; (9001bf70 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
9001bf58:	4909      	ldr	r1, [pc, #36]	; (9001bf80 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
9001bf5a:	480a      	ldr	r0, [pc, #40]	; (9001bf84 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
9001bf5c:	f007 fc76 	bl	9002384c <__aeabi_atexit>
9001bf60:	4b05      	ldr	r3, [pc, #20]	; (9001bf78 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
9001bf62:	672b      	str	r3, [r5, #112]	; 0x70
9001bf64:	4b07      	ldr	r3, [pc, #28]	; (9001bf84 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
9001bf66:	676b      	str	r3, [r5, #116]	; 0x74
9001bf68:	bd38      	pop	{r3, r4, r5, pc}
9001bf6a:	bf00      	nop
9001bf6c:	24021cb4 	.word	0x24021cb4
9001bf70:	24000000 	.word	0x24000000
9001bf74:	900186eb 	.word	0x900186eb
9001bf78:	24000090 	.word	0x24000090
9001bf7c:	24021cb8 	.word	0x24021cb8
9001bf80:	900186e9 	.word	0x900186e9
9001bf84:	24000094 	.word	0x24000094

9001bf88 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>:
9001bf88:	b538      	push	{r3, r4, r5, lr}
9001bf8a:	4c15      	ldr	r4, [pc, #84]	; (9001bfe0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
9001bf8c:	4605      	mov	r5, r0
9001bf8e:	7823      	ldrb	r3, [r4, #0]
9001bf90:	f3bf 8f5b 	dmb	ish
9001bf94:	07da      	lsls	r2, r3, #31
9001bf96:	d40b      	bmi.n	9001bfb0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
9001bf98:	4620      	mov	r0, r4
9001bf9a:	f007 fc5e 	bl	9002385a <__cxa_guard_acquire>
9001bf9e:	b138      	cbz	r0, 9001bfb0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
9001bfa0:	4620      	mov	r0, r4
9001bfa2:	f007 fc66 	bl	90023872 <__cxa_guard_release>
9001bfa6:	4a0f      	ldr	r2, [pc, #60]	; (9001bfe4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
9001bfa8:	490f      	ldr	r1, [pc, #60]	; (9001bfe8 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
9001bfaa:	4810      	ldr	r0, [pc, #64]	; (9001bfec <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
9001bfac:	f007 fc4e 	bl	9002384c <__aeabi_atexit>
9001bfb0:	4c0f      	ldr	r4, [pc, #60]	; (9001bff0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
9001bfb2:	7823      	ldrb	r3, [r4, #0]
9001bfb4:	f3bf 8f5b 	dmb	ish
9001bfb8:	07db      	lsls	r3, r3, #31
9001bfba:	d40b      	bmi.n	9001bfd4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
9001bfbc:	4620      	mov	r0, r4
9001bfbe:	f007 fc4c 	bl	9002385a <__cxa_guard_acquire>
9001bfc2:	b138      	cbz	r0, 9001bfd4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
9001bfc4:	4620      	mov	r0, r4
9001bfc6:	f007 fc54 	bl	90023872 <__cxa_guard_release>
9001bfca:	4a06      	ldr	r2, [pc, #24]	; (9001bfe4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
9001bfcc:	4909      	ldr	r1, [pc, #36]	; (9001bff4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
9001bfce:	480a      	ldr	r0, [pc, #40]	; (9001bff8 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
9001bfd0:	f007 fc3c 	bl	9002384c <__aeabi_atexit>
9001bfd4:	4b05      	ldr	r3, [pc, #20]	; (9001bfec <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
9001bfd6:	66ab      	str	r3, [r5, #104]	; 0x68
9001bfd8:	4b07      	ldr	r3, [pc, #28]	; (9001bff8 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
9001bfda:	66eb      	str	r3, [r5, #108]	; 0x6c
9001bfdc:	bd38      	pop	{r3, r4, r5, pc}
9001bfde:	bf00      	nop
9001bfe0:	24021cac 	.word	0x24021cac
9001bfe4:	24000000 	.word	0x24000000
9001bfe8:	900186ef 	.word	0x900186ef
9001bfec:	24000088 	.word	0x24000088
9001bff0:	24021cb0 	.word	0x24021cb0
9001bff4:	900186ed 	.word	0x900186ed
9001bff8:	2400008c 	.word	0x2400008c

9001bffc <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>:
9001bffc:	b510      	push	{r4, lr}
9001bffe:	4604      	mov	r4, r0
9001c000:	f7ff ff88 	bl	9001bf14 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>
9001c004:	4620      	mov	r0, r4
9001c006:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9001c00a:	f7ff bfbd 	b.w	9001bf88 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>

9001c00e <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>:
9001c00e:	b510      	push	{r4, lr}
9001c010:	4604      	mov	r4, r0
9001c012:	f7ff fff3 	bl	9001bffc <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>
9001c016:	4620      	mov	r0, r4
9001c018:	f7ff ff72 	bl	9001bf00 <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>
9001c01c:	4620      	mov	r0, r4
9001c01e:	f7ff fdf9 	bl	9001bc14 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>
9001c022:	4620      	mov	r0, r4
9001c024:	f7ff fcfa 	bl	9001ba1c <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>
9001c028:	4620      	mov	r0, r4
9001c02a:	f7ff fd75 	bl	9001bb18 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>
9001c02e:	4620      	mov	r0, r4
9001c030:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9001c034:	f7ff bee0 	b.w	9001bdf8 <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>

9001c038 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev>:
9001c038:	b538      	push	{r3, r4, r5, lr}
9001c03a:	4c0b      	ldr	r4, [pc, #44]	; (9001c068 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x30>)
9001c03c:	4605      	mov	r5, r0
9001c03e:	7823      	ldrb	r3, [r4, #0]
9001c040:	f3bf 8f5b 	dmb	ish
9001c044:	07db      	lsls	r3, r3, #31
9001c046:	d40b      	bmi.n	9001c060 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x28>
9001c048:	4620      	mov	r0, r4
9001c04a:	f007 fc06 	bl	9002385a <__cxa_guard_acquire>
9001c04e:	b138      	cbz	r0, 9001c060 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x28>
9001c050:	4620      	mov	r0, r4
9001c052:	f007 fc0e 	bl	90023872 <__cxa_guard_release>
9001c056:	4a05      	ldr	r2, [pc, #20]	; (9001c06c <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x34>)
9001c058:	4905      	ldr	r1, [pc, #20]	; (9001c070 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x38>)
9001c05a:	4806      	ldr	r0, [pc, #24]	; (9001c074 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x3c>)
9001c05c:	f007 fbf6 	bl	9002384c <__aeabi_atexit>
9001c060:	4b04      	ldr	r3, [pc, #16]	; (9001c074 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x3c>)
9001c062:	67ab      	str	r3, [r5, #120]	; 0x78
9001c064:	bd38      	pop	{r3, r4, r5, pc}
9001c066:	bf00      	nop
9001c068:	24021ca0 	.word	0x24021ca0
9001c06c:	24000000 	.word	0x24000000
9001c070:	900186e7 	.word	0x900186e7
9001c074:	24000080 	.word	0x24000080

9001c078 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv>:
9001c078:	b538      	push	{r3, r4, r5, lr}
9001c07a:	4c0b      	ldr	r4, [pc, #44]	; (9001c0a8 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x30>)
9001c07c:	4605      	mov	r5, r0
9001c07e:	7823      	ldrb	r3, [r4, #0]
9001c080:	f3bf 8f5b 	dmb	ish
9001c084:	07db      	lsls	r3, r3, #31
9001c086:	d40b      	bmi.n	9001c0a0 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x28>
9001c088:	4620      	mov	r0, r4
9001c08a:	f007 fbe6 	bl	9002385a <__cxa_guard_acquire>
9001c08e:	b138      	cbz	r0, 9001c0a0 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x28>
9001c090:	4620      	mov	r0, r4
9001c092:	f007 fbee 	bl	90023872 <__cxa_guard_release>
9001c096:	4a05      	ldr	r2, [pc, #20]	; (9001c0ac <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x34>)
9001c098:	4905      	ldr	r1, [pc, #20]	; (9001c0b0 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x38>)
9001c09a:	4806      	ldr	r0, [pc, #24]	; (9001c0b4 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x3c>)
9001c09c:	f007 fbd6 	bl	9002384c <__aeabi_atexit>
9001c0a0:	4b04      	ldr	r3, [pc, #16]	; (9001c0b4 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x3c>)
9001c0a2:	67eb      	str	r3, [r5, #124]	; 0x7c
9001c0a4:	bd38      	pop	{r3, r4, r5, pc}
9001c0a6:	bf00      	nop
9001c0a8:	24021ca4 	.word	0x24021ca4
9001c0ac:	24000000 	.word	0x24000000
9001c0b0:	900186e5 	.word	0x900186e5
9001c0b4:	24000084 	.word	0x24000084

9001c0b8 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev>:
9001c0b8:	b570      	push	{r4, r5, r6, lr}
9001c0ba:	4d0d      	ldr	r5, [pc, #52]	; (9001c0f0 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x38>)
9001c0bc:	4606      	mov	r6, r0
9001c0be:	4c0d      	ldr	r4, [pc, #52]	; (9001c0f4 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x3c>)
9001c0c0:	782b      	ldrb	r3, [r5, #0]
9001c0c2:	f3bf 8f5b 	dmb	ish
9001c0c6:	f013 0f01 	tst.w	r3, #1
9001c0ca:	d10d      	bne.n	9001c0e8 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x30>
9001c0cc:	4628      	mov	r0, r5
9001c0ce:	f007 fbc4 	bl	9002385a <__cxa_guard_acquire>
9001c0d2:	b148      	cbz	r0, 9001c0e8 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x30>
9001c0d4:	4b08      	ldr	r3, [pc, #32]	; (9001c0f8 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x40>)
9001c0d6:	4628      	mov	r0, r5
9001c0d8:	6023      	str	r3, [r4, #0]
9001c0da:	f007 fbca 	bl	90023872 <__cxa_guard_release>
9001c0de:	4a07      	ldr	r2, [pc, #28]	; (9001c0fc <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x44>)
9001c0e0:	4620      	mov	r0, r4
9001c0e2:	4907      	ldr	r1, [pc, #28]	; (9001c100 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x48>)
9001c0e4:	f007 fbb2 	bl	9002384c <__aeabi_atexit>
9001c0e8:	f8c6 4080 	str.w	r4, [r6, #128]	; 0x80
9001c0ec:	bd70      	pop	{r4, r5, r6, pc}
9001c0ee:	bf00      	nop
9001c0f0:	24021ca8 	.word	0x24021ca8
9001c0f4:	24021d1c 	.word	0x24021d1c
9001c0f8:	90028f40 	.word	0x90028f40
9001c0fc:	24000000 	.word	0x24000000
9001c100:	900186e3 	.word	0x900186e3

9001c104 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_AllEv>:
9001c104:	b510      	push	{r4, lr}
9001c106:	4604      	mov	r4, r0
9001c108:	f7ff ff96 	bl	9001c038 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev>
9001c10c:	4620      	mov	r0, r4
9001c10e:	f7ff ffb3 	bl	9001c078 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv>
9001c112:	4620      	mov	r0, r4
9001c114:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9001c118:	f7ff bfce 	b.w	9001c0b8 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev>

9001c11c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>:
9001c11c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001c120:	e9dd 450b 	ldrd	r4, r5, [sp, #44]	; 0x2c
9001c124:	f9bd e024 	ldrsh.w	lr, [sp, #36]	; 0x24
9001c128:	2d00      	cmp	r5, #0
9001c12a:	f9bd b028 	ldrsh.w	fp, [sp, #40]	; 0x28
9001c12e:	fb05 4c0e 	mla	ip, r5, lr, r4
9001c132:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
9001c136:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
9001c13a:	f89d 603c 	ldrb.w	r6, [sp, #60]	; 0x3c
9001c13e:	eb02 0a0c 	add.w	sl, r2, ip
9001c142:	8808      	ldrh	r0, [r1, #0]
9001c144:	f2c0 80b0 	blt.w	9001c2a8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x18c>
9001c148:	45ab      	cmp	fp, r5
9001c14a:	f340 80ad 	ble.w	9001c2a8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x18c>
9001c14e:	2c00      	cmp	r4, #0
9001c150:	f2c0 80a8 	blt.w	9001c2a4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x188>
9001c154:	45a6      	cmp	lr, r4
9001c156:	f340 80a5 	ble.w	9001c2a4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x188>
9001c15a:	f812 200c 	ldrb.w	r2, [r2, ip]
9001c15e:	f833 8012 	ldrh.w	r8, [r3, r2, lsl #1]
9001c162:	1c62      	adds	r2, r4, #1
9001c164:	f100 80a3 	bmi.w	9001c2ae <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
9001c168:	4596      	cmp	lr, r2
9001c16a:	f340 80a0 	ble.w	9001c2ae <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
9001c16e:	f1b9 0f00 	cmp.w	r9, #0
9001c172:	f000 809c 	beq.w	9001c2ae <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
9001c176:	f89a 2001 	ldrb.w	r2, [sl, #1]
9001c17a:	f833 c012 	ldrh.w	ip, [r3, r2, lsl #1]
9001c17e:	3501      	adds	r5, #1
9001c180:	f100 8099 	bmi.w	9001c2b6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
9001c184:	45ab      	cmp	fp, r5
9001c186:	f340 8096 	ble.w	9001c2b6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
9001c18a:	2f00      	cmp	r7, #0
9001c18c:	f000 8093 	beq.w	9001c2b6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
9001c190:	2c00      	cmp	r4, #0
9001c192:	f2c0 808e 	blt.w	9001c2b2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x196>
9001c196:	45a6      	cmp	lr, r4
9001c198:	f340 808b 	ble.w	9001c2b2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x196>
9001c19c:	f81a 200e 	ldrb.w	r2, [sl, lr]
9001c1a0:	f833 5012 	ldrh.w	r5, [r3, r2, lsl #1]
9001c1a4:	3401      	adds	r4, #1
9001c1a6:	f100 8089 	bmi.w	9001c2bc <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
9001c1aa:	45a6      	cmp	lr, r4
9001c1ac:	f340 8086 	ble.w	9001c2bc <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
9001c1b0:	f1b9 0f00 	cmp.w	r9, #0
9001c1b4:	f000 8082 	beq.w	9001c2bc <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
9001c1b8:	44d6      	add	lr, sl
9001c1ba:	f89e 2001 	ldrb.w	r2, [lr, #1]
9001c1be:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
9001c1c2:	ea4f 4408 	mov.w	r4, r8, lsl #16
9001c1c6:	f428 68fc 	bic.w	r8, r8, #2016	; 0x7e0
9001c1ca:	fb19 fe07 	smulbb	lr, r9, r7
9001c1ce:	f1c7 0210 	rsb	r2, r7, #16
9001c1d2:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
9001c1d6:	f3ce 0ec7 	ubfx	lr, lr, #3, #8
9001c1da:	eba2 0209 	sub.w	r2, r2, r9
9001c1de:	ea44 0808 	orr.w	r8, r4, r8
9001c1e2:	ea4f 440c 	mov.w	r4, ip, lsl #16
9001c1e6:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
9001c1ea:	eb0e 0242 	add.w	r2, lr, r2, lsl #1
9001c1ee:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
9001c1f2:	ebce 0747 	rsb	r7, lr, r7, lsl #1
9001c1f6:	ea44 0c0c 	orr.w	ip, r4, ip
9001c1fa:	ebce 0449 	rsb	r4, lr, r9, lsl #1
9001c1fe:	fb04 f40c 	mul.w	r4, r4, ip
9001c202:	fb02 4808 	mla	r8, r2, r8, r4
9001c206:	041a      	lsls	r2, r3, #16
9001c208:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
9001c20c:	b2b4      	uxth	r4, r6
9001c20e:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
9001c212:	43f6      	mvns	r6, r6
9001c214:	4313      	orrs	r3, r2
9001c216:	042a      	lsls	r2, r5, #16
9001c218:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
9001c21c:	b2f6      	uxtb	r6, r6
9001c21e:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
9001c222:	fb0e 8303 	mla	r3, lr, r3, r8
9001c226:	432a      	orrs	r2, r5
9001c228:	fb07 3202 	mla	r2, r7, r2, r3
9001c22c:	10c7      	asrs	r7, r0, #3
9001c22e:	0d53      	lsrs	r3, r2, #21
9001c230:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
9001c234:	0952      	lsrs	r2, r2, #5
9001c236:	fb17 f706 	smulbb	r7, r7, r6
9001c23a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9001c23e:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
9001c242:	431a      	orrs	r2, r3
9001c244:	b293      	uxth	r3, r2
9001c246:	1202      	asrs	r2, r0, #8
9001c248:	121d      	asrs	r5, r3, #8
9001c24a:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
9001c24e:	00c0      	lsls	r0, r0, #3
9001c250:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
9001c254:	fb12 f206 	smulbb	r2, r2, r6
9001c258:	b2c0      	uxtb	r0, r0
9001c25a:	fb05 2504 	mla	r5, r5, r4, r2
9001c25e:	10da      	asrs	r2, r3, #3
9001c260:	fb10 f006 	smulbb	r0, r0, r6
9001c264:	00db      	lsls	r3, r3, #3
9001c266:	b2ad      	uxth	r5, r5
9001c268:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
9001c26c:	b2db      	uxtb	r3, r3
9001c26e:	fb02 7204 	mla	r2, r2, r4, r7
9001c272:	fb03 0004 	mla	r0, r3, r4, r0
9001c276:	1c6b      	adds	r3, r5, #1
9001c278:	b292      	uxth	r2, r2
9001c27a:	b280      	uxth	r0, r0
9001c27c:	eb03 2515 	add.w	r5, r3, r5, lsr #8
9001c280:	1c43      	adds	r3, r0, #1
9001c282:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
9001c286:	eb03 2310 	add.w	r3, r3, r0, lsr #8
9001c28a:	1c50      	adds	r0, r2, #1
9001c28c:	eb00 2212 	add.w	r2, r0, r2, lsr #8
9001c290:	f3c3 23c4 	ubfx	r3, r3, #11, #5
9001c294:	0952      	lsrs	r2, r2, #5
9001c296:	432b      	orrs	r3, r5
9001c298:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
9001c29c:	4313      	orrs	r3, r2
9001c29e:	800b      	strh	r3, [r1, #0]
9001c2a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001c2a4:	4680      	mov	r8, r0
9001c2a6:	e75c      	b.n	9001c162 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x46>
9001c2a8:	4684      	mov	ip, r0
9001c2aa:	4680      	mov	r8, r0
9001c2ac:	e767      	b.n	9001c17e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x62>
9001c2ae:	4684      	mov	ip, r0
9001c2b0:	e765      	b.n	9001c17e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x62>
9001c2b2:	4605      	mov	r5, r0
9001c2b4:	e776      	b.n	9001c1a4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x88>
9001c2b6:	4603      	mov	r3, r0
9001c2b8:	4605      	mov	r5, r0
9001c2ba:	e782      	b.n	9001c1c2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>
9001c2bc:	4603      	mov	r3, r0
9001c2be:	e780      	b.n	9001c1c2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>

9001c2c0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
9001c2c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001c2c4:	b099      	sub	sp, #100	; 0x64
9001c2c6:	9215      	str	r2, [sp, #84]	; 0x54
9001c2c8:	9309      	str	r3, [sp, #36]	; 0x24
9001c2ca:	9a27      	ldr	r2, [sp, #156]	; 0x9c
9001c2cc:	f89d 30ac 	ldrb.w	r3, [sp, #172]	; 0xac
9001c2d0:	9016      	str	r0, [sp, #88]	; 0x58
9001c2d2:	930d      	str	r3, [sp, #52]	; 0x34
9001c2d4:	6850      	ldr	r0, [r2, #4]
9001c2d6:	910c      	str	r1, [sp, #48]	; 0x30
9001c2d8:	6812      	ldr	r2, [r2, #0]
9001c2da:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	; 0xa0
9001c2de:	e9dd a523 	ldrd	sl, r5, [sp, #140]	; 0x8c
9001c2e2:	fb00 1303 	mla	r3, r0, r3, r1
9001c2e6:	eb02 0843 	add.w	r8, r2, r3, lsl #1
9001c2ea:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
9001c2ec:	681b      	ldr	r3, [r3, #0]
9001c2ee:	930b      	str	r3, [sp, #44]	; 0x2c
9001c2f0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
9001c2f2:	685e      	ldr	r6, [r3, #4]
9001c2f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
9001c2f6:	3604      	adds	r6, #4
9001c2f8:	43db      	mvns	r3, r3
9001c2fa:	b2db      	uxtb	r3, r3
9001c2fc:	930a      	str	r3, [sp, #40]	; 0x28
9001c2fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
9001c300:	2b00      	cmp	r3, #0
9001c302:	dc03      	bgt.n	9001c30c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
9001c304:	9b15      	ldr	r3, [sp, #84]	; 0x54
9001c306:	2b00      	cmp	r3, #0
9001c308:	f340 8225 	ble.w	9001c756 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x496>
9001c30c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
9001c30e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
9001c312:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
9001c316:	1e48      	subs	r0, r1, #1
9001c318:	1e57      	subs	r7, r2, #1
9001c31a:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001c31c:	2b00      	cmp	r3, #0
9001c31e:	f340 80e3 	ble.w	9001c4e8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
9001c322:	ea5f 4c2a 	movs.w	ip, sl, asr #16
9001c326:	ea4f 4325 	mov.w	r3, r5, asr #16
9001c32a:	d406      	bmi.n	9001c33a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
9001c32c:	4584      	cmp	ip, r0
9001c32e:	da04      	bge.n	9001c33a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
9001c330:	2b00      	cmp	r3, #0
9001c332:	db02      	blt.n	9001c33a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
9001c334:	42bb      	cmp	r3, r7
9001c336:	f2c0 80d8 	blt.w	9001c4ea <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
9001c33a:	f11c 0c01 	adds.w	ip, ip, #1
9001c33e:	f100 80c9 	bmi.w	9001c4d4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
9001c342:	4561      	cmp	r1, ip
9001c344:	f2c0 80c6 	blt.w	9001c4d4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
9001c348:	3301      	adds	r3, #1
9001c34a:	f100 80c3 	bmi.w	9001c4d4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
9001c34e:	429a      	cmp	r2, r3
9001c350:	f2c0 80c0 	blt.w	9001c4d4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
9001c354:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
9001c358:	4647      	mov	r7, r8
9001c35a:	f1bb 0f00 	cmp.w	fp, #0
9001c35e:	f340 80e3 	ble.w	9001c528 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x268>
9001c362:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
9001c364:	ea4f 4c25 	mov.w	ip, r5, asr #16
9001c368:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
9001c36a:	f3ca 3003 	ubfx	r0, sl, #12, #4
9001c36e:	f8d2 e00c 	ldr.w	lr, [r2, #12]
9001c372:	ea5f 422a 	movs.w	r2, sl, asr #16
9001c376:	f3c5 3103 	ubfx	r1, r5, #12, #4
9001c37a:	689b      	ldr	r3, [r3, #8]
9001c37c:	f100 8121 	bmi.w	9001c5c2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
9001c380:	f103 39ff 	add.w	r9, r3, #4294967295
9001c384:	454a      	cmp	r2, r9
9001c386:	f280 811c 	bge.w	9001c5c2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
9001c38a:	f1bc 0f00 	cmp.w	ip, #0
9001c38e:	f2c0 8118 	blt.w	9001c5c2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
9001c392:	f10e 39ff 	add.w	r9, lr, #4294967295
9001c396:	45cc      	cmp	ip, r9
9001c398:	f280 8113 	bge.w	9001c5c2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
9001c39c:	b21b      	sxth	r3, r3
9001c39e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
9001c3a0:	fb0c 2203 	mla	r2, ip, r3, r2
9001c3a4:	eb04 0902 	add.w	r9, r4, r2
9001c3a8:	5ca2      	ldrb	r2, [r4, r2]
9001c3aa:	f836 e012 	ldrh.w	lr, [r6, r2, lsl #1]
9001c3ae:	2800      	cmp	r0, #0
9001c3b0:	f000 80fe 	beq.w	9001c5b0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>
9001c3b4:	f899 2001 	ldrb.w	r2, [r9, #1]
9001c3b8:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
9001c3bc:	9211      	str	r2, [sp, #68]	; 0x44
9001c3be:	b151      	cbz	r1, 9001c3d6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
9001c3c0:	eb09 0203 	add.w	r2, r9, r3
9001c3c4:	f819 3003 	ldrb.w	r3, [r9, r3]
9001c3c8:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
9001c3cc:	930f      	str	r3, [sp, #60]	; 0x3c
9001c3ce:	7853      	ldrb	r3, [r2, #1]
9001c3d0:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
9001c3d4:	9312      	str	r3, [sp, #72]	; 0x48
9001c3d6:	9b11      	ldr	r3, [sp, #68]	; 0x44
9001c3d8:	fb10 f201 	smulbb	r2, r0, r1
9001c3dc:	9c12      	ldr	r4, [sp, #72]	; 0x48
9001c3de:	ea4f 4c03 	mov.w	ip, r3, lsl #16
9001c3e2:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
9001c3e6:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
9001c3ea:	10d2      	asrs	r2, r2, #3
9001c3ec:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
9001c3f0:	ebc2 0940 	rsb	r9, r2, r0, lsl #1
9001c3f4:	ea4c 0c03 	orr.w	ip, ip, r3
9001c3f8:	9b12      	ldr	r3, [sp, #72]	; 0x48
9001c3fa:	041b      	lsls	r3, r3, #16
9001c3fc:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
9001c400:	4323      	orrs	r3, r4
9001c402:	9c0a      	ldr	r4, [sp, #40]	; 0x28
9001c404:	4353      	muls	r3, r2
9001c406:	fb09 330c 	mla	r3, r9, ip, r3
9001c40a:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
9001c40e:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
9001c412:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
9001c416:	ea4c 0e0e 	orr.w	lr, ip, lr
9001c41a:	f1c1 0c10 	rsb	ip, r1, #16
9001c41e:	ebac 0c00 	sub.w	ip, ip, r0
9001c422:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
9001c426:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
9001c42a:	fb0c 3c0e 	mla	ip, ip, lr, r3
9001c42e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
9001c430:	0418      	lsls	r0, r3, #16
9001c432:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
9001c436:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
9001c43a:	4318      	orrs	r0, r3
9001c43c:	fb02 c200 	mla	r2, r2, r0, ip
9001c440:	8838      	ldrh	r0, [r7, #0]
9001c442:	0d53      	lsrs	r3, r2, #21
9001c444:	0952      	lsrs	r2, r2, #5
9001c446:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9001c44a:	1201      	asrs	r1, r0, #8
9001c44c:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
9001c450:	ea4f 0ee0 	mov.w	lr, r0, asr #3
9001c454:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
9001c458:	00c0      	lsls	r0, r0, #3
9001c45a:	431a      	orrs	r2, r3
9001c45c:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
9001c460:	fb11 f104 	smulbb	r1, r1, r4
9001c464:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
9001c468:	b292      	uxth	r2, r2
9001c46a:	fb1e fe04 	smulbb	lr, lr, r4
9001c46e:	b2c0      	uxtb	r0, r0
9001c470:	ea4f 2c22 	mov.w	ip, r2, asr #8
9001c474:	fb10 f004 	smulbb	r0, r0, r4
9001c478:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
9001c47c:	fb0c 1c03 	mla	ip, ip, r3, r1
9001c480:	10d1      	asrs	r1, r2, #3
9001c482:	00d2      	lsls	r2, r2, #3
9001c484:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
9001c488:	fa1f fc8c 	uxth.w	ip, ip
9001c48c:	b2d2      	uxtb	r2, r2
9001c48e:	fb01 e103 	mla	r1, r1, r3, lr
9001c492:	fb02 0303 	mla	r3, r2, r3, r0
9001c496:	b289      	uxth	r1, r1
9001c498:	b29a      	uxth	r2, r3
9001c49a:	f10c 0301 	add.w	r3, ip, #1
9001c49e:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
9001c4a2:	1c53      	adds	r3, r2, #1
9001c4a4:	eb03 2312 	add.w	r3, r3, r2, lsr #8
9001c4a8:	1c4a      	adds	r2, r1, #1
9001c4aa:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
9001c4ae:	eb02 2111 	add.w	r1, r2, r1, lsr #8
9001c4b2:	f3c3 23c4 	ubfx	r3, r3, #11, #5
9001c4b6:	0949      	lsrs	r1, r1, #5
9001c4b8:	ea43 030c 	orr.w	r3, r3, ip
9001c4bc:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
9001c4c0:	430b      	orrs	r3, r1
9001c4c2:	803b      	strh	r3, [r7, #0]
9001c4c4:	9b25      	ldr	r3, [sp, #148]	; 0x94
9001c4c6:	3702      	adds	r7, #2
9001c4c8:	f10b 3bff 	add.w	fp, fp, #4294967295
9001c4cc:	449a      	add	sl, r3
9001c4ce:	9b26      	ldr	r3, [sp, #152]	; 0x98
9001c4d0:	441d      	add	r5, r3
9001c4d2:	e742      	b.n	9001c35a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
9001c4d4:	9b25      	ldr	r3, [sp, #148]	; 0x94
9001c4d6:	f108 0802 	add.w	r8, r8, #2
9001c4da:	449a      	add	sl, r3
9001c4dc:	9b26      	ldr	r3, [sp, #152]	; 0x98
9001c4de:	441d      	add	r5, r3
9001c4e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001c4e2:	3b01      	subs	r3, #1
9001c4e4:	9309      	str	r3, [sp, #36]	; 0x24
9001c4e6:	e718      	b.n	9001c31a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
9001c4e8:	d023      	beq.n	9001c532 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
9001c4ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001c4ec:	9825      	ldr	r0, [sp, #148]	; 0x94
9001c4ee:	3b01      	subs	r3, #1
9001c4f0:	fb00 a003 	mla	r0, r0, r3, sl
9001c4f4:	1400      	asrs	r0, r0, #16
9001c4f6:	f53f af2d 	bmi.w	9001c354 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
9001c4fa:	3901      	subs	r1, #1
9001c4fc:	4288      	cmp	r0, r1
9001c4fe:	f6bf af29 	bge.w	9001c354 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
9001c502:	9926      	ldr	r1, [sp, #152]	; 0x98
9001c504:	fb01 5303 	mla	r3, r1, r3, r5
9001c508:	141b      	asrs	r3, r3, #16
9001c50a:	f53f af23 	bmi.w	9001c354 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
9001c50e:	3a01      	subs	r2, #1
9001c510:	4293      	cmp	r3, r2
9001c512:	f6bf af1f 	bge.w	9001c354 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
9001c516:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
9001c51a:	f8bd 9034 	ldrh.w	r9, [sp, #52]	; 0x34
9001c51e:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
9001c522:	f1be 0f00 	cmp.w	lr, #0
9001c526:	dc6c      	bgt.n	9001c602 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
9001c528:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001c52a:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
9001c52e:	eb08 0844 	add.w	r8, r8, r4, lsl #1
9001c532:	9b0c      	ldr	r3, [sp, #48]	; 0x30
9001c534:	2b00      	cmp	r3, #0
9001c536:	f340 810e 	ble.w	9001c756 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x496>
9001c53a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
9001c53e:	9b22      	ldr	r3, [sp, #136]	; 0x88
9001c540:	ee30 0a04 	vadd.f32	s0, s0, s8
9001c544:	ee70 0aa4 	vadd.f32	s1, s1, s9
9001c548:	eef0 6a62 	vmov.f32	s13, s5
9001c54c:	eec7 7a00 	vdiv.f32	s15, s14, s0
9001c550:	ee31 1a05 	vadd.f32	s2, s2, s10
9001c554:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9001c558:	ee16 aa90 	vmov	sl, s13
9001c55c:	eef0 6a43 	vmov.f32	s13, s6
9001c560:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9001c564:	ee16 5a90 	vmov	r5, s13
9001c568:	ee20 7aa7 	vmul.f32	s14, s1, s15
9001c56c:	ee61 7a27 	vmul.f32	s15, s2, s15
9001c570:	ee77 2a62 	vsub.f32	s5, s14, s5
9001c574:	ee37 3ac3 	vsub.f32	s6, s15, s6
9001c578:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9001c57c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9001c580:	ee12 2a90 	vmov	r2, s5
9001c584:	eef0 2a47 	vmov.f32	s5, s14
9001c588:	fb92 f3f3 	sdiv	r3, r2, r3
9001c58c:	ee13 2a10 	vmov	r2, s6
9001c590:	9325      	str	r3, [sp, #148]	; 0x94
9001c592:	9b22      	ldr	r3, [sp, #136]	; 0x88
9001c594:	eeb0 3a67 	vmov.f32	s6, s15
9001c598:	fb92 f3f3 	sdiv	r3, r2, r3
9001c59c:	9326      	str	r3, [sp, #152]	; 0x98
9001c59e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
9001c5a0:	9a15      	ldr	r2, [sp, #84]	; 0x54
9001c5a2:	3b01      	subs	r3, #1
9001c5a4:	930c      	str	r3, [sp, #48]	; 0x30
9001c5a6:	9b22      	ldr	r3, [sp, #136]	; 0x88
9001c5a8:	bf08      	it	eq
9001c5aa:	4613      	moveq	r3, r2
9001c5ac:	9309      	str	r3, [sp, #36]	; 0x24
9001c5ae:	e6a6      	b.n	9001c2fe <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
9001c5b0:	2900      	cmp	r1, #0
9001c5b2:	f43f af10 	beq.w	9001c3d6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
9001c5b6:	f819 3003 	ldrb.w	r3, [r9, r3]
9001c5ba:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
9001c5be:	930f      	str	r3, [sp, #60]	; 0x3c
9001c5c0:	e709      	b.n	9001c3d6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
9001c5c2:	f112 0901 	adds.w	r9, r2, #1
9001c5c6:	f53f af7d 	bmi.w	9001c4c4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
9001c5ca:	454b      	cmp	r3, r9
9001c5cc:	f6ff af7a 	blt.w	9001c4c4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
9001c5d0:	f11c 0901 	adds.w	r9, ip, #1
9001c5d4:	f53f af76 	bmi.w	9001c4c4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
9001c5d8:	45ce      	cmp	lr, r9
9001c5da:	f6ff af73 	blt.w	9001c4c4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
9001c5de:	9c0d      	ldr	r4, [sp, #52]	; 0x34
9001c5e0:	b21b      	sxth	r3, r3
9001c5e2:	9202      	str	r2, [sp, #8]
9001c5e4:	fa0f f28e 	sxth.w	r2, lr
9001c5e8:	9300      	str	r3, [sp, #0]
9001c5ea:	4633      	mov	r3, r6
9001c5ec:	9201      	str	r2, [sp, #4]
9001c5ee:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
9001c5f0:	e9cd 1405 	strd	r1, r4, [sp, #20]
9001c5f4:	e9cd c003 	strd	ip, r0, [sp, #12]
9001c5f8:	4639      	mov	r1, r7
9001c5fa:	9816      	ldr	r0, [sp, #88]	; 0x58
9001c5fc:	f7ff fd8e 	bl	9001c11c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>
9001c600:	e760      	b.n	9001c4c4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
9001c602:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
9001c604:	ea4f 422a 	mov.w	r2, sl, asr #16
9001c608:	1429      	asrs	r1, r5, #16
9001c60a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
9001c60c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
9001c610:	f3ca 3c03 	ubfx	ip, sl, #12, #4
9001c614:	f3c5 3003 	ubfx	r0, r5, #12, #4
9001c618:	fb03 2101 	mla	r1, r3, r1, r2
9001c61c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
9001c61e:	440a      	add	r2, r1
9001c620:	5c61      	ldrb	r1, [r4, r1]
9001c622:	f836 1011 	ldrh.w	r1, [r6, r1, lsl #1]
9001c626:	f1bc 0f00 	cmp.w	ip, #0
9001c62a:	f000 808c 	beq.w	9001c746 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x486>
9001c62e:	7857      	ldrb	r7, [r2, #1]
9001c630:	f836 4017 	ldrh.w	r4, [r6, r7, lsl #1]
9001c634:	9413      	str	r4, [sp, #76]	; 0x4c
9001c636:	b140      	cbz	r0, 9001c64a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
9001c638:	18d7      	adds	r7, r2, r3
9001c63a:	5cd3      	ldrb	r3, [r2, r3]
9001c63c:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
9001c640:	9310      	str	r3, [sp, #64]	; 0x40
9001c642:	787b      	ldrb	r3, [r7, #1]
9001c644:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
9001c648:	9314      	str	r3, [sp, #80]	; 0x50
9001c64a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
9001c64c:	fb1c f200 	smulbb	r2, ip, r0
9001c650:	9c14      	ldr	r4, [sp, #80]	; 0x50
9001c652:	f10e 3eff 	add.w	lr, lr, #4294967295
9001c656:	041f      	lsls	r7, r3, #16
9001c658:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
9001c65c:	10d2      	asrs	r2, r2, #3
9001c65e:	f424 6bfc 	bic.w	fp, r4, #2016	; 0x7e0
9001c662:	f007 67fc 	and.w	r7, r7, #132120576	; 0x7e00000
9001c666:	431f      	orrs	r7, r3
9001c668:	ebc2 034c 	rsb	r3, r2, ip, lsl #1
9001c66c:	9317      	str	r3, [sp, #92]	; 0x5c
9001c66e:	9b14      	ldr	r3, [sp, #80]	; 0x50
9001c670:	9c17      	ldr	r4, [sp, #92]	; 0x5c
9001c672:	041b      	lsls	r3, r3, #16
9001c674:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
9001c678:	ea43 030b 	orr.w	r3, r3, fp
9001c67c:	ea4f 4b01 	mov.w	fp, r1, lsl #16
9001c680:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
9001c684:	4353      	muls	r3, r2
9001c686:	fb04 3707 	mla	r7, r4, r7, r3
9001c68a:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
9001c68e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
9001c690:	ea43 0b01 	orr.w	fp, r3, r1
9001c694:	f1c0 0110 	rsb	r1, r0, #16
9001c698:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001c69a:	eba1 0c0c 	sub.w	ip, r1, ip
9001c69e:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
9001c6a2:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
9001c6a6:	fb0c 770b 	mla	r7, ip, fp, r7
9001c6aa:	ea4f 4c03 	mov.w	ip, r3, lsl #16
9001c6ae:	f423 6bfc 	bic.w	fp, r3, #2016	; 0x7e0
9001c6b2:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
9001c6b6:	ea4c 0c0b 	orr.w	ip, ip, fp
9001c6ba:	fb02 770c 	mla	r7, r2, ip, r7
9001c6be:	9a0e      	ldr	r2, [sp, #56]	; 0x38
9001c6c0:	0d79      	lsrs	r1, r7, #21
9001c6c2:	8812      	ldrh	r2, [r2, #0]
9001c6c4:	097f      	lsrs	r7, r7, #5
9001c6c6:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
9001c6ca:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
9001c6ce:	430f      	orrs	r7, r1
9001c6d0:	1211      	asrs	r1, r2, #8
9001c6d2:	b2bb      	uxth	r3, r7
9001c6d4:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
9001c6d8:	10d7      	asrs	r7, r2, #3
9001c6da:	fb11 f104 	smulbb	r1, r1, r4
9001c6de:	1218      	asrs	r0, r3, #8
9001c6e0:	00d2      	lsls	r2, r2, #3
9001c6e2:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
9001c6e6:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
9001c6ea:	fb17 f704 	smulbb	r7, r7, r4
9001c6ee:	b2d2      	uxtb	r2, r2
9001c6f0:	fb00 1009 	mla	r0, r0, r9, r1
9001c6f4:	10d9      	asrs	r1, r3, #3
9001c6f6:	fb12 f204 	smulbb	r2, r2, r4
9001c6fa:	00db      	lsls	r3, r3, #3
9001c6fc:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
9001c700:	b280      	uxth	r0, r0
9001c702:	b2db      	uxtb	r3, r3
9001c704:	fb01 7109 	mla	r1, r1, r9, r7
9001c708:	fb03 2309 	mla	r3, r3, r9, r2
9001c70c:	1c42      	adds	r2, r0, #1
9001c70e:	b289      	uxth	r1, r1
9001c710:	b29b      	uxth	r3, r3
9001c712:	eb02 2010 	add.w	r0, r2, r0, lsr #8
9001c716:	1c4f      	adds	r7, r1, #1
9001c718:	1c5a      	adds	r2, r3, #1
9001c71a:	eb07 2111 	add.w	r1, r7, r1, lsr #8
9001c71e:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
9001c722:	eb02 2213 	add.w	r2, r2, r3, lsr #8
9001c726:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001c728:	0949      	lsrs	r1, r1, #5
9001c72a:	f3c2 22c4 	ubfx	r2, r2, #11, #5
9001c72e:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
9001c732:	4310      	orrs	r0, r2
9001c734:	4308      	orrs	r0, r1
9001c736:	f823 0b02 	strh.w	r0, [r3], #2
9001c73a:	930e      	str	r3, [sp, #56]	; 0x38
9001c73c:	9b25      	ldr	r3, [sp, #148]	; 0x94
9001c73e:	449a      	add	sl, r3
9001c740:	9b26      	ldr	r3, [sp, #152]	; 0x98
9001c742:	441d      	add	r5, r3
9001c744:	e6ed      	b.n	9001c522 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x262>
9001c746:	2800      	cmp	r0, #0
9001c748:	f43f af7f 	beq.w	9001c64a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
9001c74c:	5cd3      	ldrb	r3, [r2, r3]
9001c74e:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
9001c752:	9310      	str	r3, [sp, #64]	; 0x40
9001c754:	e779      	b.n	9001c64a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
9001c756:	b019      	add	sp, #100	; 0x64
9001c758:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

9001c75c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
9001c75c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
9001c760:	e9dd 480a 	ldrd	r4, r8, [sp, #40]	; 0x28
9001c764:	f9bd e020 	ldrsh.w	lr, [sp, #32]
9001c768:	f1b8 0f00 	cmp.w	r8, #0
9001c76c:	f9bd a024 	ldrsh.w	sl, [sp, #36]	; 0x24
9001c770:	fb08 470e 	mla	r7, r8, lr, r4
9001c774:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
9001c778:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
9001c77c:	eb02 0907 	add.w	r9, r2, r7
9001c780:	8808      	ldrh	r0, [r1, #0]
9001c782:	db67      	blt.n	9001c854 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf8>
9001c784:	45c2      	cmp	sl, r8
9001c786:	dd65      	ble.n	9001c854 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf8>
9001c788:	2c00      	cmp	r4, #0
9001c78a:	db61      	blt.n	9001c850 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf4>
9001c78c:	45a6      	cmp	lr, r4
9001c78e:	dd5f      	ble.n	9001c850 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf4>
9001c790:	5dd2      	ldrb	r2, [r2, r7]
9001c792:	f833 c012 	ldrh.w	ip, [r3, r2, lsl #1]
9001c796:	1c62      	adds	r2, r4, #1
9001c798:	d45f      	bmi.n	9001c85a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
9001c79a:	4596      	cmp	lr, r2
9001c79c:	dd5d      	ble.n	9001c85a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
9001c79e:	2d00      	cmp	r5, #0
9001c7a0:	d05b      	beq.n	9001c85a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
9001c7a2:	f899 2001 	ldrb.w	r2, [r9, #1]
9001c7a6:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
9001c7aa:	f118 0801 	adds.w	r8, r8, #1
9001c7ae:	d458      	bmi.n	9001c862 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
9001c7b0:	45c2      	cmp	sl, r8
9001c7b2:	dd56      	ble.n	9001c862 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
9001c7b4:	2e00      	cmp	r6, #0
9001c7b6:	d054      	beq.n	9001c862 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
9001c7b8:	2c00      	cmp	r4, #0
9001c7ba:	db50      	blt.n	9001c85e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x102>
9001c7bc:	45a6      	cmp	lr, r4
9001c7be:	dd4e      	ble.n	9001c85e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x102>
9001c7c0:	f819 200e 	ldrb.w	r2, [r9, lr]
9001c7c4:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
9001c7c8:	3401      	adds	r4, #1
9001c7ca:	d407      	bmi.n	9001c7dc <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
9001c7cc:	45a6      	cmp	lr, r4
9001c7ce:	dd05      	ble.n	9001c7dc <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
9001c7d0:	b125      	cbz	r5, 9001c7dc <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
9001c7d2:	44ce      	add	lr, r9
9001c7d4:	f89e 0001 	ldrb.w	r0, [lr, #1]
9001c7d8:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
9001c7dc:	fb15 f406 	smulbb	r4, r5, r6
9001c7e0:	ea4f 430c 	mov.w	r3, ip, lsl #16
9001c7e4:	ea4f 4e07 	mov.w	lr, r7, lsl #16
9001c7e8:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
9001c7ec:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
9001c7f0:	f3c4 04c7 	ubfx	r4, r4, #3, #8
9001c7f4:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
9001c7f8:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
9001c7fc:	ea43 0c0c 	orr.w	ip, r3, ip
9001c800:	f1c6 0310 	rsb	r3, r6, #16
9001c804:	ea4e 0707 	orr.w	r7, lr, r7
9001c808:	ebc4 0646 	rsb	r6, r4, r6, lsl #1
9001c80c:	1b5b      	subs	r3, r3, r5
9001c80e:	ebc4 0545 	rsb	r5, r4, r5, lsl #1
9001c812:	eb04 0343 	add.w	r3, r4, r3, lsl #1
9001c816:	437d      	muls	r5, r7
9001c818:	fb03 5c0c 	mla	ip, r3, ip, r5
9001c81c:	0403      	lsls	r3, r0, #16
9001c81e:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
9001c822:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
9001c826:	4318      	orrs	r0, r3
9001c828:	0413      	lsls	r3, r2, #16
9001c82a:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
9001c82e:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
9001c832:	fb04 c000 	mla	r0, r4, r0, ip
9001c836:	4313      	orrs	r3, r2
9001c838:	fb06 0003 	mla	r0, r6, r3, r0
9001c83c:	0d43      	lsrs	r3, r0, #21
9001c83e:	0940      	lsrs	r0, r0, #5
9001c840:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9001c844:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
9001c848:	4318      	orrs	r0, r3
9001c84a:	8008      	strh	r0, [r1, #0]
9001c84c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
9001c850:	4684      	mov	ip, r0
9001c852:	e7a0      	b.n	9001c796 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x3a>
9001c854:	4607      	mov	r7, r0
9001c856:	4684      	mov	ip, r0
9001c858:	e7a7      	b.n	9001c7aa <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4e>
9001c85a:	4607      	mov	r7, r0
9001c85c:	e7a5      	b.n	9001c7aa <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4e>
9001c85e:	4602      	mov	r2, r0
9001c860:	e7b2      	b.n	9001c7c8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x6c>
9001c862:	4602      	mov	r2, r0
9001c864:	e7ba      	b.n	9001c7dc <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>

9001c866 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
9001c866:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001c86a:	b093      	sub	sp, #76	; 0x4c
9001c86c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
9001c870:	920f      	str	r2, [sp, #60]	; 0x3c
9001c872:	9a21      	ldr	r2, [sp, #132]	; 0x84
9001c874:	9010      	str	r0, [sp, #64]	; 0x40
9001c876:	9108      	str	r1, [sp, #32]
9001c878:	6850      	ldr	r0, [r2, #4]
9001c87a:	9306      	str	r3, [sp, #24]
9001c87c:	6812      	ldr	r2, [r2, #0]
9001c87e:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
9001c882:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	; 0x74
9001c886:	fb00 1303 	mla	r3, r0, r3, r1
9001c88a:	eb02 0943 	add.w	r9, r2, r3, lsl #1
9001c88e:	9b24      	ldr	r3, [sp, #144]	; 0x90
9001c890:	681b      	ldr	r3, [r3, #0]
9001c892:	9307      	str	r3, [sp, #28]
9001c894:	9b24      	ldr	r3, [sp, #144]	; 0x90
9001c896:	685f      	ldr	r7, [r3, #4]
9001c898:	3704      	adds	r7, #4
9001c89a:	9b08      	ldr	r3, [sp, #32]
9001c89c:	2b00      	cmp	r3, #0
9001c89e:	dc03      	bgt.n	9001c8a8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
9001c8a0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
9001c8a2:	2b00      	cmp	r3, #0
9001c8a4:	f340 81b2 	ble.w	9001cc0c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
9001c8a8:	9b24      	ldr	r3, [sp, #144]	; 0x90
9001c8aa:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
9001c8ae:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
9001c8b2:	1e48      	subs	r0, r1, #1
9001c8b4:	f102 3cff 	add.w	ip, r2, #4294967295
9001c8b8:	9b06      	ldr	r3, [sp, #24]
9001c8ba:	2b00      	cmp	r3, #0
9001c8bc:	f340 80a9 	ble.w	9001ca12 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
9001c8c0:	ea5f 4e24 	movs.w	lr, r4, asr #16
9001c8c4:	ea4f 4326 	mov.w	r3, r6, asr #16
9001c8c8:	d406      	bmi.n	9001c8d8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
9001c8ca:	4586      	cmp	lr, r0
9001c8cc:	da04      	bge.n	9001c8d8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
9001c8ce:	2b00      	cmp	r3, #0
9001c8d0:	db02      	blt.n	9001c8d8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
9001c8d2:	4563      	cmp	r3, ip
9001c8d4:	f2c0 809e 	blt.w	9001ca14 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
9001c8d8:	f11e 0e01 	adds.w	lr, lr, #1
9001c8dc:	f100 808f 	bmi.w	9001c9fe <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
9001c8e0:	4571      	cmp	r1, lr
9001c8e2:	f2c0 808c 	blt.w	9001c9fe <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
9001c8e6:	3301      	adds	r3, #1
9001c8e8:	f100 8089 	bmi.w	9001c9fe <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
9001c8ec:	429a      	cmp	r2, r3
9001c8ee:	f2c0 8086 	blt.w	9001c9fe <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
9001c8f2:	f8dd b018 	ldr.w	fp, [sp, #24]
9001c8f6:	46c8      	mov	r8, r9
9001c8f8:	f1bb 0f00 	cmp.w	fp, #0
9001c8fc:	f340 80a6 	ble.w	9001ca4c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
9001c900:	9a24      	ldr	r2, [sp, #144]	; 0x90
9001c902:	ea4f 4c26 	mov.w	ip, r6, asr #16
9001c906:	9b24      	ldr	r3, [sp, #144]	; 0x90
9001c908:	f3c4 3003 	ubfx	r0, r4, #12, #4
9001c90c:	f8d2 e00c 	ldr.w	lr, [r2, #12]
9001c910:	1422      	asrs	r2, r4, #16
9001c912:	f3c6 3103 	ubfx	r1, r6, #12, #4
9001c916:	689b      	ldr	r3, [r3, #8]
9001c918:	f100 80e3 	bmi.w	9001cae2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
9001c91c:	f103 3aff 	add.w	sl, r3, #4294967295
9001c920:	4552      	cmp	r2, sl
9001c922:	f280 80de 	bge.w	9001cae2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
9001c926:	f1bc 0f00 	cmp.w	ip, #0
9001c92a:	f2c0 80da 	blt.w	9001cae2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
9001c92e:	f10e 3aff 	add.w	sl, lr, #4294967295
9001c932:	45d4      	cmp	ip, sl
9001c934:	f280 80d5 	bge.w	9001cae2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
9001c938:	b21b      	sxth	r3, r3
9001c93a:	9d07      	ldr	r5, [sp, #28]
9001c93c:	fb0c 2203 	mla	r2, ip, r3, r2
9001c940:	eb05 0a02 	add.w	sl, r5, r2
9001c944:	5caa      	ldrb	r2, [r5, r2]
9001c946:	f837 e012 	ldrh.w	lr, [r7, r2, lsl #1]
9001c94a:	2800      	cmp	r0, #0
9001c94c:	f000 80c0 	beq.w	9001cad0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
9001c950:	f89a 2001 	ldrb.w	r2, [sl, #1]
9001c954:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
9001c958:	920b      	str	r2, [sp, #44]	; 0x2c
9001c95a:	b151      	cbz	r1, 9001c972 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
9001c95c:	eb0a 0203 	add.w	r2, sl, r3
9001c960:	f81a 3003 	ldrb.w	r3, [sl, r3]
9001c964:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
9001c968:	9309      	str	r3, [sp, #36]	; 0x24
9001c96a:	7853      	ldrb	r3, [r2, #1]
9001c96c:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
9001c970:	930c      	str	r3, [sp, #48]	; 0x30
9001c972:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
9001c974:	fb10 f201 	smulbb	r2, r0, r1
9001c978:	9d0c      	ldr	r5, [sp, #48]	; 0x30
9001c97a:	ea4f 4c03 	mov.w	ip, r3, lsl #16
9001c97e:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
9001c982:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
9001c986:	10d2      	asrs	r2, r2, #3
9001c988:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
9001c98c:	ebc2 0a40 	rsb	sl, r2, r0, lsl #1
9001c990:	ea4c 0c03 	orr.w	ip, ip, r3
9001c994:	9b0c      	ldr	r3, [sp, #48]	; 0x30
9001c996:	041b      	lsls	r3, r3, #16
9001c998:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
9001c99c:	432b      	orrs	r3, r5
9001c99e:	4353      	muls	r3, r2
9001c9a0:	fb0a 330c 	mla	r3, sl, ip, r3
9001c9a4:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
9001c9a8:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
9001c9ac:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
9001c9b0:	ea4c 0e0e 	orr.w	lr, ip, lr
9001c9b4:	f1c1 0c10 	rsb	ip, r1, #16
9001c9b8:	ebac 0c00 	sub.w	ip, ip, r0
9001c9bc:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
9001c9c0:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
9001c9c4:	fb0c 3c0e 	mla	ip, ip, lr, r3
9001c9c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001c9ca:	0418      	lsls	r0, r3, #16
9001c9cc:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
9001c9d0:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
9001c9d4:	4318      	orrs	r0, r3
9001c9d6:	fb02 c200 	mla	r2, r2, r0, ip
9001c9da:	0d53      	lsrs	r3, r2, #21
9001c9dc:	0952      	lsrs	r2, r2, #5
9001c9de:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9001c9e2:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
9001c9e6:	431a      	orrs	r2, r3
9001c9e8:	f8a8 2000 	strh.w	r2, [r8]
9001c9ec:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
9001c9ee:	f108 0802 	add.w	r8, r8, #2
9001c9f2:	f10b 3bff 	add.w	fp, fp, #4294967295
9001c9f6:	441c      	add	r4, r3
9001c9f8:	9b20      	ldr	r3, [sp, #128]	; 0x80
9001c9fa:	441e      	add	r6, r3
9001c9fc:	e77c      	b.n	9001c8f8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
9001c9fe:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
9001ca00:	f109 0902 	add.w	r9, r9, #2
9001ca04:	441c      	add	r4, r3
9001ca06:	9b20      	ldr	r3, [sp, #128]	; 0x80
9001ca08:	441e      	add	r6, r3
9001ca0a:	9b06      	ldr	r3, [sp, #24]
9001ca0c:	3b01      	subs	r3, #1
9001ca0e:	9306      	str	r3, [sp, #24]
9001ca10:	e752      	b.n	9001c8b8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
9001ca12:	d020      	beq.n	9001ca56 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
9001ca14:	9b06      	ldr	r3, [sp, #24]
9001ca16:	981f      	ldr	r0, [sp, #124]	; 0x7c
9001ca18:	3b01      	subs	r3, #1
9001ca1a:	fb00 4003 	mla	r0, r0, r3, r4
9001ca1e:	1400      	asrs	r0, r0, #16
9001ca20:	f53f af67 	bmi.w	9001c8f2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
9001ca24:	3901      	subs	r1, #1
9001ca26:	4288      	cmp	r0, r1
9001ca28:	f6bf af63 	bge.w	9001c8f2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
9001ca2c:	9920      	ldr	r1, [sp, #128]	; 0x80
9001ca2e:	fb01 6303 	mla	r3, r1, r3, r6
9001ca32:	141b      	asrs	r3, r3, #16
9001ca34:	f53f af5d 	bmi.w	9001c8f2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
9001ca38:	3a01      	subs	r2, #1
9001ca3a:	4293      	cmp	r3, r2
9001ca3c:	f6bf af59 	bge.w	9001c8f2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
9001ca40:	f8dd 8018 	ldr.w	r8, [sp, #24]
9001ca44:	46ca      	mov	sl, r9
9001ca46:	f1b8 0f00 	cmp.w	r8, #0
9001ca4a:	dc67      	bgt.n	9001cb1c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
9001ca4c:	9b06      	ldr	r3, [sp, #24]
9001ca4e:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
9001ca52:	eb09 0945 	add.w	r9, r9, r5, lsl #1
9001ca56:	9b08      	ldr	r3, [sp, #32]
9001ca58:	2b00      	cmp	r3, #0
9001ca5a:	f340 80d7 	ble.w	9001cc0c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
9001ca5e:	ee30 0a04 	vadd.f32	s0, s0, s8
9001ca62:	9b1c      	ldr	r3, [sp, #112]	; 0x70
9001ca64:	ee70 0aa4 	vadd.f32	s1, s1, s9
9001ca68:	eeb0 6a62 	vmov.f32	s12, s5
9001ca6c:	eec6 7a80 	vdiv.f32	s15, s13, s0
9001ca70:	ee31 1a05 	vadd.f32	s2, s2, s10
9001ca74:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
9001ca78:	ee16 4a10 	vmov	r4, s12
9001ca7c:	eeb0 6a43 	vmov.f32	s12, s6
9001ca80:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
9001ca84:	ee16 6a10 	vmov	r6, s12
9001ca88:	ee20 7aa7 	vmul.f32	s14, s1, s15
9001ca8c:	ee61 7a27 	vmul.f32	s15, s2, s15
9001ca90:	ee77 2a62 	vsub.f32	s5, s14, s5
9001ca94:	ee37 3ac3 	vsub.f32	s6, s15, s6
9001ca98:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9001ca9c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9001caa0:	ee12 2a90 	vmov	r2, s5
9001caa4:	eef0 2a47 	vmov.f32	s5, s14
9001caa8:	fb92 f3f3 	sdiv	r3, r2, r3
9001caac:	ee13 2a10 	vmov	r2, s6
9001cab0:	931f      	str	r3, [sp, #124]	; 0x7c
9001cab2:	9b1c      	ldr	r3, [sp, #112]	; 0x70
9001cab4:	eeb0 3a67 	vmov.f32	s6, s15
9001cab8:	fb92 f3f3 	sdiv	r3, r2, r3
9001cabc:	9320      	str	r3, [sp, #128]	; 0x80
9001cabe:	9b08      	ldr	r3, [sp, #32]
9001cac0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
9001cac2:	3b01      	subs	r3, #1
9001cac4:	9308      	str	r3, [sp, #32]
9001cac6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
9001cac8:	bf08      	it	eq
9001caca:	4613      	moveq	r3, r2
9001cacc:	9306      	str	r3, [sp, #24]
9001cace:	e6e4      	b.n	9001c89a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
9001cad0:	2900      	cmp	r1, #0
9001cad2:	f43f af4e 	beq.w	9001c972 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
9001cad6:	f81a 3003 	ldrb.w	r3, [sl, r3]
9001cada:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
9001cade:	9309      	str	r3, [sp, #36]	; 0x24
9001cae0:	e747      	b.n	9001c972 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
9001cae2:	f112 0a01 	adds.w	sl, r2, #1
9001cae6:	d481      	bmi.n	9001c9ec <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
9001cae8:	4553      	cmp	r3, sl
9001caea:	f6ff af7f 	blt.w	9001c9ec <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
9001caee:	f11c 0a01 	adds.w	sl, ip, #1
9001caf2:	f53f af7b 	bmi.w	9001c9ec <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
9001caf6:	45d6      	cmp	lr, sl
9001caf8:	f6ff af78 	blt.w	9001c9ec <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
9001cafc:	b21b      	sxth	r3, r3
9001cafe:	e9cd 2c02 	strd	r2, ip, [sp, #8]
9001cb02:	fa0f f28e 	sxth.w	r2, lr
9001cb06:	9300      	str	r3, [sp, #0]
9001cb08:	463b      	mov	r3, r7
9001cb0a:	9201      	str	r2, [sp, #4]
9001cb0c:	9a07      	ldr	r2, [sp, #28]
9001cb0e:	e9cd 0104 	strd	r0, r1, [sp, #16]
9001cb12:	4641      	mov	r1, r8
9001cb14:	9810      	ldr	r0, [sp, #64]	; 0x40
9001cb16:	f7ff fe21 	bl	9001c75c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
9001cb1a:	e767      	b.n	9001c9ec <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
9001cb1c:	9b24      	ldr	r3, [sp, #144]	; 0x90
9001cb1e:	1422      	asrs	r2, r4, #16
9001cb20:	1431      	asrs	r1, r6, #16
9001cb22:	9d07      	ldr	r5, [sp, #28]
9001cb24:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
9001cb28:	f3c4 3e03 	ubfx	lr, r4, #12, #4
9001cb2c:	f3c6 3003 	ubfx	r0, r6, #12, #4
9001cb30:	fb03 2101 	mla	r1, r3, r1, r2
9001cb34:	9a07      	ldr	r2, [sp, #28]
9001cb36:	440a      	add	r2, r1
9001cb38:	5c69      	ldrb	r1, [r5, r1]
9001cb3a:	f837 1011 	ldrh.w	r1, [r7, r1, lsl #1]
9001cb3e:	f1be 0f00 	cmp.w	lr, #0
9001cb42:	d05c      	beq.n	9001cbfe <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x398>
9001cb44:	f892 c001 	ldrb.w	ip, [r2, #1]
9001cb48:	f837 501c 	ldrh.w	r5, [r7, ip, lsl #1]
9001cb4c:	950d      	str	r5, [sp, #52]	; 0x34
9001cb4e:	b150      	cbz	r0, 9001cb66 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
9001cb50:	eb02 0c03 	add.w	ip, r2, r3
9001cb54:	5cd3      	ldrb	r3, [r2, r3]
9001cb56:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
9001cb5a:	930a      	str	r3, [sp, #40]	; 0x28
9001cb5c:	f89c 3001 	ldrb.w	r3, [ip, #1]
9001cb60:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
9001cb64:	930e      	str	r3, [sp, #56]	; 0x38
9001cb66:	9b0d      	ldr	r3, [sp, #52]	; 0x34
9001cb68:	fb1e f200 	smulbb	r2, lr, r0
9001cb6c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
9001cb6e:	f108 38ff 	add.w	r8, r8, #4294967295
9001cb72:	ea4f 4c03 	mov.w	ip, r3, lsl #16
9001cb76:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
9001cb7a:	10d2      	asrs	r2, r2, #3
9001cb7c:	f425 6bfc 	bic.w	fp, r5, #2016	; 0x7e0
9001cb80:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
9001cb84:	ea4c 0c03 	orr.w	ip, ip, r3
9001cb88:	ebc2 034e 	rsb	r3, r2, lr, lsl #1
9001cb8c:	9311      	str	r3, [sp, #68]	; 0x44
9001cb8e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001cb90:	9d11      	ldr	r5, [sp, #68]	; 0x44
9001cb92:	041b      	lsls	r3, r3, #16
9001cb94:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
9001cb98:	ea43 030b 	orr.w	r3, r3, fp
9001cb9c:	ea4f 4b01 	mov.w	fp, r1, lsl #16
9001cba0:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
9001cba4:	4353      	muls	r3, r2
9001cba6:	fb05 3c0c 	mla	ip, r5, ip, r3
9001cbaa:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
9001cbae:	ea43 0b01 	orr.w	fp, r3, r1
9001cbb2:	f1c0 0110 	rsb	r1, r0, #16
9001cbb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
9001cbb8:	eba1 0e0e 	sub.w	lr, r1, lr
9001cbbc:	eb02 0e4e 	add.w	lr, r2, lr, lsl #1
9001cbc0:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
9001cbc4:	fb0e cc0b 	mla	ip, lr, fp, ip
9001cbc8:	ea4f 4b03 	mov.w	fp, r3, lsl #16
9001cbcc:	f423 6efc 	bic.w	lr, r3, #2016	; 0x7e0
9001cbd0:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
9001cbd4:	ea4b 0e0e 	orr.w	lr, fp, lr
9001cbd8:	fb02 cc0e 	mla	ip, r2, lr, ip
9001cbdc:	ea4f 535c 	mov.w	r3, ip, lsr #21
9001cbe0:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
9001cbe4:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9001cbe8:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
9001cbec:	ea43 0c0c 	orr.w	ip, r3, ip
9001cbf0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
9001cbf2:	441c      	add	r4, r3
9001cbf4:	9b20      	ldr	r3, [sp, #128]	; 0x80
9001cbf6:	f82a cb02 	strh.w	ip, [sl], #2
9001cbfa:	441e      	add	r6, r3
9001cbfc:	e723      	b.n	9001ca46 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
9001cbfe:	2800      	cmp	r0, #0
9001cc00:	d0b1      	beq.n	9001cb66 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
9001cc02:	5cd3      	ldrb	r3, [r2, r3]
9001cc04:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
9001cc08:	930a      	str	r3, [sp, #40]	; 0x28
9001cc0a:	e7ac      	b.n	9001cb66 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
9001cc0c:	b013      	add	sp, #76	; 0x4c
9001cc0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

9001cc12 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>:
9001cc12:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001cc16:	880d      	ldrh	r5, [r1, #0]
9001cc18:	b087      	sub	sp, #28
9001cc1a:	10ef      	asrs	r7, r5, #3
9001cc1c:	9103      	str	r1, [sp, #12]
9001cc1e:	ea4f 2a25 	mov.w	sl, r5, asr #8
9001cc22:	f9bd 9040 	ldrsh.w	r9, [sp, #64]	; 0x40
9001cc26:	00ed      	lsls	r5, r5, #3
9001cc28:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
9001cc2c:	f00a 0af8 	and.w	sl, sl, #248	; 0xf8
9001cc30:	f9bd b044 	ldrsh.w	fp, [sp, #68]	; 0x44
9001cc34:	b2ed      	uxtb	r5, r5
9001cc36:	9701      	str	r7, [sp, #4]
9001cc38:	f89d 4050 	ldrb.w	r4, [sp, #80]	; 0x50
9001cc3c:	9502      	str	r5, [sp, #8]
9001cc3e:	9d01      	ldr	r5, [sp, #4]
9001cc40:	9902      	ldr	r1, [sp, #8]
9001cc42:	022d      	lsls	r5, r5, #8
9001cc44:	f89d e054 	ldrb.w	lr, [sp, #84]	; 0x54
9001cc48:	f89d 8058 	ldrb.w	r8, [sp, #88]	; 0x58
9001cc4c:	ea45 450a 	orr.w	r5, r5, sl, lsl #16
9001cc50:	e9dd 0612 	ldrd	r0, r6, [sp, #72]	; 0x48
9001cc54:	430d      	orrs	r5, r1
9001cc56:	fb06 0709 	mla	r7, r6, r9, r0
9001cc5a:	2e00      	cmp	r6, #0
9001cc5c:	9505      	str	r5, [sp, #20]
9001cc5e:	eb02 0c07 	add.w	ip, r2, r7
9001cc62:	f2c0 80b6 	blt.w	9001cdd2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c0>
9001cc66:	45b3      	cmp	fp, r6
9001cc68:	f340 80b3 	ble.w	9001cdd2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c0>
9001cc6c:	2800      	cmp	r0, #0
9001cc6e:	f2c0 80ae 	blt.w	9001cdce <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1bc>
9001cc72:	4581      	cmp	r9, r0
9001cc74:	f340 80ab 	ble.w	9001cdce <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1bc>
9001cc78:	5dd7      	ldrb	r7, [r2, r7]
9001cc7a:	eb07 0747 	add.w	r7, r7, r7, lsl #1
9001cc7e:	441f      	add	r7, r3
9001cc80:	1c42      	adds	r2, r0, #1
9001cc82:	f100 80a9 	bmi.w	9001cdd8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
9001cc86:	4591      	cmp	r9, r2
9001cc88:	f340 80a6 	ble.w	9001cdd8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
9001cc8c:	2c00      	cmp	r4, #0
9001cc8e:	f000 80a3 	beq.w	9001cdd8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
9001cc92:	f89c 5001 	ldrb.w	r5, [ip, #1]
9001cc96:	eb05 0545 	add.w	r5, r5, r5, lsl #1
9001cc9a:	441d      	add	r5, r3
9001cc9c:	3601      	adds	r6, #1
9001cc9e:	f100 809f 	bmi.w	9001cde0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
9001cca2:	45b3      	cmp	fp, r6
9001cca4:	f340 809c 	ble.w	9001cde0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
9001cca8:	f1be 0f00 	cmp.w	lr, #0
9001ccac:	f000 8098 	beq.w	9001cde0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
9001ccb0:	2800      	cmp	r0, #0
9001ccb2:	f2c0 8093 	blt.w	9001cddc <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ca>
9001ccb6:	4581      	cmp	r9, r0
9001ccb8:	f340 8090 	ble.w	9001cddc <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ca>
9001ccbc:	f81c 6009 	ldrb.w	r6, [ip, r9]
9001ccc0:	eb06 0646 	add.w	r6, r6, r6, lsl #1
9001ccc4:	441e      	add	r6, r3
9001ccc6:	3001      	adds	r0, #1
9001ccc8:	f100 808d 	bmi.w	9001cde6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
9001cccc:	4581      	cmp	r9, r0
9001ccce:	f340 808a 	ble.w	9001cde6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
9001ccd2:	2c00      	cmp	r4, #0
9001ccd4:	f000 8087 	beq.w	9001cde6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
9001ccd8:	44e1      	add	r9, ip
9001ccda:	f899 2001 	ldrb.w	r2, [r9, #1]
9001ccde:	eb02 0242 	add.w	r2, r2, r2, lsl #1
9001cce2:	4413      	add	r3, r2
9001cce4:	b2a4      	uxth	r4, r4
9001cce6:	f897 c002 	ldrb.w	ip, [r7, #2]
9001ccea:	fa1f fe8e 	uxth.w	lr, lr
9001ccee:	9901      	ldr	r1, [sp, #4]
9001ccf0:	fb04 fb0e 	mul.w	fp, r4, lr
9001ccf4:	0124      	lsls	r4, r4, #4
9001ccf6:	ebcb 1e0e 	rsb	lr, fp, lr, lsl #4
9001ccfa:	f5c4 7980 	rsb	r9, r4, #256	; 0x100
9001ccfe:	eba4 040b 	sub.w	r4, r4, fp
9001cd02:	fa1f f08e 	uxth.w	r0, lr
9001cd06:	b2a2      	uxth	r2, r4
9001cd08:	78ac      	ldrb	r4, [r5, #2]
9001cd0a:	eba9 0900 	sub.w	r9, r9, r0
9001cd0e:	fa1f fe88 	uxth.w	lr, r8
9001cd12:	4354      	muls	r4, r2
9001cd14:	ea6f 0808 	mvn.w	r8, r8
9001cd18:	fa1f f989 	uxth.w	r9, r9
9001cd1c:	fa5f f888 	uxtb.w	r8, r8
9001cd20:	fb09 440c 	mla	r4, r9, ip, r4
9001cd24:	f896 c002 	ldrb.w	ip, [r6, #2]
9001cd28:	fb1a fa08 	smulbb	sl, sl, r8
9001cd2c:	fb00 440c 	mla	r4, r0, ip, r4
9001cd30:	f893 c002 	ldrb.w	ip, [r3, #2]
9001cd34:	fb0b 4c0c 	mla	ip, fp, ip, r4
9001cd38:	787c      	ldrb	r4, [r7, #1]
9001cd3a:	783f      	ldrb	r7, [r7, #0]
9001cd3c:	f3cc 2c07 	ubfx	ip, ip, #8, #8
9001cd40:	fb0c ac0e 	mla	ip, ip, lr, sl
9001cd44:	f895 a001 	ldrb.w	sl, [r5, #1]
9001cd48:	782d      	ldrb	r5, [r5, #0]
9001cd4a:	fb02 fa0a 	mul.w	sl, r2, sl
9001cd4e:	fa1f fc8c 	uxth.w	ip, ip
9001cd52:	436a      	muls	r2, r5
9001cd54:	7835      	ldrb	r5, [r6, #0]
9001cd56:	fb09 aa04 	mla	sl, r9, r4, sl
9001cd5a:	7874      	ldrb	r4, [r6, #1]
9001cd5c:	fb09 2207 	mla	r2, r9, r7, r2
9001cd60:	fb00 aa04 	mla	sl, r0, r4, sl
9001cd64:	785c      	ldrb	r4, [r3, #1]
9001cd66:	fb00 2005 	mla	r0, r0, r5, r2
9001cd6a:	781b      	ldrb	r3, [r3, #0]
9001cd6c:	fb0b a404 	mla	r4, fp, r4, sl
9001cd70:	fb11 fa08 	smulbb	sl, r1, r8
9001cd74:	fb0b 0b03 	mla	fp, fp, r3, r0
9001cd78:	9b02      	ldr	r3, [sp, #8]
9001cd7a:	f3c4 2407 	ubfx	r4, r4, #8, #8
9001cd7e:	fb13 f808 	smulbb	r8, r3, r8
9001cd82:	f3cb 2b07 	ubfx	fp, fp, #8, #8
9001cd86:	fb04 a40e 	mla	r4, r4, lr, sl
9001cd8a:	f10c 0301 	add.w	r3, ip, #1
9001cd8e:	fb0b 8e0e 	mla	lr, fp, lr, r8
9001cd92:	b2a4      	uxth	r4, r4
9001cd94:	fa1f fe8e 	uxth.w	lr, lr
9001cd98:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
9001cd9c:	f104 0a01 	add.w	sl, r4, #1
9001cda0:	f40c 4378 	and.w	r3, ip, #63488	; 0xf800
9001cda4:	f10e 0c01 	add.w	ip, lr, #1
9001cda8:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
9001cdac:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
9001cdb0:	0964      	lsrs	r4, r4, #5
9001cdb2:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
9001cdb6:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
9001cdba:	ea4c 0c03 	orr.w	ip, ip, r3
9001cdbe:	9b03      	ldr	r3, [sp, #12]
9001cdc0:	ea4c 0c04 	orr.w	ip, ip, r4
9001cdc4:	f8a3 c000 	strh.w	ip, [r3]
9001cdc8:	b007      	add	sp, #28
9001cdca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001cdce:	af05      	add	r7, sp, #20
9001cdd0:	e756      	b.n	9001cc80 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x6e>
9001cdd2:	ad05      	add	r5, sp, #20
9001cdd4:	462f      	mov	r7, r5
9001cdd6:	e761      	b.n	9001cc9c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x8a>
9001cdd8:	ad05      	add	r5, sp, #20
9001cdda:	e75f      	b.n	9001cc9c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x8a>
9001cddc:	ae05      	add	r6, sp, #20
9001cdde:	e772      	b.n	9001ccc6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xb4>
9001cde0:	ab05      	add	r3, sp, #20
9001cde2:	461e      	mov	r6, r3
9001cde4:	e77e      	b.n	9001cce4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd2>
9001cde6:	ab05      	add	r3, sp, #20
9001cde8:	e77c      	b.n	9001cce4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd2>

9001cdea <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
9001cdea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001cdee:	b095      	sub	sp, #84	; 0x54
9001cdf0:	9212      	str	r2, [sp, #72]	; 0x48
9001cdf2:	9309      	str	r3, [sp, #36]	; 0x24
9001cdf4:	9a23      	ldr	r2, [sp, #140]	; 0x8c
9001cdf6:	f89d 309c 	ldrb.w	r3, [sp, #156]	; 0x9c
9001cdfa:	9013      	str	r0, [sp, #76]	; 0x4c
9001cdfc:	930f      	str	r3, [sp, #60]	; 0x3c
9001cdfe:	6850      	ldr	r0, [r2, #4]
9001ce00:	910e      	str	r1, [sp, #56]	; 0x38
9001ce02:	6812      	ldr	r2, [r2, #0]
9001ce04:	e9dd 1324 	ldrd	r1, r3, [sp, #144]	; 0x90
9001ce08:	fb00 1303 	mla	r3, r0, r3, r1
9001ce0c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
9001ce10:	930a      	str	r3, [sp, #40]	; 0x28
9001ce12:	9b26      	ldr	r3, [sp, #152]	; 0x98
9001ce14:	681b      	ldr	r3, [r3, #0]
9001ce16:	930d      	str	r3, [sp, #52]	; 0x34
9001ce18:	9b26      	ldr	r3, [sp, #152]	; 0x98
9001ce1a:	685c      	ldr	r4, [r3, #4]
9001ce1c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
9001ce1e:	3404      	adds	r4, #4
9001ce20:	43db      	mvns	r3, r3
9001ce22:	b2db      	uxtb	r3, r3
9001ce24:	930b      	str	r3, [sp, #44]	; 0x2c
9001ce26:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001ce28:	2b00      	cmp	r3, #0
9001ce2a:	dc03      	bgt.n	9001ce34 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
9001ce2c:	9b12      	ldr	r3, [sp, #72]	; 0x48
9001ce2e:	2b00      	cmp	r3, #0
9001ce30:	f340 8255 	ble.w	9001d2de <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f4>
9001ce34:	9b26      	ldr	r3, [sp, #152]	; 0x98
9001ce36:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
9001ce3a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
9001ce3e:	1e48      	subs	r0, r1, #1
9001ce40:	1e55      	subs	r5, r2, #1
9001ce42:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001ce44:	2b00      	cmp	r3, #0
9001ce46:	f340 80f9 	ble.w	9001d03c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
9001ce4a:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
9001ce4c:	9b20      	ldr	r3, [sp, #128]	; 0x80
9001ce4e:	1436      	asrs	r6, r6, #16
9001ce50:	ea4f 4323 	mov.w	r3, r3, asr #16
9001ce54:	d406      	bmi.n	9001ce64 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
9001ce56:	4286      	cmp	r6, r0
9001ce58:	da04      	bge.n	9001ce64 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
9001ce5a:	2b00      	cmp	r3, #0
9001ce5c:	db02      	blt.n	9001ce64 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
9001ce5e:	42ab      	cmp	r3, r5
9001ce60:	f2c0 80ed 	blt.w	9001d03e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
9001ce64:	3601      	adds	r6, #1
9001ce66:	f100 80da 	bmi.w	9001d01e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
9001ce6a:	42b1      	cmp	r1, r6
9001ce6c:	f2c0 80d7 	blt.w	9001d01e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
9001ce70:	3301      	adds	r3, #1
9001ce72:	f100 80d4 	bmi.w	9001d01e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
9001ce76:	429a      	cmp	r2, r3
9001ce78:	f2c0 80d1 	blt.w	9001d01e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
9001ce7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001ce7e:	9311      	str	r3, [sp, #68]	; 0x44
9001ce80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
9001ce82:	930c      	str	r3, [sp, #48]	; 0x30
9001ce84:	9b11      	ldr	r3, [sp, #68]	; 0x44
9001ce86:	2b00      	cmp	r3, #0
9001ce88:	f340 80fa 	ble.w	9001d080 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
9001ce8c:	9826      	ldr	r0, [sp, #152]	; 0x98
9001ce8e:	9b20      	ldr	r3, [sp, #128]	; 0x80
9001ce90:	9a20      	ldr	r2, [sp, #128]	; 0x80
9001ce92:	68c6      	ldr	r6, [r0, #12]
9001ce94:	141d      	asrs	r5, r3, #16
9001ce96:	981f      	ldr	r0, [sp, #124]	; 0x7c
9001ce98:	f3c2 3103 	ubfx	r1, r2, #12, #4
9001ce9c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
9001ce9e:	9a26      	ldr	r2, [sp, #152]	; 0x98
9001cea0:	1400      	asrs	r0, r0, #16
9001cea2:	f3c3 3303 	ubfx	r3, r3, #12, #4
9001cea6:	6892      	ldr	r2, [r2, #8]
9001cea8:	f100 813e 	bmi.w	9001d128 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
9001ceac:	1e57      	subs	r7, r2, #1
9001ceae:	42b8      	cmp	r0, r7
9001ceb0:	f280 813a 	bge.w	9001d128 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
9001ceb4:	2d00      	cmp	r5, #0
9001ceb6:	f2c0 8137 	blt.w	9001d128 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
9001ceba:	1e77      	subs	r7, r6, #1
9001cebc:	42bd      	cmp	r5, r7
9001cebe:	f280 8133 	bge.w	9001d128 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
9001cec2:	b212      	sxth	r2, r2
9001cec4:	fb05 0002 	mla	r0, r5, r2, r0
9001cec8:	9d0d      	ldr	r5, [sp, #52]	; 0x34
9001ceca:	f815 a000 	ldrb.w	sl, [r5, r0]
9001cece:	182e      	adds	r6, r5, r0
9001ced0:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
9001ced4:	eb04 050a 	add.w	r5, r4, sl
9001ced8:	2b00      	cmp	r3, #0
9001ceda:	f000 8117 	beq.w	9001d10c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
9001cede:	f896 c001 	ldrb.w	ip, [r6, #1]
9001cee2:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
9001cee6:	44a4      	add	ip, r4
9001cee8:	2900      	cmp	r1, #0
9001ceea:	f000 8117 	beq.w	9001d11c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
9001ceee:	18b0      	adds	r0, r6, r2
9001cef0:	5cb2      	ldrb	r2, [r6, r2]
9001cef2:	7840      	ldrb	r0, [r0, #1]
9001cef4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
9001cef8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
9001cefc:	4422      	add	r2, r4
9001cefe:	4420      	add	r0, r4
9001cf00:	b29b      	uxth	r3, r3
9001cf02:	f89c 7002 	ldrb.w	r7, [ip, #2]
9001cf06:	b289      	uxth	r1, r1
9001cf08:	f895 b002 	ldrb.w	fp, [r5, #2]
9001cf0c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
9001cf0e:	fb03 f901 	mul.w	r9, r3, r1
9001cf12:	011b      	lsls	r3, r3, #4
9001cf14:	f8b6 e000 	ldrh.w	lr, [r6]
9001cf18:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
9001cf1c:	f5c3 7880 	rsb	r8, r3, #256	; 0x100
9001cf20:	eba3 0309 	sub.w	r3, r3, r9
9001cf24:	f8bd 603c 	ldrh.w	r6, [sp, #60]	; 0x3c
9001cf28:	b289      	uxth	r1, r1
9001cf2a:	f814 a00a 	ldrb.w	sl, [r4, sl]
9001cf2e:	b29b      	uxth	r3, r3
9001cf30:	eba8 0801 	sub.w	r8, r8, r1
9001cf34:	435f      	muls	r7, r3
9001cf36:	fa1f f888 	uxth.w	r8, r8
9001cf3a:	9310      	str	r3, [sp, #64]	; 0x40
9001cf3c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
9001cf3e:	fb08 770b 	mla	r7, r8, fp, r7
9001cf42:	f892 b002 	ldrb.w	fp, [r2, #2]
9001cf46:	fb01 770b 	mla	r7, r1, fp, r7
9001cf4a:	f890 b002 	ldrb.w	fp, [r0, #2]
9001cf4e:	fb09 770b 	mla	r7, r9, fp, r7
9001cf52:	ea4f 2b2e 	mov.w	fp, lr, asr #8
9001cf56:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
9001cf5a:	f3c7 2707 	ubfx	r7, r7, #8, #8
9001cf5e:	fb1b fb03 	smulbb	fp, fp, r3
9001cf62:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001cf64:	fb07 b706 	mla	r7, r7, r6, fp
9001cf68:	f895 b001 	ldrb.w	fp, [r5, #1]
9001cf6c:	f89c 5001 	ldrb.w	r5, [ip, #1]
9001cf70:	f89c c000 	ldrb.w	ip, [ip]
9001cf74:	b2bf      	uxth	r7, r7
9001cf76:	435d      	muls	r5, r3
9001cf78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
9001cf7a:	fb08 550b 	mla	r5, r8, fp, r5
9001cf7e:	f892 b001 	ldrb.w	fp, [r2, #1]
9001cf82:	fb01 550b 	mla	r5, r1, fp, r5
9001cf86:	f890 b001 	ldrb.w	fp, [r0, #1]
9001cf8a:	fb09 550b 	mla	r5, r9, fp, r5
9001cf8e:	ea4f 0bee 	mov.w	fp, lr, asr #3
9001cf92:	ea4f 0ece 	mov.w	lr, lr, lsl #3
9001cf96:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
9001cf9a:	f3c5 2507 	ubfx	r5, r5, #8, #8
9001cf9e:	fa5f fe8e 	uxtb.w	lr, lr
9001cfa2:	fb1b fb03 	smulbb	fp, fp, r3
9001cfa6:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001cfa8:	fb03 f30c 	mul.w	r3, r3, ip
9001cfac:	f892 c000 	ldrb.w	ip, [r2]
9001cfb0:	fb05 b506 	mla	r5, r5, r6, fp
9001cfb4:	fb08 330a 	mla	r3, r8, sl, r3
9001cfb8:	b2ad      	uxth	r5, r5
9001cfba:	fb01 330c 	mla	r3, r1, ip, r3
9001cfbe:	f890 c000 	ldrb.w	ip, [r0]
9001cfc2:	f105 0b01 	add.w	fp, r5, #1
9001cfc6:	fb09 3c0c 	mla	ip, r9, ip, r3
9001cfca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
9001cfcc:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
9001cfd0:	fb1e fe03 	smulbb	lr, lr, r3
9001cfd4:	f3cc 2c07 	ubfx	ip, ip, #8, #8
9001cfd8:	1c7b      	adds	r3, r7, #1
9001cfda:	096d      	lsrs	r5, r5, #5
9001cfdc:	fb0c e606 	mla	r6, ip, r6, lr
9001cfe0:	eb03 2717 	add.w	r7, r3, r7, lsr #8
9001cfe4:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
9001cfe8:	b2b6      	uxth	r6, r6
9001cfea:	f407 4378 	and.w	r3, r7, #63488	; 0xf800
9001cfee:	1c77      	adds	r7, r6, #1
9001cff0:	eb07 2716 	add.w	r7, r7, r6, lsr #8
9001cff4:	f3c7 27c4 	ubfx	r7, r7, #11, #5
9001cff8:	431f      	orrs	r7, r3
9001cffa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
9001cffc:	433d      	orrs	r5, r7
9001cffe:	801d      	strh	r5, [r3, #0]
9001d000:	9b0c      	ldr	r3, [sp, #48]	; 0x30
9001d002:	9a21      	ldr	r2, [sp, #132]	; 0x84
9001d004:	3302      	adds	r3, #2
9001d006:	930c      	str	r3, [sp, #48]	; 0x30
9001d008:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
9001d00a:	4413      	add	r3, r2
9001d00c:	9a22      	ldr	r2, [sp, #136]	; 0x88
9001d00e:	931f      	str	r3, [sp, #124]	; 0x7c
9001d010:	9b20      	ldr	r3, [sp, #128]	; 0x80
9001d012:	4413      	add	r3, r2
9001d014:	9320      	str	r3, [sp, #128]	; 0x80
9001d016:	9b11      	ldr	r3, [sp, #68]	; 0x44
9001d018:	3b01      	subs	r3, #1
9001d01a:	9311      	str	r3, [sp, #68]	; 0x44
9001d01c:	e732      	b.n	9001ce84 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
9001d01e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
9001d020:	9e21      	ldr	r6, [sp, #132]	; 0x84
9001d022:	4433      	add	r3, r6
9001d024:	9e22      	ldr	r6, [sp, #136]	; 0x88
9001d026:	931f      	str	r3, [sp, #124]	; 0x7c
9001d028:	9b20      	ldr	r3, [sp, #128]	; 0x80
9001d02a:	4433      	add	r3, r6
9001d02c:	9320      	str	r3, [sp, #128]	; 0x80
9001d02e:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001d030:	3b01      	subs	r3, #1
9001d032:	9309      	str	r3, [sp, #36]	; 0x24
9001d034:	9b0a      	ldr	r3, [sp, #40]	; 0x28
9001d036:	3302      	adds	r3, #2
9001d038:	930a      	str	r3, [sp, #40]	; 0x28
9001d03a:	e702      	b.n	9001ce42 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
9001d03c:	d027      	beq.n	9001d08e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a4>
9001d03e:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001d040:	9821      	ldr	r0, [sp, #132]	; 0x84
9001d042:	3b01      	subs	r3, #1
9001d044:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
9001d046:	fb00 5003 	mla	r0, r0, r3, r5
9001d04a:	1400      	asrs	r0, r0, #16
9001d04c:	f53f af16 	bmi.w	9001ce7c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
9001d050:	3901      	subs	r1, #1
9001d052:	4288      	cmp	r0, r1
9001d054:	f6bf af12 	bge.w	9001ce7c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
9001d058:	9922      	ldr	r1, [sp, #136]	; 0x88
9001d05a:	9820      	ldr	r0, [sp, #128]	; 0x80
9001d05c:	fb01 0303 	mla	r3, r1, r3, r0
9001d060:	141b      	asrs	r3, r3, #16
9001d062:	f53f af0b 	bmi.w	9001ce7c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
9001d066:	3a01      	subs	r2, #1
9001d068:	4293      	cmp	r3, r2
9001d06a:	f6bf af07 	bge.w	9001ce7c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
9001d06e:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001d070:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
9001d074:	9311      	str	r3, [sp, #68]	; 0x44
9001d076:	9b0a      	ldr	r3, [sp, #40]	; 0x28
9001d078:	930c      	str	r3, [sp, #48]	; 0x30
9001d07a:	9b11      	ldr	r3, [sp, #68]	; 0x44
9001d07c:	2b00      	cmp	r3, #0
9001d07e:	dc70      	bgt.n	9001d162 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x378>
9001d080:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001d082:	9a0a      	ldr	r2, [sp, #40]	; 0x28
9001d084:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
9001d088:	eb02 0343 	add.w	r3, r2, r3, lsl #1
9001d08c:	930a      	str	r3, [sp, #40]	; 0x28
9001d08e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001d090:	2b00      	cmp	r3, #0
9001d092:	f340 8124 	ble.w	9001d2de <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f4>
9001d096:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
9001d09a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
9001d09c:	ee30 0a04 	vadd.f32	s0, s0, s8
9001d0a0:	ee70 0aa4 	vadd.f32	s1, s1, s9
9001d0a4:	eef0 6a62 	vmov.f32	s13, s5
9001d0a8:	eec7 7a00 	vdiv.f32	s15, s14, s0
9001d0ac:	ee31 1a05 	vadd.f32	s2, s2, s10
9001d0b0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9001d0b4:	edcd 6a1f 	vstr	s13, [sp, #124]	; 0x7c
9001d0b8:	eef0 6a43 	vmov.f32	s13, s6
9001d0bc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9001d0c0:	edcd 6a20 	vstr	s13, [sp, #128]	; 0x80
9001d0c4:	ee20 7aa7 	vmul.f32	s14, s1, s15
9001d0c8:	ee61 7a27 	vmul.f32	s15, s2, s15
9001d0cc:	ee77 2a62 	vsub.f32	s5, s14, s5
9001d0d0:	ee37 3ac3 	vsub.f32	s6, s15, s6
9001d0d4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9001d0d8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9001d0dc:	ee12 2a90 	vmov	r2, s5
9001d0e0:	eef0 2a47 	vmov.f32	s5, s14
9001d0e4:	fb92 f3f3 	sdiv	r3, r2, r3
9001d0e8:	ee13 2a10 	vmov	r2, s6
9001d0ec:	9321      	str	r3, [sp, #132]	; 0x84
9001d0ee:	9b1e      	ldr	r3, [sp, #120]	; 0x78
9001d0f0:	eeb0 3a67 	vmov.f32	s6, s15
9001d0f4:	fb92 f3f3 	sdiv	r3, r2, r3
9001d0f8:	9322      	str	r3, [sp, #136]	; 0x88
9001d0fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001d0fc:	9a12      	ldr	r2, [sp, #72]	; 0x48
9001d0fe:	3b01      	subs	r3, #1
9001d100:	930e      	str	r3, [sp, #56]	; 0x38
9001d102:	9b1e      	ldr	r3, [sp, #120]	; 0x78
9001d104:	bf08      	it	eq
9001d106:	4613      	moveq	r3, r2
9001d108:	9309      	str	r3, [sp, #36]	; 0x24
9001d10a:	e68c      	b.n	9001ce26 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
9001d10c:	b149      	cbz	r1, 9001d122 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x338>
9001d10e:	5cb2      	ldrb	r2, [r6, r2]
9001d110:	4628      	mov	r0, r5
9001d112:	eb02 0242 	add.w	r2, r2, r2, lsl #1
9001d116:	4422      	add	r2, r4
9001d118:	46ac      	mov	ip, r5
9001d11a:	e6f1      	b.n	9001cf00 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
9001d11c:	4628      	mov	r0, r5
9001d11e:	462a      	mov	r2, r5
9001d120:	e6ee      	b.n	9001cf00 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
9001d122:	4628      	mov	r0, r5
9001d124:	462a      	mov	r2, r5
9001d126:	e7f7      	b.n	9001d118 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
9001d128:	1c47      	adds	r7, r0, #1
9001d12a:	f53f af69 	bmi.w	9001d000 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
9001d12e:	42ba      	cmp	r2, r7
9001d130:	f6ff af66 	blt.w	9001d000 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
9001d134:	1c6f      	adds	r7, r5, #1
9001d136:	f53f af63 	bmi.w	9001d000 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
9001d13a:	42be      	cmp	r6, r7
9001d13c:	f6ff af60 	blt.w	9001d000 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
9001d140:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
9001d142:	b236      	sxth	r6, r6
9001d144:	b212      	sxth	r2, r2
9001d146:	9002      	str	r0, [sp, #8]
9001d148:	9601      	str	r6, [sp, #4]
9001d14a:	9200      	str	r2, [sp, #0]
9001d14c:	9813      	ldr	r0, [sp, #76]	; 0x4c
9001d14e:	e9cd 1705 	strd	r1, r7, [sp, #20]
9001d152:	e9cd 5303 	strd	r5, r3, [sp, #12]
9001d156:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
9001d15a:	4623      	mov	r3, r4
9001d15c:	f7ff fd59 	bl	9001cc12 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>
9001d160:	e74e      	b.n	9001d000 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
9001d162:	9a20      	ldr	r2, [sp, #128]	; 0x80
9001d164:	9820      	ldr	r0, [sp, #128]	; 0x80
9001d166:	f3c2 3103 	ubfx	r1, r2, #12, #4
9001d16a:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
9001d16c:	9a26      	ldr	r2, [sp, #152]	; 0x98
9001d16e:	1400      	asrs	r0, r0, #16
9001d170:	142d      	asrs	r5, r5, #16
9001d172:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
9001d174:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
9001d178:	f3c3 3303 	ubfx	r3, r3, #12, #4
9001d17c:	fb02 5000 	mla	r0, r2, r0, r5
9001d180:	9d0d      	ldr	r5, [sp, #52]	; 0x34
9001d182:	f815 9000 	ldrb.w	r9, [r5, r0]
9001d186:	182e      	adds	r6, r5, r0
9001d188:	eb09 0949 	add.w	r9, r9, r9, lsl #1
9001d18c:	eb04 0509 	add.w	r5, r4, r9
9001d190:	2b00      	cmp	r3, #0
9001d192:	f000 8096 	beq.w	9001d2c2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
9001d196:	7877      	ldrb	r7, [r6, #1]
9001d198:	eb07 0747 	add.w	r7, r7, r7, lsl #1
9001d19c:	4427      	add	r7, r4
9001d19e:	2900      	cmp	r1, #0
9001d1a0:	f000 8097 	beq.w	9001d2d2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e8>
9001d1a4:	18b0      	adds	r0, r6, r2
9001d1a6:	5cb2      	ldrb	r2, [r6, r2]
9001d1a8:	7840      	ldrb	r0, [r0, #1]
9001d1aa:	eb02 0242 	add.w	r2, r2, r2, lsl #1
9001d1ae:	eb00 0040 	add.w	r0, r0, r0, lsl #1
9001d1b2:	4422      	add	r2, r4
9001d1b4:	4420      	add	r0, r4
9001d1b6:	b29b      	uxth	r3, r3
9001d1b8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
9001d1ba:	b289      	uxth	r1, r1
9001d1bc:	f895 b002 	ldrb.w	fp, [r5, #2]
9001d1c0:	f8b6 c000 	ldrh.w	ip, [r6]
9001d1c4:	fb03 f801 	mul.w	r8, r3, r1
9001d1c8:	011b      	lsls	r3, r3, #4
9001d1ca:	78be      	ldrb	r6, [r7, #2]
9001d1cc:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
9001d1d0:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
9001d1d4:	eba3 0308 	sub.w	r3, r3, r8
9001d1d8:	f814 9009 	ldrb.w	r9, [r4, r9]
9001d1dc:	b289      	uxth	r1, r1
9001d1de:	b29b      	uxth	r3, r3
9001d1e0:	ebae 0e01 	sub.w	lr, lr, r1
9001d1e4:	435e      	muls	r6, r3
9001d1e6:	fa1f fe8e 	uxth.w	lr, lr
9001d1ea:	9310      	str	r3, [sp, #64]	; 0x40
9001d1ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
9001d1ee:	fb0e 660b 	mla	r6, lr, fp, r6
9001d1f2:	f892 b002 	ldrb.w	fp, [r2, #2]
9001d1f6:	fb01 660b 	mla	r6, r1, fp, r6
9001d1fa:	f890 b002 	ldrb.w	fp, [r0, #2]
9001d1fe:	fb08 660b 	mla	r6, r8, fp, r6
9001d202:	ea4f 2b2c 	mov.w	fp, ip, asr #8
9001d206:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
9001d20a:	f3c6 2607 	ubfx	r6, r6, #8, #8
9001d20e:	fb1b fb03 	smulbb	fp, fp, r3
9001d212:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001d214:	fb06 b60a 	mla	r6, r6, sl, fp
9001d218:	f895 b001 	ldrb.w	fp, [r5, #1]
9001d21c:	787d      	ldrb	r5, [r7, #1]
9001d21e:	783f      	ldrb	r7, [r7, #0]
9001d220:	b2b6      	uxth	r6, r6
9001d222:	435d      	muls	r5, r3
9001d224:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
9001d226:	fb0e 550b 	mla	r5, lr, fp, r5
9001d22a:	f892 b001 	ldrb.w	fp, [r2, #1]
9001d22e:	fb01 550b 	mla	r5, r1, fp, r5
9001d232:	f890 b001 	ldrb.w	fp, [r0, #1]
9001d236:	fb08 550b 	mla	r5, r8, fp, r5
9001d23a:	ea4f 0bec 	mov.w	fp, ip, asr #3
9001d23e:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
9001d242:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
9001d246:	f3c5 2507 	ubfx	r5, r5, #8, #8
9001d24a:	fa5f fc8c 	uxtb.w	ip, ip
9001d24e:	fb1b fb03 	smulbb	fp, fp, r3
9001d252:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001d254:	437b      	muls	r3, r7
9001d256:	7817      	ldrb	r7, [r2, #0]
9001d258:	fb05 b50a 	mla	r5, r5, sl, fp
9001d25c:	fb0e 3309 	mla	r3, lr, r9, r3
9001d260:	b2ad      	uxth	r5, r5
9001d262:	fb01 3307 	mla	r3, r1, r7, r3
9001d266:	7807      	ldrb	r7, [r0, #0]
9001d268:	f105 0b01 	add.w	fp, r5, #1
9001d26c:	fb08 3707 	mla	r7, r8, r7, r3
9001d270:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
9001d272:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
9001d276:	fb1c fc03 	smulbb	ip, ip, r3
9001d27a:	f3c7 2707 	ubfx	r7, r7, #8, #8
9001d27e:	1c73      	adds	r3, r6, #1
9001d280:	096d      	lsrs	r5, r5, #5
9001d282:	fb07 c70a 	mla	r7, r7, sl, ip
9001d286:	eb03 2616 	add.w	r6, r3, r6, lsr #8
9001d28a:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
9001d28e:	b2bf      	uxth	r7, r7
9001d290:	9b0c      	ldr	r3, [sp, #48]	; 0x30
9001d292:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
9001d296:	1c7a      	adds	r2, r7, #1
9001d298:	eb02 2217 	add.w	r2, r2, r7, lsr #8
9001d29c:	f3c2 22c4 	ubfx	r2, r2, #11, #5
9001d2a0:	4316      	orrs	r6, r2
9001d2a2:	9a21      	ldr	r2, [sp, #132]	; 0x84
9001d2a4:	432e      	orrs	r6, r5
9001d2a6:	f823 6b02 	strh.w	r6, [r3], #2
9001d2aa:	930c      	str	r3, [sp, #48]	; 0x30
9001d2ac:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
9001d2ae:	4413      	add	r3, r2
9001d2b0:	9a22      	ldr	r2, [sp, #136]	; 0x88
9001d2b2:	931f      	str	r3, [sp, #124]	; 0x7c
9001d2b4:	9b20      	ldr	r3, [sp, #128]	; 0x80
9001d2b6:	4413      	add	r3, r2
9001d2b8:	9320      	str	r3, [sp, #128]	; 0x80
9001d2ba:	9b11      	ldr	r3, [sp, #68]	; 0x44
9001d2bc:	3b01      	subs	r3, #1
9001d2be:	9311      	str	r3, [sp, #68]	; 0x44
9001d2c0:	e6db      	b.n	9001d07a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x290>
9001d2c2:	b149      	cbz	r1, 9001d2d8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ee>
9001d2c4:	5cb2      	ldrb	r2, [r6, r2]
9001d2c6:	4628      	mov	r0, r5
9001d2c8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
9001d2cc:	4422      	add	r2, r4
9001d2ce:	462f      	mov	r7, r5
9001d2d0:	e771      	b.n	9001d1b6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
9001d2d2:	4628      	mov	r0, r5
9001d2d4:	462a      	mov	r2, r5
9001d2d6:	e76e      	b.n	9001d1b6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
9001d2d8:	4628      	mov	r0, r5
9001d2da:	462a      	mov	r2, r5
9001d2dc:	e7f7      	b.n	9001d2ce <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
9001d2de:	b015      	add	sp, #84	; 0x54
9001d2e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

9001d2e4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>:
9001d2e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001d2e8:	880f      	ldrh	r7, [r1, #0]
9001d2ea:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
9001d2ee:	023c      	lsls	r4, r7, #8
9001d2f0:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
9001d2f4:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
9001d2f8:	f404 0b78 	and.w	fp, r4, #16252928	; 0xf80000
9001d2fc:	017c      	lsls	r4, r7, #5
9001d2fe:	00ff      	lsls	r7, r7, #3
9001d300:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
9001d304:	f404 447c 	and.w	r4, r4, #64512	; 0xfc00
9001d308:	b2ff      	uxtb	r7, r7
9001d30a:	ea4b 0404 	orr.w	r4, fp, r4
9001d30e:	e9dd c50e 	ldrd	ip, r5, [sp, #56]	; 0x38
9001d312:	4327      	orrs	r7, r4
9001d314:	fb05 ca0e 	mla	sl, r5, lr, ip
9001d318:	2d00      	cmp	r5, #0
9001d31a:	9701      	str	r7, [sp, #4]
9001d31c:	eb02 080a 	add.w	r8, r2, sl
9001d320:	db7e      	blt.n	9001d420 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x13c>
9001d322:	45a9      	cmp	r9, r5
9001d324:	dd7c      	ble.n	9001d420 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x13c>
9001d326:	f1bc 0f00 	cmp.w	ip, #0
9001d32a:	db77      	blt.n	9001d41c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x138>
9001d32c:	45e6      	cmp	lr, ip
9001d32e:	dd75      	ble.n	9001d41c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x138>
9001d330:	f812 700a 	ldrb.w	r7, [r2, sl]
9001d334:	eb07 0747 	add.w	r7, r7, r7, lsl #1
9001d338:	441f      	add	r7, r3
9001d33a:	f11c 0201 	adds.w	r2, ip, #1
9001d33e:	d472      	bmi.n	9001d426 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
9001d340:	4596      	cmp	lr, r2
9001d342:	dd70      	ble.n	9001d426 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
9001d344:	2800      	cmp	r0, #0
9001d346:	d06e      	beq.n	9001d426 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
9001d348:	f898 4001 	ldrb.w	r4, [r8, #1]
9001d34c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
9001d350:	441c      	add	r4, r3
9001d352:	3501      	adds	r5, #1
9001d354:	d46b      	bmi.n	9001d42e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
9001d356:	45a9      	cmp	r9, r5
9001d358:	dd69      	ble.n	9001d42e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
9001d35a:	2e00      	cmp	r6, #0
9001d35c:	d067      	beq.n	9001d42e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
9001d35e:	f1bc 0f00 	cmp.w	ip, #0
9001d362:	db62      	blt.n	9001d42a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x146>
9001d364:	45e6      	cmp	lr, ip
9001d366:	dd60      	ble.n	9001d42a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x146>
9001d368:	f818 500e 	ldrb.w	r5, [r8, lr]
9001d36c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
9001d370:	441d      	add	r5, r3
9001d372:	f11c 0201 	adds.w	r2, ip, #1
9001d376:	d45d      	bmi.n	9001d434 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
9001d378:	4596      	cmp	lr, r2
9001d37a:	dd5b      	ble.n	9001d434 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
9001d37c:	2800      	cmp	r0, #0
9001d37e:	d059      	beq.n	9001d434 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
9001d380:	44c6      	add	lr, r8
9001d382:	f89e 2001 	ldrb.w	r2, [lr, #1]
9001d386:	eb02 0242 	add.w	r2, r2, r2, lsl #1
9001d38a:	4413      	add	r3, r2
9001d38c:	b280      	uxth	r0, r0
9001d38e:	f897 e002 	ldrb.w	lr, [r7, #2]
9001d392:	b2b2      	uxth	r2, r6
9001d394:	f897 9000 	ldrb.w	r9, [r7]
9001d398:	787f      	ldrb	r7, [r7, #1]
9001d39a:	fb00 f602 	mul.w	r6, r0, r2
9001d39e:	0100      	lsls	r0, r0, #4
9001d3a0:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
9001d3a4:	f5c0 7880 	rsb	r8, r0, #256	; 0x100
9001d3a8:	1b80      	subs	r0, r0, r6
9001d3aa:	fa1f fc82 	uxth.w	ip, r2
9001d3ae:	b282      	uxth	r2, r0
9001d3b0:	78a0      	ldrb	r0, [r4, #2]
9001d3b2:	eba8 080c 	sub.w	r8, r8, ip
9001d3b6:	4350      	muls	r0, r2
9001d3b8:	fa1f f888 	uxth.w	r8, r8
9001d3bc:	fb08 0e0e 	mla	lr, r8, lr, r0
9001d3c0:	78a8      	ldrb	r0, [r5, #2]
9001d3c2:	fb0c e000 	mla	r0, ip, r0, lr
9001d3c6:	f893 e002 	ldrb.w	lr, [r3, #2]
9001d3ca:	fb06 0e0e 	mla	lr, r6, lr, r0
9001d3ce:	f40e 4078 	and.w	r0, lr, #63488	; 0xf800
9001d3d2:	f894 e000 	ldrb.w	lr, [r4]
9001d3d6:	fb02 fe0e 	mul.w	lr, r2, lr
9001d3da:	fb08 e909 	mla	r9, r8, r9, lr
9001d3de:	f895 e000 	ldrb.w	lr, [r5]
9001d3e2:	fb0c 990e 	mla	r9, ip, lr, r9
9001d3e6:	f893 e000 	ldrb.w	lr, [r3]
9001d3ea:	785b      	ldrb	r3, [r3, #1]
9001d3ec:	fb06 9e0e 	mla	lr, r6, lr, r9
9001d3f0:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
9001d3f4:	ea4e 0e00 	orr.w	lr, lr, r0
9001d3f8:	7860      	ldrb	r0, [r4, #1]
9001d3fa:	4350      	muls	r0, r2
9001d3fc:	786a      	ldrb	r2, [r5, #1]
9001d3fe:	fb08 0007 	mla	r0, r8, r7, r0
9001d402:	fb0c 0202 	mla	r2, ip, r2, r0
9001d406:	fb06 2303 	mla	r3, r6, r3, r2
9001d40a:	095b      	lsrs	r3, r3, #5
9001d40c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9001d410:	ea4e 0303 	orr.w	r3, lr, r3
9001d414:	800b      	strh	r3, [r1, #0]
9001d416:	b003      	add	sp, #12
9001d418:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001d41c:	af01      	add	r7, sp, #4
9001d41e:	e78c      	b.n	9001d33a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x56>
9001d420:	ac01      	add	r4, sp, #4
9001d422:	4627      	mov	r7, r4
9001d424:	e795      	b.n	9001d352 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
9001d426:	ac01      	add	r4, sp, #4
9001d428:	e793      	b.n	9001d352 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
9001d42a:	ad01      	add	r5, sp, #4
9001d42c:	e7a1      	b.n	9001d372 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x8e>
9001d42e:	ab01      	add	r3, sp, #4
9001d430:	461d      	mov	r5, r3
9001d432:	e7ab      	b.n	9001d38c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa8>
9001d434:	ab01      	add	r3, sp, #4
9001d436:	e7a9      	b.n	9001d38c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa8>

9001d438 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
9001d438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001d43c:	b08f      	sub	sp, #60	; 0x3c
9001d43e:	920c      	str	r2, [sp, #48]	; 0x30
9001d440:	9a1d      	ldr	r2, [sp, #116]	; 0x74
9001d442:	900d      	str	r0, [sp, #52]	; 0x34
9001d444:	910a      	str	r1, [sp, #40]	; 0x28
9001d446:	6850      	ldr	r0, [r2, #4]
9001d448:	9306      	str	r3, [sp, #24]
9001d44a:	6812      	ldr	r2, [r2, #0]
9001d44c:	e9dd 131e 	ldrd	r1, r3, [sp, #120]	; 0x78
9001d450:	e9dd b519 	ldrd	fp, r5, [sp, #100]	; 0x64
9001d454:	fb00 1303 	mla	r3, r0, r3, r1
9001d458:	eb02 0343 	add.w	r3, r2, r3, lsl #1
9001d45c:	9307      	str	r3, [sp, #28]
9001d45e:	9b20      	ldr	r3, [sp, #128]	; 0x80
9001d460:	681b      	ldr	r3, [r3, #0]
9001d462:	9308      	str	r3, [sp, #32]
9001d464:	9b20      	ldr	r3, [sp, #128]	; 0x80
9001d466:	685c      	ldr	r4, [r3, #4]
9001d468:	3404      	adds	r4, #4
9001d46a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
9001d46c:	2b00      	cmp	r3, #0
9001d46e:	dc03      	bgt.n	9001d478 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
9001d470:	9b0c      	ldr	r3, [sp, #48]	; 0x30
9001d472:	2b00      	cmp	r3, #0
9001d474:	f340 81d5 	ble.w	9001d822 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
9001d478:	9b20      	ldr	r3, [sp, #128]	; 0x80
9001d47a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
9001d47e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
9001d482:	1e48      	subs	r0, r1, #1
9001d484:	1e56      	subs	r6, r2, #1
9001d486:	9b06      	ldr	r3, [sp, #24]
9001d488:	2b00      	cmp	r3, #0
9001d48a:	f340 80b6 	ble.w	9001d5fa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
9001d48e:	ea5f 472b 	movs.w	r7, fp, asr #16
9001d492:	ea4f 4325 	mov.w	r3, r5, asr #16
9001d496:	d406      	bmi.n	9001d4a6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
9001d498:	4287      	cmp	r7, r0
9001d49a:	da04      	bge.n	9001d4a6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
9001d49c:	2b00      	cmp	r3, #0
9001d49e:	db02      	blt.n	9001d4a6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
9001d4a0:	42b3      	cmp	r3, r6
9001d4a2:	f2c0 80ab 	blt.w	9001d5fc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c4>
9001d4a6:	3701      	adds	r7, #1
9001d4a8:	f100 809c 	bmi.w	9001d5e4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
9001d4ac:	42b9      	cmp	r1, r7
9001d4ae:	f2c0 8099 	blt.w	9001d5e4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
9001d4b2:	3301      	adds	r3, #1
9001d4b4:	f100 8096 	bmi.w	9001d5e4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
9001d4b8:	429a      	cmp	r2, r3
9001d4ba:	f2c0 8093 	blt.w	9001d5e4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
9001d4be:	9b06      	ldr	r3, [sp, #24]
9001d4c0:	930b      	str	r3, [sp, #44]	; 0x2c
9001d4c2:	9b07      	ldr	r3, [sp, #28]
9001d4c4:	9309      	str	r3, [sp, #36]	; 0x24
9001d4c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
9001d4c8:	2b00      	cmp	r3, #0
9001d4ca:	f340 80b4 	ble.w	9001d636 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
9001d4ce:	9820      	ldr	r0, [sp, #128]	; 0x80
9001d4d0:	142e      	asrs	r6, r5, #16
9001d4d2:	9a20      	ldr	r2, [sp, #128]	; 0x80
9001d4d4:	f3cb 3303 	ubfx	r3, fp, #12, #4
9001d4d8:	68c7      	ldr	r7, [r0, #12]
9001d4da:	ea5f 402b 	movs.w	r0, fp, asr #16
9001d4de:	f3c5 3103 	ubfx	r1, r5, #12, #4
9001d4e2:	6892      	ldr	r2, [r2, #8]
9001d4e4:	f100 80fb 	bmi.w	9001d6de <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
9001d4e8:	f102 3cff 	add.w	ip, r2, #4294967295
9001d4ec:	4560      	cmp	r0, ip
9001d4ee:	f280 80f6 	bge.w	9001d6de <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
9001d4f2:	2e00      	cmp	r6, #0
9001d4f4:	f2c0 80f3 	blt.w	9001d6de <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
9001d4f8:	f107 3cff 	add.w	ip, r7, #4294967295
9001d4fc:	4566      	cmp	r6, ip
9001d4fe:	f280 80ee 	bge.w	9001d6de <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
9001d502:	b212      	sxth	r2, r2
9001d504:	fb06 0002 	mla	r0, r6, r2, r0
9001d508:	9e08      	ldr	r6, [sp, #32]
9001d50a:	1837      	adds	r7, r6, r0
9001d50c:	5c30      	ldrb	r0, [r6, r0]
9001d50e:	eb00 0840 	add.w	r8, r0, r0, lsl #1
9001d512:	eb04 0c08 	add.w	ip, r4, r8
9001d516:	2b00      	cmp	r3, #0
9001d518:	f000 80d3 	beq.w	9001d6c2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
9001d51c:	787e      	ldrb	r6, [r7, #1]
9001d51e:	eb06 0646 	add.w	r6, r6, r6, lsl #1
9001d522:	4426      	add	r6, r4
9001d524:	2900      	cmp	r1, #0
9001d526:	f000 80d4 	beq.w	9001d6d2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
9001d52a:	18b8      	adds	r0, r7, r2
9001d52c:	5cba      	ldrb	r2, [r7, r2]
9001d52e:	7840      	ldrb	r0, [r0, #1]
9001d530:	eb02 0242 	add.w	r2, r2, r2, lsl #1
9001d534:	eb00 0040 	add.w	r0, r0, r0, lsl #1
9001d538:	4422      	add	r2, r4
9001d53a:	4420      	add	r0, r4
9001d53c:	b29b      	uxth	r3, r3
9001d53e:	78b7      	ldrb	r7, [r6, #2]
9001d540:	b289      	uxth	r1, r1
9001d542:	f89c a002 	ldrb.w	sl, [ip, #2]
9001d546:	f89c c001 	ldrb.w	ip, [ip, #1]
9001d54a:	fb03 f901 	mul.w	r9, r3, r1
9001d54e:	011b      	lsls	r3, r3, #4
9001d550:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
9001d554:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
9001d558:	eba3 0309 	sub.w	r3, r3, r9
9001d55c:	b289      	uxth	r1, r1
9001d55e:	b29b      	uxth	r3, r3
9001d560:	ebae 0e01 	sub.w	lr, lr, r1
9001d564:	435f      	muls	r7, r3
9001d566:	fa1f fe8e 	uxth.w	lr, lr
9001d56a:	fb0e 770a 	mla	r7, lr, sl, r7
9001d56e:	f892 a002 	ldrb.w	sl, [r2, #2]
9001d572:	fb01 770a 	mla	r7, r1, sl, r7
9001d576:	f890 a002 	ldrb.w	sl, [r0, #2]
9001d57a:	fb09 7a0a 	mla	sl, r9, sl, r7
9001d57e:	f814 7008 	ldrb.w	r7, [r4, r8]
9001d582:	f896 8000 	ldrb.w	r8, [r6]
9001d586:	7876      	ldrb	r6, [r6, #1]
9001d588:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
9001d58c:	fb03 f808 	mul.w	r8, r3, r8
9001d590:	4373      	muls	r3, r6
9001d592:	fb0e 8807 	mla	r8, lr, r7, r8
9001d596:	7817      	ldrb	r7, [r2, #0]
9001d598:	fb0e 330c 	mla	r3, lr, ip, r3
9001d59c:	fb01 8807 	mla	r8, r1, r7, r8
9001d5a0:	7807      	ldrb	r7, [r0, #0]
9001d5a2:	fb09 8707 	mla	r7, r9, r7, r8
9001d5a6:	f3c7 27c4 	ubfx	r7, r7, #11, #5
9001d5aa:	ea47 070a 	orr.w	r7, r7, sl
9001d5ae:	f892 a001 	ldrb.w	sl, [r2, #1]
9001d5b2:	fb01 310a 	mla	r1, r1, sl, r3
9001d5b6:	f890 a001 	ldrb.w	sl, [r0, #1]
9001d5ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001d5bc:	fb09 1a0a 	mla	sl, r9, sl, r1
9001d5c0:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
9001d5c4:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
9001d5c8:	ea47 070a 	orr.w	r7, r7, sl
9001d5cc:	801f      	strh	r7, [r3, #0]
9001d5ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001d5d0:	3302      	adds	r3, #2
9001d5d2:	9309      	str	r3, [sp, #36]	; 0x24
9001d5d4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
9001d5d6:	449b      	add	fp, r3
9001d5d8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
9001d5da:	441d      	add	r5, r3
9001d5dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
9001d5de:	3b01      	subs	r3, #1
9001d5e0:	930b      	str	r3, [sp, #44]	; 0x2c
9001d5e2:	e770      	b.n	9001d4c6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
9001d5e4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
9001d5e6:	449b      	add	fp, r3
9001d5e8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
9001d5ea:	441d      	add	r5, r3
9001d5ec:	9b06      	ldr	r3, [sp, #24]
9001d5ee:	3b01      	subs	r3, #1
9001d5f0:	9306      	str	r3, [sp, #24]
9001d5f2:	9b07      	ldr	r3, [sp, #28]
9001d5f4:	3302      	adds	r3, #2
9001d5f6:	9307      	str	r3, [sp, #28]
9001d5f8:	e745      	b.n	9001d486 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
9001d5fa:	d023      	beq.n	9001d644 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
9001d5fc:	9b06      	ldr	r3, [sp, #24]
9001d5fe:	981b      	ldr	r0, [sp, #108]	; 0x6c
9001d600:	3b01      	subs	r3, #1
9001d602:	fb00 b003 	mla	r0, r0, r3, fp
9001d606:	1400      	asrs	r0, r0, #16
9001d608:	f53f af59 	bmi.w	9001d4be <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
9001d60c:	3901      	subs	r1, #1
9001d60e:	4288      	cmp	r0, r1
9001d610:	f6bf af55 	bge.w	9001d4be <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
9001d614:	991c      	ldr	r1, [sp, #112]	; 0x70
9001d616:	fb01 5303 	mla	r3, r1, r3, r5
9001d61a:	141b      	asrs	r3, r3, #16
9001d61c:	f53f af4f 	bmi.w	9001d4be <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
9001d620:	3a01      	subs	r2, #1
9001d622:	4293      	cmp	r3, r2
9001d624:	f6bf af4b 	bge.w	9001d4be <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
9001d628:	9b06      	ldr	r3, [sp, #24]
9001d62a:	9309      	str	r3, [sp, #36]	; 0x24
9001d62c:	9b07      	ldr	r3, [sp, #28]
9001d62e:	930b      	str	r3, [sp, #44]	; 0x2c
9001d630:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001d632:	2b00      	cmp	r3, #0
9001d634:	dc70      	bgt.n	9001d718 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
9001d636:	9b06      	ldr	r3, [sp, #24]
9001d638:	9a07      	ldr	r2, [sp, #28]
9001d63a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
9001d63e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
9001d642:	9307      	str	r3, [sp, #28]
9001d644:	9b0a      	ldr	r3, [sp, #40]	; 0x28
9001d646:	2b00      	cmp	r3, #0
9001d648:	f340 80eb 	ble.w	9001d822 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
9001d64c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
9001d650:	9b18      	ldr	r3, [sp, #96]	; 0x60
9001d652:	ee30 0a04 	vadd.f32	s0, s0, s8
9001d656:	ee70 0aa4 	vadd.f32	s1, s1, s9
9001d65a:	eef0 6a62 	vmov.f32	s13, s5
9001d65e:	eec7 7a00 	vdiv.f32	s15, s14, s0
9001d662:	ee31 1a05 	vadd.f32	s2, s2, s10
9001d666:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9001d66a:	ee16 ba90 	vmov	fp, s13
9001d66e:	eef0 6a43 	vmov.f32	s13, s6
9001d672:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9001d676:	ee16 5a90 	vmov	r5, s13
9001d67a:	ee20 7aa7 	vmul.f32	s14, s1, s15
9001d67e:	ee61 7a27 	vmul.f32	s15, s2, s15
9001d682:	ee77 2a62 	vsub.f32	s5, s14, s5
9001d686:	ee37 3ac3 	vsub.f32	s6, s15, s6
9001d68a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9001d68e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9001d692:	ee12 2a90 	vmov	r2, s5
9001d696:	eef0 2a47 	vmov.f32	s5, s14
9001d69a:	fb92 f3f3 	sdiv	r3, r2, r3
9001d69e:	ee13 2a10 	vmov	r2, s6
9001d6a2:	931b      	str	r3, [sp, #108]	; 0x6c
9001d6a4:	9b18      	ldr	r3, [sp, #96]	; 0x60
9001d6a6:	eeb0 3a67 	vmov.f32	s6, s15
9001d6aa:	fb92 f3f3 	sdiv	r3, r2, r3
9001d6ae:	931c      	str	r3, [sp, #112]	; 0x70
9001d6b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
9001d6b2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
9001d6b4:	3b01      	subs	r3, #1
9001d6b6:	930a      	str	r3, [sp, #40]	; 0x28
9001d6b8:	9b18      	ldr	r3, [sp, #96]	; 0x60
9001d6ba:	bf08      	it	eq
9001d6bc:	4613      	moveq	r3, r2
9001d6be:	9306      	str	r3, [sp, #24]
9001d6c0:	e6d3      	b.n	9001d46a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
9001d6c2:	b149      	cbz	r1, 9001d6d8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
9001d6c4:	5cba      	ldrb	r2, [r7, r2]
9001d6c6:	4660      	mov	r0, ip
9001d6c8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
9001d6cc:	4422      	add	r2, r4
9001d6ce:	4666      	mov	r6, ip
9001d6d0:	e734      	b.n	9001d53c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x104>
9001d6d2:	4660      	mov	r0, ip
9001d6d4:	4662      	mov	r2, ip
9001d6d6:	e731      	b.n	9001d53c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x104>
9001d6d8:	4660      	mov	r0, ip
9001d6da:	4662      	mov	r2, ip
9001d6dc:	e7f7      	b.n	9001d6ce <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
9001d6de:	f110 0c01 	adds.w	ip, r0, #1
9001d6e2:	f53f af74 	bmi.w	9001d5ce <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
9001d6e6:	4562      	cmp	r2, ip
9001d6e8:	f6ff af71 	blt.w	9001d5ce <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
9001d6ec:	f116 0c01 	adds.w	ip, r6, #1
9001d6f0:	f53f af6d 	bmi.w	9001d5ce <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
9001d6f4:	4567      	cmp	r7, ip
9001d6f6:	f6ff af6a 	blt.w	9001d5ce <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
9001d6fa:	b23f      	sxth	r7, r7
9001d6fc:	b212      	sxth	r2, r2
9001d6fe:	9701      	str	r7, [sp, #4]
9001d700:	9200      	str	r2, [sp, #0]
9001d702:	e9cd 3104 	strd	r3, r1, [sp, #16]
9001d706:	e9cd 0602 	strd	r0, r6, [sp, #8]
9001d70a:	4623      	mov	r3, r4
9001d70c:	980d      	ldr	r0, [sp, #52]	; 0x34
9001d70e:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
9001d712:	f7ff fde7 	bl	9001d2e4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>
9001d716:	e75a      	b.n	9001d5ce <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
9001d718:	9a20      	ldr	r2, [sp, #128]	; 0x80
9001d71a:	ea4f 462b 	mov.w	r6, fp, asr #16
9001d71e:	1428      	asrs	r0, r5, #16
9001d720:	f3cb 3303 	ubfx	r3, fp, #12, #4
9001d724:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
9001d728:	f3c5 3103 	ubfx	r1, r5, #12, #4
9001d72c:	fb02 6000 	mla	r0, r2, r0, r6
9001d730:	9e08      	ldr	r6, [sp, #32]
9001d732:	f816 8000 	ldrb.w	r8, [r6, r0]
9001d736:	1837      	adds	r7, r6, r0
9001d738:	eb08 0848 	add.w	r8, r8, r8, lsl #1
9001d73c:	eb04 0c08 	add.w	ip, r4, r8
9001d740:	2b00      	cmp	r3, #0
9001d742:	d060      	beq.n	9001d806 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ce>
9001d744:	787e      	ldrb	r6, [r7, #1]
9001d746:	eb06 0646 	add.w	r6, r6, r6, lsl #1
9001d74a:	4426      	add	r6, r4
9001d74c:	2900      	cmp	r1, #0
9001d74e:	d062      	beq.n	9001d816 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3de>
9001d750:	18b8      	adds	r0, r7, r2
9001d752:	5cba      	ldrb	r2, [r7, r2]
9001d754:	7840      	ldrb	r0, [r0, #1]
9001d756:	eb02 0242 	add.w	r2, r2, r2, lsl #1
9001d75a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
9001d75e:	4422      	add	r2, r4
9001d760:	4420      	add	r0, r4
9001d762:	b29b      	uxth	r3, r3
9001d764:	78b7      	ldrb	r7, [r6, #2]
9001d766:	b289      	uxth	r1, r1
9001d768:	f89c a002 	ldrb.w	sl, [ip, #2]
9001d76c:	f89c c001 	ldrb.w	ip, [ip, #1]
9001d770:	fb03 f901 	mul.w	r9, r3, r1
9001d774:	011b      	lsls	r3, r3, #4
9001d776:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
9001d77a:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
9001d77e:	eba3 0309 	sub.w	r3, r3, r9
9001d782:	b289      	uxth	r1, r1
9001d784:	b29b      	uxth	r3, r3
9001d786:	ebae 0e01 	sub.w	lr, lr, r1
9001d78a:	435f      	muls	r7, r3
9001d78c:	fa1f fe8e 	uxth.w	lr, lr
9001d790:	fb0e 770a 	mla	r7, lr, sl, r7
9001d794:	f892 a002 	ldrb.w	sl, [r2, #2]
9001d798:	fb01 770a 	mla	r7, r1, sl, r7
9001d79c:	f890 a002 	ldrb.w	sl, [r0, #2]
9001d7a0:	fb09 7a0a 	mla	sl, r9, sl, r7
9001d7a4:	f814 7008 	ldrb.w	r7, [r4, r8]
9001d7a8:	f896 8000 	ldrb.w	r8, [r6]
9001d7ac:	7876      	ldrb	r6, [r6, #1]
9001d7ae:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
9001d7b2:	fb03 f808 	mul.w	r8, r3, r8
9001d7b6:	4373      	muls	r3, r6
9001d7b8:	7856      	ldrb	r6, [r2, #1]
9001d7ba:	fb0e 8807 	mla	r8, lr, r7, r8
9001d7be:	7817      	ldrb	r7, [r2, #0]
9001d7c0:	fb0e 330c 	mla	r3, lr, ip, r3
9001d7c4:	fb01 8807 	mla	r8, r1, r7, r8
9001d7c8:	7807      	ldrb	r7, [r0, #0]
9001d7ca:	fb01 3306 	mla	r3, r1, r6, r3
9001d7ce:	fb09 8707 	mla	r7, r9, r7, r8
9001d7d2:	f3c7 27c4 	ubfx	r7, r7, #11, #5
9001d7d6:	ea47 070a 	orr.w	r7, r7, sl
9001d7da:	f890 a001 	ldrb.w	sl, [r0, #1]
9001d7de:	fb09 3a0a 	mla	sl, r9, sl, r3
9001d7e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
9001d7e4:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
9001d7e8:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
9001d7ec:	ea47 070a 	orr.w	r7, r7, sl
9001d7f0:	f823 7b02 	strh.w	r7, [r3], #2
9001d7f4:	930b      	str	r3, [sp, #44]	; 0x2c
9001d7f6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
9001d7f8:	449b      	add	fp, r3
9001d7fa:	9b1c      	ldr	r3, [sp, #112]	; 0x70
9001d7fc:	441d      	add	r5, r3
9001d7fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001d800:	3b01      	subs	r3, #1
9001d802:	9309      	str	r3, [sp, #36]	; 0x24
9001d804:	e714      	b.n	9001d630 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f8>
9001d806:	b149      	cbz	r1, 9001d81c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e4>
9001d808:	5cba      	ldrb	r2, [r7, r2]
9001d80a:	4660      	mov	r0, ip
9001d80c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
9001d810:	4422      	add	r2, r4
9001d812:	4666      	mov	r6, ip
9001d814:	e7a5      	b.n	9001d762 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
9001d816:	4660      	mov	r0, ip
9001d818:	4662      	mov	r2, ip
9001d81a:	e7a2      	b.n	9001d762 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
9001d81c:	4660      	mov	r0, ip
9001d81e:	4662      	mov	r2, ip
9001d820:	e7f7      	b.n	9001d812 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3da>
9001d822:	b00f      	add	sp, #60	; 0x3c
9001d824:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

9001d828 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>:
9001d828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001d82c:	b085      	sub	sp, #20
9001d82e:	e9dd 7410 	ldrd	r7, r4, [sp, #64]	; 0x40
9001d832:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
9001d836:	9102      	str	r1, [sp, #8]
9001d838:	2c00      	cmp	r4, #0
9001d83a:	fb04 710c 	mla	r1, r4, ip, r7
9001d83e:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
9001d842:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48
9001d846:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
9001d84a:	eb02 0e01 	add.w	lr, r2, r1
9001d84e:	f2c0 8122 	blt.w	9001da96 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26e>
9001d852:	45a0      	cmp	r8, r4
9001d854:	f340 811f 	ble.w	9001da96 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26e>
9001d858:	2f00      	cmp	r7, #0
9001d85a:	f2c0 811a 	blt.w	9001da92 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26a>
9001d85e:	45bc      	cmp	ip, r7
9001d860:	f340 8117 	ble.w	9001da92 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26a>
9001d864:	5c52      	ldrb	r2, [r2, r1]
9001d866:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
9001d86a:	1c7a      	adds	r2, r7, #1
9001d86c:	f100 8116 	bmi.w	9001da9c <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x274>
9001d870:	4594      	cmp	ip, r2
9001d872:	f340 8113 	ble.w	9001da9c <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x274>
9001d876:	2e00      	cmp	r6, #0
9001d878:	f000 8112 	beq.w	9001daa0 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x278>
9001d87c:	f89e 2001 	ldrb.w	r2, [lr, #1]
9001d880:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
9001d884:	3401      	adds	r4, #1
9001d886:	f100 810f 	bmi.w	9001daa8 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x280>
9001d88a:	45a0      	cmp	r8, r4
9001d88c:	f340 810c 	ble.w	9001daa8 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x280>
9001d890:	2800      	cmp	r0, #0
9001d892:	f000 810c 	beq.w	9001daae <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x286>
9001d896:	2f00      	cmp	r7, #0
9001d898:	f2c0 8104 	blt.w	9001daa4 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x27c>
9001d89c:	45bc      	cmp	ip, r7
9001d89e:	f340 8101 	ble.w	9001daa4 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x27c>
9001d8a2:	f81e 200c 	ldrb.w	r2, [lr, ip]
9001d8a6:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
9001d8aa:	3701      	adds	r7, #1
9001d8ac:	f100 8102 	bmi.w	9001dab4 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x28c>
9001d8b0:	45bc      	cmp	ip, r7
9001d8b2:	f340 80ff 	ble.w	9001dab4 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x28c>
9001d8b6:	2e00      	cmp	r6, #0
9001d8b8:	f000 80fe 	beq.w	9001dab8 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x290>
9001d8bc:	44f4      	add	ip, lr
9001d8be:	f89c 2001 	ldrb.w	r2, [ip, #1]
9001d8c2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
9001d8c6:	b2b6      	uxth	r6, r6
9001d8c8:	b280      	uxth	r0, r0
9001d8ca:	ea4f 6a11 	mov.w	sl, r1, lsr #24
9001d8ce:	fb00 fe06 	mul.w	lr, r0, r6
9001d8d2:	0136      	lsls	r6, r6, #4
9001d8d4:	ea4f 6b15 	mov.w	fp, r5, lsr #24
9001d8d8:	ebce 1000 	rsb	r0, lr, r0, lsl #4
9001d8dc:	eba6 070e 	sub.w	r7, r6, lr
9001d8e0:	f5c6 7380 	rsb	r3, r6, #256	; 0x100
9001d8e4:	ea4f 6914 	mov.w	r9, r4, lsr #24
9001d8e8:	b280      	uxth	r0, r0
9001d8ea:	b2bf      	uxth	r7, r7
9001d8ec:	1a1b      	subs	r3, r3, r0
9001d8ee:	ea4f 6812 	mov.w	r8, r2, lsr #24
9001d8f2:	fb0a f607 	mul.w	r6, sl, r7
9001d8f6:	b29b      	uxth	r3, r3
9001d8f8:	fb0b 6603 	mla	r6, fp, r3, r6
9001d8fc:	fb00 6609 	mla	r6, r0, r9, r6
9001d900:	fb0e 6608 	mla	r6, lr, r8, r6
9001d904:	f3c6 2607 	ubfx	r6, r6, #8, #8
9001d908:	9600      	str	r6, [sp, #0]
9001d90a:	2e00      	cmp	r6, #0
9001d90c:	f000 80be 	beq.w	9001da8c <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x264>
9001d910:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
9001d914:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
9001d918:	9e02      	ldr	r6, [sp, #8]
9001d91a:	fb0b fc0c 	mul.w	ip, fp, ip
9001d91e:	fb0b f505 	mul.w	r5, fp, r5
9001d922:	8836      	ldrh	r6, [r6, #0]
9001d924:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
9001d928:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
9001d92c:	9501      	str	r5, [sp, #4]
9001d92e:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
9001d932:	44dc      	add	ip, fp
9001d934:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
9001d938:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
9001d93c:	9503      	str	r5, [sp, #12]
9001d93e:	9d01      	ldr	r5, [sp, #4]
9001d940:	f505 7c80 	add.w	ip, r5, #256	; 0x100
9001d944:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
9001d948:	f001 1cff 	and.w	ip, r1, #16711935	; 0xff00ff
9001d94c:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
9001d950:	fb0a fc0c 	mul.w	ip, sl, ip
9001d954:	ea4f 2b15 	mov.w	fp, r5, lsr #8
9001d958:	fb0a fa01 	mul.w	sl, sl, r1
9001d95c:	ea4f 251c 	mov.w	r5, ip, lsr #8
9001d960:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
9001d964:	f50a 7180 	add.w	r1, sl, #256	; 0x100
9001d968:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
9001d96c:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
9001d970:	4465      	add	r5, ip
9001d972:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
9001d976:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
9001d97a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
9001d97e:	fb09 fc0c 	mul.w	ip, r9, ip
9001d982:	0a2d      	lsrs	r5, r5, #8
9001d984:	fb09 f904 	mul.w	r9, r9, r4
9001d988:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
9001d98c:	ea4f 211c 	mov.w	r1, ip, lsr #8
9001d990:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
9001d994:	f509 7480 	add.w	r4, r9, #256	; 0x100
9001d998:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
9001d99c:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
9001d9a0:	437d      	muls	r5, r7
9001d9a2:	eb04 2919 	add.w	r9, r4, r9, lsr #8
9001d9a6:	f002 14ff 	and.w	r4, r2, #16711935	; 0xff00ff
9001d9aa:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
9001d9ae:	4461      	add	r1, ip
9001d9b0:	fb08 f404 	mul.w	r4, r8, r4
9001d9b4:	ea4f 2919 	mov.w	r9, r9, lsr #8
9001d9b8:	fb08 f802 	mul.w	r8, r8, r2
9001d9bc:	0a09      	lsrs	r1, r1, #8
9001d9be:	0a22      	lsrs	r2, r4, #8
9001d9c0:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
9001d9c4:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
9001d9c8:	fb07 f70a 	mul.w	r7, r7, sl
9001d9cc:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
9001d9d0:	4414      	add	r4, r2
9001d9d2:	f508 7280 	add.w	r2, r8, #256	; 0x100
9001d9d6:	0a24      	lsrs	r4, r4, #8
9001d9d8:	eb02 2818 	add.w	r8, r2, r8, lsr #8
9001d9dc:	9a03      	ldr	r2, [sp, #12]
9001d9de:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
9001d9e2:	fb02 5503 	mla	r5, r2, r3, r5
9001d9e6:	ea4f 2818 	mov.w	r8, r8, lsr #8
9001d9ea:	9a00      	ldr	r2, [sp, #0]
9001d9ec:	fb04 540e 	mla	r4, r4, lr, r5
9001d9f0:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
9001d9f4:	1235      	asrs	r5, r6, #8
9001d9f6:	fb01 4100 	mla	r1, r1, r0, r4
9001d9fa:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
9001d9fe:	0a09      	lsrs	r1, r1, #8
9001da00:	f001 14ff 	and.w	r4, r1, #16711935	; 0xff00ff
9001da04:	f40b 417f 	and.w	r1, fp, #65280	; 0xff00
9001da08:	fb03 7101 	mla	r1, r3, r1, r7
9001da0c:	fb0e 1e08 	mla	lr, lr, r8, r1
9001da10:	f409 417f 	and.w	r1, r9, #65280	; 0xff00
9001da14:	fb00 e101 	mla	r1, r0, r1, lr
9001da18:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
9001da1c:	b287      	uxth	r7, r0
9001da1e:	0a09      	lsrs	r1, r1, #8
9001da20:	437a      	muls	r2, r7
9001da22:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
9001da26:	1c53      	adds	r3, r2, #1
9001da28:	4321      	orrs	r1, r4
9001da2a:	eb03 2312 	add.w	r3, r3, r2, lsr #8
9001da2e:	0c0a      	lsrs	r2, r1, #16
9001da30:	f3c1 2407 	ubfx	r4, r1, #8, #8
9001da34:	ea6f 2313 	mvn.w	r3, r3, lsr #8
9001da38:	b2c8      	uxtb	r0, r1
9001da3a:	fb12 f207 	smulbb	r2, r2, r7
9001da3e:	fb14 f407 	smulbb	r4, r4, r7
9001da42:	b2db      	uxtb	r3, r3
9001da44:	fb10 f007 	smulbb	r0, r0, r7
9001da48:	fb05 2503 	mla	r5, r5, r3, r2
9001da4c:	10f2      	asrs	r2, r6, #3
9001da4e:	00f6      	lsls	r6, r6, #3
9001da50:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
9001da54:	b2ad      	uxth	r5, r5
9001da56:	b2f6      	uxtb	r6, r6
9001da58:	fb02 4203 	mla	r2, r2, r3, r4
9001da5c:	fb06 0303 	mla	r3, r6, r3, r0
9001da60:	b294      	uxth	r4, r2
9001da62:	b299      	uxth	r1, r3
9001da64:	1c6b      	adds	r3, r5, #1
9001da66:	1c62      	adds	r2, r4, #1
9001da68:	eb03 2515 	add.w	r5, r3, r5, lsr #8
9001da6c:	1c4b      	adds	r3, r1, #1
9001da6e:	eb02 2214 	add.w	r2, r2, r4, lsr #8
9001da72:	eb03 2311 	add.w	r3, r3, r1, lsr #8
9001da76:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
9001da7a:	0952      	lsrs	r2, r2, #5
9001da7c:	f3c3 23c4 	ubfx	r3, r3, #11, #5
9001da80:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
9001da84:	432b      	orrs	r3, r5
9001da86:	4313      	orrs	r3, r2
9001da88:	9a02      	ldr	r2, [sp, #8]
9001da8a:	8013      	strh	r3, [r2, #0]
9001da8c:	b005      	add	sp, #20
9001da8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001da92:	2500      	movs	r5, #0
9001da94:	e6e9      	b.n	9001d86a <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x42>
9001da96:	2100      	movs	r1, #0
9001da98:	460d      	mov	r5, r1
9001da9a:	e6f3      	b.n	9001d884 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
9001da9c:	2100      	movs	r1, #0
9001da9e:	e6f1      	b.n	9001d884 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
9001daa0:	4631      	mov	r1, r6
9001daa2:	e6ef      	b.n	9001d884 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
9001daa4:	2400      	movs	r4, #0
9001daa6:	e700      	b.n	9001d8aa <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x82>
9001daa8:	2200      	movs	r2, #0
9001daaa:	4614      	mov	r4, r2
9001daac:	e70b      	b.n	9001d8c6 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
9001daae:	4602      	mov	r2, r0
9001dab0:	4604      	mov	r4, r0
9001dab2:	e708      	b.n	9001d8c6 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
9001dab4:	2200      	movs	r2, #0
9001dab6:	e706      	b.n	9001d8c6 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
9001dab8:	4632      	mov	r2, r6
9001daba:	e704      	b.n	9001d8c6 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>

9001dabc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
9001dabc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001dac0:	b09f      	sub	sp, #124	; 0x7c
9001dac2:	921b      	str	r2, [sp, #108]	; 0x6c
9001dac4:	9309      	str	r3, [sp, #36]	; 0x24
9001dac6:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
9001dac8:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
9001dacc:	901d      	str	r0, [sp, #116]	; 0x74
9001dace:	931c      	str	r3, [sp, #112]	; 0x70
9001dad0:	6850      	ldr	r0, [r2, #4]
9001dad2:	9119      	str	r1, [sp, #100]	; 0x64
9001dad4:	6812      	ldr	r2, [r2, #0]
9001dad6:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
9001dad8:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
9001dadc:	fb00 1303 	mla	r3, r0, r3, r1
9001dae0:	eb02 0343 	add.w	r3, r2, r3, lsl #1
9001dae4:	930c      	str	r3, [sp, #48]	; 0x30
9001dae6:	9b30      	ldr	r3, [sp, #192]	; 0xc0
9001dae8:	681b      	ldr	r3, [r3, #0]
9001daea:	9312      	str	r3, [sp, #72]	; 0x48
9001daec:	9b30      	ldr	r3, [sp, #192]	; 0xc0
9001daee:	685e      	ldr	r6, [r3, #4]
9001daf0:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
9001daf4:	3604      	adds	r6, #4
9001daf6:	930d      	str	r3, [sp, #52]	; 0x34
9001daf8:	9b19      	ldr	r3, [sp, #100]	; 0x64
9001dafa:	2b00      	cmp	r3, #0
9001dafc:	dc03      	bgt.n	9001db06 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
9001dafe:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
9001db00:	2b00      	cmp	r3, #0
9001db02:	f340 8387 	ble.w	9001e214 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x758>
9001db06:	9b30      	ldr	r3, [sp, #192]	; 0xc0
9001db08:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
9001db0c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
9001db10:	1e48      	subs	r0, r1, #1
9001db12:	1e57      	subs	r7, r2, #1
9001db14:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001db16:	2b00      	cmp	r3, #0
9001db18:	f340 8194 	ble.w	9001de44 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x388>
9001db1c:	9c29      	ldr	r4, [sp, #164]	; 0xa4
9001db1e:	142b      	asrs	r3, r5, #16
9001db20:	ea5f 4c24 	movs.w	ip, r4, asr #16
9001db24:	d406      	bmi.n	9001db34 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
9001db26:	4584      	cmp	ip, r0
9001db28:	da04      	bge.n	9001db34 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
9001db2a:	2b00      	cmp	r3, #0
9001db2c:	db02      	blt.n	9001db34 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
9001db2e:	42bb      	cmp	r3, r7
9001db30:	f2c0 8189 	blt.w	9001de46 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
9001db34:	f11c 0c01 	adds.w	ip, ip, #1
9001db38:	f100 8177 	bmi.w	9001de2a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
9001db3c:	4561      	cmp	r1, ip
9001db3e:	f2c0 8174 	blt.w	9001de2a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
9001db42:	3301      	adds	r3, #1
9001db44:	f100 8171 	bmi.w	9001de2a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
9001db48:	429a      	cmp	r2, r3
9001db4a:	f2c0 816e 	blt.w	9001de2a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
9001db4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001db50:	9f0c      	ldr	r7, [sp, #48]	; 0x30
9001db52:	931a      	str	r3, [sp, #104]	; 0x68
9001db54:	9b1a      	ldr	r3, [sp, #104]	; 0x68
9001db56:	2b00      	cmp	r3, #0
9001db58:	f340 8193 	ble.w	9001de82 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
9001db5c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
9001db5e:	ea4f 4c25 	mov.w	ip, r5, asr #16
9001db62:	f3c5 3103 	ubfx	r1, r5, #12, #4
9001db66:	f3c3 3203 	ubfx	r2, r3, #12, #4
9001db6a:	9b30      	ldr	r3, [sp, #192]	; 0xc0
9001db6c:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
9001db70:	9b29      	ldr	r3, [sp, #164]	; 0xa4
9001db72:	141b      	asrs	r3, r3, #16
9001db74:	f100 81d6 	bmi.w	9001df24 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
9001db78:	f100 38ff 	add.w	r8, r0, #4294967295
9001db7c:	4543      	cmp	r3, r8
9001db7e:	f280 81d1 	bge.w	9001df24 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
9001db82:	f1bc 0f00 	cmp.w	ip, #0
9001db86:	f2c0 81cd 	blt.w	9001df24 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
9001db8a:	f10e 38ff 	add.w	r8, lr, #4294967295
9001db8e:	45c4      	cmp	ip, r8
9001db90:	f280 81c8 	bge.w	9001df24 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
9001db94:	b200      	sxth	r0, r0
9001db96:	9c12      	ldr	r4, [sp, #72]	; 0x48
9001db98:	fb0c 3300 	mla	r3, ip, r0, r3
9001db9c:	eb04 0803 	add.w	r8, r4, r3
9001dba0:	5ce3      	ldrb	r3, [r4, r3]
9001dba2:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
9001dba6:	ea4f 6e13 	mov.w	lr, r3, lsr #24
9001dbaa:	2a00      	cmp	r2, #0
9001dbac:	f000 81af 	beq.w	9001df0e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
9001dbb0:	f898 c001 	ldrb.w	ip, [r8, #1]
9001dbb4:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
9001dbb8:	940e      	str	r4, [sp, #56]	; 0x38
9001dbba:	0e24      	lsrs	r4, r4, #24
9001dbbc:	9415      	str	r4, [sp, #84]	; 0x54
9001dbbe:	b179      	cbz	r1, 9001dbe0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
9001dbc0:	eb08 0c00 	add.w	ip, r8, r0
9001dbc4:	f818 0000 	ldrb.w	r0, [r8, r0]
9001dbc8:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
9001dbcc:	900a      	str	r0, [sp, #40]	; 0x28
9001dbce:	0e00      	lsrs	r0, r0, #24
9001dbd0:	9013      	str	r0, [sp, #76]	; 0x4c
9001dbd2:	f89c 0001 	ldrb.w	r0, [ip, #1]
9001dbd6:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
9001dbda:	900f      	str	r0, [sp, #60]	; 0x3c
9001dbdc:	0e00      	lsrs	r0, r0, #24
9001dbde:	9016      	str	r0, [sp, #88]	; 0x58
9001dbe0:	b292      	uxth	r2, r2
9001dbe2:	9815      	ldr	r0, [sp, #84]	; 0x54
9001dbe4:	b289      	uxth	r1, r1
9001dbe6:	9c13      	ldr	r4, [sp, #76]	; 0x4c
9001dbe8:	fb02 f901 	mul.w	r9, r2, r1
9001dbec:	0112      	lsls	r2, r2, #4
9001dbee:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
9001dbf2:	eba2 0809 	sub.w	r8, r2, r9
9001dbf6:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
9001dbfa:	b289      	uxth	r1, r1
9001dbfc:	fa1f f888 	uxth.w	r8, r8
9001dc00:	1a52      	subs	r2, r2, r1
9001dc02:	fb08 f000 	mul.w	r0, r8, r0
9001dc06:	b292      	uxth	r2, r2
9001dc08:	fb02 000e 	mla	r0, r2, lr, r0
9001dc0c:	fb01 0004 	mla	r0, r1, r4, r0
9001dc10:	9c16      	ldr	r4, [sp, #88]	; 0x58
9001dc12:	fb09 0004 	mla	r0, r9, r4, r0
9001dc16:	f3c0 2007 	ubfx	r0, r0, #8, #8
9001dc1a:	2800      	cmp	r0, #0
9001dc1c:	f000 80fa 	beq.w	9001de14 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
9001dc20:	f1be 0fff 	cmp.w	lr, #255	; 0xff
9001dc24:	d01b      	beq.n	9001dc5e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
9001dc26:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
9001dc2a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
9001dc2e:	fb0e fa0a 	mul.w	sl, lr, sl
9001dc32:	fb0e fe03 	mul.w	lr, lr, r3
9001dc36:	ea4f 231a 	mov.w	r3, sl, lsr #8
9001dc3a:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
9001dc3e:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
9001dc42:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
9001dc46:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
9001dc4a:	4453      	add	r3, sl
9001dc4c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
9001dc50:	0a1b      	lsrs	r3, r3, #8
9001dc52:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
9001dc56:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
9001dc5a:	ea43 030c 	orr.w	r3, r3, ip
9001dc5e:	9c15      	ldr	r4, [sp, #84]	; 0x54
9001dc60:	2cff      	cmp	r4, #255	; 0xff
9001dc62:	d021      	beq.n	9001dca8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
9001dc64:	9c0e      	ldr	r4, [sp, #56]	; 0x38
9001dc66:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
9001dc6a:	9c15      	ldr	r4, [sp, #84]	; 0x54
9001dc6c:	fb04 fb0b 	mul.w	fp, r4, fp
9001dc70:	9c0e      	ldr	r4, [sp, #56]	; 0x38
9001dc72:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
9001dc76:	9c15      	ldr	r4, [sp, #84]	; 0x54
9001dc78:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
9001dc7c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
9001dc80:	fb04 fa0a 	mul.w	sl, r4, sl
9001dc84:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
9001dc88:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
9001dc8c:	44de      	add	lr, fp
9001dc8e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
9001dc92:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
9001dc96:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
9001dc9a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
9001dc9e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
9001dca2:	ea4e 040a 	orr.w	r4, lr, sl
9001dca6:	940e      	str	r4, [sp, #56]	; 0x38
9001dca8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
9001dcaa:	2cff      	cmp	r4, #255	; 0xff
9001dcac:	d021      	beq.n	9001dcf2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
9001dcae:	9c0a      	ldr	r4, [sp, #40]	; 0x28
9001dcb0:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
9001dcb4:	9c13      	ldr	r4, [sp, #76]	; 0x4c
9001dcb6:	fb04 fb0b 	mul.w	fp, r4, fp
9001dcba:	9c0a      	ldr	r4, [sp, #40]	; 0x28
9001dcbc:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
9001dcc0:	9c13      	ldr	r4, [sp, #76]	; 0x4c
9001dcc2:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
9001dcc6:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
9001dcca:	fb04 fa0a 	mul.w	sl, r4, sl
9001dcce:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
9001dcd2:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
9001dcd6:	44de      	add	lr, fp
9001dcd8:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
9001dcdc:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
9001dce0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
9001dce4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
9001dce8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
9001dcec:	ea4e 040a 	orr.w	r4, lr, sl
9001dcf0:	940a      	str	r4, [sp, #40]	; 0x28
9001dcf2:	9c16      	ldr	r4, [sp, #88]	; 0x58
9001dcf4:	2cff      	cmp	r4, #255	; 0xff
9001dcf6:	d021      	beq.n	9001dd3c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x280>
9001dcf8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
9001dcfa:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
9001dcfe:	9c16      	ldr	r4, [sp, #88]	; 0x58
9001dd00:	fb04 fb0b 	mul.w	fp, r4, fp
9001dd04:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
9001dd06:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
9001dd0a:	9c16      	ldr	r4, [sp, #88]	; 0x58
9001dd0c:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
9001dd10:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
9001dd14:	fb04 fa0a 	mul.w	sl, r4, sl
9001dd18:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
9001dd1c:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
9001dd20:	44de      	add	lr, fp
9001dd22:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
9001dd26:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
9001dd2a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
9001dd2e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
9001dd32:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
9001dd36:	ea4e 040a 	orr.w	r4, lr, sl
9001dd3a:	940f      	str	r4, [sp, #60]	; 0x3c
9001dd3c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
9001dd3e:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
9001dd42:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
9001dd46:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
9001dd4a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
9001dd4c:	fb08 fc0c 	mul.w	ip, r8, ip
9001dd50:	fb02 cc0e 	mla	ip, r2, lr, ip
9001dd54:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
9001dd58:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
9001dd5a:	fb01 cc0e 	mla	ip, r1, lr, ip
9001dd5e:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
9001dd62:	9c0e      	ldr	r4, [sp, #56]	; 0x38
9001dd64:	fb09 cc0e 	mla	ip, r9, lr, ip
9001dd68:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
9001dd6c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
9001dd6e:	fb08 f80e 	mul.w	r8, r8, lr
9001dd72:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
9001dd76:	fb02 8303 	mla	r3, r2, r3, r8
9001dd7a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
9001dd7c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
9001dd80:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
9001dd84:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
9001dd86:	fb01 330a 	mla	r3, r1, sl, r3
9001dd8a:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
9001dd8e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
9001dd90:	fb09 3901 	mla	r9, r9, r1, r3
9001dd94:	883b      	ldrh	r3, [r7, #0]
9001dd96:	4342      	muls	r2, r0
9001dd98:	ea4f 2919 	mov.w	r9, r9, lsr #8
9001dd9c:	1c50      	adds	r0, r2, #1
9001dd9e:	1219      	asrs	r1, r3, #8
9001dda0:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
9001dda4:	eb00 2012 	add.w	r0, r0, r2, lsr #8
9001dda8:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
9001ddac:	ea4c 0c09 	orr.w	ip, ip, r9
9001ddb0:	ea6f 2010 	mvn.w	r0, r0, lsr #8
9001ddb4:	ea4f 421c 	mov.w	r2, ip, lsr #16
9001ddb8:	f3cc 2e07 	ubfx	lr, ip, #8, #8
9001ddbc:	b2c0      	uxtb	r0, r0
9001ddbe:	fb12 f204 	smulbb	r2, r2, r4
9001ddc2:	fa5f fc8c 	uxtb.w	ip, ip
9001ddc6:	fb1e fe04 	smulbb	lr, lr, r4
9001ddca:	fb01 2100 	mla	r1, r1, r0, r2
9001ddce:	10da      	asrs	r2, r3, #3
9001ddd0:	fb1c fc04 	smulbb	ip, ip, r4
9001ddd4:	00db      	lsls	r3, r3, #3
9001ddd6:	b289      	uxth	r1, r1
9001ddd8:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
9001dddc:	b2db      	uxtb	r3, r3
9001ddde:	fb02 e200 	mla	r2, r2, r0, lr
9001dde2:	fb03 c300 	mla	r3, r3, r0, ip
9001dde6:	b292      	uxth	r2, r2
9001dde8:	fa1f fc83 	uxth.w	ip, r3
9001ddec:	1c4b      	adds	r3, r1, #1
9001ddee:	eb03 2111 	add.w	r1, r3, r1, lsr #8
9001ddf2:	f10c 0301 	add.w	r3, ip, #1
9001ddf6:	eb03 231c 	add.w	r3, r3, ip, lsr #8
9001ddfa:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
9001ddfe:	f3c3 23c4 	ubfx	r3, r3, #11, #5
9001de02:	430b      	orrs	r3, r1
9001de04:	1c51      	adds	r1, r2, #1
9001de06:	eb01 2212 	add.w	r2, r1, r2, lsr #8
9001de0a:	0952      	lsrs	r2, r2, #5
9001de0c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
9001de10:	4313      	orrs	r3, r2
9001de12:	803b      	strh	r3, [r7, #0]
9001de14:	9b2b      	ldr	r3, [sp, #172]	; 0xac
9001de16:	3702      	adds	r7, #2
9001de18:	9a29      	ldr	r2, [sp, #164]	; 0xa4
9001de1a:	441a      	add	r2, r3
9001de1c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
9001de1e:	441d      	add	r5, r3
9001de20:	9b1a      	ldr	r3, [sp, #104]	; 0x68
9001de22:	9229      	str	r2, [sp, #164]	; 0xa4
9001de24:	3b01      	subs	r3, #1
9001de26:	931a      	str	r3, [sp, #104]	; 0x68
9001de28:	e694      	b.n	9001db54 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
9001de2a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
9001de2c:	9c29      	ldr	r4, [sp, #164]	; 0xa4
9001de2e:	441c      	add	r4, r3
9001de30:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
9001de32:	441d      	add	r5, r3
9001de34:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001de36:	9429      	str	r4, [sp, #164]	; 0xa4
9001de38:	3b01      	subs	r3, #1
9001de3a:	9309      	str	r3, [sp, #36]	; 0x24
9001de3c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
9001de3e:	3302      	adds	r3, #2
9001de40:	930c      	str	r3, [sp, #48]	; 0x30
9001de42:	e667      	b.n	9001db14 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
9001de44:	d024      	beq.n	9001de90 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d4>
9001de46:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001de48:	982b      	ldr	r0, [sp, #172]	; 0xac
9001de4a:	3b01      	subs	r3, #1
9001de4c:	9c29      	ldr	r4, [sp, #164]	; 0xa4
9001de4e:	fb00 4003 	mla	r0, r0, r3, r4
9001de52:	1400      	asrs	r0, r0, #16
9001de54:	f53f ae7b 	bmi.w	9001db4e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
9001de58:	3901      	subs	r1, #1
9001de5a:	4288      	cmp	r0, r1
9001de5c:	f6bf ae77 	bge.w	9001db4e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
9001de60:	992c      	ldr	r1, [sp, #176]	; 0xb0
9001de62:	fb01 5303 	mla	r3, r1, r3, r5
9001de66:	141b      	asrs	r3, r3, #16
9001de68:	f53f ae71 	bmi.w	9001db4e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
9001de6c:	3a01      	subs	r2, #1
9001de6e:	4293      	cmp	r3, r2
9001de70:	f6bf ae6d 	bge.w	9001db4e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
9001de74:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
9001de78:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
9001de7c:	f1bb 0f00 	cmp.w	fp, #0
9001de80:	dc70      	bgt.n	9001df64 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a8>
9001de82:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001de84:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
9001de88:	9b0c      	ldr	r3, [sp, #48]	; 0x30
9001de8a:	eb03 0344 	add.w	r3, r3, r4, lsl #1
9001de8e:	930c      	str	r3, [sp, #48]	; 0x30
9001de90:	9b19      	ldr	r3, [sp, #100]	; 0x64
9001de92:	2b00      	cmp	r3, #0
9001de94:	f340 81be 	ble.w	9001e214 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x758>
9001de98:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
9001de9c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
9001de9e:	ee30 0a04 	vadd.f32	s0, s0, s8
9001dea2:	ee70 0aa4 	vadd.f32	s1, s1, s9
9001dea6:	eef0 6a62 	vmov.f32	s13, s5
9001deaa:	eec7 7a00 	vdiv.f32	s15, s14, s0
9001deae:	ee31 1a05 	vadd.f32	s2, s2, s10
9001deb2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9001deb6:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
9001deba:	eef0 6a43 	vmov.f32	s13, s6
9001debe:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9001dec2:	ee16 5a90 	vmov	r5, s13
9001dec6:	ee20 7aa7 	vmul.f32	s14, s1, s15
9001deca:	ee61 7a27 	vmul.f32	s15, s2, s15
9001dece:	ee77 2a62 	vsub.f32	s5, s14, s5
9001ded2:	ee37 3ac3 	vsub.f32	s6, s15, s6
9001ded6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9001deda:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9001dede:	ee12 2a90 	vmov	r2, s5
9001dee2:	eef0 2a47 	vmov.f32	s5, s14
9001dee6:	fb92 f3f3 	sdiv	r3, r2, r3
9001deea:	ee13 2a10 	vmov	r2, s6
9001deee:	932b      	str	r3, [sp, #172]	; 0xac
9001def0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
9001def2:	eeb0 3a67 	vmov.f32	s6, s15
9001def6:	fb92 f3f3 	sdiv	r3, r2, r3
9001defa:	932c      	str	r3, [sp, #176]	; 0xb0
9001defc:	9b19      	ldr	r3, [sp, #100]	; 0x64
9001defe:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
9001df00:	3b01      	subs	r3, #1
9001df02:	9319      	str	r3, [sp, #100]	; 0x64
9001df04:	9b28      	ldr	r3, [sp, #160]	; 0xa0
9001df06:	bf08      	it	eq
9001df08:	4613      	moveq	r3, r2
9001df0a:	9309      	str	r3, [sp, #36]	; 0x24
9001df0c:	e5f4      	b.n	9001daf8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
9001df0e:	2900      	cmp	r1, #0
9001df10:	f43f ae66 	beq.w	9001dbe0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
9001df14:	f818 0000 	ldrb.w	r0, [r8, r0]
9001df18:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
9001df1c:	900a      	str	r0, [sp, #40]	; 0x28
9001df1e:	0e00      	lsrs	r0, r0, #24
9001df20:	9013      	str	r0, [sp, #76]	; 0x4c
9001df22:	e65d      	b.n	9001dbe0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
9001df24:	f113 0801 	adds.w	r8, r3, #1
9001df28:	f53f af74 	bmi.w	9001de14 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
9001df2c:	4540      	cmp	r0, r8
9001df2e:	f6ff af71 	blt.w	9001de14 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
9001df32:	f11c 0801 	adds.w	r8, ip, #1
9001df36:	f53f af6d 	bmi.w	9001de14 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
9001df3a:	45c6      	cmp	lr, r8
9001df3c:	f6ff af6a 	blt.w	9001de14 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
9001df40:	9c1c      	ldr	r4, [sp, #112]	; 0x70
9001df42:	b200      	sxth	r0, r0
9001df44:	9302      	str	r3, [sp, #8]
9001df46:	fa0f f38e 	sxth.w	r3, lr
9001df4a:	9000      	str	r0, [sp, #0]
9001df4c:	9301      	str	r3, [sp, #4]
9001df4e:	4633      	mov	r3, r6
9001df50:	981d      	ldr	r0, [sp, #116]	; 0x74
9001df52:	e9cd 1405 	strd	r1, r4, [sp, #20]
9001df56:	e9cd c203 	strd	ip, r2, [sp, #12]
9001df5a:	4639      	mov	r1, r7
9001df5c:	9a12      	ldr	r2, [sp, #72]	; 0x48
9001df5e:	f7ff fc63 	bl	9001d828 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>
9001df62:	e757      	b.n	9001de14 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
9001df64:	9b29      	ldr	r3, [sp, #164]	; 0xa4
9001df66:	f3c5 3003 	ubfx	r0, r5, #12, #4
9001df6a:	9c29      	ldr	r4, [sp, #164]	; 0xa4
9001df6c:	f3c3 3203 	ubfx	r2, r3, #12, #4
9001df70:	9b30      	ldr	r3, [sp, #192]	; 0xc0
9001df72:	1427      	asrs	r7, r4, #16
9001df74:	9c12      	ldr	r4, [sp, #72]	; 0x48
9001df76:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
9001df7a:	142b      	asrs	r3, r5, #16
9001df7c:	fb01 7303 	mla	r3, r1, r3, r7
9001df80:	18e7      	adds	r7, r4, r3
9001df82:	5ce3      	ldrb	r3, [r4, r3]
9001df84:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
9001df88:	ea4f 6c13 	mov.w	ip, r3, lsr #24
9001df8c:	2a00      	cmp	r2, #0
9001df8e:	f000 8137 	beq.w	9001e200 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x744>
9001df92:	f897 e001 	ldrb.w	lr, [r7, #1]
9001df96:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
9001df9a:	9410      	str	r4, [sp, #64]	; 0x40
9001df9c:	0e24      	lsrs	r4, r4, #24
9001df9e:	9417      	str	r4, [sp, #92]	; 0x5c
9001dfa0:	b170      	cbz	r0, 9001dfc0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
9001dfa2:	eb07 0e01 	add.w	lr, r7, r1
9001dfa6:	5c79      	ldrb	r1, [r7, r1]
9001dfa8:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
9001dfac:	910b      	str	r1, [sp, #44]	; 0x2c
9001dfae:	0e09      	lsrs	r1, r1, #24
9001dfb0:	9114      	str	r1, [sp, #80]	; 0x50
9001dfb2:	f89e 1001 	ldrb.w	r1, [lr, #1]
9001dfb6:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
9001dfba:	9111      	str	r1, [sp, #68]	; 0x44
9001dfbc:	0e09      	lsrs	r1, r1, #24
9001dfbe:	9118      	str	r1, [sp, #96]	; 0x60
9001dfc0:	b292      	uxth	r2, r2
9001dfc2:	9917      	ldr	r1, [sp, #92]	; 0x5c
9001dfc4:	b280      	uxth	r0, r0
9001dfc6:	9c14      	ldr	r4, [sp, #80]	; 0x50
9001dfc8:	fb02 f800 	mul.w	r8, r2, r0
9001dfcc:	0112      	lsls	r2, r2, #4
9001dfce:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
9001dfd2:	eba2 0e08 	sub.w	lr, r2, r8
9001dfd6:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
9001dfda:	b280      	uxth	r0, r0
9001dfdc:	fa1f fe8e 	uxth.w	lr, lr
9001dfe0:	1a12      	subs	r2, r2, r0
9001dfe2:	fb0e f101 	mul.w	r1, lr, r1
9001dfe6:	b292      	uxth	r2, r2
9001dfe8:	fb02 110c 	mla	r1, r2, ip, r1
9001dfec:	fb00 1104 	mla	r1, r0, r4, r1
9001dff0:	9c18      	ldr	r4, [sp, #96]	; 0x60
9001dff2:	fb08 1104 	mla	r1, r8, r4, r1
9001dff6:	f3c1 2107 	ubfx	r1, r1, #8, #8
9001dffa:	2900      	cmp	r1, #0
9001dffc:	f000 80f5 	beq.w	9001e1ea <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72e>
9001e000:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
9001e004:	d019      	beq.n	9001e03a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x57e>
9001e006:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
9001e00a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
9001e00e:	fb0c fa0a 	mul.w	sl, ip, sl
9001e012:	fb0c fc03 	mul.w	ip, ip, r3
9001e016:	ea4f 231a 	mov.w	r3, sl, lsr #8
9001e01a:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
9001e01e:	f50c 7780 	add.w	r7, ip, #256	; 0x100
9001e022:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
9001e026:	eb07 271c 	add.w	r7, r7, ip, lsr #8
9001e02a:	4453      	add	r3, sl
9001e02c:	0a3f      	lsrs	r7, r7, #8
9001e02e:	0a1b      	lsrs	r3, r3, #8
9001e030:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
9001e034:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
9001e038:	433b      	orrs	r3, r7
9001e03a:	9c17      	ldr	r4, [sp, #92]	; 0x5c
9001e03c:	2cff      	cmp	r4, #255	; 0xff
9001e03e:	d020      	beq.n	9001e082 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c6>
9001e040:	9c10      	ldr	r4, [sp, #64]	; 0x40
9001e042:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
9001e046:	9c17      	ldr	r4, [sp, #92]	; 0x5c
9001e048:	4367      	muls	r7, r4
9001e04a:	9c10      	ldr	r4, [sp, #64]	; 0x40
9001e04c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
9001e050:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
9001e054:	9c17      	ldr	r4, [sp, #92]	; 0x5c
9001e056:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
9001e05a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
9001e05e:	fb04 fa0a 	mul.w	sl, r4, sl
9001e062:	44bc      	add	ip, r7
9001e064:	f50a 7780 	add.w	r7, sl, #256	; 0x100
9001e068:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
9001e06c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
9001e070:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
9001e074:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
9001e078:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
9001e07c:	ea4c 040a 	orr.w	r4, ip, sl
9001e080:	9410      	str	r4, [sp, #64]	; 0x40
9001e082:	9c14      	ldr	r4, [sp, #80]	; 0x50
9001e084:	2cff      	cmp	r4, #255	; 0xff
9001e086:	d020      	beq.n	9001e0ca <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60e>
9001e088:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
9001e08a:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
9001e08e:	9c14      	ldr	r4, [sp, #80]	; 0x50
9001e090:	4367      	muls	r7, r4
9001e092:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
9001e094:	ea4f 2c17 	mov.w	ip, r7, lsr #8
9001e098:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
9001e09c:	9c14      	ldr	r4, [sp, #80]	; 0x50
9001e09e:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
9001e0a2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
9001e0a6:	fb04 fa0a 	mul.w	sl, r4, sl
9001e0aa:	44bc      	add	ip, r7
9001e0ac:	f50a 7780 	add.w	r7, sl, #256	; 0x100
9001e0b0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
9001e0b4:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
9001e0b8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
9001e0bc:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
9001e0c0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
9001e0c4:	ea4c 040a 	orr.w	r4, ip, sl
9001e0c8:	940b      	str	r4, [sp, #44]	; 0x2c
9001e0ca:	9c18      	ldr	r4, [sp, #96]	; 0x60
9001e0cc:	2cff      	cmp	r4, #255	; 0xff
9001e0ce:	d020      	beq.n	9001e112 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x656>
9001e0d0:	9c11      	ldr	r4, [sp, #68]	; 0x44
9001e0d2:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
9001e0d6:	9c18      	ldr	r4, [sp, #96]	; 0x60
9001e0d8:	4367      	muls	r7, r4
9001e0da:	9c11      	ldr	r4, [sp, #68]	; 0x44
9001e0dc:	ea4f 2c17 	mov.w	ip, r7, lsr #8
9001e0e0:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
9001e0e4:	9c18      	ldr	r4, [sp, #96]	; 0x60
9001e0e6:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
9001e0ea:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
9001e0ee:	fb04 fa0a 	mul.w	sl, r4, sl
9001e0f2:	44bc      	add	ip, r7
9001e0f4:	f50a 7780 	add.w	r7, sl, #256	; 0x100
9001e0f8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
9001e0fc:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
9001e100:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
9001e104:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
9001e108:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
9001e10c:	ea4c 040a 	orr.w	r4, ip, sl
9001e110:	9411      	str	r4, [sp, #68]	; 0x44
9001e112:	9c10      	ldr	r4, [sp, #64]	; 0x40
9001e114:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
9001e118:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
9001e11c:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
9001e120:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
9001e122:	fb0e f707 	mul.w	r7, lr, r7
9001e126:	fb02 770c 	mla	r7, r2, ip, r7
9001e12a:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
9001e12e:	9c11      	ldr	r4, [sp, #68]	; 0x44
9001e130:	fb00 770c 	mla	r7, r0, ip, r7
9001e134:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
9001e138:	9c10      	ldr	r4, [sp, #64]	; 0x40
9001e13a:	fb08 770c 	mla	r7, r8, ip, r7
9001e13e:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
9001e142:	9c0d      	ldr	r4, [sp, #52]	; 0x34
9001e144:	fb0e fe0c 	mul.w	lr, lr, ip
9001e148:	0a3f      	lsrs	r7, r7, #8
9001e14a:	fb02 e303 	mla	r3, r2, r3, lr
9001e14e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
9001e150:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
9001e154:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
9001e158:	9a11      	ldr	r2, [sp, #68]	; 0x44
9001e15a:	fb00 330a 	mla	r3, r0, sl, r3
9001e15e:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
9001e162:	f8b9 0000 	ldrh.w	r0, [r9]
9001e166:	fb08 3c0c 	mla	ip, r8, ip, r3
9001e16a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
9001e16c:	1202      	asrs	r2, r0, #8
9001e16e:	434b      	muls	r3, r1
9001e170:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
9001e174:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
9001e178:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
9001e17c:	1c59      	adds	r1, r3, #1
9001e17e:	ea47 070c 	orr.w	r7, r7, ip
9001e182:	eb01 2113 	add.w	r1, r1, r3, lsr #8
9001e186:	0c3b      	lsrs	r3, r7, #16
9001e188:	ea6f 2111 	mvn.w	r1, r1, lsr #8
9001e18c:	f3c7 2c07 	ubfx	ip, r7, #8, #8
9001e190:	b2ff      	uxtb	r7, r7
9001e192:	fb13 f304 	smulbb	r3, r3, r4
9001e196:	b2c9      	uxtb	r1, r1
9001e198:	fb1c fc04 	smulbb	ip, ip, r4
9001e19c:	fb02 3201 	mla	r2, r2, r1, r3
9001e1a0:	10c3      	asrs	r3, r0, #3
9001e1a2:	fb17 f704 	smulbb	r7, r7, r4
9001e1a6:	00c0      	lsls	r0, r0, #3
9001e1a8:	b292      	uxth	r2, r2
9001e1aa:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
9001e1ae:	b2c0      	uxtb	r0, r0
9001e1b0:	fb03 c301 	mla	r3, r3, r1, ip
9001e1b4:	f102 0c01 	add.w	ip, r2, #1
9001e1b8:	fb00 7001 	mla	r0, r0, r1, r7
9001e1bc:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
9001e1c0:	b280      	uxth	r0, r0
9001e1c2:	f402 4c78 	and.w	ip, r2, #63488	; 0xf800
9001e1c6:	b29b      	uxth	r3, r3
9001e1c8:	1c42      	adds	r2, r0, #1
9001e1ca:	eb02 2210 	add.w	r2, r2, r0, lsr #8
9001e1ce:	f3c2 22c4 	ubfx	r2, r2, #11, #5
9001e1d2:	ea42 020c 	orr.w	r2, r2, ip
9001e1d6:	f103 0c01 	add.w	ip, r3, #1
9001e1da:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
9001e1de:	095b      	lsrs	r3, r3, #5
9001e1e0:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9001e1e4:	431a      	orrs	r2, r3
9001e1e6:	f8a9 2000 	strh.w	r2, [r9]
9001e1ea:	9b2b      	ldr	r3, [sp, #172]	; 0xac
9001e1ec:	f109 0902 	add.w	r9, r9, #2
9001e1f0:	9a29      	ldr	r2, [sp, #164]	; 0xa4
9001e1f2:	f10b 3bff 	add.w	fp, fp, #4294967295
9001e1f6:	441a      	add	r2, r3
9001e1f8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
9001e1fa:	9229      	str	r2, [sp, #164]	; 0xa4
9001e1fc:	441d      	add	r5, r3
9001e1fe:	e63d      	b.n	9001de7c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
9001e200:	2800      	cmp	r0, #0
9001e202:	f43f aedd 	beq.w	9001dfc0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
9001e206:	5c79      	ldrb	r1, [r7, r1]
9001e208:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
9001e20c:	910b      	str	r1, [sp, #44]	; 0x2c
9001e20e:	0e09      	lsrs	r1, r1, #24
9001e210:	9114      	str	r1, [sp, #80]	; 0x50
9001e212:	e6d5      	b.n	9001dfc0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
9001e214:	b01f      	add	sp, #124	; 0x7c
9001e216:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

9001e21a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>:
9001e21a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001e21e:	b089      	sub	sp, #36	; 0x24
9001e220:	9101      	str	r1, [sp, #4]
9001e222:	9801      	ldr	r0, [sp, #4]
9001e224:	f9bd c048 	ldrsh.w	ip, [sp, #72]	; 0x48
9001e228:	8800      	ldrh	r0, [r0, #0]
9001e22a:	f9bd 804c 	ldrsh.w	r8, [sp, #76]	; 0x4c
9001e22e:	1206      	asrs	r6, r0, #8
9001e230:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
9001e234:	f89d 405c 	ldrb.w	r4, [sp, #92]	; 0x5c
9001e238:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
9001e23c:	9602      	str	r6, [sp, #8]
9001e23e:	10c6      	asrs	r6, r0, #3
9001e240:	00c0      	lsls	r0, r0, #3
9001e242:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
9001e246:	b2c0      	uxtb	r0, r0
9001e248:	9603      	str	r6, [sp, #12]
9001e24a:	9004      	str	r0, [sp, #16]
9001e24c:	e9dd 1714 	ldrd	r1, r7, [sp, #80]	; 0x50
9001e250:	fb07 100c 	mla	r0, r7, ip, r1
9001e254:	2f00      	cmp	r7, #0
9001e256:	eb02 0e00 	add.w	lr, r2, r0
9001e25a:	f2c0 810a 	blt.w	9001e472 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x258>
9001e25e:	45b8      	cmp	r8, r7
9001e260:	f340 8107 	ble.w	9001e472 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x258>
9001e264:	2900      	cmp	r1, #0
9001e266:	f2c0 8102 	blt.w	9001e46e <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x254>
9001e26a:	458c      	cmp	ip, r1
9001e26c:	f340 80ff 	ble.w	9001e46e <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x254>
9001e270:	5c12      	ldrb	r2, [r2, r0]
9001e272:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
9001e276:	1c4a      	adds	r2, r1, #1
9001e278:	f100 80fe 	bmi.w	9001e478 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x25e>
9001e27c:	4594      	cmp	ip, r2
9001e27e:	f340 80fb 	ble.w	9001e478 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x25e>
9001e282:	2d00      	cmp	r5, #0
9001e284:	f000 80fa 	beq.w	9001e47c <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x262>
9001e288:	f89e 2001 	ldrb.w	r2, [lr, #1]
9001e28c:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
9001e290:	3701      	adds	r7, #1
9001e292:	f100 80f7 	bmi.w	9001e484 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x26a>
9001e296:	45b8      	cmp	r8, r7
9001e298:	f340 80f4 	ble.w	9001e484 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x26a>
9001e29c:	2c00      	cmp	r4, #0
9001e29e:	f000 80f4 	beq.w	9001e48a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x270>
9001e2a2:	2900      	cmp	r1, #0
9001e2a4:	eb0e 020c 	add.w	r2, lr, ip
9001e2a8:	f2c0 80ea 	blt.w	9001e480 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x266>
9001e2ac:	458c      	cmp	ip, r1
9001e2ae:	f340 80e7 	ble.w	9001e480 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x266>
9001e2b2:	f81e 700c 	ldrb.w	r7, [lr, ip]
9001e2b6:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
9001e2ba:	3101      	adds	r1, #1
9001e2bc:	f100 80e8 	bmi.w	9001e490 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x276>
9001e2c0:	458c      	cmp	ip, r1
9001e2c2:	f340 80e5 	ble.w	9001e490 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x276>
9001e2c6:	2d00      	cmp	r5, #0
9001e2c8:	f000 80e4 	beq.w	9001e494 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x27a>
9001e2cc:	7852      	ldrb	r2, [r2, #1]
9001e2ce:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
9001e2d2:	0e0b      	lsrs	r3, r1, #24
9001e2d4:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
9001e2d8:	ea4f 6a10 	mov.w	sl, r0, lsr #24
9001e2dc:	9300      	str	r3, [sp, #0]
9001e2de:	b2a4      	uxth	r4, r4
9001e2e0:	b2ab      	uxth	r3, r5
9001e2e2:	f000 15ff 	and.w	r5, r0, #16711935	; 0xff00ff
9001e2e6:	ea4f 6b16 	mov.w	fp, r6, lsr #24
9001e2ea:	fb03 f904 	mul.w	r9, r3, r4
9001e2ee:	011b      	lsls	r3, r3, #4
9001e2f0:	fb0a f505 	mul.w	r5, sl, r5
9001e2f4:	ea4f 6817 	mov.w	r8, r7, lsr #24
9001e2f8:	eba3 0e09 	sub.w	lr, r3, r9
9001e2fc:	f5c3 7280 	rsb	r2, r3, #256	; 0x100
9001e300:	f400 437f 	and.w	r3, r0, #65280	; 0xff00
9001e304:	0a28      	lsrs	r0, r5, #8
9001e306:	f105 1501 	add.w	r5, r5, #65537	; 0x10001
9001e30a:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
9001e30e:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
9001e312:	fb0a f303 	mul.w	r3, sl, r3
9001e316:	fb08 f707 	mul.w	r7, r8, r7
9001e31a:	ebc9 1404 	rsb	r4, r9, r4, lsl #4
9001e31e:	4405      	add	r5, r0
9001e320:	fb08 fc0c 	mul.w	ip, r8, ip
9001e324:	b2a4      	uxth	r4, r4
9001e326:	0a2d      	lsrs	r5, r5, #8
9001e328:	fa1f fe8e 	uxth.w	lr, lr
9001e32c:	1b12      	subs	r2, r2, r4
9001e32e:	f005 10ff 	and.w	r0, r5, #16711935	; 0xff00ff
9001e332:	b292      	uxth	r2, r2
9001e334:	9005      	str	r0, [sp, #20]
9001e336:	f503 7080 	add.w	r0, r3, #256	; 0x100
9001e33a:	eb00 2313 	add.w	r3, r0, r3, lsr #8
9001e33e:	ea4f 201c 	mov.w	r0, ip, lsr #8
9001e342:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
9001e346:	0a1b      	lsrs	r3, r3, #8
9001e348:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
9001e34c:	9306      	str	r3, [sp, #24]
9001e34e:	f006 13ff 	and.w	r3, r6, #16711935	; 0xff00ff
9001e352:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
9001e356:	4460      	add	r0, ip
9001e358:	fb0b f303 	mul.w	r3, fp, r3
9001e35c:	fb0b f606 	mul.w	r6, fp, r6
9001e360:	0a00      	lsrs	r0, r0, #8
9001e362:	0a1d      	lsrs	r5, r3, #8
9001e364:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
9001e368:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
9001e36c:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
9001e370:	441d      	add	r5, r3
9001e372:	f506 7380 	add.w	r3, r6, #256	; 0x100
9001e376:	eb03 2616 	add.w	r6, r3, r6, lsr #8
9001e37a:	f507 7380 	add.w	r3, r7, #256	; 0x100
9001e37e:	0a2d      	lsrs	r5, r5, #8
9001e380:	eb03 2317 	add.w	r3, r3, r7, lsr #8
9001e384:	f001 17ff 	and.w	r7, r1, #16711935	; 0xff00ff
9001e388:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
9001e38c:	0a36      	lsrs	r6, r6, #8
9001e38e:	0a1b      	lsrs	r3, r3, #8
9001e390:	fb05 f50e 	mul.w	r5, r5, lr
9001e394:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
9001e398:	9307      	str	r3, [sp, #28]
9001e39a:	0e0b      	lsrs	r3, r1, #24
9001e39c:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
9001e3a0:	fb0e f606 	mul.w	r6, lr, r6
9001e3a4:	435f      	muls	r7, r3
9001e3a6:	4359      	muls	r1, r3
9001e3a8:	9b05      	ldr	r3, [sp, #20]
9001e3aa:	ea4f 2c17 	mov.w	ip, r7, lsr #8
9001e3ae:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
9001e3b2:	fb03 5502 	mla	r5, r3, r2, r5
9001e3b6:	9b06      	ldr	r3, [sp, #24]
9001e3b8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
9001e3bc:	fb0e fe0b 	mul.w	lr, lr, fp
9001e3c0:	44bc      	add	ip, r7
9001e3c2:	f501 7780 	add.w	r7, r1, #256	; 0x100
9001e3c6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
9001e3ca:	eb07 2111 	add.w	r1, r7, r1, lsr #8
9001e3ce:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
9001e3d2:	0a09      	lsrs	r1, r1, #8
9001e3d4:	fb0c 5509 	mla	r5, ip, r9, r5
9001e3d8:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
9001e3dc:	fb00 5504 	mla	r5, r0, r4, r5
9001e3e0:	f403 407f 	and.w	r0, r3, #65280	; 0xff00
9001e3e4:	9b07      	ldr	r3, [sp, #28]
9001e3e6:	fb02 6000 	mla	r0, r2, r0, r6
9001e3ea:	0a2d      	lsrs	r5, r5, #8
9001e3ec:	fb02 e20a 	mla	r2, r2, sl, lr
9001e3f0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
9001e3f4:	fb09 0001 	mla	r0, r9, r1, r0
9001e3f8:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
9001e3fc:	fb04 0003 	mla	r0, r4, r3, r0
9001e400:	9b00      	ldr	r3, [sp, #0]
9001e402:	fb04 2408 	mla	r4, r4, r8, r2
9001e406:	9a04      	ldr	r2, [sp, #16]
9001e408:	0a00      	lsrs	r0, r0, #8
9001e40a:	fb09 4903 	mla	r9, r9, r3, r4
9001e40e:	9b02      	ldr	r3, [sp, #8]
9001e410:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
9001e414:	ea6f 2929 	mvn.w	r9, r9, asr #8
9001e418:	4305      	orrs	r5, r0
9001e41a:	fa5f f989 	uxtb.w	r9, r9
9001e41e:	fb03 f109 	mul.w	r1, r3, r9
9001e422:	9b03      	ldr	r3, [sp, #12]
9001e424:	fb03 f309 	mul.w	r3, r3, r9
9001e428:	fb02 f909 	mul.w	r9, r2, r9
9001e42c:	1c4a      	adds	r2, r1, #1
9001e42e:	1c58      	adds	r0, r3, #1
9001e430:	eb02 2111 	add.w	r1, r2, r1, lsr #8
9001e434:	eb00 2013 	add.w	r0, r0, r3, lsr #8
9001e438:	0c2a      	lsrs	r2, r5, #16
9001e43a:	0a2b      	lsrs	r3, r5, #8
9001e43c:	eb02 2211 	add.w	r2, r2, r1, lsr #8
9001e440:	eb03 2310 	add.w	r3, r3, r0, lsr #8
9001e444:	0212      	lsls	r2, r2, #8
9001e446:	00db      	lsls	r3, r3, #3
9001e448:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
9001e44c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9001e450:	4313      	orrs	r3, r2
9001e452:	f109 0201 	add.w	r2, r9, #1
9001e456:	eb02 2919 	add.w	r9, r2, r9, lsr #8
9001e45a:	eb05 2519 	add.w	r5, r5, r9, lsr #8
9001e45e:	f3c5 05c4 	ubfx	r5, r5, #3, #5
9001e462:	431d      	orrs	r5, r3
9001e464:	9b01      	ldr	r3, [sp, #4]
9001e466:	801d      	strh	r5, [r3, #0]
9001e468:	b009      	add	sp, #36	; 0x24
9001e46a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001e46e:	2000      	movs	r0, #0
9001e470:	e701      	b.n	9001e276 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x5c>
9001e472:	2600      	movs	r6, #0
9001e474:	4630      	mov	r0, r6
9001e476:	e70b      	b.n	9001e290 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
9001e478:	2600      	movs	r6, #0
9001e47a:	e709      	b.n	9001e290 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
9001e47c:	462e      	mov	r6, r5
9001e47e:	e707      	b.n	9001e290 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
9001e480:	2700      	movs	r7, #0
9001e482:	e71a      	b.n	9001e2ba <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xa0>
9001e484:	2100      	movs	r1, #0
9001e486:	460f      	mov	r7, r1
9001e488:	e723      	b.n	9001e2d2 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
9001e48a:	4621      	mov	r1, r4
9001e48c:	4627      	mov	r7, r4
9001e48e:	e720      	b.n	9001e2d2 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
9001e490:	2100      	movs	r1, #0
9001e492:	e71e      	b.n	9001e2d2 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
9001e494:	4629      	mov	r1, r5
9001e496:	e71c      	b.n	9001e2d2 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>

9001e498 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
9001e498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001e49c:	b09b      	sub	sp, #108	; 0x6c
9001e49e:	9218      	str	r2, [sp, #96]	; 0x60
9001e4a0:	9a29      	ldr	r2, [sp, #164]	; 0xa4
9001e4a2:	9019      	str	r0, [sp, #100]	; 0x64
9001e4a4:	9116      	str	r1, [sp, #88]	; 0x58
9001e4a6:	6850      	ldr	r0, [r2, #4]
9001e4a8:	9307      	str	r3, [sp, #28]
9001e4aa:	6812      	ldr	r2, [r2, #0]
9001e4ac:	9d26      	ldr	r5, [sp, #152]	; 0x98
9001e4ae:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
9001e4b2:	fb00 1303 	mla	r3, r0, r3, r1
9001e4b6:	eb02 0343 	add.w	r3, r2, r3, lsl #1
9001e4ba:	930a      	str	r3, [sp, #40]	; 0x28
9001e4bc:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
9001e4be:	681b      	ldr	r3, [r3, #0]
9001e4c0:	930f      	str	r3, [sp, #60]	; 0x3c
9001e4c2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
9001e4c4:	685e      	ldr	r6, [r3, #4]
9001e4c6:	3604      	adds	r6, #4
9001e4c8:	9b16      	ldr	r3, [sp, #88]	; 0x58
9001e4ca:	2b00      	cmp	r3, #0
9001e4cc:	dc03      	bgt.n	9001e4d6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
9001e4ce:	9b18      	ldr	r3, [sp, #96]	; 0x60
9001e4d0:	2b00      	cmp	r3, #0
9001e4d2:	f340 8373 	ble.w	9001ebbc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x724>
9001e4d6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
9001e4d8:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
9001e4dc:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
9001e4e0:	1e48      	subs	r0, r1, #1
9001e4e2:	1e57      	subs	r7, r2, #1
9001e4e4:	9b07      	ldr	r3, [sp, #28]
9001e4e6:	2b00      	cmp	r3, #0
9001e4e8:	f340 818f 	ble.w	9001e80a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x372>
9001e4ec:	9c25      	ldr	r4, [sp, #148]	; 0x94
9001e4ee:	142b      	asrs	r3, r5, #16
9001e4f0:	ea5f 4c24 	movs.w	ip, r4, asr #16
9001e4f4:	d406      	bmi.n	9001e504 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
9001e4f6:	4584      	cmp	ip, r0
9001e4f8:	da04      	bge.n	9001e504 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
9001e4fa:	2b00      	cmp	r3, #0
9001e4fc:	db02      	blt.n	9001e504 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
9001e4fe:	42bb      	cmp	r3, r7
9001e500:	f2c0 8184 	blt.w	9001e80c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
9001e504:	f11c 0c01 	adds.w	ip, ip, #1
9001e508:	f100 8172 	bmi.w	9001e7f0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
9001e50c:	4561      	cmp	r1, ip
9001e50e:	f2c0 816f 	blt.w	9001e7f0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
9001e512:	3301      	adds	r3, #1
9001e514:	f100 816c 	bmi.w	9001e7f0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
9001e518:	429a      	cmp	r2, r3
9001e51a:	f2c0 8169 	blt.w	9001e7f0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
9001e51e:	9b07      	ldr	r3, [sp, #28]
9001e520:	9f0a      	ldr	r7, [sp, #40]	; 0x28
9001e522:	9317      	str	r3, [sp, #92]	; 0x5c
9001e524:	9b17      	ldr	r3, [sp, #92]	; 0x5c
9001e526:	2b00      	cmp	r3, #0
9001e528:	f340 818e 	ble.w	9001e848 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b0>
9001e52c:	9b25      	ldr	r3, [sp, #148]	; 0x94
9001e52e:	ea4f 4c25 	mov.w	ip, r5, asr #16
9001e532:	f3c5 3003 	ubfx	r0, r5, #12, #4
9001e536:	f3c3 3203 	ubfx	r2, r3, #12, #4
9001e53a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
9001e53c:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
9001e540:	9b25      	ldr	r3, [sp, #148]	; 0x94
9001e542:	141b      	asrs	r3, r3, #16
9001e544:	f100 81d1 	bmi.w	9001e8ea <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
9001e548:	f101 38ff 	add.w	r8, r1, #4294967295
9001e54c:	4543      	cmp	r3, r8
9001e54e:	f280 81cc 	bge.w	9001e8ea <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
9001e552:	f1bc 0f00 	cmp.w	ip, #0
9001e556:	f2c0 81c8 	blt.w	9001e8ea <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
9001e55a:	f10e 38ff 	add.w	r8, lr, #4294967295
9001e55e:	45c4      	cmp	ip, r8
9001e560:	f280 81c3 	bge.w	9001e8ea <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
9001e564:	b209      	sxth	r1, r1
9001e566:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
9001e568:	fb0c 3301 	mla	r3, ip, r1, r3
9001e56c:	eb04 0803 	add.w	r8, r4, r3
9001e570:	5ce3      	ldrb	r3, [r4, r3]
9001e572:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
9001e576:	ea4f 6e13 	mov.w	lr, r3, lsr #24
9001e57a:	2a00      	cmp	r2, #0
9001e57c:	f000 81aa 	beq.w	9001e8d4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x43c>
9001e580:	f898 c001 	ldrb.w	ip, [r8, #1]
9001e584:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
9001e588:	940b      	str	r4, [sp, #44]	; 0x2c
9001e58a:	0e24      	lsrs	r4, r4, #24
9001e58c:	9412      	str	r4, [sp, #72]	; 0x48
9001e58e:	b178      	cbz	r0, 9001e5b0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
9001e590:	eb08 0c01 	add.w	ip, r8, r1
9001e594:	f818 1001 	ldrb.w	r1, [r8, r1]
9001e598:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
9001e59c:	9108      	str	r1, [sp, #32]
9001e59e:	0e09      	lsrs	r1, r1, #24
9001e5a0:	9110      	str	r1, [sp, #64]	; 0x40
9001e5a2:	f89c 1001 	ldrb.w	r1, [ip, #1]
9001e5a6:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
9001e5aa:	910c      	str	r1, [sp, #48]	; 0x30
9001e5ac:	0e09      	lsrs	r1, r1, #24
9001e5ae:	9113      	str	r1, [sp, #76]	; 0x4c
9001e5b0:	b292      	uxth	r2, r2
9001e5b2:	9912      	ldr	r1, [sp, #72]	; 0x48
9001e5b4:	b280      	uxth	r0, r0
9001e5b6:	9c10      	ldr	r4, [sp, #64]	; 0x40
9001e5b8:	fb02 f900 	mul.w	r9, r2, r0
9001e5bc:	0112      	lsls	r2, r2, #4
9001e5be:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
9001e5c2:	eba2 0809 	sub.w	r8, r2, r9
9001e5c6:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
9001e5ca:	b280      	uxth	r0, r0
9001e5cc:	fa1f f888 	uxth.w	r8, r8
9001e5d0:	1a12      	subs	r2, r2, r0
9001e5d2:	fb08 f101 	mul.w	r1, r8, r1
9001e5d6:	b292      	uxth	r2, r2
9001e5d8:	fb02 110e 	mla	r1, r2, lr, r1
9001e5dc:	fb00 1104 	mla	r1, r0, r4, r1
9001e5e0:	9c13      	ldr	r4, [sp, #76]	; 0x4c
9001e5e2:	fb09 1104 	mla	r1, r9, r4, r1
9001e5e6:	f3c1 2107 	ubfx	r1, r1, #8, #8
9001e5ea:	2900      	cmp	r1, #0
9001e5ec:	f000 80f5 	beq.w	9001e7da <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
9001e5f0:	f1be 0fff 	cmp.w	lr, #255	; 0xff
9001e5f4:	d01b      	beq.n	9001e62e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
9001e5f6:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
9001e5fa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
9001e5fe:	fb0e fa0a 	mul.w	sl, lr, sl
9001e602:	fb0e fe03 	mul.w	lr, lr, r3
9001e606:	ea4f 231a 	mov.w	r3, sl, lsr #8
9001e60a:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
9001e60e:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
9001e612:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
9001e616:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
9001e61a:	4453      	add	r3, sl
9001e61c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
9001e620:	0a1b      	lsrs	r3, r3, #8
9001e622:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
9001e626:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
9001e62a:	ea43 030c 	orr.w	r3, r3, ip
9001e62e:	9c12      	ldr	r4, [sp, #72]	; 0x48
9001e630:	2cff      	cmp	r4, #255	; 0xff
9001e632:	d021      	beq.n	9001e678 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
9001e634:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
9001e636:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
9001e63a:	9c12      	ldr	r4, [sp, #72]	; 0x48
9001e63c:	fb04 fb0b 	mul.w	fp, r4, fp
9001e640:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
9001e642:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
9001e646:	9c12      	ldr	r4, [sp, #72]	; 0x48
9001e648:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
9001e64c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
9001e650:	fb04 fa0a 	mul.w	sl, r4, sl
9001e654:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
9001e658:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
9001e65c:	44de      	add	lr, fp
9001e65e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
9001e662:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
9001e666:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
9001e66a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
9001e66e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
9001e672:	ea4e 040a 	orr.w	r4, lr, sl
9001e676:	940b      	str	r4, [sp, #44]	; 0x2c
9001e678:	9c10      	ldr	r4, [sp, #64]	; 0x40
9001e67a:	2cff      	cmp	r4, #255	; 0xff
9001e67c:	d021      	beq.n	9001e6c2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
9001e67e:	9c08      	ldr	r4, [sp, #32]
9001e680:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
9001e684:	9c10      	ldr	r4, [sp, #64]	; 0x40
9001e686:	fb04 fb0b 	mul.w	fp, r4, fp
9001e68a:	9c08      	ldr	r4, [sp, #32]
9001e68c:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
9001e690:	9c10      	ldr	r4, [sp, #64]	; 0x40
9001e692:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
9001e696:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
9001e69a:	fb04 fa0a 	mul.w	sl, r4, sl
9001e69e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
9001e6a2:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
9001e6a6:	44de      	add	lr, fp
9001e6a8:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
9001e6ac:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
9001e6b0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
9001e6b4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
9001e6b8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
9001e6bc:	ea4e 040a 	orr.w	r4, lr, sl
9001e6c0:	9408      	str	r4, [sp, #32]
9001e6c2:	9c13      	ldr	r4, [sp, #76]	; 0x4c
9001e6c4:	2cff      	cmp	r4, #255	; 0xff
9001e6c6:	d021      	beq.n	9001e70c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x274>
9001e6c8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
9001e6ca:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
9001e6ce:	9c13      	ldr	r4, [sp, #76]	; 0x4c
9001e6d0:	fb04 fb0b 	mul.w	fp, r4, fp
9001e6d4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
9001e6d6:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
9001e6da:	9c13      	ldr	r4, [sp, #76]	; 0x4c
9001e6dc:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
9001e6e0:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
9001e6e4:	fb04 fa0a 	mul.w	sl, r4, sl
9001e6e8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
9001e6ec:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
9001e6f0:	44de      	add	lr, fp
9001e6f2:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
9001e6f6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
9001e6fa:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
9001e6fe:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
9001e702:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
9001e706:	ea4e 040a 	orr.w	r4, lr, sl
9001e70a:	940c      	str	r4, [sp, #48]	; 0x30
9001e70c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
9001e70e:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
9001e712:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
9001e716:	43c9      	mvns	r1, r1
9001e718:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
9001e71c:	9c08      	ldr	r4, [sp, #32]
9001e71e:	fb08 fc0c 	mul.w	ip, r8, ip
9001e722:	fb02 cc0e 	mla	ip, r2, lr, ip
9001e726:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
9001e72a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
9001e72c:	fb00 cc0e 	mla	ip, r0, lr, ip
9001e730:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
9001e734:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
9001e736:	fb09 cc0e 	mla	ip, r9, lr, ip
9001e73a:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
9001e73e:	fb08 f80e 	mul.w	r8, r8, lr
9001e742:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
9001e746:	fa5f fe81 	uxtb.w	lr, r1
9001e74a:	fb02 8303 	mla	r3, r2, r3, r8
9001e74e:	9a08      	ldr	r2, [sp, #32]
9001e750:	f8b7 8000 	ldrh.w	r8, [r7]
9001e754:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
9001e758:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
9001e75c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
9001e75e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
9001e762:	fb00 330a 	mla	r3, r0, sl, r3
9001e766:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
9001e76a:	ea4f 2228 	mov.w	r2, r8, asr #8
9001e76e:	fb09 3900 	mla	r9, r9, r0, r3
9001e772:	ea4f 00e8 	mov.w	r0, r8, asr #3
9001e776:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
9001e77a:	b2c9      	uxtb	r1, r1
9001e77c:	ea4f 2919 	mov.w	r9, r9, lsr #8
9001e780:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
9001e784:	fb02 f20e 	mul.w	r2, r2, lr
9001e788:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
9001e78c:	fb00 f00e 	mul.w	r0, r0, lr
9001e790:	1c53      	adds	r3, r2, #1
9001e792:	fb01 f10e 	mul.w	r1, r1, lr
9001e796:	ea4c 0c09 	orr.w	ip, ip, r9
9001e79a:	eb03 2212 	add.w	r2, r3, r2, lsr #8
9001e79e:	ea4f 431c 	mov.w	r3, ip, lsr #16
9001e7a2:	eb03 2312 	add.w	r3, r3, r2, lsr #8
9001e7a6:	4a60      	ldr	r2, [pc, #384]	; (9001e928 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>)
9001e7a8:	b2db      	uxtb	r3, r3
9001e7aa:	ea02 2203 	and.w	r2, r2, r3, lsl #8
9001e7ae:	1c43      	adds	r3, r0, #1
9001e7b0:	eb03 2010 	add.w	r0, r3, r0, lsr #8
9001e7b4:	ea4f 231c 	mov.w	r3, ip, lsr #8
9001e7b8:	eb03 2310 	add.w	r3, r3, r0, lsr #8
9001e7bc:	00db      	lsls	r3, r3, #3
9001e7be:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9001e7c2:	4313      	orrs	r3, r2
9001e7c4:	1c4a      	adds	r2, r1, #1
9001e7c6:	eb02 2111 	add.w	r1, r2, r1, lsr #8
9001e7ca:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
9001e7ce:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
9001e7d2:	ea4c 0c03 	orr.w	ip, ip, r3
9001e7d6:	f8a7 c000 	strh.w	ip, [r7]
9001e7da:	9b27      	ldr	r3, [sp, #156]	; 0x9c
9001e7dc:	3702      	adds	r7, #2
9001e7de:	9a25      	ldr	r2, [sp, #148]	; 0x94
9001e7e0:	441a      	add	r2, r3
9001e7e2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
9001e7e4:	441d      	add	r5, r3
9001e7e6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
9001e7e8:	9225      	str	r2, [sp, #148]	; 0x94
9001e7ea:	3b01      	subs	r3, #1
9001e7ec:	9317      	str	r3, [sp, #92]	; 0x5c
9001e7ee:	e699      	b.n	9001e524 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
9001e7f0:	9b27      	ldr	r3, [sp, #156]	; 0x9c
9001e7f2:	9c25      	ldr	r4, [sp, #148]	; 0x94
9001e7f4:	441c      	add	r4, r3
9001e7f6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
9001e7f8:	441d      	add	r5, r3
9001e7fa:	9b07      	ldr	r3, [sp, #28]
9001e7fc:	9425      	str	r4, [sp, #148]	; 0x94
9001e7fe:	3b01      	subs	r3, #1
9001e800:	9307      	str	r3, [sp, #28]
9001e802:	9b0a      	ldr	r3, [sp, #40]	; 0x28
9001e804:	3302      	adds	r3, #2
9001e806:	930a      	str	r3, [sp, #40]	; 0x28
9001e808:	e66c      	b.n	9001e4e4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
9001e80a:	d024      	beq.n	9001e856 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3be>
9001e80c:	9b07      	ldr	r3, [sp, #28]
9001e80e:	9827      	ldr	r0, [sp, #156]	; 0x9c
9001e810:	3b01      	subs	r3, #1
9001e812:	9c25      	ldr	r4, [sp, #148]	; 0x94
9001e814:	fb00 4003 	mla	r0, r0, r3, r4
9001e818:	1400      	asrs	r0, r0, #16
9001e81a:	f53f ae80 	bmi.w	9001e51e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
9001e81e:	3901      	subs	r1, #1
9001e820:	4288      	cmp	r0, r1
9001e822:	f6bf ae7c 	bge.w	9001e51e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
9001e826:	9928      	ldr	r1, [sp, #160]	; 0xa0
9001e828:	fb01 5303 	mla	r3, r1, r3, r5
9001e82c:	141b      	asrs	r3, r3, #16
9001e82e:	f53f ae76 	bmi.w	9001e51e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
9001e832:	3a01      	subs	r2, #1
9001e834:	4293      	cmp	r3, r2
9001e836:	f6bf ae72 	bge.w	9001e51e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
9001e83a:	f8dd b01c 	ldr.w	fp, [sp, #28]
9001e83e:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
9001e842:	f1bb 0f00 	cmp.w	fp, #0
9001e846:	dc71      	bgt.n	9001e92c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
9001e848:	9b07      	ldr	r3, [sp, #28]
9001e84a:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
9001e84e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
9001e850:	eb03 0344 	add.w	r3, r3, r4, lsl #1
9001e854:	930a      	str	r3, [sp, #40]	; 0x28
9001e856:	9b16      	ldr	r3, [sp, #88]	; 0x58
9001e858:	2b00      	cmp	r3, #0
9001e85a:	f340 81af 	ble.w	9001ebbc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x724>
9001e85e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
9001e862:	9b24      	ldr	r3, [sp, #144]	; 0x90
9001e864:	ee30 0a04 	vadd.f32	s0, s0, s8
9001e868:	ee70 0aa4 	vadd.f32	s1, s1, s9
9001e86c:	eef0 6a62 	vmov.f32	s13, s5
9001e870:	eec7 7a00 	vdiv.f32	s15, s14, s0
9001e874:	ee31 1a05 	vadd.f32	s2, s2, s10
9001e878:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9001e87c:	edcd 6a25 	vstr	s13, [sp, #148]	; 0x94
9001e880:	eef0 6a43 	vmov.f32	s13, s6
9001e884:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9001e888:	ee16 5a90 	vmov	r5, s13
9001e88c:	ee20 7aa7 	vmul.f32	s14, s1, s15
9001e890:	ee61 7a27 	vmul.f32	s15, s2, s15
9001e894:	ee77 2a62 	vsub.f32	s5, s14, s5
9001e898:	ee37 3ac3 	vsub.f32	s6, s15, s6
9001e89c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9001e8a0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9001e8a4:	ee12 2a90 	vmov	r2, s5
9001e8a8:	eef0 2a47 	vmov.f32	s5, s14
9001e8ac:	fb92 f3f3 	sdiv	r3, r2, r3
9001e8b0:	ee13 2a10 	vmov	r2, s6
9001e8b4:	9327      	str	r3, [sp, #156]	; 0x9c
9001e8b6:	9b24      	ldr	r3, [sp, #144]	; 0x90
9001e8b8:	eeb0 3a67 	vmov.f32	s6, s15
9001e8bc:	fb92 f3f3 	sdiv	r3, r2, r3
9001e8c0:	9328      	str	r3, [sp, #160]	; 0xa0
9001e8c2:	9b16      	ldr	r3, [sp, #88]	; 0x58
9001e8c4:	9a18      	ldr	r2, [sp, #96]	; 0x60
9001e8c6:	3b01      	subs	r3, #1
9001e8c8:	9316      	str	r3, [sp, #88]	; 0x58
9001e8ca:	9b24      	ldr	r3, [sp, #144]	; 0x90
9001e8cc:	bf08      	it	eq
9001e8ce:	4613      	moveq	r3, r2
9001e8d0:	9307      	str	r3, [sp, #28]
9001e8d2:	e5f9      	b.n	9001e4c8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
9001e8d4:	2800      	cmp	r0, #0
9001e8d6:	f43f ae6b 	beq.w	9001e5b0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
9001e8da:	f818 1001 	ldrb.w	r1, [r8, r1]
9001e8de:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
9001e8e2:	9108      	str	r1, [sp, #32]
9001e8e4:	0e09      	lsrs	r1, r1, #24
9001e8e6:	9110      	str	r1, [sp, #64]	; 0x40
9001e8e8:	e662      	b.n	9001e5b0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
9001e8ea:	f113 0801 	adds.w	r8, r3, #1
9001e8ee:	f53f af74 	bmi.w	9001e7da <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
9001e8f2:	4541      	cmp	r1, r8
9001e8f4:	f6ff af71 	blt.w	9001e7da <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
9001e8f8:	f11c 0801 	adds.w	r8, ip, #1
9001e8fc:	f53f af6d 	bmi.w	9001e7da <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
9001e900:	45c6      	cmp	lr, r8
9001e902:	f6ff af6a 	blt.w	9001e7da <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
9001e906:	b209      	sxth	r1, r1
9001e908:	e9cd 3c02 	strd	r3, ip, [sp, #8]
9001e90c:	fa0f f38e 	sxth.w	r3, lr
9001e910:	9100      	str	r1, [sp, #0]
9001e912:	4639      	mov	r1, r7
9001e914:	9301      	str	r3, [sp, #4]
9001e916:	4633      	mov	r3, r6
9001e918:	e9cd 2004 	strd	r2, r0, [sp, #16]
9001e91c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
9001e91e:	9819      	ldr	r0, [sp, #100]	; 0x64
9001e920:	f7ff fc7b 	bl	9001e21a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>
9001e924:	e759      	b.n	9001e7da <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
9001e926:	bf00      	nop
9001e928:	fffff800 	.word	0xfffff800
9001e92c:	9b25      	ldr	r3, [sp, #148]	; 0x94
9001e92e:	f3c5 3003 	ubfx	r0, r5, #12, #4
9001e932:	9c25      	ldr	r4, [sp, #148]	; 0x94
9001e934:	f3c3 3203 	ubfx	r2, r3, #12, #4
9001e938:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
9001e93a:	1427      	asrs	r7, r4, #16
9001e93c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
9001e93e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
9001e942:	142b      	asrs	r3, r5, #16
9001e944:	fb01 7303 	mla	r3, r1, r3, r7
9001e948:	18e7      	adds	r7, r4, r3
9001e94a:	5ce3      	ldrb	r3, [r4, r3]
9001e94c:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
9001e950:	ea4f 6c13 	mov.w	ip, r3, lsr #24
9001e954:	2a00      	cmp	r2, #0
9001e956:	f000 8127 	beq.w	9001eba8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x710>
9001e95a:	f897 e001 	ldrb.w	lr, [r7, #1]
9001e95e:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
9001e962:	940d      	str	r4, [sp, #52]	; 0x34
9001e964:	0e24      	lsrs	r4, r4, #24
9001e966:	9414      	str	r4, [sp, #80]	; 0x50
9001e968:	b170      	cbz	r0, 9001e988 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
9001e96a:	eb07 0e01 	add.w	lr, r7, r1
9001e96e:	5c79      	ldrb	r1, [r7, r1]
9001e970:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
9001e974:	9109      	str	r1, [sp, #36]	; 0x24
9001e976:	0e09      	lsrs	r1, r1, #24
9001e978:	9111      	str	r1, [sp, #68]	; 0x44
9001e97a:	f89e 1001 	ldrb.w	r1, [lr, #1]
9001e97e:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
9001e982:	910e      	str	r1, [sp, #56]	; 0x38
9001e984:	0e09      	lsrs	r1, r1, #24
9001e986:	9115      	str	r1, [sp, #84]	; 0x54
9001e988:	b292      	uxth	r2, r2
9001e98a:	9c11      	ldr	r4, [sp, #68]	; 0x44
9001e98c:	b280      	uxth	r0, r0
9001e98e:	fb02 f800 	mul.w	r8, r2, r0
9001e992:	0112      	lsls	r2, r2, #4
9001e994:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
9001e998:	eba2 0e08 	sub.w	lr, r2, r8
9001e99c:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
9001e9a0:	9a14      	ldr	r2, [sp, #80]	; 0x50
9001e9a2:	b280      	uxth	r0, r0
9001e9a4:	fa1f fe8e 	uxth.w	lr, lr
9001e9a8:	1a09      	subs	r1, r1, r0
9001e9aa:	fb0e f202 	mul.w	r2, lr, r2
9001e9ae:	b289      	uxth	r1, r1
9001e9b0:	fb01 220c 	mla	r2, r1, ip, r2
9001e9b4:	fb00 2204 	mla	r2, r0, r4, r2
9001e9b8:	9c15      	ldr	r4, [sp, #84]	; 0x54
9001e9ba:	fb08 2204 	mla	r2, r8, r4, r2
9001e9be:	f3c2 2207 	ubfx	r2, r2, #8, #8
9001e9c2:	2a00      	cmp	r2, #0
9001e9c4:	f000 80e5 	beq.w	9001eb92 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fa>
9001e9c8:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
9001e9cc:	d019      	beq.n	9001ea02 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56a>
9001e9ce:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
9001e9d2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
9001e9d6:	fb0c fa0a 	mul.w	sl, ip, sl
9001e9da:	fb0c fc03 	mul.w	ip, ip, r3
9001e9de:	ea4f 231a 	mov.w	r3, sl, lsr #8
9001e9e2:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
9001e9e6:	f50c 7780 	add.w	r7, ip, #256	; 0x100
9001e9ea:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
9001e9ee:	eb07 271c 	add.w	r7, r7, ip, lsr #8
9001e9f2:	4453      	add	r3, sl
9001e9f4:	0a3f      	lsrs	r7, r7, #8
9001e9f6:	0a1b      	lsrs	r3, r3, #8
9001e9f8:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
9001e9fc:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
9001ea00:	433b      	orrs	r3, r7
9001ea02:	9c14      	ldr	r4, [sp, #80]	; 0x50
9001ea04:	2cff      	cmp	r4, #255	; 0xff
9001ea06:	d020      	beq.n	9001ea4a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5b2>
9001ea08:	9c0d      	ldr	r4, [sp, #52]	; 0x34
9001ea0a:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
9001ea0e:	9c14      	ldr	r4, [sp, #80]	; 0x50
9001ea10:	4367      	muls	r7, r4
9001ea12:	9c0d      	ldr	r4, [sp, #52]	; 0x34
9001ea14:	ea4f 2c17 	mov.w	ip, r7, lsr #8
9001ea18:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
9001ea1c:	9c14      	ldr	r4, [sp, #80]	; 0x50
9001ea1e:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
9001ea22:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
9001ea26:	fb04 fa0a 	mul.w	sl, r4, sl
9001ea2a:	44bc      	add	ip, r7
9001ea2c:	f50a 7780 	add.w	r7, sl, #256	; 0x100
9001ea30:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
9001ea34:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
9001ea38:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
9001ea3c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
9001ea40:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
9001ea44:	ea4c 040a 	orr.w	r4, ip, sl
9001ea48:	940d      	str	r4, [sp, #52]	; 0x34
9001ea4a:	9c11      	ldr	r4, [sp, #68]	; 0x44
9001ea4c:	2cff      	cmp	r4, #255	; 0xff
9001ea4e:	d020      	beq.n	9001ea92 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5fa>
9001ea50:	9c09      	ldr	r4, [sp, #36]	; 0x24
9001ea52:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
9001ea56:	9c11      	ldr	r4, [sp, #68]	; 0x44
9001ea58:	4367      	muls	r7, r4
9001ea5a:	9c09      	ldr	r4, [sp, #36]	; 0x24
9001ea5c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
9001ea60:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
9001ea64:	9c11      	ldr	r4, [sp, #68]	; 0x44
9001ea66:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
9001ea6a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
9001ea6e:	fb04 fa0a 	mul.w	sl, r4, sl
9001ea72:	44bc      	add	ip, r7
9001ea74:	f50a 7780 	add.w	r7, sl, #256	; 0x100
9001ea78:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
9001ea7c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
9001ea80:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
9001ea84:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
9001ea88:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
9001ea8c:	ea4c 040a 	orr.w	r4, ip, sl
9001ea90:	9409      	str	r4, [sp, #36]	; 0x24
9001ea92:	9c15      	ldr	r4, [sp, #84]	; 0x54
9001ea94:	2cff      	cmp	r4, #255	; 0xff
9001ea96:	d020      	beq.n	9001eada <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x642>
9001ea98:	9c0e      	ldr	r4, [sp, #56]	; 0x38
9001ea9a:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
9001ea9e:	9c15      	ldr	r4, [sp, #84]	; 0x54
9001eaa0:	4367      	muls	r7, r4
9001eaa2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
9001eaa4:	ea4f 2c17 	mov.w	ip, r7, lsr #8
9001eaa8:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
9001eaac:	9c15      	ldr	r4, [sp, #84]	; 0x54
9001eaae:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
9001eab2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
9001eab6:	fb04 fa0a 	mul.w	sl, r4, sl
9001eaba:	44bc      	add	ip, r7
9001eabc:	f50a 7780 	add.w	r7, sl, #256	; 0x100
9001eac0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
9001eac4:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
9001eac8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
9001eacc:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
9001ead0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
9001ead4:	ea4c 040a 	orr.w	r4, ip, sl
9001ead8:	940e      	str	r4, [sp, #56]	; 0x38
9001eada:	9c0d      	ldr	r4, [sp, #52]	; 0x34
9001eadc:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
9001eae0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
9001eae4:	43d2      	mvns	r2, r2
9001eae6:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
9001eaea:	9c09      	ldr	r4, [sp, #36]	; 0x24
9001eaec:	b2d2      	uxtb	r2, r2
9001eaee:	fb0e f707 	mul.w	r7, lr, r7
9001eaf2:	fb01 770c 	mla	r7, r1, ip, r7
9001eaf6:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
9001eafa:	9c0e      	ldr	r4, [sp, #56]	; 0x38
9001eafc:	fb00 770c 	mla	r7, r0, ip, r7
9001eb00:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
9001eb04:	9c0d      	ldr	r4, [sp, #52]	; 0x34
9001eb06:	fb08 770c 	mla	r7, r8, ip, r7
9001eb0a:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
9001eb0e:	fb0e fe0c 	mul.w	lr, lr, ip
9001eb12:	0a3f      	lsrs	r7, r7, #8
9001eb14:	fb01 e303 	mla	r3, r1, r3, lr
9001eb18:	9909      	ldr	r1, [sp, #36]	; 0x24
9001eb1a:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
9001eb1e:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
9001eb22:	990e      	ldr	r1, [sp, #56]	; 0x38
9001eb24:	fb00 330a 	mla	r3, r0, sl, r3
9001eb28:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
9001eb2c:	fb08 3c0c 	mla	ip, r8, ip, r3
9001eb30:	f8b9 3000 	ldrh.w	r3, [r9]
9001eb34:	1218      	asrs	r0, r3, #8
9001eb36:	10d9      	asrs	r1, r3, #3
9001eb38:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
9001eb3c:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
9001eb40:	00db      	lsls	r3, r3, #3
9001eb42:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
9001eb46:	4350      	muls	r0, r2
9001eb48:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
9001eb4c:	b2db      	uxtb	r3, r3
9001eb4e:	4351      	muls	r1, r2
9001eb50:	ea47 070c 	orr.w	r7, r7, ip
9001eb54:	4353      	muls	r3, r2
9001eb56:	1c42      	adds	r2, r0, #1
9001eb58:	eb02 2010 	add.w	r0, r2, r0, lsr #8
9001eb5c:	0c3a      	lsrs	r2, r7, #16
9001eb5e:	eb02 2010 	add.w	r0, r2, r0, lsr #8
9001eb62:	4a18      	ldr	r2, [pc, #96]	; (9001ebc4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72c>)
9001eb64:	b2c0      	uxtb	r0, r0
9001eb66:	ea02 2000 	and.w	r0, r2, r0, lsl #8
9001eb6a:	1c4a      	adds	r2, r1, #1
9001eb6c:	eb02 2111 	add.w	r1, r2, r1, lsr #8
9001eb70:	0a3a      	lsrs	r2, r7, #8
9001eb72:	eb02 2111 	add.w	r1, r2, r1, lsr #8
9001eb76:	00c9      	lsls	r1, r1, #3
9001eb78:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
9001eb7c:	4301      	orrs	r1, r0
9001eb7e:	1c58      	adds	r0, r3, #1
9001eb80:	eb00 2013 	add.w	r0, r0, r3, lsr #8
9001eb84:	eb07 2710 	add.w	r7, r7, r0, lsr #8
9001eb88:	f3c7 00c4 	ubfx	r0, r7, #3, #5
9001eb8c:	4308      	orrs	r0, r1
9001eb8e:	f8a9 0000 	strh.w	r0, [r9]
9001eb92:	9b27      	ldr	r3, [sp, #156]	; 0x9c
9001eb94:	f109 0902 	add.w	r9, r9, #2
9001eb98:	9a25      	ldr	r2, [sp, #148]	; 0x94
9001eb9a:	f10b 3bff 	add.w	fp, fp, #4294967295
9001eb9e:	441a      	add	r2, r3
9001eba0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
9001eba2:	9225      	str	r2, [sp, #148]	; 0x94
9001eba4:	441d      	add	r5, r3
9001eba6:	e64c      	b.n	9001e842 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
9001eba8:	2800      	cmp	r0, #0
9001ebaa:	f43f aeed 	beq.w	9001e988 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
9001ebae:	5c79      	ldrb	r1, [r7, r1]
9001ebb0:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
9001ebb4:	9109      	str	r1, [sp, #36]	; 0x24
9001ebb6:	0e09      	lsrs	r1, r1, #24
9001ebb8:	9111      	str	r1, [sp, #68]	; 0x44
9001ebba:	e6e5      	b.n	9001e988 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
9001ebbc:	b01b      	add	sp, #108	; 0x6c
9001ebbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001ebc2:	bf00      	nop
9001ebc4:	fffff800 	.word	0xfffff800

9001ebc8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>:
9001ebc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001ebcc:	b085      	sub	sp, #20
9001ebce:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	; 0x40
9001ebd2:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
9001ebd6:	2800      	cmp	r0, #0
9001ebd8:	9103      	str	r1, [sp, #12]
9001ebda:	fb00 7406 	mla	r4, r0, r6, r7
9001ebde:	f9bd b03c 	ldrsh.w	fp, [sp, #60]	; 0x3c
9001ebe2:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
9001ebe6:	eb02 0544 	add.w	r5, r2, r4, lsl #1
9001ebea:	f89d e04c 	ldrb.w	lr, [sp, #76]	; 0x4c
9001ebee:	eb03 0904 	add.w	r9, r3, r4
9001ebf2:	9501      	str	r5, [sp, #4]
9001ebf4:	f2c0 8150 	blt.w	9001ee98 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2d0>
9001ebf8:	4583      	cmp	fp, r0
9001ebfa:	f340 814d 	ble.w	9001ee98 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2d0>
9001ebfe:	2f00      	cmp	r7, #0
9001ec00:	f2c0 8146 	blt.w	9001ee90 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2c8>
9001ec04:	42be      	cmp	r6, r7
9001ec06:	f340 8143 	ble.w	9001ee90 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2c8>
9001ec0a:	f813 c004 	ldrb.w	ip, [r3, r4]
9001ec0e:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
9001ec12:	f64f 041f 	movw	r4, #63519	; 0xf81f
9001ec16:	ea4f 02ec 	mov.w	r2, ip, asr #3
9001ec1a:	f423 65fc 	bic.w	r5, r3, #2016	; 0x7e0
9001ec1e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9001ec22:	4355      	muls	r5, r2
9001ec24:	fb0c f203 	mul.w	r2, ip, r3
9001ec28:	ea04 1355 	and.w	r3, r4, r5, lsr #5
9001ec2c:	f605 0501 	addw	r5, r5, #2049	; 0x801
9001ec30:	441d      	add	r5, r3
9001ec32:	f102 0320 	add.w	r3, r2, #32
9001ec36:	eb03 2312 	add.w	r3, r3, r2, lsr #8
9001ec3a:	ea04 1455 	and.w	r4, r4, r5, lsr #5
9001ec3e:	0a1b      	lsrs	r3, r3, #8
9001ec40:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9001ec44:	431c      	orrs	r4, r3
9001ec46:	1c7b      	adds	r3, r7, #1
9001ec48:	f100 812b 	bmi.w	9001eea2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2da>
9001ec4c:	429e      	cmp	r6, r3
9001ec4e:	f340 8128 	ble.w	9001eea2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2da>
9001ec52:	2900      	cmp	r1, #0
9001ec54:	f000 8128 	beq.w	9001eea8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e0>
9001ec58:	9a01      	ldr	r2, [sp, #4]
9001ec5a:	f899 3001 	ldrb.w	r3, [r9, #1]
9001ec5e:	8855      	ldrh	r5, [r2, #2]
9001ec60:	ea4f 08e3 	mov.w	r8, r3, asr #3
9001ec64:	f425 62fc 	bic.w	r2, r5, #2016	; 0x7e0
9001ec68:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
9001ec6c:	fb08 f802 	mul.w	r8, r8, r2
9001ec70:	f64f 021f 	movw	r2, #63519	; 0xf81f
9001ec74:	435d      	muls	r5, r3
9001ec76:	ea02 1a58 	and.w	sl, r2, r8, lsr #5
9001ec7a:	f608 0801 	addw	r8, r8, #2049	; 0x801
9001ec7e:	44d0      	add	r8, sl
9001ec80:	f105 0a20 	add.w	sl, r5, #32
9001ec84:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
9001ec88:	ea02 1258 	and.w	r2, r2, r8, lsr #5
9001ec8c:	0a2d      	lsrs	r5, r5, #8
9001ec8e:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
9001ec92:	432a      	orrs	r2, r5
9001ec94:	3001      	adds	r0, #1
9001ec96:	f100 810d 	bmi.w	9001eeb4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2ec>
9001ec9a:	4583      	cmp	fp, r0
9001ec9c:	f340 810a 	ble.w	9001eeb4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2ec>
9001eca0:	f1be 0f00 	cmp.w	lr, #0
9001eca4:	f000 810b 	beq.w	9001eebe <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2f6>
9001eca8:	2f00      	cmp	r7, #0
9001ecaa:	f2c0 8100 	blt.w	9001eeae <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e6>
9001ecae:	42be      	cmp	r6, r7
9001ecb0:	f340 80fd 	ble.w	9001eeae <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e6>
9001ecb4:	9801      	ldr	r0, [sp, #4]
9001ecb6:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
9001ecba:	f819 5006 	ldrb.w	r5, [r9, r6]
9001ecbe:	f830 8016 	ldrh.w	r8, [r0, r6, lsl #1]
9001ecc2:	ea4f 0ae5 	mov.w	sl, r5, asr #3
9001ecc6:	f428 60fc 	bic.w	r0, r8, #2016	; 0x7e0
9001ecca:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
9001ecce:	fb0a fa00 	mul.w	sl, sl, r0
9001ecd2:	fb05 f808 	mul.w	r8, r5, r8
9001ecd6:	ea0b 105a 	and.w	r0, fp, sl, lsr #5
9001ecda:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
9001ecde:	4482      	add	sl, r0
9001ece0:	f108 0020 	add.w	r0, r8, #32
9001ece4:	eb00 2018 	add.w	r0, r0, r8, lsr #8
9001ece8:	ea0b 1b5a 	and.w	fp, fp, sl, lsr #5
9001ecec:	0a00      	lsrs	r0, r0, #8
9001ecee:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
9001ecf2:	ea4b 0b00 	orr.w	fp, fp, r0
9001ecf6:	3701      	adds	r7, #1
9001ecf8:	f100 80e6 	bmi.w	9001eec8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x300>
9001ecfc:	42be      	cmp	r6, r7
9001ecfe:	f340 80e3 	ble.w	9001eec8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x300>
9001ed02:	2900      	cmp	r1, #0
9001ed04:	f000 80e3 	beq.w	9001eece <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x306>
9001ed08:	3601      	adds	r6, #1
9001ed0a:	9801      	ldr	r0, [sp, #4]
9001ed0c:	f819 7006 	ldrb.w	r7, [r9, r6]
9001ed10:	f830 0016 	ldrh.w	r0, [r0, r6, lsl #1]
9001ed14:	ea4f 09e7 	mov.w	r9, r7, asr #3
9001ed18:	f420 66fc 	bic.w	r6, r0, #2016	; 0x7e0
9001ed1c:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
9001ed20:	fb09 f906 	mul.w	r9, r9, r6
9001ed24:	fb07 f800 	mul.w	r8, r7, r0
9001ed28:	f64f 001f 	movw	r0, #63519	; 0xf81f
9001ed2c:	ea00 1a59 	and.w	sl, r0, r9, lsr #5
9001ed30:	f609 0901 	addw	r9, r9, #2049	; 0x801
9001ed34:	44d1      	add	r9, sl
9001ed36:	ea00 1659 	and.w	r6, r0, r9, lsr #5
9001ed3a:	f108 0020 	add.w	r0, r8, #32
9001ed3e:	eb00 2018 	add.w	r0, r0, r8, lsr #8
9001ed42:	0a00      	lsrs	r0, r0, #8
9001ed44:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
9001ed48:	4330      	orrs	r0, r6
9001ed4a:	b28e      	uxth	r6, r1
9001ed4c:	fa1f f98e 	uxth.w	r9, lr
9001ed50:	ea4f 4a04 	mov.w	sl, r4, lsl #16
9001ed54:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
9001ed58:	fb06 f809 	mul.w	r8, r6, r9
9001ed5c:	0136      	lsls	r6, r6, #4
9001ed5e:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
9001ed62:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
9001ed66:	9601      	str	r6, [sp, #4]
9001ed68:	ea4a 0404 	orr.w	r4, sl, r4
9001ed6c:	ea4f 4a02 	mov.w	sl, r2, lsl #16
9001ed70:	fa1f f689 	uxth.w	r6, r9
9001ed74:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
9001ed78:	fb11 f90e 	smulbb	r9, r1, lr
9001ed7c:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
9001ed80:	9602      	str	r6, [sp, #8]
9001ed82:	4626      	mov	r6, r4
9001ed84:	f3c9 09c7 	ubfx	r9, r9, #3, #8
9001ed88:	f1ce 0410 	rsb	r4, lr, #16
9001ed8c:	ea4a 0202 	orr.w	r2, sl, r2
9001ed90:	ea4f 4a00 	mov.w	sl, r0, lsl #16
9001ed94:	1a64      	subs	r4, r4, r1
9001ed96:	ebc9 0141 	rsb	r1, r9, r1, lsl #1
9001ed9a:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
9001ed9e:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
9001eda2:	434a      	muls	r2, r1
9001eda4:	eb09 0444 	add.w	r4, r9, r4, lsl #1
9001eda8:	ea4a 0000 	orr.w	r0, sl, r0
9001edac:	9903      	ldr	r1, [sp, #12]
9001edae:	fb04 2406 	mla	r4, r4, r6, r2
9001edb2:	9e02      	ldr	r6, [sp, #8]
9001edb4:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
9001edb8:	fb09 4200 	mla	r2, r9, r0, r4
9001edbc:	ea4f 440b 	mov.w	r4, fp, lsl #16
9001edc0:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
9001edc4:	8808      	ldrh	r0, [r1, #0]
9001edc6:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
9001edca:	f89d 1050 	ldrb.w	r1, [sp, #80]	; 0x50
9001edce:	ea44 0b0b 	orr.w	fp, r4, fp
9001edd2:	9c01      	ldr	r4, [sp, #4]
9001edd4:	b289      	uxth	r1, r1
9001edd6:	f5c4 7480 	rsb	r4, r4, #256	; 0x100
9001edda:	fb0e 2e0b 	mla	lr, lr, fp, r2
9001edde:	1ba4      	subs	r4, r4, r6
9001ede0:	9e01      	ldr	r6, [sp, #4]
9001ede2:	ea4f 525e 	mov.w	r2, lr, lsr #21
9001ede6:	eba6 0608 	sub.w	r6, r6, r8
9001edea:	b2a4      	uxth	r4, r4
9001edec:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
9001edf0:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
9001edf4:	b2b6      	uxth	r6, r6
9001edf6:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
9001edfa:	4373      	muls	r3, r6
9001edfc:	ea42 0e0e 	orr.w	lr, r2, lr
9001ee00:	fb0c 3304 	mla	r3, ip, r4, r3
9001ee04:	9c02      	ldr	r4, [sp, #8]
9001ee06:	fa1f f28e 	uxth.w	r2, lr
9001ee0a:	fb04 3505 	mla	r5, r4, r5, r3
9001ee0e:	10d4      	asrs	r4, r2, #3
9001ee10:	fb08 5707 	mla	r7, r8, r7, r5
9001ee14:	1215      	asrs	r5, r2, #8
9001ee16:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
9001ee1a:	00d2      	lsls	r2, r2, #3
9001ee1c:	f3c7 2707 	ubfx	r7, r7, #8, #8
9001ee20:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
9001ee24:	b2d2      	uxtb	r2, r2
9001ee26:	434f      	muls	r7, r1
9001ee28:	1c7b      	adds	r3, r7, #1
9001ee2a:	eb03 2717 	add.w	r7, r3, r7, lsr #8
9001ee2e:	1203      	asrs	r3, r0, #8
9001ee30:	ea6f 2717 	mvn.w	r7, r7, lsr #8
9001ee34:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
9001ee38:	b2ff      	uxtb	r7, r7
9001ee3a:	fb13 f307 	smulbb	r3, r3, r7
9001ee3e:	fb05 3501 	mla	r5, r5, r1, r3
9001ee42:	10c3      	asrs	r3, r0, #3
9001ee44:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
9001ee48:	b2ad      	uxth	r5, r5
9001ee4a:	fb13 f307 	smulbb	r3, r3, r7
9001ee4e:	fb04 3401 	mla	r4, r4, r1, r3
9001ee52:	00c3      	lsls	r3, r0, #3
9001ee54:	b2db      	uxtb	r3, r3
9001ee56:	b2a4      	uxth	r4, r4
9001ee58:	fb13 f307 	smulbb	r3, r3, r7
9001ee5c:	fb02 3101 	mla	r1, r2, r1, r3
9001ee60:	1c6b      	adds	r3, r5, #1
9001ee62:	1c62      	adds	r2, r4, #1
9001ee64:	b289      	uxth	r1, r1
9001ee66:	eb03 2515 	add.w	r5, r3, r5, lsr #8
9001ee6a:	1c4b      	adds	r3, r1, #1
9001ee6c:	eb02 2414 	add.w	r4, r2, r4, lsr #8
9001ee70:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
9001ee74:	9a03      	ldr	r2, [sp, #12]
9001ee76:	eb03 2311 	add.w	r3, r3, r1, lsr #8
9001ee7a:	0964      	lsrs	r4, r4, #5
9001ee7c:	f3c3 23c4 	ubfx	r3, r3, #11, #5
9001ee80:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
9001ee84:	432b      	orrs	r3, r5
9001ee86:	4323      	orrs	r3, r4
9001ee88:	8013      	strh	r3, [r2, #0]
9001ee8a:	b005      	add	sp, #20
9001ee8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001ee90:	f04f 0c00 	mov.w	ip, #0
9001ee94:	4664      	mov	r4, ip
9001ee96:	e6d6      	b.n	9001ec46 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x7e>
9001ee98:	2300      	movs	r3, #0
9001ee9a:	469c      	mov	ip, r3
9001ee9c:	461a      	mov	r2, r3
9001ee9e:	461c      	mov	r4, r3
9001eea0:	e6f8      	b.n	9001ec94 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
9001eea2:	2300      	movs	r3, #0
9001eea4:	461a      	mov	r2, r3
9001eea6:	e6f5      	b.n	9001ec94 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
9001eea8:	460b      	mov	r3, r1
9001eeaa:	460a      	mov	r2, r1
9001eeac:	e6f2      	b.n	9001ec94 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
9001eeae:	2500      	movs	r5, #0
9001eeb0:	46ab      	mov	fp, r5
9001eeb2:	e720      	b.n	9001ecf6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x12e>
9001eeb4:	2700      	movs	r7, #0
9001eeb6:	463d      	mov	r5, r7
9001eeb8:	4638      	mov	r0, r7
9001eeba:	46bb      	mov	fp, r7
9001eebc:	e745      	b.n	9001ed4a <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
9001eebe:	4677      	mov	r7, lr
9001eec0:	4675      	mov	r5, lr
9001eec2:	4670      	mov	r0, lr
9001eec4:	46f3      	mov	fp, lr
9001eec6:	e740      	b.n	9001ed4a <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
9001eec8:	2700      	movs	r7, #0
9001eeca:	4638      	mov	r0, r7
9001eecc:	e73d      	b.n	9001ed4a <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
9001eece:	460f      	mov	r7, r1
9001eed0:	4608      	mov	r0, r1
9001eed2:	e73a      	b.n	9001ed4a <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>

9001eed4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
9001eed4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001eed8:	b097      	sub	sp, #92	; 0x5c
9001eeda:	9214      	str	r2, [sp, #80]	; 0x50
9001eedc:	9308      	str	r3, [sp, #32]
9001eede:	9a25      	ldr	r2, [sp, #148]	; 0x94
9001eee0:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
9001eee4:	9015      	str	r0, [sp, #84]	; 0x54
9001eee6:	9312      	str	r3, [sp, #72]	; 0x48
9001eee8:	6850      	ldr	r0, [r2, #4]
9001eeea:	9111      	str	r1, [sp, #68]	; 0x44
9001eeec:	6812      	ldr	r2, [r2, #0]
9001eeee:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
9001eef2:	fb00 1303 	mla	r3, r0, r3, r1
9001eef6:	eb02 0343 	add.w	r3, r2, r3, lsl #1
9001eefa:	9309      	str	r3, [sp, #36]	; 0x24
9001eefc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
9001eefe:	681b      	ldr	r3, [r3, #0]
9001ef00:	930b      	str	r3, [sp, #44]	; 0x2c
9001ef02:	9b28      	ldr	r3, [sp, #160]	; 0xa0
9001ef04:	685b      	ldr	r3, [r3, #4]
9001ef06:	930c      	str	r3, [sp, #48]	; 0x30
9001ef08:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
9001ef0c:	930a      	str	r3, [sp, #40]	; 0x28
9001ef0e:	9b11      	ldr	r3, [sp, #68]	; 0x44
9001ef10:	2b00      	cmp	r3, #0
9001ef12:	dc03      	bgt.n	9001ef1c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
9001ef14:	9b14      	ldr	r3, [sp, #80]	; 0x50
9001ef16:	2b00      	cmp	r3, #0
9001ef18:	f340 83cd 	ble.w	9001f6b6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e2>
9001ef1c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
9001ef1e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
9001ef22:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
9001ef26:	1e48      	subs	r0, r1, #1
9001ef28:	1e55      	subs	r5, r2, #1
9001ef2a:	9b08      	ldr	r3, [sp, #32]
9001ef2c:	2b00      	cmp	r3, #0
9001ef2e:	f340 81a5 	ble.w	9001f27c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a8>
9001ef32:	9e21      	ldr	r6, [sp, #132]	; 0x84
9001ef34:	9b22      	ldr	r3, [sp, #136]	; 0x88
9001ef36:	1436      	asrs	r6, r6, #16
9001ef38:	ea4f 4323 	mov.w	r3, r3, asr #16
9001ef3c:	d406      	bmi.n	9001ef4c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
9001ef3e:	4286      	cmp	r6, r0
9001ef40:	da04      	bge.n	9001ef4c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
9001ef42:	2b00      	cmp	r3, #0
9001ef44:	db02      	blt.n	9001ef4c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
9001ef46:	42ab      	cmp	r3, r5
9001ef48:	f2c0 8199 	blt.w	9001f27e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
9001ef4c:	3601      	adds	r6, #1
9001ef4e:	f100 8186 	bmi.w	9001f25e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
9001ef52:	42b1      	cmp	r1, r6
9001ef54:	f2c0 8183 	blt.w	9001f25e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
9001ef58:	3301      	adds	r3, #1
9001ef5a:	f100 8180 	bmi.w	9001f25e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
9001ef5e:	429a      	cmp	r2, r3
9001ef60:	f2c0 817d 	blt.w	9001f25e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
9001ef64:	9b08      	ldr	r3, [sp, #32]
9001ef66:	f64f 061f 	movw	r6, #63519	; 0xf81f
9001ef6a:	9f09      	ldr	r7, [sp, #36]	; 0x24
9001ef6c:	9313      	str	r3, [sp, #76]	; 0x4c
9001ef6e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
9001ef70:	2b00      	cmp	r3, #0
9001ef72:	f340 81a6 	ble.w	9001f2c2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
9001ef76:	9b22      	ldr	r3, [sp, #136]	; 0x88
9001ef78:	9d21      	ldr	r5, [sp, #132]	; 0x84
9001ef7a:	1418      	asrs	r0, r3, #16
9001ef7c:	9b21      	ldr	r3, [sp, #132]	; 0x84
9001ef7e:	142d      	asrs	r5, r5, #16
9001ef80:	f3c3 3103 	ubfx	r1, r3, #12, #4
9001ef84:	9b22      	ldr	r3, [sp, #136]	; 0x88
9001ef86:	f3c3 3c03 	ubfx	ip, r3, #12, #4
9001ef8a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
9001ef8c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
9001ef90:	f100 81fa 	bmi.w	9001f388 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
9001ef94:	f102 3eff 	add.w	lr, r2, #4294967295
9001ef98:	4575      	cmp	r5, lr
9001ef9a:	f280 81f5 	bge.w	9001f388 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
9001ef9e:	2800      	cmp	r0, #0
9001efa0:	f2c0 81f2 	blt.w	9001f388 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
9001efa4:	f103 3eff 	add.w	lr, r3, #4294967295
9001efa8:	4570      	cmp	r0, lr
9001efaa:	f280 81ed 	bge.w	9001f388 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
9001efae:	b212      	sxth	r2, r2
9001efb0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
9001efb2:	fa1f fe81 	uxth.w	lr, r1
9001efb6:	fb00 5002 	mla	r0, r0, r2, r5
9001efba:	ea4f 150e 	mov.w	r5, lr, lsl #4
9001efbe:	eb03 0a00 	add.w	sl, r3, r0
9001efc2:	f813 9000 	ldrb.w	r9, [r3, r0]
9001efc6:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
9001efca:	f89a 8001 	ldrb.w	r8, [sl, #1]
9001efce:	b29b      	uxth	r3, r3
9001efd0:	f1bc 0f00 	cmp.w	ip, #0
9001efd4:	f000 81bb 	beq.w	9001f34e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x47a>
9001efd8:	f81a 4002 	ldrb.w	r4, [sl, r2]
9001efdc:	eb0a 0b02 	add.w	fp, sl, r2
9001efe0:	fa1f fa8c 	uxth.w	sl, ip
9001efe4:	940d      	str	r4, [sp, #52]	; 0x34
9001efe6:	fb0a fe0e 	mul.w	lr, sl, lr
9001efea:	f89b 4001 	ldrb.w	r4, [fp, #1]
9001efee:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
9001eff2:	eba5 050e 	sub.w	r5, r5, lr
9001eff6:	940e      	str	r4, [sp, #56]	; 0x38
9001eff8:	fa1f fa8a 	uxth.w	sl, sl
9001effc:	9c0d      	ldr	r4, [sp, #52]	; 0x34
9001effe:	b2ad      	uxth	r5, r5
9001f000:	eba3 030a 	sub.w	r3, r3, sl
9001f004:	fb08 f505 	mul.w	r5, r8, r5
9001f008:	b29b      	uxth	r3, r3
9001f00a:	fb09 5303 	mla	r3, r9, r3, r5
9001f00e:	fb0a 3304 	mla	r3, sl, r4, r3
9001f012:	9c0e      	ldr	r4, [sp, #56]	; 0x38
9001f014:	fb0e 3304 	mla	r3, lr, r4, r3
9001f018:	f3c3 2307 	ubfx	r3, r3, #8, #8
9001f01c:	2b00      	cmp	r3, #0
9001f01e:	f000 8111 	beq.w	9001f244 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
9001f022:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
9001f024:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
9001f028:	eb04 0540 	add.w	r5, r4, r0, lsl #1
9001f02c:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
9001f030:	f000 8192 	beq.w	9001f358 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>
9001f034:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
9001f038:	ea4f 0ae9 	mov.w	sl, r9, asr #3
9001f03c:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
9001f040:	fb0a fe0e 	mul.w	lr, sl, lr
9001f044:	fb09 f000 	mul.w	r0, r9, r0
9001f048:	ea06 195e 	and.w	r9, r6, lr, lsr #5
9001f04c:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
9001f050:	f100 0b20 	add.w	fp, r0, #32
9001f054:	44ce      	add	lr, r9
9001f056:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
9001f05a:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
9001f05e:	ea4f 2919 	mov.w	r9, r9, lsr #8
9001f062:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
9001f066:	ea4e 0909 	orr.w	r9, lr, r9
9001f06a:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
9001f06e:	8868      	ldrh	r0, [r5, #2]
9001f070:	d019      	beq.n	9001f0a6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
9001f072:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
9001f076:	ea4f 0ae8 	mov.w	sl, r8, asr #3
9001f07a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
9001f07e:	fb0a fe0e 	mul.w	lr, sl, lr
9001f082:	fb08 f800 	mul.w	r8, r8, r0
9001f086:	ea06 105e 	and.w	r0, r6, lr, lsr #5
9001f08a:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
9001f08e:	f108 0b20 	add.w	fp, r8, #32
9001f092:	4486      	add	lr, r0
9001f094:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
9001f098:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
9001f09c:	0a00      	lsrs	r0, r0, #8
9001f09e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
9001f0a2:	ea4e 0000 	orr.w	r0, lr, r0
9001f0a6:	ea4f 4e09 	mov.w	lr, r9, lsl #16
9001f0aa:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
9001f0ae:	ea4f 4a00 	mov.w	sl, r0, lsl #16
9001f0b2:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
9001f0b6:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
9001f0ba:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
9001f0be:	ea4e 0909 	orr.w	r9, lr, r9
9001f0c2:	ea4a 0000 	orr.w	r0, sl, r0
9001f0c6:	f1bc 0f00 	cmp.w	ip, #0
9001f0ca:	f000 8147 	beq.w	9001f35c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>
9001f0ce:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
9001f0d2:	9c0d      	ldr	r4, [sp, #52]	; 0x34
9001f0d4:	3a01      	subs	r2, #1
9001f0d6:	2cff      	cmp	r4, #255	; 0xff
9001f0d8:	ea4f 0242 	mov.w	r2, r2, lsl #1
9001f0dc:	f102 0202 	add.w	r2, r2, #2
9001f0e0:	eb05 0e02 	add.w	lr, r5, r2
9001f0e4:	5aaa      	ldrh	r2, [r5, r2]
9001f0e6:	d018      	beq.n	9001f11a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
9001f0e8:	f422 65fc 	bic.w	r5, r2, #2016	; 0x7e0
9001f0ec:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
9001f0f0:	ea4f 08e4 	mov.w	r8, r4, asr #3
9001f0f4:	fb04 fa02 	mul.w	sl, r4, r2
9001f0f8:	fb08 f805 	mul.w	r8, r8, r5
9001f0fc:	f10a 0520 	add.w	r5, sl, #32
9001f100:	ea06 1258 	and.w	r2, r6, r8, lsr #5
9001f104:	f608 0801 	addw	r8, r8, #2049	; 0x801
9001f108:	eb05 251a 	add.w	r5, r5, sl, lsr #8
9001f10c:	4442      	add	r2, r8
9001f10e:	0a2d      	lsrs	r5, r5, #8
9001f110:	ea06 1252 	and.w	r2, r6, r2, lsr #5
9001f114:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
9001f118:	432a      	orrs	r2, r5
9001f11a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
9001f11c:	f8be 5002 	ldrh.w	r5, [lr, #2]
9001f120:	2cff      	cmp	r4, #255	; 0xff
9001f122:	d01a      	beq.n	9001f15a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x286>
9001f124:	f425 6efc 	bic.w	lr, r5, #2016	; 0x7e0
9001f128:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
9001f12c:	ea4f 08e4 	mov.w	r8, r4, asr #3
9001f130:	fb04 fa05 	mul.w	sl, r4, r5
9001f134:	fb08 f80e 	mul.w	r8, r8, lr
9001f138:	f10a 0e20 	add.w	lr, sl, #32
9001f13c:	ea06 1558 	and.w	r5, r6, r8, lsr #5
9001f140:	f608 0801 	addw	r8, r8, #2049	; 0x801
9001f144:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
9001f148:	4445      	add	r5, r8
9001f14a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
9001f14e:	ea06 1555 	and.w	r5, r6, r5, lsr #5
9001f152:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
9001f156:	ea45 050e 	orr.w	r5, r5, lr
9001f15a:	fb1c fe01 	smulbb	lr, ip, r1
9001f15e:	f1cc 0810 	rsb	r8, ip, #16
9001f162:	ea4f 4a02 	mov.w	sl, r2, lsl #16
9001f166:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
9001f16a:	ea4f 0eee 	mov.w	lr, lr, asr #3
9001f16e:	eba8 0801 	sub.w	r8, r8, r1
9001f172:	ea4f 4b05 	mov.w	fp, r5, lsl #16
9001f176:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
9001f17a:	ebce 0141 	rsb	r1, lr, r1, lsl #1
9001f17e:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
9001f182:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
9001f186:	ea4a 0202 	orr.w	r2, sl, r2
9001f18a:	4341      	muls	r1, r0
9001f18c:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
9001f190:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
9001f194:	fb09 1108 	mla	r1, r9, r8, r1
9001f198:	ea4b 0505 	orr.w	r5, fp, r5
9001f19c:	fb0c 1102 	mla	r1, ip, r2, r1
9001f1a0:	fb0e 1e05 	mla	lr, lr, r5, r1
9001f1a4:	ea4f 525e 	mov.w	r2, lr, lsr #21
9001f1a8:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
9001f1ac:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
9001f1b0:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
9001f1b4:	ea42 0e0e 	orr.w	lr, r2, lr
9001f1b8:	fa1f f28e 	uxth.w	r2, lr
9001f1bc:	2bff      	cmp	r3, #255	; 0xff
9001f1be:	d103      	bne.n	9001f1c8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
9001f1c0:	9912      	ldr	r1, [sp, #72]	; 0x48
9001f1c2:	29ff      	cmp	r1, #255	; 0xff
9001f1c4:	f000 80de 	beq.w	9001f384 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
9001f1c8:	990a      	ldr	r1, [sp, #40]	; 0x28
9001f1ca:	1215      	asrs	r5, r2, #8
9001f1cc:	8838      	ldrh	r0, [r7, #0]
9001f1ce:	434b      	muls	r3, r1
9001f1d0:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
9001f1d4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
9001f1d6:	f103 0c01 	add.w	ip, r3, #1
9001f1da:	eb0c 2323 	add.w	r3, ip, r3, asr #8
9001f1de:	ea6f 2323 	mvn.w	r3, r3, asr #8
9001f1e2:	fa5f fc83 	uxtb.w	ip, r3
9001f1e6:	1203      	asrs	r3, r0, #8
9001f1e8:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
9001f1ec:	fb13 f30c 	smulbb	r3, r3, ip
9001f1f0:	fb05 3501 	mla	r5, r5, r1, r3
9001f1f4:	10c3      	asrs	r3, r0, #3
9001f1f6:	10d1      	asrs	r1, r2, #3
9001f1f8:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
9001f1fc:	00d2      	lsls	r2, r2, #3
9001f1fe:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
9001f202:	b2ad      	uxth	r5, r5
9001f204:	fb13 f30c 	smulbb	r3, r3, ip
9001f208:	b2d2      	uxtb	r2, r2
9001f20a:	fb01 3104 	mla	r1, r1, r4, r3
9001f20e:	00c3      	lsls	r3, r0, #3
9001f210:	b2db      	uxtb	r3, r3
9001f212:	b289      	uxth	r1, r1
9001f214:	fb13 f30c 	smulbb	r3, r3, ip
9001f218:	fb02 3304 	mla	r3, r2, r4, r3
9001f21c:	b29a      	uxth	r2, r3
9001f21e:	1c6b      	adds	r3, r5, #1
9001f220:	eb03 2515 	add.w	r5, r3, r5, lsr #8
9001f224:	1c53      	adds	r3, r2, #1
9001f226:	eb03 2312 	add.w	r3, r3, r2, lsr #8
9001f22a:	1c4a      	adds	r2, r1, #1
9001f22c:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
9001f230:	eb02 2111 	add.w	r1, r2, r1, lsr #8
9001f234:	f3c3 23c4 	ubfx	r3, r3, #11, #5
9001f238:	0949      	lsrs	r1, r1, #5
9001f23a:	432b      	orrs	r3, r5
9001f23c:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
9001f240:	430b      	orrs	r3, r1
9001f242:	803b      	strh	r3, [r7, #0]
9001f244:	9b21      	ldr	r3, [sp, #132]	; 0x84
9001f246:	3702      	adds	r7, #2
9001f248:	9a23      	ldr	r2, [sp, #140]	; 0x8c
9001f24a:	4413      	add	r3, r2
9001f24c:	9a22      	ldr	r2, [sp, #136]	; 0x88
9001f24e:	9321      	str	r3, [sp, #132]	; 0x84
9001f250:	9b24      	ldr	r3, [sp, #144]	; 0x90
9001f252:	441a      	add	r2, r3
9001f254:	9b13      	ldr	r3, [sp, #76]	; 0x4c
9001f256:	3b01      	subs	r3, #1
9001f258:	9222      	str	r2, [sp, #136]	; 0x88
9001f25a:	9313      	str	r3, [sp, #76]	; 0x4c
9001f25c:	e687      	b.n	9001ef6e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
9001f25e:	9b21      	ldr	r3, [sp, #132]	; 0x84
9001f260:	9e23      	ldr	r6, [sp, #140]	; 0x8c
9001f262:	9c22      	ldr	r4, [sp, #136]	; 0x88
9001f264:	4433      	add	r3, r6
9001f266:	9321      	str	r3, [sp, #132]	; 0x84
9001f268:	9b24      	ldr	r3, [sp, #144]	; 0x90
9001f26a:	441c      	add	r4, r3
9001f26c:	9b08      	ldr	r3, [sp, #32]
9001f26e:	3b01      	subs	r3, #1
9001f270:	9422      	str	r4, [sp, #136]	; 0x88
9001f272:	9308      	str	r3, [sp, #32]
9001f274:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001f276:	3302      	adds	r3, #2
9001f278:	9309      	str	r3, [sp, #36]	; 0x24
9001f27a:	e656      	b.n	9001ef2a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
9001f27c:	d028      	beq.n	9001f2d0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3fc>
9001f27e:	9b08      	ldr	r3, [sp, #32]
9001f280:	9823      	ldr	r0, [sp, #140]	; 0x8c
9001f282:	3b01      	subs	r3, #1
9001f284:	9d21      	ldr	r5, [sp, #132]	; 0x84
9001f286:	fb00 5003 	mla	r0, r0, r3, r5
9001f28a:	1400      	asrs	r0, r0, #16
9001f28c:	f53f ae6a 	bmi.w	9001ef64 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
9001f290:	3901      	subs	r1, #1
9001f292:	4288      	cmp	r0, r1
9001f294:	f6bf ae66 	bge.w	9001ef64 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
9001f298:	9924      	ldr	r1, [sp, #144]	; 0x90
9001f29a:	9822      	ldr	r0, [sp, #136]	; 0x88
9001f29c:	fb01 0303 	mla	r3, r1, r3, r0
9001f2a0:	141b      	asrs	r3, r3, #16
9001f2a2:	f53f ae5f 	bmi.w	9001ef64 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
9001f2a6:	3a01      	subs	r2, #1
9001f2a8:	4293      	cmp	r3, r2
9001f2aa:	f6bf ae5b 	bge.w	9001ef64 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
9001f2ae:	9b08      	ldr	r3, [sp, #32]
9001f2b0:	f64f 061f 	movw	r6, #63519	; 0xf81f
9001f2b4:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
9001f2b8:	9313      	str	r3, [sp, #76]	; 0x4c
9001f2ba:	9b13      	ldr	r3, [sp, #76]	; 0x4c
9001f2bc:	2b00      	cmp	r3, #0
9001f2be:	f300 8082 	bgt.w	9001f3c6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f2>
9001f2c2:	9b08      	ldr	r3, [sp, #32]
9001f2c4:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
9001f2c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001f2ca:	eb03 0344 	add.w	r3, r3, r4, lsl #1
9001f2ce:	9309      	str	r3, [sp, #36]	; 0x24
9001f2d0:	9b11      	ldr	r3, [sp, #68]	; 0x44
9001f2d2:	2b00      	cmp	r3, #0
9001f2d4:	f340 81ef 	ble.w	9001f6b6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e2>
9001f2d8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
9001f2dc:	9b20      	ldr	r3, [sp, #128]	; 0x80
9001f2de:	ee30 0a04 	vadd.f32	s0, s0, s8
9001f2e2:	ee70 0aa4 	vadd.f32	s1, s1, s9
9001f2e6:	eef0 6a62 	vmov.f32	s13, s5
9001f2ea:	eec7 7a00 	vdiv.f32	s15, s14, s0
9001f2ee:	ee31 1a05 	vadd.f32	s2, s2, s10
9001f2f2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9001f2f6:	edcd 6a21 	vstr	s13, [sp, #132]	; 0x84
9001f2fa:	eef0 6a43 	vmov.f32	s13, s6
9001f2fe:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9001f302:	edcd 6a22 	vstr	s13, [sp, #136]	; 0x88
9001f306:	ee20 7aa7 	vmul.f32	s14, s1, s15
9001f30a:	ee61 7a27 	vmul.f32	s15, s2, s15
9001f30e:	ee77 2a62 	vsub.f32	s5, s14, s5
9001f312:	ee37 3ac3 	vsub.f32	s6, s15, s6
9001f316:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9001f31a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9001f31e:	ee12 2a90 	vmov	r2, s5
9001f322:	eef0 2a47 	vmov.f32	s5, s14
9001f326:	fb92 f3f3 	sdiv	r3, r2, r3
9001f32a:	ee13 2a10 	vmov	r2, s6
9001f32e:	9323      	str	r3, [sp, #140]	; 0x8c
9001f330:	9b20      	ldr	r3, [sp, #128]	; 0x80
9001f332:	eeb0 3a67 	vmov.f32	s6, s15
9001f336:	fb92 f3f3 	sdiv	r3, r2, r3
9001f33a:	9324      	str	r3, [sp, #144]	; 0x90
9001f33c:	9b11      	ldr	r3, [sp, #68]	; 0x44
9001f33e:	9a14      	ldr	r2, [sp, #80]	; 0x50
9001f340:	3b01      	subs	r3, #1
9001f342:	9311      	str	r3, [sp, #68]	; 0x44
9001f344:	9b20      	ldr	r3, [sp, #128]	; 0x80
9001f346:	bf08      	it	eq
9001f348:	4613      	moveq	r3, r2
9001f34a:	9308      	str	r3, [sp, #32]
9001f34c:	e5df      	b.n	9001ef0e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
9001f34e:	fb08 f505 	mul.w	r5, r8, r5
9001f352:	fb09 5303 	mla	r3, r9, r3, r5
9001f356:	e65f      	b.n	9001f018 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x144>
9001f358:	4681      	mov	r9, r0
9001f35a:	e686      	b.n	9001f06a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
9001f35c:	f1c1 0210 	rsb	r2, r1, #16
9001f360:	4341      	muls	r1, r0
9001f362:	fb09 1902 	mla	r9, r9, r2, r1
9001f366:	ea4f 0949 	mov.w	r9, r9, lsl #1
9001f36a:	ea4f 5259 	mov.w	r2, r9, lsr #21
9001f36e:	ea4f 1959 	mov.w	r9, r9, lsr #5
9001f372:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
9001f376:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
9001f37a:	ea42 0909 	orr.w	r9, r2, r9
9001f37e:	fa1f f289 	uxth.w	r2, r9
9001f382:	e71b      	b.n	9001f1bc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e8>
9001f384:	803a      	strh	r2, [r7, #0]
9001f386:	e75d      	b.n	9001f244 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
9001f388:	f115 0e01 	adds.w	lr, r5, #1
9001f38c:	f53f af5a 	bmi.w	9001f244 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
9001f390:	4572      	cmp	r2, lr
9001f392:	f6ff af57 	blt.w	9001f244 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
9001f396:	f110 0e01 	adds.w	lr, r0, #1
9001f39a:	f53f af53 	bmi.w	9001f244 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
9001f39e:	4573      	cmp	r3, lr
9001f3a0:	f6ff af50 	blt.w	9001f244 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
9001f3a4:	9c12      	ldr	r4, [sp, #72]	; 0x48
9001f3a6:	b21b      	sxth	r3, r3
9001f3a8:	b212      	sxth	r2, r2
9001f3aa:	9502      	str	r5, [sp, #8]
9001f3ac:	9301      	str	r3, [sp, #4]
9001f3ae:	9200      	str	r2, [sp, #0]
9001f3b0:	e9cd 0103 	strd	r0, r1, [sp, #12]
9001f3b4:	e9cd c405 	strd	ip, r4, [sp, #20]
9001f3b8:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	; 0x2c
9001f3bc:	4639      	mov	r1, r7
9001f3be:	9815      	ldr	r0, [sp, #84]	; 0x54
9001f3c0:	f7ff fc02 	bl	9001ebc8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>
9001f3c4:	e73e      	b.n	9001f244 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
9001f3c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
9001f3c8:	f3c3 3203 	ubfx	r2, r3, #12, #4
9001f3cc:	9b22      	ldr	r3, [sp, #136]	; 0x88
9001f3ce:	f3c3 3503 	ubfx	r5, r3, #12, #4
9001f3d2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
9001f3d4:	fa1f fc82 	uxth.w	ip, r2
9001f3d8:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
9001f3dc:	9b22      	ldr	r3, [sp, #136]	; 0x88
9001f3de:	ea4f 100c 	mov.w	r0, ip, lsl #4
9001f3e2:	141f      	asrs	r7, r3, #16
9001f3e4:	9b21      	ldr	r3, [sp, #132]	; 0x84
9001f3e6:	141b      	asrs	r3, r3, #16
9001f3e8:	fb01 3707 	mla	r7, r1, r7, r3
9001f3ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
9001f3ee:	eb03 0a07 	add.w	sl, r3, r7
9001f3f2:	f813 9007 	ldrb.w	r9, [r3, r7]
9001f3f6:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
9001f3fa:	f89a 8001 	ldrb.w	r8, [sl, #1]
9001f3fe:	b29b      	uxth	r3, r3
9001f400:	2d00      	cmp	r5, #0
9001f402:	f000 813d 	beq.w	9001f680 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7ac>
9001f406:	f81a 4001 	ldrb.w	r4, [sl, r1]
9001f40a:	eb0a 0b01 	add.w	fp, sl, r1
9001f40e:	fa1f fa85 	uxth.w	sl, r5
9001f412:	940f      	str	r4, [sp, #60]	; 0x3c
9001f414:	fb0a fc0c 	mul.w	ip, sl, ip
9001f418:	f89b 4001 	ldrb.w	r4, [fp, #1]
9001f41c:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
9001f420:	eba0 000c 	sub.w	r0, r0, ip
9001f424:	9410      	str	r4, [sp, #64]	; 0x40
9001f426:	fa1f fa8a 	uxth.w	sl, sl
9001f42a:	b280      	uxth	r0, r0
9001f42c:	eba3 030a 	sub.w	r3, r3, sl
9001f430:	fb08 f000 	mul.w	r0, r8, r0
9001f434:	b29b      	uxth	r3, r3
9001f436:	fb09 0303 	mla	r3, r9, r3, r0
9001f43a:	980f      	ldr	r0, [sp, #60]	; 0x3c
9001f43c:	fb0a 3300 	mla	r3, sl, r0, r3
9001f440:	fb0c 3304 	mla	r3, ip, r4, r3
9001f444:	f3c3 2307 	ubfx	r3, r3, #8, #8
9001f448:	2b00      	cmp	r3, #0
9001f44a:	f000 810b 	beq.w	9001f664 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x790>
9001f44e:	980b      	ldr	r0, [sp, #44]	; 0x2c
9001f450:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
9001f454:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
9001f456:	eb00 0047 	add.w	r0, r0, r7, lsl #1
9001f45a:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
9001f45e:	f000 8114 	beq.w	9001f68a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b6>
9001f462:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
9001f466:	ea4f 0ae9 	mov.w	sl, r9, asr #3
9001f46a:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
9001f46e:	fb0a fc0c 	mul.w	ip, sl, ip
9001f472:	fb09 f707 	mul.w	r7, r9, r7
9001f476:	ea06 195c 	and.w	r9, r6, ip, lsr #5
9001f47a:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
9001f47e:	f107 0b20 	add.w	fp, r7, #32
9001f482:	44cc      	add	ip, r9
9001f484:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
9001f488:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
9001f48c:	ea4f 2919 	mov.w	r9, r9, lsr #8
9001f490:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
9001f494:	ea4c 0909 	orr.w	r9, ip, r9
9001f498:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
9001f49c:	8847      	ldrh	r7, [r0, #2]
9001f49e:	d019      	beq.n	9001f4d4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x600>
9001f4a0:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
9001f4a4:	ea4f 0ae8 	mov.w	sl, r8, asr #3
9001f4a8:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
9001f4ac:	fb0a fc0c 	mul.w	ip, sl, ip
9001f4b0:	fb08 f807 	mul.w	r8, r8, r7
9001f4b4:	ea06 175c 	and.w	r7, r6, ip, lsr #5
9001f4b8:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
9001f4bc:	f108 0b20 	add.w	fp, r8, #32
9001f4c0:	44bc      	add	ip, r7
9001f4c2:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
9001f4c6:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
9001f4ca:	0a3f      	lsrs	r7, r7, #8
9001f4cc:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
9001f4d0:	ea4c 0707 	orr.w	r7, ip, r7
9001f4d4:	ea4f 4c09 	mov.w	ip, r9, lsl #16
9001f4d8:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
9001f4dc:	ea4f 4a07 	mov.w	sl, r7, lsl #16
9001f4e0:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
9001f4e4:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
9001f4e8:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
9001f4ec:	ea4c 0909 	orr.w	r9, ip, r9
9001f4f0:	ea4a 0707 	orr.w	r7, sl, r7
9001f4f4:	2d00      	cmp	r5, #0
9001f4f6:	f000 80ca 	beq.w	9001f68e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7ba>
9001f4fa:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
9001f4fe:	3901      	subs	r1, #1
9001f500:	0049      	lsls	r1, r1, #1
9001f502:	3102      	adds	r1, #2
9001f504:	eb00 0c01 	add.w	ip, r0, r1
9001f508:	5a41      	ldrh	r1, [r0, r1]
9001f50a:	980f      	ldr	r0, [sp, #60]	; 0x3c
9001f50c:	28ff      	cmp	r0, #255	; 0xff
9001f50e:	d019      	beq.n	9001f544 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x670>
9001f510:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
9001f514:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
9001f516:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
9001f51a:	ea4f 08e4 	mov.w	r8, r4, asr #3
9001f51e:	fb04 fa01 	mul.w	sl, r4, r1
9001f522:	fb08 f800 	mul.w	r8, r8, r0
9001f526:	f10a 0020 	add.w	r0, sl, #32
9001f52a:	ea06 1158 	and.w	r1, r6, r8, lsr #5
9001f52e:	f608 0801 	addw	r8, r8, #2049	; 0x801
9001f532:	eb00 201a 	add.w	r0, r0, sl, lsr #8
9001f536:	4441      	add	r1, r8
9001f538:	0a00      	lsrs	r0, r0, #8
9001f53a:	ea06 1151 	and.w	r1, r6, r1, lsr #5
9001f53e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
9001f542:	4301      	orrs	r1, r0
9001f544:	9c10      	ldr	r4, [sp, #64]	; 0x40
9001f546:	f8bc 0002 	ldrh.w	r0, [ip, #2]
9001f54a:	2cff      	cmp	r4, #255	; 0xff
9001f54c:	d01a      	beq.n	9001f584 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b0>
9001f54e:	f420 6cfc 	bic.w	ip, r0, #2016	; 0x7e0
9001f552:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
9001f556:	ea4f 08e4 	mov.w	r8, r4, asr #3
9001f55a:	fb04 fa00 	mul.w	sl, r4, r0
9001f55e:	fb08 f80c 	mul.w	r8, r8, ip
9001f562:	f10a 0c20 	add.w	ip, sl, #32
9001f566:	ea06 1058 	and.w	r0, r6, r8, lsr #5
9001f56a:	f608 0801 	addw	r8, r8, #2049	; 0x801
9001f56e:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
9001f572:	4440      	add	r0, r8
9001f574:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
9001f578:	ea06 1050 	and.w	r0, r6, r0, lsr #5
9001f57c:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
9001f580:	ea40 000c 	orr.w	r0, r0, ip
9001f584:	fb15 fc02 	smulbb	ip, r5, r2
9001f588:	f1c5 0810 	rsb	r8, r5, #16
9001f58c:	ea4f 4a01 	mov.w	sl, r1, lsl #16
9001f590:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
9001f594:	ea4f 0cec 	mov.w	ip, ip, asr #3
9001f598:	eba8 0802 	sub.w	r8, r8, r2
9001f59c:	ea4f 4b00 	mov.w	fp, r0, lsl #16
9001f5a0:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
9001f5a4:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
9001f5a8:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
9001f5ac:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
9001f5b0:	ea4a 0101 	orr.w	r1, sl, r1
9001f5b4:	437a      	muls	r2, r7
9001f5b6:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
9001f5ba:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
9001f5be:	fb09 2208 	mla	r2, r9, r8, r2
9001f5c2:	ea4b 0000 	orr.w	r0, fp, r0
9001f5c6:	fb05 2201 	mla	r2, r5, r1, r2
9001f5ca:	fb0c 2200 	mla	r2, ip, r0, r2
9001f5ce:	0d57      	lsrs	r7, r2, #21
9001f5d0:	0952      	lsrs	r2, r2, #5
9001f5d2:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
9001f5d6:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
9001f5da:	433a      	orrs	r2, r7
9001f5dc:	2bff      	cmp	r3, #255	; 0xff
9001f5de:	b292      	uxth	r2, r2
9001f5e0:	d102      	bne.n	9001f5e8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x714>
9001f5e2:	9912      	ldr	r1, [sp, #72]	; 0x48
9001f5e4:	29ff      	cmp	r1, #255	; 0xff
9001f5e6:	d063      	beq.n	9001f6b0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7dc>
9001f5e8:	980a      	ldr	r0, [sp, #40]	; 0x28
9001f5ea:	1215      	asrs	r5, r2, #8
9001f5ec:	f8be 1000 	ldrh.w	r1, [lr]
9001f5f0:	4343      	muls	r3, r0
9001f5f2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
9001f5f4:	10cf      	asrs	r7, r1, #3
9001f5f6:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
9001f5fa:	1c58      	adds	r0, r3, #1
9001f5fc:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
9001f600:	eb00 2323 	add.w	r3, r0, r3, asr #8
9001f604:	1208      	asrs	r0, r1, #8
9001f606:	ea6f 2323 	mvn.w	r3, r3, asr #8
9001f60a:	00c9      	lsls	r1, r1, #3
9001f60c:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
9001f610:	b2db      	uxtb	r3, r3
9001f612:	b2c9      	uxtb	r1, r1
9001f614:	fb10 f003 	smulbb	r0, r0, r3
9001f618:	fb11 f103 	smulbb	r1, r1, r3
9001f61c:	fb05 0504 	mla	r5, r5, r4, r0
9001f620:	10d0      	asrs	r0, r2, #3
9001f622:	fb17 f703 	smulbb	r7, r7, r3
9001f626:	00d2      	lsls	r2, r2, #3
9001f628:	b2ad      	uxth	r5, r5
9001f62a:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
9001f62e:	b2d2      	uxtb	r2, r2
9001f630:	fb00 7004 	mla	r0, r0, r4, r7
9001f634:	1c6b      	adds	r3, r5, #1
9001f636:	fb02 1204 	mla	r2, r2, r4, r1
9001f63a:	eb03 2515 	add.w	r5, r3, r5, lsr #8
9001f63e:	b292      	uxth	r2, r2
9001f640:	b280      	uxth	r0, r0
9001f642:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
9001f646:	1c57      	adds	r7, r2, #1
9001f648:	eb07 2712 	add.w	r7, r7, r2, lsr #8
9001f64c:	f3c7 27c4 	ubfx	r7, r7, #11, #5
9001f650:	433d      	orrs	r5, r7
9001f652:	1c47      	adds	r7, r0, #1
9001f654:	eb07 2710 	add.w	r7, r7, r0, lsr #8
9001f658:	097f      	lsrs	r7, r7, #5
9001f65a:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
9001f65e:	433d      	orrs	r5, r7
9001f660:	f8ae 5000 	strh.w	r5, [lr]
9001f664:	9b21      	ldr	r3, [sp, #132]	; 0x84
9001f666:	f10e 0e02 	add.w	lr, lr, #2
9001f66a:	9a23      	ldr	r2, [sp, #140]	; 0x8c
9001f66c:	4413      	add	r3, r2
9001f66e:	9a22      	ldr	r2, [sp, #136]	; 0x88
9001f670:	9321      	str	r3, [sp, #132]	; 0x84
9001f672:	9b24      	ldr	r3, [sp, #144]	; 0x90
9001f674:	441a      	add	r2, r3
9001f676:	9b13      	ldr	r3, [sp, #76]	; 0x4c
9001f678:	3b01      	subs	r3, #1
9001f67a:	9222      	str	r2, [sp, #136]	; 0x88
9001f67c:	9313      	str	r3, [sp, #76]	; 0x4c
9001f67e:	e61c      	b.n	9001f2ba <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
9001f680:	fb08 f000 	mul.w	r0, r8, r0
9001f684:	fb09 0303 	mla	r3, r9, r3, r0
9001f688:	e6dc      	b.n	9001f444 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x570>
9001f68a:	46b9      	mov	r9, r7
9001f68c:	e704      	b.n	9001f498 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c4>
9001f68e:	f1c2 0110 	rsb	r1, r2, #16
9001f692:	437a      	muls	r2, r7
9001f694:	fb09 2901 	mla	r9, r9, r1, r2
9001f698:	ea4f 0949 	mov.w	r9, r9, lsl #1
9001f69c:	ea4f 5059 	mov.w	r0, r9, lsr #21
9001f6a0:	ea4f 1259 	mov.w	r2, r9, lsr #5
9001f6a4:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
9001f6a8:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
9001f6ac:	4302      	orrs	r2, r0
9001f6ae:	e795      	b.n	9001f5dc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x708>
9001f6b0:	f8ae 2000 	strh.w	r2, [lr]
9001f6b4:	e7d6      	b.n	9001f664 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x790>
9001f6b6:	b017      	add	sp, #92	; 0x5c
9001f6b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

9001f6bc <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
9001f6bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001f6c0:	b085      	sub	sp, #20
9001f6c2:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	; 0x40
9001f6c6:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
9001f6ca:	2800      	cmp	r0, #0
9001f6cc:	9103      	str	r1, [sp, #12]
9001f6ce:	fb00 7406 	mla	r4, r0, r6, r7
9001f6d2:	f9bd b03c 	ldrsh.w	fp, [sp, #60]	; 0x3c
9001f6d6:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
9001f6da:	eb03 0544 	add.w	r5, r3, r4, lsl #1
9001f6de:	f89d e04c 	ldrb.w	lr, [sp, #76]	; 0x4c
9001f6e2:	eb02 0904 	add.w	r9, r2, r4
9001f6e6:	9501      	str	r5, [sp, #4]
9001f6e8:	f2c0 8141 	blt.w	9001f96e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2b2>
9001f6ec:	4583      	cmp	fp, r0
9001f6ee:	f340 813e 	ble.w	9001f96e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2b2>
9001f6f2:	2f00      	cmp	r7, #0
9001f6f4:	f2c0 8137 	blt.w	9001f966 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2aa>
9001f6f8:	42be      	cmp	r6, r7
9001f6fa:	f340 8134 	ble.w	9001f966 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2aa>
9001f6fe:	f812 c004 	ldrb.w	ip, [r2, r4]
9001f702:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
9001f706:	f64f 041f 	movw	r4, #63519	; 0xf81f
9001f70a:	ea4f 02ec 	mov.w	r2, ip, asr #3
9001f70e:	f423 65fc 	bic.w	r5, r3, #2016	; 0x7e0
9001f712:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9001f716:	4355      	muls	r5, r2
9001f718:	fb0c f203 	mul.w	r2, ip, r3
9001f71c:	ea04 1355 	and.w	r3, r4, r5, lsr #5
9001f720:	f605 0501 	addw	r5, r5, #2049	; 0x801
9001f724:	441d      	add	r5, r3
9001f726:	f102 0320 	add.w	r3, r2, #32
9001f72a:	eb03 2312 	add.w	r3, r3, r2, lsr #8
9001f72e:	ea04 1455 	and.w	r4, r4, r5, lsr #5
9001f732:	0a1b      	lsrs	r3, r3, #8
9001f734:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9001f738:	431c      	orrs	r4, r3
9001f73a:	1c7b      	adds	r3, r7, #1
9001f73c:	f100 811c 	bmi.w	9001f978 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2bc>
9001f740:	429e      	cmp	r6, r3
9001f742:	f340 8119 	ble.w	9001f978 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2bc>
9001f746:	2900      	cmp	r1, #0
9001f748:	f000 8119 	beq.w	9001f97e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c2>
9001f74c:	9a01      	ldr	r2, [sp, #4]
9001f74e:	f899 3001 	ldrb.w	r3, [r9, #1]
9001f752:	8855      	ldrh	r5, [r2, #2]
9001f754:	ea4f 08e3 	mov.w	r8, r3, asr #3
9001f758:	f425 62fc 	bic.w	r2, r5, #2016	; 0x7e0
9001f75c:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
9001f760:	fb08 f802 	mul.w	r8, r8, r2
9001f764:	f64f 021f 	movw	r2, #63519	; 0xf81f
9001f768:	435d      	muls	r5, r3
9001f76a:	ea02 1a58 	and.w	sl, r2, r8, lsr #5
9001f76e:	f608 0801 	addw	r8, r8, #2049	; 0x801
9001f772:	44d0      	add	r8, sl
9001f774:	f105 0a20 	add.w	sl, r5, #32
9001f778:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
9001f77c:	ea02 1258 	and.w	r2, r2, r8, lsr #5
9001f780:	0a2d      	lsrs	r5, r5, #8
9001f782:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
9001f786:	432a      	orrs	r2, r5
9001f788:	3001      	adds	r0, #1
9001f78a:	f100 80fe 	bmi.w	9001f98a <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2ce>
9001f78e:	4583      	cmp	fp, r0
9001f790:	f340 80fb 	ble.w	9001f98a <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2ce>
9001f794:	f1be 0f00 	cmp.w	lr, #0
9001f798:	f000 80fc 	beq.w	9001f994 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2d8>
9001f79c:	2f00      	cmp	r7, #0
9001f79e:	f2c0 80f1 	blt.w	9001f984 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c8>
9001f7a2:	42be      	cmp	r6, r7
9001f7a4:	f340 80ee 	ble.w	9001f984 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c8>
9001f7a8:	9801      	ldr	r0, [sp, #4]
9001f7aa:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
9001f7ae:	f819 5006 	ldrb.w	r5, [r9, r6]
9001f7b2:	f830 8016 	ldrh.w	r8, [r0, r6, lsl #1]
9001f7b6:	ea4f 0ae5 	mov.w	sl, r5, asr #3
9001f7ba:	f428 60fc 	bic.w	r0, r8, #2016	; 0x7e0
9001f7be:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
9001f7c2:	fb0a fa00 	mul.w	sl, sl, r0
9001f7c6:	fb05 f808 	mul.w	r8, r5, r8
9001f7ca:	ea0b 105a 	and.w	r0, fp, sl, lsr #5
9001f7ce:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
9001f7d2:	4482      	add	sl, r0
9001f7d4:	f108 0020 	add.w	r0, r8, #32
9001f7d8:	eb00 2018 	add.w	r0, r0, r8, lsr #8
9001f7dc:	ea0b 1b5a 	and.w	fp, fp, sl, lsr #5
9001f7e0:	0a00      	lsrs	r0, r0, #8
9001f7e2:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
9001f7e6:	ea4b 0b00 	orr.w	fp, fp, r0
9001f7ea:	3701      	adds	r7, #1
9001f7ec:	f100 80d7 	bmi.w	9001f99e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e2>
9001f7f0:	42be      	cmp	r6, r7
9001f7f2:	f340 80d4 	ble.w	9001f99e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e2>
9001f7f6:	2900      	cmp	r1, #0
9001f7f8:	f000 80d4 	beq.w	9001f9a4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e8>
9001f7fc:	3601      	adds	r6, #1
9001f7fe:	9801      	ldr	r0, [sp, #4]
9001f800:	f819 7006 	ldrb.w	r7, [r9, r6]
9001f804:	f830 0016 	ldrh.w	r0, [r0, r6, lsl #1]
9001f808:	ea4f 09e7 	mov.w	r9, r7, asr #3
9001f80c:	f420 66fc 	bic.w	r6, r0, #2016	; 0x7e0
9001f810:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
9001f814:	fb09 f906 	mul.w	r9, r9, r6
9001f818:	fb07 f800 	mul.w	r8, r7, r0
9001f81c:	f64f 001f 	movw	r0, #63519	; 0xf81f
9001f820:	ea00 1a59 	and.w	sl, r0, r9, lsr #5
9001f824:	f609 0901 	addw	r9, r9, #2049	; 0x801
9001f828:	44d1      	add	r9, sl
9001f82a:	ea00 1659 	and.w	r6, r0, r9, lsr #5
9001f82e:	f108 0020 	add.w	r0, r8, #32
9001f832:	eb00 2018 	add.w	r0, r0, r8, lsr #8
9001f836:	0a00      	lsrs	r0, r0, #8
9001f838:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
9001f83c:	4330      	orrs	r0, r6
9001f83e:	b28e      	uxth	r6, r1
9001f840:	fa1f f98e 	uxth.w	r9, lr
9001f844:	ea4f 4a04 	mov.w	sl, r4, lsl #16
9001f848:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
9001f84c:	fb06 f809 	mul.w	r8, r6, r9
9001f850:	0136      	lsls	r6, r6, #4
9001f852:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
9001f856:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
9001f85a:	9601      	str	r6, [sp, #4]
9001f85c:	ea4a 0404 	orr.w	r4, sl, r4
9001f860:	ea4f 4a02 	mov.w	sl, r2, lsl #16
9001f864:	fa1f f689 	uxth.w	r6, r9
9001f868:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
9001f86c:	fb11 f90e 	smulbb	r9, r1, lr
9001f870:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
9001f874:	9602      	str	r6, [sp, #8]
9001f876:	4626      	mov	r6, r4
9001f878:	f3c9 09c7 	ubfx	r9, r9, #3, #8
9001f87c:	f1ce 0410 	rsb	r4, lr, #16
9001f880:	ea4a 0202 	orr.w	r2, sl, r2
9001f884:	ea4f 4a00 	mov.w	sl, r0, lsl #16
9001f888:	1a64      	subs	r4, r4, r1
9001f88a:	ebc9 0141 	rsb	r1, r9, r1, lsl #1
9001f88e:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
9001f892:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
9001f896:	434a      	muls	r2, r1
9001f898:	eb09 0444 	add.w	r4, r9, r4, lsl #1
9001f89c:	ea4a 0000 	orr.w	r0, sl, r0
9001f8a0:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
9001f8a4:	fb04 2406 	mla	r4, r4, r6, r2
9001f8a8:	9903      	ldr	r1, [sp, #12]
9001f8aa:	fb09 4200 	mla	r2, r9, r0, r4
9001f8ae:	ea4f 440b 	mov.w	r4, fp, lsl #16
9001f8b2:	9801      	ldr	r0, [sp, #4]
9001f8b4:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
9001f8b8:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
9001f8bc:	8809      	ldrh	r1, [r1, #0]
9001f8be:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
9001f8c2:	ea44 0b0b 	orr.w	fp, r4, fp
9001f8c6:	9c02      	ldr	r4, [sp, #8]
9001f8c8:	1b00      	subs	r0, r0, r4
9001f8ca:	9c01      	ldr	r4, [sp, #4]
9001f8cc:	fb0e 2e0b 	mla	lr, lr, fp, r2
9001f8d0:	eba4 0608 	sub.w	r6, r4, r8
9001f8d4:	b280      	uxth	r0, r0
9001f8d6:	ea4f 525e 	mov.w	r2, lr, lsr #21
9001f8da:	b2b6      	uxth	r6, r6
9001f8dc:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
9001f8e0:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
9001f8e4:	4373      	muls	r3, r6
9001f8e6:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
9001f8ea:	fb0c 3300 	mla	r3, ip, r0, r3
9001f8ee:	9802      	ldr	r0, [sp, #8]
9001f8f0:	ea42 0e0e 	orr.w	lr, r2, lr
9001f8f4:	fb00 3505 	mla	r5, r0, r5, r3
9001f8f8:	120b      	asrs	r3, r1, #8
9001f8fa:	10c8      	asrs	r0, r1, #3
9001f8fc:	fb08 5707 	mla	r7, r8, r7, r5
9001f900:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
9001f904:	00c9      	lsls	r1, r1, #3
9001f906:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
9001f90a:	ea6f 2727 	mvn.w	r7, r7, asr #8
9001f90e:	fa1f f28e 	uxth.w	r2, lr
9001f912:	b2c9      	uxtb	r1, r1
9001f914:	b2ff      	uxtb	r7, r7
9001f916:	437b      	muls	r3, r7
9001f918:	4378      	muls	r0, r7
9001f91a:	434f      	muls	r7, r1
9001f91c:	1c59      	adds	r1, r3, #1
9001f91e:	eb01 2113 	add.w	r1, r1, r3, lsr #8
9001f922:	1213      	asrs	r3, r2, #8
9001f924:	f023 0307 	bic.w	r3, r3, #7
9001f928:	eb03 2311 	add.w	r3, r3, r1, lsr #8
9001f92c:	1c41      	adds	r1, r0, #1
9001f92e:	eb01 2010 	add.w	r0, r1, r0, lsr #8
9001f932:	10d1      	asrs	r1, r2, #3
9001f934:	021b      	lsls	r3, r3, #8
9001f936:	f021 0103 	bic.w	r1, r1, #3
9001f93a:	00d2      	lsls	r2, r2, #3
9001f93c:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
9001f940:	eb01 2110 	add.w	r1, r1, r0, lsr #8
9001f944:	00c9      	lsls	r1, r1, #3
9001f946:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
9001f94a:	430b      	orrs	r3, r1
9001f94c:	1c79      	adds	r1, r7, #1
9001f94e:	eb01 2717 	add.w	r7, r1, r7, lsr #8
9001f952:	eb02 2217 	add.w	r2, r2, r7, lsr #8
9001f956:	f3c2 02c4 	ubfx	r2, r2, #3, #5
9001f95a:	431a      	orrs	r2, r3
9001f95c:	9b03      	ldr	r3, [sp, #12]
9001f95e:	801a      	strh	r2, [r3, #0]
9001f960:	b005      	add	sp, #20
9001f962:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001f966:	f04f 0c00 	mov.w	ip, #0
9001f96a:	4664      	mov	r4, ip
9001f96c:	e6e5      	b.n	9001f73a <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7e>
9001f96e:	2300      	movs	r3, #0
9001f970:	469c      	mov	ip, r3
9001f972:	461a      	mov	r2, r3
9001f974:	461c      	mov	r4, r3
9001f976:	e707      	b.n	9001f788 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
9001f978:	2300      	movs	r3, #0
9001f97a:	461a      	mov	r2, r3
9001f97c:	e704      	b.n	9001f788 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
9001f97e:	460b      	mov	r3, r1
9001f980:	460a      	mov	r2, r1
9001f982:	e701      	b.n	9001f788 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
9001f984:	2500      	movs	r5, #0
9001f986:	46ab      	mov	fp, r5
9001f988:	e72f      	b.n	9001f7ea <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x12e>
9001f98a:	2700      	movs	r7, #0
9001f98c:	463d      	mov	r5, r7
9001f98e:	4638      	mov	r0, r7
9001f990:	46bb      	mov	fp, r7
9001f992:	e754      	b.n	9001f83e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
9001f994:	4677      	mov	r7, lr
9001f996:	4675      	mov	r5, lr
9001f998:	4670      	mov	r0, lr
9001f99a:	46f3      	mov	fp, lr
9001f99c:	e74f      	b.n	9001f83e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
9001f99e:	2700      	movs	r7, #0
9001f9a0:	4638      	mov	r0, r7
9001f9a2:	e74c      	b.n	9001f83e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
9001f9a4:	460f      	mov	r7, r1
9001f9a6:	4608      	mov	r0, r1
9001f9a8:	e749      	b.n	9001f83e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
	...

9001f9ac <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
9001f9ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001f9b0:	b093      	sub	sp, #76	; 0x4c
9001f9b2:	9210      	str	r2, [sp, #64]	; 0x40
9001f9b4:	9a21      	ldr	r2, [sp, #132]	; 0x84
9001f9b6:	9011      	str	r0, [sp, #68]	; 0x44
9001f9b8:	910e      	str	r1, [sp, #56]	; 0x38
9001f9ba:	6850      	ldr	r0, [r2, #4]
9001f9bc:	9306      	str	r3, [sp, #24]
9001f9be:	6812      	ldr	r2, [r2, #0]
9001f9c0:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
9001f9c4:	fb00 1303 	mla	r3, r0, r3, r1
9001f9c8:	eb02 0343 	add.w	r3, r2, r3, lsl #1
9001f9cc:	9307      	str	r3, [sp, #28]
9001f9ce:	9b24      	ldr	r3, [sp, #144]	; 0x90
9001f9d0:	681b      	ldr	r3, [r3, #0]
9001f9d2:	9308      	str	r3, [sp, #32]
9001f9d4:	9b24      	ldr	r3, [sp, #144]	; 0x90
9001f9d6:	685b      	ldr	r3, [r3, #4]
9001f9d8:	9309      	str	r3, [sp, #36]	; 0x24
9001f9da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001f9dc:	2b00      	cmp	r3, #0
9001f9de:	dc03      	bgt.n	9001f9e8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
9001f9e0:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001f9e2:	2b00      	cmp	r3, #0
9001f9e4:	f340 83b6 	ble.w	90020154 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a8>
9001f9e8:	9b24      	ldr	r3, [sp, #144]	; 0x90
9001f9ea:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
9001f9ee:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
9001f9f2:	1e48      	subs	r0, r1, #1
9001f9f4:	1e55      	subs	r5, r2, #1
9001f9f6:	9b06      	ldr	r3, [sp, #24]
9001f9f8:	2b00      	cmp	r3, #0
9001f9fa:	f340 8165 	ble.w	9001fcc8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
9001f9fe:	9e1d      	ldr	r6, [sp, #116]	; 0x74
9001fa00:	9b1e      	ldr	r3, [sp, #120]	; 0x78
9001fa02:	1436      	asrs	r6, r6, #16
9001fa04:	ea4f 4323 	mov.w	r3, r3, asr #16
9001fa08:	d406      	bmi.n	9001fa18 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
9001fa0a:	4286      	cmp	r6, r0
9001fa0c:	da04      	bge.n	9001fa18 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
9001fa0e:	2b00      	cmp	r3, #0
9001fa10:	db02      	blt.n	9001fa18 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
9001fa12:	42ab      	cmp	r3, r5
9001fa14:	f2c0 8159 	blt.w	9001fcca <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
9001fa18:	3601      	adds	r6, #1
9001fa1a:	f100 8146 	bmi.w	9001fcaa <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
9001fa1e:	42b1      	cmp	r1, r6
9001fa20:	f2c0 8143 	blt.w	9001fcaa <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
9001fa24:	3301      	adds	r3, #1
9001fa26:	f100 8140 	bmi.w	9001fcaa <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
9001fa2a:	429a      	cmp	r2, r3
9001fa2c:	f2c0 813d 	blt.w	9001fcaa <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
9001fa30:	9b06      	ldr	r3, [sp, #24]
9001fa32:	f64f 061f 	movw	r6, #63519	; 0xf81f
9001fa36:	9f07      	ldr	r7, [sp, #28]
9001fa38:	930f      	str	r3, [sp, #60]	; 0x3c
9001fa3a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
9001fa3c:	2b00      	cmp	r3, #0
9001fa3e:	f340 8166 	ble.w	9001fd0e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
9001fa42:	9b1e      	ldr	r3, [sp, #120]	; 0x78
9001fa44:	9d1d      	ldr	r5, [sp, #116]	; 0x74
9001fa46:	1418      	asrs	r0, r3, #16
9001fa48:	9b1d      	ldr	r3, [sp, #116]	; 0x74
9001fa4a:	142d      	asrs	r5, r5, #16
9001fa4c:	f3c3 3103 	ubfx	r1, r3, #12, #4
9001fa50:	9b1e      	ldr	r3, [sp, #120]	; 0x78
9001fa52:	f3c3 3c03 	ubfx	ip, r3, #12, #4
9001fa56:	9b24      	ldr	r3, [sp, #144]	; 0x90
9001fa58:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
9001fa5c:	f100 81f0 	bmi.w	9001fe40 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
9001fa60:	f102 3eff 	add.w	lr, r2, #4294967295
9001fa64:	4575      	cmp	r5, lr
9001fa66:	f280 81eb 	bge.w	9001fe40 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
9001fa6a:	2800      	cmp	r0, #0
9001fa6c:	f2c0 81e8 	blt.w	9001fe40 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
9001fa70:	f103 3eff 	add.w	lr, r3, #4294967295
9001fa74:	4570      	cmp	r0, lr
9001fa76:	f280 81e3 	bge.w	9001fe40 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
9001fa7a:	b212      	sxth	r2, r2
9001fa7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001fa7e:	fa1f fe81 	uxth.w	lr, r1
9001fa82:	fb00 5002 	mla	r0, r0, r2, r5
9001fa86:	ea4f 150e 	mov.w	r5, lr, lsl #4
9001fa8a:	eb03 0a00 	add.w	sl, r3, r0
9001fa8e:	f813 9000 	ldrb.w	r9, [r3, r0]
9001fa92:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
9001fa96:	f89a 8001 	ldrb.w	r8, [sl, #1]
9001fa9a:	b29b      	uxth	r3, r3
9001fa9c:	f1bc 0f00 	cmp.w	ip, #0
9001faa0:	f000 817b 	beq.w	9001fd9a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
9001faa4:	f81a 4002 	ldrb.w	r4, [sl, r2]
9001faa8:	eb0a 0b02 	add.w	fp, sl, r2
9001faac:	fa1f fa8c 	uxth.w	sl, ip
9001fab0:	940a      	str	r4, [sp, #40]	; 0x28
9001fab2:	fb0a fe0e 	mul.w	lr, sl, lr
9001fab6:	f89b 4001 	ldrb.w	r4, [fp, #1]
9001faba:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
9001fabe:	eba5 050e 	sub.w	r5, r5, lr
9001fac2:	940b      	str	r4, [sp, #44]	; 0x2c
9001fac4:	fa1f fa8a 	uxth.w	sl, sl
9001fac8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
9001faca:	b2ad      	uxth	r5, r5
9001facc:	eba3 030a 	sub.w	r3, r3, sl
9001fad0:	fb08 f505 	mul.w	r5, r8, r5
9001fad4:	b29b      	uxth	r3, r3
9001fad6:	fb09 5303 	mla	r3, r9, r3, r5
9001fada:	fb0a 3304 	mla	r3, sl, r4, r3
9001fade:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
9001fae0:	fb0e 3304 	mla	r3, lr, r4, r3
9001fae4:	f3c3 2307 	ubfx	r3, r3, #8, #8
9001fae8:	2b00      	cmp	r3, #0
9001faea:	f000 80d1 	beq.w	9001fc90 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
9001faee:	9c08      	ldr	r4, [sp, #32]
9001faf0:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
9001faf4:	eb04 0540 	add.w	r5, r4, r0, lsl #1
9001faf8:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
9001fafc:	f000 8152 	beq.w	9001fda4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
9001fb00:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
9001fb04:	ea4f 0ae9 	mov.w	sl, r9, asr #3
9001fb08:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
9001fb0c:	fb0a fe0e 	mul.w	lr, sl, lr
9001fb10:	fb09 f000 	mul.w	r0, r9, r0
9001fb14:	ea06 195e 	and.w	r9, r6, lr, lsr #5
9001fb18:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
9001fb1c:	f100 0b20 	add.w	fp, r0, #32
9001fb20:	44ce      	add	lr, r9
9001fb22:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
9001fb26:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
9001fb2a:	ea4f 2919 	mov.w	r9, r9, lsr #8
9001fb2e:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
9001fb32:	ea4e 0909 	orr.w	r9, lr, r9
9001fb36:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
9001fb3a:	8868      	ldrh	r0, [r5, #2]
9001fb3c:	d019      	beq.n	9001fb72 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
9001fb3e:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
9001fb42:	ea4f 0ae8 	mov.w	sl, r8, asr #3
9001fb46:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
9001fb4a:	fb0a fe0e 	mul.w	lr, sl, lr
9001fb4e:	fb08 f800 	mul.w	r8, r8, r0
9001fb52:	ea06 105e 	and.w	r0, r6, lr, lsr #5
9001fb56:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
9001fb5a:	f108 0b20 	add.w	fp, r8, #32
9001fb5e:	4486      	add	lr, r0
9001fb60:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
9001fb64:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
9001fb68:	0a00      	lsrs	r0, r0, #8
9001fb6a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
9001fb6e:	ea4e 0000 	orr.w	r0, lr, r0
9001fb72:	ea4f 4e09 	mov.w	lr, r9, lsl #16
9001fb76:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
9001fb7a:	ea4f 4a00 	mov.w	sl, r0, lsl #16
9001fb7e:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
9001fb82:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
9001fb86:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
9001fb8a:	ea4e 0909 	orr.w	r9, lr, r9
9001fb8e:	ea4a 0000 	orr.w	r0, sl, r0
9001fb92:	f1bc 0f00 	cmp.w	ip, #0
9001fb96:	f000 8107 	beq.w	9001fda8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3fc>
9001fb9a:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
9001fb9e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
9001fba0:	3a01      	subs	r2, #1
9001fba2:	2cff      	cmp	r4, #255	; 0xff
9001fba4:	ea4f 0242 	mov.w	r2, r2, lsl #1
9001fba8:	f102 0202 	add.w	r2, r2, #2
9001fbac:	eb05 0e02 	add.w	lr, r5, r2
9001fbb0:	5aaa      	ldrh	r2, [r5, r2]
9001fbb2:	d018      	beq.n	9001fbe6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
9001fbb4:	f422 65fc 	bic.w	r5, r2, #2016	; 0x7e0
9001fbb8:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
9001fbbc:	ea4f 08e4 	mov.w	r8, r4, asr #3
9001fbc0:	fb04 fa02 	mul.w	sl, r4, r2
9001fbc4:	fb08 f805 	mul.w	r8, r8, r5
9001fbc8:	f10a 0520 	add.w	r5, sl, #32
9001fbcc:	ea06 1258 	and.w	r2, r6, r8, lsr #5
9001fbd0:	f608 0801 	addw	r8, r8, #2049	; 0x801
9001fbd4:	eb05 251a 	add.w	r5, r5, sl, lsr #8
9001fbd8:	4442      	add	r2, r8
9001fbda:	0a2d      	lsrs	r5, r5, #8
9001fbdc:	ea06 1252 	and.w	r2, r6, r2, lsr #5
9001fbe0:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
9001fbe4:	432a      	orrs	r2, r5
9001fbe6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
9001fbe8:	f8be 5002 	ldrh.w	r5, [lr, #2]
9001fbec:	2cff      	cmp	r4, #255	; 0xff
9001fbee:	d01a      	beq.n	9001fc26 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
9001fbf0:	f425 6efc 	bic.w	lr, r5, #2016	; 0x7e0
9001fbf4:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
9001fbf8:	ea4f 08e4 	mov.w	r8, r4, asr #3
9001fbfc:	fb04 fa05 	mul.w	sl, r4, r5
9001fc00:	fb08 f80e 	mul.w	r8, r8, lr
9001fc04:	f10a 0e20 	add.w	lr, sl, #32
9001fc08:	ea06 1558 	and.w	r5, r6, r8, lsr #5
9001fc0c:	f608 0801 	addw	r8, r8, #2049	; 0x801
9001fc10:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
9001fc14:	4445      	add	r5, r8
9001fc16:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
9001fc1a:	ea06 1555 	and.w	r5, r6, r5, lsr #5
9001fc1e:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
9001fc22:	ea45 050e 	orr.w	r5, r5, lr
9001fc26:	fb1c fe01 	smulbb	lr, ip, r1
9001fc2a:	f1cc 0810 	rsb	r8, ip, #16
9001fc2e:	ea4f 4a02 	mov.w	sl, r2, lsl #16
9001fc32:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
9001fc36:	ea4f 0eee 	mov.w	lr, lr, asr #3
9001fc3a:	eba8 0801 	sub.w	r8, r8, r1
9001fc3e:	ea4f 4b05 	mov.w	fp, r5, lsl #16
9001fc42:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
9001fc46:	ebce 0141 	rsb	r1, lr, r1, lsl #1
9001fc4a:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
9001fc4e:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
9001fc52:	ea4a 0202 	orr.w	r2, sl, r2
9001fc56:	4341      	muls	r1, r0
9001fc58:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
9001fc5c:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
9001fc60:	fb09 1108 	mla	r1, r9, r8, r1
9001fc64:	ea4b 0505 	orr.w	r5, fp, r5
9001fc68:	fb0c 1102 	mla	r1, ip, r2, r1
9001fc6c:	fb0e 1e05 	mla	lr, lr, r5, r1
9001fc70:	ea4f 525e 	mov.w	r2, lr, lsr #21
9001fc74:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
9001fc78:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
9001fc7c:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
9001fc80:	ea42 0e0e 	orr.w	lr, r2, lr
9001fc84:	fa1f f28e 	uxth.w	r2, lr
9001fc88:	2bff      	cmp	r3, #255	; 0xff
9001fc8a:	f040 80a1 	bne.w	9001fdd0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x424>
9001fc8e:	803a      	strh	r2, [r7, #0]
9001fc90:	9b1d      	ldr	r3, [sp, #116]	; 0x74
9001fc92:	3702      	adds	r7, #2
9001fc94:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
9001fc96:	4413      	add	r3, r2
9001fc98:	9a1e      	ldr	r2, [sp, #120]	; 0x78
9001fc9a:	931d      	str	r3, [sp, #116]	; 0x74
9001fc9c:	9b20      	ldr	r3, [sp, #128]	; 0x80
9001fc9e:	441a      	add	r2, r3
9001fca0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
9001fca2:	3b01      	subs	r3, #1
9001fca4:	921e      	str	r2, [sp, #120]	; 0x78
9001fca6:	930f      	str	r3, [sp, #60]	; 0x3c
9001fca8:	e6c7      	b.n	9001fa3a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
9001fcaa:	9b1d      	ldr	r3, [sp, #116]	; 0x74
9001fcac:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
9001fcae:	9c1e      	ldr	r4, [sp, #120]	; 0x78
9001fcb0:	4433      	add	r3, r6
9001fcb2:	931d      	str	r3, [sp, #116]	; 0x74
9001fcb4:	9b20      	ldr	r3, [sp, #128]	; 0x80
9001fcb6:	441c      	add	r4, r3
9001fcb8:	9b06      	ldr	r3, [sp, #24]
9001fcba:	3b01      	subs	r3, #1
9001fcbc:	941e      	str	r4, [sp, #120]	; 0x78
9001fcbe:	9306      	str	r3, [sp, #24]
9001fcc0:	9b07      	ldr	r3, [sp, #28]
9001fcc2:	3302      	adds	r3, #2
9001fcc4:	9307      	str	r3, [sp, #28]
9001fcc6:	e696      	b.n	9001f9f6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
9001fcc8:	d028      	beq.n	9001fd1c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
9001fcca:	9b06      	ldr	r3, [sp, #24]
9001fccc:	981f      	ldr	r0, [sp, #124]	; 0x7c
9001fcce:	3b01      	subs	r3, #1
9001fcd0:	9d1d      	ldr	r5, [sp, #116]	; 0x74
9001fcd2:	fb00 5003 	mla	r0, r0, r3, r5
9001fcd6:	1400      	asrs	r0, r0, #16
9001fcd8:	f53f aeaa 	bmi.w	9001fa30 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
9001fcdc:	3901      	subs	r1, #1
9001fcde:	4288      	cmp	r0, r1
9001fce0:	f6bf aea6 	bge.w	9001fa30 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
9001fce4:	9920      	ldr	r1, [sp, #128]	; 0x80
9001fce6:	981e      	ldr	r0, [sp, #120]	; 0x78
9001fce8:	fb01 0303 	mla	r3, r1, r3, r0
9001fcec:	141b      	asrs	r3, r3, #16
9001fcee:	f53f ae9f 	bmi.w	9001fa30 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
9001fcf2:	3a01      	subs	r2, #1
9001fcf4:	4293      	cmp	r3, r2
9001fcf6:	f6bf ae9b 	bge.w	9001fa30 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
9001fcfa:	9b06      	ldr	r3, [sp, #24]
9001fcfc:	f64f 061f 	movw	r6, #63519	; 0xf81f
9001fd00:	f8dd e01c 	ldr.w	lr, [sp, #28]
9001fd04:	930f      	str	r3, [sp, #60]	; 0x3c
9001fd06:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
9001fd08:	2b00      	cmp	r3, #0
9001fd0a:	f300 80b6 	bgt.w	9001fe7a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ce>
9001fd0e:	9b06      	ldr	r3, [sp, #24]
9001fd10:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
9001fd14:	9b07      	ldr	r3, [sp, #28]
9001fd16:	eb03 0344 	add.w	r3, r3, r4, lsl #1
9001fd1a:	9307      	str	r3, [sp, #28]
9001fd1c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001fd1e:	2b00      	cmp	r3, #0
9001fd20:	f340 8218 	ble.w	90020154 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a8>
9001fd24:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
9001fd28:	9b1c      	ldr	r3, [sp, #112]	; 0x70
9001fd2a:	ee30 0a04 	vadd.f32	s0, s0, s8
9001fd2e:	ee70 0aa4 	vadd.f32	s1, s1, s9
9001fd32:	eef0 6a62 	vmov.f32	s13, s5
9001fd36:	eec7 7a00 	vdiv.f32	s15, s14, s0
9001fd3a:	ee31 1a05 	vadd.f32	s2, s2, s10
9001fd3e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9001fd42:	edcd 6a1d 	vstr	s13, [sp, #116]	; 0x74
9001fd46:	eef0 6a43 	vmov.f32	s13, s6
9001fd4a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9001fd4e:	edcd 6a1e 	vstr	s13, [sp, #120]	; 0x78
9001fd52:	ee20 7aa7 	vmul.f32	s14, s1, s15
9001fd56:	ee61 7a27 	vmul.f32	s15, s2, s15
9001fd5a:	ee77 2a62 	vsub.f32	s5, s14, s5
9001fd5e:	ee37 3ac3 	vsub.f32	s6, s15, s6
9001fd62:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9001fd66:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9001fd6a:	ee12 2a90 	vmov	r2, s5
9001fd6e:	eef0 2a47 	vmov.f32	s5, s14
9001fd72:	fb92 f3f3 	sdiv	r3, r2, r3
9001fd76:	ee13 2a10 	vmov	r2, s6
9001fd7a:	931f      	str	r3, [sp, #124]	; 0x7c
9001fd7c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
9001fd7e:	eeb0 3a67 	vmov.f32	s6, s15
9001fd82:	fb92 f3f3 	sdiv	r3, r2, r3
9001fd86:	9320      	str	r3, [sp, #128]	; 0x80
9001fd88:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001fd8a:	9a10      	ldr	r2, [sp, #64]	; 0x40
9001fd8c:	3b01      	subs	r3, #1
9001fd8e:	930e      	str	r3, [sp, #56]	; 0x38
9001fd90:	9b1c      	ldr	r3, [sp, #112]	; 0x70
9001fd92:	bf08      	it	eq
9001fd94:	4613      	moveq	r3, r2
9001fd96:	9306      	str	r3, [sp, #24]
9001fd98:	e61f      	b.n	9001f9da <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
9001fd9a:	fb08 f505 	mul.w	r5, r8, r5
9001fd9e:	fb09 5303 	mla	r3, r9, r3, r5
9001fda2:	e69f      	b.n	9001fae4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
9001fda4:	4681      	mov	r9, r0
9001fda6:	e6c6      	b.n	9001fb36 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
9001fda8:	f1c1 0210 	rsb	r2, r1, #16
9001fdac:	4341      	muls	r1, r0
9001fdae:	fb09 1902 	mla	r9, r9, r2, r1
9001fdb2:	ea4f 0949 	mov.w	r9, r9, lsl #1
9001fdb6:	ea4f 5259 	mov.w	r2, r9, lsr #21
9001fdba:	ea4f 1959 	mov.w	r9, r9, lsr #5
9001fdbe:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
9001fdc2:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
9001fdc6:	ea42 0909 	orr.w	r9, r2, r9
9001fdca:	fa1f f289 	uxth.w	r2, r9
9001fdce:	e75b      	b.n	9001fc88 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2dc>
9001fdd0:	f8b7 c000 	ldrh.w	ip, [r7]
9001fdd4:	43db      	mvns	r3, r3
9001fdd6:	ea4f 202c 	mov.w	r0, ip, asr #8
9001fdda:	fa5f fe83 	uxtb.w	lr, r3
9001fdde:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
9001fde2:	ea4f 05ec 	mov.w	r5, ip, asr #3
9001fde6:	ea4f 03cc 	mov.w	r3, ip, lsl #3
9001fdea:	fb00 f00e 	mul.w	r0, r0, lr
9001fdee:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
9001fdf2:	b2db      	uxtb	r3, r3
9001fdf4:	1c41      	adds	r1, r0, #1
9001fdf6:	fb05 f50e 	mul.w	r5, r5, lr
9001fdfa:	fb03 f30e 	mul.w	r3, r3, lr
9001fdfe:	eb01 2010 	add.w	r0, r1, r0, lsr #8
9001fe02:	1211      	asrs	r1, r2, #8
9001fe04:	f021 0107 	bic.w	r1, r1, #7
9001fe08:	eb01 2110 	add.w	r1, r1, r0, lsr #8
9001fe0c:	48d3      	ldr	r0, [pc, #844]	; (9002015c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b0>)
9001fe0e:	b2c9      	uxtb	r1, r1
9001fe10:	ea00 2001 	and.w	r0, r0, r1, lsl #8
9001fe14:	1c69      	adds	r1, r5, #1
9001fe16:	eb01 2515 	add.w	r5, r1, r5, lsr #8
9001fe1a:	10d1      	asrs	r1, r2, #3
9001fe1c:	00d2      	lsls	r2, r2, #3
9001fe1e:	f021 0103 	bic.w	r1, r1, #3
9001fe22:	eb01 2115 	add.w	r1, r1, r5, lsr #8
9001fe26:	00c9      	lsls	r1, r1, #3
9001fe28:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
9001fe2c:	4301      	orrs	r1, r0
9001fe2e:	1c58      	adds	r0, r3, #1
9001fe30:	eb00 2313 	add.w	r3, r0, r3, lsr #8
9001fe34:	eb02 2213 	add.w	r2, r2, r3, lsr #8
9001fe38:	f3c2 02c4 	ubfx	r2, r2, #3, #5
9001fe3c:	430a      	orrs	r2, r1
9001fe3e:	e726      	b.n	9001fc8e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e2>
9001fe40:	f115 0e01 	adds.w	lr, r5, #1
9001fe44:	f53f af24 	bmi.w	9001fc90 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
9001fe48:	4572      	cmp	r2, lr
9001fe4a:	f6ff af21 	blt.w	9001fc90 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
9001fe4e:	f110 0e01 	adds.w	lr, r0, #1
9001fe52:	f53f af1d 	bmi.w	9001fc90 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
9001fe56:	4573      	cmp	r3, lr
9001fe58:	f6ff af1a 	blt.w	9001fc90 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
9001fe5c:	b21b      	sxth	r3, r3
9001fe5e:	b212      	sxth	r2, r2
9001fe60:	9301      	str	r3, [sp, #4]
9001fe62:	9200      	str	r2, [sp, #0]
9001fe64:	e9cd 1c04 	strd	r1, ip, [sp, #16]
9001fe68:	e9cd 5002 	strd	r5, r0, [sp, #8]
9001fe6c:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
9001fe70:	4639      	mov	r1, r7
9001fe72:	9811      	ldr	r0, [sp, #68]	; 0x44
9001fe74:	f7ff fc22 	bl	9001f6bc <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
9001fe78:	e70a      	b.n	9001fc90 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
9001fe7a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
9001fe7c:	f3c3 3203 	ubfx	r2, r3, #12, #4
9001fe80:	9b1e      	ldr	r3, [sp, #120]	; 0x78
9001fe82:	f3c3 3503 	ubfx	r5, r3, #12, #4
9001fe86:	9b24      	ldr	r3, [sp, #144]	; 0x90
9001fe88:	fa1f fc82 	uxth.w	ip, r2
9001fe8c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
9001fe90:	9b1e      	ldr	r3, [sp, #120]	; 0x78
9001fe92:	ea4f 100c 	mov.w	r0, ip, lsl #4
9001fe96:	141f      	asrs	r7, r3, #16
9001fe98:	9b1d      	ldr	r3, [sp, #116]	; 0x74
9001fe9a:	141b      	asrs	r3, r3, #16
9001fe9c:	fb01 3707 	mla	r7, r1, r7, r3
9001fea0:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001fea2:	eb03 0a07 	add.w	sl, r3, r7
9001fea6:	f813 9007 	ldrb.w	r9, [r3, r7]
9001feaa:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
9001feae:	f89a 8001 	ldrb.w	r8, [sl, #1]
9001feb2:	b29b      	uxth	r3, r3
9001feb4:	2d00      	cmp	r5, #0
9001feb6:	f000 80fe 	beq.w	900200b6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70a>
9001feba:	f81a 4001 	ldrb.w	r4, [sl, r1]
9001febe:	eb0a 0b01 	add.w	fp, sl, r1
9001fec2:	fa1f fa85 	uxth.w	sl, r5
9001fec6:	940c      	str	r4, [sp, #48]	; 0x30
9001fec8:	fb0a fc0c 	mul.w	ip, sl, ip
9001fecc:	f89b 4001 	ldrb.w	r4, [fp, #1]
9001fed0:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
9001fed4:	eba0 000c 	sub.w	r0, r0, ip
9001fed8:	940d      	str	r4, [sp, #52]	; 0x34
9001feda:	fa1f fa8a 	uxth.w	sl, sl
9001fede:	b280      	uxth	r0, r0
9001fee0:	eba3 030a 	sub.w	r3, r3, sl
9001fee4:	fb08 f000 	mul.w	r0, r8, r0
9001fee8:	b29b      	uxth	r3, r3
9001feea:	fb09 0303 	mla	r3, r9, r3, r0
9001feee:	980c      	ldr	r0, [sp, #48]	; 0x30
9001fef0:	fb0a 3300 	mla	r3, sl, r0, r3
9001fef4:	fb0c 3304 	mla	r3, ip, r4, r3
9001fef8:	f3c3 2307 	ubfx	r3, r3, #8, #8
9001fefc:	2b00      	cmp	r3, #0
9001fefe:	f000 80cc 	beq.w	9002009a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ee>
9001ff02:	9808      	ldr	r0, [sp, #32]
9001ff04:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
9001ff08:	9c08      	ldr	r4, [sp, #32]
9001ff0a:	eb00 0047 	add.w	r0, r0, r7, lsl #1
9001ff0e:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
9001ff12:	f000 80d5 	beq.w	900200c0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x714>
9001ff16:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
9001ff1a:	ea4f 0ae9 	mov.w	sl, r9, asr #3
9001ff1e:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
9001ff22:	fb0a fc0c 	mul.w	ip, sl, ip
9001ff26:	fb09 f707 	mul.w	r7, r9, r7
9001ff2a:	ea06 195c 	and.w	r9, r6, ip, lsr #5
9001ff2e:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
9001ff32:	f107 0b20 	add.w	fp, r7, #32
9001ff36:	44cc      	add	ip, r9
9001ff38:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
9001ff3c:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
9001ff40:	ea4f 2919 	mov.w	r9, r9, lsr #8
9001ff44:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
9001ff48:	ea4c 0909 	orr.w	r9, ip, r9
9001ff4c:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
9001ff50:	8847      	ldrh	r7, [r0, #2]
9001ff52:	d019      	beq.n	9001ff88 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5dc>
9001ff54:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
9001ff58:	ea4f 0ae8 	mov.w	sl, r8, asr #3
9001ff5c:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
9001ff60:	fb0a fc0c 	mul.w	ip, sl, ip
9001ff64:	fb08 f807 	mul.w	r8, r8, r7
9001ff68:	ea06 175c 	and.w	r7, r6, ip, lsr #5
9001ff6c:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
9001ff70:	f108 0b20 	add.w	fp, r8, #32
9001ff74:	44bc      	add	ip, r7
9001ff76:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
9001ff7a:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
9001ff7e:	0a3f      	lsrs	r7, r7, #8
9001ff80:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
9001ff84:	ea4c 0707 	orr.w	r7, ip, r7
9001ff88:	ea4f 4c09 	mov.w	ip, r9, lsl #16
9001ff8c:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
9001ff90:	ea4f 4a07 	mov.w	sl, r7, lsl #16
9001ff94:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
9001ff98:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
9001ff9c:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
9001ffa0:	ea4c 0909 	orr.w	r9, ip, r9
9001ffa4:	ea4a 0707 	orr.w	r7, sl, r7
9001ffa8:	2d00      	cmp	r5, #0
9001ffaa:	f000 808b 	beq.w	900200c4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
9001ffae:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
9001ffb2:	3901      	subs	r1, #1
9001ffb4:	0049      	lsls	r1, r1, #1
9001ffb6:	3102      	adds	r1, #2
9001ffb8:	eb00 0c01 	add.w	ip, r0, r1
9001ffbc:	5a41      	ldrh	r1, [r0, r1]
9001ffbe:	980c      	ldr	r0, [sp, #48]	; 0x30
9001ffc0:	28ff      	cmp	r0, #255	; 0xff
9001ffc2:	d019      	beq.n	9001fff8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64c>
9001ffc4:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
9001ffc8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
9001ffca:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
9001ffce:	ea4f 08e4 	mov.w	r8, r4, asr #3
9001ffd2:	fb04 fa01 	mul.w	sl, r4, r1
9001ffd6:	fb08 f800 	mul.w	r8, r8, r0
9001ffda:	f10a 0020 	add.w	r0, sl, #32
9001ffde:	ea06 1158 	and.w	r1, r6, r8, lsr #5
9001ffe2:	f608 0801 	addw	r8, r8, #2049	; 0x801
9001ffe6:	eb00 201a 	add.w	r0, r0, sl, lsr #8
9001ffea:	4441      	add	r1, r8
9001ffec:	0a00      	lsrs	r0, r0, #8
9001ffee:	ea06 1151 	and.w	r1, r6, r1, lsr #5
9001fff2:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
9001fff6:	4301      	orrs	r1, r0
9001fff8:	9c0d      	ldr	r4, [sp, #52]	; 0x34
9001fffa:	f8bc 0002 	ldrh.w	r0, [ip, #2]
9001fffe:	2cff      	cmp	r4, #255	; 0xff
90020000:	d01a      	beq.n	90020038 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68c>
90020002:	f420 6cfc 	bic.w	ip, r0, #2016	; 0x7e0
90020006:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
9002000a:	ea4f 08e4 	mov.w	r8, r4, asr #3
9002000e:	fb04 fa00 	mul.w	sl, r4, r0
90020012:	fb08 f80c 	mul.w	r8, r8, ip
90020016:	f10a 0c20 	add.w	ip, sl, #32
9002001a:	ea06 1058 	and.w	r0, r6, r8, lsr #5
9002001e:	f608 0801 	addw	r8, r8, #2049	; 0x801
90020022:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
90020026:	4440      	add	r0, r8
90020028:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
9002002c:	ea06 1050 	and.w	r0, r6, r0, lsr #5
90020030:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
90020034:	ea40 000c 	orr.w	r0, r0, ip
90020038:	fb15 fc02 	smulbb	ip, r5, r2
9002003c:	f1c5 0810 	rsb	r8, r5, #16
90020040:	ea4f 4a01 	mov.w	sl, r1, lsl #16
90020044:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
90020048:	ea4f 0cec 	mov.w	ip, ip, asr #3
9002004c:	eba8 0802 	sub.w	r8, r8, r2
90020050:	ea4f 4b00 	mov.w	fp, r0, lsl #16
90020054:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
90020058:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
9002005c:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
90020060:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
90020064:	ea4a 0101 	orr.w	r1, sl, r1
90020068:	437a      	muls	r2, r7
9002006a:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
9002006e:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
90020072:	fb09 2208 	mla	r2, r9, r8, r2
90020076:	ea4b 0000 	orr.w	r0, fp, r0
9002007a:	fb05 2201 	mla	r2, r5, r1, r2
9002007e:	fb0c 2200 	mla	r2, ip, r0, r2
90020082:	0d57      	lsrs	r7, r2, #21
90020084:	0952      	lsrs	r2, r2, #5
90020086:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
9002008a:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
9002008e:	433a      	orrs	r2, r7
90020090:	2bff      	cmp	r3, #255	; 0xff
90020092:	b292      	uxth	r2, r2
90020094:	d127      	bne.n	900200e6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73a>
90020096:	f8ae 2000 	strh.w	r2, [lr]
9002009a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
9002009c:	f10e 0e02 	add.w	lr, lr, #2
900200a0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
900200a2:	4413      	add	r3, r2
900200a4:	9a1e      	ldr	r2, [sp, #120]	; 0x78
900200a6:	931d      	str	r3, [sp, #116]	; 0x74
900200a8:	9b20      	ldr	r3, [sp, #128]	; 0x80
900200aa:	441a      	add	r2, r3
900200ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
900200ae:	3b01      	subs	r3, #1
900200b0:	921e      	str	r2, [sp, #120]	; 0x78
900200b2:	930f      	str	r3, [sp, #60]	; 0x3c
900200b4:	e627      	b.n	9001fd06 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
900200b6:	fb08 f000 	mul.w	r0, r8, r0
900200ba:	fb09 0303 	mla	r3, r9, r3, r0
900200be:	e71b      	b.n	9001fef8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54c>
900200c0:	46b9      	mov	r9, r7
900200c2:	e743      	b.n	9001ff4c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a0>
900200c4:	f1c2 0110 	rsb	r1, r2, #16
900200c8:	437a      	muls	r2, r7
900200ca:	fb09 2901 	mla	r9, r9, r1, r2
900200ce:	ea4f 0949 	mov.w	r9, r9, lsl #1
900200d2:	ea4f 5059 	mov.w	r0, r9, lsr #21
900200d6:	ea4f 1259 	mov.w	r2, r9, lsr #5
900200da:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
900200de:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
900200e2:	4302      	orrs	r2, r0
900200e4:	e7d4      	b.n	90020090 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e4>
900200e6:	f8be 7000 	ldrh.w	r7, [lr]
900200ea:	43db      	mvns	r3, r3
900200ec:	4c1b      	ldr	r4, [pc, #108]	; (9002015c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b0>)
900200ee:	1238      	asrs	r0, r7, #8
900200f0:	fa5f fc83 	uxtb.w	ip, r3
900200f4:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
900200f8:	10fd      	asrs	r5, r7, #3
900200fa:	00fb      	lsls	r3, r7, #3
900200fc:	fb00 f00c 	mul.w	r0, r0, ip
90020100:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
90020104:	b2db      	uxtb	r3, r3
90020106:	fb05 f10c 	mul.w	r1, r5, ip
9002010a:	1c45      	adds	r5, r0, #1
9002010c:	fb03 f30c 	mul.w	r3, r3, ip
90020110:	eb05 2010 	add.w	r0, r5, r0, lsr #8
90020114:	1215      	asrs	r5, r2, #8
90020116:	f025 0507 	bic.w	r5, r5, #7
9002011a:	eb05 2010 	add.w	r0, r5, r0, lsr #8
9002011e:	1c4d      	adds	r5, r1, #1
90020120:	eb05 2511 	add.w	r5, r5, r1, lsr #8
90020124:	10d1      	asrs	r1, r2, #3
90020126:	b2c0      	uxtb	r0, r0
90020128:	f021 0103 	bic.w	r1, r1, #3
9002012c:	00d2      	lsls	r2, r2, #3
9002012e:	ea04 2000 	and.w	r0, r4, r0, lsl #8
90020132:	eb01 2115 	add.w	r1, r1, r5, lsr #8
90020136:	00c9      	lsls	r1, r1, #3
90020138:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
9002013c:	4308      	orrs	r0, r1
9002013e:	1c59      	adds	r1, r3, #1
90020140:	eb01 2313 	add.w	r3, r1, r3, lsr #8
90020144:	eb02 2313 	add.w	r3, r2, r3, lsr #8
90020148:	f3c3 03c4 	ubfx	r3, r3, #3, #5
9002014c:	4318      	orrs	r0, r3
9002014e:	f8ae 0000 	strh.w	r0, [lr]
90020152:	e7a2      	b.n	9002009a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ee>
90020154:	b013      	add	sp, #76	; 0x4c
90020156:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9002015a:	bf00      	nop
9002015c:	fffff800 	.word	0xfffff800

90020160 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>:
90020160:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
90020164:	e9dd 4509 	ldrd	r4, r5, [sp, #36]	; 0x24
90020168:	f9bd a020 	ldrsh.w	sl, [sp, #32]
9002016c:	fb05 4c03 	mla	ip, r5, r3, r4
90020170:	2d00      	cmp	r5, #0
90020172:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
90020176:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
9002017a:	eb02 0e4c 	add.w	lr, r2, ip, lsl #1
9002017e:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
90020182:	8808      	ldrh	r0, [r1, #0]
90020184:	f2c0 80a7 	blt.w	900202d6 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x176>
90020188:	45aa      	cmp	sl, r5
9002018a:	f340 80a4 	ble.w	900202d6 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x176>
9002018e:	2c00      	cmp	r4, #0
90020190:	f2c0 809f 	blt.w	900202d2 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x172>
90020194:	42a3      	cmp	r3, r4
90020196:	f340 809c 	ble.w	900202d2 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x172>
9002019a:	f832 801c 	ldrh.w	r8, [r2, ip, lsl #1]
9002019e:	1c62      	adds	r2, r4, #1
900201a0:	f100 809c 	bmi.w	900202dc <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
900201a4:	4293      	cmp	r3, r2
900201a6:	f340 8099 	ble.w	900202dc <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
900201aa:	f1b9 0f00 	cmp.w	r9, #0
900201ae:	f000 8095 	beq.w	900202dc <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
900201b2:	f8be c002 	ldrh.w	ip, [lr, #2]
900201b6:	3501      	adds	r5, #1
900201b8:	f100 8094 	bmi.w	900202e4 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
900201bc:	45aa      	cmp	sl, r5
900201be:	f340 8091 	ble.w	900202e4 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
900201c2:	2f00      	cmp	r7, #0
900201c4:	f000 808e 	beq.w	900202e4 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
900201c8:	2c00      	cmp	r4, #0
900201ca:	f2c0 8089 	blt.w	900202e0 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x180>
900201ce:	42a3      	cmp	r3, r4
900201d0:	f340 8086 	ble.w	900202e0 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x180>
900201d4:	f83e 5013 	ldrh.w	r5, [lr, r3, lsl #1]
900201d8:	3401      	adds	r4, #1
900201da:	f100 8086 	bmi.w	900202ea <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
900201de:	42a3      	cmp	r3, r4
900201e0:	f340 8083 	ble.w	900202ea <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
900201e4:	f1b9 0f00 	cmp.w	r9, #0
900201e8:	d07f      	beq.n	900202ea <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
900201ea:	3301      	adds	r3, #1
900201ec:	f83e 3013 	ldrh.w	r3, [lr, r3, lsl #1]
900201f0:	ea4f 4408 	mov.w	r4, r8, lsl #16
900201f4:	f428 68fc 	bic.w	r8, r8, #2016	; 0x7e0
900201f8:	fb19 fe07 	smulbb	lr, r9, r7
900201fc:	f1c7 0210 	rsb	r2, r7, #16
90020200:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
90020204:	f3ce 0ec7 	ubfx	lr, lr, #3, #8
90020208:	eba2 0209 	sub.w	r2, r2, r9
9002020c:	ea44 0808 	orr.w	r8, r4, r8
90020210:	ea4f 440c 	mov.w	r4, ip, lsl #16
90020214:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
90020218:	eb0e 0242 	add.w	r2, lr, r2, lsl #1
9002021c:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
90020220:	ebce 0747 	rsb	r7, lr, r7, lsl #1
90020224:	ea44 0c0c 	orr.w	ip, r4, ip
90020228:	ebce 0449 	rsb	r4, lr, r9, lsl #1
9002022c:	fb04 f40c 	mul.w	r4, r4, ip
90020230:	fb02 4808 	mla	r8, r2, r8, r4
90020234:	041a      	lsls	r2, r3, #16
90020236:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
9002023a:	b2b4      	uxth	r4, r6
9002023c:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
90020240:	43f6      	mvns	r6, r6
90020242:	4313      	orrs	r3, r2
90020244:	042a      	lsls	r2, r5, #16
90020246:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
9002024a:	b2f6      	uxtb	r6, r6
9002024c:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
90020250:	fb0e 8303 	mla	r3, lr, r3, r8
90020254:	432a      	orrs	r2, r5
90020256:	fb07 3202 	mla	r2, r7, r2, r3
9002025a:	10c7      	asrs	r7, r0, #3
9002025c:	0d53      	lsrs	r3, r2, #21
9002025e:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
90020262:	0952      	lsrs	r2, r2, #5
90020264:	fb17 f706 	smulbb	r7, r7, r6
90020268:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9002026c:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
90020270:	431a      	orrs	r2, r3
90020272:	b293      	uxth	r3, r2
90020274:	1202      	asrs	r2, r0, #8
90020276:	121d      	asrs	r5, r3, #8
90020278:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
9002027c:	00c0      	lsls	r0, r0, #3
9002027e:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
90020282:	fb12 f206 	smulbb	r2, r2, r6
90020286:	b2c0      	uxtb	r0, r0
90020288:	fb05 2504 	mla	r5, r5, r4, r2
9002028c:	10da      	asrs	r2, r3, #3
9002028e:	fb10 f006 	smulbb	r0, r0, r6
90020292:	00db      	lsls	r3, r3, #3
90020294:	b2ad      	uxth	r5, r5
90020296:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
9002029a:	b2db      	uxtb	r3, r3
9002029c:	fb02 7204 	mla	r2, r2, r4, r7
900202a0:	fb03 0004 	mla	r0, r3, r4, r0
900202a4:	1c6b      	adds	r3, r5, #1
900202a6:	b292      	uxth	r2, r2
900202a8:	b280      	uxth	r0, r0
900202aa:	eb03 2515 	add.w	r5, r3, r5, lsr #8
900202ae:	1c43      	adds	r3, r0, #1
900202b0:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
900202b4:	eb03 2310 	add.w	r3, r3, r0, lsr #8
900202b8:	1c50      	adds	r0, r2, #1
900202ba:	eb00 2212 	add.w	r2, r0, r2, lsr #8
900202be:	f3c3 23c4 	ubfx	r3, r3, #11, #5
900202c2:	0952      	lsrs	r2, r2, #5
900202c4:	432b      	orrs	r3, r5
900202c6:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
900202ca:	4313      	orrs	r3, r2
900202cc:	800b      	strh	r3, [r1, #0]
900202ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
900202d2:	4680      	mov	r8, r0
900202d4:	e763      	b.n	9002019e <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x3e>
900202d6:	4684      	mov	ip, r0
900202d8:	4680      	mov	r8, r0
900202da:	e76c      	b.n	900201b6 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x56>
900202dc:	4684      	mov	ip, r0
900202de:	e76a      	b.n	900201b6 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x56>
900202e0:	4605      	mov	r5, r0
900202e2:	e779      	b.n	900201d8 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x78>
900202e4:	4603      	mov	r3, r0
900202e6:	4605      	mov	r5, r0
900202e8:	e782      	b.n	900201f0 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x90>
900202ea:	4603      	mov	r3, r0
900202ec:	e780      	b.n	900201f0 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x90>

900202ee <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
900202ee:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900202f2:	b093      	sub	sp, #76	; 0x4c
900202f4:	461d      	mov	r5, r3
900202f6:	9210      	str	r2, [sp, #64]	; 0x40
900202f8:	9b21      	ldr	r3, [sp, #132]	; 0x84
900202fa:	f89d 2094 	ldrb.w	r2, [sp, #148]	; 0x94
900202fe:	910a      	str	r1, [sp, #40]	; 0x28
90020300:	920b      	str	r2, [sp, #44]	; 0x2c
90020302:	6859      	ldr	r1, [r3, #4]
90020304:	681b      	ldr	r3, [r3, #0]
90020306:	9011      	str	r0, [sp, #68]	; 0x44
90020308:	e9dd 2722 	ldrd	r2, r7, [sp, #136]	; 0x88
9002030c:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	; 0x74
90020310:	fb01 2707 	mla	r7, r1, r7, r2
90020314:	eb03 0347 	add.w	r3, r3, r7, lsl #1
90020318:	9307      	str	r3, [sp, #28]
9002031a:	9b24      	ldr	r3, [sp, #144]	; 0x90
9002031c:	681b      	ldr	r3, [r3, #0]
9002031e:	9309      	str	r3, [sp, #36]	; 0x24
90020320:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
90020322:	43db      	mvns	r3, r3
90020324:	b2db      	uxtb	r3, r3
90020326:	9308      	str	r3, [sp, #32]
90020328:	9b0a      	ldr	r3, [sp, #40]	; 0x28
9002032a:	2b00      	cmp	r3, #0
9002032c:	dc03      	bgt.n	90020336 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
9002032e:	9b10      	ldr	r3, [sp, #64]	; 0x40
90020330:	2b00      	cmp	r3, #0
90020332:	f340 8205 	ble.w	90020740 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
90020336:	9b24      	ldr	r3, [sp, #144]	; 0x90
90020338:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
9002033c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
90020340:	1e48      	subs	r0, r1, #1
90020342:	f102 3cff 	add.w	ip, r2, #4294967295
90020346:	2d00      	cmp	r5, #0
90020348:	f340 80da 	ble.w	90020500 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
9002034c:	ea5f 4e24 	movs.w	lr, r4, asr #16
90020350:	ea4f 4326 	mov.w	r3, r6, asr #16
90020354:	d406      	bmi.n	90020364 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
90020356:	4586      	cmp	lr, r0
90020358:	da04      	bge.n	90020364 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
9002035a:	2b00      	cmp	r3, #0
9002035c:	db02      	blt.n	90020364 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
9002035e:	4563      	cmp	r3, ip
90020360:	f2c0 80cf 	blt.w	90020502 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
90020364:	f11e 0e01 	adds.w	lr, lr, #1
90020368:	f100 80c1 	bmi.w	900204ee <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
9002036c:	4571      	cmp	r1, lr
9002036e:	f2c0 80be 	blt.w	900204ee <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
90020372:	3301      	adds	r3, #1
90020374:	f100 80bb 	bmi.w	900204ee <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
90020378:	429a      	cmp	r2, r3
9002037a:	f2c0 80b8 	blt.w	900204ee <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
9002037e:	46a9      	mov	r9, r5
90020380:	f8dd 801c 	ldr.w	r8, [sp, #28]
90020384:	f1b9 0f00 	cmp.w	r9, #0
90020388:	f340 80d8 	ble.w	9002053c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24e>
9002038c:	9b24      	ldr	r3, [sp, #144]	; 0x90
9002038e:	1421      	asrs	r1, r4, #16
90020390:	ea4f 4026 	mov.w	r0, r6, asr #16
90020394:	f3c4 3203 	ubfx	r2, r4, #12, #4
90020398:	f3c6 3c03 	ubfx	ip, r6, #12, #4
9002039c:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
900203a0:	f100 8112 	bmi.w	900205c8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
900203a4:	f10e 3aff 	add.w	sl, lr, #4294967295
900203a8:	4551      	cmp	r1, sl
900203aa:	f280 810d 	bge.w	900205c8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
900203ae:	2800      	cmp	r0, #0
900203b0:	f2c0 810a 	blt.w	900205c8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
900203b4:	f103 3aff 	add.w	sl, r3, #4294967295
900203b8:	4550      	cmp	r0, sl
900203ba:	f280 8105 	bge.w	900205c8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
900203be:	fa0f f38e 	sxth.w	r3, lr
900203c2:	fb00 1103 	mla	r1, r0, r3, r1
900203c6:	9809      	ldr	r0, [sp, #36]	; 0x24
900203c8:	eb00 0a41 	add.w	sl, r0, r1, lsl #1
900203cc:	f830 e011 	ldrh.w	lr, [r0, r1, lsl #1]
900203d0:	f8ba 1002 	ldrh.w	r1, [sl, #2]
900203d4:	f1bc 0f00 	cmp.w	ip, #0
900203d8:	d007      	beq.n	900203ea <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfc>
900203da:	005b      	lsls	r3, r3, #1
900203dc:	eb0a 0003 	add.w	r0, sl, r3
900203e0:	f83a 3003 	ldrh.w	r3, [sl, r3]
900203e4:	930c      	str	r3, [sp, #48]	; 0x30
900203e6:	8843      	ldrh	r3, [r0, #2]
900203e8:	930d      	str	r3, [sp, #52]	; 0x34
900203ea:	ea4f 400e 	mov.w	r0, lr, lsl #16
900203ee:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
900203f2:	fb12 f30c 	smulbb	r3, r2, ip
900203f6:	ea4f 4a01 	mov.w	sl, r1, lsl #16
900203fa:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
900203fe:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
90020402:	10db      	asrs	r3, r3, #3
90020404:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
90020408:	ea40 000e 	orr.w	r0, r0, lr
9002040c:	f1cc 0e10 	rsb	lr, ip, #16
90020410:	ea4a 0101 	orr.w	r1, sl, r1
90020414:	9f08      	ldr	r7, [sp, #32]
90020416:	ebae 0e02 	sub.w	lr, lr, r2
9002041a:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
9002041e:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
90020422:	4351      	muls	r1, r2
90020424:	9a0d      	ldr	r2, [sp, #52]	; 0x34
90020426:	fb0e 1e00 	mla	lr, lr, r0, r1
9002042a:	990c      	ldr	r1, [sp, #48]	; 0x30
9002042c:	0410      	lsls	r0, r2, #16
9002042e:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
90020432:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
90020436:	4310      	orrs	r0, r2
90020438:	9a0c      	ldr	r2, [sp, #48]	; 0x30
9002043a:	0412      	lsls	r2, r2, #16
9002043c:	fb03 e000 	mla	r0, r3, r0, lr
90020440:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
90020444:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
90020448:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
9002044c:	ea42 020e 	orr.w	r2, r2, lr
90020450:	fb03 0302 	mla	r3, r3, r2, r0
90020454:	f8b8 0000 	ldrh.w	r0, [r8]
90020458:	0d5a      	lsrs	r2, r3, #21
9002045a:	095b      	lsrs	r3, r3, #5
9002045c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
90020460:	1201      	asrs	r1, r0, #8
90020462:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
90020466:	ea4f 0ee0 	mov.w	lr, r0, asr #3
9002046a:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
9002046e:	00c0      	lsls	r0, r0, #3
90020470:	4313      	orrs	r3, r2
90020472:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
90020476:	fb11 f107 	smulbb	r1, r1, r7
9002047a:	b2c0      	uxtb	r0, r0
9002047c:	b29b      	uxth	r3, r3
9002047e:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
90020482:	fb10 f007 	smulbb	r0, r0, r7
90020486:	fb1e fe07 	smulbb	lr, lr, r7
9002048a:	ea4f 2c23 	mov.w	ip, r3, asr #8
9002048e:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
90020492:	fb0c 1c02 	mla	ip, ip, r2, r1
90020496:	10d9      	asrs	r1, r3, #3
90020498:	00db      	lsls	r3, r3, #3
9002049a:	fa1f fc8c 	uxth.w	ip, ip
9002049e:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
900204a2:	b2db      	uxtb	r3, r3
900204a4:	fb01 e102 	mla	r1, r1, r2, lr
900204a8:	fb03 0302 	mla	r3, r3, r2, r0
900204ac:	b289      	uxth	r1, r1
900204ae:	b29a      	uxth	r2, r3
900204b0:	f10c 0301 	add.w	r3, ip, #1
900204b4:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
900204b8:	1c53      	adds	r3, r2, #1
900204ba:	eb03 2312 	add.w	r3, r3, r2, lsr #8
900204be:	1c4a      	adds	r2, r1, #1
900204c0:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
900204c4:	eb02 2111 	add.w	r1, r2, r1, lsr #8
900204c8:	f3c3 23c4 	ubfx	r3, r3, #11, #5
900204cc:	0949      	lsrs	r1, r1, #5
900204ce:	ea43 030c 	orr.w	r3, r3, ip
900204d2:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
900204d6:	430b      	orrs	r3, r1
900204d8:	f8a8 3000 	strh.w	r3, [r8]
900204dc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
900204de:	f108 0802 	add.w	r8, r8, #2
900204e2:	f109 39ff 	add.w	r9, r9, #4294967295
900204e6:	441c      	add	r4, r3
900204e8:	9b20      	ldr	r3, [sp, #128]	; 0x80
900204ea:	441e      	add	r6, r3
900204ec:	e74a      	b.n	90020384 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
900204ee:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
900204f0:	3d01      	subs	r5, #1
900204f2:	441c      	add	r4, r3
900204f4:	9b20      	ldr	r3, [sp, #128]	; 0x80
900204f6:	441e      	add	r6, r3
900204f8:	9b07      	ldr	r3, [sp, #28]
900204fa:	3302      	adds	r3, #2
900204fc:	9307      	str	r3, [sp, #28]
900204fe:	e722      	b.n	90020346 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
90020500:	d022      	beq.n	90020548 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
90020502:	1e6b      	subs	r3, r5, #1
90020504:	981f      	ldr	r0, [sp, #124]	; 0x7c
90020506:	fb00 4003 	mla	r0, r0, r3, r4
9002050a:	1400      	asrs	r0, r0, #16
9002050c:	f53f af37 	bmi.w	9002037e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
90020510:	3901      	subs	r1, #1
90020512:	4288      	cmp	r0, r1
90020514:	f6bf af33 	bge.w	9002037e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
90020518:	9920      	ldr	r1, [sp, #128]	; 0x80
9002051a:	fb01 6303 	mla	r3, r1, r3, r6
9002051e:	141b      	asrs	r3, r3, #16
90020520:	f53f af2d 	bmi.w	9002037e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
90020524:	3a01      	subs	r2, #1
90020526:	4293      	cmp	r3, r2
90020528:	f6bf af29 	bge.w	9002037e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
9002052c:	46a8      	mov	r8, r5
9002052e:	f8dd 901c 	ldr.w	r9, [sp, #28]
90020532:	f8bd a02c 	ldrh.w	sl, [sp, #44]	; 0x2c
90020536:	f1b8 0f00 	cmp.w	r8, #0
9002053a:	dc60      	bgt.n	900205fe <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x310>
9002053c:	9b07      	ldr	r3, [sp, #28]
9002053e:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
90020542:	eb03 0345 	add.w	r3, r3, r5, lsl #1
90020546:	9307      	str	r3, [sp, #28]
90020548:	9b0a      	ldr	r3, [sp, #40]	; 0x28
9002054a:	2b00      	cmp	r3, #0
9002054c:	f340 80f8 	ble.w	90020740 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
90020550:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
90020554:	9b1c      	ldr	r3, [sp, #112]	; 0x70
90020556:	ee30 0a04 	vadd.f32	s0, s0, s8
9002055a:	ee70 0aa4 	vadd.f32	s1, s1, s9
9002055e:	eef0 6a62 	vmov.f32	s13, s5
90020562:	eec7 7a00 	vdiv.f32	s15, s14, s0
90020566:	ee31 1a05 	vadd.f32	s2, s2, s10
9002056a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9002056e:	ee16 4a90 	vmov	r4, s13
90020572:	eef0 6a43 	vmov.f32	s13, s6
90020576:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9002057a:	ee16 6a90 	vmov	r6, s13
9002057e:	ee20 7aa7 	vmul.f32	s14, s1, s15
90020582:	ee61 7a27 	vmul.f32	s15, s2, s15
90020586:	ee77 2a62 	vsub.f32	s5, s14, s5
9002058a:	ee37 3ac3 	vsub.f32	s6, s15, s6
9002058e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
90020592:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
90020596:	ee12 2a90 	vmov	r2, s5
9002059a:	eef0 2a47 	vmov.f32	s5, s14
9002059e:	fb92 f3f3 	sdiv	r3, r2, r3
900205a2:	ee13 2a10 	vmov	r2, s6
900205a6:	931f      	str	r3, [sp, #124]	; 0x7c
900205a8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
900205aa:	eeb0 3a67 	vmov.f32	s6, s15
900205ae:	fb92 f3f3 	sdiv	r3, r2, r3
900205b2:	9320      	str	r3, [sp, #128]	; 0x80
900205b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
900205b6:	9a10      	ldr	r2, [sp, #64]	; 0x40
900205b8:	3b01      	subs	r3, #1
900205ba:	930a      	str	r3, [sp, #40]	; 0x28
900205bc:	bf08      	it	eq
900205be:	4615      	moveq	r5, r2
900205c0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
900205c2:	bf18      	it	ne
900205c4:	461d      	movne	r5, r3
900205c6:	e6af      	b.n	90020328 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
900205c8:	f111 0a01 	adds.w	sl, r1, #1
900205cc:	d486      	bmi.n	900204dc <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
900205ce:	45d6      	cmp	lr, sl
900205d0:	db84      	blt.n	900204dc <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
900205d2:	f110 0a01 	adds.w	sl, r0, #1
900205d6:	d481      	bmi.n	900204dc <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
900205d8:	4553      	cmp	r3, sl
900205da:	f6ff af7f 	blt.w	900204dc <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
900205de:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
900205e0:	b21b      	sxth	r3, r3
900205e2:	9101      	str	r1, [sp, #4]
900205e4:	4641      	mov	r1, r8
900205e6:	9300      	str	r3, [sp, #0]
900205e8:	fa0f f38e 	sxth.w	r3, lr
900205ec:	e9cd 0202 	strd	r0, r2, [sp, #8]
900205f0:	e9cd c704 	strd	ip, r7, [sp, #16]
900205f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
900205f6:	9811      	ldr	r0, [sp, #68]	; 0x44
900205f8:	f7ff fdb2 	bl	90020160 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>
900205fc:	e76e      	b.n	900204dc <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
900205fe:	9b24      	ldr	r3, [sp, #144]	; 0x90
90020600:	1430      	asrs	r0, r6, #16
90020602:	9f09      	ldr	r7, [sp, #36]	; 0x24
90020604:	f3c6 3e03 	ubfx	lr, r6, #12, #4
90020608:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
9002060c:	1423      	asrs	r3, r4, #16
9002060e:	f3c4 3203 	ubfx	r2, r4, #12, #4
90020612:	fb01 3000 	mla	r0, r1, r0, r3
90020616:	9b09      	ldr	r3, [sp, #36]	; 0x24
90020618:	eb03 0340 	add.w	r3, r3, r0, lsl #1
9002061c:	f837 c010 	ldrh.w	ip, [r7, r0, lsl #1]
90020620:	8858      	ldrh	r0, [r3, #2]
90020622:	f1be 0f00 	cmp.w	lr, #0
90020626:	d00b      	beq.n	90020640 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x352>
90020628:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
9002062c:	3901      	subs	r1, #1
9002062e:	0049      	lsls	r1, r1, #1
90020630:	3102      	adds	r1, #2
90020632:	eb03 0b01 	add.w	fp, r3, r1
90020636:	5a5b      	ldrh	r3, [r3, r1]
90020638:	930e      	str	r3, [sp, #56]	; 0x38
9002063a:	f8bb 3002 	ldrh.w	r3, [fp, #2]
9002063e:	930f      	str	r3, [sp, #60]	; 0x3c
90020640:	ea4f 410c 	mov.w	r1, ip, lsl #16
90020644:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
90020648:	fb12 f30e 	smulbb	r3, r2, lr
9002064c:	ea4f 4b00 	mov.w	fp, r0, lsl #16
90020650:	f001 61fc 	and.w	r1, r1, #132120576	; 0x7e00000
90020654:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
90020658:	10db      	asrs	r3, r3, #3
9002065a:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
9002065e:	ea41 010c 	orr.w	r1, r1, ip
90020662:	f1ce 0c10 	rsb	ip, lr, #16
90020666:	ea4b 0000 	orr.w	r0, fp, r0
9002066a:	9f08      	ldr	r7, [sp, #32]
9002066c:	ebac 0c02 	sub.w	ip, ip, r2
90020670:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
90020674:	f108 38ff 	add.w	r8, r8, #4294967295
90020678:	4350      	muls	r0, r2
9002067a:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
9002067e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
90020680:	fb0c 0c01 	mla	ip, ip, r1, r0
90020684:	980e      	ldr	r0, [sp, #56]	; 0x38
90020686:	ea4f 4b02 	mov.w	fp, r2, lsl #16
9002068a:	f422 61fc 	bic.w	r1, r2, #2016	; 0x7e0
9002068e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
90020690:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
90020694:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
90020698:	0412      	lsls	r2, r2, #16
9002069a:	ea4b 0101 	orr.w	r1, fp, r1
9002069e:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
900206a2:	fb03 c101 	mla	r1, r3, r1, ip
900206a6:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
900206aa:	4302      	orrs	r2, r0
900206ac:	fb03 1202 	mla	r2, r3, r2, r1
900206b0:	ea4f 5b52 	mov.w	fp, r2, lsr #21
900206b4:	0952      	lsrs	r2, r2, #5
900206b6:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
900206ba:	f422 63fc 	bic.w	r3, r2, #2016	; 0x7e0
900206be:	f8b9 2000 	ldrh.w	r2, [r9]
900206c2:	ea4b 0303 	orr.w	r3, fp, r3
900206c6:	1211      	asrs	r1, r2, #8
900206c8:	ea4f 0ce2 	mov.w	ip, r2, asr #3
900206cc:	b29b      	uxth	r3, r3
900206ce:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
900206d2:	00d2      	lsls	r2, r2, #3
900206d4:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
900206d8:	fb11 f107 	smulbb	r1, r1, r7
900206dc:	1218      	asrs	r0, r3, #8
900206de:	fb1c fc07 	smulbb	ip, ip, r7
900206e2:	b2d2      	uxtb	r2, r2
900206e4:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
900206e8:	fb12 f207 	smulbb	r2, r2, r7
900206ec:	fb00 100a 	mla	r0, r0, sl, r1
900206f0:	10d9      	asrs	r1, r3, #3
900206f2:	00db      	lsls	r3, r3, #3
900206f4:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
900206f8:	b280      	uxth	r0, r0
900206fa:	b2db      	uxtb	r3, r3
900206fc:	fb01 c10a 	mla	r1, r1, sl, ip
90020700:	fb03 230a 	mla	r3, r3, sl, r2
90020704:	1c42      	adds	r2, r0, #1
90020706:	b289      	uxth	r1, r1
90020708:	b29b      	uxth	r3, r3
9002070a:	eb02 2010 	add.w	r0, r2, r0, lsr #8
9002070e:	f101 0c01 	add.w	ip, r1, #1
90020712:	1c5a      	adds	r2, r3, #1
90020714:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
90020718:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
9002071c:	eb02 2213 	add.w	r2, r2, r3, lsr #8
90020720:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
90020722:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
90020726:	f3c2 22c4 	ubfx	r2, r2, #11, #5
9002072a:	441c      	add	r4, r3
9002072c:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
90020730:	9b20      	ldr	r3, [sp, #128]	; 0x80
90020732:	4310      	orrs	r0, r2
90020734:	441e      	add	r6, r3
90020736:	ea40 000c 	orr.w	r0, r0, ip
9002073a:	f829 0b02 	strh.w	r0, [r9], #2
9002073e:	e6fa      	b.n	90020536 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
90020740:	b013      	add	sp, #76	; 0x4c
90020742:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

90020746 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>:
90020746:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
9002074a:	e9dd 4e08 	ldrd	r4, lr, [sp, #32]
9002074e:	f9bd 901c 	ldrsh.w	r9, [sp, #28]
90020752:	fb0e 4703 	mla	r7, lr, r3, r4
90020756:	f1be 0f00 	cmp.w	lr, #0
9002075a:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
9002075e:	f89d 602c 	ldrb.w	r6, [sp, #44]	; 0x2c
90020762:	eb02 0847 	add.w	r8, r2, r7, lsl #1
90020766:	8808      	ldrh	r0, [r1, #0]
90020768:	db60      	blt.n	9002082c <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe6>
9002076a:	45f1      	cmp	r9, lr
9002076c:	dd5e      	ble.n	9002082c <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe6>
9002076e:	2c00      	cmp	r4, #0
90020770:	db5a      	blt.n	90020828 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe2>
90020772:	42a3      	cmp	r3, r4
90020774:	dd58      	ble.n	90020828 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe2>
90020776:	f832 c017 	ldrh.w	ip, [r2, r7, lsl #1]
9002077a:	1c62      	adds	r2, r4, #1
9002077c:	d459      	bmi.n	90020832 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
9002077e:	4293      	cmp	r3, r2
90020780:	dd57      	ble.n	90020832 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
90020782:	2d00      	cmp	r5, #0
90020784:	d055      	beq.n	90020832 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
90020786:	f8b8 7002 	ldrh.w	r7, [r8, #2]
9002078a:	f11e 0e01 	adds.w	lr, lr, #1
9002078e:	d454      	bmi.n	9002083a <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
90020790:	45f1      	cmp	r9, lr
90020792:	dd52      	ble.n	9002083a <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
90020794:	2e00      	cmp	r6, #0
90020796:	d050      	beq.n	9002083a <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
90020798:	2c00      	cmp	r4, #0
9002079a:	db4c      	blt.n	90020836 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf0>
9002079c:	42a3      	cmp	r3, r4
9002079e:	dd4a      	ble.n	90020836 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf0>
900207a0:	f838 2013 	ldrh.w	r2, [r8, r3, lsl #1]
900207a4:	3401      	adds	r4, #1
900207a6:	d405      	bmi.n	900207b4 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
900207a8:	42a3      	cmp	r3, r4
900207aa:	dd03      	ble.n	900207b4 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
900207ac:	b115      	cbz	r5, 900207b4 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
900207ae:	3301      	adds	r3, #1
900207b0:	f838 0013 	ldrh.w	r0, [r8, r3, lsl #1]
900207b4:	fb15 f406 	smulbb	r4, r5, r6
900207b8:	ea4f 430c 	mov.w	r3, ip, lsl #16
900207bc:	ea4f 4e07 	mov.w	lr, r7, lsl #16
900207c0:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
900207c4:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
900207c8:	f3c4 04c7 	ubfx	r4, r4, #3, #8
900207cc:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
900207d0:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
900207d4:	ea43 0c0c 	orr.w	ip, r3, ip
900207d8:	f1c6 0310 	rsb	r3, r6, #16
900207dc:	ea4e 0707 	orr.w	r7, lr, r7
900207e0:	ebc4 0646 	rsb	r6, r4, r6, lsl #1
900207e4:	1b5b      	subs	r3, r3, r5
900207e6:	ebc4 0545 	rsb	r5, r4, r5, lsl #1
900207ea:	eb04 0343 	add.w	r3, r4, r3, lsl #1
900207ee:	437d      	muls	r5, r7
900207f0:	fb03 5c0c 	mla	ip, r3, ip, r5
900207f4:	0403      	lsls	r3, r0, #16
900207f6:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
900207fa:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
900207fe:	4318      	orrs	r0, r3
90020800:	0413      	lsls	r3, r2, #16
90020802:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
90020806:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
9002080a:	fb04 c000 	mla	r0, r4, r0, ip
9002080e:	4313      	orrs	r3, r2
90020810:	fb06 0003 	mla	r0, r6, r3, r0
90020814:	0d43      	lsrs	r3, r0, #21
90020816:	0940      	lsrs	r0, r0, #5
90020818:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9002081c:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
90020820:	4318      	orrs	r0, r3
90020822:	8008      	strh	r0, [r1, #0]
90020824:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
90020828:	4684      	mov	ip, r0
9002082a:	e7a6      	b.n	9002077a <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x34>
9002082c:	4607      	mov	r7, r0
9002082e:	4684      	mov	ip, r0
90020830:	e7ab      	b.n	9002078a <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x44>
90020832:	4607      	mov	r7, r0
90020834:	e7a9      	b.n	9002078a <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x44>
90020836:	4602      	mov	r2, r0
90020838:	e7b4      	b.n	900207a4 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x5e>
9002083a:	4602      	mov	r2, r0
9002083c:	e7ba      	b.n	900207b4 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>

9002083e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
9002083e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90020842:	b08f      	sub	sp, #60	; 0x3c
90020844:	461d      	mov	r5, r3
90020846:	9b1d      	ldr	r3, [sp, #116]	; 0x74
90020848:	9107      	str	r1, [sp, #28]
9002084a:	920c      	str	r2, [sp, #48]	; 0x30
9002084c:	6859      	ldr	r1, [r3, #4]
9002084e:	681b      	ldr	r3, [r3, #0]
90020850:	900d      	str	r0, [sp, #52]	; 0x34
90020852:	e9dd 271e 	ldrd	r2, r7, [sp, #120]	; 0x78
90020856:	e9dd 4619 	ldrd	r4, r6, [sp, #100]	; 0x64
9002085a:	fb01 2707 	mla	r7, r1, r7, r2
9002085e:	eb03 0747 	add.w	r7, r3, r7, lsl #1
90020862:	9b20      	ldr	r3, [sp, #128]	; 0x80
90020864:	f8d3 8000 	ldr.w	r8, [r3]
90020868:	9b07      	ldr	r3, [sp, #28]
9002086a:	2b00      	cmp	r3, #0
9002086c:	dc03      	bgt.n	90020876 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
9002086e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
90020870:	2b00      	cmp	r3, #0
90020872:	f340 8182 	ble.w	90020b7a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33c>
90020876:	9b20      	ldr	r3, [sp, #128]	; 0x80
90020878:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
9002087c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
90020880:	1e48      	subs	r0, r1, #1
90020882:	f102 3cff 	add.w	ip, r2, #4294967295
90020886:	2d00      	cmp	r5, #0
90020888:	f340 809b 	ble.w	900209c2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x184>
9002088c:	ea5f 4e24 	movs.w	lr, r4, asr #16
90020890:	ea4f 4326 	mov.w	r3, r6, asr #16
90020894:	d406      	bmi.n	900208a4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
90020896:	4586      	cmp	lr, r0
90020898:	da04      	bge.n	900208a4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
9002089a:	2b00      	cmp	r3, #0
9002089c:	db02      	blt.n	900208a4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
9002089e:	4563      	cmp	r3, ip
900208a0:	f2c0 8090 	blt.w	900209c4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
900208a4:	f11e 0e01 	adds.w	lr, lr, #1
900208a8:	f100 8084 	bmi.w	900209b4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
900208ac:	4571      	cmp	r1, lr
900208ae:	f2c0 8081 	blt.w	900209b4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
900208b2:	3301      	adds	r3, #1
900208b4:	d47e      	bmi.n	900209b4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
900208b6:	429a      	cmp	r2, r3
900208b8:	db7c      	blt.n	900209b4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
900208ba:	46aa      	mov	sl, r5
900208bc:	46b9      	mov	r9, r7
900208be:	f1ba 0f00 	cmp.w	sl, #0
900208c2:	f340 8099 	ble.w	900209f8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
900208c6:	9b20      	ldr	r3, [sp, #128]	; 0x80
900208c8:	1421      	asrs	r1, r4, #16
900208ca:	ea4f 4026 	mov.w	r0, r6, asr #16
900208ce:	f3c4 3203 	ubfx	r2, r4, #12, #4
900208d2:	f3c6 3c03 	ubfx	ip, r6, #12, #4
900208d6:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
900208da:	f100 80d1 	bmi.w	90020a80 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
900208de:	f10e 3bff 	add.w	fp, lr, #4294967295
900208e2:	4559      	cmp	r1, fp
900208e4:	f280 80cc 	bge.w	90020a80 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
900208e8:	2800      	cmp	r0, #0
900208ea:	f2c0 80c9 	blt.w	90020a80 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
900208ee:	f103 3bff 	add.w	fp, r3, #4294967295
900208f2:	4558      	cmp	r0, fp
900208f4:	f280 80c4 	bge.w	90020a80 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
900208f8:	fa0f fe8e 	sxth.w	lr, lr
900208fc:	fb00 110e 	mla	r1, r0, lr, r1
90020900:	eb08 0041 	add.w	r0, r8, r1, lsl #1
90020904:	f838 b011 	ldrh.w	fp, [r8, r1, lsl #1]
90020908:	8841      	ldrh	r1, [r0, #2]
9002090a:	f1bc 0f00 	cmp.w	ip, #0
9002090e:	d00b      	beq.n	90020928 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xea>
90020910:	f10e 4300 	add.w	r3, lr, #2147483648	; 0x80000000
90020914:	3b01      	subs	r3, #1
90020916:	005b      	lsls	r3, r3, #1
90020918:	3302      	adds	r3, #2
9002091a:	eb00 0e03 	add.w	lr, r0, r3
9002091e:	5ac3      	ldrh	r3, [r0, r3]
90020920:	9308      	str	r3, [sp, #32]
90020922:	f8be 3002 	ldrh.w	r3, [lr, #2]
90020926:	9309      	str	r3, [sp, #36]	; 0x24
90020928:	ea4f 400b 	mov.w	r0, fp, lsl #16
9002092c:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
90020930:	fb12 f30c 	smulbb	r3, r2, ip
90020934:	f1cc 0e10 	rsb	lr, ip, #16
90020938:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
9002093c:	10db      	asrs	r3, r3, #3
9002093e:	ebae 0e02 	sub.w	lr, lr, r2
90020942:	ea40 000b 	orr.w	r0, r0, fp
90020946:	ea4f 4b01 	mov.w	fp, r1, lsl #16
9002094a:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
9002094e:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
90020952:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
90020956:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
9002095a:	ea4b 0101 	orr.w	r1, fp, r1
9002095e:	4351      	muls	r1, r2
90020960:	9a09      	ldr	r2, [sp, #36]	; 0x24
90020962:	fb0e 1e00 	mla	lr, lr, r0, r1
90020966:	0410      	lsls	r0, r2, #16
90020968:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
9002096c:	9908      	ldr	r1, [sp, #32]
9002096e:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
90020972:	4310      	orrs	r0, r2
90020974:	9a08      	ldr	r2, [sp, #32]
90020976:	0412      	lsls	r2, r2, #16
90020978:	fb03 e000 	mla	r0, r3, r0, lr
9002097c:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
90020980:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
90020984:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
90020988:	ea42 020e 	orr.w	r2, r2, lr
9002098c:	fb03 0302 	mla	r3, r3, r2, r0
90020990:	0d5a      	lsrs	r2, r3, #21
90020992:	095b      	lsrs	r3, r3, #5
90020994:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
90020998:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
9002099c:	4313      	orrs	r3, r2
9002099e:	f8a9 3000 	strh.w	r3, [r9]
900209a2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
900209a4:	f109 0902 	add.w	r9, r9, #2
900209a8:	f10a 3aff 	add.w	sl, sl, #4294967295
900209ac:	441c      	add	r4, r3
900209ae:	9b1c      	ldr	r3, [sp, #112]	; 0x70
900209b0:	441e      	add	r6, r3
900209b2:	e784      	b.n	900208be <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
900209b4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
900209b6:	3d01      	subs	r5, #1
900209b8:	3702      	adds	r7, #2
900209ba:	441c      	add	r4, r3
900209bc:	9b1c      	ldr	r3, [sp, #112]	; 0x70
900209be:	441e      	add	r6, r3
900209c0:	e761      	b.n	90020886 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
900209c2:	d01d      	beq.n	90020a00 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
900209c4:	1e6b      	subs	r3, r5, #1
900209c6:	981b      	ldr	r0, [sp, #108]	; 0x6c
900209c8:	fb00 4003 	mla	r0, r0, r3, r4
900209cc:	1400      	asrs	r0, r0, #16
900209ce:	f53f af74 	bmi.w	900208ba <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
900209d2:	3901      	subs	r1, #1
900209d4:	4288      	cmp	r0, r1
900209d6:	f6bf af70 	bge.w	900208ba <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
900209da:	991c      	ldr	r1, [sp, #112]	; 0x70
900209dc:	fb01 6303 	mla	r3, r1, r3, r6
900209e0:	141b      	asrs	r3, r3, #16
900209e2:	f53f af6a 	bmi.w	900208ba <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
900209e6:	3a01      	subs	r2, #1
900209e8:	4293      	cmp	r3, r2
900209ea:	f6bf af66 	bge.w	900208ba <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
900209ee:	46a9      	mov	r9, r5
900209f0:	46ba      	mov	sl, r7
900209f2:	f1b9 0f00 	cmp.w	r9, #0
900209f6:	dc5b      	bgt.n	90020ab0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
900209f8:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
900209fc:	eb07 0745 	add.w	r7, r7, r5, lsl #1
90020a00:	9b07      	ldr	r3, [sp, #28]
90020a02:	2b00      	cmp	r3, #0
90020a04:	f340 80b9 	ble.w	90020b7a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33c>
90020a08:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
90020a0c:	9b18      	ldr	r3, [sp, #96]	; 0x60
90020a0e:	ee30 0a04 	vadd.f32	s0, s0, s8
90020a12:	ee70 0aa4 	vadd.f32	s1, s1, s9
90020a16:	eef0 6a62 	vmov.f32	s13, s5
90020a1a:	eec7 7a00 	vdiv.f32	s15, s14, s0
90020a1e:	ee31 1a05 	vadd.f32	s2, s2, s10
90020a22:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
90020a26:	ee16 4a90 	vmov	r4, s13
90020a2a:	eef0 6a43 	vmov.f32	s13, s6
90020a2e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
90020a32:	ee16 6a90 	vmov	r6, s13
90020a36:	ee20 7aa7 	vmul.f32	s14, s1, s15
90020a3a:	ee61 7a27 	vmul.f32	s15, s2, s15
90020a3e:	ee77 2a62 	vsub.f32	s5, s14, s5
90020a42:	ee37 3ac3 	vsub.f32	s6, s15, s6
90020a46:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
90020a4a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
90020a4e:	ee12 2a90 	vmov	r2, s5
90020a52:	eef0 2a47 	vmov.f32	s5, s14
90020a56:	fb92 f3f3 	sdiv	r3, r2, r3
90020a5a:	ee13 2a10 	vmov	r2, s6
90020a5e:	931b      	str	r3, [sp, #108]	; 0x6c
90020a60:	9b18      	ldr	r3, [sp, #96]	; 0x60
90020a62:	eeb0 3a67 	vmov.f32	s6, s15
90020a66:	fb92 f3f3 	sdiv	r3, r2, r3
90020a6a:	931c      	str	r3, [sp, #112]	; 0x70
90020a6c:	9b07      	ldr	r3, [sp, #28]
90020a6e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
90020a70:	3b01      	subs	r3, #1
90020a72:	9307      	str	r3, [sp, #28]
90020a74:	bf08      	it	eq
90020a76:	4615      	moveq	r5, r2
90020a78:	9b18      	ldr	r3, [sp, #96]	; 0x60
90020a7a:	bf18      	it	ne
90020a7c:	461d      	movne	r5, r3
90020a7e:	e6f3      	b.n	90020868 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
90020a80:	f111 0b01 	adds.w	fp, r1, #1
90020a84:	d48d      	bmi.n	900209a2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
90020a86:	45de      	cmp	lr, fp
90020a88:	db8b      	blt.n	900209a2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
90020a8a:	f110 0b01 	adds.w	fp, r0, #1
90020a8e:	d488      	bmi.n	900209a2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
90020a90:	455b      	cmp	r3, fp
90020a92:	db86      	blt.n	900209a2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
90020a94:	b21b      	sxth	r3, r3
90020a96:	e9cd 1001 	strd	r1, r0, [sp, #4]
90020a9a:	e9cd 2c03 	strd	r2, ip, [sp, #12]
90020a9e:	9300      	str	r3, [sp, #0]
90020aa0:	4642      	mov	r2, r8
90020aa2:	fa0f f38e 	sxth.w	r3, lr
90020aa6:	4649      	mov	r1, r9
90020aa8:	980d      	ldr	r0, [sp, #52]	; 0x34
90020aaa:	f7ff fe4c 	bl	90020746 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>
90020aae:	e778      	b.n	900209a2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
90020ab0:	9b20      	ldr	r3, [sp, #128]	; 0x80
90020ab2:	1420      	asrs	r0, r4, #16
90020ab4:	1431      	asrs	r1, r6, #16
90020ab6:	f3c6 3e03 	ubfx	lr, r6, #12, #4
90020aba:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
90020abe:	f3c4 3203 	ubfx	r2, r4, #12, #4
90020ac2:	fb03 0101 	mla	r1, r3, r1, r0
90020ac6:	eb08 0041 	add.w	r0, r8, r1, lsl #1
90020aca:	f838 c011 	ldrh.w	ip, [r8, r1, lsl #1]
90020ace:	8841      	ldrh	r1, [r0, #2]
90020ad0:	f1be 0f00 	cmp.w	lr, #0
90020ad4:	d00b      	beq.n	90020aee <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
90020ad6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
90020ada:	3b01      	subs	r3, #1
90020adc:	005b      	lsls	r3, r3, #1
90020ade:	3302      	adds	r3, #2
90020ae0:	eb00 0b03 	add.w	fp, r0, r3
90020ae4:	5ac3      	ldrh	r3, [r0, r3]
90020ae6:	930a      	str	r3, [sp, #40]	; 0x28
90020ae8:	f8bb 3002 	ldrh.w	r3, [fp, #2]
90020aec:	930b      	str	r3, [sp, #44]	; 0x2c
90020aee:	ea4f 400c 	mov.w	r0, ip, lsl #16
90020af2:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
90020af6:	fb12 f30e 	smulbb	r3, r2, lr
90020afa:	ea4f 4b01 	mov.w	fp, r1, lsl #16
90020afe:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
90020b02:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
90020b06:	10db      	asrs	r3, r3, #3
90020b08:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
90020b0c:	ea40 000c 	orr.w	r0, r0, ip
90020b10:	f1ce 0c10 	rsb	ip, lr, #16
90020b14:	ea4b 0101 	orr.w	r1, fp, r1
90020b18:	f109 39ff 	add.w	r9, r9, #4294967295
90020b1c:	ebac 0c02 	sub.w	ip, ip, r2
90020b20:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
90020b24:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
90020b28:	4351      	muls	r1, r2
90020b2a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
90020b2c:	fb0c 1c00 	mla	ip, ip, r0, r1
90020b30:	990a      	ldr	r1, [sp, #40]	; 0x28
90020b32:	ea4f 4b02 	mov.w	fp, r2, lsl #16
90020b36:	f422 60fc 	bic.w	r0, r2, #2016	; 0x7e0
90020b3a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
90020b3c:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
90020b40:	0412      	lsls	r2, r2, #16
90020b42:	ea4b 0000 	orr.w	r0, fp, r0
90020b46:	f421 6bfc 	bic.w	fp, r1, #2016	; 0x7e0
90020b4a:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
90020b4e:	fb03 c000 	mla	r0, r3, r0, ip
90020b52:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
90020b56:	ea42 0b0b 	orr.w	fp, r2, fp
90020b5a:	fb03 000b 	mla	r0, r3, fp, r0
90020b5e:	0d43      	lsrs	r3, r0, #21
90020b60:	0940      	lsrs	r0, r0, #5
90020b62:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
90020b66:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
90020b6a:	4318      	orrs	r0, r3
90020b6c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
90020b6e:	441c      	add	r4, r3
90020b70:	9b1c      	ldr	r3, [sp, #112]	; 0x70
90020b72:	f82a 0b02 	strh.w	r0, [sl], #2
90020b76:	441e      	add	r6, r3
90020b78:	e73b      	b.n	900209f2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
90020b7a:	b00f      	add	sp, #60	; 0x3c
90020b7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

90020b80 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>:
90020b80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90020b84:	b085      	sub	sp, #20
90020b86:	e9dd 740f 	ldrd	r7, r4, [sp, #60]	; 0x3c
90020b8a:	9102      	str	r1, [sp, #8]
90020b8c:	2c00      	cmp	r4, #0
90020b8e:	fb04 7103 	mla	r1, r4, r3, r7
90020b92:	f9bd e038 	ldrsh.w	lr, [sp, #56]	; 0x38
90020b96:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
90020b9a:	eb02 0c81 	add.w	ip, r2, r1, lsl #2
90020b9e:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
90020ba2:	f2c0 811b 	blt.w	90020ddc <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x25c>
90020ba6:	45a6      	cmp	lr, r4
90020ba8:	f340 8118 	ble.w	90020ddc <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x25c>
90020bac:	2f00      	cmp	r7, #0
90020bae:	f2c0 8113 	blt.w	90020dd8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x258>
90020bb2:	42bb      	cmp	r3, r7
90020bb4:	f340 8110 	ble.w	90020dd8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x258>
90020bb8:	f852 5021 	ldr.w	r5, [r2, r1, lsl #2]
90020bbc:	1c7a      	adds	r2, r7, #1
90020bbe:	f100 8110 	bmi.w	90020de2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x262>
90020bc2:	4293      	cmp	r3, r2
90020bc4:	f340 810d 	ble.w	90020de2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x262>
90020bc8:	2e00      	cmp	r6, #0
90020bca:	f000 810c 	beq.w	90020de6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x266>
90020bce:	f8dc 1004 	ldr.w	r1, [ip, #4]
90020bd2:	3401      	adds	r4, #1
90020bd4:	f100 810b 	bmi.w	90020dee <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26e>
90020bd8:	45a6      	cmp	lr, r4
90020bda:	f340 8108 	ble.w	90020dee <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26e>
90020bde:	2800      	cmp	r0, #0
90020be0:	f000 8108 	beq.w	90020df4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x274>
90020be4:	2f00      	cmp	r7, #0
90020be6:	f2c0 8100 	blt.w	90020dea <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26a>
90020bea:	42bb      	cmp	r3, r7
90020bec:	f340 80fd 	ble.w	90020dea <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26a>
90020bf0:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
90020bf4:	3701      	adds	r7, #1
90020bf6:	f100 8100 	bmi.w	90020dfa <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27a>
90020bfa:	42bb      	cmp	r3, r7
90020bfc:	f340 80fd 	ble.w	90020dfa <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27a>
90020c00:	2e00      	cmp	r6, #0
90020c02:	f000 80fc 	beq.w	90020dfe <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27e>
90020c06:	3301      	adds	r3, #1
90020c08:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
90020c0c:	b2b6      	uxth	r6, r6
90020c0e:	b280      	uxth	r0, r0
90020c10:	ea4f 6a11 	mov.w	sl, r1, lsr #24
90020c14:	fb00 fe06 	mul.w	lr, r0, r6
90020c18:	0136      	lsls	r6, r6, #4
90020c1a:	ea4f 6b15 	mov.w	fp, r5, lsr #24
90020c1e:	ebce 1000 	rsb	r0, lr, r0, lsl #4
90020c22:	eba6 070e 	sub.w	r7, r6, lr
90020c26:	f5c6 7380 	rsb	r3, r6, #256	; 0x100
90020c2a:	ea4f 6914 	mov.w	r9, r4, lsr #24
90020c2e:	b280      	uxth	r0, r0
90020c30:	b2bf      	uxth	r7, r7
90020c32:	1a1b      	subs	r3, r3, r0
90020c34:	ea4f 6812 	mov.w	r8, r2, lsr #24
90020c38:	fb0a f607 	mul.w	r6, sl, r7
90020c3c:	b29b      	uxth	r3, r3
90020c3e:	fb0b 6603 	mla	r6, fp, r3, r6
90020c42:	fb00 6609 	mla	r6, r0, r9, r6
90020c46:	fb0e 6608 	mla	r6, lr, r8, r6
90020c4a:	f3c6 2607 	ubfx	r6, r6, #8, #8
90020c4e:	9600      	str	r6, [sp, #0]
90020c50:	2e00      	cmp	r6, #0
90020c52:	f000 80be 	beq.w	90020dd2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x252>
90020c56:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
90020c5a:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
90020c5e:	9e02      	ldr	r6, [sp, #8]
90020c60:	fb0b fc0c 	mul.w	ip, fp, ip
90020c64:	fb0b f505 	mul.w	r5, fp, r5
90020c68:	8836      	ldrh	r6, [r6, #0]
90020c6a:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
90020c6e:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
90020c72:	9501      	str	r5, [sp, #4]
90020c74:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
90020c78:	44dc      	add	ip, fp
90020c7a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
90020c7e:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
90020c82:	9503      	str	r5, [sp, #12]
90020c84:	9d01      	ldr	r5, [sp, #4]
90020c86:	f505 7c80 	add.w	ip, r5, #256	; 0x100
90020c8a:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
90020c8e:	f001 1cff 	and.w	ip, r1, #16711935	; 0xff00ff
90020c92:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
90020c96:	fb0a fc0c 	mul.w	ip, sl, ip
90020c9a:	ea4f 2b15 	mov.w	fp, r5, lsr #8
90020c9e:	fb0a fa01 	mul.w	sl, sl, r1
90020ca2:	ea4f 251c 	mov.w	r5, ip, lsr #8
90020ca6:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
90020caa:	f50a 7180 	add.w	r1, sl, #256	; 0x100
90020cae:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
90020cb2:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
90020cb6:	4465      	add	r5, ip
90020cb8:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
90020cbc:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
90020cc0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
90020cc4:	fb09 fc0c 	mul.w	ip, r9, ip
90020cc8:	0a2d      	lsrs	r5, r5, #8
90020cca:	fb09 f904 	mul.w	r9, r9, r4
90020cce:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
90020cd2:	ea4f 211c 	mov.w	r1, ip, lsr #8
90020cd6:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
90020cda:	f509 7480 	add.w	r4, r9, #256	; 0x100
90020cde:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
90020ce2:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
90020ce6:	437d      	muls	r5, r7
90020ce8:	eb04 2919 	add.w	r9, r4, r9, lsr #8
90020cec:	f002 14ff 	and.w	r4, r2, #16711935	; 0xff00ff
90020cf0:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
90020cf4:	4461      	add	r1, ip
90020cf6:	fb08 f404 	mul.w	r4, r8, r4
90020cfa:	ea4f 2919 	mov.w	r9, r9, lsr #8
90020cfe:	fb08 f802 	mul.w	r8, r8, r2
90020d02:	0a09      	lsrs	r1, r1, #8
90020d04:	0a22      	lsrs	r2, r4, #8
90020d06:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
90020d0a:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
90020d0e:	fb07 f70a 	mul.w	r7, r7, sl
90020d12:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
90020d16:	4414      	add	r4, r2
90020d18:	f508 7280 	add.w	r2, r8, #256	; 0x100
90020d1c:	0a24      	lsrs	r4, r4, #8
90020d1e:	eb02 2818 	add.w	r8, r2, r8, lsr #8
90020d22:	9a03      	ldr	r2, [sp, #12]
90020d24:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
90020d28:	fb02 5503 	mla	r5, r2, r3, r5
90020d2c:	ea4f 2818 	mov.w	r8, r8, lsr #8
90020d30:	9a00      	ldr	r2, [sp, #0]
90020d32:	fb04 540e 	mla	r4, r4, lr, r5
90020d36:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
90020d3a:	1235      	asrs	r5, r6, #8
90020d3c:	fb01 4100 	mla	r1, r1, r0, r4
90020d40:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
90020d44:	0a09      	lsrs	r1, r1, #8
90020d46:	f001 14ff 	and.w	r4, r1, #16711935	; 0xff00ff
90020d4a:	f40b 417f 	and.w	r1, fp, #65280	; 0xff00
90020d4e:	fb03 7101 	mla	r1, r3, r1, r7
90020d52:	fb0e 1e08 	mla	lr, lr, r8, r1
90020d56:	f409 417f 	and.w	r1, r9, #65280	; 0xff00
90020d5a:	fb00 e101 	mla	r1, r0, r1, lr
90020d5e:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
90020d62:	b287      	uxth	r7, r0
90020d64:	0a09      	lsrs	r1, r1, #8
90020d66:	437a      	muls	r2, r7
90020d68:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
90020d6c:	1c53      	adds	r3, r2, #1
90020d6e:	4321      	orrs	r1, r4
90020d70:	eb03 2312 	add.w	r3, r3, r2, lsr #8
90020d74:	0c0a      	lsrs	r2, r1, #16
90020d76:	f3c1 2407 	ubfx	r4, r1, #8, #8
90020d7a:	ea6f 2313 	mvn.w	r3, r3, lsr #8
90020d7e:	b2c8      	uxtb	r0, r1
90020d80:	fb12 f207 	smulbb	r2, r2, r7
90020d84:	fb14 f407 	smulbb	r4, r4, r7
90020d88:	b2db      	uxtb	r3, r3
90020d8a:	fb10 f007 	smulbb	r0, r0, r7
90020d8e:	fb05 2503 	mla	r5, r5, r3, r2
90020d92:	10f2      	asrs	r2, r6, #3
90020d94:	00f6      	lsls	r6, r6, #3
90020d96:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
90020d9a:	b2ad      	uxth	r5, r5
90020d9c:	b2f6      	uxtb	r6, r6
90020d9e:	fb02 4203 	mla	r2, r2, r3, r4
90020da2:	fb06 0303 	mla	r3, r6, r3, r0
90020da6:	b294      	uxth	r4, r2
90020da8:	b299      	uxth	r1, r3
90020daa:	1c6b      	adds	r3, r5, #1
90020dac:	1c62      	adds	r2, r4, #1
90020dae:	eb03 2515 	add.w	r5, r3, r5, lsr #8
90020db2:	1c4b      	adds	r3, r1, #1
90020db4:	eb02 2214 	add.w	r2, r2, r4, lsr #8
90020db8:	eb03 2311 	add.w	r3, r3, r1, lsr #8
90020dbc:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
90020dc0:	0952      	lsrs	r2, r2, #5
90020dc2:	f3c3 23c4 	ubfx	r3, r3, #11, #5
90020dc6:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
90020dca:	432b      	orrs	r3, r5
90020dcc:	4313      	orrs	r3, r2
90020dce:	9a02      	ldr	r2, [sp, #8]
90020dd0:	8013      	strh	r3, [r2, #0]
90020dd2:	b005      	add	sp, #20
90020dd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90020dd8:	2500      	movs	r5, #0
90020dda:	e6ef      	b.n	90020bbc <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x3c>
90020ddc:	2100      	movs	r1, #0
90020dde:	460d      	mov	r5, r1
90020de0:	e6f7      	b.n	90020bd2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
90020de2:	2100      	movs	r1, #0
90020de4:	e6f5      	b.n	90020bd2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
90020de6:	4631      	mov	r1, r6
90020de8:	e6f3      	b.n	90020bd2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
90020dea:	2400      	movs	r4, #0
90020dec:	e702      	b.n	90020bf4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x74>
90020dee:	2200      	movs	r2, #0
90020df0:	4614      	mov	r4, r2
90020df2:	e70b      	b.n	90020c0c <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
90020df4:	4602      	mov	r2, r0
90020df6:	4604      	mov	r4, r0
90020df8:	e708      	b.n	90020c0c <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
90020dfa:	2200      	movs	r2, #0
90020dfc:	e706      	b.n	90020c0c <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
90020dfe:	4632      	mov	r2, r6
90020e00:	e704      	b.n	90020c0c <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>

90020e02 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
90020e02:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90020e06:	b09d      	sub	sp, #116	; 0x74
90020e08:	9219      	str	r2, [sp, #100]	; 0x64
90020e0a:	9307      	str	r3, [sp, #28]
90020e0c:	9a2b      	ldr	r2, [sp, #172]	; 0xac
90020e0e:	f89d 30bc 	ldrb.w	r3, [sp, #188]	; 0xbc
90020e12:	901b      	str	r0, [sp, #108]	; 0x6c
90020e14:	931a      	str	r3, [sp, #104]	; 0x68
90020e16:	6850      	ldr	r0, [r2, #4]
90020e18:	9117      	str	r1, [sp, #92]	; 0x5c
90020e1a:	6812      	ldr	r2, [r2, #0]
90020e1c:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
90020e20:	e9dd 4627 	ldrd	r4, r6, [sp, #156]	; 0x9c
90020e24:	fb00 1303 	mla	r3, r0, r3, r1
90020e28:	eb02 0343 	add.w	r3, r2, r3, lsl #1
90020e2c:	930a      	str	r3, [sp, #40]	; 0x28
90020e2e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
90020e30:	681b      	ldr	r3, [r3, #0]
90020e32:	9310      	str	r3, [sp, #64]	; 0x40
90020e34:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
90020e38:	930b      	str	r3, [sp, #44]	; 0x2c
90020e3a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
90020e3c:	2b00      	cmp	r3, #0
90020e3e:	dc03      	bgt.n	90020e48 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
90020e40:	9b19      	ldr	r3, [sp, #100]	; 0x64
90020e42:	2b00      	cmp	r3, #0
90020e44:	f340 8375 	ble.w	90021532 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
90020e48:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
90020e4a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
90020e4e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
90020e52:	1e48      	subs	r0, r1, #1
90020e54:	1e57      	subs	r7, r2, #1
90020e56:	9b07      	ldr	r3, [sp, #28]
90020e58:	2b00      	cmp	r3, #0
90020e5a:	f340 818e 	ble.w	9002117a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x378>
90020e5e:	ea5f 4c24 	movs.w	ip, r4, asr #16
90020e62:	ea4f 4326 	mov.w	r3, r6, asr #16
90020e66:	d406      	bmi.n	90020e76 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
90020e68:	4584      	cmp	ip, r0
90020e6a:	da04      	bge.n	90020e76 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
90020e6c:	2b00      	cmp	r3, #0
90020e6e:	db02      	blt.n	90020e76 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
90020e70:	42bb      	cmp	r3, r7
90020e72:	f2c0 8183 	blt.w	9002117c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
90020e76:	f11c 0c01 	adds.w	ip, ip, #1
90020e7a:	f100 8173 	bmi.w	90021164 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
90020e7e:	4561      	cmp	r1, ip
90020e80:	f2c0 8170 	blt.w	90021164 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
90020e84:	3301      	adds	r3, #1
90020e86:	f100 816d 	bmi.w	90021164 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
90020e8a:	429a      	cmp	r2, r3
90020e8c:	f2c0 816a 	blt.w	90021164 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
90020e90:	9b07      	ldr	r3, [sp, #28]
90020e92:	9f0a      	ldr	r7, [sp, #40]	; 0x28
90020e94:	9318      	str	r3, [sp, #96]	; 0x60
90020e96:	9b18      	ldr	r3, [sp, #96]	; 0x60
90020e98:	2b00      	cmp	r3, #0
90020e9a:	f340 818c 	ble.w	900211b6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b4>
90020e9e:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
90020ea0:	ea4f 4c26 	mov.w	ip, r6, asr #16
90020ea4:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
90020ea6:	f3c4 3003 	ubfx	r0, r4, #12, #4
90020eaa:	f8d2 e00c 	ldr.w	lr, [r2, #12]
90020eae:	1422      	asrs	r2, r4, #16
90020eb0:	f3c6 3103 	ubfx	r1, r6, #12, #4
90020eb4:	689b      	ldr	r3, [r3, #8]
90020eb6:	f100 81cd 	bmi.w	90021254 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
90020eba:	f103 38ff 	add.w	r8, r3, #4294967295
90020ebe:	4542      	cmp	r2, r8
90020ec0:	f280 81c8 	bge.w	90021254 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
90020ec4:	f1bc 0f00 	cmp.w	ip, #0
90020ec8:	f2c0 81c4 	blt.w	90021254 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
90020ecc:	f10e 38ff 	add.w	r8, lr, #4294967295
90020ed0:	45c4      	cmp	ip, r8
90020ed2:	f280 81bf 	bge.w	90021254 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
90020ed6:	b21b      	sxth	r3, r3
90020ed8:	9d10      	ldr	r5, [sp, #64]	; 0x40
90020eda:	fb0c 2203 	mla	r2, ip, r3, r2
90020ede:	eb05 0882 	add.w	r8, r5, r2, lsl #2
90020ee2:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
90020ee6:	ea4f 6e12 	mov.w	lr, r2, lsr #24
90020eea:	2800      	cmp	r0, #0
90020eec:	f000 81a9 	beq.w	90021242 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x440>
90020ef0:	f8d8 5004 	ldr.w	r5, [r8, #4]
90020ef4:	950c      	str	r5, [sp, #48]	; 0x30
90020ef6:	0e2d      	lsrs	r5, r5, #24
90020ef8:	9513      	str	r5, [sp, #76]	; 0x4c
90020efa:	b181      	cbz	r1, 90020f1e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
90020efc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
90020f00:	3b01      	subs	r3, #1
90020f02:	009b      	lsls	r3, r3, #2
90020f04:	3304      	adds	r3, #4
90020f06:	eb08 0c03 	add.w	ip, r8, r3
90020f0a:	f858 3003 	ldr.w	r3, [r8, r3]
90020f0e:	9308      	str	r3, [sp, #32]
90020f10:	0e1b      	lsrs	r3, r3, #24
90020f12:	9311      	str	r3, [sp, #68]	; 0x44
90020f14:	f8dc 3004 	ldr.w	r3, [ip, #4]
90020f18:	930d      	str	r3, [sp, #52]	; 0x34
90020f1a:	0e1b      	lsrs	r3, r3, #24
90020f1c:	9314      	str	r3, [sp, #80]	; 0x50
90020f1e:	b280      	uxth	r0, r0
90020f20:	9d11      	ldr	r5, [sp, #68]	; 0x44
90020f22:	b289      	uxth	r1, r1
90020f24:	fb00 f901 	mul.w	r9, r0, r1
90020f28:	0100      	lsls	r0, r0, #4
90020f2a:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
90020f2e:	eba0 0809 	sub.w	r8, r0, r9
90020f32:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
90020f36:	9813      	ldr	r0, [sp, #76]	; 0x4c
90020f38:	b289      	uxth	r1, r1
90020f3a:	fa1f f888 	uxth.w	r8, r8
90020f3e:	1a5b      	subs	r3, r3, r1
90020f40:	fb08 f000 	mul.w	r0, r8, r0
90020f44:	b29b      	uxth	r3, r3
90020f46:	fb03 000e 	mla	r0, r3, lr, r0
90020f4a:	fb01 0005 	mla	r0, r1, r5, r0
90020f4e:	9d14      	ldr	r5, [sp, #80]	; 0x50
90020f50:	fb09 0005 	mla	r0, r9, r5, r0
90020f54:	f3c0 2007 	ubfx	r0, r0, #8, #8
90020f58:	2800      	cmp	r0, #0
90020f5a:	f000 80fa 	beq.w	90021152 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
90020f5e:	f1be 0fff 	cmp.w	lr, #255	; 0xff
90020f62:	d01b      	beq.n	90020f9c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
90020f64:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
90020f68:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
90020f6c:	fb0e fa0a 	mul.w	sl, lr, sl
90020f70:	fb0e fe02 	mul.w	lr, lr, r2
90020f74:	ea4f 221a 	mov.w	r2, sl, lsr #8
90020f78:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
90020f7c:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
90020f80:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
90020f84:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
90020f88:	4452      	add	r2, sl
90020f8a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
90020f8e:	0a12      	lsrs	r2, r2, #8
90020f90:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
90020f94:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
90020f98:	ea42 020c 	orr.w	r2, r2, ip
90020f9c:	9d13      	ldr	r5, [sp, #76]	; 0x4c
90020f9e:	2dff      	cmp	r5, #255	; 0xff
90020fa0:	d021      	beq.n	90020fe6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e4>
90020fa2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
90020fa4:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
90020fa8:	9d13      	ldr	r5, [sp, #76]	; 0x4c
90020faa:	fb05 fb0b 	mul.w	fp, r5, fp
90020fae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
90020fb0:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
90020fb4:	9d13      	ldr	r5, [sp, #76]	; 0x4c
90020fb6:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
90020fba:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
90020fbe:	fb05 fa0a 	mul.w	sl, r5, sl
90020fc2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
90020fc6:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
90020fca:	44de      	add	lr, fp
90020fcc:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
90020fd0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
90020fd4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
90020fd8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
90020fdc:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
90020fe0:	ea4e 050a 	orr.w	r5, lr, sl
90020fe4:	950c      	str	r5, [sp, #48]	; 0x30
90020fe6:	9d11      	ldr	r5, [sp, #68]	; 0x44
90020fe8:	2dff      	cmp	r5, #255	; 0xff
90020fea:	d021      	beq.n	90021030 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
90020fec:	9d08      	ldr	r5, [sp, #32]
90020fee:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
90020ff2:	9d11      	ldr	r5, [sp, #68]	; 0x44
90020ff4:	fb05 fb0b 	mul.w	fp, r5, fp
90020ff8:	9d08      	ldr	r5, [sp, #32]
90020ffa:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
90020ffe:	9d11      	ldr	r5, [sp, #68]	; 0x44
90021000:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
90021004:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
90021008:	fb05 fa0a 	mul.w	sl, r5, sl
9002100c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
90021010:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
90021014:	44de      	add	lr, fp
90021016:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
9002101a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
9002101e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
90021022:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
90021026:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
9002102a:	ea4e 050a 	orr.w	r5, lr, sl
9002102e:	9508      	str	r5, [sp, #32]
90021030:	9d14      	ldr	r5, [sp, #80]	; 0x50
90021032:	2dff      	cmp	r5, #255	; 0xff
90021034:	d021      	beq.n	9002107a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
90021036:	9d0d      	ldr	r5, [sp, #52]	; 0x34
90021038:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
9002103c:	9d14      	ldr	r5, [sp, #80]	; 0x50
9002103e:	fb05 fb0b 	mul.w	fp, r5, fp
90021042:	9d0d      	ldr	r5, [sp, #52]	; 0x34
90021044:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
90021048:	9d14      	ldr	r5, [sp, #80]	; 0x50
9002104a:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
9002104e:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
90021052:	fb05 fa0a 	mul.w	sl, r5, sl
90021056:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
9002105a:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
9002105e:	44de      	add	lr, fp
90021060:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
90021064:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
90021068:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
9002106c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
90021070:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
90021074:	ea4e 050a 	orr.w	r5, lr, sl
90021078:	950d      	str	r5, [sp, #52]	; 0x34
9002107a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
9002107c:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
90021080:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
90021084:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
90021088:	9d08      	ldr	r5, [sp, #32]
9002108a:	fb08 fc0c 	mul.w	ip, r8, ip
9002108e:	fb03 cc0e 	mla	ip, r3, lr, ip
90021092:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
90021096:	9d0d      	ldr	r5, [sp, #52]	; 0x34
90021098:	fb01 cc0e 	mla	ip, r1, lr, ip
9002109c:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
900210a0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
900210a2:	fb09 cc0e 	mla	ip, r9, lr, ip
900210a6:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
900210aa:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
900210ac:	fb08 f80e 	mul.w	r8, r8, lr
900210b0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
900210b4:	fb03 8202 	mla	r2, r3, r2, r8
900210b8:	9b08      	ldr	r3, [sp, #32]
900210ba:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
900210be:	f403 4a7f 	and.w	sl, r3, #65280	; 0xff00
900210c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
900210c4:	fb01 220a 	mla	r2, r1, sl, r2
900210c8:	f403 417f 	and.w	r1, r3, #65280	; 0xff00
900210cc:	883b      	ldrh	r3, [r7, #0]
900210ce:	fb09 2901 	mla	r9, r9, r1, r2
900210d2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
900210d4:	1219      	asrs	r1, r3, #8
900210d6:	4342      	muls	r2, r0
900210d8:	ea4f 2919 	mov.w	r9, r9, lsr #8
900210dc:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
900210e0:	1c50      	adds	r0, r2, #1
900210e2:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
900210e6:	eb00 2012 	add.w	r0, r0, r2, lsr #8
900210ea:	ea4c 0c09 	orr.w	ip, ip, r9
900210ee:	ea6f 2010 	mvn.w	r0, r0, lsr #8
900210f2:	ea4f 421c 	mov.w	r2, ip, lsr #16
900210f6:	f3cc 2e07 	ubfx	lr, ip, #8, #8
900210fa:	fa5f fc8c 	uxtb.w	ip, ip
900210fe:	fb12 f205 	smulbb	r2, r2, r5
90021102:	b2c0      	uxtb	r0, r0
90021104:	fb1c fc05 	smulbb	ip, ip, r5
90021108:	fb01 2100 	mla	r1, r1, r0, r2
9002110c:	10da      	asrs	r2, r3, #3
9002110e:	fb1e fe05 	smulbb	lr, lr, r5
90021112:	00db      	lsls	r3, r3, #3
90021114:	b289      	uxth	r1, r1
90021116:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
9002111a:	b2db      	uxtb	r3, r3
9002111c:	fb02 e200 	mla	r2, r2, r0, lr
90021120:	fb03 c300 	mla	r3, r3, r0, ip
90021124:	b292      	uxth	r2, r2
90021126:	fa1f fc83 	uxth.w	ip, r3
9002112a:	1c4b      	adds	r3, r1, #1
9002112c:	eb03 2111 	add.w	r1, r3, r1, lsr #8
90021130:	f10c 0301 	add.w	r3, ip, #1
90021134:	eb03 231c 	add.w	r3, r3, ip, lsr #8
90021138:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
9002113c:	f3c3 23c4 	ubfx	r3, r3, #11, #5
90021140:	430b      	orrs	r3, r1
90021142:	1c51      	adds	r1, r2, #1
90021144:	eb01 2212 	add.w	r2, r1, r2, lsr #8
90021148:	0952      	lsrs	r2, r2, #5
9002114a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
9002114e:	4313      	orrs	r3, r2
90021150:	803b      	strh	r3, [r7, #0]
90021152:	9b29      	ldr	r3, [sp, #164]	; 0xa4
90021154:	3702      	adds	r7, #2
90021156:	441c      	add	r4, r3
90021158:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
9002115a:	441e      	add	r6, r3
9002115c:	9b18      	ldr	r3, [sp, #96]	; 0x60
9002115e:	3b01      	subs	r3, #1
90021160:	9318      	str	r3, [sp, #96]	; 0x60
90021162:	e698      	b.n	90020e96 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
90021164:	9b29      	ldr	r3, [sp, #164]	; 0xa4
90021166:	441c      	add	r4, r3
90021168:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
9002116a:	441e      	add	r6, r3
9002116c:	9b07      	ldr	r3, [sp, #28]
9002116e:	3b01      	subs	r3, #1
90021170:	9307      	str	r3, [sp, #28]
90021172:	9b0a      	ldr	r3, [sp, #40]	; 0x28
90021174:	3302      	adds	r3, #2
90021176:	930a      	str	r3, [sp, #40]	; 0x28
90021178:	e66d      	b.n	90020e56 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
9002117a:	d023      	beq.n	900211c4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c2>
9002117c:	9b07      	ldr	r3, [sp, #28]
9002117e:	9829      	ldr	r0, [sp, #164]	; 0xa4
90021180:	3b01      	subs	r3, #1
90021182:	fb00 4003 	mla	r0, r0, r3, r4
90021186:	1400      	asrs	r0, r0, #16
90021188:	f53f ae82 	bmi.w	90020e90 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
9002118c:	3901      	subs	r1, #1
9002118e:	4288      	cmp	r0, r1
90021190:	f6bf ae7e 	bge.w	90020e90 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
90021194:	992a      	ldr	r1, [sp, #168]	; 0xa8
90021196:	fb01 6303 	mla	r3, r1, r3, r6
9002119a:	141b      	asrs	r3, r3, #16
9002119c:	f53f ae78 	bmi.w	90020e90 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
900211a0:	3a01      	subs	r2, #1
900211a2:	4293      	cmp	r3, r2
900211a4:	f6bf ae74 	bge.w	90020e90 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
900211a8:	f8dd b01c 	ldr.w	fp, [sp, #28]
900211ac:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
900211b0:	f1bb 0f00 	cmp.w	fp, #0
900211b4:	dc6c      	bgt.n	90021290 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48e>
900211b6:	9b07      	ldr	r3, [sp, #28]
900211b8:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
900211bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
900211be:	eb03 0345 	add.w	r3, r3, r5, lsl #1
900211c2:	930a      	str	r3, [sp, #40]	; 0x28
900211c4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
900211c6:	2b00      	cmp	r3, #0
900211c8:	f340 81b3 	ble.w	90021532 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
900211cc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
900211d0:	9b26      	ldr	r3, [sp, #152]	; 0x98
900211d2:	ee30 0a04 	vadd.f32	s0, s0, s8
900211d6:	ee70 0aa4 	vadd.f32	s1, s1, s9
900211da:	eef0 6a62 	vmov.f32	s13, s5
900211de:	eec7 7a00 	vdiv.f32	s15, s14, s0
900211e2:	ee31 1a05 	vadd.f32	s2, s2, s10
900211e6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
900211ea:	ee16 4a90 	vmov	r4, s13
900211ee:	eef0 6a43 	vmov.f32	s13, s6
900211f2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
900211f6:	ee16 6a90 	vmov	r6, s13
900211fa:	ee20 7aa7 	vmul.f32	s14, s1, s15
900211fe:	ee61 7a27 	vmul.f32	s15, s2, s15
90021202:	ee77 2a62 	vsub.f32	s5, s14, s5
90021206:	ee37 3ac3 	vsub.f32	s6, s15, s6
9002120a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9002120e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
90021212:	ee12 2a90 	vmov	r2, s5
90021216:	eef0 2a47 	vmov.f32	s5, s14
9002121a:	fb92 f3f3 	sdiv	r3, r2, r3
9002121e:	ee13 2a10 	vmov	r2, s6
90021222:	9329      	str	r3, [sp, #164]	; 0xa4
90021224:	9b26      	ldr	r3, [sp, #152]	; 0x98
90021226:	eeb0 3a67 	vmov.f32	s6, s15
9002122a:	fb92 f3f3 	sdiv	r3, r2, r3
9002122e:	932a      	str	r3, [sp, #168]	; 0xa8
90021230:	9b17      	ldr	r3, [sp, #92]	; 0x5c
90021232:	9a19      	ldr	r2, [sp, #100]	; 0x64
90021234:	3b01      	subs	r3, #1
90021236:	9317      	str	r3, [sp, #92]	; 0x5c
90021238:	9b26      	ldr	r3, [sp, #152]	; 0x98
9002123a:	bf08      	it	eq
9002123c:	4613      	moveq	r3, r2
9002123e:	9307      	str	r3, [sp, #28]
90021240:	e5fb      	b.n	90020e3a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
90021242:	2900      	cmp	r1, #0
90021244:	f43f ae6b 	beq.w	90020f1e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
90021248:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
9002124c:	9308      	str	r3, [sp, #32]
9002124e:	0e1b      	lsrs	r3, r3, #24
90021250:	9311      	str	r3, [sp, #68]	; 0x44
90021252:	e664      	b.n	90020f1e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
90021254:	f112 0801 	adds.w	r8, r2, #1
90021258:	f53f af7b 	bmi.w	90021152 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
9002125c:	4543      	cmp	r3, r8
9002125e:	f6ff af78 	blt.w	90021152 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
90021262:	f11c 0801 	adds.w	r8, ip, #1
90021266:	f53f af74 	bmi.w	90021152 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
9002126a:	45c6      	cmp	lr, r8
9002126c:	f6ff af71 	blt.w	90021152 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
90021270:	9d1a      	ldr	r5, [sp, #104]	; 0x68
90021272:	b21b      	sxth	r3, r3
90021274:	9201      	str	r2, [sp, #4]
90021276:	fa0f f28e 	sxth.w	r2, lr
9002127a:	e9cd 1504 	strd	r1, r5, [sp, #16]
9002127e:	e9cd c002 	strd	ip, r0, [sp, #8]
90021282:	9200      	str	r2, [sp, #0]
90021284:	4639      	mov	r1, r7
90021286:	9a10      	ldr	r2, [sp, #64]	; 0x40
90021288:	981b      	ldr	r0, [sp, #108]	; 0x6c
9002128a:	f7ff fc79 	bl	90020b80 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>
9002128e:	e760      	b.n	90021152 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
90021290:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
90021292:	1427      	asrs	r7, r4, #16
90021294:	9d10      	ldr	r5, [sp, #64]	; 0x40
90021296:	f3c4 3203 	ubfx	r2, r4, #12, #4
9002129a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
9002129e:	1433      	asrs	r3, r6, #16
900212a0:	f3c6 3003 	ubfx	r0, r6, #12, #4
900212a4:	fb01 7303 	mla	r3, r1, r3, r7
900212a8:	eb05 0783 	add.w	r7, r5, r3, lsl #2
900212ac:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
900212b0:	ea4f 6c13 	mov.w	ip, r3, lsr #24
900212b4:	2a00      	cmp	r2, #0
900212b6:	f000 8133 	beq.w	90021520 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x71e>
900212ba:	687d      	ldr	r5, [r7, #4]
900212bc:	950e      	str	r5, [sp, #56]	; 0x38
900212be:	0e2d      	lsrs	r5, r5, #24
900212c0:	9515      	str	r5, [sp, #84]	; 0x54
900212c2:	b178      	cbz	r0, 900212e4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
900212c4:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
900212c8:	3901      	subs	r1, #1
900212ca:	0089      	lsls	r1, r1, #2
900212cc:	3104      	adds	r1, #4
900212ce:	eb07 0e01 	add.w	lr, r7, r1
900212d2:	5879      	ldr	r1, [r7, r1]
900212d4:	9109      	str	r1, [sp, #36]	; 0x24
900212d6:	0e09      	lsrs	r1, r1, #24
900212d8:	9112      	str	r1, [sp, #72]	; 0x48
900212da:	f8de 1004 	ldr.w	r1, [lr, #4]
900212de:	910f      	str	r1, [sp, #60]	; 0x3c
900212e0:	0e09      	lsrs	r1, r1, #24
900212e2:	9116      	str	r1, [sp, #88]	; 0x58
900212e4:	b292      	uxth	r2, r2
900212e6:	9915      	ldr	r1, [sp, #84]	; 0x54
900212e8:	b280      	uxth	r0, r0
900212ea:	9d12      	ldr	r5, [sp, #72]	; 0x48
900212ec:	fb02 f800 	mul.w	r8, r2, r0
900212f0:	0112      	lsls	r2, r2, #4
900212f2:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
900212f6:	eba2 0e08 	sub.w	lr, r2, r8
900212fa:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
900212fe:	b280      	uxth	r0, r0
90021300:	fa1f fe8e 	uxth.w	lr, lr
90021304:	1a12      	subs	r2, r2, r0
90021306:	fb0e f101 	mul.w	r1, lr, r1
9002130a:	b292      	uxth	r2, r2
9002130c:	fb02 110c 	mla	r1, r2, ip, r1
90021310:	fb00 1105 	mla	r1, r0, r5, r1
90021314:	9d16      	ldr	r5, [sp, #88]	; 0x58
90021316:	fb08 1105 	mla	r1, r8, r5, r1
9002131a:	f3c1 2107 	ubfx	r1, r1, #8, #8
9002131e:	2900      	cmp	r1, #0
90021320:	f000 80f5 	beq.w	9002150e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70c>
90021324:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
90021328:	d019      	beq.n	9002135e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55c>
9002132a:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
9002132e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
90021332:	fb0c fa0a 	mul.w	sl, ip, sl
90021336:	fb0c fc03 	mul.w	ip, ip, r3
9002133a:	ea4f 231a 	mov.w	r3, sl, lsr #8
9002133e:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
90021342:	f50c 7780 	add.w	r7, ip, #256	; 0x100
90021346:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
9002134a:	eb07 271c 	add.w	r7, r7, ip, lsr #8
9002134e:	4453      	add	r3, sl
90021350:	0a3f      	lsrs	r7, r7, #8
90021352:	0a1b      	lsrs	r3, r3, #8
90021354:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
90021358:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
9002135c:	433b      	orrs	r3, r7
9002135e:	9d15      	ldr	r5, [sp, #84]	; 0x54
90021360:	2dff      	cmp	r5, #255	; 0xff
90021362:	d020      	beq.n	900213a6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a4>
90021364:	9d0e      	ldr	r5, [sp, #56]	; 0x38
90021366:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
9002136a:	9d15      	ldr	r5, [sp, #84]	; 0x54
9002136c:	436f      	muls	r7, r5
9002136e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
90021370:	ea4f 2c17 	mov.w	ip, r7, lsr #8
90021374:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
90021378:	9d15      	ldr	r5, [sp, #84]	; 0x54
9002137a:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
9002137e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
90021382:	fb05 fa0a 	mul.w	sl, r5, sl
90021386:	44bc      	add	ip, r7
90021388:	f50a 7780 	add.w	r7, sl, #256	; 0x100
9002138c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
90021390:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
90021394:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
90021398:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
9002139c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
900213a0:	ea4c 050a 	orr.w	r5, ip, sl
900213a4:	950e      	str	r5, [sp, #56]	; 0x38
900213a6:	9d12      	ldr	r5, [sp, #72]	; 0x48
900213a8:	2dff      	cmp	r5, #255	; 0xff
900213aa:	d020      	beq.n	900213ee <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ec>
900213ac:	9d09      	ldr	r5, [sp, #36]	; 0x24
900213ae:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
900213b2:	9d12      	ldr	r5, [sp, #72]	; 0x48
900213b4:	436f      	muls	r7, r5
900213b6:	9d09      	ldr	r5, [sp, #36]	; 0x24
900213b8:	ea4f 2c17 	mov.w	ip, r7, lsr #8
900213bc:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
900213c0:	9d12      	ldr	r5, [sp, #72]	; 0x48
900213c2:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
900213c6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
900213ca:	fb05 fa0a 	mul.w	sl, r5, sl
900213ce:	44bc      	add	ip, r7
900213d0:	f50a 7780 	add.w	r7, sl, #256	; 0x100
900213d4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
900213d8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
900213dc:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
900213e0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
900213e4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
900213e8:	ea4c 050a 	orr.w	r5, ip, sl
900213ec:	9509      	str	r5, [sp, #36]	; 0x24
900213ee:	9d16      	ldr	r5, [sp, #88]	; 0x58
900213f0:	2dff      	cmp	r5, #255	; 0xff
900213f2:	d020      	beq.n	90021436 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x634>
900213f4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
900213f6:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
900213fa:	9d16      	ldr	r5, [sp, #88]	; 0x58
900213fc:	436f      	muls	r7, r5
900213fe:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
90021400:	ea4f 2c17 	mov.w	ip, r7, lsr #8
90021404:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
90021408:	9d16      	ldr	r5, [sp, #88]	; 0x58
9002140a:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
9002140e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
90021412:	fb05 fa0a 	mul.w	sl, r5, sl
90021416:	44bc      	add	ip, r7
90021418:	f50a 7780 	add.w	r7, sl, #256	; 0x100
9002141c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
90021420:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
90021424:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
90021428:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
9002142c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
90021430:	ea4c 050a 	orr.w	r5, ip, sl
90021434:	950f      	str	r5, [sp, #60]	; 0x3c
90021436:	9d0e      	ldr	r5, [sp, #56]	; 0x38
90021438:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
9002143c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
90021440:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
90021444:	9d09      	ldr	r5, [sp, #36]	; 0x24
90021446:	fb0e f707 	mul.w	r7, lr, r7
9002144a:	fb02 770c 	mla	r7, r2, ip, r7
9002144e:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
90021452:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
90021454:	fb00 770c 	mla	r7, r0, ip, r7
90021458:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
9002145c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
9002145e:	fb08 770c 	mla	r7, r8, ip, r7
90021462:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
90021466:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
90021468:	fb0e fe0c 	mul.w	lr, lr, ip
9002146c:	0a3f      	lsrs	r7, r7, #8
9002146e:	fb02 e303 	mla	r3, r2, r3, lr
90021472:	9a09      	ldr	r2, [sp, #36]	; 0x24
90021474:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
90021478:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
9002147c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
9002147e:	fb00 330a 	mla	r3, r0, sl, r3
90021482:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
90021486:	f8b9 0000 	ldrh.w	r0, [r9]
9002148a:	fb08 3c0c 	mla	ip, r8, ip, r3
9002148e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
90021490:	1202      	asrs	r2, r0, #8
90021492:	4359      	muls	r1, r3
90021494:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
90021498:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
9002149c:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
900214a0:	1c4b      	adds	r3, r1, #1
900214a2:	ea47 070c 	orr.w	r7, r7, ip
900214a6:	eb03 2111 	add.w	r1, r3, r1, lsr #8
900214aa:	0c3b      	lsrs	r3, r7, #16
900214ac:	ea6f 2111 	mvn.w	r1, r1, lsr #8
900214b0:	f3c7 2c07 	ubfx	ip, r7, #8, #8
900214b4:	b2ff      	uxtb	r7, r7
900214b6:	fb13 f305 	smulbb	r3, r3, r5
900214ba:	b2c9      	uxtb	r1, r1
900214bc:	fb17 f705 	smulbb	r7, r7, r5
900214c0:	fb02 3201 	mla	r2, r2, r1, r3
900214c4:	10c3      	asrs	r3, r0, #3
900214c6:	fb1c fc05 	smulbb	ip, ip, r5
900214ca:	00c0      	lsls	r0, r0, #3
900214cc:	b292      	uxth	r2, r2
900214ce:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
900214d2:	b2c0      	uxtb	r0, r0
900214d4:	fb03 c301 	mla	r3, r3, r1, ip
900214d8:	fb00 7001 	mla	r0, r0, r1, r7
900214dc:	1c51      	adds	r1, r2, #1
900214de:	b29b      	uxth	r3, r3
900214e0:	b280      	uxth	r0, r0
900214e2:	eb01 2212 	add.w	r2, r1, r2, lsr #8
900214e6:	f100 0c01 	add.w	ip, r0, #1
900214ea:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
900214ee:	eb0c 2c10 	add.w	ip, ip, r0, lsr #8
900214f2:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
900214f6:	ea4c 0202 	orr.w	r2, ip, r2
900214fa:	f103 0c01 	add.w	ip, r3, #1
900214fe:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
90021502:	095b      	lsrs	r3, r3, #5
90021504:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
90021508:	431a      	orrs	r2, r3
9002150a:	f8a9 2000 	strh.w	r2, [r9]
9002150e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
90021510:	f109 0902 	add.w	r9, r9, #2
90021514:	f10b 3bff 	add.w	fp, fp, #4294967295
90021518:	441c      	add	r4, r3
9002151a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
9002151c:	441e      	add	r6, r3
9002151e:	e647      	b.n	900211b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
90021520:	2800      	cmp	r0, #0
90021522:	f43f aedf 	beq.w	900212e4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
90021526:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
9002152a:	9109      	str	r1, [sp, #36]	; 0x24
9002152c:	0e09      	lsrs	r1, r1, #24
9002152e:	9112      	str	r1, [sp, #72]	; 0x48
90021530:	e6d8      	b.n	900212e4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
90021532:	b01d      	add	sp, #116	; 0x74
90021534:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

90021538 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>:
90021538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9002153c:	b085      	sub	sp, #20
9002153e:	e9dd 740f 	ldrd	r7, r4, [sp, #60]	; 0x3c
90021542:	9102      	str	r1, [sp, #8]
90021544:	2c00      	cmp	r4, #0
90021546:	fb04 7103 	mla	r1, r4, r3, r7
9002154a:	f9bd e038 	ldrsh.w	lr, [sp, #56]	; 0x38
9002154e:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
90021552:	eb02 0c81 	add.w	ip, r2, r1, lsl #2
90021556:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
9002155a:	f2c0 810c 	blt.w	90021776 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23e>
9002155e:	45a6      	cmp	lr, r4
90021560:	f340 8109 	ble.w	90021776 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23e>
90021564:	2f00      	cmp	r7, #0
90021566:	f2c0 8104 	blt.w	90021772 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23a>
9002156a:	42bb      	cmp	r3, r7
9002156c:	f340 8101 	ble.w	90021772 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23a>
90021570:	f852 5021 	ldr.w	r5, [r2, r1, lsl #2]
90021574:	1c7a      	adds	r2, r7, #1
90021576:	f100 8101 	bmi.w	9002177c <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x244>
9002157a:	4293      	cmp	r3, r2
9002157c:	f340 80fe 	ble.w	9002177c <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x244>
90021580:	2e00      	cmp	r6, #0
90021582:	f000 80fd 	beq.w	90021780 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x248>
90021586:	f8dc 1004 	ldr.w	r1, [ip, #4]
9002158a:	3401      	adds	r4, #1
9002158c:	f100 80fc 	bmi.w	90021788 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x250>
90021590:	45a6      	cmp	lr, r4
90021592:	f340 80f9 	ble.w	90021788 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x250>
90021596:	2800      	cmp	r0, #0
90021598:	f000 80f9 	beq.w	9002178e <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x256>
9002159c:	2f00      	cmp	r7, #0
9002159e:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
900215a2:	f2c0 80ef 	blt.w	90021784 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x24c>
900215a6:	42bb      	cmp	r3, r7
900215a8:	f340 80ec 	ble.w	90021784 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x24c>
900215ac:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
900215b0:	3701      	adds	r7, #1
900215b2:	f100 80ef 	bmi.w	90021794 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x25c>
900215b6:	42bb      	cmp	r3, r7
900215b8:	f340 80ec 	ble.w	90021794 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x25c>
900215bc:	2e00      	cmp	r6, #0
900215be:	f000 80eb 	beq.w	90021798 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x260>
900215c2:	6852      	ldr	r2, [r2, #4]
900215c4:	b2b6      	uxth	r6, r6
900215c6:	b280      	uxth	r0, r0
900215c8:	ea4f 6a11 	mov.w	sl, r1, lsr #24
900215cc:	fb00 fe06 	mul.w	lr, r0, r6
900215d0:	0136      	lsls	r6, r6, #4
900215d2:	ea4f 6b15 	mov.w	fp, r5, lsr #24
900215d6:	ebce 1000 	rsb	r0, lr, r0, lsl #4
900215da:	eba6 070e 	sub.w	r7, r6, lr
900215de:	f5c6 7380 	rsb	r3, r6, #256	; 0x100
900215e2:	ea4f 6914 	mov.w	r9, r4, lsr #24
900215e6:	b280      	uxth	r0, r0
900215e8:	b2bf      	uxth	r7, r7
900215ea:	1a1b      	subs	r3, r3, r0
900215ec:	ea4f 6812 	mov.w	r8, r2, lsr #24
900215f0:	fb07 f60a 	mul.w	r6, r7, sl
900215f4:	b29b      	uxth	r3, r3
900215f6:	fb0b 6603 	mla	r6, fp, r3, r6
900215fa:	fb00 6609 	mla	r6, r0, r9, r6
900215fe:	fb0e 6608 	mla	r6, lr, r8, r6
90021602:	f3c6 2607 	ubfx	r6, r6, #8, #8
90021606:	9600      	str	r6, [sp, #0]
90021608:	2e00      	cmp	r6, #0
9002160a:	f000 80af 	beq.w	9002176c <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x234>
9002160e:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
90021612:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
90021616:	9e02      	ldr	r6, [sp, #8]
90021618:	fb0b fc0c 	mul.w	ip, fp, ip
9002161c:	fb0b f505 	mul.w	r5, fp, r5
90021620:	8836      	ldrh	r6, [r6, #0]
90021622:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
90021626:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
9002162a:	9501      	str	r5, [sp, #4]
9002162c:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
90021630:	44dc      	add	ip, fp
90021632:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
90021636:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
9002163a:	9503      	str	r5, [sp, #12]
9002163c:	9d01      	ldr	r5, [sp, #4]
9002163e:	f505 7c80 	add.w	ip, r5, #256	; 0x100
90021642:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
90021646:	f001 1cff 	and.w	ip, r1, #16711935	; 0xff00ff
9002164a:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
9002164e:	fb0a fc0c 	mul.w	ip, sl, ip
90021652:	ea4f 2b15 	mov.w	fp, r5, lsr #8
90021656:	fb0a fa01 	mul.w	sl, sl, r1
9002165a:	ea4f 251c 	mov.w	r5, ip, lsr #8
9002165e:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
90021662:	f50a 7180 	add.w	r1, sl, #256	; 0x100
90021666:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
9002166a:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
9002166e:	4465      	add	r5, ip
90021670:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
90021674:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
90021678:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
9002167c:	fb09 fc0c 	mul.w	ip, r9, ip
90021680:	0a2d      	lsrs	r5, r5, #8
90021682:	fb09 f904 	mul.w	r9, r9, r4
90021686:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
9002168a:	ea4f 211c 	mov.w	r1, ip, lsr #8
9002168e:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
90021692:	f509 7480 	add.w	r4, r9, #256	; 0x100
90021696:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
9002169a:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
9002169e:	437d      	muls	r5, r7
900216a0:	eb04 2919 	add.w	r9, r4, r9, lsr #8
900216a4:	f002 14ff 	and.w	r4, r2, #16711935	; 0xff00ff
900216a8:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
900216ac:	4461      	add	r1, ip
900216ae:	fb08 f404 	mul.w	r4, r8, r4
900216b2:	ea4f 2919 	mov.w	r9, r9, lsr #8
900216b6:	fb08 f802 	mul.w	r8, r8, r2
900216ba:	0a09      	lsrs	r1, r1, #8
900216bc:	0a22      	lsrs	r2, r4, #8
900216be:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
900216c2:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
900216c6:	fb07 f70a 	mul.w	r7, r7, sl
900216ca:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
900216ce:	4414      	add	r4, r2
900216d0:	f508 7280 	add.w	r2, r8, #256	; 0x100
900216d4:	0a24      	lsrs	r4, r4, #8
900216d6:	eb02 2818 	add.w	r8, r2, r8, lsr #8
900216da:	9a03      	ldr	r2, [sp, #12]
900216dc:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
900216e0:	fb02 5503 	mla	r5, r2, r3, r5
900216e4:	ea4f 2818 	mov.w	r8, r8, lsr #8
900216e8:	fb04 540e 	mla	r4, r4, lr, r5
900216ec:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
900216f0:	fb01 4100 	mla	r1, r1, r0, r4
900216f4:	0a09      	lsrs	r1, r1, #8
900216f6:	f001 14ff 	and.w	r4, r1, #16711935	; 0xff00ff
900216fa:	f40b 417f 	and.w	r1, fp, #65280	; 0xff00
900216fe:	fb03 7101 	mla	r1, r3, r1, r7
90021702:	9b00      	ldr	r3, [sp, #0]
90021704:	fb0e 1e08 	mla	lr, lr, r8, r1
90021708:	f409 417f 	and.w	r1, r9, #65280	; 0xff00
9002170c:	43da      	mvns	r2, r3
9002170e:	1233      	asrs	r3, r6, #8
90021710:	fb00 e101 	mla	r1, r0, r1, lr
90021714:	10f0      	asrs	r0, r6, #3
90021716:	b2d2      	uxtb	r2, r2
90021718:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
9002171c:	0a09      	lsrs	r1, r1, #8
9002171e:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
90021722:	00f6      	lsls	r6, r6, #3
90021724:	4353      	muls	r3, r2
90021726:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
9002172a:	4350      	muls	r0, r2
9002172c:	b2f6      	uxtb	r6, r6
9002172e:	4321      	orrs	r1, r4
90021730:	4356      	muls	r6, r2
90021732:	1c5a      	adds	r2, r3, #1
90021734:	eb02 2213 	add.w	r2, r2, r3, lsr #8
90021738:	0c0b      	lsrs	r3, r1, #16
9002173a:	eb03 2312 	add.w	r3, r3, r2, lsr #8
9002173e:	1c42      	adds	r2, r0, #1
90021740:	eb02 2010 	add.w	r0, r2, r0, lsr #8
90021744:	0a0a      	lsrs	r2, r1, #8
90021746:	021b      	lsls	r3, r3, #8
90021748:	eb02 2210 	add.w	r2, r2, r0, lsr #8
9002174c:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
90021750:	00d2      	lsls	r2, r2, #3
90021752:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
90021756:	4313      	orrs	r3, r2
90021758:	1c72      	adds	r2, r6, #1
9002175a:	eb02 2616 	add.w	r6, r2, r6, lsr #8
9002175e:	eb01 2116 	add.w	r1, r1, r6, lsr #8
90021762:	f3c1 01c4 	ubfx	r1, r1, #3, #5
90021766:	4319      	orrs	r1, r3
90021768:	9b02      	ldr	r3, [sp, #8]
9002176a:	8019      	strh	r1, [r3, #0]
9002176c:	b005      	add	sp, #20
9002176e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90021772:	2500      	movs	r5, #0
90021774:	e6fe      	b.n	90021574 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x3c>
90021776:	2100      	movs	r1, #0
90021778:	460d      	mov	r5, r1
9002177a:	e706      	b.n	9002158a <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
9002177c:	2100      	movs	r1, #0
9002177e:	e704      	b.n	9002158a <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
90021780:	4631      	mov	r1, r6
90021782:	e702      	b.n	9002158a <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
90021784:	2400      	movs	r4, #0
90021786:	e713      	b.n	900215b0 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x78>
90021788:	2200      	movs	r2, #0
9002178a:	4614      	mov	r4, r2
9002178c:	e71a      	b.n	900215c4 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
9002178e:	4602      	mov	r2, r0
90021790:	4604      	mov	r4, r0
90021792:	e717      	b.n	900215c4 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
90021794:	2200      	movs	r2, #0
90021796:	e715      	b.n	900215c4 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
90021798:	4632      	mov	r2, r6
9002179a:	e713      	b.n	900215c4 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>

9002179c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
9002179c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900217a0:	b09b      	sub	sp, #108	; 0x6c
900217a2:	9218      	str	r2, [sp, #96]	; 0x60
900217a4:	9a29      	ldr	r2, [sp, #164]	; 0xa4
900217a6:	9019      	str	r0, [sp, #100]	; 0x64
900217a8:	9116      	str	r1, [sp, #88]	; 0x58
900217aa:	6850      	ldr	r0, [r2, #4]
900217ac:	9307      	str	r3, [sp, #28]
900217ae:	6812      	ldr	r2, [r2, #0]
900217b0:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
900217b4:	e9dd 4625 	ldrd	r4, r6, [sp, #148]	; 0x94
900217b8:	fb00 1303 	mla	r3, r0, r3, r1
900217bc:	eb02 0343 	add.w	r3, r2, r3, lsl #1
900217c0:	930a      	str	r3, [sp, #40]	; 0x28
900217c2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
900217c4:	681b      	ldr	r3, [r3, #0]
900217c6:	930f      	str	r3, [sp, #60]	; 0x3c
900217c8:	9b16      	ldr	r3, [sp, #88]	; 0x58
900217ca:	2b00      	cmp	r3, #0
900217cc:	dc03      	bgt.n	900217d6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
900217ce:	9b18      	ldr	r3, [sp, #96]	; 0x60
900217d0:	2b00      	cmp	r3, #0
900217d2:	f340 8387 	ble.w	90021ee4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x748>
900217d6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
900217d8:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
900217dc:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
900217e0:	1e48      	subs	r0, r1, #1
900217e2:	1e57      	subs	r7, r2, #1
900217e4:	9b07      	ldr	r3, [sp, #28]
900217e6:	2b00      	cmp	r3, #0
900217e8:	f340 8166 	ble.w	90021ab8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
900217ec:	ea5f 4c24 	movs.w	ip, r4, asr #16
900217f0:	ea4f 4326 	mov.w	r3, r6, asr #16
900217f4:	d406      	bmi.n	90021804 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
900217f6:	4584      	cmp	ip, r0
900217f8:	da04      	bge.n	90021804 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
900217fa:	2b00      	cmp	r3, #0
900217fc:	db02      	blt.n	90021804 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
900217fe:	42bb      	cmp	r3, r7
90021800:	f2c0 815b 	blt.w	90021aba <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
90021804:	f11c 0c01 	adds.w	ip, ip, #1
90021808:	f100 814b 	bmi.w	90021aa2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
9002180c:	4561      	cmp	r1, ip
9002180e:	f2c0 8148 	blt.w	90021aa2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
90021812:	3301      	adds	r3, #1
90021814:	f100 8145 	bmi.w	90021aa2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
90021818:	429a      	cmp	r2, r3
9002181a:	f2c0 8142 	blt.w	90021aa2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
9002181e:	9b07      	ldr	r3, [sp, #28]
90021820:	9f0a      	ldr	r7, [sp, #40]	; 0x28
90021822:	9317      	str	r3, [sp, #92]	; 0x5c
90021824:	9b17      	ldr	r3, [sp, #92]	; 0x5c
90021826:	2b00      	cmp	r3, #0
90021828:	f340 8165 	ble.w	90021af6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
9002182c:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
9002182e:	ea4f 4c26 	mov.w	ip, r6, asr #16
90021832:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
90021834:	f3c4 3103 	ubfx	r1, r4, #12, #4
90021838:	f8d2 e00c 	ldr.w	lr, [r2, #12]
9002183c:	1422      	asrs	r2, r4, #16
9002183e:	f3c6 3003 	ubfx	r0, r6, #12, #4
90021842:	689b      	ldr	r3, [r3, #8]
90021844:	f100 81d5 	bmi.w	90021bf2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
90021848:	f103 38ff 	add.w	r8, r3, #4294967295
9002184c:	4542      	cmp	r2, r8
9002184e:	f280 81d0 	bge.w	90021bf2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
90021852:	f1bc 0f00 	cmp.w	ip, #0
90021856:	f2c0 81cc 	blt.w	90021bf2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
9002185a:	f10e 38ff 	add.w	r8, lr, #4294967295
9002185e:	45c4      	cmp	ip, r8
90021860:	f280 81c7 	bge.w	90021bf2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
90021864:	b21b      	sxth	r3, r3
90021866:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
90021868:	fb0c 2203 	mla	r2, ip, r3, r2
9002186c:	eb05 0882 	add.w	r8, r5, r2, lsl #2
90021870:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
90021874:	ea4f 6e12 	mov.w	lr, r2, lsr #24
90021878:	2900      	cmp	r1, #0
9002187a:	f000 8182 	beq.w	90021b82 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
9002187e:	f8d8 5004 	ldr.w	r5, [r8, #4]
90021882:	950b      	str	r5, [sp, #44]	; 0x2c
90021884:	0e2d      	lsrs	r5, r5, #24
90021886:	9512      	str	r5, [sp, #72]	; 0x48
90021888:	b180      	cbz	r0, 900218ac <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
9002188a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
9002188e:	3b01      	subs	r3, #1
90021890:	009b      	lsls	r3, r3, #2
90021892:	3304      	adds	r3, #4
90021894:	eb08 0c03 	add.w	ip, r8, r3
90021898:	f858 3003 	ldr.w	r3, [r8, r3]
9002189c:	9308      	str	r3, [sp, #32]
9002189e:	0e1b      	lsrs	r3, r3, #24
900218a0:	9310      	str	r3, [sp, #64]	; 0x40
900218a2:	f8dc 3004 	ldr.w	r3, [ip, #4]
900218a6:	930c      	str	r3, [sp, #48]	; 0x30
900218a8:	0e1b      	lsrs	r3, r3, #24
900218aa:	9313      	str	r3, [sp, #76]	; 0x4c
900218ac:	b289      	uxth	r1, r1
900218ae:	9b12      	ldr	r3, [sp, #72]	; 0x48
900218b0:	b280      	uxth	r0, r0
900218b2:	9d10      	ldr	r5, [sp, #64]	; 0x40
900218b4:	fb01 f900 	mul.w	r9, r1, r0
900218b8:	0109      	lsls	r1, r1, #4
900218ba:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
900218be:	eba1 0809 	sub.w	r8, r1, r9
900218c2:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
900218c6:	b280      	uxth	r0, r0
900218c8:	fa1f f888 	uxth.w	r8, r8
900218cc:	1a09      	subs	r1, r1, r0
900218ce:	fb08 f303 	mul.w	r3, r8, r3
900218d2:	b289      	uxth	r1, r1
900218d4:	fb01 330e 	mla	r3, r1, lr, r3
900218d8:	fb00 3305 	mla	r3, r0, r5, r3
900218dc:	9d13      	ldr	r5, [sp, #76]	; 0x4c
900218de:	fb09 3305 	mla	r3, r9, r5, r3
900218e2:	f3c3 2307 	ubfx	r3, r3, #8, #8
900218e6:	2b00      	cmp	r3, #0
900218e8:	f000 80d2 	beq.w	90021a90 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
900218ec:	f1be 0fff 	cmp.w	lr, #255	; 0xff
900218f0:	d01b      	beq.n	9002192a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18e>
900218f2:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
900218f6:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
900218fa:	fb0e fa0a 	mul.w	sl, lr, sl
900218fe:	fb0e fe02 	mul.w	lr, lr, r2
90021902:	ea4f 221a 	mov.w	r2, sl, lsr #8
90021906:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
9002190a:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
9002190e:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
90021912:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
90021916:	4452      	add	r2, sl
90021918:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
9002191c:	0a12      	lsrs	r2, r2, #8
9002191e:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
90021922:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
90021926:	ea42 020c 	orr.w	r2, r2, ip
9002192a:	9d12      	ldr	r5, [sp, #72]	; 0x48
9002192c:	2dff      	cmp	r5, #255	; 0xff
9002192e:	d021      	beq.n	90021974 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
90021930:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
90021932:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
90021936:	9d12      	ldr	r5, [sp, #72]	; 0x48
90021938:	fb05 fb0b 	mul.w	fp, r5, fp
9002193c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
9002193e:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
90021942:	9d12      	ldr	r5, [sp, #72]	; 0x48
90021944:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
90021948:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
9002194c:	fb05 fa0a 	mul.w	sl, r5, sl
90021950:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
90021954:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
90021958:	44de      	add	lr, fp
9002195a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
9002195e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
90021962:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
90021966:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
9002196a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
9002196e:	ea4e 050a 	orr.w	r5, lr, sl
90021972:	950b      	str	r5, [sp, #44]	; 0x2c
90021974:	9d10      	ldr	r5, [sp, #64]	; 0x40
90021976:	2dff      	cmp	r5, #255	; 0xff
90021978:	d021      	beq.n	900219be <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x222>
9002197a:	9d08      	ldr	r5, [sp, #32]
9002197c:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
90021980:	9d10      	ldr	r5, [sp, #64]	; 0x40
90021982:	fb05 fb0b 	mul.w	fp, r5, fp
90021986:	9d08      	ldr	r5, [sp, #32]
90021988:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
9002198c:	9d10      	ldr	r5, [sp, #64]	; 0x40
9002198e:	fb05 fa0e 	mul.w	sl, r5, lr
90021992:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
90021996:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
9002199a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
9002199e:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
900219a2:	44de      	add	lr, fp
900219a4:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
900219a8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
900219ac:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
900219b0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
900219b4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
900219b8:	ea4e 050a 	orr.w	r5, lr, sl
900219bc:	9508      	str	r5, [sp, #32]
900219be:	9d13      	ldr	r5, [sp, #76]	; 0x4c
900219c0:	2dff      	cmp	r5, #255	; 0xff
900219c2:	d021      	beq.n	90021a08 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
900219c4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
900219c6:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
900219ca:	9d13      	ldr	r5, [sp, #76]	; 0x4c
900219cc:	fb05 fb0b 	mul.w	fp, r5, fp
900219d0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
900219d2:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
900219d6:	9d13      	ldr	r5, [sp, #76]	; 0x4c
900219d8:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
900219dc:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
900219e0:	fb05 fa0a 	mul.w	sl, r5, sl
900219e4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
900219e8:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
900219ec:	44de      	add	lr, fp
900219ee:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
900219f2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
900219f6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
900219fa:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
900219fe:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
90021a02:	ea4e 050a 	orr.w	r5, lr, sl
90021a06:	950c      	str	r5, [sp, #48]	; 0x30
90021a08:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
90021a0a:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
90021a0e:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
90021a12:	2bff      	cmp	r3, #255	; 0xff
90021a14:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
90021a18:	9d08      	ldr	r5, [sp, #32]
90021a1a:	fb08 fc0c 	mul.w	ip, r8, ip
90021a1e:	fb01 cc0e 	mla	ip, r1, lr, ip
90021a22:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
90021a26:	9d0c      	ldr	r5, [sp, #48]	; 0x30
90021a28:	fb00 cc0e 	mla	ip, r0, lr, ip
90021a2c:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
90021a30:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
90021a32:	fb09 cc0e 	mla	ip, r9, lr, ip
90021a36:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
90021a3a:	fb08 f80e 	mul.w	r8, r8, lr
90021a3e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
90021a42:	fb01 8202 	mla	r2, r1, r2, r8
90021a46:	9908      	ldr	r1, [sp, #32]
90021a48:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
90021a4c:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
90021a50:	990c      	ldr	r1, [sp, #48]	; 0x30
90021a52:	fb00 220a 	mla	r2, r0, sl, r2
90021a56:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
90021a5a:	fb09 2900 	mla	r9, r9, r0, r2
90021a5e:	ea4f 2919 	mov.w	r9, r9, lsr #8
90021a62:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
90021a66:	ea4c 0c09 	orr.w	ip, ip, r9
90021a6a:	ea4f 221c 	mov.w	r2, ip, lsr #8
90021a6e:	f040 8091 	bne.w	90021b94 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
90021a72:	ea4f 135c 	mov.w	r3, ip, lsr #5
90021a76:	f422 62ff 	bic.w	r2, r2, #2040	; 0x7f8
90021a7a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
90021a7e:	f022 0207 	bic.w	r2, r2, #7
90021a82:	431a      	orrs	r2, r3
90021a84:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
90021a88:	ea4c 0c02 	orr.w	ip, ip, r2
90021a8c:	f8a7 c000 	strh.w	ip, [r7]
90021a90:	9b27      	ldr	r3, [sp, #156]	; 0x9c
90021a92:	3702      	adds	r7, #2
90021a94:	441c      	add	r4, r3
90021a96:	9b28      	ldr	r3, [sp, #160]	; 0xa0
90021a98:	441e      	add	r6, r3
90021a9a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
90021a9c:	3b01      	subs	r3, #1
90021a9e:	9317      	str	r3, [sp, #92]	; 0x5c
90021aa0:	e6c0      	b.n	90021824 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
90021aa2:	9b27      	ldr	r3, [sp, #156]	; 0x9c
90021aa4:	441c      	add	r4, r3
90021aa6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
90021aa8:	441e      	add	r6, r3
90021aaa:	9b07      	ldr	r3, [sp, #28]
90021aac:	3b01      	subs	r3, #1
90021aae:	9307      	str	r3, [sp, #28]
90021ab0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
90021ab2:	3302      	adds	r3, #2
90021ab4:	930a      	str	r3, [sp, #40]	; 0x28
90021ab6:	e695      	b.n	900217e4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
90021ab8:	d024      	beq.n	90021b04 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
90021aba:	9b07      	ldr	r3, [sp, #28]
90021abc:	9827      	ldr	r0, [sp, #156]	; 0x9c
90021abe:	3b01      	subs	r3, #1
90021ac0:	fb00 4003 	mla	r0, r0, r3, r4
90021ac4:	1400      	asrs	r0, r0, #16
90021ac6:	f53f aeaa 	bmi.w	9002181e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
90021aca:	3901      	subs	r1, #1
90021acc:	4288      	cmp	r0, r1
90021ace:	f6bf aea6 	bge.w	9002181e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
90021ad2:	9928      	ldr	r1, [sp, #160]	; 0xa0
90021ad4:	fb01 6303 	mla	r3, r1, r3, r6
90021ad8:	141b      	asrs	r3, r3, #16
90021ada:	f53f aea0 	bmi.w	9002181e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
90021ade:	3a01      	subs	r2, #1
90021ae0:	4293      	cmp	r3, r2
90021ae2:	f6bf ae9c 	bge.w	9002181e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
90021ae6:	f8dd b01c 	ldr.w	fp, [sp, #28]
90021aea:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
90021aee:	f1bb 0f00 	cmp.w	fp, #0
90021af2:	f300 809a 	bgt.w	90021c2a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48e>
90021af6:	9b07      	ldr	r3, [sp, #28]
90021af8:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
90021afc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
90021afe:	eb03 0345 	add.w	r3, r3, r5, lsl #1
90021b02:	930a      	str	r3, [sp, #40]	; 0x28
90021b04:	9b16      	ldr	r3, [sp, #88]	; 0x58
90021b06:	2b00      	cmp	r3, #0
90021b08:	f340 81ec 	ble.w	90021ee4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x748>
90021b0c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
90021b10:	9b24      	ldr	r3, [sp, #144]	; 0x90
90021b12:	ee30 0a04 	vadd.f32	s0, s0, s8
90021b16:	ee70 0aa4 	vadd.f32	s1, s1, s9
90021b1a:	eef0 6a62 	vmov.f32	s13, s5
90021b1e:	eec7 7a00 	vdiv.f32	s15, s14, s0
90021b22:	ee31 1a05 	vadd.f32	s2, s2, s10
90021b26:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
90021b2a:	ee16 4a90 	vmov	r4, s13
90021b2e:	eef0 6a43 	vmov.f32	s13, s6
90021b32:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
90021b36:	ee16 6a90 	vmov	r6, s13
90021b3a:	ee20 7aa7 	vmul.f32	s14, s1, s15
90021b3e:	ee61 7a27 	vmul.f32	s15, s2, s15
90021b42:	ee77 2a62 	vsub.f32	s5, s14, s5
90021b46:	ee37 3ac3 	vsub.f32	s6, s15, s6
90021b4a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
90021b4e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
90021b52:	ee12 2a90 	vmov	r2, s5
90021b56:	eef0 2a47 	vmov.f32	s5, s14
90021b5a:	fb92 f3f3 	sdiv	r3, r2, r3
90021b5e:	ee13 2a10 	vmov	r2, s6
90021b62:	9327      	str	r3, [sp, #156]	; 0x9c
90021b64:	9b24      	ldr	r3, [sp, #144]	; 0x90
90021b66:	eeb0 3a67 	vmov.f32	s6, s15
90021b6a:	fb92 f3f3 	sdiv	r3, r2, r3
90021b6e:	9328      	str	r3, [sp, #160]	; 0xa0
90021b70:	9b16      	ldr	r3, [sp, #88]	; 0x58
90021b72:	9a18      	ldr	r2, [sp, #96]	; 0x60
90021b74:	3b01      	subs	r3, #1
90021b76:	9316      	str	r3, [sp, #88]	; 0x58
90021b78:	9b24      	ldr	r3, [sp, #144]	; 0x90
90021b7a:	bf08      	it	eq
90021b7c:	4613      	moveq	r3, r2
90021b7e:	9307      	str	r3, [sp, #28]
90021b80:	e622      	b.n	900217c8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c>
90021b82:	2800      	cmp	r0, #0
90021b84:	f43f ae92 	beq.w	900218ac <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
90021b88:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
90021b8c:	9308      	str	r3, [sp, #32]
90021b8e:	0e1b      	lsrs	r3, r3, #24
90021b90:	9310      	str	r3, [sp, #64]	; 0x40
90021b92:	e68b      	b.n	900218ac <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
90021b94:	8839      	ldrh	r1, [r7, #0]
90021b96:	43db      	mvns	r3, r3
90021b98:	4dd4      	ldr	r5, [pc, #848]	; (90021eec <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x750>)
90021b9a:	ea4f 2e21 	mov.w	lr, r1, asr #8
90021b9e:	fa5f f883 	uxtb.w	r8, r3
90021ba2:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
90021ba6:	10c8      	asrs	r0, r1, #3
90021ba8:	00cb      	lsls	r3, r1, #3
90021baa:	fb0e fe08 	mul.w	lr, lr, r8
90021bae:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
90021bb2:	b2db      	uxtb	r3, r3
90021bb4:	f10e 0101 	add.w	r1, lr, #1
90021bb8:	fb00 f008 	mul.w	r0, r0, r8
90021bbc:	fb03 f308 	mul.w	r3, r3, r8
90021bc0:	eb01 2e1e 	add.w	lr, r1, lr, lsr #8
90021bc4:	ea4f 411c 	mov.w	r1, ip, lsr #16
90021bc8:	eb01 211e 	add.w	r1, r1, lr, lsr #8
90021bcc:	f100 0e01 	add.w	lr, r0, #1
90021bd0:	eb0e 2010 	add.w	r0, lr, r0, lsr #8
90021bd4:	b2c9      	uxtb	r1, r1
90021bd6:	eb02 2210 	add.w	r2, r2, r0, lsr #8
90021bda:	ea05 2101 	and.w	r1, r5, r1, lsl #8
90021bde:	00d2      	lsls	r2, r2, #3
90021be0:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
90021be4:	430a      	orrs	r2, r1
90021be6:	1c59      	adds	r1, r3, #1
90021be8:	eb01 2313 	add.w	r3, r1, r3, lsr #8
90021bec:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
90021bf0:	e748      	b.n	90021a84 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e8>
90021bf2:	f112 0801 	adds.w	r8, r2, #1
90021bf6:	f53f af4b 	bmi.w	90021a90 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
90021bfa:	4543      	cmp	r3, r8
90021bfc:	f6ff af48 	blt.w	90021a90 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
90021c00:	f11c 0801 	adds.w	r8, ip, #1
90021c04:	f53f af44 	bmi.w	90021a90 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
90021c08:	45c6      	cmp	lr, r8
90021c0a:	f6ff af41 	blt.w	90021a90 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
90021c0e:	b21b      	sxth	r3, r3
90021c10:	e9cd 2c01 	strd	r2, ip, [sp, #4]
90021c14:	fa0f f28e 	sxth.w	r2, lr
90021c18:	e9cd 1003 	strd	r1, r0, [sp, #12]
90021c1c:	9200      	str	r2, [sp, #0]
90021c1e:	4639      	mov	r1, r7
90021c20:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
90021c22:	9819      	ldr	r0, [sp, #100]	; 0x64
90021c24:	f7ff fc88 	bl	90021538 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>
90021c28:	e732      	b.n	90021a90 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
90021c2a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
90021c2c:	1421      	asrs	r1, r4, #16
90021c2e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
90021c30:	f3c4 3203 	ubfx	r2, r4, #12, #4
90021c34:	f9b3 7008 	ldrsh.w	r7, [r3, #8]
90021c38:	1433      	asrs	r3, r6, #16
90021c3a:	f3c6 3003 	ubfx	r0, r6, #12, #4
90021c3e:	fb07 1303 	mla	r3, r7, r3, r1
90021c42:	990f      	ldr	r1, [sp, #60]	; 0x3c
90021c44:	eb01 0183 	add.w	r1, r1, r3, lsl #2
90021c48:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
90021c4c:	ea4f 6c13 	mov.w	ip, r3, lsr #24
90021c50:	2a00      	cmp	r2, #0
90021c52:	f000 8108 	beq.w	90021e66 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ca>
90021c56:	684d      	ldr	r5, [r1, #4]
90021c58:	950d      	str	r5, [sp, #52]	; 0x34
90021c5a:	0e2d      	lsrs	r5, r5, #24
90021c5c:	9514      	str	r5, [sp, #80]	; 0x50
90021c5e:	b178      	cbz	r0, 90021c80 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
90021c60:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
90021c64:	3f01      	subs	r7, #1
90021c66:	00bf      	lsls	r7, r7, #2
90021c68:	3704      	adds	r7, #4
90021c6a:	eb01 0e07 	add.w	lr, r1, r7
90021c6e:	59c9      	ldr	r1, [r1, r7]
90021c70:	9109      	str	r1, [sp, #36]	; 0x24
90021c72:	0e09      	lsrs	r1, r1, #24
90021c74:	9111      	str	r1, [sp, #68]	; 0x44
90021c76:	f8de 1004 	ldr.w	r1, [lr, #4]
90021c7a:	910e      	str	r1, [sp, #56]	; 0x38
90021c7c:	0e09      	lsrs	r1, r1, #24
90021c7e:	9115      	str	r1, [sp, #84]	; 0x54
90021c80:	b292      	uxth	r2, r2
90021c82:	9d11      	ldr	r5, [sp, #68]	; 0x44
90021c84:	b280      	uxth	r0, r0
90021c86:	fb02 f900 	mul.w	r9, r2, r0
90021c8a:	0112      	lsls	r2, r2, #4
90021c8c:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
90021c90:	eba2 0e09 	sub.w	lr, r2, r9
90021c94:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
90021c98:	9a14      	ldr	r2, [sp, #80]	; 0x50
90021c9a:	b280      	uxth	r0, r0
90021c9c:	fa1f fe8e 	uxth.w	lr, lr
90021ca0:	1a09      	subs	r1, r1, r0
90021ca2:	fb0e f202 	mul.w	r2, lr, r2
90021ca6:	b289      	uxth	r1, r1
90021ca8:	fb01 220c 	mla	r2, r1, ip, r2
90021cac:	fb00 2205 	mla	r2, r0, r5, r2
90021cb0:	9d15      	ldr	r5, [sp, #84]	; 0x54
90021cb2:	fb09 2205 	mla	r2, r9, r5, r2
90021cb6:	f3c2 2207 	ubfx	r2, r2, #8, #8
90021cba:	2a00      	cmp	r2, #0
90021cbc:	f000 80ca 	beq.w	90021e54 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
90021cc0:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
90021cc4:	d019      	beq.n	90021cfa <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55e>
90021cc6:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
90021cca:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
90021cce:	fb0c fa0a 	mul.w	sl, ip, sl
90021cd2:	fb0c fc03 	mul.w	ip, ip, r3
90021cd6:	ea4f 231a 	mov.w	r3, sl, lsr #8
90021cda:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
90021cde:	f50c 7780 	add.w	r7, ip, #256	; 0x100
90021ce2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
90021ce6:	eb07 271c 	add.w	r7, r7, ip, lsr #8
90021cea:	4453      	add	r3, sl
90021cec:	0a3f      	lsrs	r7, r7, #8
90021cee:	0a1b      	lsrs	r3, r3, #8
90021cf0:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
90021cf4:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
90021cf8:	433b      	orrs	r3, r7
90021cfa:	9d14      	ldr	r5, [sp, #80]	; 0x50
90021cfc:	2dff      	cmp	r5, #255	; 0xff
90021cfe:	d020      	beq.n	90021d42 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a6>
90021d00:	9d0d      	ldr	r5, [sp, #52]	; 0x34
90021d02:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
90021d06:	9d14      	ldr	r5, [sp, #80]	; 0x50
90021d08:	436f      	muls	r7, r5
90021d0a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
90021d0c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
90021d10:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
90021d14:	9d14      	ldr	r5, [sp, #80]	; 0x50
90021d16:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
90021d1a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
90021d1e:	fb05 fa0a 	mul.w	sl, r5, sl
90021d22:	44bc      	add	ip, r7
90021d24:	f50a 7780 	add.w	r7, sl, #256	; 0x100
90021d28:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
90021d2c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
90021d30:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
90021d34:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
90021d38:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
90021d3c:	ea4c 050a 	orr.w	r5, ip, sl
90021d40:	950d      	str	r5, [sp, #52]	; 0x34
90021d42:	9d11      	ldr	r5, [sp, #68]	; 0x44
90021d44:	2dff      	cmp	r5, #255	; 0xff
90021d46:	d020      	beq.n	90021d8a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ee>
90021d48:	9d09      	ldr	r5, [sp, #36]	; 0x24
90021d4a:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
90021d4e:	9d11      	ldr	r5, [sp, #68]	; 0x44
90021d50:	436f      	muls	r7, r5
90021d52:	9d09      	ldr	r5, [sp, #36]	; 0x24
90021d54:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
90021d58:	9d11      	ldr	r5, [sp, #68]	; 0x44
90021d5a:	fb05 fa0c 	mul.w	sl, r5, ip
90021d5e:	ea4f 2c17 	mov.w	ip, r7, lsr #8
90021d62:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
90021d66:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
90021d6a:	44bc      	add	ip, r7
90021d6c:	f50a 7780 	add.w	r7, sl, #256	; 0x100
90021d70:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
90021d74:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
90021d78:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
90021d7c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
90021d80:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
90021d84:	ea4c 050a 	orr.w	r5, ip, sl
90021d88:	9509      	str	r5, [sp, #36]	; 0x24
90021d8a:	9d15      	ldr	r5, [sp, #84]	; 0x54
90021d8c:	2dff      	cmp	r5, #255	; 0xff
90021d8e:	d020      	beq.n	90021dd2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x636>
90021d90:	9d0e      	ldr	r5, [sp, #56]	; 0x38
90021d92:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
90021d96:	9d15      	ldr	r5, [sp, #84]	; 0x54
90021d98:	436f      	muls	r7, r5
90021d9a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
90021d9c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
90021da0:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
90021da4:	9d15      	ldr	r5, [sp, #84]	; 0x54
90021da6:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
90021daa:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
90021dae:	fb05 fa0a 	mul.w	sl, r5, sl
90021db2:	44bc      	add	ip, r7
90021db4:	f50a 7780 	add.w	r7, sl, #256	; 0x100
90021db8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
90021dbc:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
90021dc0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
90021dc4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
90021dc8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
90021dcc:	ea4c 050a 	orr.w	r5, ip, sl
90021dd0:	950e      	str	r5, [sp, #56]	; 0x38
90021dd2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
90021dd4:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
90021dd8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
90021ddc:	2aff      	cmp	r2, #255	; 0xff
90021dde:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
90021de2:	9d09      	ldr	r5, [sp, #36]	; 0x24
90021de4:	fb0e f707 	mul.w	r7, lr, r7
90021de8:	fb01 770c 	mla	r7, r1, ip, r7
90021dec:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
90021df0:	9d0e      	ldr	r5, [sp, #56]	; 0x38
90021df2:	fb00 770c 	mla	r7, r0, ip, r7
90021df6:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
90021dfa:	9d0d      	ldr	r5, [sp, #52]	; 0x34
90021dfc:	fb09 770c 	mla	r7, r9, ip, r7
90021e00:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
90021e04:	fb0e fe0c 	mul.w	lr, lr, ip
90021e08:	ea4f 2717 	mov.w	r7, r7, lsr #8
90021e0c:	fb01 e303 	mla	r3, r1, r3, lr
90021e10:	9909      	ldr	r1, [sp, #36]	; 0x24
90021e12:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
90021e16:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
90021e1a:	990e      	ldr	r1, [sp, #56]	; 0x38
90021e1c:	fb00 330a 	mla	r3, r0, sl, r3
90021e20:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
90021e24:	fb09 3c0c 	mla	ip, r9, ip, r3
90021e28:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
90021e2c:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
90021e30:	ea47 070c 	orr.w	r7, r7, ip
90021e34:	ea4f 2317 	mov.w	r3, r7, lsr #8
90021e38:	d11e      	bne.n	90021e78 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6dc>
90021e3a:	097a      	lsrs	r2, r7, #5
90021e3c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
90021e40:	f3c7 07c4 	ubfx	r7, r7, #3, #5
90021e44:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
90021e48:	f023 0307 	bic.w	r3, r3, #7
90021e4c:	4313      	orrs	r3, r2
90021e4e:	431f      	orrs	r7, r3
90021e50:	f8a8 7000 	strh.w	r7, [r8]
90021e54:	9b27      	ldr	r3, [sp, #156]	; 0x9c
90021e56:	f108 0802 	add.w	r8, r8, #2
90021e5a:	f10b 3bff 	add.w	fp, fp, #4294967295
90021e5e:	441c      	add	r4, r3
90021e60:	9b28      	ldr	r3, [sp, #160]	; 0xa0
90021e62:	441e      	add	r6, r3
90021e64:	e643      	b.n	90021aee <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x352>
90021e66:	2800      	cmp	r0, #0
90021e68:	f43f af0a 	beq.w	90021c80 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
90021e6c:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
90021e70:	9109      	str	r1, [sp, #36]	; 0x24
90021e72:	0e09      	lsrs	r1, r1, #24
90021e74:	9111      	str	r1, [sp, #68]	; 0x44
90021e76:	e703      	b.n	90021c80 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
90021e78:	f8b8 1000 	ldrh.w	r1, [r8]
90021e7c:	43d2      	mvns	r2, r2
90021e7e:	ea4f 2c21 	mov.w	ip, r1, asr #8
90021e82:	fa5f fe82 	uxtb.w	lr, r2
90021e86:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
90021e8a:	10c8      	asrs	r0, r1, #3
90021e8c:	00ca      	lsls	r2, r1, #3
90021e8e:	fb0c fc0e 	mul.w	ip, ip, lr
90021e92:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
90021e96:	b2d2      	uxtb	r2, r2
90021e98:	f10c 0101 	add.w	r1, ip, #1
90021e9c:	fb00 f00e 	mul.w	r0, r0, lr
90021ea0:	fb02 f20e 	mul.w	r2, r2, lr
90021ea4:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
90021ea8:	0c39      	lsrs	r1, r7, #16
90021eaa:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
90021eae:	490f      	ldr	r1, [pc, #60]	; (90021eec <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x750>)
90021eb0:	fa5f fc8c 	uxtb.w	ip, ip
90021eb4:	ea01 2c0c 	and.w	ip, r1, ip, lsl #8
90021eb8:	1c41      	adds	r1, r0, #1
90021eba:	eb01 2010 	add.w	r0, r1, r0, lsr #8
90021ebe:	1c51      	adds	r1, r2, #1
90021ec0:	eb03 2010 	add.w	r0, r3, r0, lsr #8
90021ec4:	eb01 2212 	add.w	r2, r1, r2, lsr #8
90021ec8:	00c0      	lsls	r0, r0, #3
90021eca:	eb07 2712 	add.w	r7, r7, r2, lsr #8
90021ece:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
90021ed2:	f3c7 07c4 	ubfx	r7, r7, #3, #5
90021ed6:	ea4c 0c00 	orr.w	ip, ip, r0
90021eda:	ea47 0c0c 	orr.w	ip, r7, ip
90021ede:	f8a8 c000 	strh.w	ip, [r8]
90021ee2:	e7b7      	b.n	90021e54 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
90021ee4:	b01b      	add	sp, #108	; 0x6c
90021ee6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90021eea:	bf00      	nop
90021eec:	fffff800 	.word	0xfffff800

90021ef0 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>:
90021ef0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
90021ef4:	e9dd 050a 	ldrd	r0, r5, [sp, #40]	; 0x28
90021ef8:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
90021efc:	2d00      	cmp	r5, #0
90021efe:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
90021f02:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
90021f06:	fb05 0e03 	mla	lr, r5, r3, r0
90021f0a:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
90021f0e:	f2c0 808c 	blt.w	9002202a <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x13a>
90021f12:	45a9      	cmp	r9, r5
90021f14:	f340 8089 	ble.w	9002202a <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x13a>
90021f18:	2800      	cmp	r0, #0
90021f1a:	f2c0 8084 	blt.w	90022026 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x136>
90021f1e:	4580      	cmp	r8, r0
90021f20:	f340 8081 	ble.w	90022026 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x136>
90021f24:	ea4f 045e 	mov.w	r4, lr, lsr #1
90021f28:	f01e 0f01 	tst.w	lr, #1
90021f2c:	5d16      	ldrb	r6, [r2, r4]
90021f2e:	bf0c      	ite	eq
90021f30:	f006 060f 	andeq.w	r6, r6, #15
90021f34:	1136      	asrne	r6, r6, #4
90021f36:	eb06 1606 	add.w	r6, r6, r6, lsl #4
90021f3a:	b2f6      	uxtb	r6, r6
90021f3c:	1c44      	adds	r4, r0, #1
90021f3e:	d477      	bmi.n	90022030 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x140>
90021f40:	45a0      	cmp	r8, r4
90021f42:	dd75      	ble.n	90022030 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x140>
90021f44:	2f00      	cmp	r7, #0
90021f46:	d075      	beq.n	90022034 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x144>
90021f48:	f10e 0a01 	add.w	sl, lr, #1
90021f4c:	ea4f 045a 	mov.w	r4, sl, lsr #1
90021f50:	f01a 0f01 	tst.w	sl, #1
90021f54:	5d14      	ldrb	r4, [r2, r4]
90021f56:	bf0c      	ite	eq
90021f58:	f004 040f 	andeq.w	r4, r4, #15
90021f5c:	1124      	asrne	r4, r4, #4
90021f5e:	eb04 1404 	add.w	r4, r4, r4, lsl #4
90021f62:	b2e4      	uxtb	r4, r4
90021f64:	3501      	adds	r5, #1
90021f66:	d469      	bmi.n	9002203c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x14c>
90021f68:	45a9      	cmp	r9, r5
90021f6a:	dd67      	ble.n	9002203c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x14c>
90021f6c:	f1bc 0f00 	cmp.w	ip, #0
90021f70:	d067      	beq.n	90022042 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x152>
90021f72:	2800      	cmp	r0, #0
90021f74:	db60      	blt.n	90022038 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x148>
90021f76:	4580      	cmp	r8, r0
90021f78:	dd5e      	ble.n	90022038 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x148>
90021f7a:	eb03 090e 	add.w	r9, r3, lr
90021f7e:	ea4f 0559 	mov.w	r5, r9, lsr #1
90021f82:	f019 0f01 	tst.w	r9, #1
90021f86:	5d55      	ldrb	r5, [r2, r5]
90021f88:	bf0c      	ite	eq
90021f8a:	f005 050f 	andeq.w	r5, r5, #15
90021f8e:	112d      	asrne	r5, r5, #4
90021f90:	eb05 1505 	add.w	r5, r5, r5, lsl #4
90021f94:	b2ed      	uxtb	r5, r5
90021f96:	3001      	adds	r0, #1
90021f98:	d456      	bmi.n	90022048 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x158>
90021f9a:	4580      	cmp	r8, r0
90021f9c:	dd54      	ble.n	90022048 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x158>
90021f9e:	2f00      	cmp	r7, #0
90021fa0:	d054      	beq.n	9002204c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x15c>
90021fa2:	3301      	adds	r3, #1
90021fa4:	449e      	add	lr, r3
90021fa6:	ea4f 035e 	mov.w	r3, lr, lsr #1
90021faa:	f01e 0f01 	tst.w	lr, #1
90021fae:	5cd0      	ldrb	r0, [r2, r3]
90021fb0:	bf0c      	ite	eq
90021fb2:	f000 000f 	andeq.w	r0, r0, #15
90021fb6:	1100      	asrne	r0, r0, #4
90021fb8:	eb00 1000 	add.w	r0, r0, r0, lsl #4
90021fbc:	b2c3      	uxtb	r3, r0
90021fbe:	b2ba      	uxth	r2, r7
90021fc0:	fa1f fc8c 	uxth.w	ip, ip
90021fc4:	fb02 f00c 	mul.w	r0, r2, ip
90021fc8:	0112      	lsls	r2, r2, #4
90021fca:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
90021fce:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
90021fd2:	1a12      	subs	r2, r2, r0
90021fd4:	fa1f fc8c 	uxth.w	ip, ip
90021fd8:	b292      	uxth	r2, r2
90021fda:	eba7 070c 	sub.w	r7, r7, ip
90021fde:	4362      	muls	r2, r4
90021fe0:	b2bf      	uxth	r7, r7
90021fe2:	fb06 2207 	mla	r2, r6, r7, r2
90021fe6:	fb0c 2505 	mla	r5, ip, r5, r2
90021fea:	fb00 5303 	mla	r3, r0, r3, r5
90021fee:	f3c3 2307 	ubfx	r3, r3, #8, #8
90021ff2:	b1b3      	cbz	r3, 90022022 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x132>
90021ff4:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
90021ff8:	435a      	muls	r2, r3
90021ffa:	1c53      	adds	r3, r2, #1
90021ffc:	eb03 2312 	add.w	r3, r3, r2, lsr #8
90022000:	4a2d      	ldr	r2, [pc, #180]	; (900220b8 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1c8>)
90022002:	121b      	asrs	r3, r3, #8
90022004:	6812      	ldr	r2, [r2, #0]
90022006:	2bff      	cmp	r3, #255	; 0xff
90022008:	ea4f 2612 	mov.w	r6, r2, lsr #8
9002200c:	d120      	bne.n	90022050 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x160>
9002200e:	0950      	lsrs	r0, r2, #5
90022010:	4b2a      	ldr	r3, [pc, #168]	; (900220bc <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1cc>)
90022012:	f3c2 02c4 	ubfx	r2, r2, #3, #5
90022016:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
9002201a:	4033      	ands	r3, r6
9002201c:	4318      	orrs	r0, r3
9002201e:	4302      	orrs	r2, r0
90022020:	800a      	strh	r2, [r1, #0]
90022022:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
90022026:	2600      	movs	r6, #0
90022028:	e788      	b.n	90021f3c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x4c>
9002202a:	2400      	movs	r4, #0
9002202c:	4626      	mov	r6, r4
9002202e:	e799      	b.n	90021f64 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
90022030:	2400      	movs	r4, #0
90022032:	e797      	b.n	90021f64 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
90022034:	463c      	mov	r4, r7
90022036:	e795      	b.n	90021f64 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
90022038:	2500      	movs	r5, #0
9002203a:	e7ac      	b.n	90021f96 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xa6>
9002203c:	2300      	movs	r3, #0
9002203e:	461d      	mov	r5, r3
90022040:	e7bd      	b.n	90021fbe <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
90022042:	4663      	mov	r3, ip
90022044:	4665      	mov	r5, ip
90022046:	e7ba      	b.n	90021fbe <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
90022048:	2300      	movs	r3, #0
9002204a:	e7b8      	b.n	90021fbe <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
9002204c:	463b      	mov	r3, r7
9002204e:	e7b6      	b.n	90021fbe <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
90022050:	880d      	ldrh	r5, [r1, #0]
90022052:	b29f      	uxth	r7, r3
90022054:	f3c2 4007 	ubfx	r0, r2, #16, #8
90022058:	43db      	mvns	r3, r3
9002205a:	122c      	asrs	r4, r5, #8
9002205c:	fb10 f007 	smulbb	r0, r0, r7
90022060:	b2db      	uxtb	r3, r3
90022062:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
90022066:	b2f6      	uxtb	r6, r6
90022068:	b2d2      	uxtb	r2, r2
9002206a:	fb04 0403 	mla	r4, r4, r3, r0
9002206e:	10e8      	asrs	r0, r5, #3
90022070:	fb12 f207 	smulbb	r2, r2, r7
90022074:	00ed      	lsls	r5, r5, #3
90022076:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
9002207a:	b2a4      	uxth	r4, r4
9002207c:	fb16 f607 	smulbb	r6, r6, r7
90022080:	b2ed      	uxtb	r5, r5
90022082:	fb00 6603 	mla	r6, r0, r3, r6
90022086:	fb05 2303 	mla	r3, r5, r3, r2
9002208a:	b2b0      	uxth	r0, r6
9002208c:	b29a      	uxth	r2, r3
9002208e:	1c63      	adds	r3, r4, #1
90022090:	eb03 2414 	add.w	r4, r3, r4, lsr #8
90022094:	1c53      	adds	r3, r2, #1
90022096:	eb03 2312 	add.w	r3, r3, r2, lsr #8
9002209a:	1c42      	adds	r2, r0, #1
9002209c:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
900220a0:	eb02 2010 	add.w	r0, r2, r0, lsr #8
900220a4:	f3c3 23c4 	ubfx	r3, r3, #11, #5
900220a8:	0940      	lsrs	r0, r0, #5
900220aa:	4323      	orrs	r3, r4
900220ac:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
900220b0:	4303      	orrs	r3, r0
900220b2:	800b      	strh	r3, [r1, #0]
900220b4:	e7b5      	b.n	90022022 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x132>
900220b6:	bf00      	nop
900220b8:	24021c1c 	.word	0x24021c1c
900220bc:	00fff800 	.word	0x00fff800

900220c0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
900220c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900220c4:	b097      	sub	sp, #92	; 0x5c
900220c6:	9214      	str	r2, [sp, #80]	; 0x50
900220c8:	9309      	str	r3, [sp, #36]	; 0x24
900220ca:	9a25      	ldr	r2, [sp, #148]	; 0x94
900220cc:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
900220d0:	9015      	str	r0, [sp, #84]	; 0x54
900220d2:	910d      	str	r1, [sp, #52]	; 0x34
900220d4:	6850      	ldr	r0, [r2, #4]
900220d6:	930f      	str	r3, [sp, #60]	; 0x3c
900220d8:	6812      	ldr	r2, [r2, #0]
900220da:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
900220de:	e9dd 4621 	ldrd	r4, r6, [sp, #132]	; 0x84
900220e2:	fb00 1303 	mla	r3, r0, r3, r1
900220e6:	eb02 0943 	add.w	r9, r2, r3, lsl #1
900220ea:	9b28      	ldr	r3, [sp, #160]	; 0xa0
900220ec:	689b      	ldr	r3, [r3, #8]
900220ee:	3301      	adds	r3, #1
900220f0:	f023 0301 	bic.w	r3, r3, #1
900220f4:	930a      	str	r3, [sp, #40]	; 0x28
900220f6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
900220f8:	681f      	ldr	r7, [r3, #0]
900220fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
900220fc:	2b00      	cmp	r3, #0
900220fe:	dc03      	bgt.n	90022108 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
90022100:	9b14      	ldr	r3, [sp, #80]	; 0x50
90022102:	2b00      	cmp	r3, #0
90022104:	f340 8289 	ble.w	9002261a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55a>
90022108:	9b28      	ldr	r3, [sp, #160]	; 0xa0
9002210a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
9002210e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
90022112:	1e48      	subs	r0, r1, #1
90022114:	f102 3cff 	add.w	ip, r2, #4294967295
90022118:	9b09      	ldr	r3, [sp, #36]	; 0x24
9002211a:	2b00      	cmp	r3, #0
9002211c:	f340 80c5 	ble.w	900222aa <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
90022120:	ea5f 4e24 	movs.w	lr, r4, asr #16
90022124:	ea4f 4326 	mov.w	r3, r6, asr #16
90022128:	d406      	bmi.n	90022138 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
9002212a:	4586      	cmp	lr, r0
9002212c:	da04      	bge.n	90022138 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
9002212e:	2b00      	cmp	r3, #0
90022130:	db02      	blt.n	90022138 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
90022132:	4563      	cmp	r3, ip
90022134:	f2c0 80ba 	blt.w	900222ac <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
90022138:	f11e 0e01 	adds.w	lr, lr, #1
9002213c:	f100 80ab 	bmi.w	90022296 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
90022140:	4571      	cmp	r1, lr
90022142:	f2c0 80a8 	blt.w	90022296 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
90022146:	3301      	adds	r3, #1
90022148:	f100 80a5 	bmi.w	90022296 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
9002214c:	429a      	cmp	r2, r3
9002214e:	f2c0 80a2 	blt.w	90022296 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
90022152:	9b09      	ldr	r3, [sp, #36]	; 0x24
90022154:	46c8      	mov	r8, r9
90022156:	f9bd a028 	ldrsh.w	sl, [sp, #40]	; 0x28
9002215a:	930e      	str	r3, [sp, #56]	; 0x38
9002215c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9002215e:	2b00      	cmp	r3, #0
90022160:	f340 80c4 	ble.w	900222ec <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
90022164:	9b28      	ldr	r3, [sp, #160]	; 0xa0
90022166:	1430      	asrs	r0, r6, #16
90022168:	f3c4 3203 	ubfx	r2, r4, #12, #4
9002216c:	f3c6 3103 	ubfx	r1, r6, #12, #4
90022170:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
90022174:	1423      	asrs	r3, r4, #16
90022176:	f100 814f 	bmi.w	90022418 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
9002217a:	f10c 3bff 	add.w	fp, ip, #4294967295
9002217e:	455b      	cmp	r3, fp
90022180:	f280 814a 	bge.w	90022418 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
90022184:	2800      	cmp	r0, #0
90022186:	f2c0 8147 	blt.w	90022418 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
9002218a:	f10e 3bff 	add.w	fp, lr, #4294967295
9002218e:	4558      	cmp	r0, fp
90022190:	f280 8142 	bge.w	90022418 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
90022194:	9d0a      	ldr	r5, [sp, #40]	; 0x28
90022196:	fb00 3305 	mla	r3, r0, r5, r3
9002219a:	0858      	lsrs	r0, r3, #1
9002219c:	07dd      	lsls	r5, r3, #31
9002219e:	f817 c000 	ldrb.w	ip, [r7, r0]
900221a2:	bf54      	ite	pl
900221a4:	f00c 0c0f 	andpl.w	ip, ip, #15
900221a8:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
900221ac:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
900221b0:	fa5f fc8c 	uxtb.w	ip, ip
900221b4:	2a00      	cmp	r2, #0
900221b6:	f000 80dd 	beq.w	90022374 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b4>
900221ba:	1c58      	adds	r0, r3, #1
900221bc:	ea4f 0e50 	mov.w	lr, r0, lsr #1
900221c0:	07c0      	lsls	r0, r0, #31
900221c2:	f817 e00e 	ldrb.w	lr, [r7, lr]
900221c6:	bf54      	ite	pl
900221c8:	f00e 0e0f 	andpl.w	lr, lr, #15
900221cc:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
900221d0:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
900221d4:	fa5f f08e 	uxtb.w	r0, lr
900221d8:	9010      	str	r0, [sp, #64]	; 0x40
900221da:	b1d9      	cbz	r1, 90022214 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
900221dc:	4453      	add	r3, sl
900221de:	0858      	lsrs	r0, r3, #1
900221e0:	07dd      	lsls	r5, r3, #31
900221e2:	f103 0301 	add.w	r3, r3, #1
900221e6:	5c38      	ldrb	r0, [r7, r0]
900221e8:	bf54      	ite	pl
900221ea:	f000 000f 	andpl.w	r0, r0, #15
900221ee:	1100      	asrmi	r0, r0, #4
900221f0:	07dd      	lsls	r5, r3, #31
900221f2:	eb00 1000 	add.w	r0, r0, r0, lsl #4
900221f6:	b2c0      	uxtb	r0, r0
900221f8:	900b      	str	r0, [sp, #44]	; 0x2c
900221fa:	ea4f 0053 	mov.w	r0, r3, lsr #1
900221fe:	f817 e000 	ldrb.w	lr, [r7, r0]
90022202:	bf54      	ite	pl
90022204:	f00e 030f 	andpl.w	r3, lr, #15
90022208:	ea4f 132e 	movmi.w	r3, lr, asr #4
9002220c:	eb03 1303 	add.w	r3, r3, r3, lsl #4
90022210:	b2db      	uxtb	r3, r3
90022212:	9311      	str	r3, [sp, #68]	; 0x44
90022214:	b292      	uxth	r2, r2
90022216:	9d10      	ldr	r5, [sp, #64]	; 0x40
90022218:	b289      	uxth	r1, r1
9002221a:	fb02 f301 	mul.w	r3, r2, r1
9002221e:	0112      	lsls	r2, r2, #4
90022220:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
90022224:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
90022228:	1ad2      	subs	r2, r2, r3
9002222a:	b289      	uxth	r1, r1
9002222c:	b292      	uxth	r2, r2
9002222e:	1a40      	subs	r0, r0, r1
90022230:	436a      	muls	r2, r5
90022232:	b280      	uxth	r0, r0
90022234:	fb0c 2c00 	mla	ip, ip, r0, r2
90022238:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
9002223a:	fb01 c102 	mla	r1, r1, r2, ip
9002223e:	9a11      	ldr	r2, [sp, #68]	; 0x44
90022240:	fb03 1302 	mla	r3, r3, r2, r1
90022244:	f3c3 2307 	ubfx	r3, r3, #8, #8
90022248:	b1db      	cbz	r3, 90022282 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
9002224a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
9002224c:	4353      	muls	r3, r2
9002224e:	1c5a      	adds	r2, r3, #1
90022250:	eb02 2313 	add.w	r3, r2, r3, lsr #8
90022254:	4ac6      	ldr	r2, [pc, #792]	; (90022570 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
90022256:	121b      	asrs	r3, r3, #8
90022258:	6812      	ldr	r2, [r2, #0]
9002225a:	2bff      	cmp	r3, #255	; 0xff
9002225c:	ea4f 2c12 	mov.w	ip, r2, lsr #8
90022260:	f040 8099 	bne.w	90022396 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
90022264:	0953      	lsrs	r3, r2, #5
90022266:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
9002226a:	f3c2 02c4 	ubfx	r2, r2, #3, #5
9002226e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
90022272:	f02c 0c07 	bic.w	ip, ip, #7
90022276:	ea43 0c0c 	orr.w	ip, r3, ip
9002227a:	ea4c 0202 	orr.w	r2, ip, r2
9002227e:	f8a8 2000 	strh.w	r2, [r8]
90022282:	9b23      	ldr	r3, [sp, #140]	; 0x8c
90022284:	f108 0802 	add.w	r8, r8, #2
90022288:	441c      	add	r4, r3
9002228a:	9b24      	ldr	r3, [sp, #144]	; 0x90
9002228c:	441e      	add	r6, r3
9002228e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
90022290:	3b01      	subs	r3, #1
90022292:	930e      	str	r3, [sp, #56]	; 0x38
90022294:	e762      	b.n	9002215c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
90022296:	9b23      	ldr	r3, [sp, #140]	; 0x8c
90022298:	f109 0902 	add.w	r9, r9, #2
9002229c:	441c      	add	r4, r3
9002229e:	9b24      	ldr	r3, [sp, #144]	; 0x90
900222a0:	441e      	add	r6, r3
900222a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
900222a4:	3b01      	subs	r3, #1
900222a6:	9309      	str	r3, [sp, #36]	; 0x24
900222a8:	e736      	b.n	90022118 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
900222aa:	d024      	beq.n	900222f6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
900222ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
900222ae:	9823      	ldr	r0, [sp, #140]	; 0x8c
900222b0:	3b01      	subs	r3, #1
900222b2:	fb00 4003 	mla	r0, r0, r3, r4
900222b6:	1400      	asrs	r0, r0, #16
900222b8:	f53f af4b 	bmi.w	90022152 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
900222bc:	3901      	subs	r1, #1
900222be:	4288      	cmp	r0, r1
900222c0:	f6bf af47 	bge.w	90022152 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
900222c4:	9924      	ldr	r1, [sp, #144]	; 0x90
900222c6:	fb01 6303 	mla	r3, r1, r3, r6
900222ca:	141b      	asrs	r3, r3, #16
900222cc:	f53f af41 	bmi.w	90022152 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
900222d0:	3a01      	subs	r2, #1
900222d2:	4293      	cmp	r3, r2
900222d4:	f6bf af3d 	bge.w	90022152 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
900222d8:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
900222dc:	46c8      	mov	r8, r9
900222de:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
900222e2:	930e      	str	r3, [sp, #56]	; 0x38
900222e4:	f1bb 0f00 	cmp.w	fp, #0
900222e8:	f300 80b7 	bgt.w	9002245a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39a>
900222ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
900222ee:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
900222f2:	eb09 0945 	add.w	r9, r9, r5, lsl #1
900222f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
900222f8:	2b00      	cmp	r3, #0
900222fa:	f340 818e 	ble.w	9002261a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55a>
900222fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
90022302:	9b20      	ldr	r3, [sp, #128]	; 0x80
90022304:	ee30 0a04 	vadd.f32	s0, s0, s8
90022308:	ee70 0aa4 	vadd.f32	s1, s1, s9
9002230c:	eef0 6a62 	vmov.f32	s13, s5
90022310:	eec7 7a00 	vdiv.f32	s15, s14, s0
90022314:	ee31 1a05 	vadd.f32	s2, s2, s10
90022318:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9002231c:	ee16 4a90 	vmov	r4, s13
90022320:	eef0 6a43 	vmov.f32	s13, s6
90022324:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
90022328:	ee16 6a90 	vmov	r6, s13
9002232c:	ee20 7aa7 	vmul.f32	s14, s1, s15
90022330:	ee61 7a27 	vmul.f32	s15, s2, s15
90022334:	ee77 2a62 	vsub.f32	s5, s14, s5
90022338:	ee37 3ac3 	vsub.f32	s6, s15, s6
9002233c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
90022340:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
90022344:	ee12 2a90 	vmov	r2, s5
90022348:	eef0 2a47 	vmov.f32	s5, s14
9002234c:	fb92 f3f3 	sdiv	r3, r2, r3
90022350:	ee13 2a10 	vmov	r2, s6
90022354:	9323      	str	r3, [sp, #140]	; 0x8c
90022356:	9b20      	ldr	r3, [sp, #128]	; 0x80
90022358:	eeb0 3a67 	vmov.f32	s6, s15
9002235c:	fb92 f3f3 	sdiv	r3, r2, r3
90022360:	9324      	str	r3, [sp, #144]	; 0x90
90022362:	9b0d      	ldr	r3, [sp, #52]	; 0x34
90022364:	9a14      	ldr	r2, [sp, #80]	; 0x50
90022366:	3b01      	subs	r3, #1
90022368:	930d      	str	r3, [sp, #52]	; 0x34
9002236a:	9b20      	ldr	r3, [sp, #128]	; 0x80
9002236c:	bf08      	it	eq
9002236e:	4613      	moveq	r3, r2
90022370:	9309      	str	r3, [sp, #36]	; 0x24
90022372:	e6c2      	b.n	900220fa <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
90022374:	2900      	cmp	r1, #0
90022376:	f43f af4d 	beq.w	90022214 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
9002237a:	eb0a 0003 	add.w	r0, sl, r3
9002237e:	0843      	lsrs	r3, r0, #1
90022380:	07c0      	lsls	r0, r0, #31
90022382:	5cfb      	ldrb	r3, [r7, r3]
90022384:	bf54      	ite	pl
90022386:	f003 030f 	andpl.w	r3, r3, #15
9002238a:	111b      	asrmi	r3, r3, #4
9002238c:	eb03 1303 	add.w	r3, r3, r3, lsl #4
90022390:	b2db      	uxtb	r3, r3
90022392:	930b      	str	r3, [sp, #44]	; 0x2c
90022394:	e73e      	b.n	90022214 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
90022396:	f8b8 e000 	ldrh.w	lr, [r8]
9002239a:	fa1f fb83 	uxth.w	fp, r3
9002239e:	f3c2 4107 	ubfx	r1, r2, #16, #8
900223a2:	43db      	mvns	r3, r3
900223a4:	ea4f 202e 	mov.w	r0, lr, asr #8
900223a8:	fb11 f10b 	smulbb	r1, r1, fp
900223ac:	b2db      	uxtb	r3, r3
900223ae:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
900223b2:	fa5f fc8c 	uxtb.w	ip, ip
900223b6:	b2d2      	uxtb	r2, r2
900223b8:	fb00 1003 	mla	r0, r0, r3, r1
900223bc:	ea4f 01ee 	mov.w	r1, lr, asr #3
900223c0:	fb1c fc0b 	smulbb	ip, ip, fp
900223c4:	ea4f 0ece 	mov.w	lr, lr, lsl #3
900223c8:	b280      	uxth	r0, r0
900223ca:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
900223ce:	fb12 fb0b 	smulbb	fp, r2, fp
900223d2:	fa5f fe8e 	uxtb.w	lr, lr
900223d6:	fb01 cc03 	mla	ip, r1, r3, ip
900223da:	fb0e bb03 	mla	fp, lr, r3, fp
900223de:	1c43      	adds	r3, r0, #1
900223e0:	fa1f fc8c 	uxth.w	ip, ip
900223e4:	fa1f fb8b 	uxth.w	fp, fp
900223e8:	eb03 2010 	add.w	r0, r3, r0, lsr #8
900223ec:	f10c 0101 	add.w	r1, ip, #1
900223f0:	f400 4378 	and.w	r3, r0, #63488	; 0xf800
900223f4:	f10b 0001 	add.w	r0, fp, #1
900223f8:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
900223fc:	eb00 201b 	add.w	r0, r0, fp, lsr #8
90022400:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
90022404:	f3c0 20c4 	ubfx	r0, r0, #11, #5
90022408:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
9002240c:	4318      	orrs	r0, r3
9002240e:	ea40 000c 	orr.w	r0, r0, ip
90022412:	f8a8 0000 	strh.w	r0, [r8]
90022416:	e734      	b.n	90022282 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
90022418:	f113 0b01 	adds.w	fp, r3, #1
9002241c:	f53f af31 	bmi.w	90022282 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
90022420:	45dc      	cmp	ip, fp
90022422:	f6ff af2e 	blt.w	90022282 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
90022426:	f110 0b01 	adds.w	fp, r0, #1
9002242a:	f53f af2a 	bmi.w	90022282 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
9002242e:	45de      	cmp	lr, fp
90022430:	f6ff af27 	blt.w	90022282 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
90022434:	9302      	str	r3, [sp, #8]
90022436:	fa0f f38e 	sxth.w	r3, lr
9002243a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
9002243c:	9301      	str	r3, [sp, #4]
9002243e:	fa0f f38c 	sxth.w	r3, ip
90022442:	e9cd 0203 	strd	r0, r2, [sp, #12]
90022446:	e9cd 1505 	strd	r1, r5, [sp, #20]
9002244a:	9300      	str	r3, [sp, #0]
9002244c:	463a      	mov	r2, r7
9002244e:	4653      	mov	r3, sl
90022450:	4641      	mov	r1, r8
90022452:	9815      	ldr	r0, [sp, #84]	; 0x54
90022454:	f7ff fd4c 	bl	90021ef0 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>
90022458:	e713      	b.n	90022282 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
9002245a:	1422      	asrs	r2, r4, #16
9002245c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
9002245e:	1433      	asrs	r3, r6, #16
90022460:	f3c4 3103 	ubfx	r1, r4, #12, #4
90022464:	f3c6 3003 	ubfx	r0, r6, #12, #4
90022468:	fb05 2303 	mla	r3, r5, r3, r2
9002246c:	085a      	lsrs	r2, r3, #1
9002246e:	07dd      	lsls	r5, r3, #31
90022470:	5cba      	ldrb	r2, [r7, r2]
90022472:	bf54      	ite	pl
90022474:	f002 020f 	andpl.w	r2, r2, #15
90022478:	1112      	asrmi	r2, r2, #4
9002247a:	eb02 1202 	add.w	r2, r2, r2, lsl #4
9002247e:	b2d2      	uxtb	r2, r2
90022480:	2900      	cmp	r1, #0
90022482:	d077      	beq.n	90022574 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
90022484:	f103 0e01 	add.w	lr, r3, #1
90022488:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
9002248c:	f01e 0f01 	tst.w	lr, #1
90022490:	f817 c00c 	ldrb.w	ip, [r7, ip]
90022494:	bf0c      	ite	eq
90022496:	f00c 0c0f 	andeq.w	ip, ip, #15
9002249a:	ea4f 1c2c 	movne.w	ip, ip, asr #4
9002249e:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
900224a2:	fa5f f58c 	uxtb.w	r5, ip
900224a6:	9512      	str	r5, [sp, #72]	; 0x48
900224a8:	b308      	cbz	r0, 900224ee <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42e>
900224aa:	9d0e      	ldr	r5, [sp, #56]	; 0x38
900224ac:	442b      	add	r3, r5
900224ae:	ea4f 0c53 	mov.w	ip, r3, lsr #1
900224b2:	07dd      	lsls	r5, r3, #31
900224b4:	f103 0301 	add.w	r3, r3, #1
900224b8:	f817 c00c 	ldrb.w	ip, [r7, ip]
900224bc:	bf54      	ite	pl
900224be:	f00c 0c0f 	andpl.w	ip, ip, #15
900224c2:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
900224c6:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
900224ca:	fa5f f58c 	uxtb.w	r5, ip
900224ce:	ea4f 0c53 	mov.w	ip, r3, lsr #1
900224d2:	950c      	str	r5, [sp, #48]	; 0x30
900224d4:	07dd      	lsls	r5, r3, #31
900224d6:	f817 c00c 	ldrb.w	ip, [r7, ip]
900224da:	bf54      	ite	pl
900224dc:	f00c 0c0f 	andpl.w	ip, ip, #15
900224e0:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
900224e4:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
900224e8:	fa5f f38c 	uxtb.w	r3, ip
900224ec:	9313      	str	r3, [sp, #76]	; 0x4c
900224ee:	b289      	uxth	r1, r1
900224f0:	9d12      	ldr	r5, [sp, #72]	; 0x48
900224f2:	b280      	uxth	r0, r0
900224f4:	fb01 f300 	mul.w	r3, r1, r0
900224f8:	0109      	lsls	r1, r1, #4
900224fa:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
900224fe:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
90022502:	1ac9      	subs	r1, r1, r3
90022504:	b280      	uxth	r0, r0
90022506:	b289      	uxth	r1, r1
90022508:	ebac 0c00 	sub.w	ip, ip, r0
9002250c:	4369      	muls	r1, r5
9002250e:	fa1f fc8c 	uxth.w	ip, ip
90022512:	fb02 120c 	mla	r2, r2, ip, r1
90022516:	990c      	ldr	r1, [sp, #48]	; 0x30
90022518:	fb00 2001 	mla	r0, r0, r1, r2
9002251c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
9002251e:	fb03 0302 	mla	r3, r3, r2, r0
90022522:	f3c3 2307 	ubfx	r3, r3, #8, #8
90022526:	b1d3      	cbz	r3, 9002255e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
90022528:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
9002252a:	4353      	muls	r3, r2
9002252c:	1c5a      	adds	r2, r3, #1
9002252e:	eb02 2313 	add.w	r3, r2, r3, lsr #8
90022532:	4a0f      	ldr	r2, [pc, #60]	; (90022570 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
90022534:	121b      	asrs	r3, r3, #8
90022536:	6812      	ldr	r2, [r2, #0]
90022538:	2bff      	cmp	r3, #255	; 0xff
9002253a:	ea4f 2c12 	mov.w	ip, r2, lsr #8
9002253e:	d12d      	bne.n	9002259c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
90022540:	0953      	lsrs	r3, r2, #5
90022542:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
90022546:	f3c2 02c4 	ubfx	r2, r2, #3, #5
9002254a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9002254e:	f02c 0c07 	bic.w	ip, ip, #7
90022552:	ea43 0c0c 	orr.w	ip, r3, ip
90022556:	ea4c 0202 	orr.w	r2, ip, r2
9002255a:	f8a8 2000 	strh.w	r2, [r8]
9002255e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
90022560:	f108 0802 	add.w	r8, r8, #2
90022564:	f10b 3bff 	add.w	fp, fp, #4294967295
90022568:	441c      	add	r4, r3
9002256a:	9b24      	ldr	r3, [sp, #144]	; 0x90
9002256c:	441e      	add	r6, r3
9002256e:	e6b9      	b.n	900222e4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
90022570:	24021c1c 	.word	0x24021c1c
90022574:	2800      	cmp	r0, #0
90022576:	d0ba      	beq.n	900224ee <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42e>
90022578:	9d0e      	ldr	r5, [sp, #56]	; 0x38
9002257a:	442b      	add	r3, r5
9002257c:	ea4f 0c53 	mov.w	ip, r3, lsr #1
90022580:	07db      	lsls	r3, r3, #31
90022582:	f817 c00c 	ldrb.w	ip, [r7, ip]
90022586:	bf54      	ite	pl
90022588:	f00c 0c0f 	andpl.w	ip, ip, #15
9002258c:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
90022590:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
90022594:	fa5f f38c 	uxtb.w	r3, ip
90022598:	930c      	str	r3, [sp, #48]	; 0x30
9002259a:	e7a8      	b.n	900224ee <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42e>
9002259c:	f8b8 e000 	ldrh.w	lr, [r8]
900225a0:	fa1f fa83 	uxth.w	sl, r3
900225a4:	f3c2 4107 	ubfx	r1, r2, #16, #8
900225a8:	43db      	mvns	r3, r3
900225aa:	ea4f 202e 	mov.w	r0, lr, asr #8
900225ae:	fb11 f10a 	smulbb	r1, r1, sl
900225b2:	b2db      	uxtb	r3, r3
900225b4:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
900225b8:	b2d2      	uxtb	r2, r2
900225ba:	fa5f fc8c 	uxtb.w	ip, ip
900225be:	fb00 1003 	mla	r0, r0, r3, r1
900225c2:	ea4f 01ee 	mov.w	r1, lr, asr #3
900225c6:	fb12 f20a 	smulbb	r2, r2, sl
900225ca:	ea4f 0ece 	mov.w	lr, lr, lsl #3
900225ce:	b280      	uxth	r0, r0
900225d0:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
900225d4:	fb1c fc0a 	smulbb	ip, ip, sl
900225d8:	fa5f fe8e 	uxtb.w	lr, lr
900225dc:	fb0e 2203 	mla	r2, lr, r3, r2
900225e0:	fb01 cc03 	mla	ip, r1, r3, ip
900225e4:	1c43      	adds	r3, r0, #1
900225e6:	b292      	uxth	r2, r2
900225e8:	eb03 2010 	add.w	r0, r3, r0, lsr #8
900225ec:	1c51      	adds	r1, r2, #1
900225ee:	fa1f fc8c 	uxth.w	ip, ip
900225f2:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
900225f6:	eb01 2112 	add.w	r1, r1, r2, lsr #8
900225fa:	f3c1 21c4 	ubfx	r1, r1, #11, #5
900225fe:	4308      	orrs	r0, r1
90022600:	f10c 0101 	add.w	r1, ip, #1
90022604:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
90022608:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
9002260c:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
90022610:	ea40 000c 	orr.w	r0, r0, ip
90022614:	f8a8 0000 	strh.w	r0, [r8]
90022618:	e7a1      	b.n	9002255e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
9002261a:	b017      	add	sp, #92	; 0x5c
9002261c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

90022620 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>:
90022620:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
90022624:	e9dd 050a 	ldrd	r0, r5, [sp, #40]	; 0x28
90022628:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
9002262c:	2d00      	cmp	r5, #0
9002262e:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
90022632:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
90022636:	fb05 0e03 	mla	lr, r5, r3, r0
9002263a:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
9002263e:	f2c0 80b0 	blt.w	900227a2 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x182>
90022642:	45a9      	cmp	r9, r5
90022644:	f340 80ad 	ble.w	900227a2 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x182>
90022648:	2800      	cmp	r0, #0
9002264a:	f2c0 80a8 	blt.w	9002279e <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17e>
9002264e:	4580      	cmp	r8, r0
90022650:	f340 80a5 	ble.w	9002279e <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17e>
90022654:	ea4f 045e 	mov.w	r4, lr, lsr #1
90022658:	f01e 0f01 	tst.w	lr, #1
9002265c:	5d16      	ldrb	r6, [r2, r4]
9002265e:	bf0c      	ite	eq
90022660:	f006 060f 	andeq.w	r6, r6, #15
90022664:	1136      	asrne	r6, r6, #4
90022666:	eb06 1606 	add.w	r6, r6, r6, lsl #4
9002266a:	b2f6      	uxtb	r6, r6
9002266c:	1c44      	adds	r4, r0, #1
9002266e:	f100 809b 	bmi.w	900227a8 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x188>
90022672:	45a0      	cmp	r8, r4
90022674:	f340 8098 	ble.w	900227a8 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x188>
90022678:	2f00      	cmp	r7, #0
9002267a:	f000 8097 	beq.w	900227ac <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x18c>
9002267e:	f10e 0a01 	add.w	sl, lr, #1
90022682:	ea4f 045a 	mov.w	r4, sl, lsr #1
90022686:	f01a 0f01 	tst.w	sl, #1
9002268a:	5d14      	ldrb	r4, [r2, r4]
9002268c:	bf0c      	ite	eq
9002268e:	f004 040f 	andeq.w	r4, r4, #15
90022692:	1124      	asrne	r4, r4, #4
90022694:	eb04 1404 	add.w	r4, r4, r4, lsl #4
90022698:	b2e4      	uxtb	r4, r4
9002269a:	3501      	adds	r5, #1
9002269c:	f100 808a 	bmi.w	900227b4 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x194>
900226a0:	45a9      	cmp	r9, r5
900226a2:	f340 8087 	ble.w	900227b4 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x194>
900226a6:	f1bc 0f00 	cmp.w	ip, #0
900226aa:	f000 8086 	beq.w	900227ba <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x19a>
900226ae:	2800      	cmp	r0, #0
900226b0:	db7e      	blt.n	900227b0 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x190>
900226b2:	4580      	cmp	r8, r0
900226b4:	dd7c      	ble.n	900227b0 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x190>
900226b6:	eb03 090e 	add.w	r9, r3, lr
900226ba:	ea4f 0559 	mov.w	r5, r9, lsr #1
900226be:	f019 0f01 	tst.w	r9, #1
900226c2:	5d55      	ldrb	r5, [r2, r5]
900226c4:	bf0c      	ite	eq
900226c6:	f005 050f 	andeq.w	r5, r5, #15
900226ca:	112d      	asrne	r5, r5, #4
900226cc:	eb05 1505 	add.w	r5, r5, r5, lsl #4
900226d0:	b2ed      	uxtb	r5, r5
900226d2:	3001      	adds	r0, #1
900226d4:	d474      	bmi.n	900227c0 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a0>
900226d6:	4580      	cmp	r8, r0
900226d8:	dd72      	ble.n	900227c0 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a0>
900226da:	2f00      	cmp	r7, #0
900226dc:	d072      	beq.n	900227c4 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a4>
900226de:	3301      	adds	r3, #1
900226e0:	449e      	add	lr, r3
900226e2:	ea4f 035e 	mov.w	r3, lr, lsr #1
900226e6:	f01e 0f01 	tst.w	lr, #1
900226ea:	5cd0      	ldrb	r0, [r2, r3]
900226ec:	bf0c      	ite	eq
900226ee:	f000 000f 	andeq.w	r0, r0, #15
900226f2:	1100      	asrne	r0, r0, #4
900226f4:	eb00 1000 	add.w	r0, r0, r0, lsl #4
900226f8:	b2c3      	uxtb	r3, r0
900226fa:	b2ba      	uxth	r2, r7
900226fc:	fa1f fc8c 	uxth.w	ip, ip
90022700:	fb02 f00c 	mul.w	r0, r2, ip
90022704:	0112      	lsls	r2, r2, #4
90022706:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
9002270a:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
9002270e:	1a12      	subs	r2, r2, r0
90022710:	fa1f fc8c 	uxth.w	ip, ip
90022714:	b292      	uxth	r2, r2
90022716:	eba7 070c 	sub.w	r7, r7, ip
9002271a:	4362      	muls	r2, r4
9002271c:	b2bf      	uxth	r7, r7
9002271e:	fb06 2207 	mla	r2, r6, r7, r2
90022722:	fb0c 2505 	mla	r5, ip, r5, r2
90022726:	fb00 5303 	mla	r3, r0, r3, r5
9002272a:	f3c3 2307 	ubfx	r3, r3, #8, #8
9002272e:	b3a3      	cbz	r3, 9002279a <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17a>
90022730:	4a25      	ldr	r2, [pc, #148]	; (900227c8 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a8>)
90022732:	880e      	ldrh	r6, [r1, #0]
90022734:	6815      	ldr	r5, [r2, #0]
90022736:	b29a      	uxth	r2, r3
90022738:	1234      	asrs	r4, r6, #8
9002273a:	43db      	mvns	r3, r3
9002273c:	f3c5 4007 	ubfx	r0, r5, #16, #8
90022740:	f3c5 2707 	ubfx	r7, r5, #8, #8
90022744:	b2db      	uxtb	r3, r3
90022746:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
9002274a:	fb10 f002 	smulbb	r0, r0, r2
9002274e:	b2ed      	uxtb	r5, r5
90022750:	fb17 f702 	smulbb	r7, r7, r2
90022754:	fb04 0403 	mla	r4, r4, r3, r0
90022758:	10f0      	asrs	r0, r6, #3
9002275a:	fb15 f202 	smulbb	r2, r5, r2
9002275e:	00f6      	lsls	r6, r6, #3
90022760:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
90022764:	b2a4      	uxth	r4, r4
90022766:	b2f6      	uxtb	r6, r6
90022768:	fb00 7003 	mla	r0, r0, r3, r7
9002276c:	fb06 2303 	mla	r3, r6, r3, r2
90022770:	b280      	uxth	r0, r0
90022772:	b29a      	uxth	r2, r3
90022774:	1c63      	adds	r3, r4, #1
90022776:	eb03 2414 	add.w	r4, r3, r4, lsr #8
9002277a:	1c53      	adds	r3, r2, #1
9002277c:	eb03 2312 	add.w	r3, r3, r2, lsr #8
90022780:	1c42      	adds	r2, r0, #1
90022782:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
90022786:	eb02 2010 	add.w	r0, r2, r0, lsr #8
9002278a:	f3c3 23c4 	ubfx	r3, r3, #11, #5
9002278e:	0940      	lsrs	r0, r0, #5
90022790:	4323      	orrs	r3, r4
90022792:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
90022796:	4303      	orrs	r3, r0
90022798:	800b      	strh	r3, [r1, #0]
9002279a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
9002279e:	2600      	movs	r6, #0
900227a0:	e764      	b.n	9002266c <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x4c>
900227a2:	2400      	movs	r4, #0
900227a4:	4626      	mov	r6, r4
900227a6:	e778      	b.n	9002269a <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
900227a8:	2400      	movs	r4, #0
900227aa:	e776      	b.n	9002269a <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
900227ac:	463c      	mov	r4, r7
900227ae:	e774      	b.n	9002269a <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
900227b0:	2500      	movs	r5, #0
900227b2:	e78e      	b.n	900226d2 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xb2>
900227b4:	2300      	movs	r3, #0
900227b6:	461d      	mov	r5, r3
900227b8:	e79f      	b.n	900226fa <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
900227ba:	4663      	mov	r3, ip
900227bc:	4665      	mov	r5, ip
900227be:	e79c      	b.n	900226fa <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
900227c0:	2300      	movs	r3, #0
900227c2:	e79a      	b.n	900226fa <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
900227c4:	463b      	mov	r3, r7
900227c6:	e798      	b.n	900226fa <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
900227c8:	24021c1c 	.word	0x24021c1c

900227cc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
900227cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900227d0:	b093      	sub	sp, #76	; 0x4c
900227d2:	461d      	mov	r5, r3
900227d4:	920c      	str	r2, [sp, #48]	; 0x30
900227d6:	9a21      	ldr	r2, [sp, #132]	; 0x84
900227d8:	9011      	str	r0, [sp, #68]	; 0x44
900227da:	9107      	str	r1, [sp, #28]
900227dc:	6850      	ldr	r0, [r2, #4]
900227de:	6812      	ldr	r2, [r2, #0]
900227e0:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
900227e4:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	; 0x74
900227e8:	fb00 1303 	mla	r3, r0, r3, r1
900227ec:	eb02 0943 	add.w	r9, r2, r3, lsl #1
900227f0:	9b24      	ldr	r3, [sp, #144]	; 0x90
900227f2:	689b      	ldr	r3, [r3, #8]
900227f4:	3301      	adds	r3, #1
900227f6:	f023 0301 	bic.w	r3, r3, #1
900227fa:	9306      	str	r3, [sp, #24]
900227fc:	9b24      	ldr	r3, [sp, #144]	; 0x90
900227fe:	681f      	ldr	r7, [r3, #0]
90022800:	9b07      	ldr	r3, [sp, #28]
90022802:	2b00      	cmp	r3, #0
90022804:	dc03      	bgt.n	9002280e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
90022806:	9b0c      	ldr	r3, [sp, #48]	; 0x30
90022808:	2b00      	cmp	r3, #0
9002280a:	f340 8267 	ble.w	90022cdc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x510>
9002280e:	9b24      	ldr	r3, [sp, #144]	; 0x90
90022810:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
90022814:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
90022818:	1e48      	subs	r0, r1, #1
9002281a:	f102 3cff 	add.w	ip, r2, #4294967295
9002281e:	2d00      	cmp	r5, #0
90022820:	f340 80b7 	ble.w	90022992 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
90022824:	ea5f 4e24 	movs.w	lr, r4, asr #16
90022828:	ea4f 4326 	mov.w	r3, r6, asr #16
9002282c:	d406      	bmi.n	9002283c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
9002282e:	4586      	cmp	lr, r0
90022830:	da04      	bge.n	9002283c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
90022832:	2b00      	cmp	r3, #0
90022834:	db02      	blt.n	9002283c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
90022836:	4563      	cmp	r3, ip
90022838:	f2c0 80ac 	blt.w	90022994 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
9002283c:	f11e 0e01 	adds.w	lr, lr, #1
90022840:	f100 809f 	bmi.w	90022982 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
90022844:	4571      	cmp	r1, lr
90022846:	f2c0 809c 	blt.w	90022982 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
9002284a:	3301      	adds	r3, #1
9002284c:	f100 8099 	bmi.w	90022982 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
90022850:	429a      	cmp	r2, r3
90022852:	f2c0 8096 	blt.w	90022982 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
90022856:	46c8      	mov	r8, r9
90022858:	f9bd a018 	ldrsh.w	sl, [sp, #24]
9002285c:	9509      	str	r5, [sp, #36]	; 0x24
9002285e:	9b09      	ldr	r3, [sp, #36]	; 0x24
90022860:	2b00      	cmp	r3, #0
90022862:	f340 80b5 	ble.w	900229d0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
90022866:	f3c4 3303 	ubfx	r3, r4, #12, #4
9002286a:	1430      	asrs	r0, r6, #16
9002286c:	f3c6 3103 	ubfx	r1, r6, #12, #4
90022870:	9308      	str	r3, [sp, #32]
90022872:	9b24      	ldr	r3, [sp, #144]	; 0x90
90022874:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
90022878:	1423      	asrs	r3, r4, #16
9002287a:	f100 813f 	bmi.w	90022afc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
9002287e:	f10c 3bff 	add.w	fp, ip, #4294967295
90022882:	455b      	cmp	r3, fp
90022884:	f280 813a 	bge.w	90022afc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
90022888:	2800      	cmp	r0, #0
9002288a:	f2c0 8137 	blt.w	90022afc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
9002288e:	f10e 3bff 	add.w	fp, lr, #4294967295
90022892:	4558      	cmp	r0, fp
90022894:	f280 8132 	bge.w	90022afc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
90022898:	9a06      	ldr	r2, [sp, #24]
9002289a:	fb00 3302 	mla	r3, r0, r2, r3
9002289e:	0858      	lsrs	r0, r3, #1
900228a0:	07da      	lsls	r2, r3, #31
900228a2:	9a08      	ldr	r2, [sp, #32]
900228a4:	f817 c000 	ldrb.w	ip, [r7, r0]
900228a8:	bf54      	ite	pl
900228aa:	f00c 0c0f 	andpl.w	ip, ip, #15
900228ae:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
900228b2:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
900228b6:	fa5f fc8c 	uxtb.w	ip, ip
900228ba:	2a00      	cmp	r2, #0
900228bc:	f000 80cc 	beq.w	90022a58 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
900228c0:	1c58      	adds	r0, r3, #1
900228c2:	ea4f 0e50 	mov.w	lr, r0, lsr #1
900228c6:	07c0      	lsls	r0, r0, #31
900228c8:	f817 e00e 	ldrb.w	lr, [r7, lr]
900228cc:	bf54      	ite	pl
900228ce:	f00e 0e0f 	andpl.w	lr, lr, #15
900228d2:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
900228d6:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
900228da:	fa5f fe8e 	uxtb.w	lr, lr
900228de:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
900228e2:	b1b9      	cbz	r1, 90022914 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
900228e4:	4453      	add	r3, sl
900228e6:	0858      	lsrs	r0, r3, #1
900228e8:	07da      	lsls	r2, r3, #31
900228ea:	5c38      	ldrb	r0, [r7, r0]
900228ec:	bf54      	ite	pl
900228ee:	f000 000f 	andpl.w	r0, r0, #15
900228f2:	1100      	asrmi	r0, r0, #4
900228f4:	eb00 1000 	add.w	r0, r0, r0, lsl #4
900228f8:	b2c0      	uxtb	r0, r0
900228fa:	900a      	str	r0, [sp, #40]	; 0x28
900228fc:	1c58      	adds	r0, r3, #1
900228fe:	0843      	lsrs	r3, r0, #1
90022900:	07c2      	lsls	r2, r0, #31
90022902:	5cfb      	ldrb	r3, [r7, r3]
90022904:	bf54      	ite	pl
90022906:	f003 030f 	andpl.w	r3, r3, #15
9002290a:	111b      	asrmi	r3, r3, #4
9002290c:	eb03 1303 	add.w	r3, r3, r3, lsl #4
90022910:	b2db      	uxtb	r3, r3
90022912:	930e      	str	r3, [sp, #56]	; 0x38
90022914:	f8bd 2020 	ldrh.w	r2, [sp, #32]
90022918:	b289      	uxth	r1, r1
9002291a:	fb02 f301 	mul.w	r3, r2, r1
9002291e:	0112      	lsls	r2, r2, #4
90022920:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
90022924:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
90022928:	1ad2      	subs	r2, r2, r3
9002292a:	b289      	uxth	r1, r1
9002292c:	b292      	uxth	r2, r2
9002292e:	1a40      	subs	r0, r0, r1
90022930:	fa1f fe80 	uxth.w	lr, r0
90022934:	980d      	ldr	r0, [sp, #52]	; 0x34
90022936:	4342      	muls	r2, r0
90022938:	fb0c 2c0e 	mla	ip, ip, lr, r2
9002293c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
9002293e:	fb01 c102 	mla	r1, r1, r2, ip
90022942:	9a0e      	ldr	r2, [sp, #56]	; 0x38
90022944:	fb03 1302 	mla	r3, r3, r2, r1
90022948:	f3c3 2307 	ubfx	r3, r3, #8, #8
9002294c:	2bff      	cmp	r3, #255	; 0xff
9002294e:	f040 8094 	bne.w	90022a7a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ae>
90022952:	4bbf      	ldr	r3, [pc, #764]	; (90022c50 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
90022954:	681a      	ldr	r2, [r3, #0]
90022956:	4bbf      	ldr	r3, [pc, #764]	; (90022c54 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>)
90022958:	0951      	lsrs	r1, r2, #5
9002295a:	ea03 2312 	and.w	r3, r3, r2, lsr #8
9002295e:	f3c2 02c4 	ubfx	r2, r2, #3, #5
90022962:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
90022966:	430b      	orrs	r3, r1
90022968:	4313      	orrs	r3, r2
9002296a:	f8a8 3000 	strh.w	r3, [r8]
9002296e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
90022970:	f108 0802 	add.w	r8, r8, #2
90022974:	441c      	add	r4, r3
90022976:	9b20      	ldr	r3, [sp, #128]	; 0x80
90022978:	441e      	add	r6, r3
9002297a:	9b09      	ldr	r3, [sp, #36]	; 0x24
9002297c:	3b01      	subs	r3, #1
9002297e:	9309      	str	r3, [sp, #36]	; 0x24
90022980:	e76d      	b.n	9002285e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
90022982:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
90022984:	3d01      	subs	r5, #1
90022986:	f109 0902 	add.w	r9, r9, #2
9002298a:	441c      	add	r4, r3
9002298c:	9b20      	ldr	r3, [sp, #128]	; 0x80
9002298e:	441e      	add	r6, r3
90022990:	e745      	b.n	9002281e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
90022992:	d021      	beq.n	900229d8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
90022994:	1e6b      	subs	r3, r5, #1
90022996:	981f      	ldr	r0, [sp, #124]	; 0x7c
90022998:	fb00 4003 	mla	r0, r0, r3, r4
9002299c:	1400      	asrs	r0, r0, #16
9002299e:	f53f af5a 	bmi.w	90022856 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
900229a2:	3901      	subs	r1, #1
900229a4:	4288      	cmp	r0, r1
900229a6:	f6bf af56 	bge.w	90022856 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
900229aa:	9920      	ldr	r1, [sp, #128]	; 0x80
900229ac:	fb01 6303 	mla	r3, r1, r3, r6
900229b0:	141b      	asrs	r3, r3, #16
900229b2:	f53f af50 	bmi.w	90022856 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
900229b6:	3a01      	subs	r2, #1
900229b8:	4293      	cmp	r3, r2
900229ba:	f6bf af4c 	bge.w	90022856 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
900229be:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
900229c2:	46a8      	mov	r8, r5
900229c4:	46ce      	mov	lr, r9
900229c6:	9308      	str	r3, [sp, #32]
900229c8:	f1b8 0f00 	cmp.w	r8, #0
900229cc:	f300 80b6 	bgt.w	90022b3c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
900229d0:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
900229d4:	eb09 0945 	add.w	r9, r9, r5, lsl #1
900229d8:	9b07      	ldr	r3, [sp, #28]
900229da:	2b00      	cmp	r3, #0
900229dc:	f340 817e 	ble.w	90022cdc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x510>
900229e0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
900229e4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
900229e6:	ee30 0a04 	vadd.f32	s0, s0, s8
900229ea:	ee70 0aa4 	vadd.f32	s1, s1, s9
900229ee:	eef0 6a62 	vmov.f32	s13, s5
900229f2:	eec7 7a00 	vdiv.f32	s15, s14, s0
900229f6:	ee31 1a05 	vadd.f32	s2, s2, s10
900229fa:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
900229fe:	ee16 4a90 	vmov	r4, s13
90022a02:	eef0 6a43 	vmov.f32	s13, s6
90022a06:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
90022a0a:	ee16 6a90 	vmov	r6, s13
90022a0e:	ee20 7aa7 	vmul.f32	s14, s1, s15
90022a12:	ee61 7a27 	vmul.f32	s15, s2, s15
90022a16:	ee77 2a62 	vsub.f32	s5, s14, s5
90022a1a:	ee37 3ac3 	vsub.f32	s6, s15, s6
90022a1e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
90022a22:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
90022a26:	ee12 2a90 	vmov	r2, s5
90022a2a:	eef0 2a47 	vmov.f32	s5, s14
90022a2e:	fb92 f3f3 	sdiv	r3, r2, r3
90022a32:	ee13 2a10 	vmov	r2, s6
90022a36:	931f      	str	r3, [sp, #124]	; 0x7c
90022a38:	9b1c      	ldr	r3, [sp, #112]	; 0x70
90022a3a:	eeb0 3a67 	vmov.f32	s6, s15
90022a3e:	fb92 f3f3 	sdiv	r3, r2, r3
90022a42:	9320      	str	r3, [sp, #128]	; 0x80
90022a44:	9b07      	ldr	r3, [sp, #28]
90022a46:	9a0c      	ldr	r2, [sp, #48]	; 0x30
90022a48:	3b01      	subs	r3, #1
90022a4a:	9307      	str	r3, [sp, #28]
90022a4c:	bf08      	it	eq
90022a4e:	4615      	moveq	r5, r2
90022a50:	9b1c      	ldr	r3, [sp, #112]	; 0x70
90022a52:	bf18      	it	ne
90022a54:	461d      	movne	r5, r3
90022a56:	e6d3      	b.n	90022800 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
90022a58:	2900      	cmp	r1, #0
90022a5a:	f43f af5b 	beq.w	90022914 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
90022a5e:	eb0a 0003 	add.w	r0, sl, r3
90022a62:	0843      	lsrs	r3, r0, #1
90022a64:	07c0      	lsls	r0, r0, #31
90022a66:	5cfb      	ldrb	r3, [r7, r3]
90022a68:	bf54      	ite	pl
90022a6a:	f003 030f 	andpl.w	r3, r3, #15
90022a6e:	111b      	asrmi	r3, r3, #4
90022a70:	eb03 1303 	add.w	r3, r3, r3, lsl #4
90022a74:	b2db      	uxtb	r3, r3
90022a76:	930a      	str	r3, [sp, #40]	; 0x28
90022a78:	e74c      	b.n	90022914 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
90022a7a:	2b00      	cmp	r3, #0
90022a7c:	f43f af77 	beq.w	9002296e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
90022a80:	4a73      	ldr	r2, [pc, #460]	; (90022c50 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
90022a82:	fa1f fe83 	uxth.w	lr, r3
90022a86:	f8b8 c000 	ldrh.w	ip, [r8]
90022a8a:	43db      	mvns	r3, r3
90022a8c:	6810      	ldr	r0, [r2, #0]
90022a8e:	ea4f 212c 	mov.w	r1, ip, asr #8
90022a92:	f3c0 4207 	ubfx	r2, r0, #16, #8
90022a96:	b2db      	uxtb	r3, r3
90022a98:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
90022a9c:	f3c0 2b07 	ubfx	fp, r0, #8, #8
90022aa0:	fb12 f20e 	smulbb	r2, r2, lr
90022aa4:	b2c0      	uxtb	r0, r0
90022aa6:	fb1b fb0e 	smulbb	fp, fp, lr
90022aaa:	fb01 2103 	mla	r1, r1, r3, r2
90022aae:	ea4f 02ec 	mov.w	r2, ip, asr #3
90022ab2:	fb10 fe0e 	smulbb	lr, r0, lr
90022ab6:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
90022aba:	b289      	uxth	r1, r1
90022abc:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
90022ac0:	fa5f fc8c 	uxtb.w	ip, ip
90022ac4:	fb02 b203 	mla	r2, r2, r3, fp
90022ac8:	1c48      	adds	r0, r1, #1
90022aca:	fb0c e303 	mla	r3, ip, r3, lr
90022ace:	b292      	uxth	r2, r2
90022ad0:	b29b      	uxth	r3, r3
90022ad2:	eb00 2111 	add.w	r1, r0, r1, lsr #8
90022ad6:	f102 0b01 	add.w	fp, r2, #1
90022ada:	f401 4078 	and.w	r0, r1, #63488	; 0xf800
90022ade:	1c59      	adds	r1, r3, #1
90022ae0:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
90022ae4:	eb01 2113 	add.w	r1, r1, r3, lsr #8
90022ae8:	0952      	lsrs	r2, r2, #5
90022aea:	f3c1 21c4 	ubfx	r1, r1, #11, #5
90022aee:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
90022af2:	4301      	orrs	r1, r0
90022af4:	4311      	orrs	r1, r2
90022af6:	f8a8 1000 	strh.w	r1, [r8]
90022afa:	e738      	b.n	9002296e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
90022afc:	f113 0b01 	adds.w	fp, r3, #1
90022b00:	f53f af35 	bmi.w	9002296e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
90022b04:	45dc      	cmp	ip, fp
90022b06:	f6ff af32 	blt.w	9002296e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
90022b0a:	f110 0b01 	adds.w	fp, r0, #1
90022b0e:	f53f af2e 	bmi.w	9002296e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
90022b12:	45de      	cmp	lr, fp
90022b14:	f6ff af2b 	blt.w	9002296e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
90022b18:	9302      	str	r3, [sp, #8]
90022b1a:	fa0f f38e 	sxth.w	r3, lr
90022b1e:	9a08      	ldr	r2, [sp, #32]
90022b20:	9301      	str	r3, [sp, #4]
90022b22:	fa0f f38c 	sxth.w	r3, ip
90022b26:	9105      	str	r1, [sp, #20]
90022b28:	4641      	mov	r1, r8
90022b2a:	9300      	str	r3, [sp, #0]
90022b2c:	4653      	mov	r3, sl
90022b2e:	e9cd 0203 	strd	r0, r2, [sp, #12]
90022b32:	463a      	mov	r2, r7
90022b34:	9811      	ldr	r0, [sp, #68]	; 0x44
90022b36:	f7ff fd73 	bl	90022620 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>
90022b3a:	e718      	b.n	9002296e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
90022b3c:	1422      	asrs	r2, r4, #16
90022b3e:	9906      	ldr	r1, [sp, #24]
90022b40:	1433      	asrs	r3, r6, #16
90022b42:	f3c4 3003 	ubfx	r0, r4, #12, #4
90022b46:	f3c6 3c03 	ubfx	ip, r6, #12, #4
90022b4a:	fb01 2303 	mla	r3, r1, r3, r2
90022b4e:	085a      	lsrs	r2, r3, #1
90022b50:	07d9      	lsls	r1, r3, #31
90022b52:	5cba      	ldrb	r2, [r7, r2]
90022b54:	bf54      	ite	pl
90022b56:	f002 020f 	andpl.w	r2, r2, #15
90022b5a:	1112      	asrmi	r2, r2, #4
90022b5c:	eb02 1202 	add.w	r2, r2, r2, lsl #4
90022b60:	b2d2      	uxtb	r2, r2
90022b62:	2800      	cmp	r0, #0
90022b64:	d063      	beq.n	90022c2e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x462>
90022b66:	f103 0a01 	add.w	sl, r3, #1
90022b6a:	ea4f 015a 	mov.w	r1, sl, lsr #1
90022b6e:	f01a 0f01 	tst.w	sl, #1
90022b72:	5c79      	ldrb	r1, [r7, r1]
90022b74:	bf0c      	ite	eq
90022b76:	f001 010f 	andeq.w	r1, r1, #15
90022b7a:	1109      	asrne	r1, r1, #4
90022b7c:	eb01 1101 	add.w	r1, r1, r1, lsl #4
90022b80:	b2c9      	uxtb	r1, r1
90022b82:	910f      	str	r1, [sp, #60]	; 0x3c
90022b84:	f1bc 0f00 	cmp.w	ip, #0
90022b88:	d01a      	beq.n	90022bc0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
90022b8a:	9908      	ldr	r1, [sp, #32]
90022b8c:	440b      	add	r3, r1
90022b8e:	0859      	lsrs	r1, r3, #1
90022b90:	f013 0f01 	tst.w	r3, #1
90022b94:	f103 0301 	add.w	r3, r3, #1
90022b98:	5c79      	ldrb	r1, [r7, r1]
90022b9a:	bf0c      	ite	eq
90022b9c:	f001 010f 	andeq.w	r1, r1, #15
90022ba0:	1109      	asrne	r1, r1, #4
90022ba2:	eb01 1101 	add.w	r1, r1, r1, lsl #4
90022ba6:	b2c9      	uxtb	r1, r1
90022ba8:	910b      	str	r1, [sp, #44]	; 0x2c
90022baa:	0859      	lsrs	r1, r3, #1
90022bac:	07db      	lsls	r3, r3, #31
90022bae:	5c79      	ldrb	r1, [r7, r1]
90022bb0:	bf54      	ite	pl
90022bb2:	f001 010f 	andpl.w	r1, r1, #15
90022bb6:	1109      	asrmi	r1, r1, #4
90022bb8:	eb01 1101 	add.w	r1, r1, r1, lsl #4
90022bbc:	b2c9      	uxtb	r1, r1
90022bbe:	9110      	str	r1, [sp, #64]	; 0x40
90022bc0:	b280      	uxth	r0, r0
90022bc2:	fa1f fc8c 	uxth.w	ip, ip
90022bc6:	fb00 f30c 	mul.w	r3, r0, ip
90022bca:	0100      	lsls	r0, r0, #4
90022bcc:	ebc3 1c0c 	rsb	ip, r3, ip, lsl #4
90022bd0:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
90022bd4:	1ac0      	subs	r0, r0, r3
90022bd6:	fa1f fc8c 	uxth.w	ip, ip
90022bda:	b280      	uxth	r0, r0
90022bdc:	eba1 010c 	sub.w	r1, r1, ip
90022be0:	fa1f fa81 	uxth.w	sl, r1
90022be4:	990f      	ldr	r1, [sp, #60]	; 0x3c
90022be6:	4348      	muls	r0, r1
90022be8:	990b      	ldr	r1, [sp, #44]	; 0x2c
90022bea:	fb02 020a 	mla	r2, r2, sl, r0
90022bee:	fb0c 2c01 	mla	ip, ip, r1, r2
90022bf2:	9a10      	ldr	r2, [sp, #64]	; 0x40
90022bf4:	fb03 c302 	mla	r3, r3, r2, ip
90022bf8:	f3c3 2307 	ubfx	r3, r3, #8, #8
90022bfc:	2bff      	cmp	r3, #255	; 0xff
90022bfe:	d12b      	bne.n	90022c58 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48c>
90022c00:	4b13      	ldr	r3, [pc, #76]	; (90022c50 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
90022c02:	681a      	ldr	r2, [r3, #0]
90022c04:	4b13      	ldr	r3, [pc, #76]	; (90022c54 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>)
90022c06:	0951      	lsrs	r1, r2, #5
90022c08:	ea03 2312 	and.w	r3, r3, r2, lsr #8
90022c0c:	f3c2 02c4 	ubfx	r2, r2, #3, #5
90022c10:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
90022c14:	430b      	orrs	r3, r1
90022c16:	4313      	orrs	r3, r2
90022c18:	f8ae 3000 	strh.w	r3, [lr]
90022c1c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
90022c1e:	f10e 0e02 	add.w	lr, lr, #2
90022c22:	f108 38ff 	add.w	r8, r8, #4294967295
90022c26:	441c      	add	r4, r3
90022c28:	9b20      	ldr	r3, [sp, #128]	; 0x80
90022c2a:	441e      	add	r6, r3
90022c2c:	e6cc      	b.n	900229c8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
90022c2e:	f1bc 0f00 	cmp.w	ip, #0
90022c32:	d0c5      	beq.n	90022bc0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
90022c34:	9908      	ldr	r1, [sp, #32]
90022c36:	440b      	add	r3, r1
90022c38:	0859      	lsrs	r1, r3, #1
90022c3a:	07db      	lsls	r3, r3, #31
90022c3c:	5c79      	ldrb	r1, [r7, r1]
90022c3e:	bf54      	ite	pl
90022c40:	f001 010f 	andpl.w	r1, r1, #15
90022c44:	1109      	asrmi	r1, r1, #4
90022c46:	eb01 1101 	add.w	r1, r1, r1, lsl #4
90022c4a:	b2c9      	uxtb	r1, r1
90022c4c:	910b      	str	r1, [sp, #44]	; 0x2c
90022c4e:	e7b7      	b.n	90022bc0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
90022c50:	24021c1c 	.word	0x24021c1c
90022c54:	fffff800 	.word	0xfffff800
90022c58:	2b00      	cmp	r3, #0
90022c5a:	d0df      	beq.n	90022c1c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x450>
90022c5c:	4a21      	ldr	r2, [pc, #132]	; (90022ce4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x518>)
90022c5e:	fa1f fa83 	uxth.w	sl, r3
90022c62:	f8be c000 	ldrh.w	ip, [lr]
90022c66:	43db      	mvns	r3, r3
90022c68:	6810      	ldr	r0, [r2, #0]
90022c6a:	ea4f 212c 	mov.w	r1, ip, asr #8
90022c6e:	f3c0 4207 	ubfx	r2, r0, #16, #8
90022c72:	b2db      	uxtb	r3, r3
90022c74:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
90022c78:	f3c0 2b07 	ubfx	fp, r0, #8, #8
90022c7c:	fb12 f20a 	smulbb	r2, r2, sl
90022c80:	b2c0      	uxtb	r0, r0
90022c82:	fb1b fb0a 	smulbb	fp, fp, sl
90022c86:	fb01 2103 	mla	r1, r1, r3, r2
90022c8a:	ea4f 02ec 	mov.w	r2, ip, asr #3
90022c8e:	fb10 f00a 	smulbb	r0, r0, sl
90022c92:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
90022c96:	b289      	uxth	r1, r1
90022c98:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
90022c9c:	fa5f fc8c 	uxtb.w	ip, ip
90022ca0:	fb02 b203 	mla	r2, r2, r3, fp
90022ca4:	fb0c 0003 	mla	r0, ip, r3, r0
90022ca8:	1c4b      	adds	r3, r1, #1
90022caa:	b292      	uxth	r2, r2
90022cac:	b280      	uxth	r0, r0
90022cae:	eb03 2111 	add.w	r1, r3, r1, lsr #8
90022cb2:	f100 0b01 	add.w	fp, r0, #1
90022cb6:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
90022cba:	eb0b 2b10 	add.w	fp, fp, r0, lsr #8
90022cbe:	f3cb 2bc4 	ubfx	fp, fp, #11, #5
90022cc2:	ea4b 0101 	orr.w	r1, fp, r1
90022cc6:	f102 0b01 	add.w	fp, r2, #1
90022cca:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
90022cce:	0952      	lsrs	r2, r2, #5
90022cd0:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
90022cd4:	4311      	orrs	r1, r2
90022cd6:	f8ae 1000 	strh.w	r1, [lr]
90022cda:	e79f      	b.n	90022c1c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x450>
90022cdc:	b013      	add	sp, #76	; 0x4c
90022cde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90022ce2:	bf00      	nop
90022ce4:	24021c1c 	.word	0x24021c1c

90022ce8 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>:
90022ce8:	b570      	push	{r4, r5, r6, lr}
90022cea:	1208      	asrs	r0, r1, #8
90022cec:	f8bd 5010 	ldrh.w	r5, [sp, #16]
90022cf0:	b29e      	uxth	r6, r3
90022cf2:	1213      	asrs	r3, r2, #8
90022cf4:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
90022cf8:	10cc      	asrs	r4, r1, #3
90022cfa:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
90022cfe:	00c9      	lsls	r1, r1, #3
90022d00:	fb10 f006 	smulbb	r0, r0, r6
90022d04:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
90022d08:	fb13 f305 	smulbb	r3, r3, r5
90022d0c:	fb14 f406 	smulbb	r4, r4, r6
90022d10:	4418      	add	r0, r3
90022d12:	10d3      	asrs	r3, r2, #3
90022d14:	00d2      	lsls	r2, r2, #3
90022d16:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
90022d1a:	b280      	uxth	r0, r0
90022d1c:	b2d2      	uxtb	r2, r2
90022d1e:	fb13 f305 	smulbb	r3, r3, r5
90022d22:	fb12 f205 	smulbb	r2, r2, r5
90022d26:	441c      	add	r4, r3
90022d28:	b2cb      	uxtb	r3, r1
90022d2a:	fb13 f306 	smulbb	r3, r3, r6
90022d2e:	b2a4      	uxth	r4, r4
90022d30:	4413      	add	r3, r2
90022d32:	1c42      	adds	r2, r0, #1
90022d34:	b29b      	uxth	r3, r3
90022d36:	eb02 2010 	add.w	r0, r2, r0, lsr #8
90022d3a:	f400 4278 	and.w	r2, r0, #63488	; 0xf800
90022d3e:	1c58      	adds	r0, r3, #1
90022d40:	eb00 2013 	add.w	r0, r0, r3, lsr #8
90022d44:	f3c0 20c4 	ubfx	r0, r0, #11, #5
90022d48:	4310      	orrs	r0, r2
90022d4a:	1c62      	adds	r2, r4, #1
90022d4c:	eb02 2414 	add.w	r4, r2, r4, lsr #8
90022d50:	0964      	lsrs	r4, r4, #5
90022d52:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
90022d56:	4320      	orrs	r0, r4
90022d58:	bd70      	pop	{r4, r5, r6, pc}
	...

90022d5c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h>:
90022d5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90022d60:	b08f      	sub	sp, #60	; 0x3c
90022d62:	461c      	mov	r4, r3
90022d64:	460d      	mov	r5, r1
90022d66:	4616      	mov	r6, r2
90022d68:	f89d 7064 	ldrb.w	r7, [sp, #100]	; 0x64
90022d6c:	9004      	str	r0, [sp, #16]
90022d6e:	9b18      	ldr	r3, [sp, #96]	; 0x60
90022d70:	2f00      	cmp	r7, #0
90022d72:	f000 80f6 	beq.w	90022f62 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x206>
90022d76:	6820      	ldr	r0, [r4, #0]
90022d78:	aa0a      	add	r2, sp, #40	; 0x28
90022d7a:	6861      	ldr	r1, [r4, #4]
90022d7c:	f04f 0802 	mov.w	r8, #2
90022d80:	3604      	adds	r6, #4
90022d82:	c203      	stmia	r2!, {r0, r1}
90022d84:	6818      	ldr	r0, [r3, #0]
90022d86:	aa0c      	add	r2, sp, #48	; 0x30
90022d88:	6859      	ldr	r1, [r3, #4]
90022d8a:	c203      	stmia	r2!, {r0, r1}
90022d8c:	a80a      	add	r0, sp, #40	; 0x28
90022d8e:	f7f0 fa2f 	bl	900131f0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
90022d92:	4621      	mov	r1, r4
90022d94:	a80c      	add	r0, sp, #48	; 0x30
90022d96:	f7f0 fa53 	bl	90013240 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
90022d9a:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
90022d9e:	f9bd b036 	ldrsh.w	fp, [sp, #54]	; 0x36
90022da2:	f002 0301 	and.w	r3, r2, #1
90022da6:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
90022daa:	9306      	str	r3, [sp, #24]
90022dac:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
90022db0:	f003 0101 	and.w	r1, r3, #1
90022db4:	9105      	str	r1, [sp, #20]
90022db6:	9805      	ldr	r0, [sp, #20]
90022db8:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	; 0x32
90022dbc:	4403      	add	r3, r0
90022dbe:	fb01 2303 	mla	r3, r1, r3, r2
90022dc2:	fb93 f3f8 	sdiv	r3, r3, r8
90022dc6:	441d      	add	r5, r3
90022dc8:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
90022dcc:	441a      	add	r2, r3
90022dce:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
90022dd2:	4419      	add	r1, r3
90022dd4:	4b64      	ldr	r3, [pc, #400]	; (90022f68 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x20c>)
90022dd6:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
90022dda:	6818      	ldr	r0, [r3, #0]
90022ddc:	f8ad 1032 	strh.w	r1, [sp, #50]	; 0x32
90022de0:	6803      	ldr	r3, [r0, #0]
90022de2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90022de4:	4798      	blx	r3
90022de6:	4a61      	ldr	r2, [pc, #388]	; (90022f6c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x210>)
90022de8:	f9bd 4032 	ldrsh.w	r4, [sp, #50]	; 0x32
90022dec:	2fff      	cmp	r7, #255	; 0xff
90022dee:	8813      	ldrh	r3, [r2, #0]
90022df0:	4611      	mov	r1, r2
90022df2:	f9bd a030 	ldrsh.w	sl, [sp, #48]	; 0x30
90022df6:	fb03 fb0b 	mul.w	fp, r3, fp
90022dfa:	fb03 a404 	mla	r4, r3, r4, sl
90022dfe:	eb00 0444 	add.w	r4, r0, r4, lsl #1
90022e02:	d06b      	beq.n	90022edc <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x180>
90022e04:	f1c7 03ff 	rsb	r3, r7, #255	; 0xff
90022e08:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
90022e0c:	9303      	str	r3, [sp, #12]
90022e0e:	eb04 034b 	add.w	r3, r4, fp, lsl #1
90022e12:	e9cd 3207 	strd	r3, r2, [sp, #28]
90022e16:	9b07      	ldr	r3, [sp, #28]
90022e18:	42a3      	cmp	r3, r4
90022e1a:	f240 809d 	bls.w	90022f58 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1fc>
90022e1e:	9b06      	ldr	r3, [sp, #24]
90022e20:	2b00      	cmp	r3, #0
90022e22:	d039      	beq.n	90022e98 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x13c>
90022e24:	782b      	ldrb	r3, [r5, #0]
90022e26:	f105 0801 	add.w	r8, r5, #1
90022e2a:	f109 3bff 	add.w	fp, r9, #4294967295
90022e2e:	8822      	ldrh	r2, [r4, #0]
90022e30:	f003 030f 	and.w	r3, r3, #15
90022e34:	9804      	ldr	r0, [sp, #16]
90022e36:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
90022e3a:	9b03      	ldr	r3, [sp, #12]
90022e3c:	9300      	str	r3, [sp, #0]
90022e3e:	463b      	mov	r3, r7
90022e40:	f7ff ff52 	bl	90022ce8 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>
90022e44:	f824 0b02 	strh.w	r0, [r4], #2
90022e48:	f1bb 0f01 	cmp.w	fp, #1
90022e4c:	46a2      	mov	sl, r4
90022e4e:	f104 0404 	add.w	r4, r4, #4
90022e52:	dd24      	ble.n	90022e9e <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x142>
90022e54:	f898 3000 	ldrb.w	r3, [r8]
90022e58:	f1ab 0b02 	sub.w	fp, fp, #2
90022e5c:	f834 2c04 	ldrh.w	r2, [r4, #-4]
90022e60:	091b      	lsrs	r3, r3, #4
90022e62:	9804      	ldr	r0, [sp, #16]
90022e64:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
90022e68:	9b03      	ldr	r3, [sp, #12]
90022e6a:	9300      	str	r3, [sp, #0]
90022e6c:	463b      	mov	r3, r7
90022e6e:	f7ff ff3b 	bl	90022ce8 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>
90022e72:	f824 0c04 	strh.w	r0, [r4, #-4]
90022e76:	f818 3b01 	ldrb.w	r3, [r8], #1
90022e7a:	f834 2c02 	ldrh.w	r2, [r4, #-2]
90022e7e:	f003 030f 	and.w	r3, r3, #15
90022e82:	9804      	ldr	r0, [sp, #16]
90022e84:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
90022e88:	9b03      	ldr	r3, [sp, #12]
90022e8a:	9300      	str	r3, [sp, #0]
90022e8c:	463b      	mov	r3, r7
90022e8e:	f7ff ff2b 	bl	90022ce8 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>
90022e92:	f824 0c02 	strh.w	r0, [r4, #-2]
90022e96:	e7d7      	b.n	90022e48 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0xec>
90022e98:	46a8      	mov	r8, r5
90022e9a:	46cb      	mov	fp, r9
90022e9c:	e7d4      	b.n	90022e48 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0xec>
90022e9e:	d10e      	bne.n	90022ebe <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x162>
90022ea0:	f898 3000 	ldrb.w	r3, [r8]
90022ea4:	f8ba 2000 	ldrh.w	r2, [sl]
90022ea8:	091b      	lsrs	r3, r3, #4
90022eaa:	9804      	ldr	r0, [sp, #16]
90022eac:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
90022eb0:	9b03      	ldr	r3, [sp, #12]
90022eb2:	9300      	str	r3, [sp, #0]
90022eb4:	463b      	mov	r3, r7
90022eb6:	f7ff ff17 	bl	90022ce8 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>
90022eba:	f82a 0b02 	strh.w	r0, [sl], #2
90022ebe:	9b08      	ldr	r3, [sp, #32]
90022ec0:	9a05      	ldr	r2, [sp, #20]
90022ec2:	881c      	ldrh	r4, [r3, #0]
90022ec4:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
90022ec8:	eba4 0409 	sub.w	r4, r4, r9
90022ecc:	4413      	add	r3, r2
90022ece:	9a09      	ldr	r2, [sp, #36]	; 0x24
90022ed0:	eb0a 0444 	add.w	r4, sl, r4, lsl #1
90022ed4:	fb93 f3f2 	sdiv	r3, r3, r2
90022ed8:	441d      	add	r5, r3
90022eda:	e79c      	b.n	90022e16 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0xba>
90022edc:	eb04 0b4b 	add.w	fp, r4, fp, lsl #1
90022ee0:	45a3      	cmp	fp, r4
90022ee2:	d939      	bls.n	90022f58 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1fc>
90022ee4:	9b06      	ldr	r3, [sp, #24]
90022ee6:	b1fb      	cbz	r3, 90022f28 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1cc>
90022ee8:	782b      	ldrb	r3, [r5, #0]
90022eea:	1c6a      	adds	r2, r5, #1
90022eec:	f109 30ff 	add.w	r0, r9, #4294967295
90022ef0:	3402      	adds	r4, #2
90022ef2:	f003 030f 	and.w	r3, r3, #15
90022ef6:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
90022efa:	f824 3c02 	strh.w	r3, [r4, #-2]
90022efe:	2801      	cmp	r0, #1
90022f00:	4623      	mov	r3, r4
90022f02:	f104 0404 	add.w	r4, r4, #4
90022f06:	dd12      	ble.n	90022f2e <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1d2>
90022f08:	7813      	ldrb	r3, [r2, #0]
90022f0a:	3802      	subs	r0, #2
90022f0c:	091b      	lsrs	r3, r3, #4
90022f0e:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
90022f12:	f824 3c04 	strh.w	r3, [r4, #-4]
90022f16:	f812 3b01 	ldrb.w	r3, [r2], #1
90022f1a:	f003 030f 	and.w	r3, r3, #15
90022f1e:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
90022f22:	f824 3c02 	strh.w	r3, [r4, #-2]
90022f26:	e7ea      	b.n	90022efe <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1a2>
90022f28:	462a      	mov	r2, r5
90022f2a:	4648      	mov	r0, r9
90022f2c:	e7e7      	b.n	90022efe <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1a2>
90022f2e:	d106      	bne.n	90022f3e <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1e2>
90022f30:	7812      	ldrb	r2, [r2, #0]
90022f32:	3302      	adds	r3, #2
90022f34:	0912      	lsrs	r2, r2, #4
90022f36:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
90022f3a:	f823 2c02 	strh.w	r2, [r3, #-2]
90022f3e:	880c      	ldrh	r4, [r1, #0]
90022f40:	9a05      	ldr	r2, [sp, #20]
90022f42:	eba4 0409 	sub.w	r4, r4, r9
90022f46:	eb03 0444 	add.w	r4, r3, r4, lsl #1
90022f4a:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
90022f4e:	4413      	add	r3, r2
90022f50:	fb93 f3f8 	sdiv	r3, r3, r8
90022f54:	441d      	add	r5, r3
90022f56:	e7c3      	b.n	90022ee0 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x184>
90022f58:	4b03      	ldr	r3, [pc, #12]	; (90022f68 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x20c>)
90022f5a:	6818      	ldr	r0, [r3, #0]
90022f5c:	6803      	ldr	r3, [r0, #0]
90022f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90022f60:	4798      	blx	r3
90022f62:	b00f      	add	sp, #60	; 0x3c
90022f64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90022f68:	24021c14 	.word	0x24021c14
90022f6c:	24021c0e 	.word	0x24021c0e

90022f70 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>:
90022f70:	b5f0      	push	{r4, r5, r6, r7, lr}
90022f72:	f89d 5014 	ldrb.w	r5, [sp, #20]
90022f76:	0a0f      	lsrs	r7, r1, #8
90022f78:	2dff      	cmp	r5, #255	; 0xff
90022f7a:	d10c      	bne.n	90022f96 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih+0x26>
90022f7c:	2bff      	cmp	r3, #255	; 0xff
90022f7e:	d10a      	bne.n	90022f96 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih+0x26>
90022f80:	0948      	lsrs	r0, r1, #5
90022f82:	4b25      	ldr	r3, [pc, #148]	; (90023018 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih+0xa8>)
90022f84:	f3c1 01c4 	ubfx	r1, r1, #3, #5
90022f88:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
90022f8c:	403b      	ands	r3, r7
90022f8e:	4318      	orrs	r0, r3
90022f90:	4308      	orrs	r0, r1
90022f92:	b280      	uxth	r0, r0
90022f94:	bdf0      	pop	{r4, r5, r6, r7, pc}
90022f96:	fb15 f503 	smulbb	r5, r5, r3
90022f9a:	1214      	asrs	r4, r2, #8
90022f9c:	10d6      	asrs	r6, r2, #3
90022f9e:	b2ab      	uxth	r3, r5
90022fa0:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
90022fa4:	00d0      	lsls	r0, r2, #3
90022fa6:	f3c1 4207 	ubfx	r2, r1, #16, #8
90022faa:	1c5d      	adds	r5, r3, #1
90022fac:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
90022fb0:	b2c0      	uxtb	r0, r0
90022fb2:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
90022fb6:	eb05 2513 	add.w	r5, r5, r3, lsr #8
90022fba:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
90022fbe:	f3c5 2507 	ubfx	r5, r5, #8, #8
90022fc2:	fa1f fc85 	uxth.w	ip, r5
90022fc6:	43ed      	mvns	r5, r5
90022fc8:	fb12 f20c 	smulbb	r2, r2, ip
90022fcc:	b2eb      	uxtb	r3, r5
90022fce:	b2fd      	uxtb	r5, r7
90022fd0:	fb04 2403 	mla	r4, r4, r3, r2
90022fd4:	ea40 1250 	orr.w	r2, r0, r0, lsr #5
90022fd8:	fb15 f50c 	smulbb	r5, r5, ip
90022fdc:	b2c8      	uxtb	r0, r1
90022fde:	b2a4      	uxth	r4, r4
90022fe0:	fb10 f00c 	smulbb	r0, r0, ip
90022fe4:	fb06 5503 	mla	r5, r6, r3, r5
90022fe8:	fb02 0003 	mla	r0, r2, r3, r0
90022fec:	b2ad      	uxth	r5, r5
90022fee:	b283      	uxth	r3, r0
90022ff0:	1c60      	adds	r0, r4, #1
90022ff2:	eb00 2414 	add.w	r4, r0, r4, lsr #8
90022ff6:	1c58      	adds	r0, r3, #1
90022ff8:	eb00 2013 	add.w	r0, r0, r3, lsr #8
90022ffc:	1c6b      	adds	r3, r5, #1
90022ffe:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
90023002:	eb03 2515 	add.w	r5, r3, r5, lsr #8
90023006:	f3c0 20c4 	ubfx	r0, r0, #11, #5
9002300a:	096d      	lsrs	r5, r5, #5
9002300c:	4320      	orrs	r0, r4
9002300e:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
90023012:	4328      	orrs	r0, r5
90023014:	e7be      	b.n	90022f94 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih+0x24>
90023016:	bf00      	nop
90023018:	00fff800 	.word	0x00fff800

9002301c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
9002301c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90023020:	461c      	mov	r4, r3
90023022:	b08d      	sub	sp, #52	; 0x34
90023024:	460d      	mov	r5, r1
90023026:	4616      	mov	r6, r2
90023028:	9b16      	ldr	r3, [sp, #88]	; 0x58
9002302a:	4680      	mov	r8, r0
9002302c:	6861      	ldr	r1, [r4, #4]
9002302e:	aa08      	add	r2, sp, #32
90023030:	6820      	ldr	r0, [r4, #0]
90023032:	f04f 0a02 	mov.w	sl, #2
90023036:	f89d 905c 	ldrb.w	r9, [sp, #92]	; 0x5c
9002303a:	3604      	adds	r6, #4
9002303c:	c203      	stmia	r2!, {r0, r1}
9002303e:	6818      	ldr	r0, [r3, #0]
90023040:	aa0a      	add	r2, sp, #40	; 0x28
90023042:	6859      	ldr	r1, [r3, #4]
90023044:	c203      	stmia	r2!, {r0, r1}
90023046:	a808      	add	r0, sp, #32
90023048:	f7f0 f8d2 	bl	900131f0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
9002304c:	4621      	mov	r1, r4
9002304e:	a80a      	add	r0, sp, #40	; 0x28
90023050:	f7f0 f8f6 	bl	90013240 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
90023054:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
90023058:	f9bd 702e 	ldrsh.w	r7, [sp, #46]	; 0x2e
9002305c:	f002 0301 	and.w	r3, r2, #1
90023060:	f9bd b02c 	ldrsh.w	fp, [sp, #44]	; 0x2c
90023064:	9303      	str	r3, [sp, #12]
90023066:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
9002306a:	f003 0101 	and.w	r1, r3, #1
9002306e:	9102      	str	r1, [sp, #8]
90023070:	9802      	ldr	r0, [sp, #8]
90023072:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
90023076:	4403      	add	r3, r0
90023078:	fb01 2303 	mla	r3, r1, r3, r2
9002307c:	fb93 f3fa 	sdiv	r3, r3, sl
90023080:	441d      	add	r5, r3
90023082:	f8bd 3020 	ldrh.w	r3, [sp, #32]
90023086:	441a      	add	r2, r3
90023088:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
9002308c:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
90023090:	4419      	add	r1, r3
90023092:	4a3e      	ldr	r2, [pc, #248]	; (9002318c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x170>)
90023094:	f8ad 102a 	strh.w	r1, [sp, #42]	; 0x2a
90023098:	6810      	ldr	r0, [r2, #0]
9002309a:	9205      	str	r2, [sp, #20]
9002309c:	6803      	ldr	r3, [r0, #0]
9002309e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
900230a0:	4798      	blx	r3
900230a2:	4b3b      	ldr	r3, [pc, #236]	; (90023190 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x174>)
900230a4:	f9bd 402a 	ldrsh.w	r4, [sp, #42]	; 0x2a
900230a8:	8819      	ldrh	r1, [r3, #0]
900230aa:	f9bd c028 	ldrsh.w	ip, [sp, #40]	; 0x28
900230ae:	434f      	muls	r7, r1
900230b0:	fb01 c404 	mla	r4, r1, r4, ip
900230b4:	eb00 0444 	add.w	r4, r0, r4, lsl #1
900230b8:	eb04 0247 	add.w	r2, r4, r7, lsl #1
900230bc:	e9cd 3a06 	strd	r3, sl, [sp, #24]
900230c0:	9204      	str	r2, [sp, #16]
900230c2:	9b04      	ldr	r3, [sp, #16]
900230c4:	429c      	cmp	r4, r3
900230c6:	d258      	bcs.n	9002317a <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x15e>
900230c8:	9b03      	ldr	r3, [sp, #12]
900230ca:	2b00      	cmp	r3, #0
900230cc:	d034      	beq.n	90023138 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x11c>
900230ce:	782b      	ldrb	r3, [r5, #0]
900230d0:	1c6f      	adds	r7, r5, #1
900230d2:	f003 030f 	and.w	r3, r3, #15
900230d6:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
900230da:	0e0b      	lsrs	r3, r1, #24
900230dc:	d006      	beq.n	900230ec <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xd0>
900230de:	8822      	ldrh	r2, [r4, #0]
900230e0:	4640      	mov	r0, r8
900230e2:	9300      	str	r3, [sp, #0]
900230e4:	464b      	mov	r3, r9
900230e6:	f7ff ff43 	bl	90022f70 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>
900230ea:	8020      	strh	r0, [r4, #0]
900230ec:	3402      	adds	r4, #2
900230ee:	f10b 3aff 	add.w	sl, fp, #4294967295
900230f2:	f1ba 0f01 	cmp.w	sl, #1
900230f6:	dd22      	ble.n	9002313e <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x122>
900230f8:	783b      	ldrb	r3, [r7, #0]
900230fa:	091b      	lsrs	r3, r3, #4
900230fc:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
90023100:	0e0b      	lsrs	r3, r1, #24
90023102:	d006      	beq.n	90023112 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xf6>
90023104:	8822      	ldrh	r2, [r4, #0]
90023106:	4640      	mov	r0, r8
90023108:	9300      	str	r3, [sp, #0]
9002310a:	464b      	mov	r3, r9
9002310c:	f7ff ff30 	bl	90022f70 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>
90023110:	8020      	strh	r0, [r4, #0]
90023112:	f817 3b01 	ldrb.w	r3, [r7], #1
90023116:	f003 030f 	and.w	r3, r3, #15
9002311a:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
9002311e:	0e0b      	lsrs	r3, r1, #24
90023120:	d006      	beq.n	90023130 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x114>
90023122:	8862      	ldrh	r2, [r4, #2]
90023124:	4640      	mov	r0, r8
90023126:	9300      	str	r3, [sp, #0]
90023128:	464b      	mov	r3, r9
9002312a:	f7ff ff21 	bl	90022f70 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>
9002312e:	8060      	strh	r0, [r4, #2]
90023130:	3404      	adds	r4, #4
90023132:	f1aa 0a02 	sub.w	sl, sl, #2
90023136:	e7dc      	b.n	900230f2 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xd6>
90023138:	462f      	mov	r7, r5
9002313a:	46da      	mov	sl, fp
9002313c:	e7d9      	b.n	900230f2 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xd6>
9002313e:	d10d      	bne.n	9002315c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x140>
90023140:	783b      	ldrb	r3, [r7, #0]
90023142:	091b      	lsrs	r3, r3, #4
90023144:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
90023148:	0e0b      	lsrs	r3, r1, #24
9002314a:	d006      	beq.n	9002315a <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x13e>
9002314c:	8822      	ldrh	r2, [r4, #0]
9002314e:	4640      	mov	r0, r8
90023150:	9300      	str	r3, [sp, #0]
90023152:	464b      	mov	r3, r9
90023154:	f7ff ff0c 	bl	90022f70 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>
90023158:	8020      	strh	r0, [r4, #0]
9002315a:	3402      	adds	r4, #2
9002315c:	9b06      	ldr	r3, [sp, #24]
9002315e:	9a02      	ldr	r2, [sp, #8]
90023160:	881b      	ldrh	r3, [r3, #0]
90023162:	eba3 030b 	sub.w	r3, r3, fp
90023166:	eb04 0443 	add.w	r4, r4, r3, lsl #1
9002316a:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
9002316e:	4413      	add	r3, r2
90023170:	9a07      	ldr	r2, [sp, #28]
90023172:	fb93 f3f2 	sdiv	r3, r3, r2
90023176:	441d      	add	r5, r3
90023178:	e7a3      	b.n	900230c2 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xa6>
9002317a:	9b05      	ldr	r3, [sp, #20]
9002317c:	6818      	ldr	r0, [r3, #0]
9002317e:	6803      	ldr	r3, [r0, #0]
90023180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90023182:	4798      	blx	r3
90023184:	b00d      	add	sp, #52	; 0x34
90023186:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9002318a:	bf00      	nop
9002318c:	24021c14 	.word	0x24021c14
90023190:	24021c0e 	.word	0x24021c0e

90023194 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>:
90023194:	b570      	push	{r4, r5, r6, lr}
90023196:	1214      	asrs	r4, r2, #8
90023198:	788d      	ldrb	r5, [r1, #2]
9002319a:	f89d 6010 	ldrb.w	r6, [sp, #16]
9002319e:	10d0      	asrs	r0, r2, #3
900231a0:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
900231a4:	00d2      	lsls	r2, r2, #3
900231a6:	fb15 f503 	smulbb	r5, r5, r3
900231aa:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
900231ae:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
900231b2:	b2d2      	uxtb	r2, r2
900231b4:	fb04 5506 	mla	r5, r4, r6, r5
900231b8:	784c      	ldrb	r4, [r1, #1]
900231ba:	7809      	ldrb	r1, [r1, #0]
900231bc:	ea40 1090 	orr.w	r0, r0, r0, lsr #6
900231c0:	fb14 f403 	smulbb	r4, r4, r3
900231c4:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
900231c8:	fb11 f303 	smulbb	r3, r1, r3
900231cc:	b2ad      	uxth	r5, r5
900231ce:	fb00 4406 	mla	r4, r0, r6, r4
900231d2:	fb02 3306 	mla	r3, r2, r6, r3
900231d6:	1c68      	adds	r0, r5, #1
900231d8:	b2a4      	uxth	r4, r4
900231da:	b29b      	uxth	r3, r3
900231dc:	eb00 2515 	add.w	r5, r0, r5, lsr #8
900231e0:	1c62      	adds	r2, r4, #1
900231e2:	1c58      	adds	r0, r3, #1
900231e4:	eb02 2414 	add.w	r4, r2, r4, lsr #8
900231e8:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
900231ec:	eb00 2013 	add.w	r0, r0, r3, lsr #8
900231f0:	0964      	lsrs	r4, r4, #5
900231f2:	f3c0 20c4 	ubfx	r0, r0, #11, #5
900231f6:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
900231fa:	4328      	orrs	r0, r5
900231fc:	4320      	orrs	r0, r4
900231fe:	bd70      	pop	{r4, r5, r6, pc}

90023200 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
90023200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90023204:	b08f      	sub	sp, #60	; 0x3c
90023206:	461c      	mov	r4, r3
90023208:	4682      	mov	sl, r0
9002320a:	460e      	mov	r6, r1
9002320c:	f89d 7064 	ldrb.w	r7, [sp, #100]	; 0x64
90023210:	4615      	mov	r5, r2
90023212:	9b18      	ldr	r3, [sp, #96]	; 0x60
90023214:	2f00      	cmp	r7, #0
90023216:	f000 8141 	beq.w	9002349c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x29c>
9002321a:	6820      	ldr	r0, [r4, #0]
9002321c:	aa0a      	add	r2, sp, #40	; 0x28
9002321e:	6861      	ldr	r1, [r4, #4]
90023220:	f04f 0802 	mov.w	r8, #2
90023224:	3504      	adds	r5, #4
90023226:	c203      	stmia	r2!, {r0, r1}
90023228:	6818      	ldr	r0, [r3, #0]
9002322a:	aa0c      	add	r2, sp, #48	; 0x30
9002322c:	6859      	ldr	r1, [r3, #4]
9002322e:	c203      	stmia	r2!, {r0, r1}
90023230:	a80a      	add	r0, sp, #40	; 0x28
90023232:	f7ef ffdd 	bl	900131f0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
90023236:	4621      	mov	r1, r4
90023238:	a80c      	add	r0, sp, #48	; 0x30
9002323a:	f7f0 f801 	bl	90013240 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
9002323e:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
90023242:	f9bd b036 	ldrsh.w	fp, [sp, #54]	; 0x36
90023246:	f002 0301 	and.w	r3, r2, #1
9002324a:	9306      	str	r3, [sp, #24]
9002324c:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
90023250:	f003 0101 	and.w	r1, r3, #1
90023254:	9105      	str	r1, [sp, #20]
90023256:	9805      	ldr	r0, [sp, #20]
90023258:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	; 0x32
9002325c:	4403      	add	r3, r0
9002325e:	fb01 2303 	mla	r3, r1, r3, r2
90023262:	fb93 f3f8 	sdiv	r3, r3, r8
90023266:	441e      	add	r6, r3
90023268:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
9002326c:	441a      	add	r2, r3
9002326e:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
90023272:	4419      	add	r1, r3
90023274:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
90023278:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
9002327c:	9303      	str	r3, [sp, #12]
9002327e:	4b89      	ldr	r3, [pc, #548]	; (900234a4 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2a4>)
90023280:	f8ad 1032 	strh.w	r1, [sp, #50]	; 0x32
90023284:	6818      	ldr	r0, [r3, #0]
90023286:	6803      	ldr	r3, [r0, #0]
90023288:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9002328a:	4798      	blx	r3
9002328c:	4a86      	ldr	r2, [pc, #536]	; (900234a8 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2a8>)
9002328e:	f9bd 4032 	ldrsh.w	r4, [sp, #50]	; 0x32
90023292:	2fff      	cmp	r7, #255	; 0xff
90023294:	8813      	ldrh	r3, [r2, #0]
90023296:	4694      	mov	ip, r2
90023298:	f9bd 9030 	ldrsh.w	r9, [sp, #48]	; 0x30
9002329c:	fb03 9404 	mla	r4, r3, r4, r9
900232a0:	fb03 f30b 	mul.w	r3, r3, fp
900232a4:	eb00 0444 	add.w	r4, r0, r4, lsl #1
900232a8:	d071      	beq.n	9002338e <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x18e>
900232aa:	43f9      	mvns	r1, r7
900232ac:	eb04 0343 	add.w	r3, r4, r3, lsl #1
900232b0:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
900232b4:	b2c9      	uxtb	r1, r1
900232b6:	e9cd 3207 	strd	r3, r2, [sp, #28]
900232ba:	9104      	str	r1, [sp, #16]
900232bc:	9b07      	ldr	r3, [sp, #28]
900232be:	42a3      	cmp	r3, r4
900232c0:	f240 80e7 	bls.w	90023492 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x292>
900232c4:	9b06      	ldr	r3, [sp, #24]
900232c6:	2b00      	cmp	r3, #0
900232c8:	d03d      	beq.n	90023346 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x146>
900232ca:	7831      	ldrb	r1, [r6, #0]
900232cc:	4650      	mov	r0, sl
900232ce:	9b04      	ldr	r3, [sp, #16]
900232d0:	f106 0801 	add.w	r8, r6, #1
900232d4:	f001 010f 	and.w	r1, r1, #15
900232d8:	8822      	ldrh	r2, [r4, #0]
900232da:	9300      	str	r3, [sp, #0]
900232dc:	463b      	mov	r3, r7
900232de:	eb01 0141 	add.w	r1, r1, r1, lsl #1
900232e2:	4429      	add	r1, r5
900232e4:	f7ff ff56 	bl	90023194 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>
900232e8:	9b03      	ldr	r3, [sp, #12]
900232ea:	f824 0b02 	strh.w	r0, [r4], #2
900232ee:	f103 3bff 	add.w	fp, r3, #4294967295
900232f2:	f1bb 0f01 	cmp.w	fp, #1
900232f6:	46a1      	mov	r9, r4
900232f8:	f104 0404 	add.w	r4, r4, #4
900232fc:	dd27      	ble.n	9002334e <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x14e>
900232fe:	f898 1000 	ldrb.w	r1, [r8]
90023302:	4650      	mov	r0, sl
90023304:	9b04      	ldr	r3, [sp, #16]
90023306:	f1ab 0b02 	sub.w	fp, fp, #2
9002330a:	0909      	lsrs	r1, r1, #4
9002330c:	f834 2c04 	ldrh.w	r2, [r4, #-4]
90023310:	9300      	str	r3, [sp, #0]
90023312:	463b      	mov	r3, r7
90023314:	eb01 0141 	add.w	r1, r1, r1, lsl #1
90023318:	4429      	add	r1, r5
9002331a:	f7ff ff3b 	bl	90023194 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>
9002331e:	f824 0c04 	strh.w	r0, [r4, #-4]
90023322:	f818 1b01 	ldrb.w	r1, [r8], #1
90023326:	4650      	mov	r0, sl
90023328:	9b04      	ldr	r3, [sp, #16]
9002332a:	f001 010f 	and.w	r1, r1, #15
9002332e:	f834 2c02 	ldrh.w	r2, [r4, #-2]
90023332:	9300      	str	r3, [sp, #0]
90023334:	463b      	mov	r3, r7
90023336:	eb01 0141 	add.w	r1, r1, r1, lsl #1
9002333a:	4429      	add	r1, r5
9002333c:	f7ff ff2a 	bl	90023194 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>
90023340:	f824 0c02 	strh.w	r0, [r4, #-2]
90023344:	e7d5      	b.n	900232f2 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xf2>
90023346:	46b0      	mov	r8, r6
90023348:	f8dd b00c 	ldr.w	fp, [sp, #12]
9002334c:	e7d1      	b.n	900232f2 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xf2>
9002334e:	d10f      	bne.n	90023370 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x170>
90023350:	f898 1000 	ldrb.w	r1, [r8]
90023354:	4650      	mov	r0, sl
90023356:	9b04      	ldr	r3, [sp, #16]
90023358:	0909      	lsrs	r1, r1, #4
9002335a:	f8b9 2000 	ldrh.w	r2, [r9]
9002335e:	9300      	str	r3, [sp, #0]
90023360:	463b      	mov	r3, r7
90023362:	eb01 0141 	add.w	r1, r1, r1, lsl #1
90023366:	4429      	add	r1, r5
90023368:	f7ff ff14 	bl	90023194 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>
9002336c:	f829 0b02 	strh.w	r0, [r9], #2
90023370:	9b08      	ldr	r3, [sp, #32]
90023372:	9a05      	ldr	r2, [sp, #20]
90023374:	881c      	ldrh	r4, [r3, #0]
90023376:	9b03      	ldr	r3, [sp, #12]
90023378:	1ae4      	subs	r4, r4, r3
9002337a:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
9002337e:	4413      	add	r3, r2
90023380:	9a09      	ldr	r2, [sp, #36]	; 0x24
90023382:	eb09 0444 	add.w	r4, r9, r4, lsl #1
90023386:	fb93 f3f2 	sdiv	r3, r3, r2
9002338a:	441e      	add	r6, r3
9002338c:	e796      	b.n	900232bc <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xbc>
9002338e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
90023392:	4f46      	ldr	r7, [pc, #280]	; (900234ac <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2ac>)
90023394:	42a3      	cmp	r3, r4
90023396:	d97c      	bls.n	90023492 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x292>
90023398:	9a06      	ldr	r2, [sp, #24]
9002339a:	2a00      	cmp	r2, #0
9002339c:	d054      	beq.n	90023448 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x248>
9002339e:	7830      	ldrb	r0, [r6, #0]
900233a0:	1c71      	adds	r1, r6, #1
900233a2:	f000 000f 	and.w	r0, r0, #15
900233a6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
900233aa:	eb05 0e00 	add.w	lr, r5, r0
900233ae:	5c28      	ldrb	r0, [r5, r0]
900233b0:	f89e 2002 	ldrb.w	r2, [lr, #2]
900233b4:	f89e e001 	ldrb.w	lr, [lr, #1]
900233b8:	ea07 2202 	and.w	r2, r7, r2, lsl #8
900233bc:	ea4f 0ece 	mov.w	lr, lr, lsl #3
900233c0:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
900233c4:	ea42 020e 	orr.w	r2, r2, lr
900233c8:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
900233cc:	f824 2b02 	strh.w	r2, [r4], #2
900233d0:	9a03      	ldr	r2, [sp, #12]
900233d2:	f102 3eff 	add.w	lr, r2, #4294967295
900233d6:	f1be 0f01 	cmp.w	lr, #1
900233da:	4620      	mov	r0, r4
900233dc:	f104 0404 	add.w	r4, r4, #4
900233e0:	dd36      	ble.n	90023450 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x250>
900233e2:	7808      	ldrb	r0, [r1, #0]
900233e4:	f1ae 0e02 	sub.w	lr, lr, #2
900233e8:	0900      	lsrs	r0, r0, #4
900233ea:	eb00 0040 	add.w	r0, r0, r0, lsl #1
900233ee:	eb05 0a00 	add.w	sl, r5, r0
900233f2:	f89a 2001 	ldrb.w	r2, [sl, #1]
900233f6:	f89a 9002 	ldrb.w	r9, [sl, #2]
900233fa:	00d2      	lsls	r2, r2, #3
900233fc:	ea07 2909 	and.w	r9, r7, r9, lsl #8
90023400:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
90023404:	ea49 0202 	orr.w	r2, r9, r2
90023408:	f815 9000 	ldrb.w	r9, [r5, r0]
9002340c:	ea42 02d9 	orr.w	r2, r2, r9, lsr #3
90023410:	f824 2c04 	strh.w	r2, [r4, #-4]
90023414:	f811 0b01 	ldrb.w	r0, [r1], #1
90023418:	f000 000f 	and.w	r0, r0, #15
9002341c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
90023420:	eb05 0a00 	add.w	sl, r5, r0
90023424:	f89a 2001 	ldrb.w	r2, [sl, #1]
90023428:	f89a 9002 	ldrb.w	r9, [sl, #2]
9002342c:	00d2      	lsls	r2, r2, #3
9002342e:	ea07 2909 	and.w	r9, r7, r9, lsl #8
90023432:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
90023436:	ea49 0202 	orr.w	r2, r9, r2
9002343a:	f815 9000 	ldrb.w	r9, [r5, r0]
9002343e:	ea42 02d9 	orr.w	r2, r2, r9, lsr #3
90023442:	f824 2c02 	strh.w	r2, [r4, #-2]
90023446:	e7c6      	b.n	900233d6 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1d6>
90023448:	4631      	mov	r1, r6
9002344a:	f8dd e00c 	ldr.w	lr, [sp, #12]
9002344e:	e7c2      	b.n	900233d6 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1d6>
90023450:	d111      	bne.n	90023476 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x276>
90023452:	7809      	ldrb	r1, [r1, #0]
90023454:	0909      	lsrs	r1, r1, #4
90023456:	eb01 0141 	add.w	r1, r1, r1, lsl #1
9002345a:	186c      	adds	r4, r5, r1
9002345c:	5c69      	ldrb	r1, [r5, r1]
9002345e:	78a2      	ldrb	r2, [r4, #2]
90023460:	7864      	ldrb	r4, [r4, #1]
90023462:	ea07 2202 	and.w	r2, r7, r2, lsl #8
90023466:	00e4      	lsls	r4, r4, #3
90023468:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
9002346c:	4322      	orrs	r2, r4
9002346e:	ea42 02d1 	orr.w	r2, r2, r1, lsr #3
90023472:	f820 2b02 	strh.w	r2, [r0], #2
90023476:	9a03      	ldr	r2, [sp, #12]
90023478:	f8bc 4000 	ldrh.w	r4, [ip]
9002347c:	9905      	ldr	r1, [sp, #20]
9002347e:	1aa4      	subs	r4, r4, r2
90023480:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
90023484:	440a      	add	r2, r1
90023486:	eb00 0444 	add.w	r4, r0, r4, lsl #1
9002348a:	fb92 f2f8 	sdiv	r2, r2, r8
9002348e:	4416      	add	r6, r2
90023490:	e780      	b.n	90023394 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x194>
90023492:	4b04      	ldr	r3, [pc, #16]	; (900234a4 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2a4>)
90023494:	6818      	ldr	r0, [r3, #0]
90023496:	6803      	ldr	r3, [r0, #0]
90023498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9002349a:	4798      	blx	r3
9002349c:	b00f      	add	sp, #60	; 0x3c
9002349e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
900234a2:	bf00      	nop
900234a4:	24021c14 	.word	0x24021c14
900234a8:	24021c0e 	.word	0x24021c0e
900234ac:	fffff800 	.word	0xfffff800

900234b0 <CRC_Lock>:
900234b0:	4a20      	ldr	r2, [pc, #128]	; (90023534 <CRC_Lock+0x84>)
900234b2:	b530      	push	{r4, r5, lr}
900234b4:	6813      	ldr	r3, [r2, #0]
900234b6:	f64f 74f0 	movw	r4, #65520	; 0xfff0
900234ba:	f24c 2540 	movw	r5, #49728	; 0xc240
900234be:	f023 0301 	bic.w	r3, r3, #1
900234c2:	6013      	str	r3, [r2, #0]
900234c4:	4b1c      	ldr	r3, [pc, #112]	; (90023538 <CRC_Lock+0x88>)
900234c6:	681a      	ldr	r2, [r3, #0]
900234c8:	4022      	ands	r2, r4
900234ca:	42aa      	cmp	r2, r5
900234cc:	d005      	beq.n	900234da <CRC_Lock+0x2a>
900234ce:	681b      	ldr	r3, [r3, #0]
900234d0:	f24c 2270 	movw	r2, #49776	; 0xc270
900234d4:	4023      	ands	r3, r4
900234d6:	4293      	cmp	r3, r2
900234d8:	d124      	bne.n	90023524 <CRC_Lock+0x74>
900234da:	4b18      	ldr	r3, [pc, #96]	; (9002353c <CRC_Lock+0x8c>)
900234dc:	681b      	ldr	r3, [r3, #0]
900234de:	bb0b      	cbnz	r3, 90023524 <CRC_Lock+0x74>
900234e0:	4b17      	ldr	r3, [pc, #92]	; (90023540 <CRC_Lock+0x90>)
900234e2:	681a      	ldr	r2, [r3, #0]
900234e4:	f3c2 020b 	ubfx	r2, r2, #0, #12
900234e8:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
900234ec:	d00d      	beq.n	9002350a <CRC_Lock+0x5a>
900234ee:	681a      	ldr	r2, [r3, #0]
900234f0:	f240 4483 	movw	r4, #1155	; 0x483
900234f4:	f3c2 020b 	ubfx	r2, r2, #0, #12
900234f8:	42a2      	cmp	r2, r4
900234fa:	d006      	beq.n	9002350a <CRC_Lock+0x5a>
900234fc:	681b      	ldr	r3, [r3, #0]
900234fe:	f240 4285 	movw	r2, #1157	; 0x485
90023502:	f3c3 030b 	ubfx	r3, r3, #0, #12
90023506:	4293      	cmp	r3, r2
90023508:	d10c      	bne.n	90023524 <CRC_Lock+0x74>
9002350a:	4b0e      	ldr	r3, [pc, #56]	; (90023544 <CRC_Lock+0x94>)
9002350c:	2201      	movs	r2, #1
9002350e:	601a      	str	r2, [r3, #0]
90023510:	681a      	ldr	r2, [r3, #0]
90023512:	2a00      	cmp	r2, #0
90023514:	d1fc      	bne.n	90023510 <CRC_Lock+0x60>
90023516:	4b0c      	ldr	r3, [pc, #48]	; (90023548 <CRC_Lock+0x98>)
90023518:	6018      	str	r0, [r3, #0]
9002351a:	6818      	ldr	r0, [r3, #0]
9002351c:	1a43      	subs	r3, r0, r1
9002351e:	4258      	negs	r0, r3
90023520:	4158      	adcs	r0, r3
90023522:	bd30      	pop	{r4, r5, pc}
90023524:	4b09      	ldr	r3, [pc, #36]	; (9002354c <CRC_Lock+0x9c>)
90023526:	2201      	movs	r2, #1
90023528:	601a      	str	r2, [r3, #0]
9002352a:	681a      	ldr	r2, [r3, #0]
9002352c:	2a00      	cmp	r2, #0
9002352e:	d1fc      	bne.n	9002352a <CRC_Lock+0x7a>
90023530:	4b07      	ldr	r3, [pc, #28]	; (90023550 <CRC_Lock+0xa0>)
90023532:	e7f1      	b.n	90023518 <CRC_Lock+0x68>
90023534:	e0002000 	.word	0xe0002000
90023538:	e000ed00 	.word	0xe000ed00
9002353c:	e0042000 	.word	0xe0042000
90023540:	5c001000 	.word	0x5c001000
90023544:	58024c08 	.word	0x58024c08
90023548:	58024c00 	.word	0x58024c00
9002354c:	40023008 	.word	0x40023008
90023550:	40023000 	.word	0x40023000

90023554 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
90023554:	6101      	str	r1, [r0, #16]
90023556:	4770      	bx	lr

90023558 <_ZN8touchgfx8Gestures4tickEv>:
90023558:	7b83      	ldrb	r3, [r0, #14]
9002355a:	b14b      	cbz	r3, 90023570 <_ZN8touchgfx8Gestures4tickEv+0x18>
9002355c:	8903      	ldrh	r3, [r0, #8]
9002355e:	3301      	adds	r3, #1
90023560:	b29b      	uxth	r3, r3
90023562:	2b07      	cmp	r3, #7
90023564:	8103      	strh	r3, [r0, #8]
90023566:	bf81      	itttt	hi
90023568:	2300      	movhi	r3, #0
9002356a:	8143      	strhhi	r3, [r0, #10]
9002356c:	8183      	strhhi	r3, [r0, #12]
9002356e:	7383      	strbhi	r3, [r0, #14]
90023570:	4770      	bx	lr
	...

90023574 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
90023574:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
90023578:	4698      	mov	r8, r3
9002357a:	8883      	ldrh	r3, [r0, #4]
9002357c:	4604      	mov	r4, r0
9002357e:	4617      	mov	r7, r2
90023580:	f8ad 3006 	strh.w	r3, [sp, #6]
90023584:	eba8 0303 	sub.w	r3, r8, r3
90023588:	4a19      	ldr	r2, [pc, #100]	; (900235f0 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
9002358a:	460e      	mov	r6, r1
9002358c:	b21b      	sxth	r3, r3
9002358e:	88c1      	ldrh	r1, [r0, #6]
90023590:	9200      	str	r2, [sp, #0]
90023592:	2000      	movs	r0, #0
90023594:	2b00      	cmp	r3, #0
90023596:	8aa2      	ldrh	r2, [r4, #20]
90023598:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
9002359c:	bfb8      	it	lt
9002359e:	425b      	neglt	r3, r3
900235a0:	f88d 0004 	strb.w	r0, [sp, #4]
900235a4:	f8ad 1008 	strh.w	r1, [sp, #8]
900235a8:	b21b      	sxth	r3, r3
900235aa:	f8ad 800a 	strh.w	r8, [sp, #10]
900235ae:	f8ad 500c 	strh.w	r5, [sp, #12]
900235b2:	4293      	cmp	r3, r2
900235b4:	dc07      	bgt.n	900235c6 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x52>
900235b6:	1a69      	subs	r1, r5, r1
900235b8:	b209      	sxth	r1, r1
900235ba:	2900      	cmp	r1, #0
900235bc:	bfb8      	it	lt
900235be:	4249      	neglt	r1, r1
900235c0:	b209      	sxth	r1, r1
900235c2:	428a      	cmp	r2, r1
900235c4:	da10      	bge.n	900235e8 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x74>
900235c6:	6920      	ldr	r0, [r4, #16]
900235c8:	4669      	mov	r1, sp
900235ca:	eba8 0606 	sub.w	r6, r8, r6
900235ce:	1bef      	subs	r7, r5, r7
900235d0:	6803      	ldr	r3, [r0, #0]
900235d2:	685b      	ldr	r3, [r3, #4]
900235d4:	4798      	blx	r3
900235d6:	2300      	movs	r3, #0
900235d8:	2001      	movs	r0, #1
900235da:	8166      	strh	r6, [r4, #10]
900235dc:	8123      	strh	r3, [r4, #8]
900235de:	81a7      	strh	r7, [r4, #12]
900235e0:	f8a4 8004 	strh.w	r8, [r4, #4]
900235e4:	80e5      	strh	r5, [r4, #6]
900235e6:	73a0      	strb	r0, [r4, #14]
900235e8:	b004      	add	sp, #16
900235ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
900235ee:	bf00      	nop
900235f0:	90028eac 	.word	0x90028eac

900235f4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
900235f4:	b5f0      	push	{r4, r5, r6, r7, lr}
900235f6:	461e      	mov	r6, r3
900235f8:	1e4b      	subs	r3, r1, #1
900235fa:	b085      	sub	sp, #20
900235fc:	4604      	mov	r4, r0
900235fe:	2b01      	cmp	r3, #1
90023600:	460d      	mov	r5, r1
90023602:	4617      	mov	r7, r2
90023604:	d84b      	bhi.n	9002369e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
90023606:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
9002360a:	1cd3      	adds	r3, r2, #3
9002360c:	b29b      	uxth	r3, r3
9002360e:	2b06      	cmp	r3, #6
90023610:	d916      	bls.n	90023640 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
90023612:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 900236b4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
90023616:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
9002361a:	f8cd c004 	str.w	ip, [sp, #4]
9002361e:	f04f 0c00 	mov.w	ip, #0
90023622:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
90023626:	6900      	ldr	r0, [r0, #16]
90023628:	f8ad 100c 	strh.w	r1, [sp, #12]
9002362c:	a901      	add	r1, sp, #4
9002362e:	f88d c008 	strb.w	ip, [sp, #8]
90023632:	f8ad 200a 	strh.w	r2, [sp, #10]
90023636:	f8ad 300e 	strh.w	r3, [sp, #14]
9002363a:	6803      	ldr	r3, [r0, #0]
9002363c:	689b      	ldr	r3, [r3, #8]
9002363e:	4798      	blx	r3
90023640:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
90023644:	1cd3      	adds	r3, r2, #3
90023646:	b29b      	uxth	r3, r3
90023648:	2b06      	cmp	r3, #6
9002364a:	d916      	bls.n	9002367a <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
9002364c:	f8df c064 	ldr.w	ip, [pc, #100]	; 900236b4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
90023650:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
90023654:	f8cd c004 	str.w	ip, [sp, #4]
90023658:	f04f 0c01 	mov.w	ip, #1
9002365c:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
90023660:	6920      	ldr	r0, [r4, #16]
90023662:	f8ad 100c 	strh.w	r1, [sp, #12]
90023666:	a901      	add	r1, sp, #4
90023668:	f88d c008 	strb.w	ip, [sp, #8]
9002366c:	f8ad 200a 	strh.w	r2, [sp, #10]
90023670:	f8ad 300e 	strh.w	r3, [sp, #14]
90023674:	6803      	ldr	r3, [r0, #0]
90023676:	689b      	ldr	r3, [r3, #8]
90023678:	4798      	blx	r3
9002367a:	4b0d      	ldr	r3, [pc, #52]	; (900236b0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
9002367c:	a901      	add	r1, sp, #4
9002367e:	6920      	ldr	r0, [r4, #16]
90023680:	9301      	str	r3, [sp, #4]
90023682:	2300      	movs	r3, #0
90023684:	f88d 5008 	strb.w	r5, [sp, #8]
90023688:	f8ad 700a 	strh.w	r7, [sp, #10]
9002368c:	f8ad 600c 	strh.w	r6, [sp, #12]
90023690:	f8ad 300e 	strh.w	r3, [sp, #14]
90023694:	6803      	ldr	r3, [r0, #0]
90023696:	681b      	ldr	r3, [r3, #0]
90023698:	4798      	blx	r3
9002369a:	b005      	add	sp, #20
9002369c:	bdf0      	pop	{r4, r5, r6, r7, pc}
9002369e:	2900      	cmp	r1, #0
900236a0:	d1eb      	bne.n	9002367a <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
900236a2:	80a2      	strh	r2, [r4, #4]
900236a4:	80c6      	strh	r6, [r0, #6]
900236a6:	60a1      	str	r1, [r4, #8]
900236a8:	81a1      	strh	r1, [r4, #12]
900236aa:	73a1      	strb	r1, [r4, #14]
900236ac:	e7e5      	b.n	9002367a <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
900236ae:	bf00      	nop
900236b0:	90028e98 	.word	0x90028e98
900236b4:	90028ec0 	.word	0x90028ec0

900236b8 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>:
900236b8:	790b      	ldrb	r3, [r1, #4]
900236ba:	2b00      	cmp	r3, #0
900236bc:	bf0c      	ite	eq
900236be:	2301      	moveq	r3, #1
900236c0:	2300      	movne	r3, #0
900236c2:	b570      	push	{r4, r5, r6, lr}
900236c4:	4604      	mov	r4, r0
900236c6:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
900236ca:	460e      	mov	r6, r1
900236cc:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
900236d0:	d109      	bne.n	900236e6 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x2e>
900236d2:	b14d      	cbz	r5, 900236e8 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x30>
900236d4:	7933      	ldrb	r3, [r6, #4]
900236d6:	2b01      	cmp	r3, #1
900236d8:	d10c      	bne.n	900236f4 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
900236da:	6823      	ldr	r3, [r4, #0]
900236dc:	4620      	mov	r0, r4
900236de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
900236e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
900236e4:	4718      	bx	r3
900236e6:	b12d      	cbz	r5, 900236f4 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
900236e8:	6823      	ldr	r3, [r4, #0]
900236ea:	4620      	mov	r0, r4
900236ec:	695b      	ldr	r3, [r3, #20]
900236ee:	4798      	blx	r3
900236f0:	2d00      	cmp	r5, #0
900236f2:	d1ef      	bne.n	900236d4 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x1c>
900236f4:	bd70      	pop	{r4, r5, r6, pc}

900236f6 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>:
900236f6:	b570      	push	{r4, r5, r6, lr}
900236f8:	880b      	ldrh	r3, [r1, #0]
900236fa:	4605      	mov	r5, r0
900236fc:	4604      	mov	r4, r0
900236fe:	85c3      	strh	r3, [r0, #46]	; 0x2e
90023700:	8813      	ldrh	r3, [r2, #0]
90023702:	f825 3f30 	strh.w	r3, [r5, #48]!
90023706:	4628      	mov	r0, r5
90023708:	f7f2 fb8e 	bl	90015e28 <_ZNK8touchgfx6Bitmap8getWidthEv>
9002370c:	4606      	mov	r6, r0
9002370e:	4628      	mov	r0, r5
90023710:	f7f2 fbbe 	bl	90015e90 <_ZNK8touchgfx6Bitmap9getHeightEv>
90023714:	6823      	ldr	r3, [r4, #0]
90023716:	4605      	mov	r5, r0
90023718:	4631      	mov	r1, r6
9002371a:	4620      	mov	r0, r4
9002371c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
9002371e:	4798      	blx	r3
90023720:	6823      	ldr	r3, [r4, #0]
90023722:	4629      	mov	r1, r5
90023724:	4620      	mov	r0, r4
90023726:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
90023728:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
9002372c:	4718      	bx	r3

9002372e <_ZNK8touchgfx6Button12getSolidRectEv>:
9002372e:	b510      	push	{r4, lr}
90023730:	f891 3032 	ldrb.w	r3, [r1, #50]	; 0x32
90023734:	4604      	mov	r4, r0
90023736:	2bff      	cmp	r3, #255	; 0xff
90023738:	d006      	beq.n	90023748 <_ZNK8touchgfx6Button12getSolidRectEv+0x1a>
9002373a:	2300      	movs	r3, #0
9002373c:	8003      	strh	r3, [r0, #0]
9002373e:	8043      	strh	r3, [r0, #2]
90023740:	8083      	strh	r3, [r0, #4]
90023742:	80c3      	strh	r3, [r0, #6]
90023744:	4620      	mov	r0, r4
90023746:	bd10      	pop	{r4, pc}
90023748:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
9002374c:	b11b      	cbz	r3, 90023756 <_ZNK8touchgfx6Button12getSolidRectEv+0x28>
9002374e:	3130      	adds	r1, #48	; 0x30
90023750:	f7f2 fbd2 	bl	90015ef8 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
90023754:	e7f6      	b.n	90023744 <_ZNK8touchgfx6Button12getSolidRectEv+0x16>
90023756:	312e      	adds	r1, #46	; 0x2e
90023758:	e7fa      	b.n	90023750 <_ZNK8touchgfx6Button12getSolidRectEv+0x22>
	...

9002375c <_ZNK8touchgfx6Button4drawERKNS_4RectE>:
9002375c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90023760:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
90023764:	b08a      	sub	sp, #40	; 0x28
90023766:	4604      	mov	r4, r0
90023768:	4688      	mov	r8, r1
9002376a:	2b00      	cmp	r3, #0
9002376c:	d066      	beq.n	9002383c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe0>
9002376e:	8e03      	ldrh	r3, [r0, #48]	; 0x30
90023770:	a805      	add	r0, sp, #20
90023772:	f8ad 3014 	strh.w	r3, [sp, #20]
90023776:	f7f2 fb57 	bl	90015e28 <_ZNK8touchgfx6Bitmap8getWidthEv>
9002377a:	4607      	mov	r7, r0
9002377c:	a805      	add	r0, sp, #20
9002377e:	f7f2 fb87 	bl	90015e90 <_ZNK8touchgfx6Bitmap9getHeightEv>
90023782:	f9b8 6000 	ldrsh.w	r6, [r8]
90023786:	f8b8 2004 	ldrh.w	r2, [r8, #4]
9002378a:	2300      	movs	r3, #0
9002378c:	4432      	add	r2, r6
9002378e:	9306      	str	r3, [sp, #24]
90023790:	b292      	uxth	r2, r2
90023792:	fa0f fc82 	sxth.w	ip, r2
90023796:	459c      	cmp	ip, r3
90023798:	dd52      	ble.n	90023840 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
9002379a:	42b7      	cmp	r7, r6
9002379c:	dd50      	ble.n	90023840 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
9002379e:	f9b8 5002 	ldrsh.w	r5, [r8, #2]
900237a2:	f8b8 3006 	ldrh.w	r3, [r8, #6]
900237a6:	442b      	add	r3, r5
900237a8:	b29b      	uxth	r3, r3
900237aa:	b219      	sxth	r1, r3
900237ac:	2900      	cmp	r1, #0
900237ae:	dd47      	ble.n	90023840 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
900237b0:	42a8      	cmp	r0, r5
900237b2:	dd45      	ble.n	90023840 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
900237b4:	4567      	cmp	r7, ip
900237b6:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
900237ba:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
900237be:	bfb8      	it	lt
900237c0:	b2ba      	uxthlt	r2, r7
900237c2:	4288      	cmp	r0, r1
900237c4:	f8ad 6018 	strh.w	r6, [sp, #24]
900237c8:	bfb8      	it	lt
900237ca:	b283      	uxthlt	r3, r0
900237cc:	1b92      	subs	r2, r2, r6
900237ce:	f8ad 501a 	strh.w	r5, [sp, #26]
900237d2:	1b5b      	subs	r3, r3, r5
900237d4:	f8ad 201c 	strh.w	r2, [sp, #28]
900237d8:	f8ad 301e 	strh.w	r3, [sp, #30]
900237dc:	f8bd 2014 	ldrh.w	r2, [sp, #20]
900237e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
900237e4:	429a      	cmp	r2, r3
900237e6:	d026      	beq.n	90023836 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
900237e8:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
900237ec:	2b00      	cmp	r3, #0
900237ee:	dd22      	ble.n	90023836 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
900237f0:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
900237f4:	2b00      	cmp	r3, #0
900237f6:	dd1e      	ble.n	90023836 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
900237f8:	2300      	movs	r3, #0
900237fa:	a908      	add	r1, sp, #32
900237fc:	4620      	mov	r0, r4
900237fe:	e9cd 3308 	strd	r3, r3, [sp, #32]
90023802:	6823      	ldr	r3, [r4, #0]
90023804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90023806:	4798      	blx	r3
90023808:	4b0f      	ldr	r3, [pc, #60]	; (90023848 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xec>)
9002380a:	681b      	ldr	r3, [r3, #0]
9002380c:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
90023810:	b10a      	cbz	r2, 90023816 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xba>
90023812:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
90023814:	b900      	cbnz	r0, 90023818 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xbc>
90023816:	6898      	ldr	r0, [r3, #8]
90023818:	2501      	movs	r5, #1
9002381a:	6801      	ldr	r1, [r0, #0]
9002381c:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
90023820:	9502      	str	r5, [sp, #8]
90023822:	f894 4032 	ldrb.w	r4, [r4, #50]	; 0x32
90023826:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
9002382a:	9401      	str	r4, [sp, #4]
9002382c:	ac06      	add	r4, sp, #24
9002382e:	9400      	str	r4, [sp, #0]
90023830:	688c      	ldr	r4, [r1, #8]
90023832:	a905      	add	r1, sp, #20
90023834:	47a0      	blx	r4
90023836:	b00a      	add	sp, #40	; 0x28
90023838:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
9002383c:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
9002383e:	e797      	b.n	90023770 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x14>
90023840:	2300      	movs	r3, #0
90023842:	9307      	str	r3, [sp, #28]
90023844:	e7ca      	b.n	900237dc <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x80>
90023846:	bf00      	nop
90023848:	24021c14 	.word	0x24021c14

9002384c <__aeabi_atexit>:
9002384c:	460b      	mov	r3, r1
9002384e:	4601      	mov	r1, r0
90023850:	4618      	mov	r0, r3
90023852:	f000 b90f 	b.w	90023a74 <__cxa_atexit>

90023856 <_ZdlPvj>:
90023856:	f000 b812 	b.w	9002387e <_ZdlPv>

9002385a <__cxa_guard_acquire>:
9002385a:	6803      	ldr	r3, [r0, #0]
9002385c:	07db      	lsls	r3, r3, #31
9002385e:	d406      	bmi.n	9002386e <__cxa_guard_acquire+0x14>
90023860:	7843      	ldrb	r3, [r0, #1]
90023862:	b103      	cbz	r3, 90023866 <__cxa_guard_acquire+0xc>
90023864:	deff      	udf	#255	; 0xff
90023866:	2301      	movs	r3, #1
90023868:	7043      	strb	r3, [r0, #1]
9002386a:	4618      	mov	r0, r3
9002386c:	4770      	bx	lr
9002386e:	2000      	movs	r0, #0
90023870:	4770      	bx	lr

90023872 <__cxa_guard_release>:
90023872:	2301      	movs	r3, #1
90023874:	6003      	str	r3, [r0, #0]
90023876:	4770      	bx	lr

90023878 <__cxa_pure_virtual>:
90023878:	b508      	push	{r3, lr}
9002387a:	f000 f80f 	bl	9002389c <_ZSt9terminatev>

9002387e <_ZdlPv>:
9002387e:	f000 b845 	b.w	9002390c <free>

90023882 <_ZN10__cxxabiv111__terminateEPFvvE>:
90023882:	b508      	push	{r3, lr}
90023884:	4780      	blx	r0
90023886:	f000 f80e 	bl	900238a6 <abort>
	...

9002388c <_ZSt13get_terminatev>:
9002388c:	4b02      	ldr	r3, [pc, #8]	; (90023898 <_ZSt13get_terminatev+0xc>)
9002388e:	6818      	ldr	r0, [r3, #0]
90023890:	f3bf 8f5b 	dmb	ish
90023894:	4770      	bx	lr
90023896:	bf00      	nop
90023898:	240000f8 	.word	0x240000f8

9002389c <_ZSt9terminatev>:
9002389c:	b508      	push	{r3, lr}
9002389e:	f7ff fff5 	bl	9002388c <_ZSt13get_terminatev>
900238a2:	f7ff ffee 	bl	90023882 <_ZN10__cxxabiv111__terminateEPFvvE>

900238a6 <abort>:
900238a6:	b508      	push	{r3, lr}
900238a8:	2006      	movs	r0, #6
900238aa:	f000 ff51 	bl	90024750 <raise>
900238ae:	2001      	movs	r0, #1
900238b0:	f7e0 fdf0 	bl	90004494 <_exit>

900238b4 <__assert_func>:
900238b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
900238b6:	4614      	mov	r4, r2
900238b8:	461a      	mov	r2, r3
900238ba:	4b09      	ldr	r3, [pc, #36]	; (900238e0 <__assert_func+0x2c>)
900238bc:	681b      	ldr	r3, [r3, #0]
900238be:	4605      	mov	r5, r0
900238c0:	68d8      	ldr	r0, [r3, #12]
900238c2:	b14c      	cbz	r4, 900238d8 <__assert_func+0x24>
900238c4:	4b07      	ldr	r3, [pc, #28]	; (900238e4 <__assert_func+0x30>)
900238c6:	9100      	str	r1, [sp, #0]
900238c8:	e9cd 3401 	strd	r3, r4, [sp, #4]
900238cc:	4906      	ldr	r1, [pc, #24]	; (900238e8 <__assert_func+0x34>)
900238ce:	462b      	mov	r3, r5
900238d0:	f000 fdaa 	bl	90024428 <fiprintf>
900238d4:	f7ff ffe7 	bl	900238a6 <abort>
900238d8:	4b04      	ldr	r3, [pc, #16]	; (900238ec <__assert_func+0x38>)
900238da:	461c      	mov	r4, r3
900238dc:	e7f3      	b.n	900238c6 <__assert_func+0x12>
900238de:	bf00      	nop
900238e0:	24000154 	.word	0x24000154
900238e4:	900291dc 	.word	0x900291dc
900238e8:	900291e9 	.word	0x900291e9
900238ec:	90029217 	.word	0x90029217

900238f0 <atexit>:
900238f0:	2300      	movs	r3, #0
900238f2:	4601      	mov	r1, r0
900238f4:	461a      	mov	r2, r3
900238f6:	4618      	mov	r0, r3
900238f8:	f000 bfda 	b.w	900248b0 <__register_exitproc>

900238fc <malloc>:
900238fc:	4b02      	ldr	r3, [pc, #8]	; (90023908 <malloc+0xc>)
900238fe:	4601      	mov	r1, r0
90023900:	6818      	ldr	r0, [r3, #0]
90023902:	f000 b82b 	b.w	9002395c <_malloc_r>
90023906:	bf00      	nop
90023908:	24000154 	.word	0x24000154

9002390c <free>:
9002390c:	4b02      	ldr	r3, [pc, #8]	; (90023918 <free+0xc>)
9002390e:	4601      	mov	r1, r0
90023910:	6818      	ldr	r0, [r3, #0]
90023912:	f001 be21 	b.w	90025558 <_free_r>
90023916:	bf00      	nop
90023918:	24000154 	.word	0x24000154

9002391c <sbrk_aligned>:
9002391c:	b570      	push	{r4, r5, r6, lr}
9002391e:	4e0e      	ldr	r6, [pc, #56]	; (90023958 <sbrk_aligned+0x3c>)
90023920:	460c      	mov	r4, r1
90023922:	6831      	ldr	r1, [r6, #0]
90023924:	4605      	mov	r5, r0
90023926:	b911      	cbnz	r1, 9002392e <sbrk_aligned+0x12>
90023928:	f000 ff66 	bl	900247f8 <_sbrk_r>
9002392c:	6030      	str	r0, [r6, #0]
9002392e:	4621      	mov	r1, r4
90023930:	4628      	mov	r0, r5
90023932:	f000 ff61 	bl	900247f8 <_sbrk_r>
90023936:	1c43      	adds	r3, r0, #1
90023938:	d00a      	beq.n	90023950 <sbrk_aligned+0x34>
9002393a:	1cc4      	adds	r4, r0, #3
9002393c:	f024 0403 	bic.w	r4, r4, #3
90023940:	42a0      	cmp	r0, r4
90023942:	d007      	beq.n	90023954 <sbrk_aligned+0x38>
90023944:	1a21      	subs	r1, r4, r0
90023946:	4628      	mov	r0, r5
90023948:	f000 ff56 	bl	900247f8 <_sbrk_r>
9002394c:	3001      	adds	r0, #1
9002394e:	d101      	bne.n	90023954 <sbrk_aligned+0x38>
90023950:	f04f 34ff 	mov.w	r4, #4294967295
90023954:	4620      	mov	r0, r4
90023956:	bd70      	pop	{r4, r5, r6, pc}
90023958:	24022564 	.word	0x24022564

9002395c <_malloc_r>:
9002395c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
90023960:	1ccd      	adds	r5, r1, #3
90023962:	f025 0503 	bic.w	r5, r5, #3
90023966:	3508      	adds	r5, #8
90023968:	2d0c      	cmp	r5, #12
9002396a:	bf38      	it	cc
9002396c:	250c      	movcc	r5, #12
9002396e:	2d00      	cmp	r5, #0
90023970:	4607      	mov	r7, r0
90023972:	db01      	blt.n	90023978 <_malloc_r+0x1c>
90023974:	42a9      	cmp	r1, r5
90023976:	d905      	bls.n	90023984 <_malloc_r+0x28>
90023978:	230c      	movs	r3, #12
9002397a:	603b      	str	r3, [r7, #0]
9002397c:	2600      	movs	r6, #0
9002397e:	4630      	mov	r0, r6
90023980:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
90023984:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 90023a58 <_malloc_r+0xfc>
90023988:	f000 f868 	bl	90023a5c <__malloc_lock>
9002398c:	f8d8 3000 	ldr.w	r3, [r8]
90023990:	461c      	mov	r4, r3
90023992:	bb5c      	cbnz	r4, 900239ec <_malloc_r+0x90>
90023994:	4629      	mov	r1, r5
90023996:	4638      	mov	r0, r7
90023998:	f7ff ffc0 	bl	9002391c <sbrk_aligned>
9002399c:	1c43      	adds	r3, r0, #1
9002399e:	4604      	mov	r4, r0
900239a0:	d155      	bne.n	90023a4e <_malloc_r+0xf2>
900239a2:	f8d8 4000 	ldr.w	r4, [r8]
900239a6:	4626      	mov	r6, r4
900239a8:	2e00      	cmp	r6, #0
900239aa:	d145      	bne.n	90023a38 <_malloc_r+0xdc>
900239ac:	2c00      	cmp	r4, #0
900239ae:	d048      	beq.n	90023a42 <_malloc_r+0xe6>
900239b0:	6823      	ldr	r3, [r4, #0]
900239b2:	4631      	mov	r1, r6
900239b4:	4638      	mov	r0, r7
900239b6:	eb04 0903 	add.w	r9, r4, r3
900239ba:	f000 ff1d 	bl	900247f8 <_sbrk_r>
900239be:	4581      	cmp	r9, r0
900239c0:	d13f      	bne.n	90023a42 <_malloc_r+0xe6>
900239c2:	6821      	ldr	r1, [r4, #0]
900239c4:	1a6d      	subs	r5, r5, r1
900239c6:	4629      	mov	r1, r5
900239c8:	4638      	mov	r0, r7
900239ca:	f7ff ffa7 	bl	9002391c <sbrk_aligned>
900239ce:	3001      	adds	r0, #1
900239d0:	d037      	beq.n	90023a42 <_malloc_r+0xe6>
900239d2:	6823      	ldr	r3, [r4, #0]
900239d4:	442b      	add	r3, r5
900239d6:	6023      	str	r3, [r4, #0]
900239d8:	f8d8 3000 	ldr.w	r3, [r8]
900239dc:	2b00      	cmp	r3, #0
900239de:	d038      	beq.n	90023a52 <_malloc_r+0xf6>
900239e0:	685a      	ldr	r2, [r3, #4]
900239e2:	42a2      	cmp	r2, r4
900239e4:	d12b      	bne.n	90023a3e <_malloc_r+0xe2>
900239e6:	2200      	movs	r2, #0
900239e8:	605a      	str	r2, [r3, #4]
900239ea:	e00f      	b.n	90023a0c <_malloc_r+0xb0>
900239ec:	6822      	ldr	r2, [r4, #0]
900239ee:	1b52      	subs	r2, r2, r5
900239f0:	d41f      	bmi.n	90023a32 <_malloc_r+0xd6>
900239f2:	2a0b      	cmp	r2, #11
900239f4:	d917      	bls.n	90023a26 <_malloc_r+0xca>
900239f6:	1961      	adds	r1, r4, r5
900239f8:	42a3      	cmp	r3, r4
900239fa:	6025      	str	r5, [r4, #0]
900239fc:	bf18      	it	ne
900239fe:	6059      	strne	r1, [r3, #4]
90023a00:	6863      	ldr	r3, [r4, #4]
90023a02:	bf08      	it	eq
90023a04:	f8c8 1000 	streq.w	r1, [r8]
90023a08:	5162      	str	r2, [r4, r5]
90023a0a:	604b      	str	r3, [r1, #4]
90023a0c:	4638      	mov	r0, r7
90023a0e:	f104 060b 	add.w	r6, r4, #11
90023a12:	f000 f829 	bl	90023a68 <__malloc_unlock>
90023a16:	f026 0607 	bic.w	r6, r6, #7
90023a1a:	1d23      	adds	r3, r4, #4
90023a1c:	1af2      	subs	r2, r6, r3
90023a1e:	d0ae      	beq.n	9002397e <_malloc_r+0x22>
90023a20:	1b9b      	subs	r3, r3, r6
90023a22:	50a3      	str	r3, [r4, r2]
90023a24:	e7ab      	b.n	9002397e <_malloc_r+0x22>
90023a26:	42a3      	cmp	r3, r4
90023a28:	6862      	ldr	r2, [r4, #4]
90023a2a:	d1dd      	bne.n	900239e8 <_malloc_r+0x8c>
90023a2c:	f8c8 2000 	str.w	r2, [r8]
90023a30:	e7ec      	b.n	90023a0c <_malloc_r+0xb0>
90023a32:	4623      	mov	r3, r4
90023a34:	6864      	ldr	r4, [r4, #4]
90023a36:	e7ac      	b.n	90023992 <_malloc_r+0x36>
90023a38:	4634      	mov	r4, r6
90023a3a:	6876      	ldr	r6, [r6, #4]
90023a3c:	e7b4      	b.n	900239a8 <_malloc_r+0x4c>
90023a3e:	4613      	mov	r3, r2
90023a40:	e7cc      	b.n	900239dc <_malloc_r+0x80>
90023a42:	230c      	movs	r3, #12
90023a44:	603b      	str	r3, [r7, #0]
90023a46:	4638      	mov	r0, r7
90023a48:	f000 f80e 	bl	90023a68 <__malloc_unlock>
90023a4c:	e797      	b.n	9002397e <_malloc_r+0x22>
90023a4e:	6025      	str	r5, [r4, #0]
90023a50:	e7dc      	b.n	90023a0c <_malloc_r+0xb0>
90023a52:	605b      	str	r3, [r3, #4]
90023a54:	deff      	udf	#255	; 0xff
90023a56:	bf00      	nop
90023a58:	24022560 	.word	0x24022560

90023a5c <__malloc_lock>:
90023a5c:	4801      	ldr	r0, [pc, #4]	; (90023a64 <__malloc_lock+0x8>)
90023a5e:	f000 bf17 	b.w	90024890 <__retarget_lock_acquire_recursive>
90023a62:	bf00      	nop
90023a64:	240226a9 	.word	0x240226a9

90023a68 <__malloc_unlock>:
90023a68:	4801      	ldr	r0, [pc, #4]	; (90023a70 <__malloc_unlock+0x8>)
90023a6a:	f000 bf12 	b.w	90024892 <__retarget_lock_release_recursive>
90023a6e:	bf00      	nop
90023a70:	240226a9 	.word	0x240226a9

90023a74 <__cxa_atexit>:
90023a74:	b510      	push	{r4, lr}
90023a76:	4c05      	ldr	r4, [pc, #20]	; (90023a8c <__cxa_atexit+0x18>)
90023a78:	4613      	mov	r3, r2
90023a7a:	b12c      	cbz	r4, 90023a88 <__cxa_atexit+0x14>
90023a7c:	460a      	mov	r2, r1
90023a7e:	4601      	mov	r1, r0
90023a80:	2002      	movs	r0, #2
90023a82:	f000 ff15 	bl	900248b0 <__register_exitproc>
90023a86:	bd10      	pop	{r4, pc}
90023a88:	4620      	mov	r0, r4
90023a8a:	e7fc      	b.n	90023a86 <__cxa_atexit+0x12>
90023a8c:	900248b1 	.word	0x900248b1

90023a90 <__cvt>:
90023a90:	b5f0      	push	{r4, r5, r6, r7, lr}
90023a92:	ed2d 8b02 	vpush	{d8}
90023a96:	eeb0 8b40 	vmov.f64	d8, d0
90023a9a:	b085      	sub	sp, #20
90023a9c:	4617      	mov	r7, r2
90023a9e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
90023aa0:	9e0c      	ldr	r6, [sp, #48]	; 0x30
90023aa2:	ee18 2a90 	vmov	r2, s17
90023aa6:	f025 0520 	bic.w	r5, r5, #32
90023aaa:	2a00      	cmp	r2, #0
90023aac:	bfb6      	itet	lt
90023aae:	222d      	movlt	r2, #45	; 0x2d
90023ab0:	2200      	movge	r2, #0
90023ab2:	eeb1 8b40 	vneglt.f64	d8, d0
90023ab6:	2d46      	cmp	r5, #70	; 0x46
90023ab8:	460c      	mov	r4, r1
90023aba:	701a      	strb	r2, [r3, #0]
90023abc:	d004      	beq.n	90023ac8 <__cvt+0x38>
90023abe:	2d45      	cmp	r5, #69	; 0x45
90023ac0:	d100      	bne.n	90023ac4 <__cvt+0x34>
90023ac2:	3401      	adds	r4, #1
90023ac4:	2102      	movs	r1, #2
90023ac6:	e000      	b.n	90023aca <__cvt+0x3a>
90023ac8:	2103      	movs	r1, #3
90023aca:	ab03      	add	r3, sp, #12
90023acc:	9301      	str	r3, [sp, #4]
90023ace:	ab02      	add	r3, sp, #8
90023ad0:	9300      	str	r3, [sp, #0]
90023ad2:	4622      	mov	r2, r4
90023ad4:	4633      	mov	r3, r6
90023ad6:	eeb0 0b48 	vmov.f64	d0, d8
90023ada:	f000 ffd1 	bl	90024a80 <_dtoa_r>
90023ade:	2d47      	cmp	r5, #71	; 0x47
90023ae0:	d101      	bne.n	90023ae6 <__cvt+0x56>
90023ae2:	07fb      	lsls	r3, r7, #31
90023ae4:	d51a      	bpl.n	90023b1c <__cvt+0x8c>
90023ae6:	2d46      	cmp	r5, #70	; 0x46
90023ae8:	eb00 0204 	add.w	r2, r0, r4
90023aec:	d10c      	bne.n	90023b08 <__cvt+0x78>
90023aee:	7803      	ldrb	r3, [r0, #0]
90023af0:	2b30      	cmp	r3, #48	; 0x30
90023af2:	d107      	bne.n	90023b04 <__cvt+0x74>
90023af4:	eeb5 8b40 	vcmp.f64	d8, #0.0
90023af8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
90023afc:	bf1c      	itt	ne
90023afe:	f1c4 0401 	rsbne	r4, r4, #1
90023b02:	6034      	strne	r4, [r6, #0]
90023b04:	6833      	ldr	r3, [r6, #0]
90023b06:	441a      	add	r2, r3
90023b08:	eeb5 8b40 	vcmp.f64	d8, #0.0
90023b0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
90023b10:	bf08      	it	eq
90023b12:	9203      	streq	r2, [sp, #12]
90023b14:	2130      	movs	r1, #48	; 0x30
90023b16:	9b03      	ldr	r3, [sp, #12]
90023b18:	4293      	cmp	r3, r2
90023b1a:	d307      	bcc.n	90023b2c <__cvt+0x9c>
90023b1c:	9b03      	ldr	r3, [sp, #12]
90023b1e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
90023b20:	1a1b      	subs	r3, r3, r0
90023b22:	6013      	str	r3, [r2, #0]
90023b24:	b005      	add	sp, #20
90023b26:	ecbd 8b02 	vpop	{d8}
90023b2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
90023b2c:	1c5c      	adds	r4, r3, #1
90023b2e:	9403      	str	r4, [sp, #12]
90023b30:	7019      	strb	r1, [r3, #0]
90023b32:	e7f0      	b.n	90023b16 <__cvt+0x86>

90023b34 <__exponent>:
90023b34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
90023b36:	4603      	mov	r3, r0
90023b38:	2900      	cmp	r1, #0
90023b3a:	bfb8      	it	lt
90023b3c:	4249      	neglt	r1, r1
90023b3e:	f803 2b02 	strb.w	r2, [r3], #2
90023b42:	bfb4      	ite	lt
90023b44:	222d      	movlt	r2, #45	; 0x2d
90023b46:	222b      	movge	r2, #43	; 0x2b
90023b48:	2909      	cmp	r1, #9
90023b4a:	7042      	strb	r2, [r0, #1]
90023b4c:	dd2a      	ble.n	90023ba4 <__exponent+0x70>
90023b4e:	f10d 0207 	add.w	r2, sp, #7
90023b52:	4617      	mov	r7, r2
90023b54:	260a      	movs	r6, #10
90023b56:	4694      	mov	ip, r2
90023b58:	fb91 f5f6 	sdiv	r5, r1, r6
90023b5c:	fb06 1415 	mls	r4, r6, r5, r1
90023b60:	3430      	adds	r4, #48	; 0x30
90023b62:	f80c 4c01 	strb.w	r4, [ip, #-1]
90023b66:	460c      	mov	r4, r1
90023b68:	2c63      	cmp	r4, #99	; 0x63
90023b6a:	f102 32ff 	add.w	r2, r2, #4294967295
90023b6e:	4629      	mov	r1, r5
90023b70:	dcf1      	bgt.n	90023b56 <__exponent+0x22>
90023b72:	3130      	adds	r1, #48	; 0x30
90023b74:	f1ac 0402 	sub.w	r4, ip, #2
90023b78:	f802 1c01 	strb.w	r1, [r2, #-1]
90023b7c:	1c41      	adds	r1, r0, #1
90023b7e:	4622      	mov	r2, r4
90023b80:	42ba      	cmp	r2, r7
90023b82:	d30a      	bcc.n	90023b9a <__exponent+0x66>
90023b84:	f10d 0209 	add.w	r2, sp, #9
90023b88:	eba2 020c 	sub.w	r2, r2, ip
90023b8c:	42bc      	cmp	r4, r7
90023b8e:	bf88      	it	hi
90023b90:	2200      	movhi	r2, #0
90023b92:	4413      	add	r3, r2
90023b94:	1a18      	subs	r0, r3, r0
90023b96:	b003      	add	sp, #12
90023b98:	bdf0      	pop	{r4, r5, r6, r7, pc}
90023b9a:	f812 5b01 	ldrb.w	r5, [r2], #1
90023b9e:	f801 5f01 	strb.w	r5, [r1, #1]!
90023ba2:	e7ed      	b.n	90023b80 <__exponent+0x4c>
90023ba4:	2330      	movs	r3, #48	; 0x30
90023ba6:	3130      	adds	r1, #48	; 0x30
90023ba8:	7083      	strb	r3, [r0, #2]
90023baa:	70c1      	strb	r1, [r0, #3]
90023bac:	1d03      	adds	r3, r0, #4
90023bae:	e7f1      	b.n	90023b94 <__exponent+0x60>

90023bb0 <_printf_float>:
90023bb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90023bb4:	b08b      	sub	sp, #44	; 0x2c
90023bb6:	460c      	mov	r4, r1
90023bb8:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
90023bbc:	4616      	mov	r6, r2
90023bbe:	461f      	mov	r7, r3
90023bc0:	4605      	mov	r5, r0
90023bc2:	f000 fdcd 	bl	90024760 <_localeconv_r>
90023bc6:	f8d0 b000 	ldr.w	fp, [r0]
90023bca:	4658      	mov	r0, fp
90023bcc:	f7dc fbd8 	bl	90000380 <strlen>
90023bd0:	2300      	movs	r3, #0
90023bd2:	9308      	str	r3, [sp, #32]
90023bd4:	f8d8 3000 	ldr.w	r3, [r8]
90023bd8:	f894 9018 	ldrb.w	r9, [r4, #24]
90023bdc:	6822      	ldr	r2, [r4, #0]
90023bde:	3307      	adds	r3, #7
90023be0:	f023 0307 	bic.w	r3, r3, #7
90023be4:	f103 0108 	add.w	r1, r3, #8
90023be8:	f8c8 1000 	str.w	r1, [r8]
90023bec:	ed93 0b00 	vldr	d0, [r3]
90023bf0:	ed9f 6b97 	vldr	d6, [pc, #604]	; 90023e50 <_printf_float+0x2a0>
90023bf4:	eeb0 7bc0 	vabs.f64	d7, d0
90023bf8:	eeb4 7b46 	vcmp.f64	d7, d6
90023bfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
90023c00:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
90023c04:	4682      	mov	sl, r0
90023c06:	dd24      	ble.n	90023c52 <_printf_float+0xa2>
90023c08:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
90023c0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
90023c10:	d502      	bpl.n	90023c18 <_printf_float+0x68>
90023c12:	232d      	movs	r3, #45	; 0x2d
90023c14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
90023c18:	498f      	ldr	r1, [pc, #572]	; (90023e58 <_printf_float+0x2a8>)
90023c1a:	4b90      	ldr	r3, [pc, #576]	; (90023e5c <_printf_float+0x2ac>)
90023c1c:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
90023c20:	bf94      	ite	ls
90023c22:	4688      	movls	r8, r1
90023c24:	4698      	movhi	r8, r3
90023c26:	2303      	movs	r3, #3
90023c28:	6123      	str	r3, [r4, #16]
90023c2a:	f022 0204 	bic.w	r2, r2, #4
90023c2e:	2300      	movs	r3, #0
90023c30:	6022      	str	r2, [r4, #0]
90023c32:	9304      	str	r3, [sp, #16]
90023c34:	9700      	str	r7, [sp, #0]
90023c36:	4633      	mov	r3, r6
90023c38:	aa09      	add	r2, sp, #36	; 0x24
90023c3a:	4621      	mov	r1, r4
90023c3c:	4628      	mov	r0, r5
90023c3e:	f000 f9d1 	bl	90023fe4 <_printf_common>
90023c42:	3001      	adds	r0, #1
90023c44:	f040 808a 	bne.w	90023d5c <_printf_float+0x1ac>
90023c48:	f04f 30ff 	mov.w	r0, #4294967295
90023c4c:	b00b      	add	sp, #44	; 0x2c
90023c4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90023c52:	eeb4 0b40 	vcmp.f64	d0, d0
90023c56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
90023c5a:	d709      	bvc.n	90023c70 <_printf_float+0xc0>
90023c5c:	ee10 3a90 	vmov	r3, s1
90023c60:	2b00      	cmp	r3, #0
90023c62:	bfbc      	itt	lt
90023c64:	232d      	movlt	r3, #45	; 0x2d
90023c66:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
90023c6a:	497d      	ldr	r1, [pc, #500]	; (90023e60 <_printf_float+0x2b0>)
90023c6c:	4b7d      	ldr	r3, [pc, #500]	; (90023e64 <_printf_float+0x2b4>)
90023c6e:	e7d5      	b.n	90023c1c <_printf_float+0x6c>
90023c70:	6863      	ldr	r3, [r4, #4]
90023c72:	f009 01df 	and.w	r1, r9, #223	; 0xdf
90023c76:	9104      	str	r1, [sp, #16]
90023c78:	1c59      	adds	r1, r3, #1
90023c7a:	d13c      	bne.n	90023cf6 <_printf_float+0x146>
90023c7c:	2306      	movs	r3, #6
90023c7e:	6063      	str	r3, [r4, #4]
90023c80:	2300      	movs	r3, #0
90023c82:	9303      	str	r3, [sp, #12]
90023c84:	ab08      	add	r3, sp, #32
90023c86:	e9cd 9301 	strd	r9, r3, [sp, #4]
90023c8a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
90023c8e:	ab07      	add	r3, sp, #28
90023c90:	6861      	ldr	r1, [r4, #4]
90023c92:	9300      	str	r3, [sp, #0]
90023c94:	6022      	str	r2, [r4, #0]
90023c96:	f10d 031b 	add.w	r3, sp, #27
90023c9a:	4628      	mov	r0, r5
90023c9c:	f7ff fef8 	bl	90023a90 <__cvt>
90023ca0:	9b04      	ldr	r3, [sp, #16]
90023ca2:	9907      	ldr	r1, [sp, #28]
90023ca4:	2b47      	cmp	r3, #71	; 0x47
90023ca6:	4680      	mov	r8, r0
90023ca8:	d108      	bne.n	90023cbc <_printf_float+0x10c>
90023caa:	1cc8      	adds	r0, r1, #3
90023cac:	db02      	blt.n	90023cb4 <_printf_float+0x104>
90023cae:	6863      	ldr	r3, [r4, #4]
90023cb0:	4299      	cmp	r1, r3
90023cb2:	dd41      	ble.n	90023d38 <_printf_float+0x188>
90023cb4:	f1a9 0902 	sub.w	r9, r9, #2
90023cb8:	fa5f f989 	uxtb.w	r9, r9
90023cbc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
90023cc0:	d820      	bhi.n	90023d04 <_printf_float+0x154>
90023cc2:	3901      	subs	r1, #1
90023cc4:	464a      	mov	r2, r9
90023cc6:	f104 0050 	add.w	r0, r4, #80	; 0x50
90023cca:	9107      	str	r1, [sp, #28]
90023ccc:	f7ff ff32 	bl	90023b34 <__exponent>
90023cd0:	9a08      	ldr	r2, [sp, #32]
90023cd2:	9004      	str	r0, [sp, #16]
90023cd4:	1813      	adds	r3, r2, r0
90023cd6:	2a01      	cmp	r2, #1
90023cd8:	6123      	str	r3, [r4, #16]
90023cda:	dc02      	bgt.n	90023ce2 <_printf_float+0x132>
90023cdc:	6822      	ldr	r2, [r4, #0]
90023cde:	07d2      	lsls	r2, r2, #31
90023ce0:	d501      	bpl.n	90023ce6 <_printf_float+0x136>
90023ce2:	3301      	adds	r3, #1
90023ce4:	6123      	str	r3, [r4, #16]
90023ce6:	f89d 301b 	ldrb.w	r3, [sp, #27]
90023cea:	2b00      	cmp	r3, #0
90023cec:	d0a2      	beq.n	90023c34 <_printf_float+0x84>
90023cee:	232d      	movs	r3, #45	; 0x2d
90023cf0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
90023cf4:	e79e      	b.n	90023c34 <_printf_float+0x84>
90023cf6:	9904      	ldr	r1, [sp, #16]
90023cf8:	2947      	cmp	r1, #71	; 0x47
90023cfa:	d1c1      	bne.n	90023c80 <_printf_float+0xd0>
90023cfc:	2b00      	cmp	r3, #0
90023cfe:	d1bf      	bne.n	90023c80 <_printf_float+0xd0>
90023d00:	2301      	movs	r3, #1
90023d02:	e7bc      	b.n	90023c7e <_printf_float+0xce>
90023d04:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
90023d08:	d118      	bne.n	90023d3c <_printf_float+0x18c>
90023d0a:	2900      	cmp	r1, #0
90023d0c:	6863      	ldr	r3, [r4, #4]
90023d0e:	dd0b      	ble.n	90023d28 <_printf_float+0x178>
90023d10:	6121      	str	r1, [r4, #16]
90023d12:	b913      	cbnz	r3, 90023d1a <_printf_float+0x16a>
90023d14:	6822      	ldr	r2, [r4, #0]
90023d16:	07d0      	lsls	r0, r2, #31
90023d18:	d502      	bpl.n	90023d20 <_printf_float+0x170>
90023d1a:	3301      	adds	r3, #1
90023d1c:	440b      	add	r3, r1
90023d1e:	6123      	str	r3, [r4, #16]
90023d20:	2300      	movs	r3, #0
90023d22:	65a1      	str	r1, [r4, #88]	; 0x58
90023d24:	9304      	str	r3, [sp, #16]
90023d26:	e7de      	b.n	90023ce6 <_printf_float+0x136>
90023d28:	b913      	cbnz	r3, 90023d30 <_printf_float+0x180>
90023d2a:	6822      	ldr	r2, [r4, #0]
90023d2c:	07d2      	lsls	r2, r2, #31
90023d2e:	d501      	bpl.n	90023d34 <_printf_float+0x184>
90023d30:	3302      	adds	r3, #2
90023d32:	e7f4      	b.n	90023d1e <_printf_float+0x16e>
90023d34:	2301      	movs	r3, #1
90023d36:	e7f2      	b.n	90023d1e <_printf_float+0x16e>
90023d38:	f04f 0967 	mov.w	r9, #103	; 0x67
90023d3c:	9b08      	ldr	r3, [sp, #32]
90023d3e:	4299      	cmp	r1, r3
90023d40:	db05      	blt.n	90023d4e <_printf_float+0x19e>
90023d42:	6823      	ldr	r3, [r4, #0]
90023d44:	6121      	str	r1, [r4, #16]
90023d46:	07d8      	lsls	r0, r3, #31
90023d48:	d5ea      	bpl.n	90023d20 <_printf_float+0x170>
90023d4a:	1c4b      	adds	r3, r1, #1
90023d4c:	e7e7      	b.n	90023d1e <_printf_float+0x16e>
90023d4e:	2900      	cmp	r1, #0
90023d50:	bfd4      	ite	le
90023d52:	f1c1 0202 	rsble	r2, r1, #2
90023d56:	2201      	movgt	r2, #1
90023d58:	4413      	add	r3, r2
90023d5a:	e7e0      	b.n	90023d1e <_printf_float+0x16e>
90023d5c:	6823      	ldr	r3, [r4, #0]
90023d5e:	055a      	lsls	r2, r3, #21
90023d60:	d407      	bmi.n	90023d72 <_printf_float+0x1c2>
90023d62:	6923      	ldr	r3, [r4, #16]
90023d64:	4642      	mov	r2, r8
90023d66:	4631      	mov	r1, r6
90023d68:	4628      	mov	r0, r5
90023d6a:	47b8      	blx	r7
90023d6c:	3001      	adds	r0, #1
90023d6e:	d12a      	bne.n	90023dc6 <_printf_float+0x216>
90023d70:	e76a      	b.n	90023c48 <_printf_float+0x98>
90023d72:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
90023d76:	f240 80e0 	bls.w	90023f3a <_printf_float+0x38a>
90023d7a:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
90023d7e:	eeb5 7b40 	vcmp.f64	d7, #0.0
90023d82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
90023d86:	d133      	bne.n	90023df0 <_printf_float+0x240>
90023d88:	4a37      	ldr	r2, [pc, #220]	; (90023e68 <_printf_float+0x2b8>)
90023d8a:	2301      	movs	r3, #1
90023d8c:	4631      	mov	r1, r6
90023d8e:	4628      	mov	r0, r5
90023d90:	47b8      	blx	r7
90023d92:	3001      	adds	r0, #1
90023d94:	f43f af58 	beq.w	90023c48 <_printf_float+0x98>
90023d98:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
90023d9c:	429a      	cmp	r2, r3
90023d9e:	db02      	blt.n	90023da6 <_printf_float+0x1f6>
90023da0:	6823      	ldr	r3, [r4, #0]
90023da2:	07d8      	lsls	r0, r3, #31
90023da4:	d50f      	bpl.n	90023dc6 <_printf_float+0x216>
90023da6:	4653      	mov	r3, sl
90023da8:	465a      	mov	r2, fp
90023daa:	4631      	mov	r1, r6
90023dac:	4628      	mov	r0, r5
90023dae:	47b8      	blx	r7
90023db0:	3001      	adds	r0, #1
90023db2:	f43f af49 	beq.w	90023c48 <_printf_float+0x98>
90023db6:	f04f 0800 	mov.w	r8, #0
90023dba:	f104 091a 	add.w	r9, r4, #26
90023dbe:	9b08      	ldr	r3, [sp, #32]
90023dc0:	3b01      	subs	r3, #1
90023dc2:	4543      	cmp	r3, r8
90023dc4:	dc09      	bgt.n	90023dda <_printf_float+0x22a>
90023dc6:	6823      	ldr	r3, [r4, #0]
90023dc8:	079b      	lsls	r3, r3, #30
90023dca:	f100 8106 	bmi.w	90023fda <_printf_float+0x42a>
90023dce:	68e0      	ldr	r0, [r4, #12]
90023dd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
90023dd2:	4298      	cmp	r0, r3
90023dd4:	bfb8      	it	lt
90023dd6:	4618      	movlt	r0, r3
90023dd8:	e738      	b.n	90023c4c <_printf_float+0x9c>
90023dda:	2301      	movs	r3, #1
90023ddc:	464a      	mov	r2, r9
90023dde:	4631      	mov	r1, r6
90023de0:	4628      	mov	r0, r5
90023de2:	47b8      	blx	r7
90023de4:	3001      	adds	r0, #1
90023de6:	f43f af2f 	beq.w	90023c48 <_printf_float+0x98>
90023dea:	f108 0801 	add.w	r8, r8, #1
90023dee:	e7e6      	b.n	90023dbe <_printf_float+0x20e>
90023df0:	9b07      	ldr	r3, [sp, #28]
90023df2:	2b00      	cmp	r3, #0
90023df4:	dc3a      	bgt.n	90023e6c <_printf_float+0x2bc>
90023df6:	4a1c      	ldr	r2, [pc, #112]	; (90023e68 <_printf_float+0x2b8>)
90023df8:	2301      	movs	r3, #1
90023dfa:	4631      	mov	r1, r6
90023dfc:	4628      	mov	r0, r5
90023dfe:	47b8      	blx	r7
90023e00:	3001      	adds	r0, #1
90023e02:	f43f af21 	beq.w	90023c48 <_printf_float+0x98>
90023e06:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
90023e0a:	4313      	orrs	r3, r2
90023e0c:	d102      	bne.n	90023e14 <_printf_float+0x264>
90023e0e:	6823      	ldr	r3, [r4, #0]
90023e10:	07d9      	lsls	r1, r3, #31
90023e12:	d5d8      	bpl.n	90023dc6 <_printf_float+0x216>
90023e14:	4653      	mov	r3, sl
90023e16:	465a      	mov	r2, fp
90023e18:	4631      	mov	r1, r6
90023e1a:	4628      	mov	r0, r5
90023e1c:	47b8      	blx	r7
90023e1e:	3001      	adds	r0, #1
90023e20:	f43f af12 	beq.w	90023c48 <_printf_float+0x98>
90023e24:	f04f 0900 	mov.w	r9, #0
90023e28:	f104 0a1a 	add.w	sl, r4, #26
90023e2c:	9b07      	ldr	r3, [sp, #28]
90023e2e:	425b      	negs	r3, r3
90023e30:	454b      	cmp	r3, r9
90023e32:	dc01      	bgt.n	90023e38 <_printf_float+0x288>
90023e34:	9b08      	ldr	r3, [sp, #32]
90023e36:	e795      	b.n	90023d64 <_printf_float+0x1b4>
90023e38:	2301      	movs	r3, #1
90023e3a:	4652      	mov	r2, sl
90023e3c:	4631      	mov	r1, r6
90023e3e:	4628      	mov	r0, r5
90023e40:	47b8      	blx	r7
90023e42:	3001      	adds	r0, #1
90023e44:	f43f af00 	beq.w	90023c48 <_printf_float+0x98>
90023e48:	f109 0901 	add.w	r9, r9, #1
90023e4c:	e7ee      	b.n	90023e2c <_printf_float+0x27c>
90023e4e:	bf00      	nop
90023e50:	ffffffff 	.word	0xffffffff
90023e54:	7fefffff 	.word	0x7fefffff
90023e58:	90029218 	.word	0x90029218
90023e5c:	9002921c 	.word	0x9002921c
90023e60:	90029220 	.word	0x90029220
90023e64:	90029224 	.word	0x90029224
90023e68:	90029228 	.word	0x90029228
90023e6c:	9a08      	ldr	r2, [sp, #32]
90023e6e:	6da3      	ldr	r3, [r4, #88]	; 0x58
90023e70:	429a      	cmp	r2, r3
90023e72:	bfa8      	it	ge
90023e74:	461a      	movge	r2, r3
90023e76:	2a00      	cmp	r2, #0
90023e78:	4691      	mov	r9, r2
90023e7a:	dc38      	bgt.n	90023eee <_printf_float+0x33e>
90023e7c:	2300      	movs	r3, #0
90023e7e:	9305      	str	r3, [sp, #20]
90023e80:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
90023e84:	f104 021a 	add.w	r2, r4, #26
90023e88:	6da3      	ldr	r3, [r4, #88]	; 0x58
90023e8a:	9905      	ldr	r1, [sp, #20]
90023e8c:	9304      	str	r3, [sp, #16]
90023e8e:	eba3 0309 	sub.w	r3, r3, r9
90023e92:	428b      	cmp	r3, r1
90023e94:	dc33      	bgt.n	90023efe <_printf_float+0x34e>
90023e96:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
90023e9a:	429a      	cmp	r2, r3
90023e9c:	db3c      	blt.n	90023f18 <_printf_float+0x368>
90023e9e:	6823      	ldr	r3, [r4, #0]
90023ea0:	07da      	lsls	r2, r3, #31
90023ea2:	d439      	bmi.n	90023f18 <_printf_float+0x368>
90023ea4:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
90023ea8:	eba2 0903 	sub.w	r9, r2, r3
90023eac:	9b04      	ldr	r3, [sp, #16]
90023eae:	1ad2      	subs	r2, r2, r3
90023eb0:	4591      	cmp	r9, r2
90023eb2:	bfa8      	it	ge
90023eb4:	4691      	movge	r9, r2
90023eb6:	f1b9 0f00 	cmp.w	r9, #0
90023eba:	dc35      	bgt.n	90023f28 <_printf_float+0x378>
90023ebc:	f04f 0800 	mov.w	r8, #0
90023ec0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
90023ec4:	f104 0a1a 	add.w	sl, r4, #26
90023ec8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
90023ecc:	1a9b      	subs	r3, r3, r2
90023ece:	eba3 0309 	sub.w	r3, r3, r9
90023ed2:	4543      	cmp	r3, r8
90023ed4:	f77f af77 	ble.w	90023dc6 <_printf_float+0x216>
90023ed8:	2301      	movs	r3, #1
90023eda:	4652      	mov	r2, sl
90023edc:	4631      	mov	r1, r6
90023ede:	4628      	mov	r0, r5
90023ee0:	47b8      	blx	r7
90023ee2:	3001      	adds	r0, #1
90023ee4:	f43f aeb0 	beq.w	90023c48 <_printf_float+0x98>
90023ee8:	f108 0801 	add.w	r8, r8, #1
90023eec:	e7ec      	b.n	90023ec8 <_printf_float+0x318>
90023eee:	4613      	mov	r3, r2
90023ef0:	4631      	mov	r1, r6
90023ef2:	4642      	mov	r2, r8
90023ef4:	4628      	mov	r0, r5
90023ef6:	47b8      	blx	r7
90023ef8:	3001      	adds	r0, #1
90023efa:	d1bf      	bne.n	90023e7c <_printf_float+0x2cc>
90023efc:	e6a4      	b.n	90023c48 <_printf_float+0x98>
90023efe:	2301      	movs	r3, #1
90023f00:	4631      	mov	r1, r6
90023f02:	4628      	mov	r0, r5
90023f04:	9204      	str	r2, [sp, #16]
90023f06:	47b8      	blx	r7
90023f08:	3001      	adds	r0, #1
90023f0a:	f43f ae9d 	beq.w	90023c48 <_printf_float+0x98>
90023f0e:	9b05      	ldr	r3, [sp, #20]
90023f10:	9a04      	ldr	r2, [sp, #16]
90023f12:	3301      	adds	r3, #1
90023f14:	9305      	str	r3, [sp, #20]
90023f16:	e7b7      	b.n	90023e88 <_printf_float+0x2d8>
90023f18:	4653      	mov	r3, sl
90023f1a:	465a      	mov	r2, fp
90023f1c:	4631      	mov	r1, r6
90023f1e:	4628      	mov	r0, r5
90023f20:	47b8      	blx	r7
90023f22:	3001      	adds	r0, #1
90023f24:	d1be      	bne.n	90023ea4 <_printf_float+0x2f4>
90023f26:	e68f      	b.n	90023c48 <_printf_float+0x98>
90023f28:	9a04      	ldr	r2, [sp, #16]
90023f2a:	464b      	mov	r3, r9
90023f2c:	4442      	add	r2, r8
90023f2e:	4631      	mov	r1, r6
90023f30:	4628      	mov	r0, r5
90023f32:	47b8      	blx	r7
90023f34:	3001      	adds	r0, #1
90023f36:	d1c1      	bne.n	90023ebc <_printf_float+0x30c>
90023f38:	e686      	b.n	90023c48 <_printf_float+0x98>
90023f3a:	9a08      	ldr	r2, [sp, #32]
90023f3c:	2a01      	cmp	r2, #1
90023f3e:	dc01      	bgt.n	90023f44 <_printf_float+0x394>
90023f40:	07db      	lsls	r3, r3, #31
90023f42:	d537      	bpl.n	90023fb4 <_printf_float+0x404>
90023f44:	2301      	movs	r3, #1
90023f46:	4642      	mov	r2, r8
90023f48:	4631      	mov	r1, r6
90023f4a:	4628      	mov	r0, r5
90023f4c:	47b8      	blx	r7
90023f4e:	3001      	adds	r0, #1
90023f50:	f43f ae7a 	beq.w	90023c48 <_printf_float+0x98>
90023f54:	4653      	mov	r3, sl
90023f56:	465a      	mov	r2, fp
90023f58:	4631      	mov	r1, r6
90023f5a:	4628      	mov	r0, r5
90023f5c:	47b8      	blx	r7
90023f5e:	3001      	adds	r0, #1
90023f60:	f43f ae72 	beq.w	90023c48 <_printf_float+0x98>
90023f64:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
90023f68:	eeb5 7b40 	vcmp.f64	d7, #0.0
90023f6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
90023f70:	9b08      	ldr	r3, [sp, #32]
90023f72:	d01a      	beq.n	90023faa <_printf_float+0x3fa>
90023f74:	3b01      	subs	r3, #1
90023f76:	f108 0201 	add.w	r2, r8, #1
90023f7a:	4631      	mov	r1, r6
90023f7c:	4628      	mov	r0, r5
90023f7e:	47b8      	blx	r7
90023f80:	3001      	adds	r0, #1
90023f82:	d10e      	bne.n	90023fa2 <_printf_float+0x3f2>
90023f84:	e660      	b.n	90023c48 <_printf_float+0x98>
90023f86:	2301      	movs	r3, #1
90023f88:	464a      	mov	r2, r9
90023f8a:	4631      	mov	r1, r6
90023f8c:	4628      	mov	r0, r5
90023f8e:	47b8      	blx	r7
90023f90:	3001      	adds	r0, #1
90023f92:	f43f ae59 	beq.w	90023c48 <_printf_float+0x98>
90023f96:	f108 0801 	add.w	r8, r8, #1
90023f9a:	9b08      	ldr	r3, [sp, #32]
90023f9c:	3b01      	subs	r3, #1
90023f9e:	4543      	cmp	r3, r8
90023fa0:	dcf1      	bgt.n	90023f86 <_printf_float+0x3d6>
90023fa2:	9b04      	ldr	r3, [sp, #16]
90023fa4:	f104 0250 	add.w	r2, r4, #80	; 0x50
90023fa8:	e6dd      	b.n	90023d66 <_printf_float+0x1b6>
90023faa:	f04f 0800 	mov.w	r8, #0
90023fae:	f104 091a 	add.w	r9, r4, #26
90023fb2:	e7f2      	b.n	90023f9a <_printf_float+0x3ea>
90023fb4:	2301      	movs	r3, #1
90023fb6:	4642      	mov	r2, r8
90023fb8:	e7df      	b.n	90023f7a <_printf_float+0x3ca>
90023fba:	2301      	movs	r3, #1
90023fbc:	464a      	mov	r2, r9
90023fbe:	4631      	mov	r1, r6
90023fc0:	4628      	mov	r0, r5
90023fc2:	47b8      	blx	r7
90023fc4:	3001      	adds	r0, #1
90023fc6:	f43f ae3f 	beq.w	90023c48 <_printf_float+0x98>
90023fca:	f108 0801 	add.w	r8, r8, #1
90023fce:	68e3      	ldr	r3, [r4, #12]
90023fd0:	9909      	ldr	r1, [sp, #36]	; 0x24
90023fd2:	1a5b      	subs	r3, r3, r1
90023fd4:	4543      	cmp	r3, r8
90023fd6:	dcf0      	bgt.n	90023fba <_printf_float+0x40a>
90023fd8:	e6f9      	b.n	90023dce <_printf_float+0x21e>
90023fda:	f04f 0800 	mov.w	r8, #0
90023fde:	f104 0919 	add.w	r9, r4, #25
90023fe2:	e7f4      	b.n	90023fce <_printf_float+0x41e>

90023fe4 <_printf_common>:
90023fe4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
90023fe8:	4616      	mov	r6, r2
90023fea:	4699      	mov	r9, r3
90023fec:	688a      	ldr	r2, [r1, #8]
90023fee:	690b      	ldr	r3, [r1, #16]
90023ff0:	f8dd 8020 	ldr.w	r8, [sp, #32]
90023ff4:	4293      	cmp	r3, r2
90023ff6:	bfb8      	it	lt
90023ff8:	4613      	movlt	r3, r2
90023ffa:	6033      	str	r3, [r6, #0]
90023ffc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
90024000:	4607      	mov	r7, r0
90024002:	460c      	mov	r4, r1
90024004:	b10a      	cbz	r2, 9002400a <_printf_common+0x26>
90024006:	3301      	adds	r3, #1
90024008:	6033      	str	r3, [r6, #0]
9002400a:	6823      	ldr	r3, [r4, #0]
9002400c:	0699      	lsls	r1, r3, #26
9002400e:	bf42      	ittt	mi
90024010:	6833      	ldrmi	r3, [r6, #0]
90024012:	3302      	addmi	r3, #2
90024014:	6033      	strmi	r3, [r6, #0]
90024016:	6825      	ldr	r5, [r4, #0]
90024018:	f015 0506 	ands.w	r5, r5, #6
9002401c:	d106      	bne.n	9002402c <_printf_common+0x48>
9002401e:	f104 0a19 	add.w	sl, r4, #25
90024022:	68e3      	ldr	r3, [r4, #12]
90024024:	6832      	ldr	r2, [r6, #0]
90024026:	1a9b      	subs	r3, r3, r2
90024028:	42ab      	cmp	r3, r5
9002402a:	dc26      	bgt.n	9002407a <_printf_common+0x96>
9002402c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
90024030:	1e13      	subs	r3, r2, #0
90024032:	6822      	ldr	r2, [r4, #0]
90024034:	bf18      	it	ne
90024036:	2301      	movne	r3, #1
90024038:	0692      	lsls	r2, r2, #26
9002403a:	d42b      	bmi.n	90024094 <_printf_common+0xb0>
9002403c:	f104 0243 	add.w	r2, r4, #67	; 0x43
90024040:	4649      	mov	r1, r9
90024042:	4638      	mov	r0, r7
90024044:	47c0      	blx	r8
90024046:	3001      	adds	r0, #1
90024048:	d01e      	beq.n	90024088 <_printf_common+0xa4>
9002404a:	6823      	ldr	r3, [r4, #0]
9002404c:	6922      	ldr	r2, [r4, #16]
9002404e:	f003 0306 	and.w	r3, r3, #6
90024052:	2b04      	cmp	r3, #4
90024054:	bf02      	ittt	eq
90024056:	68e5      	ldreq	r5, [r4, #12]
90024058:	6833      	ldreq	r3, [r6, #0]
9002405a:	1aed      	subeq	r5, r5, r3
9002405c:	68a3      	ldr	r3, [r4, #8]
9002405e:	bf0c      	ite	eq
90024060:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
90024064:	2500      	movne	r5, #0
90024066:	4293      	cmp	r3, r2
90024068:	bfc4      	itt	gt
9002406a:	1a9b      	subgt	r3, r3, r2
9002406c:	18ed      	addgt	r5, r5, r3
9002406e:	2600      	movs	r6, #0
90024070:	341a      	adds	r4, #26
90024072:	42b5      	cmp	r5, r6
90024074:	d11a      	bne.n	900240ac <_printf_common+0xc8>
90024076:	2000      	movs	r0, #0
90024078:	e008      	b.n	9002408c <_printf_common+0xa8>
9002407a:	2301      	movs	r3, #1
9002407c:	4652      	mov	r2, sl
9002407e:	4649      	mov	r1, r9
90024080:	4638      	mov	r0, r7
90024082:	47c0      	blx	r8
90024084:	3001      	adds	r0, #1
90024086:	d103      	bne.n	90024090 <_printf_common+0xac>
90024088:	f04f 30ff 	mov.w	r0, #4294967295
9002408c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
90024090:	3501      	adds	r5, #1
90024092:	e7c6      	b.n	90024022 <_printf_common+0x3e>
90024094:	18e1      	adds	r1, r4, r3
90024096:	1c5a      	adds	r2, r3, #1
90024098:	2030      	movs	r0, #48	; 0x30
9002409a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
9002409e:	4422      	add	r2, r4
900240a0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
900240a4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
900240a8:	3302      	adds	r3, #2
900240aa:	e7c7      	b.n	9002403c <_printf_common+0x58>
900240ac:	2301      	movs	r3, #1
900240ae:	4622      	mov	r2, r4
900240b0:	4649      	mov	r1, r9
900240b2:	4638      	mov	r0, r7
900240b4:	47c0      	blx	r8
900240b6:	3001      	adds	r0, #1
900240b8:	d0e6      	beq.n	90024088 <_printf_common+0xa4>
900240ba:	3601      	adds	r6, #1
900240bc:	e7d9      	b.n	90024072 <_printf_common+0x8e>
	...

900240c0 <_printf_i>:
900240c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
900240c4:	7e0f      	ldrb	r7, [r1, #24]
900240c6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
900240c8:	2f78      	cmp	r7, #120	; 0x78
900240ca:	4691      	mov	r9, r2
900240cc:	4680      	mov	r8, r0
900240ce:	460c      	mov	r4, r1
900240d0:	469a      	mov	sl, r3
900240d2:	f101 0243 	add.w	r2, r1, #67	; 0x43
900240d6:	d807      	bhi.n	900240e8 <_printf_i+0x28>
900240d8:	2f62      	cmp	r7, #98	; 0x62
900240da:	d80a      	bhi.n	900240f2 <_printf_i+0x32>
900240dc:	2f00      	cmp	r7, #0
900240de:	f000 80d4 	beq.w	9002428a <_printf_i+0x1ca>
900240e2:	2f58      	cmp	r7, #88	; 0x58
900240e4:	f000 80c0 	beq.w	90024268 <_printf_i+0x1a8>
900240e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
900240ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
900240f0:	e03a      	b.n	90024168 <_printf_i+0xa8>
900240f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
900240f6:	2b15      	cmp	r3, #21
900240f8:	d8f6      	bhi.n	900240e8 <_printf_i+0x28>
900240fa:	a101      	add	r1, pc, #4	; (adr r1, 90024100 <_printf_i+0x40>)
900240fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
90024100:	90024159 	.word	0x90024159
90024104:	9002416d 	.word	0x9002416d
90024108:	900240e9 	.word	0x900240e9
9002410c:	900240e9 	.word	0x900240e9
90024110:	900240e9 	.word	0x900240e9
90024114:	900240e9 	.word	0x900240e9
90024118:	9002416d 	.word	0x9002416d
9002411c:	900240e9 	.word	0x900240e9
90024120:	900240e9 	.word	0x900240e9
90024124:	900240e9 	.word	0x900240e9
90024128:	900240e9 	.word	0x900240e9
9002412c:	90024271 	.word	0x90024271
90024130:	90024199 	.word	0x90024199
90024134:	9002422b 	.word	0x9002422b
90024138:	900240e9 	.word	0x900240e9
9002413c:	900240e9 	.word	0x900240e9
90024140:	90024293 	.word	0x90024293
90024144:	900240e9 	.word	0x900240e9
90024148:	90024199 	.word	0x90024199
9002414c:	900240e9 	.word	0x900240e9
90024150:	900240e9 	.word	0x900240e9
90024154:	90024233 	.word	0x90024233
90024158:	682b      	ldr	r3, [r5, #0]
9002415a:	1d1a      	adds	r2, r3, #4
9002415c:	681b      	ldr	r3, [r3, #0]
9002415e:	602a      	str	r2, [r5, #0]
90024160:	f104 0542 	add.w	r5, r4, #66	; 0x42
90024164:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
90024168:	2301      	movs	r3, #1
9002416a:	e09f      	b.n	900242ac <_printf_i+0x1ec>
9002416c:	6820      	ldr	r0, [r4, #0]
9002416e:	682b      	ldr	r3, [r5, #0]
90024170:	0607      	lsls	r7, r0, #24
90024172:	f103 0104 	add.w	r1, r3, #4
90024176:	6029      	str	r1, [r5, #0]
90024178:	d501      	bpl.n	9002417e <_printf_i+0xbe>
9002417a:	681e      	ldr	r6, [r3, #0]
9002417c:	e003      	b.n	90024186 <_printf_i+0xc6>
9002417e:	0646      	lsls	r6, r0, #25
90024180:	d5fb      	bpl.n	9002417a <_printf_i+0xba>
90024182:	f9b3 6000 	ldrsh.w	r6, [r3]
90024186:	2e00      	cmp	r6, #0
90024188:	da03      	bge.n	90024192 <_printf_i+0xd2>
9002418a:	232d      	movs	r3, #45	; 0x2d
9002418c:	4276      	negs	r6, r6
9002418e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
90024192:	485a      	ldr	r0, [pc, #360]	; (900242fc <_printf_i+0x23c>)
90024194:	230a      	movs	r3, #10
90024196:	e012      	b.n	900241be <_printf_i+0xfe>
90024198:	682b      	ldr	r3, [r5, #0]
9002419a:	6820      	ldr	r0, [r4, #0]
9002419c:	1d19      	adds	r1, r3, #4
9002419e:	6029      	str	r1, [r5, #0]
900241a0:	0605      	lsls	r5, r0, #24
900241a2:	d501      	bpl.n	900241a8 <_printf_i+0xe8>
900241a4:	681e      	ldr	r6, [r3, #0]
900241a6:	e002      	b.n	900241ae <_printf_i+0xee>
900241a8:	0641      	lsls	r1, r0, #25
900241aa:	d5fb      	bpl.n	900241a4 <_printf_i+0xe4>
900241ac:	881e      	ldrh	r6, [r3, #0]
900241ae:	4853      	ldr	r0, [pc, #332]	; (900242fc <_printf_i+0x23c>)
900241b0:	2f6f      	cmp	r7, #111	; 0x6f
900241b2:	bf0c      	ite	eq
900241b4:	2308      	moveq	r3, #8
900241b6:	230a      	movne	r3, #10
900241b8:	2100      	movs	r1, #0
900241ba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
900241be:	6865      	ldr	r5, [r4, #4]
900241c0:	60a5      	str	r5, [r4, #8]
900241c2:	2d00      	cmp	r5, #0
900241c4:	bfa2      	ittt	ge
900241c6:	6821      	ldrge	r1, [r4, #0]
900241c8:	f021 0104 	bicge.w	r1, r1, #4
900241cc:	6021      	strge	r1, [r4, #0]
900241ce:	b90e      	cbnz	r6, 900241d4 <_printf_i+0x114>
900241d0:	2d00      	cmp	r5, #0
900241d2:	d04b      	beq.n	9002426c <_printf_i+0x1ac>
900241d4:	4615      	mov	r5, r2
900241d6:	fbb6 f1f3 	udiv	r1, r6, r3
900241da:	fb03 6711 	mls	r7, r3, r1, r6
900241de:	5dc7      	ldrb	r7, [r0, r7]
900241e0:	f805 7d01 	strb.w	r7, [r5, #-1]!
900241e4:	4637      	mov	r7, r6
900241e6:	42bb      	cmp	r3, r7
900241e8:	460e      	mov	r6, r1
900241ea:	d9f4      	bls.n	900241d6 <_printf_i+0x116>
900241ec:	2b08      	cmp	r3, #8
900241ee:	d10b      	bne.n	90024208 <_printf_i+0x148>
900241f0:	6823      	ldr	r3, [r4, #0]
900241f2:	07de      	lsls	r6, r3, #31
900241f4:	d508      	bpl.n	90024208 <_printf_i+0x148>
900241f6:	6923      	ldr	r3, [r4, #16]
900241f8:	6861      	ldr	r1, [r4, #4]
900241fa:	4299      	cmp	r1, r3
900241fc:	bfde      	ittt	le
900241fe:	2330      	movle	r3, #48	; 0x30
90024200:	f805 3c01 	strble.w	r3, [r5, #-1]
90024204:	f105 35ff 	addle.w	r5, r5, #4294967295
90024208:	1b52      	subs	r2, r2, r5
9002420a:	6122      	str	r2, [r4, #16]
9002420c:	f8cd a000 	str.w	sl, [sp]
90024210:	464b      	mov	r3, r9
90024212:	aa03      	add	r2, sp, #12
90024214:	4621      	mov	r1, r4
90024216:	4640      	mov	r0, r8
90024218:	f7ff fee4 	bl	90023fe4 <_printf_common>
9002421c:	3001      	adds	r0, #1
9002421e:	d14a      	bne.n	900242b6 <_printf_i+0x1f6>
90024220:	f04f 30ff 	mov.w	r0, #4294967295
90024224:	b004      	add	sp, #16
90024226:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
9002422a:	6823      	ldr	r3, [r4, #0]
9002422c:	f043 0320 	orr.w	r3, r3, #32
90024230:	6023      	str	r3, [r4, #0]
90024232:	4833      	ldr	r0, [pc, #204]	; (90024300 <_printf_i+0x240>)
90024234:	2778      	movs	r7, #120	; 0x78
90024236:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
9002423a:	6823      	ldr	r3, [r4, #0]
9002423c:	6829      	ldr	r1, [r5, #0]
9002423e:	061f      	lsls	r7, r3, #24
90024240:	f851 6b04 	ldr.w	r6, [r1], #4
90024244:	d402      	bmi.n	9002424c <_printf_i+0x18c>
90024246:	065f      	lsls	r7, r3, #25
90024248:	bf48      	it	mi
9002424a:	b2b6      	uxthmi	r6, r6
9002424c:	07df      	lsls	r7, r3, #31
9002424e:	bf48      	it	mi
90024250:	f043 0320 	orrmi.w	r3, r3, #32
90024254:	6029      	str	r1, [r5, #0]
90024256:	bf48      	it	mi
90024258:	6023      	strmi	r3, [r4, #0]
9002425a:	b91e      	cbnz	r6, 90024264 <_printf_i+0x1a4>
9002425c:	6823      	ldr	r3, [r4, #0]
9002425e:	f023 0320 	bic.w	r3, r3, #32
90024262:	6023      	str	r3, [r4, #0]
90024264:	2310      	movs	r3, #16
90024266:	e7a7      	b.n	900241b8 <_printf_i+0xf8>
90024268:	4824      	ldr	r0, [pc, #144]	; (900242fc <_printf_i+0x23c>)
9002426a:	e7e4      	b.n	90024236 <_printf_i+0x176>
9002426c:	4615      	mov	r5, r2
9002426e:	e7bd      	b.n	900241ec <_printf_i+0x12c>
90024270:	682b      	ldr	r3, [r5, #0]
90024272:	6826      	ldr	r6, [r4, #0]
90024274:	6961      	ldr	r1, [r4, #20]
90024276:	1d18      	adds	r0, r3, #4
90024278:	6028      	str	r0, [r5, #0]
9002427a:	0635      	lsls	r5, r6, #24
9002427c:	681b      	ldr	r3, [r3, #0]
9002427e:	d501      	bpl.n	90024284 <_printf_i+0x1c4>
90024280:	6019      	str	r1, [r3, #0]
90024282:	e002      	b.n	9002428a <_printf_i+0x1ca>
90024284:	0670      	lsls	r0, r6, #25
90024286:	d5fb      	bpl.n	90024280 <_printf_i+0x1c0>
90024288:	8019      	strh	r1, [r3, #0]
9002428a:	2300      	movs	r3, #0
9002428c:	6123      	str	r3, [r4, #16]
9002428e:	4615      	mov	r5, r2
90024290:	e7bc      	b.n	9002420c <_printf_i+0x14c>
90024292:	682b      	ldr	r3, [r5, #0]
90024294:	1d1a      	adds	r2, r3, #4
90024296:	602a      	str	r2, [r5, #0]
90024298:	681d      	ldr	r5, [r3, #0]
9002429a:	6862      	ldr	r2, [r4, #4]
9002429c:	2100      	movs	r1, #0
9002429e:	4628      	mov	r0, r5
900242a0:	f7dc f81e 	bl	900002e0 <memchr>
900242a4:	b108      	cbz	r0, 900242aa <_printf_i+0x1ea>
900242a6:	1b40      	subs	r0, r0, r5
900242a8:	6060      	str	r0, [r4, #4]
900242aa:	6863      	ldr	r3, [r4, #4]
900242ac:	6123      	str	r3, [r4, #16]
900242ae:	2300      	movs	r3, #0
900242b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
900242b4:	e7aa      	b.n	9002420c <_printf_i+0x14c>
900242b6:	6923      	ldr	r3, [r4, #16]
900242b8:	462a      	mov	r2, r5
900242ba:	4649      	mov	r1, r9
900242bc:	4640      	mov	r0, r8
900242be:	47d0      	blx	sl
900242c0:	3001      	adds	r0, #1
900242c2:	d0ad      	beq.n	90024220 <_printf_i+0x160>
900242c4:	6823      	ldr	r3, [r4, #0]
900242c6:	079b      	lsls	r3, r3, #30
900242c8:	d413      	bmi.n	900242f2 <_printf_i+0x232>
900242ca:	68e0      	ldr	r0, [r4, #12]
900242cc:	9b03      	ldr	r3, [sp, #12]
900242ce:	4298      	cmp	r0, r3
900242d0:	bfb8      	it	lt
900242d2:	4618      	movlt	r0, r3
900242d4:	e7a6      	b.n	90024224 <_printf_i+0x164>
900242d6:	2301      	movs	r3, #1
900242d8:	4632      	mov	r2, r6
900242da:	4649      	mov	r1, r9
900242dc:	4640      	mov	r0, r8
900242de:	47d0      	blx	sl
900242e0:	3001      	adds	r0, #1
900242e2:	d09d      	beq.n	90024220 <_printf_i+0x160>
900242e4:	3501      	adds	r5, #1
900242e6:	68e3      	ldr	r3, [r4, #12]
900242e8:	9903      	ldr	r1, [sp, #12]
900242ea:	1a5b      	subs	r3, r3, r1
900242ec:	42ab      	cmp	r3, r5
900242ee:	dcf2      	bgt.n	900242d6 <_printf_i+0x216>
900242f0:	e7eb      	b.n	900242ca <_printf_i+0x20a>
900242f2:	2500      	movs	r5, #0
900242f4:	f104 0619 	add.w	r6, r4, #25
900242f8:	e7f5      	b.n	900242e6 <_printf_i+0x226>
900242fa:	bf00      	nop
900242fc:	9002922a 	.word	0x9002922a
90024300:	9002923b 	.word	0x9002923b

90024304 <std>:
90024304:	2300      	movs	r3, #0
90024306:	b510      	push	{r4, lr}
90024308:	4604      	mov	r4, r0
9002430a:	e9c0 3300 	strd	r3, r3, [r0]
9002430e:	e9c0 3304 	strd	r3, r3, [r0, #16]
90024312:	6083      	str	r3, [r0, #8]
90024314:	8181      	strh	r1, [r0, #12]
90024316:	6643      	str	r3, [r0, #100]	; 0x64
90024318:	81c2      	strh	r2, [r0, #14]
9002431a:	6183      	str	r3, [r0, #24]
9002431c:	4619      	mov	r1, r3
9002431e:	2208      	movs	r2, #8
90024320:	305c      	adds	r0, #92	; 0x5c
90024322:	f000 f9bd 	bl	900246a0 <memset>
90024326:	4b05      	ldr	r3, [pc, #20]	; (9002433c <std+0x38>)
90024328:	6263      	str	r3, [r4, #36]	; 0x24
9002432a:	4b05      	ldr	r3, [pc, #20]	; (90024340 <std+0x3c>)
9002432c:	62a3      	str	r3, [r4, #40]	; 0x28
9002432e:	4b05      	ldr	r3, [pc, #20]	; (90024344 <std+0x40>)
90024330:	62e3      	str	r3, [r4, #44]	; 0x2c
90024332:	4b05      	ldr	r3, [pc, #20]	; (90024348 <std+0x44>)
90024334:	6224      	str	r4, [r4, #32]
90024336:	6323      	str	r3, [r4, #48]	; 0x30
90024338:	bd10      	pop	{r4, pc}
9002433a:	bf00      	nop
9002433c:	900244f1 	.word	0x900244f1
90024340:	90024513 	.word	0x90024513
90024344:	9002454b 	.word	0x9002454b
90024348:	9002456f 	.word	0x9002456f

9002434c <stdio_exit_handler>:
9002434c:	4a02      	ldr	r2, [pc, #8]	; (90024358 <stdio_exit_handler+0xc>)
9002434e:	4903      	ldr	r1, [pc, #12]	; (9002435c <stdio_exit_handler+0x10>)
90024350:	4803      	ldr	r0, [pc, #12]	; (90024360 <stdio_exit_handler+0x14>)
90024352:	f000 b87b 	b.w	9002444c <_fwalk_sglue>
90024356:	bf00      	nop
90024358:	240000fc 	.word	0x240000fc
9002435c:	9002632d 	.word	0x9002632d
90024360:	24000108 	.word	0x24000108

90024364 <cleanup_stdio>:
90024364:	6841      	ldr	r1, [r0, #4]
90024366:	4b0c      	ldr	r3, [pc, #48]	; (90024398 <cleanup_stdio+0x34>)
90024368:	4299      	cmp	r1, r3
9002436a:	b510      	push	{r4, lr}
9002436c:	4604      	mov	r4, r0
9002436e:	d001      	beq.n	90024374 <cleanup_stdio+0x10>
90024370:	f001 ffdc 	bl	9002632c <_fflush_r>
90024374:	68a1      	ldr	r1, [r4, #8]
90024376:	4b09      	ldr	r3, [pc, #36]	; (9002439c <cleanup_stdio+0x38>)
90024378:	4299      	cmp	r1, r3
9002437a:	d002      	beq.n	90024382 <cleanup_stdio+0x1e>
9002437c:	4620      	mov	r0, r4
9002437e:	f001 ffd5 	bl	9002632c <_fflush_r>
90024382:	68e1      	ldr	r1, [r4, #12]
90024384:	4b06      	ldr	r3, [pc, #24]	; (900243a0 <cleanup_stdio+0x3c>)
90024386:	4299      	cmp	r1, r3
90024388:	d004      	beq.n	90024394 <cleanup_stdio+0x30>
9002438a:	4620      	mov	r0, r4
9002438c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
90024390:	f001 bfcc 	b.w	9002632c <_fflush_r>
90024394:	bd10      	pop	{r4, pc}
90024396:	bf00      	nop
90024398:	24022568 	.word	0x24022568
9002439c:	240225d0 	.word	0x240225d0
900243a0:	24022638 	.word	0x24022638

900243a4 <global_stdio_init.part.0>:
900243a4:	b510      	push	{r4, lr}
900243a6:	4b0b      	ldr	r3, [pc, #44]	; (900243d4 <global_stdio_init.part.0+0x30>)
900243a8:	4c0b      	ldr	r4, [pc, #44]	; (900243d8 <global_stdio_init.part.0+0x34>)
900243aa:	4a0c      	ldr	r2, [pc, #48]	; (900243dc <global_stdio_init.part.0+0x38>)
900243ac:	601a      	str	r2, [r3, #0]
900243ae:	4620      	mov	r0, r4
900243b0:	2200      	movs	r2, #0
900243b2:	2104      	movs	r1, #4
900243b4:	f7ff ffa6 	bl	90024304 <std>
900243b8:	f104 0068 	add.w	r0, r4, #104	; 0x68
900243bc:	2201      	movs	r2, #1
900243be:	2109      	movs	r1, #9
900243c0:	f7ff ffa0 	bl	90024304 <std>
900243c4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
900243c8:	2202      	movs	r2, #2
900243ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
900243ce:	2112      	movs	r1, #18
900243d0:	f7ff bf98 	b.w	90024304 <std>
900243d4:	240226a0 	.word	0x240226a0
900243d8:	24022568 	.word	0x24022568
900243dc:	9002434d 	.word	0x9002434d

900243e0 <__sfp_lock_acquire>:
900243e0:	4801      	ldr	r0, [pc, #4]	; (900243e8 <__sfp_lock_acquire+0x8>)
900243e2:	f000 ba55 	b.w	90024890 <__retarget_lock_acquire_recursive>
900243e6:	bf00      	nop
900243e8:	240226aa 	.word	0x240226aa

900243ec <__sfp_lock_release>:
900243ec:	4801      	ldr	r0, [pc, #4]	; (900243f4 <__sfp_lock_release+0x8>)
900243ee:	f000 ba50 	b.w	90024892 <__retarget_lock_release_recursive>
900243f2:	bf00      	nop
900243f4:	240226aa 	.word	0x240226aa

900243f8 <__sinit>:
900243f8:	b510      	push	{r4, lr}
900243fa:	4604      	mov	r4, r0
900243fc:	f7ff fff0 	bl	900243e0 <__sfp_lock_acquire>
90024400:	6a23      	ldr	r3, [r4, #32]
90024402:	b11b      	cbz	r3, 9002440c <__sinit+0x14>
90024404:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
90024408:	f7ff bff0 	b.w	900243ec <__sfp_lock_release>
9002440c:	4b04      	ldr	r3, [pc, #16]	; (90024420 <__sinit+0x28>)
9002440e:	6223      	str	r3, [r4, #32]
90024410:	4b04      	ldr	r3, [pc, #16]	; (90024424 <__sinit+0x2c>)
90024412:	681b      	ldr	r3, [r3, #0]
90024414:	2b00      	cmp	r3, #0
90024416:	d1f5      	bne.n	90024404 <__sinit+0xc>
90024418:	f7ff ffc4 	bl	900243a4 <global_stdio_init.part.0>
9002441c:	e7f2      	b.n	90024404 <__sinit+0xc>
9002441e:	bf00      	nop
90024420:	90024365 	.word	0x90024365
90024424:	240226a0 	.word	0x240226a0

90024428 <fiprintf>:
90024428:	b40e      	push	{r1, r2, r3}
9002442a:	b503      	push	{r0, r1, lr}
9002442c:	4601      	mov	r1, r0
9002442e:	ab03      	add	r3, sp, #12
90024430:	4805      	ldr	r0, [pc, #20]	; (90024448 <fiprintf+0x20>)
90024432:	f853 2b04 	ldr.w	r2, [r3], #4
90024436:	6800      	ldr	r0, [r0, #0]
90024438:	9301      	str	r3, [sp, #4]
9002443a:	f001 fdd7 	bl	90025fec <_vfiprintf_r>
9002443e:	b002      	add	sp, #8
90024440:	f85d eb04 	ldr.w	lr, [sp], #4
90024444:	b003      	add	sp, #12
90024446:	4770      	bx	lr
90024448:	24000154 	.word	0x24000154

9002444c <_fwalk_sglue>:
9002444c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
90024450:	4607      	mov	r7, r0
90024452:	4688      	mov	r8, r1
90024454:	4614      	mov	r4, r2
90024456:	2600      	movs	r6, #0
90024458:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
9002445c:	f1b9 0901 	subs.w	r9, r9, #1
90024460:	d505      	bpl.n	9002446e <_fwalk_sglue+0x22>
90024462:	6824      	ldr	r4, [r4, #0]
90024464:	2c00      	cmp	r4, #0
90024466:	d1f7      	bne.n	90024458 <_fwalk_sglue+0xc>
90024468:	4630      	mov	r0, r6
9002446a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
9002446e:	89ab      	ldrh	r3, [r5, #12]
90024470:	2b01      	cmp	r3, #1
90024472:	d907      	bls.n	90024484 <_fwalk_sglue+0x38>
90024474:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
90024478:	3301      	adds	r3, #1
9002447a:	d003      	beq.n	90024484 <_fwalk_sglue+0x38>
9002447c:	4629      	mov	r1, r5
9002447e:	4638      	mov	r0, r7
90024480:	47c0      	blx	r8
90024482:	4306      	orrs	r6, r0
90024484:	3568      	adds	r5, #104	; 0x68
90024486:	e7e9      	b.n	9002445c <_fwalk_sglue+0x10>

90024488 <sniprintf>:
90024488:	b40c      	push	{r2, r3}
9002448a:	b530      	push	{r4, r5, lr}
9002448c:	4b17      	ldr	r3, [pc, #92]	; (900244ec <sniprintf+0x64>)
9002448e:	1e0c      	subs	r4, r1, #0
90024490:	681d      	ldr	r5, [r3, #0]
90024492:	b09d      	sub	sp, #116	; 0x74
90024494:	da08      	bge.n	900244a8 <sniprintf+0x20>
90024496:	238b      	movs	r3, #139	; 0x8b
90024498:	602b      	str	r3, [r5, #0]
9002449a:	f04f 30ff 	mov.w	r0, #4294967295
9002449e:	b01d      	add	sp, #116	; 0x74
900244a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
900244a4:	b002      	add	sp, #8
900244a6:	4770      	bx	lr
900244a8:	f44f 7302 	mov.w	r3, #520	; 0x208
900244ac:	f8ad 3014 	strh.w	r3, [sp, #20]
900244b0:	bf14      	ite	ne
900244b2:	f104 33ff 	addne.w	r3, r4, #4294967295
900244b6:	4623      	moveq	r3, r4
900244b8:	9304      	str	r3, [sp, #16]
900244ba:	9307      	str	r3, [sp, #28]
900244bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
900244c0:	9002      	str	r0, [sp, #8]
900244c2:	9006      	str	r0, [sp, #24]
900244c4:	f8ad 3016 	strh.w	r3, [sp, #22]
900244c8:	9a20      	ldr	r2, [sp, #128]	; 0x80
900244ca:	ab21      	add	r3, sp, #132	; 0x84
900244cc:	a902      	add	r1, sp, #8
900244ce:	4628      	mov	r0, r5
900244d0:	9301      	str	r3, [sp, #4]
900244d2:	f001 fc63 	bl	90025d9c <_svfiprintf_r>
900244d6:	1c43      	adds	r3, r0, #1
900244d8:	bfbc      	itt	lt
900244da:	238b      	movlt	r3, #139	; 0x8b
900244dc:	602b      	strlt	r3, [r5, #0]
900244de:	2c00      	cmp	r4, #0
900244e0:	d0dd      	beq.n	9002449e <sniprintf+0x16>
900244e2:	9b02      	ldr	r3, [sp, #8]
900244e4:	2200      	movs	r2, #0
900244e6:	701a      	strb	r2, [r3, #0]
900244e8:	e7d9      	b.n	9002449e <sniprintf+0x16>
900244ea:	bf00      	nop
900244ec:	24000154 	.word	0x24000154

900244f0 <__sread>:
900244f0:	b510      	push	{r4, lr}
900244f2:	460c      	mov	r4, r1
900244f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
900244f8:	f000 f958 	bl	900247ac <_read_r>
900244fc:	2800      	cmp	r0, #0
900244fe:	bfab      	itete	ge
90024500:	6d63      	ldrge	r3, [r4, #84]	; 0x54
90024502:	89a3      	ldrhlt	r3, [r4, #12]
90024504:	181b      	addge	r3, r3, r0
90024506:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
9002450a:	bfac      	ite	ge
9002450c:	6563      	strge	r3, [r4, #84]	; 0x54
9002450e:	81a3      	strhlt	r3, [r4, #12]
90024510:	bd10      	pop	{r4, pc}

90024512 <__swrite>:
90024512:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90024516:	461f      	mov	r7, r3
90024518:	898b      	ldrh	r3, [r1, #12]
9002451a:	05db      	lsls	r3, r3, #23
9002451c:	4605      	mov	r5, r0
9002451e:	460c      	mov	r4, r1
90024520:	4616      	mov	r6, r2
90024522:	d505      	bpl.n	90024530 <__swrite+0x1e>
90024524:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
90024528:	2302      	movs	r3, #2
9002452a:	2200      	movs	r2, #0
9002452c:	f000 f92c 	bl	90024788 <_lseek_r>
90024530:	89a3      	ldrh	r3, [r4, #12]
90024532:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
90024536:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
9002453a:	81a3      	strh	r3, [r4, #12]
9002453c:	4632      	mov	r2, r6
9002453e:	463b      	mov	r3, r7
90024540:	4628      	mov	r0, r5
90024542:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
90024546:	f000 b967 	b.w	90024818 <_write_r>

9002454a <__sseek>:
9002454a:	b510      	push	{r4, lr}
9002454c:	460c      	mov	r4, r1
9002454e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
90024552:	f000 f919 	bl	90024788 <_lseek_r>
90024556:	1c43      	adds	r3, r0, #1
90024558:	89a3      	ldrh	r3, [r4, #12]
9002455a:	bf15      	itete	ne
9002455c:	6560      	strne	r0, [r4, #84]	; 0x54
9002455e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
90024562:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
90024566:	81a3      	strheq	r3, [r4, #12]
90024568:	bf18      	it	ne
9002456a:	81a3      	strhne	r3, [r4, #12]
9002456c:	bd10      	pop	{r4, pc}

9002456e <__sclose>:
9002456e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
90024572:	f000 b8f9 	b.w	90024768 <_close_r>

90024576 <__swbuf_r>:
90024576:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
90024578:	460e      	mov	r6, r1
9002457a:	4614      	mov	r4, r2
9002457c:	4605      	mov	r5, r0
9002457e:	b118      	cbz	r0, 90024588 <__swbuf_r+0x12>
90024580:	6a03      	ldr	r3, [r0, #32]
90024582:	b90b      	cbnz	r3, 90024588 <__swbuf_r+0x12>
90024584:	f7ff ff38 	bl	900243f8 <__sinit>
90024588:	69a3      	ldr	r3, [r4, #24]
9002458a:	60a3      	str	r3, [r4, #8]
9002458c:	89a3      	ldrh	r3, [r4, #12]
9002458e:	071a      	lsls	r2, r3, #28
90024590:	d525      	bpl.n	900245de <__swbuf_r+0x68>
90024592:	6923      	ldr	r3, [r4, #16]
90024594:	b31b      	cbz	r3, 900245de <__swbuf_r+0x68>
90024596:	6823      	ldr	r3, [r4, #0]
90024598:	6922      	ldr	r2, [r4, #16]
9002459a:	1a98      	subs	r0, r3, r2
9002459c:	6963      	ldr	r3, [r4, #20]
9002459e:	b2f6      	uxtb	r6, r6
900245a0:	4283      	cmp	r3, r0
900245a2:	4637      	mov	r7, r6
900245a4:	dc04      	bgt.n	900245b0 <__swbuf_r+0x3a>
900245a6:	4621      	mov	r1, r4
900245a8:	4628      	mov	r0, r5
900245aa:	f001 febf 	bl	9002632c <_fflush_r>
900245ae:	b9e0      	cbnz	r0, 900245ea <__swbuf_r+0x74>
900245b0:	68a3      	ldr	r3, [r4, #8]
900245b2:	3b01      	subs	r3, #1
900245b4:	60a3      	str	r3, [r4, #8]
900245b6:	6823      	ldr	r3, [r4, #0]
900245b8:	1c5a      	adds	r2, r3, #1
900245ba:	6022      	str	r2, [r4, #0]
900245bc:	701e      	strb	r6, [r3, #0]
900245be:	6962      	ldr	r2, [r4, #20]
900245c0:	1c43      	adds	r3, r0, #1
900245c2:	429a      	cmp	r2, r3
900245c4:	d004      	beq.n	900245d0 <__swbuf_r+0x5a>
900245c6:	89a3      	ldrh	r3, [r4, #12]
900245c8:	07db      	lsls	r3, r3, #31
900245ca:	d506      	bpl.n	900245da <__swbuf_r+0x64>
900245cc:	2e0a      	cmp	r6, #10
900245ce:	d104      	bne.n	900245da <__swbuf_r+0x64>
900245d0:	4621      	mov	r1, r4
900245d2:	4628      	mov	r0, r5
900245d4:	f001 feaa 	bl	9002632c <_fflush_r>
900245d8:	b938      	cbnz	r0, 900245ea <__swbuf_r+0x74>
900245da:	4638      	mov	r0, r7
900245dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
900245de:	4621      	mov	r1, r4
900245e0:	4628      	mov	r0, r5
900245e2:	f000 f805 	bl	900245f0 <__swsetup_r>
900245e6:	2800      	cmp	r0, #0
900245e8:	d0d5      	beq.n	90024596 <__swbuf_r+0x20>
900245ea:	f04f 37ff 	mov.w	r7, #4294967295
900245ee:	e7f4      	b.n	900245da <__swbuf_r+0x64>

900245f0 <__swsetup_r>:
900245f0:	b538      	push	{r3, r4, r5, lr}
900245f2:	4b2a      	ldr	r3, [pc, #168]	; (9002469c <__swsetup_r+0xac>)
900245f4:	4605      	mov	r5, r0
900245f6:	6818      	ldr	r0, [r3, #0]
900245f8:	460c      	mov	r4, r1
900245fa:	b118      	cbz	r0, 90024604 <__swsetup_r+0x14>
900245fc:	6a03      	ldr	r3, [r0, #32]
900245fe:	b90b      	cbnz	r3, 90024604 <__swsetup_r+0x14>
90024600:	f7ff fefa 	bl	900243f8 <__sinit>
90024604:	89a3      	ldrh	r3, [r4, #12]
90024606:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
9002460a:	0718      	lsls	r0, r3, #28
9002460c:	d422      	bmi.n	90024654 <__swsetup_r+0x64>
9002460e:	06d9      	lsls	r1, r3, #27
90024610:	d407      	bmi.n	90024622 <__swsetup_r+0x32>
90024612:	2309      	movs	r3, #9
90024614:	602b      	str	r3, [r5, #0]
90024616:	f042 0340 	orr.w	r3, r2, #64	; 0x40
9002461a:	81a3      	strh	r3, [r4, #12]
9002461c:	f04f 30ff 	mov.w	r0, #4294967295
90024620:	e034      	b.n	9002468c <__swsetup_r+0x9c>
90024622:	0758      	lsls	r0, r3, #29
90024624:	d512      	bpl.n	9002464c <__swsetup_r+0x5c>
90024626:	6b61      	ldr	r1, [r4, #52]	; 0x34
90024628:	b141      	cbz	r1, 9002463c <__swsetup_r+0x4c>
9002462a:	f104 0344 	add.w	r3, r4, #68	; 0x44
9002462e:	4299      	cmp	r1, r3
90024630:	d002      	beq.n	90024638 <__swsetup_r+0x48>
90024632:	4628      	mov	r0, r5
90024634:	f000 ff90 	bl	90025558 <_free_r>
90024638:	2300      	movs	r3, #0
9002463a:	6363      	str	r3, [r4, #52]	; 0x34
9002463c:	89a3      	ldrh	r3, [r4, #12]
9002463e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
90024642:	81a3      	strh	r3, [r4, #12]
90024644:	2300      	movs	r3, #0
90024646:	6063      	str	r3, [r4, #4]
90024648:	6923      	ldr	r3, [r4, #16]
9002464a:	6023      	str	r3, [r4, #0]
9002464c:	89a3      	ldrh	r3, [r4, #12]
9002464e:	f043 0308 	orr.w	r3, r3, #8
90024652:	81a3      	strh	r3, [r4, #12]
90024654:	6923      	ldr	r3, [r4, #16]
90024656:	b94b      	cbnz	r3, 9002466c <__swsetup_r+0x7c>
90024658:	89a3      	ldrh	r3, [r4, #12]
9002465a:	f403 7320 	and.w	r3, r3, #640	; 0x280
9002465e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
90024662:	d003      	beq.n	9002466c <__swsetup_r+0x7c>
90024664:	4621      	mov	r1, r4
90024666:	4628      	mov	r0, r5
90024668:	f001 feae 	bl	900263c8 <__smakebuf_r>
9002466c:	89a0      	ldrh	r0, [r4, #12]
9002466e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
90024672:	f010 0301 	ands.w	r3, r0, #1
90024676:	d00a      	beq.n	9002468e <__swsetup_r+0x9e>
90024678:	2300      	movs	r3, #0
9002467a:	60a3      	str	r3, [r4, #8]
9002467c:	6963      	ldr	r3, [r4, #20]
9002467e:	425b      	negs	r3, r3
90024680:	61a3      	str	r3, [r4, #24]
90024682:	6923      	ldr	r3, [r4, #16]
90024684:	b943      	cbnz	r3, 90024698 <__swsetup_r+0xa8>
90024686:	f010 0080 	ands.w	r0, r0, #128	; 0x80
9002468a:	d1c4      	bne.n	90024616 <__swsetup_r+0x26>
9002468c:	bd38      	pop	{r3, r4, r5, pc}
9002468e:	0781      	lsls	r1, r0, #30
90024690:	bf58      	it	pl
90024692:	6963      	ldrpl	r3, [r4, #20]
90024694:	60a3      	str	r3, [r4, #8]
90024696:	e7f4      	b.n	90024682 <__swsetup_r+0x92>
90024698:	2000      	movs	r0, #0
9002469a:	e7f7      	b.n	9002468c <__swsetup_r+0x9c>
9002469c:	24000154 	.word	0x24000154

900246a0 <memset>:
900246a0:	4402      	add	r2, r0
900246a2:	4603      	mov	r3, r0
900246a4:	4293      	cmp	r3, r2
900246a6:	d100      	bne.n	900246aa <memset+0xa>
900246a8:	4770      	bx	lr
900246aa:	f803 1b01 	strb.w	r1, [r3], #1
900246ae:	e7f9      	b.n	900246a4 <memset+0x4>

900246b0 <strncmp>:
900246b0:	b510      	push	{r4, lr}
900246b2:	b16a      	cbz	r2, 900246d0 <strncmp+0x20>
900246b4:	3901      	subs	r1, #1
900246b6:	1884      	adds	r4, r0, r2
900246b8:	f810 2b01 	ldrb.w	r2, [r0], #1
900246bc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
900246c0:	429a      	cmp	r2, r3
900246c2:	d103      	bne.n	900246cc <strncmp+0x1c>
900246c4:	42a0      	cmp	r0, r4
900246c6:	d001      	beq.n	900246cc <strncmp+0x1c>
900246c8:	2a00      	cmp	r2, #0
900246ca:	d1f5      	bne.n	900246b8 <strncmp+0x8>
900246cc:	1ad0      	subs	r0, r2, r3
900246ce:	bd10      	pop	{r4, pc}
900246d0:	4610      	mov	r0, r2
900246d2:	e7fc      	b.n	900246ce <strncmp+0x1e>

900246d4 <strstr>:
900246d4:	780a      	ldrb	r2, [r1, #0]
900246d6:	b570      	push	{r4, r5, r6, lr}
900246d8:	b96a      	cbnz	r2, 900246f6 <strstr+0x22>
900246da:	bd70      	pop	{r4, r5, r6, pc}
900246dc:	429a      	cmp	r2, r3
900246de:	d109      	bne.n	900246f4 <strstr+0x20>
900246e0:	460c      	mov	r4, r1
900246e2:	4605      	mov	r5, r0
900246e4:	f814 3f01 	ldrb.w	r3, [r4, #1]!
900246e8:	2b00      	cmp	r3, #0
900246ea:	d0f6      	beq.n	900246da <strstr+0x6>
900246ec:	f815 6f01 	ldrb.w	r6, [r5, #1]!
900246f0:	429e      	cmp	r6, r3
900246f2:	d0f7      	beq.n	900246e4 <strstr+0x10>
900246f4:	3001      	adds	r0, #1
900246f6:	7803      	ldrb	r3, [r0, #0]
900246f8:	2b00      	cmp	r3, #0
900246fa:	d1ef      	bne.n	900246dc <strstr+0x8>
900246fc:	4618      	mov	r0, r3
900246fe:	e7ec      	b.n	900246da <strstr+0x6>

90024700 <_raise_r>:
90024700:	291f      	cmp	r1, #31
90024702:	b538      	push	{r3, r4, r5, lr}
90024704:	4604      	mov	r4, r0
90024706:	460d      	mov	r5, r1
90024708:	d904      	bls.n	90024714 <_raise_r+0x14>
9002470a:	2316      	movs	r3, #22
9002470c:	6003      	str	r3, [r0, #0]
9002470e:	f04f 30ff 	mov.w	r0, #4294967295
90024712:	bd38      	pop	{r3, r4, r5, pc}
90024714:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
90024716:	b112      	cbz	r2, 9002471e <_raise_r+0x1e>
90024718:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
9002471c:	b94b      	cbnz	r3, 90024732 <_raise_r+0x32>
9002471e:	4620      	mov	r0, r4
90024720:	f000 f868 	bl	900247f4 <_getpid_r>
90024724:	462a      	mov	r2, r5
90024726:	4601      	mov	r1, r0
90024728:	4620      	mov	r0, r4
9002472a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
9002472e:	f000 b84f 	b.w	900247d0 <_kill_r>
90024732:	2b01      	cmp	r3, #1
90024734:	d00a      	beq.n	9002474c <_raise_r+0x4c>
90024736:	1c59      	adds	r1, r3, #1
90024738:	d103      	bne.n	90024742 <_raise_r+0x42>
9002473a:	2316      	movs	r3, #22
9002473c:	6003      	str	r3, [r0, #0]
9002473e:	2001      	movs	r0, #1
90024740:	e7e7      	b.n	90024712 <_raise_r+0x12>
90024742:	2400      	movs	r4, #0
90024744:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
90024748:	4628      	mov	r0, r5
9002474a:	4798      	blx	r3
9002474c:	2000      	movs	r0, #0
9002474e:	e7e0      	b.n	90024712 <_raise_r+0x12>

90024750 <raise>:
90024750:	4b02      	ldr	r3, [pc, #8]	; (9002475c <raise+0xc>)
90024752:	4601      	mov	r1, r0
90024754:	6818      	ldr	r0, [r3, #0]
90024756:	f7ff bfd3 	b.w	90024700 <_raise_r>
9002475a:	bf00      	nop
9002475c:	24000154 	.word	0x24000154

90024760 <_localeconv_r>:
90024760:	4800      	ldr	r0, [pc, #0]	; (90024764 <_localeconv_r+0x4>)
90024762:	4770      	bx	lr
90024764:	2400024c 	.word	0x2400024c

90024768 <_close_r>:
90024768:	b538      	push	{r3, r4, r5, lr}
9002476a:	4d06      	ldr	r5, [pc, #24]	; (90024784 <_close_r+0x1c>)
9002476c:	2300      	movs	r3, #0
9002476e:	4604      	mov	r4, r0
90024770:	4608      	mov	r0, r1
90024772:	602b      	str	r3, [r5, #0]
90024774:	f7df feb0 	bl	900044d8 <_close>
90024778:	1c43      	adds	r3, r0, #1
9002477a:	d102      	bne.n	90024782 <_close_r+0x1a>
9002477c:	682b      	ldr	r3, [r5, #0]
9002477e:	b103      	cbz	r3, 90024782 <_close_r+0x1a>
90024780:	6023      	str	r3, [r4, #0]
90024782:	bd38      	pop	{r3, r4, r5, pc}
90024784:	240226a4 	.word	0x240226a4

90024788 <_lseek_r>:
90024788:	b538      	push	{r3, r4, r5, lr}
9002478a:	4d07      	ldr	r5, [pc, #28]	; (900247a8 <_lseek_r+0x20>)
9002478c:	4604      	mov	r4, r0
9002478e:	4608      	mov	r0, r1
90024790:	4611      	mov	r1, r2
90024792:	2200      	movs	r2, #0
90024794:	602a      	str	r2, [r5, #0]
90024796:	461a      	mov	r2, r3
90024798:	f7df feaa 	bl	900044f0 <_lseek>
9002479c:	1c43      	adds	r3, r0, #1
9002479e:	d102      	bne.n	900247a6 <_lseek_r+0x1e>
900247a0:	682b      	ldr	r3, [r5, #0]
900247a2:	b103      	cbz	r3, 900247a6 <_lseek_r+0x1e>
900247a4:	6023      	str	r3, [r4, #0]
900247a6:	bd38      	pop	{r3, r4, r5, pc}
900247a8:	240226a4 	.word	0x240226a4

900247ac <_read_r>:
900247ac:	b538      	push	{r3, r4, r5, lr}
900247ae:	4d07      	ldr	r5, [pc, #28]	; (900247cc <_read_r+0x20>)
900247b0:	4604      	mov	r4, r0
900247b2:	4608      	mov	r0, r1
900247b4:	4611      	mov	r1, r2
900247b6:	2200      	movs	r2, #0
900247b8:	602a      	str	r2, [r5, #0]
900247ba:	461a      	mov	r2, r3
900247bc:	f7df fe70 	bl	900044a0 <_read>
900247c0:	1c43      	adds	r3, r0, #1
900247c2:	d102      	bne.n	900247ca <_read_r+0x1e>
900247c4:	682b      	ldr	r3, [r5, #0]
900247c6:	b103      	cbz	r3, 900247ca <_read_r+0x1e>
900247c8:	6023      	str	r3, [r4, #0]
900247ca:	bd38      	pop	{r3, r4, r5, pc}
900247cc:	240226a4 	.word	0x240226a4

900247d0 <_kill_r>:
900247d0:	b538      	push	{r3, r4, r5, lr}
900247d2:	4d07      	ldr	r5, [pc, #28]	; (900247f0 <_kill_r+0x20>)
900247d4:	2300      	movs	r3, #0
900247d6:	4604      	mov	r4, r0
900247d8:	4608      	mov	r0, r1
900247da:	4611      	mov	r1, r2
900247dc:	602b      	str	r3, [r5, #0]
900247de:	f7df fe4f 	bl	90004480 <_kill>
900247e2:	1c43      	adds	r3, r0, #1
900247e4:	d102      	bne.n	900247ec <_kill_r+0x1c>
900247e6:	682b      	ldr	r3, [r5, #0]
900247e8:	b103      	cbz	r3, 900247ec <_kill_r+0x1c>
900247ea:	6023      	str	r3, [r4, #0]
900247ec:	bd38      	pop	{r3, r4, r5, pc}
900247ee:	bf00      	nop
900247f0:	240226a4 	.word	0x240226a4

900247f4 <_getpid_r>:
900247f4:	f7df be42 	b.w	9000447c <_getpid>

900247f8 <_sbrk_r>:
900247f8:	b538      	push	{r3, r4, r5, lr}
900247fa:	4d06      	ldr	r5, [pc, #24]	; (90024814 <_sbrk_r+0x1c>)
900247fc:	2300      	movs	r3, #0
900247fe:	4604      	mov	r4, r0
90024800:	4608      	mov	r0, r1
90024802:	602b      	str	r3, [r5, #0]
90024804:	f7df fe76 	bl	900044f4 <_sbrk>
90024808:	1c43      	adds	r3, r0, #1
9002480a:	d102      	bne.n	90024812 <_sbrk_r+0x1a>
9002480c:	682b      	ldr	r3, [r5, #0]
9002480e:	b103      	cbz	r3, 90024812 <_sbrk_r+0x1a>
90024810:	6023      	str	r3, [r4, #0]
90024812:	bd38      	pop	{r3, r4, r5, pc}
90024814:	240226a4 	.word	0x240226a4

90024818 <_write_r>:
90024818:	b538      	push	{r3, r4, r5, lr}
9002481a:	4d07      	ldr	r5, [pc, #28]	; (90024838 <_write_r+0x20>)
9002481c:	4604      	mov	r4, r0
9002481e:	4608      	mov	r0, r1
90024820:	4611      	mov	r1, r2
90024822:	2200      	movs	r2, #0
90024824:	602a      	str	r2, [r5, #0]
90024826:	461a      	mov	r2, r3
90024828:	f7df fe48 	bl	900044bc <_write>
9002482c:	1c43      	adds	r3, r0, #1
9002482e:	d102      	bne.n	90024836 <_write_r+0x1e>
90024830:	682b      	ldr	r3, [r5, #0]
90024832:	b103      	cbz	r3, 90024836 <_write_r+0x1e>
90024834:	6023      	str	r3, [r4, #0]
90024836:	bd38      	pop	{r3, r4, r5, pc}
90024838:	240226a4 	.word	0x240226a4

9002483c <__errno>:
9002483c:	4b01      	ldr	r3, [pc, #4]	; (90024844 <__errno+0x8>)
9002483e:	6818      	ldr	r0, [r3, #0]
90024840:	4770      	bx	lr
90024842:	bf00      	nop
90024844:	24000154 	.word	0x24000154

90024848 <__libc_init_array>:
90024848:	b570      	push	{r4, r5, r6, lr}
9002484a:	4d0d      	ldr	r5, [pc, #52]	; (90024880 <__libc_init_array+0x38>)
9002484c:	4c0d      	ldr	r4, [pc, #52]	; (90024884 <__libc_init_array+0x3c>)
9002484e:	1b64      	subs	r4, r4, r5
90024850:	10a4      	asrs	r4, r4, #2
90024852:	2600      	movs	r6, #0
90024854:	42a6      	cmp	r6, r4
90024856:	d109      	bne.n	9002486c <__libc_init_array+0x24>
90024858:	4d0b      	ldr	r5, [pc, #44]	; (90024888 <__libc_init_array+0x40>)
9002485a:	4c0c      	ldr	r4, [pc, #48]	; (9002488c <__libc_init_array+0x44>)
9002485c:	f001 fe98 	bl	90026590 <_init>
90024860:	1b64      	subs	r4, r4, r5
90024862:	10a4      	asrs	r4, r4, #2
90024864:	2600      	movs	r6, #0
90024866:	42a6      	cmp	r6, r4
90024868:	d105      	bne.n	90024876 <__libc_init_array+0x2e>
9002486a:	bd70      	pop	{r4, r5, r6, pc}
9002486c:	f855 3b04 	ldr.w	r3, [r5], #4
90024870:	4798      	blx	r3
90024872:	3601      	adds	r6, #1
90024874:	e7ee      	b.n	90024854 <__libc_init_array+0xc>
90024876:	f855 3b04 	ldr.w	r3, [r5], #4
9002487a:	4798      	blx	r3
9002487c:	3601      	adds	r6, #1
9002487e:	e7f2      	b.n	90024866 <__libc_init_array+0x1e>
90024880:	90029574 	.word	0x90029574
90024884:	90029574 	.word	0x90029574
90024888:	90029574 	.word	0x90029574
9002488c:	9002958c 	.word	0x9002958c

90024890 <__retarget_lock_acquire_recursive>:
90024890:	4770      	bx	lr

90024892 <__retarget_lock_release_recursive>:
90024892:	4770      	bx	lr

90024894 <memcpy>:
90024894:	440a      	add	r2, r1
90024896:	4291      	cmp	r1, r2
90024898:	f100 33ff 	add.w	r3, r0, #4294967295
9002489c:	d100      	bne.n	900248a0 <memcpy+0xc>
9002489e:	4770      	bx	lr
900248a0:	b510      	push	{r4, lr}
900248a2:	f811 4b01 	ldrb.w	r4, [r1], #1
900248a6:	f803 4f01 	strb.w	r4, [r3, #1]!
900248aa:	4291      	cmp	r1, r2
900248ac:	d1f9      	bne.n	900248a2 <memcpy+0xe>
900248ae:	bd10      	pop	{r4, pc}

900248b0 <__register_exitproc>:
900248b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
900248b4:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 90024968 <__register_exitproc+0xb8>
900248b8:	4606      	mov	r6, r0
900248ba:	f8d8 0000 	ldr.w	r0, [r8]
900248be:	461f      	mov	r7, r3
900248c0:	460d      	mov	r5, r1
900248c2:	4691      	mov	r9, r2
900248c4:	f7ff ffe4 	bl	90024890 <__retarget_lock_acquire_recursive>
900248c8:	4b23      	ldr	r3, [pc, #140]	; (90024958 <__register_exitproc+0xa8>)
900248ca:	681c      	ldr	r4, [r3, #0]
900248cc:	b934      	cbnz	r4, 900248dc <__register_exitproc+0x2c>
900248ce:	4c23      	ldr	r4, [pc, #140]	; (9002495c <__register_exitproc+0xac>)
900248d0:	601c      	str	r4, [r3, #0]
900248d2:	4b23      	ldr	r3, [pc, #140]	; (90024960 <__register_exitproc+0xb0>)
900248d4:	b113      	cbz	r3, 900248dc <__register_exitproc+0x2c>
900248d6:	681b      	ldr	r3, [r3, #0]
900248d8:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
900248dc:	6863      	ldr	r3, [r4, #4]
900248de:	2b1f      	cmp	r3, #31
900248e0:	dd07      	ble.n	900248f2 <__register_exitproc+0x42>
900248e2:	f8d8 0000 	ldr.w	r0, [r8]
900248e6:	f7ff ffd4 	bl	90024892 <__retarget_lock_release_recursive>
900248ea:	f04f 30ff 	mov.w	r0, #4294967295
900248ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
900248f2:	b32e      	cbz	r6, 90024940 <__register_exitproc+0x90>
900248f4:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
900248f8:	b968      	cbnz	r0, 90024916 <__register_exitproc+0x66>
900248fa:	4b1a      	ldr	r3, [pc, #104]	; (90024964 <__register_exitproc+0xb4>)
900248fc:	2b00      	cmp	r3, #0
900248fe:	d0f0      	beq.n	900248e2 <__register_exitproc+0x32>
90024900:	f44f 7084 	mov.w	r0, #264	; 0x108
90024904:	f7fe fffa 	bl	900238fc <malloc>
90024908:	2800      	cmp	r0, #0
9002490a:	d0ea      	beq.n	900248e2 <__register_exitproc+0x32>
9002490c:	2300      	movs	r3, #0
9002490e:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
90024912:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
90024916:	6863      	ldr	r3, [r4, #4]
90024918:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
9002491c:	2201      	movs	r2, #1
9002491e:	409a      	lsls	r2, r3
90024920:	eb00 0183 	add.w	r1, r0, r3, lsl #2
90024924:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
90024928:	4313      	orrs	r3, r2
9002492a:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
9002492e:	2e02      	cmp	r6, #2
90024930:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
90024934:	bf02      	ittt	eq
90024936:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
9002493a:	4313      	orreq	r3, r2
9002493c:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
90024940:	6863      	ldr	r3, [r4, #4]
90024942:	f8d8 0000 	ldr.w	r0, [r8]
90024946:	1c5a      	adds	r2, r3, #1
90024948:	3302      	adds	r3, #2
9002494a:	6062      	str	r2, [r4, #4]
9002494c:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
90024950:	f7ff ff9f 	bl	90024892 <__retarget_lock_release_recursive>
90024954:	2000      	movs	r0, #0
90024956:	e7ca      	b.n	900248ee <__register_exitproc+0x3e>
90024958:	24022738 	.word	0x24022738
9002495c:	240226ac 	.word	0x240226ac
90024960:	90029434 	.word	0x90029434
90024964:	900238fd 	.word	0x900238fd
90024968:	24000158 	.word	0x24000158

9002496c <quorem>:
9002496c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
90024970:	6903      	ldr	r3, [r0, #16]
90024972:	690c      	ldr	r4, [r1, #16]
90024974:	42a3      	cmp	r3, r4
90024976:	4607      	mov	r7, r0
90024978:	db7e      	blt.n	90024a78 <quorem+0x10c>
9002497a:	3c01      	subs	r4, #1
9002497c:	f101 0814 	add.w	r8, r1, #20
90024980:	f100 0514 	add.w	r5, r0, #20
90024984:	eb05 0384 	add.w	r3, r5, r4, lsl #2
90024988:	9301      	str	r3, [sp, #4]
9002498a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
9002498e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
90024992:	3301      	adds	r3, #1
90024994:	429a      	cmp	r2, r3
90024996:	ea4f 0b84 	mov.w	fp, r4, lsl #2
9002499a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
9002499e:	fbb2 f6f3 	udiv	r6, r2, r3
900249a2:	d331      	bcc.n	90024a08 <quorem+0x9c>
900249a4:	f04f 0e00 	mov.w	lr, #0
900249a8:	4640      	mov	r0, r8
900249aa:	46ac      	mov	ip, r5
900249ac:	46f2      	mov	sl, lr
900249ae:	f850 2b04 	ldr.w	r2, [r0], #4
900249b2:	b293      	uxth	r3, r2
900249b4:	fb06 e303 	mla	r3, r6, r3, lr
900249b8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
900249bc:	0c1a      	lsrs	r2, r3, #16
900249be:	b29b      	uxth	r3, r3
900249c0:	ebaa 0303 	sub.w	r3, sl, r3
900249c4:	f8dc a000 	ldr.w	sl, [ip]
900249c8:	fa13 f38a 	uxtah	r3, r3, sl
900249cc:	fb06 220e 	mla	r2, r6, lr, r2
900249d0:	9300      	str	r3, [sp, #0]
900249d2:	9b00      	ldr	r3, [sp, #0]
900249d4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
900249d8:	b292      	uxth	r2, r2
900249da:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
900249de:	eb02 4223 	add.w	r2, r2, r3, asr #16
900249e2:	f8bd 3000 	ldrh.w	r3, [sp]
900249e6:	4581      	cmp	r9, r0
900249e8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
900249ec:	f84c 3b04 	str.w	r3, [ip], #4
900249f0:	ea4f 4a22 	mov.w	sl, r2, asr #16
900249f4:	d2db      	bcs.n	900249ae <quorem+0x42>
900249f6:	f855 300b 	ldr.w	r3, [r5, fp]
900249fa:	b92b      	cbnz	r3, 90024a08 <quorem+0x9c>
900249fc:	9b01      	ldr	r3, [sp, #4]
900249fe:	3b04      	subs	r3, #4
90024a00:	429d      	cmp	r5, r3
90024a02:	461a      	mov	r2, r3
90024a04:	d32c      	bcc.n	90024a60 <quorem+0xf4>
90024a06:	613c      	str	r4, [r7, #16]
90024a08:	4638      	mov	r0, r7
90024a0a:	f001 f86d 	bl	90025ae8 <__mcmp>
90024a0e:	2800      	cmp	r0, #0
90024a10:	db22      	blt.n	90024a58 <quorem+0xec>
90024a12:	3601      	adds	r6, #1
90024a14:	4629      	mov	r1, r5
90024a16:	2000      	movs	r0, #0
90024a18:	f858 2b04 	ldr.w	r2, [r8], #4
90024a1c:	f8d1 c000 	ldr.w	ip, [r1]
90024a20:	b293      	uxth	r3, r2
90024a22:	1ac3      	subs	r3, r0, r3
90024a24:	0c12      	lsrs	r2, r2, #16
90024a26:	fa13 f38c 	uxtah	r3, r3, ip
90024a2a:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
90024a2e:	eb02 4223 	add.w	r2, r2, r3, asr #16
90024a32:	b29b      	uxth	r3, r3
90024a34:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
90024a38:	45c1      	cmp	r9, r8
90024a3a:	f841 3b04 	str.w	r3, [r1], #4
90024a3e:	ea4f 4022 	mov.w	r0, r2, asr #16
90024a42:	d2e9      	bcs.n	90024a18 <quorem+0xac>
90024a44:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
90024a48:	eb05 0384 	add.w	r3, r5, r4, lsl #2
90024a4c:	b922      	cbnz	r2, 90024a58 <quorem+0xec>
90024a4e:	3b04      	subs	r3, #4
90024a50:	429d      	cmp	r5, r3
90024a52:	461a      	mov	r2, r3
90024a54:	d30a      	bcc.n	90024a6c <quorem+0x100>
90024a56:	613c      	str	r4, [r7, #16]
90024a58:	4630      	mov	r0, r6
90024a5a:	b003      	add	sp, #12
90024a5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90024a60:	6812      	ldr	r2, [r2, #0]
90024a62:	3b04      	subs	r3, #4
90024a64:	2a00      	cmp	r2, #0
90024a66:	d1ce      	bne.n	90024a06 <quorem+0x9a>
90024a68:	3c01      	subs	r4, #1
90024a6a:	e7c9      	b.n	90024a00 <quorem+0x94>
90024a6c:	6812      	ldr	r2, [r2, #0]
90024a6e:	3b04      	subs	r3, #4
90024a70:	2a00      	cmp	r2, #0
90024a72:	d1f0      	bne.n	90024a56 <quorem+0xea>
90024a74:	3c01      	subs	r4, #1
90024a76:	e7eb      	b.n	90024a50 <quorem+0xe4>
90024a78:	2000      	movs	r0, #0
90024a7a:	e7ee      	b.n	90024a5a <quorem+0xee>
90024a7c:	0000      	movs	r0, r0
	...

90024a80 <_dtoa_r>:
90024a80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90024a84:	ed2d 8b02 	vpush	{d8}
90024a88:	69c5      	ldr	r5, [r0, #28]
90024a8a:	b091      	sub	sp, #68	; 0x44
90024a8c:	ed8d 0b02 	vstr	d0, [sp, #8]
90024a90:	ec59 8b10 	vmov	r8, r9, d0
90024a94:	9c1c      	ldr	r4, [sp, #112]	; 0x70
90024a96:	9106      	str	r1, [sp, #24]
90024a98:	4606      	mov	r6, r0
90024a9a:	9208      	str	r2, [sp, #32]
90024a9c:	930c      	str	r3, [sp, #48]	; 0x30
90024a9e:	b975      	cbnz	r5, 90024abe <_dtoa_r+0x3e>
90024aa0:	2010      	movs	r0, #16
90024aa2:	f7fe ff2b 	bl	900238fc <malloc>
90024aa6:	4602      	mov	r2, r0
90024aa8:	61f0      	str	r0, [r6, #28]
90024aaa:	b920      	cbnz	r0, 90024ab6 <_dtoa_r+0x36>
90024aac:	4ba6      	ldr	r3, [pc, #664]	; (90024d48 <_dtoa_r+0x2c8>)
90024aae:	21ef      	movs	r1, #239	; 0xef
90024ab0:	48a6      	ldr	r0, [pc, #664]	; (90024d4c <_dtoa_r+0x2cc>)
90024ab2:	f7fe feff 	bl	900238b4 <__assert_func>
90024ab6:	e9c0 5501 	strd	r5, r5, [r0, #4]
90024aba:	6005      	str	r5, [r0, #0]
90024abc:	60c5      	str	r5, [r0, #12]
90024abe:	69f3      	ldr	r3, [r6, #28]
90024ac0:	6819      	ldr	r1, [r3, #0]
90024ac2:	b151      	cbz	r1, 90024ada <_dtoa_r+0x5a>
90024ac4:	685a      	ldr	r2, [r3, #4]
90024ac6:	604a      	str	r2, [r1, #4]
90024ac8:	2301      	movs	r3, #1
90024aca:	4093      	lsls	r3, r2
90024acc:	608b      	str	r3, [r1, #8]
90024ace:	4630      	mov	r0, r6
90024ad0:	f000 fdce 	bl	90025670 <_Bfree>
90024ad4:	69f3      	ldr	r3, [r6, #28]
90024ad6:	2200      	movs	r2, #0
90024ad8:	601a      	str	r2, [r3, #0]
90024ada:	f1b9 0300 	subs.w	r3, r9, #0
90024ade:	bfbb      	ittet	lt
90024ae0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
90024ae4:	9303      	strlt	r3, [sp, #12]
90024ae6:	2300      	movge	r3, #0
90024ae8:	2201      	movlt	r2, #1
90024aea:	bfac      	ite	ge
90024aec:	6023      	strge	r3, [r4, #0]
90024aee:	6022      	strlt	r2, [r4, #0]
90024af0:	4b97      	ldr	r3, [pc, #604]	; (90024d50 <_dtoa_r+0x2d0>)
90024af2:	9c03      	ldr	r4, [sp, #12]
90024af4:	43a3      	bics	r3, r4
90024af6:	d11c      	bne.n	90024b32 <_dtoa_r+0xb2>
90024af8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
90024afa:	f242 730f 	movw	r3, #9999	; 0x270f
90024afe:	6013      	str	r3, [r2, #0]
90024b00:	f3c4 0313 	ubfx	r3, r4, #0, #20
90024b04:	ea53 0308 	orrs.w	r3, r3, r8
90024b08:	f000 84fb 	beq.w	90025502 <_dtoa_r+0xa82>
90024b0c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
90024b0e:	b963      	cbnz	r3, 90024b2a <_dtoa_r+0xaa>
90024b10:	4b90      	ldr	r3, [pc, #576]	; (90024d54 <_dtoa_r+0x2d4>)
90024b12:	e020      	b.n	90024b56 <_dtoa_r+0xd6>
90024b14:	4b90      	ldr	r3, [pc, #576]	; (90024d58 <_dtoa_r+0x2d8>)
90024b16:	9301      	str	r3, [sp, #4]
90024b18:	3308      	adds	r3, #8
90024b1a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
90024b1c:	6013      	str	r3, [r2, #0]
90024b1e:	9801      	ldr	r0, [sp, #4]
90024b20:	b011      	add	sp, #68	; 0x44
90024b22:	ecbd 8b02 	vpop	{d8}
90024b26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90024b2a:	4b8a      	ldr	r3, [pc, #552]	; (90024d54 <_dtoa_r+0x2d4>)
90024b2c:	9301      	str	r3, [sp, #4]
90024b2e:	3303      	adds	r3, #3
90024b30:	e7f3      	b.n	90024b1a <_dtoa_r+0x9a>
90024b32:	ed9d 8b02 	vldr	d8, [sp, #8]
90024b36:	eeb5 8b40 	vcmp.f64	d8, #0.0
90024b3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
90024b3e:	d10c      	bne.n	90024b5a <_dtoa_r+0xda>
90024b40:	9a0c      	ldr	r2, [sp, #48]	; 0x30
90024b42:	2301      	movs	r3, #1
90024b44:	6013      	str	r3, [r2, #0]
90024b46:	9b1d      	ldr	r3, [sp, #116]	; 0x74
90024b48:	2b00      	cmp	r3, #0
90024b4a:	f000 84d7 	beq.w	900254fc <_dtoa_r+0xa7c>
90024b4e:	4b83      	ldr	r3, [pc, #524]	; (90024d5c <_dtoa_r+0x2dc>)
90024b50:	9a1d      	ldr	r2, [sp, #116]	; 0x74
90024b52:	6013      	str	r3, [r2, #0]
90024b54:	3b01      	subs	r3, #1
90024b56:	9301      	str	r3, [sp, #4]
90024b58:	e7e1      	b.n	90024b1e <_dtoa_r+0x9e>
90024b5a:	aa0e      	add	r2, sp, #56	; 0x38
90024b5c:	a90f      	add	r1, sp, #60	; 0x3c
90024b5e:	4630      	mov	r0, r6
90024b60:	eeb0 0b48 	vmov.f64	d0, d8
90024b64:	f001 f866 	bl	90025c34 <__d2b>
90024b68:	f3c4 530a 	ubfx	r3, r4, #20, #11
90024b6c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
90024b6e:	4605      	mov	r5, r0
90024b70:	2b00      	cmp	r3, #0
90024b72:	d046      	beq.n	90024c02 <_dtoa_r+0x182>
90024b74:	eeb0 7b48 	vmov.f64	d7, d8
90024b78:	ee18 1a90 	vmov	r1, s17
90024b7c:	f3c1 0113 	ubfx	r1, r1, #0, #20
90024b80:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
90024b84:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
90024b88:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
90024b8c:	2000      	movs	r0, #0
90024b8e:	ee07 1a90 	vmov	s15, r1
90024b92:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
90024b96:	ed9f 5b66 	vldr	d5, [pc, #408]	; 90024d30 <_dtoa_r+0x2b0>
90024b9a:	ee37 7b46 	vsub.f64	d7, d7, d6
90024b9e:	ed9f 6b66 	vldr	d6, [pc, #408]	; 90024d38 <_dtoa_r+0x2b8>
90024ba2:	eea7 6b05 	vfma.f64	d6, d7, d5
90024ba6:	ed9f 5b66 	vldr	d5, [pc, #408]	; 90024d40 <_dtoa_r+0x2c0>
90024baa:	ee07 3a90 	vmov	s15, r3
90024bae:	eeb8 4be7 	vcvt.f64.s32	d4, s15
90024bb2:	eeb0 7b46 	vmov.f64	d7, d6
90024bb6:	eea4 7b05 	vfma.f64	d7, d4, d5
90024bba:	eefd 6bc7 	vcvt.s32.f64	s13, d7
90024bbe:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
90024bc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
90024bc6:	ee16 ba90 	vmov	fp, s13
90024bca:	9009      	str	r0, [sp, #36]	; 0x24
90024bcc:	d508      	bpl.n	90024be0 <_dtoa_r+0x160>
90024bce:	eeb8 6be6 	vcvt.f64.s32	d6, s13
90024bd2:	eeb4 6b47 	vcmp.f64	d6, d7
90024bd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
90024bda:	bf18      	it	ne
90024bdc:	f10b 3bff 	addne.w	fp, fp, #4294967295
90024be0:	f1bb 0f16 	cmp.w	fp, #22
90024be4:	d82b      	bhi.n	90024c3e <_dtoa_r+0x1be>
90024be6:	495e      	ldr	r1, [pc, #376]	; (90024d60 <_dtoa_r+0x2e0>)
90024be8:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
90024bec:	ed91 7b00 	vldr	d7, [r1]
90024bf0:	eeb4 8bc7 	vcmpe.f64	d8, d7
90024bf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
90024bf8:	d501      	bpl.n	90024bfe <_dtoa_r+0x17e>
90024bfa:	f10b 3bff 	add.w	fp, fp, #4294967295
90024bfe:	2100      	movs	r1, #0
90024c00:	e01e      	b.n	90024c40 <_dtoa_r+0x1c0>
90024c02:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
90024c04:	4413      	add	r3, r2
90024c06:	f203 4132 	addw	r1, r3, #1074	; 0x432
90024c0a:	2920      	cmp	r1, #32
90024c0c:	bfc1      	itttt	gt
90024c0e:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
90024c12:	408c      	lslgt	r4, r1
90024c14:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
90024c18:	fa28 f101 	lsrgt.w	r1, r8, r1
90024c1c:	bfd6      	itet	le
90024c1e:	f1c1 0120 	rsble	r1, r1, #32
90024c22:	4321      	orrgt	r1, r4
90024c24:	fa08 f101 	lslle.w	r1, r8, r1
90024c28:	ee07 1a90 	vmov	s15, r1
90024c2c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
90024c30:	3b01      	subs	r3, #1
90024c32:	ee17 1a90 	vmov	r1, s15
90024c36:	2001      	movs	r0, #1
90024c38:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
90024c3c:	e7a7      	b.n	90024b8e <_dtoa_r+0x10e>
90024c3e:	2101      	movs	r1, #1
90024c40:	1ad2      	subs	r2, r2, r3
90024c42:	1e53      	subs	r3, r2, #1
90024c44:	9305      	str	r3, [sp, #20]
90024c46:	bf45      	ittet	mi
90024c48:	f1c2 0301 	rsbmi	r3, r2, #1
90024c4c:	9304      	strmi	r3, [sp, #16]
90024c4e:	2300      	movpl	r3, #0
90024c50:	2300      	movmi	r3, #0
90024c52:	bf4c      	ite	mi
90024c54:	9305      	strmi	r3, [sp, #20]
90024c56:	9304      	strpl	r3, [sp, #16]
90024c58:	f1bb 0f00 	cmp.w	fp, #0
90024c5c:	910b      	str	r1, [sp, #44]	; 0x2c
90024c5e:	db18      	blt.n	90024c92 <_dtoa_r+0x212>
90024c60:	9b05      	ldr	r3, [sp, #20]
90024c62:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
90024c66:	445b      	add	r3, fp
90024c68:	9305      	str	r3, [sp, #20]
90024c6a:	2300      	movs	r3, #0
90024c6c:	9a06      	ldr	r2, [sp, #24]
90024c6e:	2a09      	cmp	r2, #9
90024c70:	d848      	bhi.n	90024d04 <_dtoa_r+0x284>
90024c72:	2a05      	cmp	r2, #5
90024c74:	bfc4      	itt	gt
90024c76:	3a04      	subgt	r2, #4
90024c78:	9206      	strgt	r2, [sp, #24]
90024c7a:	9a06      	ldr	r2, [sp, #24]
90024c7c:	f1a2 0202 	sub.w	r2, r2, #2
90024c80:	bfcc      	ite	gt
90024c82:	2400      	movgt	r4, #0
90024c84:	2401      	movle	r4, #1
90024c86:	2a03      	cmp	r2, #3
90024c88:	d847      	bhi.n	90024d1a <_dtoa_r+0x29a>
90024c8a:	e8df f002 	tbb	[pc, r2]
90024c8e:	2d0b      	.short	0x2d0b
90024c90:	392b      	.short	0x392b
90024c92:	9b04      	ldr	r3, [sp, #16]
90024c94:	2200      	movs	r2, #0
90024c96:	eba3 030b 	sub.w	r3, r3, fp
90024c9a:	9304      	str	r3, [sp, #16]
90024c9c:	920a      	str	r2, [sp, #40]	; 0x28
90024c9e:	f1cb 0300 	rsb	r3, fp, #0
90024ca2:	e7e3      	b.n	90024c6c <_dtoa_r+0x1ec>
90024ca4:	2200      	movs	r2, #0
90024ca6:	9207      	str	r2, [sp, #28]
90024ca8:	9a08      	ldr	r2, [sp, #32]
90024caa:	2a00      	cmp	r2, #0
90024cac:	dc38      	bgt.n	90024d20 <_dtoa_r+0x2a0>
90024cae:	f04f 0a01 	mov.w	sl, #1
90024cb2:	46d1      	mov	r9, sl
90024cb4:	4652      	mov	r2, sl
90024cb6:	f8cd a020 	str.w	sl, [sp, #32]
90024cba:	69f7      	ldr	r7, [r6, #28]
90024cbc:	2100      	movs	r1, #0
90024cbe:	2004      	movs	r0, #4
90024cc0:	f100 0c14 	add.w	ip, r0, #20
90024cc4:	4594      	cmp	ip, r2
90024cc6:	d930      	bls.n	90024d2a <_dtoa_r+0x2aa>
90024cc8:	6079      	str	r1, [r7, #4]
90024cca:	4630      	mov	r0, r6
90024ccc:	930d      	str	r3, [sp, #52]	; 0x34
90024cce:	f000 fc8f 	bl	900255f0 <_Balloc>
90024cd2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
90024cd4:	9001      	str	r0, [sp, #4]
90024cd6:	4602      	mov	r2, r0
90024cd8:	2800      	cmp	r0, #0
90024cda:	d145      	bne.n	90024d68 <_dtoa_r+0x2e8>
90024cdc:	4b21      	ldr	r3, [pc, #132]	; (90024d64 <_dtoa_r+0x2e4>)
90024cde:	f240 11af 	movw	r1, #431	; 0x1af
90024ce2:	e6e5      	b.n	90024ab0 <_dtoa_r+0x30>
90024ce4:	2201      	movs	r2, #1
90024ce6:	e7de      	b.n	90024ca6 <_dtoa_r+0x226>
90024ce8:	2200      	movs	r2, #0
90024cea:	9207      	str	r2, [sp, #28]
90024cec:	9a08      	ldr	r2, [sp, #32]
90024cee:	eb0b 0a02 	add.w	sl, fp, r2
90024cf2:	f10a 0901 	add.w	r9, sl, #1
90024cf6:	464a      	mov	r2, r9
90024cf8:	2a01      	cmp	r2, #1
90024cfa:	bfb8      	it	lt
90024cfc:	2201      	movlt	r2, #1
90024cfe:	e7dc      	b.n	90024cba <_dtoa_r+0x23a>
90024d00:	2201      	movs	r2, #1
90024d02:	e7f2      	b.n	90024cea <_dtoa_r+0x26a>
90024d04:	2401      	movs	r4, #1
90024d06:	2200      	movs	r2, #0
90024d08:	e9cd 2406 	strd	r2, r4, [sp, #24]
90024d0c:	f04f 3aff 	mov.w	sl, #4294967295
90024d10:	2100      	movs	r1, #0
90024d12:	46d1      	mov	r9, sl
90024d14:	2212      	movs	r2, #18
90024d16:	9108      	str	r1, [sp, #32]
90024d18:	e7cf      	b.n	90024cba <_dtoa_r+0x23a>
90024d1a:	2201      	movs	r2, #1
90024d1c:	9207      	str	r2, [sp, #28]
90024d1e:	e7f5      	b.n	90024d0c <_dtoa_r+0x28c>
90024d20:	f8dd a020 	ldr.w	sl, [sp, #32]
90024d24:	46d1      	mov	r9, sl
90024d26:	4652      	mov	r2, sl
90024d28:	e7c7      	b.n	90024cba <_dtoa_r+0x23a>
90024d2a:	3101      	adds	r1, #1
90024d2c:	0040      	lsls	r0, r0, #1
90024d2e:	e7c7      	b.n	90024cc0 <_dtoa_r+0x240>
90024d30:	636f4361 	.word	0x636f4361
90024d34:	3fd287a7 	.word	0x3fd287a7
90024d38:	8b60c8b3 	.word	0x8b60c8b3
90024d3c:	3fc68a28 	.word	0x3fc68a28
90024d40:	509f79fb 	.word	0x509f79fb
90024d44:	3fd34413 	.word	0x3fd34413
90024d48:	90029259 	.word	0x90029259
90024d4c:	90029270 	.word	0x90029270
90024d50:	7ff00000 	.word	0x7ff00000
90024d54:	90029255 	.word	0x90029255
90024d58:	9002924c 	.word	0x9002924c
90024d5c:	90029229 	.word	0x90029229
90024d60:	90029360 	.word	0x90029360
90024d64:	900292c8 	.word	0x900292c8
90024d68:	69f2      	ldr	r2, [r6, #28]
90024d6a:	9901      	ldr	r1, [sp, #4]
90024d6c:	6011      	str	r1, [r2, #0]
90024d6e:	f1b9 0f0e 	cmp.w	r9, #14
90024d72:	d86c      	bhi.n	90024e4e <_dtoa_r+0x3ce>
90024d74:	2c00      	cmp	r4, #0
90024d76:	d06a      	beq.n	90024e4e <_dtoa_r+0x3ce>
90024d78:	f1bb 0f00 	cmp.w	fp, #0
90024d7c:	f340 80a0 	ble.w	90024ec0 <_dtoa_r+0x440>
90024d80:	4ac1      	ldr	r2, [pc, #772]	; (90025088 <_dtoa_r+0x608>)
90024d82:	f00b 010f 	and.w	r1, fp, #15
90024d86:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
90024d8a:	f41b 7f80 	tst.w	fp, #256	; 0x100
90024d8e:	ed92 7b00 	vldr	d7, [r2]
90024d92:	ea4f 122b 	mov.w	r2, fp, asr #4
90024d96:	f000 8087 	beq.w	90024ea8 <_dtoa_r+0x428>
90024d9a:	49bc      	ldr	r1, [pc, #752]	; (9002508c <_dtoa_r+0x60c>)
90024d9c:	ed91 6b08 	vldr	d6, [r1, #32]
90024da0:	ee88 6b06 	vdiv.f64	d6, d8, d6
90024da4:	ed8d 6b02 	vstr	d6, [sp, #8]
90024da8:	f002 020f 	and.w	r2, r2, #15
90024dac:	2103      	movs	r1, #3
90024dae:	48b7      	ldr	r0, [pc, #732]	; (9002508c <_dtoa_r+0x60c>)
90024db0:	2a00      	cmp	r2, #0
90024db2:	d17b      	bne.n	90024eac <_dtoa_r+0x42c>
90024db4:	ed9d 6b02 	vldr	d6, [sp, #8]
90024db8:	ee86 7b07 	vdiv.f64	d7, d6, d7
90024dbc:	ed8d 7b02 	vstr	d7, [sp, #8]
90024dc0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
90024dc2:	ed9d 7b02 	vldr	d7, [sp, #8]
90024dc6:	2a00      	cmp	r2, #0
90024dc8:	f000 80a0 	beq.w	90024f0c <_dtoa_r+0x48c>
90024dcc:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
90024dd0:	eeb4 7bc6 	vcmpe.f64	d7, d6
90024dd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
90024dd8:	f140 8098 	bpl.w	90024f0c <_dtoa_r+0x48c>
90024ddc:	f1b9 0f00 	cmp.w	r9, #0
90024de0:	f000 8094 	beq.w	90024f0c <_dtoa_r+0x48c>
90024de4:	f1ba 0f00 	cmp.w	sl, #0
90024de8:	dd2f      	ble.n	90024e4a <_dtoa_r+0x3ca>
90024dea:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
90024dee:	ee27 7b06 	vmul.f64	d7, d7, d6
90024df2:	ed8d 7b02 	vstr	d7, [sp, #8]
90024df6:	f10b 32ff 	add.w	r2, fp, #4294967295
90024dfa:	3101      	adds	r1, #1
90024dfc:	4654      	mov	r4, sl
90024dfe:	ed9d 6b02 	vldr	d6, [sp, #8]
90024e02:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
90024e06:	ee07 1a90 	vmov	s15, r1
90024e0a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
90024e0e:	eea7 5b06 	vfma.f64	d5, d7, d6
90024e12:	ee15 7a90 	vmov	r7, s11
90024e16:	ec51 0b15 	vmov	r0, r1, d5
90024e1a:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
90024e1e:	2c00      	cmp	r4, #0
90024e20:	d177      	bne.n	90024f12 <_dtoa_r+0x492>
90024e22:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
90024e26:	ee36 6b47 	vsub.f64	d6, d6, d7
90024e2a:	ec41 0b17 	vmov	d7, r0, r1
90024e2e:	eeb4 6bc7 	vcmpe.f64	d6, d7
90024e32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
90024e36:	f300 826a 	bgt.w	9002530e <_dtoa_r+0x88e>
90024e3a:	eeb1 7b47 	vneg.f64	d7, d7
90024e3e:	eeb4 6bc7 	vcmpe.f64	d6, d7
90024e42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
90024e46:	f100 8260 	bmi.w	9002530a <_dtoa_r+0x88a>
90024e4a:	ed8d 8b02 	vstr	d8, [sp, #8]
90024e4e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
90024e50:	2a00      	cmp	r2, #0
90024e52:	f2c0 811d 	blt.w	90025090 <_dtoa_r+0x610>
90024e56:	f1bb 0f0e 	cmp.w	fp, #14
90024e5a:	f300 8119 	bgt.w	90025090 <_dtoa_r+0x610>
90024e5e:	4b8a      	ldr	r3, [pc, #552]	; (90025088 <_dtoa_r+0x608>)
90024e60:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
90024e64:	ed93 6b00 	vldr	d6, [r3]
90024e68:	9b08      	ldr	r3, [sp, #32]
90024e6a:	2b00      	cmp	r3, #0
90024e6c:	f280 80b7 	bge.w	90024fde <_dtoa_r+0x55e>
90024e70:	f1b9 0f00 	cmp.w	r9, #0
90024e74:	f300 80b3 	bgt.w	90024fde <_dtoa_r+0x55e>
90024e78:	f040 8246 	bne.w	90025308 <_dtoa_r+0x888>
90024e7c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
90024e80:	ee26 6b07 	vmul.f64	d6, d6, d7
90024e84:	ed9d 7b02 	vldr	d7, [sp, #8]
90024e88:	eeb4 6bc7 	vcmpe.f64	d6, d7
90024e8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
90024e90:	464c      	mov	r4, r9
90024e92:	464f      	mov	r7, r9
90024e94:	f280 821c 	bge.w	900252d0 <_dtoa_r+0x850>
90024e98:	f8dd 8004 	ldr.w	r8, [sp, #4]
90024e9c:	2331      	movs	r3, #49	; 0x31
90024e9e:	f808 3b01 	strb.w	r3, [r8], #1
90024ea2:	f10b 0b01 	add.w	fp, fp, #1
90024ea6:	e218      	b.n	900252da <_dtoa_r+0x85a>
90024ea8:	2102      	movs	r1, #2
90024eaa:	e780      	b.n	90024dae <_dtoa_r+0x32e>
90024eac:	07d4      	lsls	r4, r2, #31
90024eae:	d504      	bpl.n	90024eba <_dtoa_r+0x43a>
90024eb0:	ed90 6b00 	vldr	d6, [r0]
90024eb4:	3101      	adds	r1, #1
90024eb6:	ee27 7b06 	vmul.f64	d7, d7, d6
90024eba:	1052      	asrs	r2, r2, #1
90024ebc:	3008      	adds	r0, #8
90024ebe:	e777      	b.n	90024db0 <_dtoa_r+0x330>
90024ec0:	d022      	beq.n	90024f08 <_dtoa_r+0x488>
90024ec2:	f1cb 0200 	rsb	r2, fp, #0
90024ec6:	4970      	ldr	r1, [pc, #448]	; (90025088 <_dtoa_r+0x608>)
90024ec8:	f002 000f 	and.w	r0, r2, #15
90024ecc:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
90024ed0:	ed91 7b00 	vldr	d7, [r1]
90024ed4:	ee28 7b07 	vmul.f64	d7, d8, d7
90024ed8:	ed8d 7b02 	vstr	d7, [sp, #8]
90024edc:	486b      	ldr	r0, [pc, #428]	; (9002508c <_dtoa_r+0x60c>)
90024ede:	1112      	asrs	r2, r2, #4
90024ee0:	2400      	movs	r4, #0
90024ee2:	2102      	movs	r1, #2
90024ee4:	b92a      	cbnz	r2, 90024ef2 <_dtoa_r+0x472>
90024ee6:	2c00      	cmp	r4, #0
90024ee8:	f43f af6a 	beq.w	90024dc0 <_dtoa_r+0x340>
90024eec:	ed8d 7b02 	vstr	d7, [sp, #8]
90024ef0:	e766      	b.n	90024dc0 <_dtoa_r+0x340>
90024ef2:	07d7      	lsls	r7, r2, #31
90024ef4:	d505      	bpl.n	90024f02 <_dtoa_r+0x482>
90024ef6:	ed90 6b00 	vldr	d6, [r0]
90024efa:	3101      	adds	r1, #1
90024efc:	2401      	movs	r4, #1
90024efe:	ee27 7b06 	vmul.f64	d7, d7, d6
90024f02:	1052      	asrs	r2, r2, #1
90024f04:	3008      	adds	r0, #8
90024f06:	e7ed      	b.n	90024ee4 <_dtoa_r+0x464>
90024f08:	2102      	movs	r1, #2
90024f0a:	e759      	b.n	90024dc0 <_dtoa_r+0x340>
90024f0c:	465a      	mov	r2, fp
90024f0e:	464c      	mov	r4, r9
90024f10:	e775      	b.n	90024dfe <_dtoa_r+0x37e>
90024f12:	ec41 0b17 	vmov	d7, r0, r1
90024f16:	495c      	ldr	r1, [pc, #368]	; (90025088 <_dtoa_r+0x608>)
90024f18:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
90024f1c:	ed11 4b02 	vldr	d4, [r1, #-8]
90024f20:	9901      	ldr	r1, [sp, #4]
90024f22:	440c      	add	r4, r1
90024f24:	9907      	ldr	r1, [sp, #28]
90024f26:	b351      	cbz	r1, 90024f7e <_dtoa_r+0x4fe>
90024f28:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
90024f2c:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
90024f30:	f8dd 8004 	ldr.w	r8, [sp, #4]
90024f34:	ee83 5b04 	vdiv.f64	d5, d3, d4
90024f38:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
90024f3c:	ee35 7b47 	vsub.f64	d7, d5, d7
90024f40:	eefd 4bc6 	vcvt.s32.f64	s9, d6
90024f44:	ee14 1a90 	vmov	r1, s9
90024f48:	eeb8 5be4 	vcvt.f64.s32	d5, s9
90024f4c:	3130      	adds	r1, #48	; 0x30
90024f4e:	ee36 6b45 	vsub.f64	d6, d6, d5
90024f52:	eeb4 6bc7 	vcmpe.f64	d6, d7
90024f56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
90024f5a:	f808 1b01 	strb.w	r1, [r8], #1
90024f5e:	d439      	bmi.n	90024fd4 <_dtoa_r+0x554>
90024f60:	ee32 5b46 	vsub.f64	d5, d2, d6
90024f64:	eeb4 5bc7 	vcmpe.f64	d5, d7
90024f68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
90024f6c:	d472      	bmi.n	90025054 <_dtoa_r+0x5d4>
90024f6e:	45a0      	cmp	r8, r4
90024f70:	f43f af6b 	beq.w	90024e4a <_dtoa_r+0x3ca>
90024f74:	ee27 7b03 	vmul.f64	d7, d7, d3
90024f78:	ee26 6b03 	vmul.f64	d6, d6, d3
90024f7c:	e7e0      	b.n	90024f40 <_dtoa_r+0x4c0>
90024f7e:	f8dd 8004 	ldr.w	r8, [sp, #4]
90024f82:	ee27 7b04 	vmul.f64	d7, d7, d4
90024f86:	4620      	mov	r0, r4
90024f88:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
90024f8c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
90024f90:	ee14 1a90 	vmov	r1, s9
90024f94:	3130      	adds	r1, #48	; 0x30
90024f96:	f808 1b01 	strb.w	r1, [r8], #1
90024f9a:	45a0      	cmp	r8, r4
90024f9c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
90024fa0:	ee36 6b45 	vsub.f64	d6, d6, d5
90024fa4:	d118      	bne.n	90024fd8 <_dtoa_r+0x558>
90024fa6:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
90024faa:	ee37 4b05 	vadd.f64	d4, d7, d5
90024fae:	eeb4 6bc4 	vcmpe.f64	d6, d4
90024fb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
90024fb6:	dc4d      	bgt.n	90025054 <_dtoa_r+0x5d4>
90024fb8:	ee35 5b47 	vsub.f64	d5, d5, d7
90024fbc:	eeb4 6bc5 	vcmpe.f64	d6, d5
90024fc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
90024fc4:	f57f af41 	bpl.w	90024e4a <_dtoa_r+0x3ca>
90024fc8:	4680      	mov	r8, r0
90024fca:	3801      	subs	r0, #1
90024fcc:	f818 3c01 	ldrb.w	r3, [r8, #-1]
90024fd0:	2b30      	cmp	r3, #48	; 0x30
90024fd2:	d0f9      	beq.n	90024fc8 <_dtoa_r+0x548>
90024fd4:	4693      	mov	fp, r2
90024fd6:	e02a      	b.n	9002502e <_dtoa_r+0x5ae>
90024fd8:	ee26 6b03 	vmul.f64	d6, d6, d3
90024fdc:	e7d6      	b.n	90024f8c <_dtoa_r+0x50c>
90024fde:	ed9d 7b02 	vldr	d7, [sp, #8]
90024fe2:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
90024fe6:	f8dd 8004 	ldr.w	r8, [sp, #4]
90024fea:	ee87 5b06 	vdiv.f64	d5, d7, d6
90024fee:	eebd 5bc5 	vcvt.s32.f64	s10, d5
90024ff2:	ee15 3a10 	vmov	r3, s10
90024ff6:	3330      	adds	r3, #48	; 0x30
90024ff8:	f808 3b01 	strb.w	r3, [r8], #1
90024ffc:	9b01      	ldr	r3, [sp, #4]
90024ffe:	eba8 0303 	sub.w	r3, r8, r3
90025002:	4599      	cmp	r9, r3
90025004:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
90025008:	eea3 7b46 	vfms.f64	d7, d3, d6
9002500c:	d133      	bne.n	90025076 <_dtoa_r+0x5f6>
9002500e:	ee37 7b07 	vadd.f64	d7, d7, d7
90025012:	eeb4 7bc6 	vcmpe.f64	d7, d6
90025016:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
9002501a:	dc1a      	bgt.n	90025052 <_dtoa_r+0x5d2>
9002501c:	eeb4 7b46 	vcmp.f64	d7, d6
90025020:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
90025024:	d103      	bne.n	9002502e <_dtoa_r+0x5ae>
90025026:	ee15 3a10 	vmov	r3, s10
9002502a:	07d9      	lsls	r1, r3, #31
9002502c:	d411      	bmi.n	90025052 <_dtoa_r+0x5d2>
9002502e:	4629      	mov	r1, r5
90025030:	4630      	mov	r0, r6
90025032:	f000 fb1d 	bl	90025670 <_Bfree>
90025036:	2300      	movs	r3, #0
90025038:	9a0c      	ldr	r2, [sp, #48]	; 0x30
9002503a:	f888 3000 	strb.w	r3, [r8]
9002503e:	f10b 0301 	add.w	r3, fp, #1
90025042:	6013      	str	r3, [r2, #0]
90025044:	9b1d      	ldr	r3, [sp, #116]	; 0x74
90025046:	2b00      	cmp	r3, #0
90025048:	f43f ad69 	beq.w	90024b1e <_dtoa_r+0x9e>
9002504c:	f8c3 8000 	str.w	r8, [r3]
90025050:	e565      	b.n	90024b1e <_dtoa_r+0x9e>
90025052:	465a      	mov	r2, fp
90025054:	4643      	mov	r3, r8
90025056:	4698      	mov	r8, r3
90025058:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
9002505c:	2939      	cmp	r1, #57	; 0x39
9002505e:	d106      	bne.n	9002506e <_dtoa_r+0x5ee>
90025060:	9901      	ldr	r1, [sp, #4]
90025062:	4299      	cmp	r1, r3
90025064:	d1f7      	bne.n	90025056 <_dtoa_r+0x5d6>
90025066:	9801      	ldr	r0, [sp, #4]
90025068:	2130      	movs	r1, #48	; 0x30
9002506a:	3201      	adds	r2, #1
9002506c:	7001      	strb	r1, [r0, #0]
9002506e:	7819      	ldrb	r1, [r3, #0]
90025070:	3101      	adds	r1, #1
90025072:	7019      	strb	r1, [r3, #0]
90025074:	e7ae      	b.n	90024fd4 <_dtoa_r+0x554>
90025076:	ee27 7b04 	vmul.f64	d7, d7, d4
9002507a:	eeb5 7b40 	vcmp.f64	d7, #0.0
9002507e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
90025082:	d1b2      	bne.n	90024fea <_dtoa_r+0x56a>
90025084:	e7d3      	b.n	9002502e <_dtoa_r+0x5ae>
90025086:	bf00      	nop
90025088:	90029360 	.word	0x90029360
9002508c:	90029338 	.word	0x90029338
90025090:	9907      	ldr	r1, [sp, #28]
90025092:	2900      	cmp	r1, #0
90025094:	f000 80d0 	beq.w	90025238 <_dtoa_r+0x7b8>
90025098:	9906      	ldr	r1, [sp, #24]
9002509a:	2901      	cmp	r1, #1
9002509c:	f300 80b4 	bgt.w	90025208 <_dtoa_r+0x788>
900250a0:	9909      	ldr	r1, [sp, #36]	; 0x24
900250a2:	2900      	cmp	r1, #0
900250a4:	f000 80ac 	beq.w	90025200 <_dtoa_r+0x780>
900250a8:	f202 4233 	addw	r2, r2, #1075	; 0x433
900250ac:	f8dd 8010 	ldr.w	r8, [sp, #16]
900250b0:	461c      	mov	r4, r3
900250b2:	9309      	str	r3, [sp, #36]	; 0x24
900250b4:	9b04      	ldr	r3, [sp, #16]
900250b6:	4413      	add	r3, r2
900250b8:	9304      	str	r3, [sp, #16]
900250ba:	9b05      	ldr	r3, [sp, #20]
900250bc:	2101      	movs	r1, #1
900250be:	4413      	add	r3, r2
900250c0:	4630      	mov	r0, r6
900250c2:	9305      	str	r3, [sp, #20]
900250c4:	f000 fb8a 	bl	900257dc <__i2b>
900250c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
900250ca:	4607      	mov	r7, r0
900250cc:	f1b8 0f00 	cmp.w	r8, #0
900250d0:	d00d      	beq.n	900250ee <_dtoa_r+0x66e>
900250d2:	9a05      	ldr	r2, [sp, #20]
900250d4:	2a00      	cmp	r2, #0
900250d6:	dd0a      	ble.n	900250ee <_dtoa_r+0x66e>
900250d8:	4542      	cmp	r2, r8
900250da:	9904      	ldr	r1, [sp, #16]
900250dc:	bfa8      	it	ge
900250de:	4642      	movge	r2, r8
900250e0:	1a89      	subs	r1, r1, r2
900250e2:	9104      	str	r1, [sp, #16]
900250e4:	9905      	ldr	r1, [sp, #20]
900250e6:	eba8 0802 	sub.w	r8, r8, r2
900250ea:	1a8a      	subs	r2, r1, r2
900250ec:	9205      	str	r2, [sp, #20]
900250ee:	b303      	cbz	r3, 90025132 <_dtoa_r+0x6b2>
900250f0:	9a07      	ldr	r2, [sp, #28]
900250f2:	2a00      	cmp	r2, #0
900250f4:	f000 80a5 	beq.w	90025242 <_dtoa_r+0x7c2>
900250f8:	2c00      	cmp	r4, #0
900250fa:	dd13      	ble.n	90025124 <_dtoa_r+0x6a4>
900250fc:	4639      	mov	r1, r7
900250fe:	4622      	mov	r2, r4
90025100:	4630      	mov	r0, r6
90025102:	930d      	str	r3, [sp, #52]	; 0x34
90025104:	f000 fc2a 	bl	9002595c <__pow5mult>
90025108:	462a      	mov	r2, r5
9002510a:	4601      	mov	r1, r0
9002510c:	4607      	mov	r7, r0
9002510e:	4630      	mov	r0, r6
90025110:	f000 fb7a 	bl	90025808 <__multiply>
90025114:	4629      	mov	r1, r5
90025116:	9009      	str	r0, [sp, #36]	; 0x24
90025118:	4630      	mov	r0, r6
9002511a:	f000 faa9 	bl	90025670 <_Bfree>
9002511e:	9a09      	ldr	r2, [sp, #36]	; 0x24
90025120:	9b0d      	ldr	r3, [sp, #52]	; 0x34
90025122:	4615      	mov	r5, r2
90025124:	1b1a      	subs	r2, r3, r4
90025126:	d004      	beq.n	90025132 <_dtoa_r+0x6b2>
90025128:	4629      	mov	r1, r5
9002512a:	4630      	mov	r0, r6
9002512c:	f000 fc16 	bl	9002595c <__pow5mult>
90025130:	4605      	mov	r5, r0
90025132:	2101      	movs	r1, #1
90025134:	4630      	mov	r0, r6
90025136:	f000 fb51 	bl	900257dc <__i2b>
9002513a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
9002513c:	2b00      	cmp	r3, #0
9002513e:	4604      	mov	r4, r0
90025140:	f340 8081 	ble.w	90025246 <_dtoa_r+0x7c6>
90025144:	461a      	mov	r2, r3
90025146:	4601      	mov	r1, r0
90025148:	4630      	mov	r0, r6
9002514a:	f000 fc07 	bl	9002595c <__pow5mult>
9002514e:	9b06      	ldr	r3, [sp, #24]
90025150:	2b01      	cmp	r3, #1
90025152:	4604      	mov	r4, r0
90025154:	dd7a      	ble.n	9002524c <_dtoa_r+0x7cc>
90025156:	2300      	movs	r3, #0
90025158:	9309      	str	r3, [sp, #36]	; 0x24
9002515a:	6922      	ldr	r2, [r4, #16]
9002515c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
90025160:	6910      	ldr	r0, [r2, #16]
90025162:	f000 faed 	bl	90025740 <__hi0bits>
90025166:	f1c0 0020 	rsb	r0, r0, #32
9002516a:	9b05      	ldr	r3, [sp, #20]
9002516c:	4418      	add	r0, r3
9002516e:	f010 001f 	ands.w	r0, r0, #31
90025172:	f000 8093 	beq.w	9002529c <_dtoa_r+0x81c>
90025176:	f1c0 0220 	rsb	r2, r0, #32
9002517a:	2a04      	cmp	r2, #4
9002517c:	f340 8085 	ble.w	9002528a <_dtoa_r+0x80a>
90025180:	9b04      	ldr	r3, [sp, #16]
90025182:	f1c0 001c 	rsb	r0, r0, #28
90025186:	4403      	add	r3, r0
90025188:	9304      	str	r3, [sp, #16]
9002518a:	9b05      	ldr	r3, [sp, #20]
9002518c:	4480      	add	r8, r0
9002518e:	4403      	add	r3, r0
90025190:	9305      	str	r3, [sp, #20]
90025192:	9b04      	ldr	r3, [sp, #16]
90025194:	2b00      	cmp	r3, #0
90025196:	dd05      	ble.n	900251a4 <_dtoa_r+0x724>
90025198:	4629      	mov	r1, r5
9002519a:	461a      	mov	r2, r3
9002519c:	4630      	mov	r0, r6
9002519e:	f000 fc37 	bl	90025a10 <__lshift>
900251a2:	4605      	mov	r5, r0
900251a4:	9b05      	ldr	r3, [sp, #20]
900251a6:	2b00      	cmp	r3, #0
900251a8:	dd05      	ble.n	900251b6 <_dtoa_r+0x736>
900251aa:	4621      	mov	r1, r4
900251ac:	461a      	mov	r2, r3
900251ae:	4630      	mov	r0, r6
900251b0:	f000 fc2e 	bl	90025a10 <__lshift>
900251b4:	4604      	mov	r4, r0
900251b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
900251b8:	2b00      	cmp	r3, #0
900251ba:	d071      	beq.n	900252a0 <_dtoa_r+0x820>
900251bc:	4621      	mov	r1, r4
900251be:	4628      	mov	r0, r5
900251c0:	f000 fc92 	bl	90025ae8 <__mcmp>
900251c4:	2800      	cmp	r0, #0
900251c6:	da6b      	bge.n	900252a0 <_dtoa_r+0x820>
900251c8:	2300      	movs	r3, #0
900251ca:	4629      	mov	r1, r5
900251cc:	220a      	movs	r2, #10
900251ce:	4630      	mov	r0, r6
900251d0:	f000 fa70 	bl	900256b4 <__multadd>
900251d4:	9b07      	ldr	r3, [sp, #28]
900251d6:	f10b 3bff 	add.w	fp, fp, #4294967295
900251da:	4605      	mov	r5, r0
900251dc:	2b00      	cmp	r3, #0
900251de:	f000 8197 	beq.w	90025510 <_dtoa_r+0xa90>
900251e2:	4639      	mov	r1, r7
900251e4:	2300      	movs	r3, #0
900251e6:	220a      	movs	r2, #10
900251e8:	4630      	mov	r0, r6
900251ea:	f000 fa63 	bl	900256b4 <__multadd>
900251ee:	f1ba 0f00 	cmp.w	sl, #0
900251f2:	4607      	mov	r7, r0
900251f4:	f300 8093 	bgt.w	9002531e <_dtoa_r+0x89e>
900251f8:	9b06      	ldr	r3, [sp, #24]
900251fa:	2b02      	cmp	r3, #2
900251fc:	dc57      	bgt.n	900252ae <_dtoa_r+0x82e>
900251fe:	e08e      	b.n	9002531e <_dtoa_r+0x89e>
90025200:	9a0e      	ldr	r2, [sp, #56]	; 0x38
90025202:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
90025206:	e751      	b.n	900250ac <_dtoa_r+0x62c>
90025208:	f109 34ff 	add.w	r4, r9, #4294967295
9002520c:	42a3      	cmp	r3, r4
9002520e:	bfbf      	itttt	lt
90025210:	1ae2      	sublt	r2, r4, r3
90025212:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
90025214:	189b      	addlt	r3, r3, r2
90025216:	930a      	strlt	r3, [sp, #40]	; 0x28
90025218:	bfae      	itee	ge
9002521a:	1b1c      	subge	r4, r3, r4
9002521c:	4623      	movlt	r3, r4
9002521e:	2400      	movlt	r4, #0
90025220:	f1b9 0f00 	cmp.w	r9, #0
90025224:	bfb5      	itete	lt
90025226:	9a04      	ldrlt	r2, [sp, #16]
90025228:	f8dd 8010 	ldrge.w	r8, [sp, #16]
9002522c:	eba2 0809 	sublt.w	r8, r2, r9
90025230:	464a      	movge	r2, r9
90025232:	bfb8      	it	lt
90025234:	2200      	movlt	r2, #0
90025236:	e73c      	b.n	900250b2 <_dtoa_r+0x632>
90025238:	f8dd 8010 	ldr.w	r8, [sp, #16]
9002523c:	9f07      	ldr	r7, [sp, #28]
9002523e:	461c      	mov	r4, r3
90025240:	e744      	b.n	900250cc <_dtoa_r+0x64c>
90025242:	461a      	mov	r2, r3
90025244:	e770      	b.n	90025128 <_dtoa_r+0x6a8>
90025246:	9b06      	ldr	r3, [sp, #24]
90025248:	2b01      	cmp	r3, #1
9002524a:	dc18      	bgt.n	9002527e <_dtoa_r+0x7fe>
9002524c:	9b02      	ldr	r3, [sp, #8]
9002524e:	b9b3      	cbnz	r3, 9002527e <_dtoa_r+0x7fe>
90025250:	9b03      	ldr	r3, [sp, #12]
90025252:	f3c3 0213 	ubfx	r2, r3, #0, #20
90025256:	b9a2      	cbnz	r2, 90025282 <_dtoa_r+0x802>
90025258:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
9002525c:	0d12      	lsrs	r2, r2, #20
9002525e:	0512      	lsls	r2, r2, #20
90025260:	b18a      	cbz	r2, 90025286 <_dtoa_r+0x806>
90025262:	9b04      	ldr	r3, [sp, #16]
90025264:	3301      	adds	r3, #1
90025266:	9304      	str	r3, [sp, #16]
90025268:	9b05      	ldr	r3, [sp, #20]
9002526a:	3301      	adds	r3, #1
9002526c:	9305      	str	r3, [sp, #20]
9002526e:	2301      	movs	r3, #1
90025270:	9309      	str	r3, [sp, #36]	; 0x24
90025272:	9b0a      	ldr	r3, [sp, #40]	; 0x28
90025274:	2b00      	cmp	r3, #0
90025276:	f47f af70 	bne.w	9002515a <_dtoa_r+0x6da>
9002527a:	2001      	movs	r0, #1
9002527c:	e775      	b.n	9002516a <_dtoa_r+0x6ea>
9002527e:	2300      	movs	r3, #0
90025280:	e7f6      	b.n	90025270 <_dtoa_r+0x7f0>
90025282:	9b02      	ldr	r3, [sp, #8]
90025284:	e7f4      	b.n	90025270 <_dtoa_r+0x7f0>
90025286:	9209      	str	r2, [sp, #36]	; 0x24
90025288:	e7f3      	b.n	90025272 <_dtoa_r+0x7f2>
9002528a:	d082      	beq.n	90025192 <_dtoa_r+0x712>
9002528c:	9b04      	ldr	r3, [sp, #16]
9002528e:	321c      	adds	r2, #28
90025290:	4413      	add	r3, r2
90025292:	9304      	str	r3, [sp, #16]
90025294:	9b05      	ldr	r3, [sp, #20]
90025296:	4490      	add	r8, r2
90025298:	4413      	add	r3, r2
9002529a:	e779      	b.n	90025190 <_dtoa_r+0x710>
9002529c:	4602      	mov	r2, r0
9002529e:	e7f5      	b.n	9002528c <_dtoa_r+0x80c>
900252a0:	f1b9 0f00 	cmp.w	r9, #0
900252a4:	dc36      	bgt.n	90025314 <_dtoa_r+0x894>
900252a6:	9b06      	ldr	r3, [sp, #24]
900252a8:	2b02      	cmp	r3, #2
900252aa:	dd33      	ble.n	90025314 <_dtoa_r+0x894>
900252ac:	46ca      	mov	sl, r9
900252ae:	f1ba 0f00 	cmp.w	sl, #0
900252b2:	d10d      	bne.n	900252d0 <_dtoa_r+0x850>
900252b4:	4621      	mov	r1, r4
900252b6:	4653      	mov	r3, sl
900252b8:	2205      	movs	r2, #5
900252ba:	4630      	mov	r0, r6
900252bc:	f000 f9fa 	bl	900256b4 <__multadd>
900252c0:	4601      	mov	r1, r0
900252c2:	4604      	mov	r4, r0
900252c4:	4628      	mov	r0, r5
900252c6:	f000 fc0f 	bl	90025ae8 <__mcmp>
900252ca:	2800      	cmp	r0, #0
900252cc:	f73f ade4 	bgt.w	90024e98 <_dtoa_r+0x418>
900252d0:	9b08      	ldr	r3, [sp, #32]
900252d2:	f8dd 8004 	ldr.w	r8, [sp, #4]
900252d6:	ea6f 0b03 	mvn.w	fp, r3
900252da:	f04f 0900 	mov.w	r9, #0
900252de:	4621      	mov	r1, r4
900252e0:	4630      	mov	r0, r6
900252e2:	f000 f9c5 	bl	90025670 <_Bfree>
900252e6:	2f00      	cmp	r7, #0
900252e8:	f43f aea1 	beq.w	9002502e <_dtoa_r+0x5ae>
900252ec:	f1b9 0f00 	cmp.w	r9, #0
900252f0:	d005      	beq.n	900252fe <_dtoa_r+0x87e>
900252f2:	45b9      	cmp	r9, r7
900252f4:	d003      	beq.n	900252fe <_dtoa_r+0x87e>
900252f6:	4649      	mov	r1, r9
900252f8:	4630      	mov	r0, r6
900252fa:	f000 f9b9 	bl	90025670 <_Bfree>
900252fe:	4639      	mov	r1, r7
90025300:	4630      	mov	r0, r6
90025302:	f000 f9b5 	bl	90025670 <_Bfree>
90025306:	e692      	b.n	9002502e <_dtoa_r+0x5ae>
90025308:	2400      	movs	r4, #0
9002530a:	4627      	mov	r7, r4
9002530c:	e7e0      	b.n	900252d0 <_dtoa_r+0x850>
9002530e:	4693      	mov	fp, r2
90025310:	4627      	mov	r7, r4
90025312:	e5c1      	b.n	90024e98 <_dtoa_r+0x418>
90025314:	9b07      	ldr	r3, [sp, #28]
90025316:	46ca      	mov	sl, r9
90025318:	2b00      	cmp	r3, #0
9002531a:	f000 8100 	beq.w	9002551e <_dtoa_r+0xa9e>
9002531e:	f1b8 0f00 	cmp.w	r8, #0
90025322:	dd05      	ble.n	90025330 <_dtoa_r+0x8b0>
90025324:	4639      	mov	r1, r7
90025326:	4642      	mov	r2, r8
90025328:	4630      	mov	r0, r6
9002532a:	f000 fb71 	bl	90025a10 <__lshift>
9002532e:	4607      	mov	r7, r0
90025330:	9b09      	ldr	r3, [sp, #36]	; 0x24
90025332:	2b00      	cmp	r3, #0
90025334:	d05d      	beq.n	900253f2 <_dtoa_r+0x972>
90025336:	6879      	ldr	r1, [r7, #4]
90025338:	4630      	mov	r0, r6
9002533a:	f000 f959 	bl	900255f0 <_Balloc>
9002533e:	4680      	mov	r8, r0
90025340:	b928      	cbnz	r0, 9002534e <_dtoa_r+0x8ce>
90025342:	4b82      	ldr	r3, [pc, #520]	; (9002554c <_dtoa_r+0xacc>)
90025344:	4602      	mov	r2, r0
90025346:	f240 21ef 	movw	r1, #751	; 0x2ef
9002534a:	f7ff bbb1 	b.w	90024ab0 <_dtoa_r+0x30>
9002534e:	693a      	ldr	r2, [r7, #16]
90025350:	3202      	adds	r2, #2
90025352:	0092      	lsls	r2, r2, #2
90025354:	f107 010c 	add.w	r1, r7, #12
90025358:	300c      	adds	r0, #12
9002535a:	f7ff fa9b 	bl	90024894 <memcpy>
9002535e:	2201      	movs	r2, #1
90025360:	4641      	mov	r1, r8
90025362:	4630      	mov	r0, r6
90025364:	f000 fb54 	bl	90025a10 <__lshift>
90025368:	9b01      	ldr	r3, [sp, #4]
9002536a:	3301      	adds	r3, #1
9002536c:	9304      	str	r3, [sp, #16]
9002536e:	9b01      	ldr	r3, [sp, #4]
90025370:	4453      	add	r3, sl
90025372:	9308      	str	r3, [sp, #32]
90025374:	9b02      	ldr	r3, [sp, #8]
90025376:	f003 0301 	and.w	r3, r3, #1
9002537a:	46b9      	mov	r9, r7
9002537c:	9307      	str	r3, [sp, #28]
9002537e:	4607      	mov	r7, r0
90025380:	9b04      	ldr	r3, [sp, #16]
90025382:	4621      	mov	r1, r4
90025384:	3b01      	subs	r3, #1
90025386:	4628      	mov	r0, r5
90025388:	9302      	str	r3, [sp, #8]
9002538a:	f7ff faef 	bl	9002496c <quorem>
9002538e:	4603      	mov	r3, r0
90025390:	3330      	adds	r3, #48	; 0x30
90025392:	9005      	str	r0, [sp, #20]
90025394:	4649      	mov	r1, r9
90025396:	4628      	mov	r0, r5
90025398:	9309      	str	r3, [sp, #36]	; 0x24
9002539a:	f000 fba5 	bl	90025ae8 <__mcmp>
9002539e:	463a      	mov	r2, r7
900253a0:	4682      	mov	sl, r0
900253a2:	4621      	mov	r1, r4
900253a4:	4630      	mov	r0, r6
900253a6:	f000 fbbb 	bl	90025b20 <__mdiff>
900253aa:	68c2      	ldr	r2, [r0, #12]
900253ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
900253ae:	4680      	mov	r8, r0
900253b0:	bb0a      	cbnz	r2, 900253f6 <_dtoa_r+0x976>
900253b2:	4601      	mov	r1, r0
900253b4:	4628      	mov	r0, r5
900253b6:	f000 fb97 	bl	90025ae8 <__mcmp>
900253ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
900253bc:	4602      	mov	r2, r0
900253be:	4641      	mov	r1, r8
900253c0:	4630      	mov	r0, r6
900253c2:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
900253c6:	f000 f953 	bl	90025670 <_Bfree>
900253ca:	9b06      	ldr	r3, [sp, #24]
900253cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
900253ce:	f8dd 8010 	ldr.w	r8, [sp, #16]
900253d2:	ea43 0102 	orr.w	r1, r3, r2
900253d6:	9b07      	ldr	r3, [sp, #28]
900253d8:	4319      	orrs	r1, r3
900253da:	9b09      	ldr	r3, [sp, #36]	; 0x24
900253dc:	d10d      	bne.n	900253fa <_dtoa_r+0x97a>
900253de:	2b39      	cmp	r3, #57	; 0x39
900253e0:	d029      	beq.n	90025436 <_dtoa_r+0x9b6>
900253e2:	f1ba 0f00 	cmp.w	sl, #0
900253e6:	dd01      	ble.n	900253ec <_dtoa_r+0x96c>
900253e8:	9b05      	ldr	r3, [sp, #20]
900253ea:	3331      	adds	r3, #49	; 0x31
900253ec:	9a02      	ldr	r2, [sp, #8]
900253ee:	7013      	strb	r3, [r2, #0]
900253f0:	e775      	b.n	900252de <_dtoa_r+0x85e>
900253f2:	4638      	mov	r0, r7
900253f4:	e7b8      	b.n	90025368 <_dtoa_r+0x8e8>
900253f6:	2201      	movs	r2, #1
900253f8:	e7e1      	b.n	900253be <_dtoa_r+0x93e>
900253fa:	f1ba 0f00 	cmp.w	sl, #0
900253fe:	db06      	blt.n	9002540e <_dtoa_r+0x98e>
90025400:	9906      	ldr	r1, [sp, #24]
90025402:	ea41 0a0a 	orr.w	sl, r1, sl
90025406:	9907      	ldr	r1, [sp, #28]
90025408:	ea5a 0a01 	orrs.w	sl, sl, r1
9002540c:	d120      	bne.n	90025450 <_dtoa_r+0x9d0>
9002540e:	2a00      	cmp	r2, #0
90025410:	ddec      	ble.n	900253ec <_dtoa_r+0x96c>
90025412:	4629      	mov	r1, r5
90025414:	2201      	movs	r2, #1
90025416:	4630      	mov	r0, r6
90025418:	9304      	str	r3, [sp, #16]
9002541a:	f000 faf9 	bl	90025a10 <__lshift>
9002541e:	4621      	mov	r1, r4
90025420:	4605      	mov	r5, r0
90025422:	f000 fb61 	bl	90025ae8 <__mcmp>
90025426:	2800      	cmp	r0, #0
90025428:	9b04      	ldr	r3, [sp, #16]
9002542a:	dc02      	bgt.n	90025432 <_dtoa_r+0x9b2>
9002542c:	d1de      	bne.n	900253ec <_dtoa_r+0x96c>
9002542e:	07da      	lsls	r2, r3, #31
90025430:	d5dc      	bpl.n	900253ec <_dtoa_r+0x96c>
90025432:	2b39      	cmp	r3, #57	; 0x39
90025434:	d1d8      	bne.n	900253e8 <_dtoa_r+0x968>
90025436:	9a02      	ldr	r2, [sp, #8]
90025438:	2339      	movs	r3, #57	; 0x39
9002543a:	7013      	strb	r3, [r2, #0]
9002543c:	4643      	mov	r3, r8
9002543e:	4698      	mov	r8, r3
90025440:	3b01      	subs	r3, #1
90025442:	f818 2c01 	ldrb.w	r2, [r8, #-1]
90025446:	2a39      	cmp	r2, #57	; 0x39
90025448:	d051      	beq.n	900254ee <_dtoa_r+0xa6e>
9002544a:	3201      	adds	r2, #1
9002544c:	701a      	strb	r2, [r3, #0]
9002544e:	e746      	b.n	900252de <_dtoa_r+0x85e>
90025450:	2a00      	cmp	r2, #0
90025452:	dd03      	ble.n	9002545c <_dtoa_r+0x9dc>
90025454:	2b39      	cmp	r3, #57	; 0x39
90025456:	d0ee      	beq.n	90025436 <_dtoa_r+0x9b6>
90025458:	3301      	adds	r3, #1
9002545a:	e7c7      	b.n	900253ec <_dtoa_r+0x96c>
9002545c:	9a04      	ldr	r2, [sp, #16]
9002545e:	9908      	ldr	r1, [sp, #32]
90025460:	f802 3c01 	strb.w	r3, [r2, #-1]
90025464:	428a      	cmp	r2, r1
90025466:	d02b      	beq.n	900254c0 <_dtoa_r+0xa40>
90025468:	4629      	mov	r1, r5
9002546a:	2300      	movs	r3, #0
9002546c:	220a      	movs	r2, #10
9002546e:	4630      	mov	r0, r6
90025470:	f000 f920 	bl	900256b4 <__multadd>
90025474:	45b9      	cmp	r9, r7
90025476:	4605      	mov	r5, r0
90025478:	f04f 0300 	mov.w	r3, #0
9002547c:	f04f 020a 	mov.w	r2, #10
90025480:	4649      	mov	r1, r9
90025482:	4630      	mov	r0, r6
90025484:	d107      	bne.n	90025496 <_dtoa_r+0xa16>
90025486:	f000 f915 	bl	900256b4 <__multadd>
9002548a:	4681      	mov	r9, r0
9002548c:	4607      	mov	r7, r0
9002548e:	9b04      	ldr	r3, [sp, #16]
90025490:	3301      	adds	r3, #1
90025492:	9304      	str	r3, [sp, #16]
90025494:	e774      	b.n	90025380 <_dtoa_r+0x900>
90025496:	f000 f90d 	bl	900256b4 <__multadd>
9002549a:	4639      	mov	r1, r7
9002549c:	4681      	mov	r9, r0
9002549e:	2300      	movs	r3, #0
900254a0:	220a      	movs	r2, #10
900254a2:	4630      	mov	r0, r6
900254a4:	f000 f906 	bl	900256b4 <__multadd>
900254a8:	4607      	mov	r7, r0
900254aa:	e7f0      	b.n	9002548e <_dtoa_r+0xa0e>
900254ac:	f1ba 0f00 	cmp.w	sl, #0
900254b0:	9a01      	ldr	r2, [sp, #4]
900254b2:	bfcc      	ite	gt
900254b4:	46d0      	movgt	r8, sl
900254b6:	f04f 0801 	movle.w	r8, #1
900254ba:	4490      	add	r8, r2
900254bc:	f04f 0900 	mov.w	r9, #0
900254c0:	4629      	mov	r1, r5
900254c2:	2201      	movs	r2, #1
900254c4:	4630      	mov	r0, r6
900254c6:	9302      	str	r3, [sp, #8]
900254c8:	f000 faa2 	bl	90025a10 <__lshift>
900254cc:	4621      	mov	r1, r4
900254ce:	4605      	mov	r5, r0
900254d0:	f000 fb0a 	bl	90025ae8 <__mcmp>
900254d4:	2800      	cmp	r0, #0
900254d6:	dcb1      	bgt.n	9002543c <_dtoa_r+0x9bc>
900254d8:	d102      	bne.n	900254e0 <_dtoa_r+0xa60>
900254da:	9b02      	ldr	r3, [sp, #8]
900254dc:	07db      	lsls	r3, r3, #31
900254de:	d4ad      	bmi.n	9002543c <_dtoa_r+0x9bc>
900254e0:	4643      	mov	r3, r8
900254e2:	4698      	mov	r8, r3
900254e4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
900254e8:	2a30      	cmp	r2, #48	; 0x30
900254ea:	d0fa      	beq.n	900254e2 <_dtoa_r+0xa62>
900254ec:	e6f7      	b.n	900252de <_dtoa_r+0x85e>
900254ee:	9a01      	ldr	r2, [sp, #4]
900254f0:	429a      	cmp	r2, r3
900254f2:	d1a4      	bne.n	9002543e <_dtoa_r+0x9be>
900254f4:	f10b 0b01 	add.w	fp, fp, #1
900254f8:	2331      	movs	r3, #49	; 0x31
900254fa:	e778      	b.n	900253ee <_dtoa_r+0x96e>
900254fc:	4b14      	ldr	r3, [pc, #80]	; (90025550 <_dtoa_r+0xad0>)
900254fe:	f7ff bb2a 	b.w	90024b56 <_dtoa_r+0xd6>
90025502:	9b1d      	ldr	r3, [sp, #116]	; 0x74
90025504:	2b00      	cmp	r3, #0
90025506:	f47f ab05 	bne.w	90024b14 <_dtoa_r+0x94>
9002550a:	4b12      	ldr	r3, [pc, #72]	; (90025554 <_dtoa_r+0xad4>)
9002550c:	f7ff bb23 	b.w	90024b56 <_dtoa_r+0xd6>
90025510:	f1ba 0f00 	cmp.w	sl, #0
90025514:	dc03      	bgt.n	9002551e <_dtoa_r+0xa9e>
90025516:	9b06      	ldr	r3, [sp, #24]
90025518:	2b02      	cmp	r3, #2
9002551a:	f73f aec8 	bgt.w	900252ae <_dtoa_r+0x82e>
9002551e:	f8dd 8004 	ldr.w	r8, [sp, #4]
90025522:	4621      	mov	r1, r4
90025524:	4628      	mov	r0, r5
90025526:	f7ff fa21 	bl	9002496c <quorem>
9002552a:	f100 0330 	add.w	r3, r0, #48	; 0x30
9002552e:	f808 3b01 	strb.w	r3, [r8], #1
90025532:	9a01      	ldr	r2, [sp, #4]
90025534:	eba8 0202 	sub.w	r2, r8, r2
90025538:	4592      	cmp	sl, r2
9002553a:	ddb7      	ble.n	900254ac <_dtoa_r+0xa2c>
9002553c:	4629      	mov	r1, r5
9002553e:	2300      	movs	r3, #0
90025540:	220a      	movs	r2, #10
90025542:	4630      	mov	r0, r6
90025544:	f000 f8b6 	bl	900256b4 <__multadd>
90025548:	4605      	mov	r5, r0
9002554a:	e7ea      	b.n	90025522 <_dtoa_r+0xaa2>
9002554c:	900292c8 	.word	0x900292c8
90025550:	90029228 	.word	0x90029228
90025554:	9002924c 	.word	0x9002924c

90025558 <_free_r>:
90025558:	b537      	push	{r0, r1, r2, r4, r5, lr}
9002555a:	2900      	cmp	r1, #0
9002555c:	d044      	beq.n	900255e8 <_free_r+0x90>
9002555e:	f851 3c04 	ldr.w	r3, [r1, #-4]
90025562:	9001      	str	r0, [sp, #4]
90025564:	2b00      	cmp	r3, #0
90025566:	f1a1 0404 	sub.w	r4, r1, #4
9002556a:	bfb8      	it	lt
9002556c:	18e4      	addlt	r4, r4, r3
9002556e:	f7fe fa75 	bl	90023a5c <__malloc_lock>
90025572:	4a1e      	ldr	r2, [pc, #120]	; (900255ec <_free_r+0x94>)
90025574:	9801      	ldr	r0, [sp, #4]
90025576:	6813      	ldr	r3, [r2, #0]
90025578:	b933      	cbnz	r3, 90025588 <_free_r+0x30>
9002557a:	6063      	str	r3, [r4, #4]
9002557c:	6014      	str	r4, [r2, #0]
9002557e:	b003      	add	sp, #12
90025580:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
90025584:	f7fe ba70 	b.w	90023a68 <__malloc_unlock>
90025588:	42a3      	cmp	r3, r4
9002558a:	d908      	bls.n	9002559e <_free_r+0x46>
9002558c:	6825      	ldr	r5, [r4, #0]
9002558e:	1961      	adds	r1, r4, r5
90025590:	428b      	cmp	r3, r1
90025592:	bf01      	itttt	eq
90025594:	6819      	ldreq	r1, [r3, #0]
90025596:	685b      	ldreq	r3, [r3, #4]
90025598:	1949      	addeq	r1, r1, r5
9002559a:	6021      	streq	r1, [r4, #0]
9002559c:	e7ed      	b.n	9002557a <_free_r+0x22>
9002559e:	461a      	mov	r2, r3
900255a0:	685b      	ldr	r3, [r3, #4]
900255a2:	b10b      	cbz	r3, 900255a8 <_free_r+0x50>
900255a4:	42a3      	cmp	r3, r4
900255a6:	d9fa      	bls.n	9002559e <_free_r+0x46>
900255a8:	6811      	ldr	r1, [r2, #0]
900255aa:	1855      	adds	r5, r2, r1
900255ac:	42a5      	cmp	r5, r4
900255ae:	d10b      	bne.n	900255c8 <_free_r+0x70>
900255b0:	6824      	ldr	r4, [r4, #0]
900255b2:	4421      	add	r1, r4
900255b4:	1854      	adds	r4, r2, r1
900255b6:	42a3      	cmp	r3, r4
900255b8:	6011      	str	r1, [r2, #0]
900255ba:	d1e0      	bne.n	9002557e <_free_r+0x26>
900255bc:	681c      	ldr	r4, [r3, #0]
900255be:	685b      	ldr	r3, [r3, #4]
900255c0:	6053      	str	r3, [r2, #4]
900255c2:	440c      	add	r4, r1
900255c4:	6014      	str	r4, [r2, #0]
900255c6:	e7da      	b.n	9002557e <_free_r+0x26>
900255c8:	d902      	bls.n	900255d0 <_free_r+0x78>
900255ca:	230c      	movs	r3, #12
900255cc:	6003      	str	r3, [r0, #0]
900255ce:	e7d6      	b.n	9002557e <_free_r+0x26>
900255d0:	6825      	ldr	r5, [r4, #0]
900255d2:	1961      	adds	r1, r4, r5
900255d4:	428b      	cmp	r3, r1
900255d6:	bf04      	itt	eq
900255d8:	6819      	ldreq	r1, [r3, #0]
900255da:	685b      	ldreq	r3, [r3, #4]
900255dc:	6063      	str	r3, [r4, #4]
900255de:	bf04      	itt	eq
900255e0:	1949      	addeq	r1, r1, r5
900255e2:	6021      	streq	r1, [r4, #0]
900255e4:	6054      	str	r4, [r2, #4]
900255e6:	e7ca      	b.n	9002557e <_free_r+0x26>
900255e8:	b003      	add	sp, #12
900255ea:	bd30      	pop	{r4, r5, pc}
900255ec:	24022560 	.word	0x24022560

900255f0 <_Balloc>:
900255f0:	b570      	push	{r4, r5, r6, lr}
900255f2:	69c6      	ldr	r6, [r0, #28]
900255f4:	4604      	mov	r4, r0
900255f6:	460d      	mov	r5, r1
900255f8:	b976      	cbnz	r6, 90025618 <_Balloc+0x28>
900255fa:	2010      	movs	r0, #16
900255fc:	f7fe f97e 	bl	900238fc <malloc>
90025600:	4602      	mov	r2, r0
90025602:	61e0      	str	r0, [r4, #28]
90025604:	b920      	cbnz	r0, 90025610 <_Balloc+0x20>
90025606:	4b18      	ldr	r3, [pc, #96]	; (90025668 <_Balloc+0x78>)
90025608:	4818      	ldr	r0, [pc, #96]	; (9002566c <_Balloc+0x7c>)
9002560a:	216b      	movs	r1, #107	; 0x6b
9002560c:	f7fe f952 	bl	900238b4 <__assert_func>
90025610:	e9c0 6601 	strd	r6, r6, [r0, #4]
90025614:	6006      	str	r6, [r0, #0]
90025616:	60c6      	str	r6, [r0, #12]
90025618:	69e6      	ldr	r6, [r4, #28]
9002561a:	68f3      	ldr	r3, [r6, #12]
9002561c:	b183      	cbz	r3, 90025640 <_Balloc+0x50>
9002561e:	69e3      	ldr	r3, [r4, #28]
90025620:	68db      	ldr	r3, [r3, #12]
90025622:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
90025626:	b9b8      	cbnz	r0, 90025658 <_Balloc+0x68>
90025628:	2101      	movs	r1, #1
9002562a:	fa01 f605 	lsl.w	r6, r1, r5
9002562e:	1d72      	adds	r2, r6, #5
90025630:	0092      	lsls	r2, r2, #2
90025632:	4620      	mov	r0, r4
90025634:	f000 ff40 	bl	900264b8 <_calloc_r>
90025638:	b160      	cbz	r0, 90025654 <_Balloc+0x64>
9002563a:	e9c0 5601 	strd	r5, r6, [r0, #4]
9002563e:	e00e      	b.n	9002565e <_Balloc+0x6e>
90025640:	2221      	movs	r2, #33	; 0x21
90025642:	2104      	movs	r1, #4
90025644:	4620      	mov	r0, r4
90025646:	f000 ff37 	bl	900264b8 <_calloc_r>
9002564a:	69e3      	ldr	r3, [r4, #28]
9002564c:	60f0      	str	r0, [r6, #12]
9002564e:	68db      	ldr	r3, [r3, #12]
90025650:	2b00      	cmp	r3, #0
90025652:	d1e4      	bne.n	9002561e <_Balloc+0x2e>
90025654:	2000      	movs	r0, #0
90025656:	bd70      	pop	{r4, r5, r6, pc}
90025658:	6802      	ldr	r2, [r0, #0]
9002565a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
9002565e:	2300      	movs	r3, #0
90025660:	e9c0 3303 	strd	r3, r3, [r0, #12]
90025664:	e7f7      	b.n	90025656 <_Balloc+0x66>
90025666:	bf00      	nop
90025668:	90029259 	.word	0x90029259
9002566c:	900292d9 	.word	0x900292d9

90025670 <_Bfree>:
90025670:	b570      	push	{r4, r5, r6, lr}
90025672:	69c6      	ldr	r6, [r0, #28]
90025674:	4605      	mov	r5, r0
90025676:	460c      	mov	r4, r1
90025678:	b976      	cbnz	r6, 90025698 <_Bfree+0x28>
9002567a:	2010      	movs	r0, #16
9002567c:	f7fe f93e 	bl	900238fc <malloc>
90025680:	4602      	mov	r2, r0
90025682:	61e8      	str	r0, [r5, #28]
90025684:	b920      	cbnz	r0, 90025690 <_Bfree+0x20>
90025686:	4b09      	ldr	r3, [pc, #36]	; (900256ac <_Bfree+0x3c>)
90025688:	4809      	ldr	r0, [pc, #36]	; (900256b0 <_Bfree+0x40>)
9002568a:	218f      	movs	r1, #143	; 0x8f
9002568c:	f7fe f912 	bl	900238b4 <__assert_func>
90025690:	e9c0 6601 	strd	r6, r6, [r0, #4]
90025694:	6006      	str	r6, [r0, #0]
90025696:	60c6      	str	r6, [r0, #12]
90025698:	b13c      	cbz	r4, 900256aa <_Bfree+0x3a>
9002569a:	69eb      	ldr	r3, [r5, #28]
9002569c:	6862      	ldr	r2, [r4, #4]
9002569e:	68db      	ldr	r3, [r3, #12]
900256a0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
900256a4:	6021      	str	r1, [r4, #0]
900256a6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
900256aa:	bd70      	pop	{r4, r5, r6, pc}
900256ac:	90029259 	.word	0x90029259
900256b0:	900292d9 	.word	0x900292d9

900256b4 <__multadd>:
900256b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
900256b8:	690d      	ldr	r5, [r1, #16]
900256ba:	4607      	mov	r7, r0
900256bc:	460c      	mov	r4, r1
900256be:	461e      	mov	r6, r3
900256c0:	f101 0c14 	add.w	ip, r1, #20
900256c4:	2000      	movs	r0, #0
900256c6:	f8dc 3000 	ldr.w	r3, [ip]
900256ca:	b299      	uxth	r1, r3
900256cc:	fb02 6101 	mla	r1, r2, r1, r6
900256d0:	0c1e      	lsrs	r6, r3, #16
900256d2:	0c0b      	lsrs	r3, r1, #16
900256d4:	fb02 3306 	mla	r3, r2, r6, r3
900256d8:	b289      	uxth	r1, r1
900256da:	3001      	adds	r0, #1
900256dc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
900256e0:	4285      	cmp	r5, r0
900256e2:	f84c 1b04 	str.w	r1, [ip], #4
900256e6:	ea4f 4613 	mov.w	r6, r3, lsr #16
900256ea:	dcec      	bgt.n	900256c6 <__multadd+0x12>
900256ec:	b30e      	cbz	r6, 90025732 <__multadd+0x7e>
900256ee:	68a3      	ldr	r3, [r4, #8]
900256f0:	42ab      	cmp	r3, r5
900256f2:	dc19      	bgt.n	90025728 <__multadd+0x74>
900256f4:	6861      	ldr	r1, [r4, #4]
900256f6:	4638      	mov	r0, r7
900256f8:	3101      	adds	r1, #1
900256fa:	f7ff ff79 	bl	900255f0 <_Balloc>
900256fe:	4680      	mov	r8, r0
90025700:	b928      	cbnz	r0, 9002570e <__multadd+0x5a>
90025702:	4602      	mov	r2, r0
90025704:	4b0c      	ldr	r3, [pc, #48]	; (90025738 <__multadd+0x84>)
90025706:	480d      	ldr	r0, [pc, #52]	; (9002573c <__multadd+0x88>)
90025708:	21ba      	movs	r1, #186	; 0xba
9002570a:	f7fe f8d3 	bl	900238b4 <__assert_func>
9002570e:	6922      	ldr	r2, [r4, #16]
90025710:	3202      	adds	r2, #2
90025712:	f104 010c 	add.w	r1, r4, #12
90025716:	0092      	lsls	r2, r2, #2
90025718:	300c      	adds	r0, #12
9002571a:	f7ff f8bb 	bl	90024894 <memcpy>
9002571e:	4621      	mov	r1, r4
90025720:	4638      	mov	r0, r7
90025722:	f7ff ffa5 	bl	90025670 <_Bfree>
90025726:	4644      	mov	r4, r8
90025728:	eb04 0385 	add.w	r3, r4, r5, lsl #2
9002572c:	3501      	adds	r5, #1
9002572e:	615e      	str	r6, [r3, #20]
90025730:	6125      	str	r5, [r4, #16]
90025732:	4620      	mov	r0, r4
90025734:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
90025738:	900292c8 	.word	0x900292c8
9002573c:	900292d9 	.word	0x900292d9

90025740 <__hi0bits>:
90025740:	0c03      	lsrs	r3, r0, #16
90025742:	041b      	lsls	r3, r3, #16
90025744:	b9d3      	cbnz	r3, 9002577c <__hi0bits+0x3c>
90025746:	0400      	lsls	r0, r0, #16
90025748:	2310      	movs	r3, #16
9002574a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
9002574e:	bf04      	itt	eq
90025750:	0200      	lsleq	r0, r0, #8
90025752:	3308      	addeq	r3, #8
90025754:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
90025758:	bf04      	itt	eq
9002575a:	0100      	lsleq	r0, r0, #4
9002575c:	3304      	addeq	r3, #4
9002575e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
90025762:	bf04      	itt	eq
90025764:	0080      	lsleq	r0, r0, #2
90025766:	3302      	addeq	r3, #2
90025768:	2800      	cmp	r0, #0
9002576a:	db05      	blt.n	90025778 <__hi0bits+0x38>
9002576c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
90025770:	f103 0301 	add.w	r3, r3, #1
90025774:	bf08      	it	eq
90025776:	2320      	moveq	r3, #32
90025778:	4618      	mov	r0, r3
9002577a:	4770      	bx	lr
9002577c:	2300      	movs	r3, #0
9002577e:	e7e4      	b.n	9002574a <__hi0bits+0xa>

90025780 <__lo0bits>:
90025780:	6803      	ldr	r3, [r0, #0]
90025782:	f013 0207 	ands.w	r2, r3, #7
90025786:	d00c      	beq.n	900257a2 <__lo0bits+0x22>
90025788:	07d9      	lsls	r1, r3, #31
9002578a:	d422      	bmi.n	900257d2 <__lo0bits+0x52>
9002578c:	079a      	lsls	r2, r3, #30
9002578e:	bf49      	itett	mi
90025790:	085b      	lsrmi	r3, r3, #1
90025792:	089b      	lsrpl	r3, r3, #2
90025794:	6003      	strmi	r3, [r0, #0]
90025796:	2201      	movmi	r2, #1
90025798:	bf5c      	itt	pl
9002579a:	6003      	strpl	r3, [r0, #0]
9002579c:	2202      	movpl	r2, #2
9002579e:	4610      	mov	r0, r2
900257a0:	4770      	bx	lr
900257a2:	b299      	uxth	r1, r3
900257a4:	b909      	cbnz	r1, 900257aa <__lo0bits+0x2a>
900257a6:	0c1b      	lsrs	r3, r3, #16
900257a8:	2210      	movs	r2, #16
900257aa:	b2d9      	uxtb	r1, r3
900257ac:	b909      	cbnz	r1, 900257b2 <__lo0bits+0x32>
900257ae:	3208      	adds	r2, #8
900257b0:	0a1b      	lsrs	r3, r3, #8
900257b2:	0719      	lsls	r1, r3, #28
900257b4:	bf04      	itt	eq
900257b6:	091b      	lsreq	r3, r3, #4
900257b8:	3204      	addeq	r2, #4
900257ba:	0799      	lsls	r1, r3, #30
900257bc:	bf04      	itt	eq
900257be:	089b      	lsreq	r3, r3, #2
900257c0:	3202      	addeq	r2, #2
900257c2:	07d9      	lsls	r1, r3, #31
900257c4:	d403      	bmi.n	900257ce <__lo0bits+0x4e>
900257c6:	085b      	lsrs	r3, r3, #1
900257c8:	f102 0201 	add.w	r2, r2, #1
900257cc:	d003      	beq.n	900257d6 <__lo0bits+0x56>
900257ce:	6003      	str	r3, [r0, #0]
900257d0:	e7e5      	b.n	9002579e <__lo0bits+0x1e>
900257d2:	2200      	movs	r2, #0
900257d4:	e7e3      	b.n	9002579e <__lo0bits+0x1e>
900257d6:	2220      	movs	r2, #32
900257d8:	e7e1      	b.n	9002579e <__lo0bits+0x1e>
	...

900257dc <__i2b>:
900257dc:	b510      	push	{r4, lr}
900257de:	460c      	mov	r4, r1
900257e0:	2101      	movs	r1, #1
900257e2:	f7ff ff05 	bl	900255f0 <_Balloc>
900257e6:	4602      	mov	r2, r0
900257e8:	b928      	cbnz	r0, 900257f6 <__i2b+0x1a>
900257ea:	4b05      	ldr	r3, [pc, #20]	; (90025800 <__i2b+0x24>)
900257ec:	4805      	ldr	r0, [pc, #20]	; (90025804 <__i2b+0x28>)
900257ee:	f240 1145 	movw	r1, #325	; 0x145
900257f2:	f7fe f85f 	bl	900238b4 <__assert_func>
900257f6:	2301      	movs	r3, #1
900257f8:	6144      	str	r4, [r0, #20]
900257fa:	6103      	str	r3, [r0, #16]
900257fc:	bd10      	pop	{r4, pc}
900257fe:	bf00      	nop
90025800:	900292c8 	.word	0x900292c8
90025804:	900292d9 	.word	0x900292d9

90025808 <__multiply>:
90025808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9002580c:	4691      	mov	r9, r2
9002580e:	690a      	ldr	r2, [r1, #16]
90025810:	f8d9 3010 	ldr.w	r3, [r9, #16]
90025814:	429a      	cmp	r2, r3
90025816:	bfb8      	it	lt
90025818:	460b      	movlt	r3, r1
9002581a:	460c      	mov	r4, r1
9002581c:	bfbc      	itt	lt
9002581e:	464c      	movlt	r4, r9
90025820:	4699      	movlt	r9, r3
90025822:	6927      	ldr	r7, [r4, #16]
90025824:	f8d9 a010 	ldr.w	sl, [r9, #16]
90025828:	68a3      	ldr	r3, [r4, #8]
9002582a:	6861      	ldr	r1, [r4, #4]
9002582c:	eb07 060a 	add.w	r6, r7, sl
90025830:	42b3      	cmp	r3, r6
90025832:	b085      	sub	sp, #20
90025834:	bfb8      	it	lt
90025836:	3101      	addlt	r1, #1
90025838:	f7ff feda 	bl	900255f0 <_Balloc>
9002583c:	b930      	cbnz	r0, 9002584c <__multiply+0x44>
9002583e:	4602      	mov	r2, r0
90025840:	4b44      	ldr	r3, [pc, #272]	; (90025954 <__multiply+0x14c>)
90025842:	4845      	ldr	r0, [pc, #276]	; (90025958 <__multiply+0x150>)
90025844:	f44f 71b1 	mov.w	r1, #354	; 0x162
90025848:	f7fe f834 	bl	900238b4 <__assert_func>
9002584c:	f100 0514 	add.w	r5, r0, #20
90025850:	eb05 0886 	add.w	r8, r5, r6, lsl #2
90025854:	462b      	mov	r3, r5
90025856:	2200      	movs	r2, #0
90025858:	4543      	cmp	r3, r8
9002585a:	d321      	bcc.n	900258a0 <__multiply+0x98>
9002585c:	f104 0314 	add.w	r3, r4, #20
90025860:	eb03 0787 	add.w	r7, r3, r7, lsl #2
90025864:	f109 0314 	add.w	r3, r9, #20
90025868:	eb03 028a 	add.w	r2, r3, sl, lsl #2
9002586c:	9202      	str	r2, [sp, #8]
9002586e:	1b3a      	subs	r2, r7, r4
90025870:	3a15      	subs	r2, #21
90025872:	f022 0203 	bic.w	r2, r2, #3
90025876:	3204      	adds	r2, #4
90025878:	f104 0115 	add.w	r1, r4, #21
9002587c:	428f      	cmp	r7, r1
9002587e:	bf38      	it	cc
90025880:	2204      	movcc	r2, #4
90025882:	9201      	str	r2, [sp, #4]
90025884:	9a02      	ldr	r2, [sp, #8]
90025886:	9303      	str	r3, [sp, #12]
90025888:	429a      	cmp	r2, r3
9002588a:	d80c      	bhi.n	900258a6 <__multiply+0x9e>
9002588c:	2e00      	cmp	r6, #0
9002588e:	dd03      	ble.n	90025898 <__multiply+0x90>
90025890:	f858 3d04 	ldr.w	r3, [r8, #-4]!
90025894:	2b00      	cmp	r3, #0
90025896:	d05b      	beq.n	90025950 <__multiply+0x148>
90025898:	6106      	str	r6, [r0, #16]
9002589a:	b005      	add	sp, #20
9002589c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
900258a0:	f843 2b04 	str.w	r2, [r3], #4
900258a4:	e7d8      	b.n	90025858 <__multiply+0x50>
900258a6:	f8b3 a000 	ldrh.w	sl, [r3]
900258aa:	f1ba 0f00 	cmp.w	sl, #0
900258ae:	d024      	beq.n	900258fa <__multiply+0xf2>
900258b0:	f104 0e14 	add.w	lr, r4, #20
900258b4:	46a9      	mov	r9, r5
900258b6:	f04f 0c00 	mov.w	ip, #0
900258ba:	f85e 2b04 	ldr.w	r2, [lr], #4
900258be:	f8d9 1000 	ldr.w	r1, [r9]
900258c2:	fa1f fb82 	uxth.w	fp, r2
900258c6:	b289      	uxth	r1, r1
900258c8:	fb0a 110b 	mla	r1, sl, fp, r1
900258cc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
900258d0:	f8d9 2000 	ldr.w	r2, [r9]
900258d4:	4461      	add	r1, ip
900258d6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
900258da:	fb0a c20b 	mla	r2, sl, fp, ip
900258de:	eb02 4211 	add.w	r2, r2, r1, lsr #16
900258e2:	b289      	uxth	r1, r1
900258e4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
900258e8:	4577      	cmp	r7, lr
900258ea:	f849 1b04 	str.w	r1, [r9], #4
900258ee:	ea4f 4c12 	mov.w	ip, r2, lsr #16
900258f2:	d8e2      	bhi.n	900258ba <__multiply+0xb2>
900258f4:	9a01      	ldr	r2, [sp, #4]
900258f6:	f845 c002 	str.w	ip, [r5, r2]
900258fa:	9a03      	ldr	r2, [sp, #12]
900258fc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
90025900:	3304      	adds	r3, #4
90025902:	f1b9 0f00 	cmp.w	r9, #0
90025906:	d021      	beq.n	9002594c <__multiply+0x144>
90025908:	6829      	ldr	r1, [r5, #0]
9002590a:	f104 0c14 	add.w	ip, r4, #20
9002590e:	46ae      	mov	lr, r5
90025910:	f04f 0a00 	mov.w	sl, #0
90025914:	f8bc b000 	ldrh.w	fp, [ip]
90025918:	f8be 2002 	ldrh.w	r2, [lr, #2]
9002591c:	fb09 220b 	mla	r2, r9, fp, r2
90025920:	4452      	add	r2, sl
90025922:	b289      	uxth	r1, r1
90025924:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
90025928:	f84e 1b04 	str.w	r1, [lr], #4
9002592c:	f85c 1b04 	ldr.w	r1, [ip], #4
90025930:	ea4f 4a11 	mov.w	sl, r1, lsr #16
90025934:	f8be 1000 	ldrh.w	r1, [lr]
90025938:	fb09 110a 	mla	r1, r9, sl, r1
9002593c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
90025940:	4567      	cmp	r7, ip
90025942:	ea4f 4a11 	mov.w	sl, r1, lsr #16
90025946:	d8e5      	bhi.n	90025914 <__multiply+0x10c>
90025948:	9a01      	ldr	r2, [sp, #4]
9002594a:	50a9      	str	r1, [r5, r2]
9002594c:	3504      	adds	r5, #4
9002594e:	e799      	b.n	90025884 <__multiply+0x7c>
90025950:	3e01      	subs	r6, #1
90025952:	e79b      	b.n	9002588c <__multiply+0x84>
90025954:	900292c8 	.word	0x900292c8
90025958:	900292d9 	.word	0x900292d9

9002595c <__pow5mult>:
9002595c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
90025960:	4615      	mov	r5, r2
90025962:	f012 0203 	ands.w	r2, r2, #3
90025966:	4606      	mov	r6, r0
90025968:	460f      	mov	r7, r1
9002596a:	d007      	beq.n	9002597c <__pow5mult+0x20>
9002596c:	4c25      	ldr	r4, [pc, #148]	; (90025a04 <__pow5mult+0xa8>)
9002596e:	3a01      	subs	r2, #1
90025970:	2300      	movs	r3, #0
90025972:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
90025976:	f7ff fe9d 	bl	900256b4 <__multadd>
9002597a:	4607      	mov	r7, r0
9002597c:	10ad      	asrs	r5, r5, #2
9002597e:	d03d      	beq.n	900259fc <__pow5mult+0xa0>
90025980:	69f4      	ldr	r4, [r6, #28]
90025982:	b97c      	cbnz	r4, 900259a4 <__pow5mult+0x48>
90025984:	2010      	movs	r0, #16
90025986:	f7fd ffb9 	bl	900238fc <malloc>
9002598a:	4602      	mov	r2, r0
9002598c:	61f0      	str	r0, [r6, #28]
9002598e:	b928      	cbnz	r0, 9002599c <__pow5mult+0x40>
90025990:	4b1d      	ldr	r3, [pc, #116]	; (90025a08 <__pow5mult+0xac>)
90025992:	481e      	ldr	r0, [pc, #120]	; (90025a0c <__pow5mult+0xb0>)
90025994:	f240 11b3 	movw	r1, #435	; 0x1b3
90025998:	f7fd ff8c 	bl	900238b4 <__assert_func>
9002599c:	e9c0 4401 	strd	r4, r4, [r0, #4]
900259a0:	6004      	str	r4, [r0, #0]
900259a2:	60c4      	str	r4, [r0, #12]
900259a4:	f8d6 801c 	ldr.w	r8, [r6, #28]
900259a8:	f8d8 4008 	ldr.w	r4, [r8, #8]
900259ac:	b94c      	cbnz	r4, 900259c2 <__pow5mult+0x66>
900259ae:	f240 2171 	movw	r1, #625	; 0x271
900259b2:	4630      	mov	r0, r6
900259b4:	f7ff ff12 	bl	900257dc <__i2b>
900259b8:	2300      	movs	r3, #0
900259ba:	f8c8 0008 	str.w	r0, [r8, #8]
900259be:	4604      	mov	r4, r0
900259c0:	6003      	str	r3, [r0, #0]
900259c2:	f04f 0900 	mov.w	r9, #0
900259c6:	07eb      	lsls	r3, r5, #31
900259c8:	d50a      	bpl.n	900259e0 <__pow5mult+0x84>
900259ca:	4639      	mov	r1, r7
900259cc:	4622      	mov	r2, r4
900259ce:	4630      	mov	r0, r6
900259d0:	f7ff ff1a 	bl	90025808 <__multiply>
900259d4:	4639      	mov	r1, r7
900259d6:	4680      	mov	r8, r0
900259d8:	4630      	mov	r0, r6
900259da:	f7ff fe49 	bl	90025670 <_Bfree>
900259de:	4647      	mov	r7, r8
900259e0:	106d      	asrs	r5, r5, #1
900259e2:	d00b      	beq.n	900259fc <__pow5mult+0xa0>
900259e4:	6820      	ldr	r0, [r4, #0]
900259e6:	b938      	cbnz	r0, 900259f8 <__pow5mult+0x9c>
900259e8:	4622      	mov	r2, r4
900259ea:	4621      	mov	r1, r4
900259ec:	4630      	mov	r0, r6
900259ee:	f7ff ff0b 	bl	90025808 <__multiply>
900259f2:	6020      	str	r0, [r4, #0]
900259f4:	f8c0 9000 	str.w	r9, [r0]
900259f8:	4604      	mov	r4, r0
900259fa:	e7e4      	b.n	900259c6 <__pow5mult+0x6a>
900259fc:	4638      	mov	r0, r7
900259fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
90025a02:	bf00      	nop
90025a04:	90029428 	.word	0x90029428
90025a08:	90029259 	.word	0x90029259
90025a0c:	900292d9 	.word	0x900292d9

90025a10 <__lshift>:
90025a10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
90025a14:	460c      	mov	r4, r1
90025a16:	6849      	ldr	r1, [r1, #4]
90025a18:	6923      	ldr	r3, [r4, #16]
90025a1a:	eb03 1862 	add.w	r8, r3, r2, asr #5
90025a1e:	68a3      	ldr	r3, [r4, #8]
90025a20:	4607      	mov	r7, r0
90025a22:	4691      	mov	r9, r2
90025a24:	ea4f 1a62 	mov.w	sl, r2, asr #5
90025a28:	f108 0601 	add.w	r6, r8, #1
90025a2c:	42b3      	cmp	r3, r6
90025a2e:	db0b      	blt.n	90025a48 <__lshift+0x38>
90025a30:	4638      	mov	r0, r7
90025a32:	f7ff fddd 	bl	900255f0 <_Balloc>
90025a36:	4605      	mov	r5, r0
90025a38:	b948      	cbnz	r0, 90025a4e <__lshift+0x3e>
90025a3a:	4602      	mov	r2, r0
90025a3c:	4b28      	ldr	r3, [pc, #160]	; (90025ae0 <__lshift+0xd0>)
90025a3e:	4829      	ldr	r0, [pc, #164]	; (90025ae4 <__lshift+0xd4>)
90025a40:	f44f 71ef 	mov.w	r1, #478	; 0x1de
90025a44:	f7fd ff36 	bl	900238b4 <__assert_func>
90025a48:	3101      	adds	r1, #1
90025a4a:	005b      	lsls	r3, r3, #1
90025a4c:	e7ee      	b.n	90025a2c <__lshift+0x1c>
90025a4e:	2300      	movs	r3, #0
90025a50:	f100 0114 	add.w	r1, r0, #20
90025a54:	f100 0210 	add.w	r2, r0, #16
90025a58:	4618      	mov	r0, r3
90025a5a:	4553      	cmp	r3, sl
90025a5c:	db33      	blt.n	90025ac6 <__lshift+0xb6>
90025a5e:	6920      	ldr	r0, [r4, #16]
90025a60:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
90025a64:	f104 0314 	add.w	r3, r4, #20
90025a68:	f019 091f 	ands.w	r9, r9, #31
90025a6c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
90025a70:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
90025a74:	d02b      	beq.n	90025ace <__lshift+0xbe>
90025a76:	f1c9 0e20 	rsb	lr, r9, #32
90025a7a:	468a      	mov	sl, r1
90025a7c:	2200      	movs	r2, #0
90025a7e:	6818      	ldr	r0, [r3, #0]
90025a80:	fa00 f009 	lsl.w	r0, r0, r9
90025a84:	4310      	orrs	r0, r2
90025a86:	f84a 0b04 	str.w	r0, [sl], #4
90025a8a:	f853 2b04 	ldr.w	r2, [r3], #4
90025a8e:	459c      	cmp	ip, r3
90025a90:	fa22 f20e 	lsr.w	r2, r2, lr
90025a94:	d8f3      	bhi.n	90025a7e <__lshift+0x6e>
90025a96:	ebac 0304 	sub.w	r3, ip, r4
90025a9a:	3b15      	subs	r3, #21
90025a9c:	f023 0303 	bic.w	r3, r3, #3
90025aa0:	3304      	adds	r3, #4
90025aa2:	f104 0015 	add.w	r0, r4, #21
90025aa6:	4584      	cmp	ip, r0
90025aa8:	bf38      	it	cc
90025aaa:	2304      	movcc	r3, #4
90025aac:	50ca      	str	r2, [r1, r3]
90025aae:	b10a      	cbz	r2, 90025ab4 <__lshift+0xa4>
90025ab0:	f108 0602 	add.w	r6, r8, #2
90025ab4:	3e01      	subs	r6, #1
90025ab6:	4638      	mov	r0, r7
90025ab8:	612e      	str	r6, [r5, #16]
90025aba:	4621      	mov	r1, r4
90025abc:	f7ff fdd8 	bl	90025670 <_Bfree>
90025ac0:	4628      	mov	r0, r5
90025ac2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
90025ac6:	f842 0f04 	str.w	r0, [r2, #4]!
90025aca:	3301      	adds	r3, #1
90025acc:	e7c5      	b.n	90025a5a <__lshift+0x4a>
90025ace:	3904      	subs	r1, #4
90025ad0:	f853 2b04 	ldr.w	r2, [r3], #4
90025ad4:	f841 2f04 	str.w	r2, [r1, #4]!
90025ad8:	459c      	cmp	ip, r3
90025ada:	d8f9      	bhi.n	90025ad0 <__lshift+0xc0>
90025adc:	e7ea      	b.n	90025ab4 <__lshift+0xa4>
90025ade:	bf00      	nop
90025ae0:	900292c8 	.word	0x900292c8
90025ae4:	900292d9 	.word	0x900292d9

90025ae8 <__mcmp>:
90025ae8:	b530      	push	{r4, r5, lr}
90025aea:	6902      	ldr	r2, [r0, #16]
90025aec:	690c      	ldr	r4, [r1, #16]
90025aee:	1b12      	subs	r2, r2, r4
90025af0:	d10e      	bne.n	90025b10 <__mcmp+0x28>
90025af2:	f100 0314 	add.w	r3, r0, #20
90025af6:	3114      	adds	r1, #20
90025af8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
90025afc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
90025b00:	f850 5d04 	ldr.w	r5, [r0, #-4]!
90025b04:	f851 4d04 	ldr.w	r4, [r1, #-4]!
90025b08:	42a5      	cmp	r5, r4
90025b0a:	d003      	beq.n	90025b14 <__mcmp+0x2c>
90025b0c:	d305      	bcc.n	90025b1a <__mcmp+0x32>
90025b0e:	2201      	movs	r2, #1
90025b10:	4610      	mov	r0, r2
90025b12:	bd30      	pop	{r4, r5, pc}
90025b14:	4283      	cmp	r3, r0
90025b16:	d3f3      	bcc.n	90025b00 <__mcmp+0x18>
90025b18:	e7fa      	b.n	90025b10 <__mcmp+0x28>
90025b1a:	f04f 32ff 	mov.w	r2, #4294967295
90025b1e:	e7f7      	b.n	90025b10 <__mcmp+0x28>

90025b20 <__mdiff>:
90025b20:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
90025b24:	460c      	mov	r4, r1
90025b26:	4606      	mov	r6, r0
90025b28:	4611      	mov	r1, r2
90025b2a:	4620      	mov	r0, r4
90025b2c:	4690      	mov	r8, r2
90025b2e:	f7ff ffdb 	bl	90025ae8 <__mcmp>
90025b32:	1e05      	subs	r5, r0, #0
90025b34:	d110      	bne.n	90025b58 <__mdiff+0x38>
90025b36:	4629      	mov	r1, r5
90025b38:	4630      	mov	r0, r6
90025b3a:	f7ff fd59 	bl	900255f0 <_Balloc>
90025b3e:	b930      	cbnz	r0, 90025b4e <__mdiff+0x2e>
90025b40:	4b3a      	ldr	r3, [pc, #232]	; (90025c2c <__mdiff+0x10c>)
90025b42:	4602      	mov	r2, r0
90025b44:	f240 2137 	movw	r1, #567	; 0x237
90025b48:	4839      	ldr	r0, [pc, #228]	; (90025c30 <__mdiff+0x110>)
90025b4a:	f7fd feb3 	bl	900238b4 <__assert_func>
90025b4e:	2301      	movs	r3, #1
90025b50:	e9c0 3504 	strd	r3, r5, [r0, #16]
90025b54:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
90025b58:	bfa4      	itt	ge
90025b5a:	4643      	movge	r3, r8
90025b5c:	46a0      	movge	r8, r4
90025b5e:	4630      	mov	r0, r6
90025b60:	f8d8 1004 	ldr.w	r1, [r8, #4]
90025b64:	bfa6      	itte	ge
90025b66:	461c      	movge	r4, r3
90025b68:	2500      	movge	r5, #0
90025b6a:	2501      	movlt	r5, #1
90025b6c:	f7ff fd40 	bl	900255f0 <_Balloc>
90025b70:	b920      	cbnz	r0, 90025b7c <__mdiff+0x5c>
90025b72:	4b2e      	ldr	r3, [pc, #184]	; (90025c2c <__mdiff+0x10c>)
90025b74:	4602      	mov	r2, r0
90025b76:	f240 2145 	movw	r1, #581	; 0x245
90025b7a:	e7e5      	b.n	90025b48 <__mdiff+0x28>
90025b7c:	f8d8 7010 	ldr.w	r7, [r8, #16]
90025b80:	6926      	ldr	r6, [r4, #16]
90025b82:	60c5      	str	r5, [r0, #12]
90025b84:	f104 0914 	add.w	r9, r4, #20
90025b88:	f108 0514 	add.w	r5, r8, #20
90025b8c:	f100 0e14 	add.w	lr, r0, #20
90025b90:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
90025b94:	eb09 0686 	add.w	r6, r9, r6, lsl #2
90025b98:	f108 0210 	add.w	r2, r8, #16
90025b9c:	46f2      	mov	sl, lr
90025b9e:	2100      	movs	r1, #0
90025ba0:	f859 3b04 	ldr.w	r3, [r9], #4
90025ba4:	f852 bf04 	ldr.w	fp, [r2, #4]!
90025ba8:	fa11 f88b 	uxtah	r8, r1, fp
90025bac:	b299      	uxth	r1, r3
90025bae:	0c1b      	lsrs	r3, r3, #16
90025bb0:	eba8 0801 	sub.w	r8, r8, r1
90025bb4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
90025bb8:	eb03 4328 	add.w	r3, r3, r8, asr #16
90025bbc:	fa1f f888 	uxth.w	r8, r8
90025bc0:	1419      	asrs	r1, r3, #16
90025bc2:	454e      	cmp	r6, r9
90025bc4:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
90025bc8:	f84a 3b04 	str.w	r3, [sl], #4
90025bcc:	d8e8      	bhi.n	90025ba0 <__mdiff+0x80>
90025bce:	1b33      	subs	r3, r6, r4
90025bd0:	3b15      	subs	r3, #21
90025bd2:	f023 0303 	bic.w	r3, r3, #3
90025bd6:	3304      	adds	r3, #4
90025bd8:	3415      	adds	r4, #21
90025bda:	42a6      	cmp	r6, r4
90025bdc:	bf38      	it	cc
90025bde:	2304      	movcc	r3, #4
90025be0:	441d      	add	r5, r3
90025be2:	4473      	add	r3, lr
90025be4:	469e      	mov	lr, r3
90025be6:	462e      	mov	r6, r5
90025be8:	4566      	cmp	r6, ip
90025bea:	d30e      	bcc.n	90025c0a <__mdiff+0xea>
90025bec:	f10c 0203 	add.w	r2, ip, #3
90025bf0:	1b52      	subs	r2, r2, r5
90025bf2:	f022 0203 	bic.w	r2, r2, #3
90025bf6:	3d03      	subs	r5, #3
90025bf8:	45ac      	cmp	ip, r5
90025bfa:	bf38      	it	cc
90025bfc:	2200      	movcc	r2, #0
90025bfe:	4413      	add	r3, r2
90025c00:	f853 2d04 	ldr.w	r2, [r3, #-4]!
90025c04:	b17a      	cbz	r2, 90025c26 <__mdiff+0x106>
90025c06:	6107      	str	r7, [r0, #16]
90025c08:	e7a4      	b.n	90025b54 <__mdiff+0x34>
90025c0a:	f856 8b04 	ldr.w	r8, [r6], #4
90025c0e:	fa11 f288 	uxtah	r2, r1, r8
90025c12:	1414      	asrs	r4, r2, #16
90025c14:	eb04 4418 	add.w	r4, r4, r8, lsr #16
90025c18:	b292      	uxth	r2, r2
90025c1a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
90025c1e:	f84e 2b04 	str.w	r2, [lr], #4
90025c22:	1421      	asrs	r1, r4, #16
90025c24:	e7e0      	b.n	90025be8 <__mdiff+0xc8>
90025c26:	3f01      	subs	r7, #1
90025c28:	e7ea      	b.n	90025c00 <__mdiff+0xe0>
90025c2a:	bf00      	nop
90025c2c:	900292c8 	.word	0x900292c8
90025c30:	900292d9 	.word	0x900292d9

90025c34 <__d2b>:
90025c34:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
90025c38:	460f      	mov	r7, r1
90025c3a:	2101      	movs	r1, #1
90025c3c:	ec59 8b10 	vmov	r8, r9, d0
90025c40:	4616      	mov	r6, r2
90025c42:	f7ff fcd5 	bl	900255f0 <_Balloc>
90025c46:	4604      	mov	r4, r0
90025c48:	b930      	cbnz	r0, 90025c58 <__d2b+0x24>
90025c4a:	4602      	mov	r2, r0
90025c4c:	4b24      	ldr	r3, [pc, #144]	; (90025ce0 <__d2b+0xac>)
90025c4e:	4825      	ldr	r0, [pc, #148]	; (90025ce4 <__d2b+0xb0>)
90025c50:	f240 310f 	movw	r1, #783	; 0x30f
90025c54:	f7fd fe2e 	bl	900238b4 <__assert_func>
90025c58:	f3c9 550a 	ubfx	r5, r9, #20, #11
90025c5c:	f3c9 0313 	ubfx	r3, r9, #0, #20
90025c60:	bb2d      	cbnz	r5, 90025cae <__d2b+0x7a>
90025c62:	9301      	str	r3, [sp, #4]
90025c64:	f1b8 0300 	subs.w	r3, r8, #0
90025c68:	d026      	beq.n	90025cb8 <__d2b+0x84>
90025c6a:	4668      	mov	r0, sp
90025c6c:	9300      	str	r3, [sp, #0]
90025c6e:	f7ff fd87 	bl	90025780 <__lo0bits>
90025c72:	e9dd 1200 	ldrd	r1, r2, [sp]
90025c76:	b1e8      	cbz	r0, 90025cb4 <__d2b+0x80>
90025c78:	f1c0 0320 	rsb	r3, r0, #32
90025c7c:	fa02 f303 	lsl.w	r3, r2, r3
90025c80:	430b      	orrs	r3, r1
90025c82:	40c2      	lsrs	r2, r0
90025c84:	6163      	str	r3, [r4, #20]
90025c86:	9201      	str	r2, [sp, #4]
90025c88:	9b01      	ldr	r3, [sp, #4]
90025c8a:	61a3      	str	r3, [r4, #24]
90025c8c:	2b00      	cmp	r3, #0
90025c8e:	bf14      	ite	ne
90025c90:	2202      	movne	r2, #2
90025c92:	2201      	moveq	r2, #1
90025c94:	6122      	str	r2, [r4, #16]
90025c96:	b1bd      	cbz	r5, 90025cc8 <__d2b+0x94>
90025c98:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
90025c9c:	4405      	add	r5, r0
90025c9e:	603d      	str	r5, [r7, #0]
90025ca0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
90025ca4:	6030      	str	r0, [r6, #0]
90025ca6:	4620      	mov	r0, r4
90025ca8:	b003      	add	sp, #12
90025caa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
90025cae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
90025cb2:	e7d6      	b.n	90025c62 <__d2b+0x2e>
90025cb4:	6161      	str	r1, [r4, #20]
90025cb6:	e7e7      	b.n	90025c88 <__d2b+0x54>
90025cb8:	a801      	add	r0, sp, #4
90025cba:	f7ff fd61 	bl	90025780 <__lo0bits>
90025cbe:	9b01      	ldr	r3, [sp, #4]
90025cc0:	6163      	str	r3, [r4, #20]
90025cc2:	3020      	adds	r0, #32
90025cc4:	2201      	movs	r2, #1
90025cc6:	e7e5      	b.n	90025c94 <__d2b+0x60>
90025cc8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
90025ccc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
90025cd0:	6038      	str	r0, [r7, #0]
90025cd2:	6918      	ldr	r0, [r3, #16]
90025cd4:	f7ff fd34 	bl	90025740 <__hi0bits>
90025cd8:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
90025cdc:	e7e2      	b.n	90025ca4 <__d2b+0x70>
90025cde:	bf00      	nop
90025ce0:	900292c8 	.word	0x900292c8
90025ce4:	900292d9 	.word	0x900292d9

90025ce8 <__ssputs_r>:
90025ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
90025cec:	688e      	ldr	r6, [r1, #8]
90025cee:	461f      	mov	r7, r3
90025cf0:	42be      	cmp	r6, r7
90025cf2:	680b      	ldr	r3, [r1, #0]
90025cf4:	4682      	mov	sl, r0
90025cf6:	460c      	mov	r4, r1
90025cf8:	4690      	mov	r8, r2
90025cfa:	d82c      	bhi.n	90025d56 <__ssputs_r+0x6e>
90025cfc:	898a      	ldrh	r2, [r1, #12]
90025cfe:	f412 6f90 	tst.w	r2, #1152	; 0x480
90025d02:	d026      	beq.n	90025d52 <__ssputs_r+0x6a>
90025d04:	6965      	ldr	r5, [r4, #20]
90025d06:	6909      	ldr	r1, [r1, #16]
90025d08:	eb05 0545 	add.w	r5, r5, r5, lsl #1
90025d0c:	eba3 0901 	sub.w	r9, r3, r1
90025d10:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
90025d14:	1c7b      	adds	r3, r7, #1
90025d16:	444b      	add	r3, r9
90025d18:	106d      	asrs	r5, r5, #1
90025d1a:	429d      	cmp	r5, r3
90025d1c:	bf38      	it	cc
90025d1e:	461d      	movcc	r5, r3
90025d20:	0553      	lsls	r3, r2, #21
90025d22:	d527      	bpl.n	90025d74 <__ssputs_r+0x8c>
90025d24:	4629      	mov	r1, r5
90025d26:	f7fd fe19 	bl	9002395c <_malloc_r>
90025d2a:	4606      	mov	r6, r0
90025d2c:	b360      	cbz	r0, 90025d88 <__ssputs_r+0xa0>
90025d2e:	6921      	ldr	r1, [r4, #16]
90025d30:	464a      	mov	r2, r9
90025d32:	f7fe fdaf 	bl	90024894 <memcpy>
90025d36:	89a3      	ldrh	r3, [r4, #12]
90025d38:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
90025d3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
90025d40:	81a3      	strh	r3, [r4, #12]
90025d42:	6126      	str	r6, [r4, #16]
90025d44:	6165      	str	r5, [r4, #20]
90025d46:	444e      	add	r6, r9
90025d48:	eba5 0509 	sub.w	r5, r5, r9
90025d4c:	6026      	str	r6, [r4, #0]
90025d4e:	60a5      	str	r5, [r4, #8]
90025d50:	463e      	mov	r6, r7
90025d52:	42be      	cmp	r6, r7
90025d54:	d900      	bls.n	90025d58 <__ssputs_r+0x70>
90025d56:	463e      	mov	r6, r7
90025d58:	6820      	ldr	r0, [r4, #0]
90025d5a:	4632      	mov	r2, r6
90025d5c:	4641      	mov	r1, r8
90025d5e:	f000 fb6f 	bl	90026440 <memmove>
90025d62:	68a3      	ldr	r3, [r4, #8]
90025d64:	1b9b      	subs	r3, r3, r6
90025d66:	60a3      	str	r3, [r4, #8]
90025d68:	6823      	ldr	r3, [r4, #0]
90025d6a:	4433      	add	r3, r6
90025d6c:	6023      	str	r3, [r4, #0]
90025d6e:	2000      	movs	r0, #0
90025d70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
90025d74:	462a      	mov	r2, r5
90025d76:	f000 fbc7 	bl	90026508 <_realloc_r>
90025d7a:	4606      	mov	r6, r0
90025d7c:	2800      	cmp	r0, #0
90025d7e:	d1e0      	bne.n	90025d42 <__ssputs_r+0x5a>
90025d80:	6921      	ldr	r1, [r4, #16]
90025d82:	4650      	mov	r0, sl
90025d84:	f7ff fbe8 	bl	90025558 <_free_r>
90025d88:	230c      	movs	r3, #12
90025d8a:	f8ca 3000 	str.w	r3, [sl]
90025d8e:	89a3      	ldrh	r3, [r4, #12]
90025d90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
90025d94:	81a3      	strh	r3, [r4, #12]
90025d96:	f04f 30ff 	mov.w	r0, #4294967295
90025d9a:	e7e9      	b.n	90025d70 <__ssputs_r+0x88>

90025d9c <_svfiprintf_r>:
90025d9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90025da0:	4698      	mov	r8, r3
90025da2:	898b      	ldrh	r3, [r1, #12]
90025da4:	061b      	lsls	r3, r3, #24
90025da6:	b09d      	sub	sp, #116	; 0x74
90025da8:	4607      	mov	r7, r0
90025daa:	460d      	mov	r5, r1
90025dac:	4614      	mov	r4, r2
90025dae:	d50e      	bpl.n	90025dce <_svfiprintf_r+0x32>
90025db0:	690b      	ldr	r3, [r1, #16]
90025db2:	b963      	cbnz	r3, 90025dce <_svfiprintf_r+0x32>
90025db4:	2140      	movs	r1, #64	; 0x40
90025db6:	f7fd fdd1 	bl	9002395c <_malloc_r>
90025dba:	6028      	str	r0, [r5, #0]
90025dbc:	6128      	str	r0, [r5, #16]
90025dbe:	b920      	cbnz	r0, 90025dca <_svfiprintf_r+0x2e>
90025dc0:	230c      	movs	r3, #12
90025dc2:	603b      	str	r3, [r7, #0]
90025dc4:	f04f 30ff 	mov.w	r0, #4294967295
90025dc8:	e0d0      	b.n	90025f6c <_svfiprintf_r+0x1d0>
90025dca:	2340      	movs	r3, #64	; 0x40
90025dcc:	616b      	str	r3, [r5, #20]
90025dce:	2300      	movs	r3, #0
90025dd0:	9309      	str	r3, [sp, #36]	; 0x24
90025dd2:	2320      	movs	r3, #32
90025dd4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
90025dd8:	f8cd 800c 	str.w	r8, [sp, #12]
90025ddc:	2330      	movs	r3, #48	; 0x30
90025dde:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 90025f84 <_svfiprintf_r+0x1e8>
90025de2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
90025de6:	f04f 0901 	mov.w	r9, #1
90025dea:	4623      	mov	r3, r4
90025dec:	469a      	mov	sl, r3
90025dee:	f813 2b01 	ldrb.w	r2, [r3], #1
90025df2:	b10a      	cbz	r2, 90025df8 <_svfiprintf_r+0x5c>
90025df4:	2a25      	cmp	r2, #37	; 0x25
90025df6:	d1f9      	bne.n	90025dec <_svfiprintf_r+0x50>
90025df8:	ebba 0b04 	subs.w	fp, sl, r4
90025dfc:	d00b      	beq.n	90025e16 <_svfiprintf_r+0x7a>
90025dfe:	465b      	mov	r3, fp
90025e00:	4622      	mov	r2, r4
90025e02:	4629      	mov	r1, r5
90025e04:	4638      	mov	r0, r7
90025e06:	f7ff ff6f 	bl	90025ce8 <__ssputs_r>
90025e0a:	3001      	adds	r0, #1
90025e0c:	f000 80a9 	beq.w	90025f62 <_svfiprintf_r+0x1c6>
90025e10:	9a09      	ldr	r2, [sp, #36]	; 0x24
90025e12:	445a      	add	r2, fp
90025e14:	9209      	str	r2, [sp, #36]	; 0x24
90025e16:	f89a 3000 	ldrb.w	r3, [sl]
90025e1a:	2b00      	cmp	r3, #0
90025e1c:	f000 80a1 	beq.w	90025f62 <_svfiprintf_r+0x1c6>
90025e20:	2300      	movs	r3, #0
90025e22:	f04f 32ff 	mov.w	r2, #4294967295
90025e26:	e9cd 2305 	strd	r2, r3, [sp, #20]
90025e2a:	f10a 0a01 	add.w	sl, sl, #1
90025e2e:	9304      	str	r3, [sp, #16]
90025e30:	9307      	str	r3, [sp, #28]
90025e32:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
90025e36:	931a      	str	r3, [sp, #104]	; 0x68
90025e38:	4654      	mov	r4, sl
90025e3a:	2205      	movs	r2, #5
90025e3c:	f814 1b01 	ldrb.w	r1, [r4], #1
90025e40:	4850      	ldr	r0, [pc, #320]	; (90025f84 <_svfiprintf_r+0x1e8>)
90025e42:	f7da fa4d 	bl	900002e0 <memchr>
90025e46:	9a04      	ldr	r2, [sp, #16]
90025e48:	b9d8      	cbnz	r0, 90025e82 <_svfiprintf_r+0xe6>
90025e4a:	06d0      	lsls	r0, r2, #27
90025e4c:	bf44      	itt	mi
90025e4e:	2320      	movmi	r3, #32
90025e50:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
90025e54:	0711      	lsls	r1, r2, #28
90025e56:	bf44      	itt	mi
90025e58:	232b      	movmi	r3, #43	; 0x2b
90025e5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
90025e5e:	f89a 3000 	ldrb.w	r3, [sl]
90025e62:	2b2a      	cmp	r3, #42	; 0x2a
90025e64:	d015      	beq.n	90025e92 <_svfiprintf_r+0xf6>
90025e66:	9a07      	ldr	r2, [sp, #28]
90025e68:	4654      	mov	r4, sl
90025e6a:	2000      	movs	r0, #0
90025e6c:	f04f 0c0a 	mov.w	ip, #10
90025e70:	4621      	mov	r1, r4
90025e72:	f811 3b01 	ldrb.w	r3, [r1], #1
90025e76:	3b30      	subs	r3, #48	; 0x30
90025e78:	2b09      	cmp	r3, #9
90025e7a:	d94d      	bls.n	90025f18 <_svfiprintf_r+0x17c>
90025e7c:	b1b0      	cbz	r0, 90025eac <_svfiprintf_r+0x110>
90025e7e:	9207      	str	r2, [sp, #28]
90025e80:	e014      	b.n	90025eac <_svfiprintf_r+0x110>
90025e82:	eba0 0308 	sub.w	r3, r0, r8
90025e86:	fa09 f303 	lsl.w	r3, r9, r3
90025e8a:	4313      	orrs	r3, r2
90025e8c:	9304      	str	r3, [sp, #16]
90025e8e:	46a2      	mov	sl, r4
90025e90:	e7d2      	b.n	90025e38 <_svfiprintf_r+0x9c>
90025e92:	9b03      	ldr	r3, [sp, #12]
90025e94:	1d19      	adds	r1, r3, #4
90025e96:	681b      	ldr	r3, [r3, #0]
90025e98:	9103      	str	r1, [sp, #12]
90025e9a:	2b00      	cmp	r3, #0
90025e9c:	bfbb      	ittet	lt
90025e9e:	425b      	neglt	r3, r3
90025ea0:	f042 0202 	orrlt.w	r2, r2, #2
90025ea4:	9307      	strge	r3, [sp, #28]
90025ea6:	9307      	strlt	r3, [sp, #28]
90025ea8:	bfb8      	it	lt
90025eaa:	9204      	strlt	r2, [sp, #16]
90025eac:	7823      	ldrb	r3, [r4, #0]
90025eae:	2b2e      	cmp	r3, #46	; 0x2e
90025eb0:	d10c      	bne.n	90025ecc <_svfiprintf_r+0x130>
90025eb2:	7863      	ldrb	r3, [r4, #1]
90025eb4:	2b2a      	cmp	r3, #42	; 0x2a
90025eb6:	d134      	bne.n	90025f22 <_svfiprintf_r+0x186>
90025eb8:	9b03      	ldr	r3, [sp, #12]
90025eba:	1d1a      	adds	r2, r3, #4
90025ebc:	681b      	ldr	r3, [r3, #0]
90025ebe:	9203      	str	r2, [sp, #12]
90025ec0:	2b00      	cmp	r3, #0
90025ec2:	bfb8      	it	lt
90025ec4:	f04f 33ff 	movlt.w	r3, #4294967295
90025ec8:	3402      	adds	r4, #2
90025eca:	9305      	str	r3, [sp, #20]
90025ecc:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 90025f94 <_svfiprintf_r+0x1f8>
90025ed0:	7821      	ldrb	r1, [r4, #0]
90025ed2:	2203      	movs	r2, #3
90025ed4:	4650      	mov	r0, sl
90025ed6:	f7da fa03 	bl	900002e0 <memchr>
90025eda:	b138      	cbz	r0, 90025eec <_svfiprintf_r+0x150>
90025edc:	9b04      	ldr	r3, [sp, #16]
90025ede:	eba0 000a 	sub.w	r0, r0, sl
90025ee2:	2240      	movs	r2, #64	; 0x40
90025ee4:	4082      	lsls	r2, r0
90025ee6:	4313      	orrs	r3, r2
90025ee8:	3401      	adds	r4, #1
90025eea:	9304      	str	r3, [sp, #16]
90025eec:	f814 1b01 	ldrb.w	r1, [r4], #1
90025ef0:	4825      	ldr	r0, [pc, #148]	; (90025f88 <_svfiprintf_r+0x1ec>)
90025ef2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
90025ef6:	2206      	movs	r2, #6
90025ef8:	f7da f9f2 	bl	900002e0 <memchr>
90025efc:	2800      	cmp	r0, #0
90025efe:	d038      	beq.n	90025f72 <_svfiprintf_r+0x1d6>
90025f00:	4b22      	ldr	r3, [pc, #136]	; (90025f8c <_svfiprintf_r+0x1f0>)
90025f02:	bb1b      	cbnz	r3, 90025f4c <_svfiprintf_r+0x1b0>
90025f04:	9b03      	ldr	r3, [sp, #12]
90025f06:	3307      	adds	r3, #7
90025f08:	f023 0307 	bic.w	r3, r3, #7
90025f0c:	3308      	adds	r3, #8
90025f0e:	9303      	str	r3, [sp, #12]
90025f10:	9b09      	ldr	r3, [sp, #36]	; 0x24
90025f12:	4433      	add	r3, r6
90025f14:	9309      	str	r3, [sp, #36]	; 0x24
90025f16:	e768      	b.n	90025dea <_svfiprintf_r+0x4e>
90025f18:	fb0c 3202 	mla	r2, ip, r2, r3
90025f1c:	460c      	mov	r4, r1
90025f1e:	2001      	movs	r0, #1
90025f20:	e7a6      	b.n	90025e70 <_svfiprintf_r+0xd4>
90025f22:	2300      	movs	r3, #0
90025f24:	3401      	adds	r4, #1
90025f26:	9305      	str	r3, [sp, #20]
90025f28:	4619      	mov	r1, r3
90025f2a:	f04f 0c0a 	mov.w	ip, #10
90025f2e:	4620      	mov	r0, r4
90025f30:	f810 2b01 	ldrb.w	r2, [r0], #1
90025f34:	3a30      	subs	r2, #48	; 0x30
90025f36:	2a09      	cmp	r2, #9
90025f38:	d903      	bls.n	90025f42 <_svfiprintf_r+0x1a6>
90025f3a:	2b00      	cmp	r3, #0
90025f3c:	d0c6      	beq.n	90025ecc <_svfiprintf_r+0x130>
90025f3e:	9105      	str	r1, [sp, #20]
90025f40:	e7c4      	b.n	90025ecc <_svfiprintf_r+0x130>
90025f42:	fb0c 2101 	mla	r1, ip, r1, r2
90025f46:	4604      	mov	r4, r0
90025f48:	2301      	movs	r3, #1
90025f4a:	e7f0      	b.n	90025f2e <_svfiprintf_r+0x192>
90025f4c:	ab03      	add	r3, sp, #12
90025f4e:	9300      	str	r3, [sp, #0]
90025f50:	462a      	mov	r2, r5
90025f52:	4b0f      	ldr	r3, [pc, #60]	; (90025f90 <_svfiprintf_r+0x1f4>)
90025f54:	a904      	add	r1, sp, #16
90025f56:	4638      	mov	r0, r7
90025f58:	f7fd fe2a 	bl	90023bb0 <_printf_float>
90025f5c:	1c42      	adds	r2, r0, #1
90025f5e:	4606      	mov	r6, r0
90025f60:	d1d6      	bne.n	90025f10 <_svfiprintf_r+0x174>
90025f62:	89ab      	ldrh	r3, [r5, #12]
90025f64:	065b      	lsls	r3, r3, #25
90025f66:	f53f af2d 	bmi.w	90025dc4 <_svfiprintf_r+0x28>
90025f6a:	9809      	ldr	r0, [sp, #36]	; 0x24
90025f6c:	b01d      	add	sp, #116	; 0x74
90025f6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90025f72:	ab03      	add	r3, sp, #12
90025f74:	9300      	str	r3, [sp, #0]
90025f76:	462a      	mov	r2, r5
90025f78:	4b05      	ldr	r3, [pc, #20]	; (90025f90 <_svfiprintf_r+0x1f4>)
90025f7a:	a904      	add	r1, sp, #16
90025f7c:	4638      	mov	r0, r7
90025f7e:	f7fe f89f 	bl	900240c0 <_printf_i>
90025f82:	e7eb      	b.n	90025f5c <_svfiprintf_r+0x1c0>
90025f84:	90029438 	.word	0x90029438
90025f88:	90029442 	.word	0x90029442
90025f8c:	90023bb1 	.word	0x90023bb1
90025f90:	90025ce9 	.word	0x90025ce9
90025f94:	9002943e 	.word	0x9002943e

90025f98 <__sfputc_r>:
90025f98:	6893      	ldr	r3, [r2, #8]
90025f9a:	3b01      	subs	r3, #1
90025f9c:	2b00      	cmp	r3, #0
90025f9e:	b410      	push	{r4}
90025fa0:	6093      	str	r3, [r2, #8]
90025fa2:	da08      	bge.n	90025fb6 <__sfputc_r+0x1e>
90025fa4:	6994      	ldr	r4, [r2, #24]
90025fa6:	42a3      	cmp	r3, r4
90025fa8:	db01      	blt.n	90025fae <__sfputc_r+0x16>
90025faa:	290a      	cmp	r1, #10
90025fac:	d103      	bne.n	90025fb6 <__sfputc_r+0x1e>
90025fae:	f85d 4b04 	ldr.w	r4, [sp], #4
90025fb2:	f7fe bae0 	b.w	90024576 <__swbuf_r>
90025fb6:	6813      	ldr	r3, [r2, #0]
90025fb8:	1c58      	adds	r0, r3, #1
90025fba:	6010      	str	r0, [r2, #0]
90025fbc:	7019      	strb	r1, [r3, #0]
90025fbe:	4608      	mov	r0, r1
90025fc0:	f85d 4b04 	ldr.w	r4, [sp], #4
90025fc4:	4770      	bx	lr

90025fc6 <__sfputs_r>:
90025fc6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
90025fc8:	4606      	mov	r6, r0
90025fca:	460f      	mov	r7, r1
90025fcc:	4614      	mov	r4, r2
90025fce:	18d5      	adds	r5, r2, r3
90025fd0:	42ac      	cmp	r4, r5
90025fd2:	d101      	bne.n	90025fd8 <__sfputs_r+0x12>
90025fd4:	2000      	movs	r0, #0
90025fd6:	e007      	b.n	90025fe8 <__sfputs_r+0x22>
90025fd8:	f814 1b01 	ldrb.w	r1, [r4], #1
90025fdc:	463a      	mov	r2, r7
90025fde:	4630      	mov	r0, r6
90025fe0:	f7ff ffda 	bl	90025f98 <__sfputc_r>
90025fe4:	1c43      	adds	r3, r0, #1
90025fe6:	d1f3      	bne.n	90025fd0 <__sfputs_r+0xa>
90025fe8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

90025fec <_vfiprintf_r>:
90025fec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90025ff0:	460d      	mov	r5, r1
90025ff2:	b09d      	sub	sp, #116	; 0x74
90025ff4:	4614      	mov	r4, r2
90025ff6:	4698      	mov	r8, r3
90025ff8:	4606      	mov	r6, r0
90025ffa:	b118      	cbz	r0, 90026004 <_vfiprintf_r+0x18>
90025ffc:	6a03      	ldr	r3, [r0, #32]
90025ffe:	b90b      	cbnz	r3, 90026004 <_vfiprintf_r+0x18>
90026000:	f7fe f9fa 	bl	900243f8 <__sinit>
90026004:	6e6b      	ldr	r3, [r5, #100]	; 0x64
90026006:	07d9      	lsls	r1, r3, #31
90026008:	d405      	bmi.n	90026016 <_vfiprintf_r+0x2a>
9002600a:	89ab      	ldrh	r3, [r5, #12]
9002600c:	059a      	lsls	r2, r3, #22
9002600e:	d402      	bmi.n	90026016 <_vfiprintf_r+0x2a>
90026010:	6da8      	ldr	r0, [r5, #88]	; 0x58
90026012:	f7fe fc3d 	bl	90024890 <__retarget_lock_acquire_recursive>
90026016:	89ab      	ldrh	r3, [r5, #12]
90026018:	071b      	lsls	r3, r3, #28
9002601a:	d501      	bpl.n	90026020 <_vfiprintf_r+0x34>
9002601c:	692b      	ldr	r3, [r5, #16]
9002601e:	b99b      	cbnz	r3, 90026048 <_vfiprintf_r+0x5c>
90026020:	4629      	mov	r1, r5
90026022:	4630      	mov	r0, r6
90026024:	f7fe fae4 	bl	900245f0 <__swsetup_r>
90026028:	b170      	cbz	r0, 90026048 <_vfiprintf_r+0x5c>
9002602a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
9002602c:	07dc      	lsls	r4, r3, #31
9002602e:	d504      	bpl.n	9002603a <_vfiprintf_r+0x4e>
90026030:	f04f 30ff 	mov.w	r0, #4294967295
90026034:	b01d      	add	sp, #116	; 0x74
90026036:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9002603a:	89ab      	ldrh	r3, [r5, #12]
9002603c:	0598      	lsls	r0, r3, #22
9002603e:	d4f7      	bmi.n	90026030 <_vfiprintf_r+0x44>
90026040:	6da8      	ldr	r0, [r5, #88]	; 0x58
90026042:	f7fe fc26 	bl	90024892 <__retarget_lock_release_recursive>
90026046:	e7f3      	b.n	90026030 <_vfiprintf_r+0x44>
90026048:	2300      	movs	r3, #0
9002604a:	9309      	str	r3, [sp, #36]	; 0x24
9002604c:	2320      	movs	r3, #32
9002604e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
90026052:	f8cd 800c 	str.w	r8, [sp, #12]
90026056:	2330      	movs	r3, #48	; 0x30
90026058:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 9002620c <_vfiprintf_r+0x220>
9002605c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
90026060:	f04f 0901 	mov.w	r9, #1
90026064:	4623      	mov	r3, r4
90026066:	469a      	mov	sl, r3
90026068:	f813 2b01 	ldrb.w	r2, [r3], #1
9002606c:	b10a      	cbz	r2, 90026072 <_vfiprintf_r+0x86>
9002606e:	2a25      	cmp	r2, #37	; 0x25
90026070:	d1f9      	bne.n	90026066 <_vfiprintf_r+0x7a>
90026072:	ebba 0b04 	subs.w	fp, sl, r4
90026076:	d00b      	beq.n	90026090 <_vfiprintf_r+0xa4>
90026078:	465b      	mov	r3, fp
9002607a:	4622      	mov	r2, r4
9002607c:	4629      	mov	r1, r5
9002607e:	4630      	mov	r0, r6
90026080:	f7ff ffa1 	bl	90025fc6 <__sfputs_r>
90026084:	3001      	adds	r0, #1
90026086:	f000 80a9 	beq.w	900261dc <_vfiprintf_r+0x1f0>
9002608a:	9a09      	ldr	r2, [sp, #36]	; 0x24
9002608c:	445a      	add	r2, fp
9002608e:	9209      	str	r2, [sp, #36]	; 0x24
90026090:	f89a 3000 	ldrb.w	r3, [sl]
90026094:	2b00      	cmp	r3, #0
90026096:	f000 80a1 	beq.w	900261dc <_vfiprintf_r+0x1f0>
9002609a:	2300      	movs	r3, #0
9002609c:	f04f 32ff 	mov.w	r2, #4294967295
900260a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
900260a4:	f10a 0a01 	add.w	sl, sl, #1
900260a8:	9304      	str	r3, [sp, #16]
900260aa:	9307      	str	r3, [sp, #28]
900260ac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
900260b0:	931a      	str	r3, [sp, #104]	; 0x68
900260b2:	4654      	mov	r4, sl
900260b4:	2205      	movs	r2, #5
900260b6:	f814 1b01 	ldrb.w	r1, [r4], #1
900260ba:	4854      	ldr	r0, [pc, #336]	; (9002620c <_vfiprintf_r+0x220>)
900260bc:	f7da f910 	bl	900002e0 <memchr>
900260c0:	9a04      	ldr	r2, [sp, #16]
900260c2:	b9d8      	cbnz	r0, 900260fc <_vfiprintf_r+0x110>
900260c4:	06d1      	lsls	r1, r2, #27
900260c6:	bf44      	itt	mi
900260c8:	2320      	movmi	r3, #32
900260ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
900260ce:	0713      	lsls	r3, r2, #28
900260d0:	bf44      	itt	mi
900260d2:	232b      	movmi	r3, #43	; 0x2b
900260d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
900260d8:	f89a 3000 	ldrb.w	r3, [sl]
900260dc:	2b2a      	cmp	r3, #42	; 0x2a
900260de:	d015      	beq.n	9002610c <_vfiprintf_r+0x120>
900260e0:	9a07      	ldr	r2, [sp, #28]
900260e2:	4654      	mov	r4, sl
900260e4:	2000      	movs	r0, #0
900260e6:	f04f 0c0a 	mov.w	ip, #10
900260ea:	4621      	mov	r1, r4
900260ec:	f811 3b01 	ldrb.w	r3, [r1], #1
900260f0:	3b30      	subs	r3, #48	; 0x30
900260f2:	2b09      	cmp	r3, #9
900260f4:	d94d      	bls.n	90026192 <_vfiprintf_r+0x1a6>
900260f6:	b1b0      	cbz	r0, 90026126 <_vfiprintf_r+0x13a>
900260f8:	9207      	str	r2, [sp, #28]
900260fa:	e014      	b.n	90026126 <_vfiprintf_r+0x13a>
900260fc:	eba0 0308 	sub.w	r3, r0, r8
90026100:	fa09 f303 	lsl.w	r3, r9, r3
90026104:	4313      	orrs	r3, r2
90026106:	9304      	str	r3, [sp, #16]
90026108:	46a2      	mov	sl, r4
9002610a:	e7d2      	b.n	900260b2 <_vfiprintf_r+0xc6>
9002610c:	9b03      	ldr	r3, [sp, #12]
9002610e:	1d19      	adds	r1, r3, #4
90026110:	681b      	ldr	r3, [r3, #0]
90026112:	9103      	str	r1, [sp, #12]
90026114:	2b00      	cmp	r3, #0
90026116:	bfbb      	ittet	lt
90026118:	425b      	neglt	r3, r3
9002611a:	f042 0202 	orrlt.w	r2, r2, #2
9002611e:	9307      	strge	r3, [sp, #28]
90026120:	9307      	strlt	r3, [sp, #28]
90026122:	bfb8      	it	lt
90026124:	9204      	strlt	r2, [sp, #16]
90026126:	7823      	ldrb	r3, [r4, #0]
90026128:	2b2e      	cmp	r3, #46	; 0x2e
9002612a:	d10c      	bne.n	90026146 <_vfiprintf_r+0x15a>
9002612c:	7863      	ldrb	r3, [r4, #1]
9002612e:	2b2a      	cmp	r3, #42	; 0x2a
90026130:	d134      	bne.n	9002619c <_vfiprintf_r+0x1b0>
90026132:	9b03      	ldr	r3, [sp, #12]
90026134:	1d1a      	adds	r2, r3, #4
90026136:	681b      	ldr	r3, [r3, #0]
90026138:	9203      	str	r2, [sp, #12]
9002613a:	2b00      	cmp	r3, #0
9002613c:	bfb8      	it	lt
9002613e:	f04f 33ff 	movlt.w	r3, #4294967295
90026142:	3402      	adds	r4, #2
90026144:	9305      	str	r3, [sp, #20]
90026146:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 9002621c <_vfiprintf_r+0x230>
9002614a:	7821      	ldrb	r1, [r4, #0]
9002614c:	2203      	movs	r2, #3
9002614e:	4650      	mov	r0, sl
90026150:	f7da f8c6 	bl	900002e0 <memchr>
90026154:	b138      	cbz	r0, 90026166 <_vfiprintf_r+0x17a>
90026156:	9b04      	ldr	r3, [sp, #16]
90026158:	eba0 000a 	sub.w	r0, r0, sl
9002615c:	2240      	movs	r2, #64	; 0x40
9002615e:	4082      	lsls	r2, r0
90026160:	4313      	orrs	r3, r2
90026162:	3401      	adds	r4, #1
90026164:	9304      	str	r3, [sp, #16]
90026166:	f814 1b01 	ldrb.w	r1, [r4], #1
9002616a:	4829      	ldr	r0, [pc, #164]	; (90026210 <_vfiprintf_r+0x224>)
9002616c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
90026170:	2206      	movs	r2, #6
90026172:	f7da f8b5 	bl	900002e0 <memchr>
90026176:	2800      	cmp	r0, #0
90026178:	d03f      	beq.n	900261fa <_vfiprintf_r+0x20e>
9002617a:	4b26      	ldr	r3, [pc, #152]	; (90026214 <_vfiprintf_r+0x228>)
9002617c:	bb1b      	cbnz	r3, 900261c6 <_vfiprintf_r+0x1da>
9002617e:	9b03      	ldr	r3, [sp, #12]
90026180:	3307      	adds	r3, #7
90026182:	f023 0307 	bic.w	r3, r3, #7
90026186:	3308      	adds	r3, #8
90026188:	9303      	str	r3, [sp, #12]
9002618a:	9b09      	ldr	r3, [sp, #36]	; 0x24
9002618c:	443b      	add	r3, r7
9002618e:	9309      	str	r3, [sp, #36]	; 0x24
90026190:	e768      	b.n	90026064 <_vfiprintf_r+0x78>
90026192:	fb0c 3202 	mla	r2, ip, r2, r3
90026196:	460c      	mov	r4, r1
90026198:	2001      	movs	r0, #1
9002619a:	e7a6      	b.n	900260ea <_vfiprintf_r+0xfe>
9002619c:	2300      	movs	r3, #0
9002619e:	3401      	adds	r4, #1
900261a0:	9305      	str	r3, [sp, #20]
900261a2:	4619      	mov	r1, r3
900261a4:	f04f 0c0a 	mov.w	ip, #10
900261a8:	4620      	mov	r0, r4
900261aa:	f810 2b01 	ldrb.w	r2, [r0], #1
900261ae:	3a30      	subs	r2, #48	; 0x30
900261b0:	2a09      	cmp	r2, #9
900261b2:	d903      	bls.n	900261bc <_vfiprintf_r+0x1d0>
900261b4:	2b00      	cmp	r3, #0
900261b6:	d0c6      	beq.n	90026146 <_vfiprintf_r+0x15a>
900261b8:	9105      	str	r1, [sp, #20]
900261ba:	e7c4      	b.n	90026146 <_vfiprintf_r+0x15a>
900261bc:	fb0c 2101 	mla	r1, ip, r1, r2
900261c0:	4604      	mov	r4, r0
900261c2:	2301      	movs	r3, #1
900261c4:	e7f0      	b.n	900261a8 <_vfiprintf_r+0x1bc>
900261c6:	ab03      	add	r3, sp, #12
900261c8:	9300      	str	r3, [sp, #0]
900261ca:	462a      	mov	r2, r5
900261cc:	4b12      	ldr	r3, [pc, #72]	; (90026218 <_vfiprintf_r+0x22c>)
900261ce:	a904      	add	r1, sp, #16
900261d0:	4630      	mov	r0, r6
900261d2:	f7fd fced 	bl	90023bb0 <_printf_float>
900261d6:	4607      	mov	r7, r0
900261d8:	1c78      	adds	r0, r7, #1
900261da:	d1d6      	bne.n	9002618a <_vfiprintf_r+0x19e>
900261dc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
900261de:	07d9      	lsls	r1, r3, #31
900261e0:	d405      	bmi.n	900261ee <_vfiprintf_r+0x202>
900261e2:	89ab      	ldrh	r3, [r5, #12]
900261e4:	059a      	lsls	r2, r3, #22
900261e6:	d402      	bmi.n	900261ee <_vfiprintf_r+0x202>
900261e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
900261ea:	f7fe fb52 	bl	90024892 <__retarget_lock_release_recursive>
900261ee:	89ab      	ldrh	r3, [r5, #12]
900261f0:	065b      	lsls	r3, r3, #25
900261f2:	f53f af1d 	bmi.w	90026030 <_vfiprintf_r+0x44>
900261f6:	9809      	ldr	r0, [sp, #36]	; 0x24
900261f8:	e71c      	b.n	90026034 <_vfiprintf_r+0x48>
900261fa:	ab03      	add	r3, sp, #12
900261fc:	9300      	str	r3, [sp, #0]
900261fe:	462a      	mov	r2, r5
90026200:	4b05      	ldr	r3, [pc, #20]	; (90026218 <_vfiprintf_r+0x22c>)
90026202:	a904      	add	r1, sp, #16
90026204:	4630      	mov	r0, r6
90026206:	f7fd ff5b 	bl	900240c0 <_printf_i>
9002620a:	e7e4      	b.n	900261d6 <_vfiprintf_r+0x1ea>
9002620c:	90029438 	.word	0x90029438
90026210:	90029442 	.word	0x90029442
90026214:	90023bb1 	.word	0x90023bb1
90026218:	90025fc7 	.word	0x90025fc7
9002621c:	9002943e 	.word	0x9002943e

90026220 <__sflush_r>:
90026220:	898a      	ldrh	r2, [r1, #12]
90026222:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90026226:	4605      	mov	r5, r0
90026228:	0710      	lsls	r0, r2, #28
9002622a:	460c      	mov	r4, r1
9002622c:	d458      	bmi.n	900262e0 <__sflush_r+0xc0>
9002622e:	684b      	ldr	r3, [r1, #4]
90026230:	2b00      	cmp	r3, #0
90026232:	dc05      	bgt.n	90026240 <__sflush_r+0x20>
90026234:	6c0b      	ldr	r3, [r1, #64]	; 0x40
90026236:	2b00      	cmp	r3, #0
90026238:	dc02      	bgt.n	90026240 <__sflush_r+0x20>
9002623a:	2000      	movs	r0, #0
9002623c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
90026240:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
90026242:	2e00      	cmp	r6, #0
90026244:	d0f9      	beq.n	9002623a <__sflush_r+0x1a>
90026246:	2300      	movs	r3, #0
90026248:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
9002624c:	682f      	ldr	r7, [r5, #0]
9002624e:	6a21      	ldr	r1, [r4, #32]
90026250:	602b      	str	r3, [r5, #0]
90026252:	d032      	beq.n	900262ba <__sflush_r+0x9a>
90026254:	6d60      	ldr	r0, [r4, #84]	; 0x54
90026256:	89a3      	ldrh	r3, [r4, #12]
90026258:	075a      	lsls	r2, r3, #29
9002625a:	d505      	bpl.n	90026268 <__sflush_r+0x48>
9002625c:	6863      	ldr	r3, [r4, #4]
9002625e:	1ac0      	subs	r0, r0, r3
90026260:	6b63      	ldr	r3, [r4, #52]	; 0x34
90026262:	b10b      	cbz	r3, 90026268 <__sflush_r+0x48>
90026264:	6c23      	ldr	r3, [r4, #64]	; 0x40
90026266:	1ac0      	subs	r0, r0, r3
90026268:	2300      	movs	r3, #0
9002626a:	4602      	mov	r2, r0
9002626c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
9002626e:	6a21      	ldr	r1, [r4, #32]
90026270:	4628      	mov	r0, r5
90026272:	47b0      	blx	r6
90026274:	1c43      	adds	r3, r0, #1
90026276:	89a3      	ldrh	r3, [r4, #12]
90026278:	d106      	bne.n	90026288 <__sflush_r+0x68>
9002627a:	6829      	ldr	r1, [r5, #0]
9002627c:	291d      	cmp	r1, #29
9002627e:	d82b      	bhi.n	900262d8 <__sflush_r+0xb8>
90026280:	4a29      	ldr	r2, [pc, #164]	; (90026328 <__sflush_r+0x108>)
90026282:	410a      	asrs	r2, r1
90026284:	07d6      	lsls	r6, r2, #31
90026286:	d427      	bmi.n	900262d8 <__sflush_r+0xb8>
90026288:	2200      	movs	r2, #0
9002628a:	6062      	str	r2, [r4, #4]
9002628c:	04d9      	lsls	r1, r3, #19
9002628e:	6922      	ldr	r2, [r4, #16]
90026290:	6022      	str	r2, [r4, #0]
90026292:	d504      	bpl.n	9002629e <__sflush_r+0x7e>
90026294:	1c42      	adds	r2, r0, #1
90026296:	d101      	bne.n	9002629c <__sflush_r+0x7c>
90026298:	682b      	ldr	r3, [r5, #0]
9002629a:	b903      	cbnz	r3, 9002629e <__sflush_r+0x7e>
9002629c:	6560      	str	r0, [r4, #84]	; 0x54
9002629e:	6b61      	ldr	r1, [r4, #52]	; 0x34
900262a0:	602f      	str	r7, [r5, #0]
900262a2:	2900      	cmp	r1, #0
900262a4:	d0c9      	beq.n	9002623a <__sflush_r+0x1a>
900262a6:	f104 0344 	add.w	r3, r4, #68	; 0x44
900262aa:	4299      	cmp	r1, r3
900262ac:	d002      	beq.n	900262b4 <__sflush_r+0x94>
900262ae:	4628      	mov	r0, r5
900262b0:	f7ff f952 	bl	90025558 <_free_r>
900262b4:	2000      	movs	r0, #0
900262b6:	6360      	str	r0, [r4, #52]	; 0x34
900262b8:	e7c0      	b.n	9002623c <__sflush_r+0x1c>
900262ba:	2301      	movs	r3, #1
900262bc:	4628      	mov	r0, r5
900262be:	47b0      	blx	r6
900262c0:	1c41      	adds	r1, r0, #1
900262c2:	d1c8      	bne.n	90026256 <__sflush_r+0x36>
900262c4:	682b      	ldr	r3, [r5, #0]
900262c6:	2b00      	cmp	r3, #0
900262c8:	d0c5      	beq.n	90026256 <__sflush_r+0x36>
900262ca:	2b1d      	cmp	r3, #29
900262cc:	d001      	beq.n	900262d2 <__sflush_r+0xb2>
900262ce:	2b16      	cmp	r3, #22
900262d0:	d101      	bne.n	900262d6 <__sflush_r+0xb6>
900262d2:	602f      	str	r7, [r5, #0]
900262d4:	e7b1      	b.n	9002623a <__sflush_r+0x1a>
900262d6:	89a3      	ldrh	r3, [r4, #12]
900262d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
900262dc:	81a3      	strh	r3, [r4, #12]
900262de:	e7ad      	b.n	9002623c <__sflush_r+0x1c>
900262e0:	690f      	ldr	r7, [r1, #16]
900262e2:	2f00      	cmp	r7, #0
900262e4:	d0a9      	beq.n	9002623a <__sflush_r+0x1a>
900262e6:	0793      	lsls	r3, r2, #30
900262e8:	680e      	ldr	r6, [r1, #0]
900262ea:	bf08      	it	eq
900262ec:	694b      	ldreq	r3, [r1, #20]
900262ee:	600f      	str	r7, [r1, #0]
900262f0:	bf18      	it	ne
900262f2:	2300      	movne	r3, #0
900262f4:	eba6 0807 	sub.w	r8, r6, r7
900262f8:	608b      	str	r3, [r1, #8]
900262fa:	f1b8 0f00 	cmp.w	r8, #0
900262fe:	dd9c      	ble.n	9002623a <__sflush_r+0x1a>
90026300:	6a21      	ldr	r1, [r4, #32]
90026302:	6aa6      	ldr	r6, [r4, #40]	; 0x28
90026304:	4643      	mov	r3, r8
90026306:	463a      	mov	r2, r7
90026308:	4628      	mov	r0, r5
9002630a:	47b0      	blx	r6
9002630c:	2800      	cmp	r0, #0
9002630e:	dc06      	bgt.n	9002631e <__sflush_r+0xfe>
90026310:	89a3      	ldrh	r3, [r4, #12]
90026312:	f043 0340 	orr.w	r3, r3, #64	; 0x40
90026316:	81a3      	strh	r3, [r4, #12]
90026318:	f04f 30ff 	mov.w	r0, #4294967295
9002631c:	e78e      	b.n	9002623c <__sflush_r+0x1c>
9002631e:	4407      	add	r7, r0
90026320:	eba8 0800 	sub.w	r8, r8, r0
90026324:	e7e9      	b.n	900262fa <__sflush_r+0xda>
90026326:	bf00      	nop
90026328:	dfbffffe 	.word	0xdfbffffe

9002632c <_fflush_r>:
9002632c:	b538      	push	{r3, r4, r5, lr}
9002632e:	690b      	ldr	r3, [r1, #16]
90026330:	4605      	mov	r5, r0
90026332:	460c      	mov	r4, r1
90026334:	b913      	cbnz	r3, 9002633c <_fflush_r+0x10>
90026336:	2500      	movs	r5, #0
90026338:	4628      	mov	r0, r5
9002633a:	bd38      	pop	{r3, r4, r5, pc}
9002633c:	b118      	cbz	r0, 90026346 <_fflush_r+0x1a>
9002633e:	6a03      	ldr	r3, [r0, #32]
90026340:	b90b      	cbnz	r3, 90026346 <_fflush_r+0x1a>
90026342:	f7fe f859 	bl	900243f8 <__sinit>
90026346:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
9002634a:	2b00      	cmp	r3, #0
9002634c:	d0f3      	beq.n	90026336 <_fflush_r+0xa>
9002634e:	6e62      	ldr	r2, [r4, #100]	; 0x64
90026350:	07d0      	lsls	r0, r2, #31
90026352:	d404      	bmi.n	9002635e <_fflush_r+0x32>
90026354:	0599      	lsls	r1, r3, #22
90026356:	d402      	bmi.n	9002635e <_fflush_r+0x32>
90026358:	6da0      	ldr	r0, [r4, #88]	; 0x58
9002635a:	f7fe fa99 	bl	90024890 <__retarget_lock_acquire_recursive>
9002635e:	4628      	mov	r0, r5
90026360:	4621      	mov	r1, r4
90026362:	f7ff ff5d 	bl	90026220 <__sflush_r>
90026366:	6e63      	ldr	r3, [r4, #100]	; 0x64
90026368:	07da      	lsls	r2, r3, #31
9002636a:	4605      	mov	r5, r0
9002636c:	d4e4      	bmi.n	90026338 <_fflush_r+0xc>
9002636e:	89a3      	ldrh	r3, [r4, #12]
90026370:	059b      	lsls	r3, r3, #22
90026372:	d4e1      	bmi.n	90026338 <_fflush_r+0xc>
90026374:	6da0      	ldr	r0, [r4, #88]	; 0x58
90026376:	f7fe fa8c 	bl	90024892 <__retarget_lock_release_recursive>
9002637a:	e7dd      	b.n	90026338 <_fflush_r+0xc>

9002637c <__swhatbuf_r>:
9002637c:	b570      	push	{r4, r5, r6, lr}
9002637e:	460c      	mov	r4, r1
90026380:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
90026384:	2900      	cmp	r1, #0
90026386:	b096      	sub	sp, #88	; 0x58
90026388:	4615      	mov	r5, r2
9002638a:	461e      	mov	r6, r3
9002638c:	da0d      	bge.n	900263aa <__swhatbuf_r+0x2e>
9002638e:	89a3      	ldrh	r3, [r4, #12]
90026390:	f013 0f80 	tst.w	r3, #128	; 0x80
90026394:	f04f 0100 	mov.w	r1, #0
90026398:	bf0c      	ite	eq
9002639a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
9002639e:	2340      	movne	r3, #64	; 0x40
900263a0:	2000      	movs	r0, #0
900263a2:	6031      	str	r1, [r6, #0]
900263a4:	602b      	str	r3, [r5, #0]
900263a6:	b016      	add	sp, #88	; 0x58
900263a8:	bd70      	pop	{r4, r5, r6, pc}
900263aa:	466a      	mov	r2, sp
900263ac:	f000 f862 	bl	90026474 <_fstat_r>
900263b0:	2800      	cmp	r0, #0
900263b2:	dbec      	blt.n	9002638e <__swhatbuf_r+0x12>
900263b4:	9901      	ldr	r1, [sp, #4]
900263b6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
900263ba:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
900263be:	4259      	negs	r1, r3
900263c0:	4159      	adcs	r1, r3
900263c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
900263c6:	e7eb      	b.n	900263a0 <__swhatbuf_r+0x24>

900263c8 <__smakebuf_r>:
900263c8:	898b      	ldrh	r3, [r1, #12]
900263ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
900263cc:	079d      	lsls	r5, r3, #30
900263ce:	4606      	mov	r6, r0
900263d0:	460c      	mov	r4, r1
900263d2:	d507      	bpl.n	900263e4 <__smakebuf_r+0x1c>
900263d4:	f104 0347 	add.w	r3, r4, #71	; 0x47
900263d8:	6023      	str	r3, [r4, #0]
900263da:	6123      	str	r3, [r4, #16]
900263dc:	2301      	movs	r3, #1
900263de:	6163      	str	r3, [r4, #20]
900263e0:	b002      	add	sp, #8
900263e2:	bd70      	pop	{r4, r5, r6, pc}
900263e4:	ab01      	add	r3, sp, #4
900263e6:	466a      	mov	r2, sp
900263e8:	f7ff ffc8 	bl	9002637c <__swhatbuf_r>
900263ec:	9900      	ldr	r1, [sp, #0]
900263ee:	4605      	mov	r5, r0
900263f0:	4630      	mov	r0, r6
900263f2:	f7fd fab3 	bl	9002395c <_malloc_r>
900263f6:	b948      	cbnz	r0, 9002640c <__smakebuf_r+0x44>
900263f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
900263fc:	059a      	lsls	r2, r3, #22
900263fe:	d4ef      	bmi.n	900263e0 <__smakebuf_r+0x18>
90026400:	f023 0303 	bic.w	r3, r3, #3
90026404:	f043 0302 	orr.w	r3, r3, #2
90026408:	81a3      	strh	r3, [r4, #12]
9002640a:	e7e3      	b.n	900263d4 <__smakebuf_r+0xc>
9002640c:	89a3      	ldrh	r3, [r4, #12]
9002640e:	6020      	str	r0, [r4, #0]
90026410:	f043 0380 	orr.w	r3, r3, #128	; 0x80
90026414:	81a3      	strh	r3, [r4, #12]
90026416:	9b00      	ldr	r3, [sp, #0]
90026418:	6163      	str	r3, [r4, #20]
9002641a:	9b01      	ldr	r3, [sp, #4]
9002641c:	6120      	str	r0, [r4, #16]
9002641e:	b15b      	cbz	r3, 90026438 <__smakebuf_r+0x70>
90026420:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
90026424:	4630      	mov	r0, r6
90026426:	f000 f837 	bl	90026498 <_isatty_r>
9002642a:	b128      	cbz	r0, 90026438 <__smakebuf_r+0x70>
9002642c:	89a3      	ldrh	r3, [r4, #12]
9002642e:	f023 0303 	bic.w	r3, r3, #3
90026432:	f043 0301 	orr.w	r3, r3, #1
90026436:	81a3      	strh	r3, [r4, #12]
90026438:	89a3      	ldrh	r3, [r4, #12]
9002643a:	431d      	orrs	r5, r3
9002643c:	81a5      	strh	r5, [r4, #12]
9002643e:	e7cf      	b.n	900263e0 <__smakebuf_r+0x18>

90026440 <memmove>:
90026440:	4288      	cmp	r0, r1
90026442:	b510      	push	{r4, lr}
90026444:	eb01 0402 	add.w	r4, r1, r2
90026448:	d902      	bls.n	90026450 <memmove+0x10>
9002644a:	4284      	cmp	r4, r0
9002644c:	4623      	mov	r3, r4
9002644e:	d807      	bhi.n	90026460 <memmove+0x20>
90026450:	1e43      	subs	r3, r0, #1
90026452:	42a1      	cmp	r1, r4
90026454:	d008      	beq.n	90026468 <memmove+0x28>
90026456:	f811 2b01 	ldrb.w	r2, [r1], #1
9002645a:	f803 2f01 	strb.w	r2, [r3, #1]!
9002645e:	e7f8      	b.n	90026452 <memmove+0x12>
90026460:	4402      	add	r2, r0
90026462:	4601      	mov	r1, r0
90026464:	428a      	cmp	r2, r1
90026466:	d100      	bne.n	9002646a <memmove+0x2a>
90026468:	bd10      	pop	{r4, pc}
9002646a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
9002646e:	f802 4d01 	strb.w	r4, [r2, #-1]!
90026472:	e7f7      	b.n	90026464 <memmove+0x24>

90026474 <_fstat_r>:
90026474:	b538      	push	{r3, r4, r5, lr}
90026476:	4d07      	ldr	r5, [pc, #28]	; (90026494 <_fstat_r+0x20>)
90026478:	2300      	movs	r3, #0
9002647a:	4604      	mov	r4, r0
9002647c:	4608      	mov	r0, r1
9002647e:	4611      	mov	r1, r2
90026480:	602b      	str	r3, [r5, #0]
90026482:	f7de f82d 	bl	900044e0 <_fstat>
90026486:	1c43      	adds	r3, r0, #1
90026488:	d102      	bne.n	90026490 <_fstat_r+0x1c>
9002648a:	682b      	ldr	r3, [r5, #0]
9002648c:	b103      	cbz	r3, 90026490 <_fstat_r+0x1c>
9002648e:	6023      	str	r3, [r4, #0]
90026490:	bd38      	pop	{r3, r4, r5, pc}
90026492:	bf00      	nop
90026494:	240226a4 	.word	0x240226a4

90026498 <_isatty_r>:
90026498:	b538      	push	{r3, r4, r5, lr}
9002649a:	4d06      	ldr	r5, [pc, #24]	; (900264b4 <_isatty_r+0x1c>)
9002649c:	2300      	movs	r3, #0
9002649e:	4604      	mov	r4, r0
900264a0:	4608      	mov	r0, r1
900264a2:	602b      	str	r3, [r5, #0]
900264a4:	f7de f822 	bl	900044ec <_isatty>
900264a8:	1c43      	adds	r3, r0, #1
900264aa:	d102      	bne.n	900264b2 <_isatty_r+0x1a>
900264ac:	682b      	ldr	r3, [r5, #0]
900264ae:	b103      	cbz	r3, 900264b2 <_isatty_r+0x1a>
900264b0:	6023      	str	r3, [r4, #0]
900264b2:	bd38      	pop	{r3, r4, r5, pc}
900264b4:	240226a4 	.word	0x240226a4

900264b8 <_calloc_r>:
900264b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
900264ba:	fba1 2402 	umull	r2, r4, r1, r2
900264be:	b94c      	cbnz	r4, 900264d4 <_calloc_r+0x1c>
900264c0:	4611      	mov	r1, r2
900264c2:	9201      	str	r2, [sp, #4]
900264c4:	f7fd fa4a 	bl	9002395c <_malloc_r>
900264c8:	9a01      	ldr	r2, [sp, #4]
900264ca:	4605      	mov	r5, r0
900264cc:	b930      	cbnz	r0, 900264dc <_calloc_r+0x24>
900264ce:	4628      	mov	r0, r5
900264d0:	b003      	add	sp, #12
900264d2:	bd30      	pop	{r4, r5, pc}
900264d4:	220c      	movs	r2, #12
900264d6:	6002      	str	r2, [r0, #0]
900264d8:	2500      	movs	r5, #0
900264da:	e7f8      	b.n	900264ce <_calloc_r+0x16>
900264dc:	4621      	mov	r1, r4
900264de:	f7fe f8df 	bl	900246a0 <memset>
900264e2:	e7f4      	b.n	900264ce <_calloc_r+0x16>

900264e4 <__ascii_mbtowc>:
900264e4:	b082      	sub	sp, #8
900264e6:	b901      	cbnz	r1, 900264ea <__ascii_mbtowc+0x6>
900264e8:	a901      	add	r1, sp, #4
900264ea:	b142      	cbz	r2, 900264fe <__ascii_mbtowc+0x1a>
900264ec:	b14b      	cbz	r3, 90026502 <__ascii_mbtowc+0x1e>
900264ee:	7813      	ldrb	r3, [r2, #0]
900264f0:	600b      	str	r3, [r1, #0]
900264f2:	7812      	ldrb	r2, [r2, #0]
900264f4:	1e10      	subs	r0, r2, #0
900264f6:	bf18      	it	ne
900264f8:	2001      	movne	r0, #1
900264fa:	b002      	add	sp, #8
900264fc:	4770      	bx	lr
900264fe:	4610      	mov	r0, r2
90026500:	e7fb      	b.n	900264fa <__ascii_mbtowc+0x16>
90026502:	f06f 0001 	mvn.w	r0, #1
90026506:	e7f8      	b.n	900264fa <__ascii_mbtowc+0x16>

90026508 <_realloc_r>:
90026508:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9002650c:	4680      	mov	r8, r0
9002650e:	4614      	mov	r4, r2
90026510:	460e      	mov	r6, r1
90026512:	b921      	cbnz	r1, 9002651e <_realloc_r+0x16>
90026514:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
90026518:	4611      	mov	r1, r2
9002651a:	f7fd ba1f 	b.w	9002395c <_malloc_r>
9002651e:	b92a      	cbnz	r2, 9002652c <_realloc_r+0x24>
90026520:	f7ff f81a 	bl	90025558 <_free_r>
90026524:	4625      	mov	r5, r4
90026526:	4628      	mov	r0, r5
90026528:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
9002652c:	f000 f828 	bl	90026580 <_malloc_usable_size_r>
90026530:	4284      	cmp	r4, r0
90026532:	4607      	mov	r7, r0
90026534:	d802      	bhi.n	9002653c <_realloc_r+0x34>
90026536:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
9002653a:	d812      	bhi.n	90026562 <_realloc_r+0x5a>
9002653c:	4621      	mov	r1, r4
9002653e:	4640      	mov	r0, r8
90026540:	f7fd fa0c 	bl	9002395c <_malloc_r>
90026544:	4605      	mov	r5, r0
90026546:	2800      	cmp	r0, #0
90026548:	d0ed      	beq.n	90026526 <_realloc_r+0x1e>
9002654a:	42bc      	cmp	r4, r7
9002654c:	4622      	mov	r2, r4
9002654e:	4631      	mov	r1, r6
90026550:	bf28      	it	cs
90026552:	463a      	movcs	r2, r7
90026554:	f7fe f99e 	bl	90024894 <memcpy>
90026558:	4631      	mov	r1, r6
9002655a:	4640      	mov	r0, r8
9002655c:	f7fe fffc 	bl	90025558 <_free_r>
90026560:	e7e1      	b.n	90026526 <_realloc_r+0x1e>
90026562:	4635      	mov	r5, r6
90026564:	e7df      	b.n	90026526 <_realloc_r+0x1e>

90026566 <__ascii_wctomb>:
90026566:	b149      	cbz	r1, 9002657c <__ascii_wctomb+0x16>
90026568:	2aff      	cmp	r2, #255	; 0xff
9002656a:	bf85      	ittet	hi
9002656c:	238a      	movhi	r3, #138	; 0x8a
9002656e:	6003      	strhi	r3, [r0, #0]
90026570:	700a      	strbls	r2, [r1, #0]
90026572:	f04f 30ff 	movhi.w	r0, #4294967295
90026576:	bf98      	it	ls
90026578:	2001      	movls	r0, #1
9002657a:	4770      	bx	lr
9002657c:	4608      	mov	r0, r1
9002657e:	4770      	bx	lr

90026580 <_malloc_usable_size_r>:
90026580:	f851 3c04 	ldr.w	r3, [r1, #-4]
90026584:	1f18      	subs	r0, r3, #4
90026586:	2b00      	cmp	r3, #0
90026588:	bfbc      	itt	lt
9002658a:	580b      	ldrlt	r3, [r1, r0]
9002658c:	18c0      	addlt	r0, r0, r3
9002658e:	4770      	bx	lr

90026590 <_init>:
90026590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
90026592:	bf00      	nop
90026594:	bcf8      	pop	{r3, r4, r5, r6, r7}
90026596:	bc08      	pop	{r3}
90026598:	469e      	mov	lr, r3
9002659a:	4770      	bx	lr

9002659c <_fini>:
9002659c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
9002659e:	bf00      	nop
900265a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
900265a2:	bc08      	pop	{r3}
900265a4:	469e      	mov	lr, r3
900265a6:	4770      	bx	lr
